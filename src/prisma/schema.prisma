// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id @default(cuid())
  sid       String   @unique
  data      String   @db.Text
  expiresAt DateTime
}

model User {
  id                  String                @id @default(cuid())
  publicId            String?               @unique
  fullName            String?
  email               String                @unique
  password            String
  cpf                 String?               @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  optInMarketing      Boolean               @default(false)
  avatarUrl           String?
  dataAiHint          String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType           @default(PHYSICAL)
  sellerId            String?
  auctioneerId        String?
  seller              Seller?               @relation(fields: [sellerId], references: [id])
  auctioneer          Auctioneer?           @relation(fields: [auctioneerId], references: [id])
  roles               UsersOnRoles[]
  tenants             UsersOnTenants[]
  bids                Bid[]
  notifications       Notification[]
  habilitations       AuctionHabilitation[]
  wins                UserWin[]             @relation("LotsWon")
  reviews             Review[]
  questions           LotQuestion[]
  documents           UserDocument[]
  createdMedia        MediaItem[]           @relation("UploadedBy")
  createdReports      Report[]
  maxBids             UserLotMaxBid[]
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

model Role {
  id              String         @id @default(cuid())
  name            String         @unique
  nameNormalized  String         @unique
  description     String?
  permissions     Json           @default("[]")
  users           UsersOnRoles[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model Tenant {
  id          String   @id @default(cuid())
  name        String
  subdomain   String?  @unique
  domain      String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       UsersOnTenants[]
  auctions    Auction[]
  lots        Lot[]
  assets      Asset[]
  sellers     Seller[]
  auctioneers Auctioneer[]
  bids        Bid[]
  judicialProcesses JudicialProcess[]
  notifications Notification[]
  reports     Report[]
}

model UsersOnTenants {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId   String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, tenantId])
}


model Lot {
  id                   String             @id @default(cuid())
  publicId             String?            @unique
  number               String?
  title                String
  description          String?            @db.Text
  status               LotStatus          @default(EM_BREVE)
  price                Decimal            @default(0.00) @db.Decimal(12, 2)
  initialPrice         Decimal?           @db.Decimal(12, 2)
  secondInitialPrice   Decimal?           @db.Decimal(12, 2)
  evaluationValue      Decimal?           @db.Decimal(12, 2)
  bidIncrementStep     Decimal?           @db.Decimal(12, 2)
  isFeatured           Boolean            @default(false)
  isExclusive          Boolean            @default(false)
  isRelisted           Boolean            @default(false)
  relistCount          Int                @default(0)
  originalLotId        String?
  relistedLots         Lot[]              @relation("RelistedLot")
  originalLot          Lot?               @relation("RelistedLot", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  bidsCount            Int                @default(0)
  views                Int                @default(0)
  dataAiHint           String?
  imageUrl             String?            @db.Text
  imageMediaId         String?
  galleryImageUrls     Json?
  mediaItemIds         Json?              @default("[]")
  inheritedMediaFromAssetId String?
  properties           String?            @db.Text
  mapAddress           String?
  latitude             Decimal?           @db.Decimal(10, 8)
  longitude            Decimal?           @db.Decimal(11, 8)
  winningBidTermUrl    String?
  winnerId             String?
  winner               User?              @relation("LotsWon", fields: [winnerId], references: [id], onDelete: SetNull)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  auction              Auction            @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId            String
  seller               Seller?            @relation(fields: [sellerId], references: [id])
  sellerId             String?
  auctioneer           Auctioneer?        @relation(fields: [auctioneerId], references: [id])
  auctioneerId         String?
  category             LotCategory?       @relation(fields: [categoryId], references: [id])
  categoryId           String?
  subcategory          Subcategory?       @relation(fields: [subcategoryId], references: [id])
  subcategoryId        String?
  bids                 Bid[]
  wins                 UserWin[]
  reviews              Review[]
  questions            LotQuestion[]
  city                 City?              @relation(fields: [cityId], references: [id])
  cityId               String?
  state                State?             @relation(fields: [stateId], references: [id])
  stateId              String?
  tenant               Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId             String
  assets               AssetsOnLots[]
  allowInstallmentBids Boolean            @default(true)
  type                 String?
  endDate              DateTime?
  stageDetails         Json?
  maxBids              UserLotMaxBid[]
  lotPrices            LotStagePrice[]
  judicialProcess      JudicialProcess?   @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId    String?

  @@index([auctionId])
  @@index([winnerId])
  @@index([sellerId])
  @@index([categoryId])
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

model Asset {
  id                   String       @id @default(cuid())
  publicId             String?      @unique
  title                String
  description          String?      @db.Text
  properties           String?      @db.Text
  status               AssetStatus
  evaluationValue      Decimal?     @db.Decimal(12, 2)
  imageUrl             String?      @db.Text
  imageMediaId         String?
  galleryImageUrls     Json?
  mediaItemIds         Json?        @default("[]")
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  dataAiHint           String?
  locationCity         String?
  locationState        String?
  street               String?
  number               String?
  complement           String?
  neighborhood         String?
  zipCode              String?
  latitude             Decimal?     @db.Decimal(10, 8)
  longitude            Decimal?     @db.Decimal(11, 8)
  tenant               Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId             String
  lots                 AssetsOnLots[]
  category             LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId           String?
  subcategory          Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId        String?
  judicialProcess      JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId    String?
  seller               Seller?      @relation(fields: [sellerId], references: [id])
  sellerId             String?
}

enum AssetStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

model AssetsOnLots {
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  asset     Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  assetId   String
  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([lotId, assetId])
}


model Auction {
  id                          String                @id @default(cuid())
  publicId                    String?               @unique
  slug                        String                @unique
  title                       String
  description                 String?               @db.Text
  status                      AuctionStatus         @default(RASCUNHO)
  auctionDate                 DateTime              @default(now())
  endDate                     DateTime?
  initialOffer                Decimal?              @db.Decimal(12, 2)
  estimatedRevenue            Decimal?              @db.Decimal(12, 2)
  achievedRevenue             Decimal?              @db.Decimal(12, 2)
  visits                      Int                   @default(0)
  auctionType                 AuctionType           @default(EXTRAJUDICIAL)
  auctionMethod               AuctionMethod         @default(STANDARD)
  participation               AuctionParticipation  @default(ONLINE)
  isFeaturedOnMarketplace     Boolean               @default(false)
  dataAiHint                  String?
  softCloseEnabled            Boolean               @default(false)
  softCloseMinutes            Int?                  @default(2)
  decrementAmount             Decimal?              @db.Decimal(12, 2)
  decrementIntervalSeconds    Int?
  floorPrice                  Decimal?              @db.Decimal(12, 2)
  automaticBiddingEnabled     Boolean               @default(false)
  allowInstallmentBids        Boolean               @default(true)
  silentBiddingEnabled        Boolean               @default(false)
  allowMultipleBidsPerUser    Boolean               @default(true)
  onlineUrl                   String?
  address                     String?
  city                        String?
  state                       String?
  zipCode                     String?
  latitude                    Decimal?              @db.Decimal(10, 8)
  longitude                   Decimal?              @db.Decimal(11, 8)
  documentsUrl                String?
  evaluationReportUrl         String?
  auctionCertificateUrl       String?
  sellingBranch               String?
  additionalTriggers          Json?                 @default("[]")
  createdAt                   DateTime              @default(now())
  updatedAt                   DateTime              @updatedAt
  lots                        Lot[]
  bids                        Bid[]
  notifications               Notification[]
  stages                      AuctionStage[]
  habilitations               AuctionHabilitation[]
  lotPrices                   LotStagePrice[]
  imageMediaId                String?
  imageUrl                    String?               @db.Text
  auctioneerId                String?
  sellerId                    String?
  categoryId                  String?
  cityId                      String?
  stateId                     String?
  judicialProcessId           String?
  tenantId                    String
  tenant                      Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  auctioneer                  Auctioneer?           @relation(fields: [auctioneerId], references: [id])
  seller                      Seller?               @relation(fields: [sellerId], references: [id])
  category                    LotCategory?          @relation(fields: [categoryId], references: [id])
  cityRef                     City?                 @relation("CityAuctions", fields: [cityId], references: [id])
  stateRef                    State?                @relation("StateAuctions", fields: [stateId], references: [id])
  judicialProcess             JudicialProcess?      @relation(fields: [judicialProcessId], references: [id])
  court                       Court?                @relation(fields: [courtId], references: [id])
  courtId                     String?
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

model JudicialProcess {
  id                   String             @id @default(cuid())
  publicId             String?            @unique
  processNumber        String             @unique
  isElectronic         Boolean            @default(true)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  court                Court?             @relation(fields: [courtId], references: [id])
  courtId              String?
  district             JudicialDistrict?  @relation(fields: [districtId], references: [id])
  districtId           String?
  branch               JudicialBranch?    @relation(fields: [branchId], references: [id])
  branchId             String?
  seller               Seller?            @relation(fields: [sellerId], references: [id])
  sellerId             String?
  parties              JudicialParty[]
  lots                 Lot[]
  assets               Asset[]
  auctions             Auction[]
  tenantId             String
  tenant               Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  mediaItems           MediaItem[]
}

model JudicialParty {
  id              String          @id @default(cuid())
  name            String
  documentNumber  String?
  partyType       ProcessPartyType
  process         JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId       String
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

model LotCategory {
  id                 String          @id @default(cuid())
  publicId           String?         @unique
  slug               String          @unique
  name               String          @unique
  description        String?
  hasSubcategories   Boolean         @default(false)
  displayOrder       Int             @default(0)
  iconName           String?
  dataAiHintIcon     String?
  logoUrl            String?
  logoMediaId        String?
  coverImageUrl      String?
  coverImageMediaId  String?
  dataAiHintCover    String?
  megaMenuImageUrl   String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu String?
  subcategories      Subcategory[]
  lots               Lot[]
  auctions           Auction[]
  assets             Asset[]
}

model Subcategory {
  id                String       @id @default(cuid())
  publicId            String?      @unique
  slug              String       @unique
  name              String
  description       String?
  displayOrder      Int          @default(0)
  iconUrl           String?
  iconMediaId       String?
  dataAiHintIcon    String?
  parentCategory    LotCategory? @relation(fields: [parentCategoryId], references: [id])
  parentCategoryId  String?
  lots              Lot[]
  assets            Asset[]

  @@unique([name, parentCategoryId])
}

model Seller {
  id                         String             @id @default(cuid())
  publicId                   String?            @unique
  slug                       String             @unique
  name                       String
  isJudicial                 Boolean            @default(false)
  judicialBranchId           String?
  contactName                String?
  email                      String?
  phone                      String?
  website                    String?
  logoUrl                    String?
  logoMediaId                String?
  dataAiHintLogo             String?
  description                String?            @db.Text
  createdAt                  DateTime           @default(now())
  updatedAt                  DateTime           @updatedAt
  city                       String?
  state                      String?
  address                    String?
  zipCode                    String?
  latitude                   Float?
  longitude                  Float?
  userId                     String?            @unique
  user                       User?
  tenantId                   String
  tenant                     Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  auctions                   Auction[]
  lots                       Lot[]
  assets                     Asset[]
  judicialProcesses          JudicialProcess[]
  judicialBranch             JudicialBranch?    @relation(fields: [judicialBranchId], references: [id])
}

model Auctioneer {
  id                         String    @id @default(cuid())
  publicId                   String?   @unique
  slug                       String    @unique
  name                       String
  registrationNumber         String?
  contactName                String?
  email                      String?
  phone                      String?
  website                    String?
  logoUrl                    String?
  logoMediaId                String?
  dataAiHintLogo             String?
  description                String?   @db.Text
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
  city                       String?
  state                      String?
  address                    String?
  zipCode                    String?
  latitude                   Float?
  longitude                  Float?
  userId                     String?   @unique
  user                       User?
  tenantId                   String
  tenant                     Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  auctions                   Auction[]
  lots                       Lot[]
}

model Court {
  id                String             @id @default(cuid())
  slug              String             @unique
  name              String
  stateUf           String
  website           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialDistrict {
  id                String             @id @default(cuid())
  slug              String             @unique
  name              String
  court             Court?             @relation(fields: [courtId], references: [id])
  courtId           String?
  state             State?             @relation(fields: [stateId], references: [id])
  stateId           String?
  zipCode           String?
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
}

model JudicialBranch {
  id                String             @id @default(cuid())
  slug              String             @unique
  name              String
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  judicialProcesses JudicialProcess[]
  judicialSellers   Seller[]
}

model State {
  id                String             @id @default(cuid())
  slug              String             @unique
  name              String
  uf                String             @unique
  cities            City[]
  judicialDistricts JudicialDistrict[]
  lots              Lot[]
  auctions          Auction[]          @relation("StateAuctions")
}

model City {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  ibgeCode    String?  @unique
  state       State    @relation(fields: [stateId], references: [id])
  stateId     String
  stateUf     String?
  latitude    Float?
  longitude   Float?
  lots        Lot[]
  auctions    Auction[] @relation("CityAuctions")

  @@unique([name, stateId])
}

model Bid {
  id            String    @id @default(cuid())
  amount        Decimal   @db.Decimal(12, 2)
  timestamp     DateTime  @default(now())
  isMaxBid      Boolean   @default(false)
  bidderDisplay String
  bidder        User      @relation(fields: [bidderId], references: [id])
  bidderId      String
  lot           Lot       @relation(fields: [lotId], references: [id])
  lotId         String
  auction       Auction   @relation(fields: [auctionId], references: [id])
  auctionId     String
  tenant        Tenant    @relation(fields: [tenantId], references: [id])
  tenantId      String
}

model UserLotMaxBid {
  id          String   @id @default(cuid())
  maxAmount   Decimal  @db.Decimal(12, 2)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  lot         Lot      @relation(fields: [lotId], references: [id])
  lotId       String

  @@unique([userId, lotId])
}

model UserWin {
  id                 String               @id @default(cuid())
  winningBidAmount   Decimal              @db.Decimal(12, 2)
  winDate            DateTime             @default(now())
  paymentStatus      PaymentStatus        @default(PENDENTE)
  retrievalStatus    String?
  retrievalCode      String?
  lot                Lot                  @relation(fields: [lotId], references: [id])
  lotId              String               @unique
  user               User                 @relation(fields: [userId], references: [id])
  userId             String
  installments       InstallmentPayment[]
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

model InstallmentPayment {
  id                String        @id @default(cuid())
  userWin           UserWin       @relation(fields: [userWinId], references: [id])
  userWinId         String
  installmentNumber Int
  totalInstallments Int
  amount            Decimal       @db.Decimal(12, 2)
  dueDate           DateTime
  paymentDate       DateTime?
  status            PaymentStatus @default(PENDENTE)
}

model Review {
  id            String   @id @default(cuid())
  rating        Int
  comment       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  lot           Lot      @relation(fields: [lotId], references: [id])
  lotId         String
  authorName    String
  auctionId     String?
}

model LotQuestion {
  id                      String   @id @default(cuid())
  questionText            String
  answerText              String?
  isPublic                Boolean  @default(true)
  createdAt               DateTime @default(now())
  answeredAt              DateTime?
  user                    User     @relation(fields: [userId], references: [id])
  userId                  String
  lot                     Lot      @relation(fields: [lotId], references: [id])
  lotId                   String
  authorName              String
  answeredByUserId        String?
  answeredByUserDisplayName String?
  auctionId               String?
}


model Notification {
  id        String   @id @default(cuid())
  message   String
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  auction   Auction? @relation(fields: [auctionId], references: [id])
  auctionId String?
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model DocumentType {
  id          String         @id @default(cuid())
  name        String         @unique
  description String?
  isRequired  Boolean        @default(false)
  appliesTo   String // 'PHYSICAL', 'LEGAL', 'BOTH'
  documents   UserDocument[]
}

model UserDocument {
  id              String             @id @default(cuid())
  userId          String
  documentTypeId  String
  fileUrl         String
  fileName        String
  status          UserDocumentStatus @default(SUBMITTED)
  rejectionReason String?
  submittedAt     DateTime           @default(now())
  verifiedAt      DateTime?
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType       @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

model DirectSaleOffer {
  id                  String                @id @default(cuid())
  publicId            String?               @unique
  title               String
  description         String?               @db.Text
  status              DirectSaleOfferStatus
  offerType           DirectSaleOfferType
  price               Decimal?              @db.Decimal(12, 2)
  minimumOfferPrice   Decimal?              @db.Decimal(12, 2)
  imageUrl            String?               @db.Text
  imageMediaId        String?
  galleryImageUrls    Json?
  mediaItemIds        Json?                 @default("[]")
  views               Int                   @default(0)
  proposalsCount      Int                   @default(0)
  locationCity        String?
  locationState       String?
  dataAiHint          String?
  expiresAt           DateTime?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  categoryId          String
  sellerId            String
  category            String // Simplified for direct sales
  itemsIncluded       Json?                 @default("[]")
  seller              Seller                @relation(fields: [sellerId], references: [id])
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}


model AuctionStage {
  id           String    @id @default(cuid())
  name         String
  startDate    DateTime
  endDate      DateTime
  initialPrice Decimal?  @db.Decimal(12, 2)
  auction      Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId    String
  lotPrices    LotStagePrice[]

  @@index([auctionId])
}

model LotStagePrice {
  id              String      @id @default(cuid())
  stage           AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)
  stageId         String
  lot             Lot         @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId           String
  initialBid      Decimal?    @db.Decimal(12, 2)
  bidIncrement    Decimal?    @db.Decimal(12, 2)
  auction         Auction?    @relation(fields: [auctionId], references: [id])
  auctionId       String?

  @@unique([stageId, lotId])
}

model PlatformSettings {
  id                         String                      @id @default(cuid())
  tenantId                   String                      @unique
  tenant                     Tenant                      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  siteTitle                  String?
  siteTagline                String?
  logoUrl                    String?
  faviconUrl                 String?
  isSetupComplete            Boolean                     @default(false)
  crudFormMode               String?                     @default("modal") // 'modal' or 'sheet'
  themes                     ThemeSettings[]
  mapSettings                MapSettings?
  biddingSettings            BiddingSettings?
  paymentGatewaySettings     PaymentGatewaySettings?
  notificationSettings       NotificationSettings?
  mentalTriggerSettings      MentalTriggerSettings?
  sectionBadgeVisibility     SectionBadgeVisibility?
  platformPublicIdMasks      IdMasks?
  variableIncrementTable     VariableIncrementRule[]
}

model ThemeSettings {
  id                  String   @id @default(cuid())
  name                String   @unique
  isActive            Boolean  @default(false)
  platformSettings    PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  platformSettingsId  String
  colors              ThemeColors?
}

model ThemeColors {
  id               String   @id @default(cuid())
  themeSettings    ThemeSettings @relation(fields: [themeSettingsId], references: [id])
  themeSettingsId  String   @unique
  lightPrimary     String?
  lightBackground  String?
  lightAccent      String?
  darkPrimary      String?
  darkBackground   String?
  darkAccent       String?
}

model IdMasks {
  id                  String   @id @default(cuid())
  platformSettings    PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  platformSettingsId  String   @unique
  auctionCodeMask     String?
  lotCodeMask         String?
  sellerCodeMask      String?
  auctioneerCodeMask  String?
  userCodeMask        String?
  assetCodeMask       String?
  categoryCodeMask    String?
  subcategoryCodeMask String?
}

model MapSettings {
  id                  String   @id @default(cuid())
  platformSettings    PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  platformSettingsId  String   @unique
  defaultProvider     String   @default("openstreetmap")
  googleMapsApiKey    String?
}

model BiddingSettings {
  id                  String   @id @default(cuid())
  platformSettings    PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  platformSettingsId  String   @unique
  instantBiddingEnabled           Boolean  @default(true)
  getBidInfoInstantly             Boolean  @default(true)
  biddingInfoCheckIntervalSeconds Int      @default(1)
  defaultStageDurationDays        Int      @default(7)
  defaultDaysBetweenStages        Int      @default(1)
}

model PaymentGatewaySettings {
  id                          String @id @default(cuid())
  platformSettings            PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  platformSettingsId          String   @unique
  defaultGateway              String @default("Manual")
  platformCommissionPercentage Decimal @default(5.0) @db.Decimal(5, 2)
  gatewayApiKey               String?
  gatewayEncryptionKey        String?
}

model NotificationSettings {
  id                  String   @id @default(cuid())
  platformSettings    PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  platformSettingsId  String   @unique
  notifyOnNewAuction        Boolean  @default(true)
  notifyOnFeaturedLot       Boolean  @default(false)
  notifyOnAuctionEndingSoon Boolean  @default(true)
  notifyOnPromotions        Boolean  @default(true)
}

model MentalTriggerSettings {
  id                  String   @id @default(cuid())
  platformSettings    PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  platformSettingsId  String   @unique
  showDiscountBadge       Boolean  @default(true)
  showPopularityBadge     Boolean  @default(true)
  popularityViewThreshold Int      @default(500)
  showHotBidBadge         Boolean  @default(true)
  hotBidThreshold         Int      @default(10)
  showExclusiveBadge      Boolean  @default(true)
}

model SectionBadgeVisibility {
  id                  String   @id @default(cuid())
  platformSettings    PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  platformSettingsId  String   @unique
  searchGrid          Json?
  lotDetail           Json?
}

model VariableIncrementRule {
  id                 String   @id @default(cuid())
  platformSettings   PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  platformSettingsId String
  from               Decimal  @db.Decimal(12, 2)
  to                 Decimal? @db.Decimal(12, 2)
  increment          Decimal  @db.Decimal(12, 2)
}


model AuctionHabilitation {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId String
  createdAt DateTime @default(now())

  @@unique([userId, auctionId])
}

model MediaItem {
  id                  String   @id @default(cuid())
  fileName            String
  storagePath         String
  urlOriginal         String   @db.Text
  urlThumbnail        String?  @db.Text
  mimeType            String?
  sizeBytes           Int?
  title               String?
  altText             String?
  caption             String?
  description         String?
  dataAiHint          String?
  createdAt           DateTime @default(now())
  uploadedBy          User     @relation("UploadedBy", fields: [uploadedById], references: [id])
  uploadedById        String
  judicialProcess     JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId   String?
}

model DataSource {
  id        String @id @default(cuid())
  name      String
  modelName String @unique
  fields    Json
}

model Report {
  id           String   @id @default(cuid())
  name         String
  description  String?
  definition   Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdBy    User     @relation(fields: [createdById], references: [id])
  createdById  String
}

model VehicleMake {
  id     String         @id @default(cuid())
  name   String         @unique
  slug   String         @unique
  models VehicleModel[]
}

model VehicleModel {
  id     String      @id @default(cuid())
  name   String
  slug   String
  make   VehicleMake @relation(fields: [makeId], references: [id])
  makeId String

  @@unique([makeId, name])
}

model Subscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
}
