// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. ENUMS (TIPOS PERSONALIZADOS)
// =================================================================

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

// =================================================================
// 2. MODELS (TABELAS)
// =================================================================

model User {
  id                  String                 @id @default(uuid())
  email               String                 @unique
  password            String?
  fullName            String?
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType            @default(PHYSICAL)
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  cpf                 String?
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  optInMarketing      Boolean?               @default(false)
  razaoSocial         String?
  cnpj                String?                @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?

  // Relações
  roles             UsersOnRoles[]
  sellerProfile     Seller?
  auctioneerProfile Auctioneer?
  documents         UserDocument[]
  bids              Bid[]
  wins              UserWin[]
  maxBids           UserLotMaxBid[]
  notifications     Notification[]
  lotsWon           Lot[]                  @relation("LotWinner")
  uploadedMedia     MediaItem[]
  habilitations     AuctionHabilitation[]
}

model Role {
  id             String         @id @default(uuid())
  name           String         @unique
  nameNormalized String         @unique
  description    String?        @db.VarChar(255)
  permissions    Json
  users          UsersOnRoles[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model Seller {
  id                 String               @id @default(uuid())
  publicId           String               @unique @default(uuid())
  slug               String               @unique
  name               String               @unique
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?
  userId             String?              @unique
  user               User?                @relation(fields: [userId], references: [id], onDelete: SetNull)
  isJudicial         Boolean              @default(false)
  judicialBranchId   String?
  judicialBranch     JudicialBranch?      @relation(fields: [judicialBranchId], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  auctions           Auction[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
  judicialProcesses  JudicialProcess[]
  lots               Lot[]
}

model Auctioneer {
  id                 String       @id @default(uuid())
  publicId           String       @unique @default(uuid())
  slug               String       @unique
  name               String
  registrationNumber String?
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?
  userId             String?      @unique
  user               User?        @relation(fields: [userId], references: [id])
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  auctions           Auction[]
  lots               Lot[]
}

model Court {
  id                 String               @id @default(uuid())
  name               String
  slug               String               @unique
  stateUf            String?
  website            String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  judicialDistricts  JudicialDistrict[]
  judicialProcesses  JudicialProcess[]
}

model State {
  id                String             @id @default(uuid())
  name              String
  uf                String             @unique
  slug              String             @unique
  cityCount         Int                @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  cities            City[]
  judicialDistricts JudicialDistrict[]
}

model City {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  stateId   String
  state     State    @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateUf   String?
  ibgeCode  String?  @unique
  lotCount  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lots      Lot[]
}

model JudicialDistrict {
  id                String             @id @default(uuid())
  name              String
  slug              String             @unique
  courtId           String
  court             Court              @relation(fields: [courtId], references: [id])
  stateId           String
  state             State              @relation(fields: [stateId], references: [id])
  zipCode           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
}

model JudicialBranch {
  id                String              @id @default(uuid())
  name              String
  slug              String              @unique
  districtId        String
  district          JudicialDistrict    @relation(fields: [districtId], references: [id])
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
  auctions          Auction[]
}

model JudicialProcess {
  id                String       @id @default(uuid())
  publicId          String       @unique @default(uuid())
  processNumber     String
  isElectronic      Boolean      @default(true)
  courtId           String
  court             Court        @relation(fields: [courtId], references: [id])
  districtId        String
  district          JudicialDistrict @relation(fields: [districtId], references: [id])
  branchId          String
  branch            JudicialBranch @relation(fields: [branchId], references: [id])
  sellerId          String?
  seller            Seller?      @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties           JudicialParty[]
  bens              Bem[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  mediaItems        MediaItem[]
}

model JudicialParty {
  id             String          @id @default(uuid())
  processId      String
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  name           String
  documentNumber String?
  partyType      ProcessPartyType
}

model Auction {
  id                           String               @id @default(uuid())
  publicId                     String               @unique
  slug                         String               @unique
  title                        String
  description                  String?              @db.Text
  status                       AuctionStatus        @default(RASCUNHO)
  auctionDate                  DateTime
  endDate                      DateTime?
  auctioneerId                 String
  auctioneer                   Auctioneer           @relation(fields: [auctioneerId], references: [id])
  sellerId                     String
  seller                       Seller               @relation(fields: [sellerId], references: [id])
  categoryId                   String
  category                     LotCategory          @relation(fields: [categoryId], references: [id])
  auctionType                  AuctionType
  imageUrl                     String?
  imageMediaId                 String?
  documentsUrl                 String?
  visits                       Int                  @default(0)
  initialOffer                 Decimal?             @db.Decimal(15, 2)
  isFavorite                   Boolean              @default(false)
  dataAiHint                   String?
  createdAt                    DateTime             @default(now())
  updatedAt                    DateTime             @updatedAt
  lots                         Lot[]
  auctionStages                AuctionStage[]
  bids                         Bid[]
  bidders                      AuctionHabilitation[]
  // Novas colunas
  participation                AuctionParticipation @default(ONLINE)
  auctionMethod                AuctionMethod        @default(STANDARD)
  onlineUrl                    String?
  address                      String?
  cityId                       String?
  city                         City?                @relation(fields: [cityId], references: [id])
  stateId                      String?
  state                        State?               @relation(fields: [stateId], references: [id])
  zipCode                      String?
  latitude                     Float?
  longitude                    Float?
  evaluationReportUrl          String?
  auctionCertificateUrl        String?
  sellingBranchId              String?
  sellingBranch                JudicialBranch?      @relation(fields: [sellingBranchId], references: [id])
  automaticBiddingEnabled      Boolean              @default(false)
  allowInstallmentBids         Boolean              @default(true)
  silentBiddingEnabled         Boolean              @default(false)
  allowMultipleBidsPerUser     Boolean              @default(true)
  softCloseEnabled             Boolean              @default(false)
  softCloseMinutes             Int                  @default(2)
  estimatedRevenue             Decimal?             @db.Decimal(15, 2)
  achievedRevenue              Decimal?             @db.Decimal(15, 2)
  totalHabilitatedUsers        Int                  @default(0)
  isFeaturedOnMarketplace      Boolean              @default(false)
  marketplaceAnnouncementTitle String?
  judicialProcessId            String?
  judicialProcess              JudicialProcess?     @relation(fields: [judicialProcessId], references: [id])
  additionalTriggers           Json?
  decrementAmount              Decimal?             @db.Decimal(15, 2)
  decrementIntervalSeconds     Int?
  floorPrice                   Decimal?             @db.Decimal(15, 2)
  autoRelistSettings           Json?
}

model AuctionStage {
  id                String   @id @default(uuid())
  auctionId         String
  auction           Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  name              String
  startDate         DateTime
  endDate           DateTime
  evaluationValue   Decimal? @db.Decimal(15, 2)
  lotStageDetails   LotAuctionStageDetails[]

  @@index([auctionId])
}

model Lot {
  id                           String                 @id @default(uuid())
  publicId                     String?                @unique
  auctionId                    String
  auction                      Auction                @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  slug                         String?
  number                       String?
  title                        String
  description                  String?                @db.Text
  price                        Decimal                @db.Decimal(15, 2)
  status                       LotStatus              @default(EM_BREVE)
  bidsCount                    Int?                   @default(0)
  views                        Int?                   @default(0)
  isFeatured                   Boolean?               @default(false)
  isExclusive                  Boolean?               @default(false)
  discountPercentage           Int?
  additionalTriggers           Json?
  imageUrl                     String?
  imageMediaId                 String?
  galleryImageUrls             Json?
  mediaItemIds                 Json?
  type                         String
  categoryId                   String
  category                     LotCategory            @relation(fields: [categoryId], references: [id])
  subcategoryId                String?
  subcategory                  Subcategory?           @relation(fields: [subcategoryId], references: [id])
  sellerId                     String?
  seller                       Seller?                @relation(fields: [sellerId], references: [id])
  auctioneerId                 String?
  auctioneer                   Auctioneer?            @relation(fields: [auctioneerId], references: [id])
  cityId                       String?
  city                         City?                  @relation(fields: [cityId], references: [id])
  stateId                      String?
  state                        State?                 @relation(fields: [stateId], references: [id])
  latitude                     Float?
  longitude                    Float?
  mapAddress                   String?
  mapEmbedUrl                  String?
  mapStaticImageUrl            String?
  endDate                      DateTime?
  lotSpecificAuctionDate       DateTime?
  condition                    String?
  dataAiHint                   String?
  winnerId                     String?
  winner                       User?                  @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  winningBidTermUrl            String?
  allowInstallmentBids         Boolean?               @default(false)
  isRelisted                   Boolean                @default(false)
  relistCount                  Int                    @default(0)
  originalLotId                String?                @unique
  originalLot                  Lot?                   @relation("RelistedLot", fields: [originalLotId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  relistedLot                  Lot?                   @relation("RelistedLot")
  evaluationValue              Decimal?               @db.Decimal(15, 2)
  initialPrice                 Decimal?               @db.Decimal(15, 2)
  secondInitialPrice           Decimal?               @db.Decimal(15, 2)
  bidIncrementStep             Decimal?               @db.Decimal(10, 2)
  inheritedMediaFromBemId      String?
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  bids                         Bid[]
  userWins                     UserWin[]
  bens                         LotBens[]
  questions                    LotQuestion[]
  reviews                      Review[]
  stageDetails                 LotAuctionStageDetails[]
  maxBids                      UserLotMaxBid[]
}

model LotBens {
  id      String @id @default(uuid())
  lotId   String
  bemId   String
  lot     Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bem     Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)

  @@unique([lotId, bemId])
}

model LotAuctionStageDetails {
  id            String       @id @default(uuid())
  lotId         String
  lot           Lot          @relation(fields: [lotId], references: [id], onDelete: Cascade)
  stageId       String
  stage         AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)
  initialBid    Decimal?     @db.Decimal(15, 2)
  bidIncrement  Decimal?     @db.Decimal(10, 2)

  @@unique([lotId, stageId])
}


model Bid {
  id            String   @id @default(uuid())
  lotId         String
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId     String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidderId      String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
}

model UserWin {
  id                 String              @id @default(uuid())
  lotId              String              @unique
  lot                Lot                 @relation(fields: [lotId], references: [id])
  userId             String
  user               User                @relation(fields: [userId], references: [id])
  winningBidAmount   Decimal             @db.Decimal(15, 2)
  winDate            DateTime            @default(now())
  paymentStatus      PaymentStatus
  invoiceUrl         String?
  installments       InstallmentPayment[]
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lotId     String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model Review {
  id              String   @id @default(uuid())
  lotId           String
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String   @db.Text
  createdAt       DateTime @default(now())
}

model LotQuestion {
  id                      String   @id @default(uuid())
  lotId                   String
  lot                     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId               String
  userId                  String
  userDisplayName         String
  questionText            String   @db.Text
  isPublic                Boolean  @default(true)
  answerText              String?  @db.Text
  answeredByUserId        String?
  answeredByUserDisplayName String?
  createdAt               DateTime @default(now())
  answeredAt              DateTime?
}


model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model InstallmentPayment {
  id                String        @id @default(uuid())
  userWinId         String
  userWin           UserWin       @relation(fields: [userWinId], references: [id], onDelete: Cascade)
  installmentNumber Int
  amount            Decimal       @db.Decimal(15, 2)
  dueDate           DateTime
  status            PaymentStatus @default(PENDENTE)
  paymentDate       DateTime?
  paymentMethod     String?
  transactionId     String?
}

model DirectSaleOffer {
  id                   String              @id @default(uuid())
  publicId             String?             @unique
  title                String
  description          String?             @db.Text
  offerType            DirectSaleOfferType
  price                Decimal?            @db.Decimal(15, 2)
  minimumOfferPrice    Decimal?            @db.Decimal(15, 2)
  status               DirectSaleOfferStatus @default(ACTIVE)
  category             String
  categoryId           String
  sellerId             String
  seller               Seller              @relation(fields: [sellerId], references: [id])
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int                 @default(0)
  expiresAt            DateTime?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model LotCategory {
  id                  String        @id @default(uuid())
  name                String        @unique
  slug                String        @unique
  description         String?       @db.VarChar(500)
  hasSubcategories    Boolean
  logoUrl             String?
  logoMediaId         String?
  dataAiHintLogo      String?
  coverImageUrl       String?
  coverImageMediaId   String?
  dataAiHintCover     String?
  megaMenuImageUrl    String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu  String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  auctions            Auction[]
  bens                Bem[]
  lots                Lot[]
  subcategories       Subcategory[]
}

model Subcategory {
  id                 String      @id @default(uuid())
  name               String
  slug               String      @unique
  parentCategoryId   String
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  description        String?     @db.VarChar(500)
  displayOrder       Int         @default(0)
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  lots               Lot[]
  bens               Bem[]
}

model DocumentType {
  id          String         @id @default(uuid())
  name        String         @unique
  description String?
  isRequired  Boolean        @default(true)
  appliesTo   String // e.g., "PHYSICAL,LEGAL"
  userDocs    UserDocument[]
}

model UserDocument {
  id              String             @id @default(uuid())
  userId          String
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentTypeId  String
  documentType    DocumentType       @relation(fields: [documentTypeId], references: [id])
  status          UserDocumentStatus @default(PENDING_ANALYSIS)
  fileUrl         String
  fileName        String?
  rejectionReason String?            @db.Text
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@unique([userId, documentTypeId])
}

model DocumentTemplate {
  id        String               @id @default(uuid())
  name      String
  type      DocumentTemplateType
  content   String?              @db.Text
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model ContactMessage {
  id       String   @id @default(uuid())
  name     String
  email    String
  subject  String?
  message  String   @db.Text
  isRead   Boolean  @default(false)
  createdAt DateTime @default(now())
}

model PlatformSettings {
  id                           String    @id @default("global")
  siteTitle                    String?
  siteTagline                  String?
  galleryImageBasePath         String?
  storageProvider              String?
  firebaseStorageBucket        String?
  activeThemeName              String?
  themes                       Json?
  platformPublicIdMasks        Json?
  homepageSections             Json?
  mentalTriggerSettings        Json?
  sectionBadgeVisibility       Json?
  mapSettings                  Json?
  searchPaginationType         String?
  searchItemsPerPage           Int?
  searchLoadMoreCount          Int?
  showCountdownOnLotDetail     Boolean?
  showCountdownOnCards         Boolean?
  showRelatedLotsOnLotDetail   Boolean?
  relatedLotsCount             Int?
  defaultUrgencyTimerHours     Int?
  variableIncrementTable       Json?
  biddingSettings              Json?
  paymentGatewaySettings       Json?
  defaultListItemsPerPage      Int?
  updatedAt                    DateTime? @updatedAt
}

model MediaItem {
  id                   String           @id @default(uuid())
  fileName             String
  storagePath          String
  title                String?
  altText              String?
  caption              String?          @db.VarChar(500)
  description          String?          @db.Text
  mimeType             String
  sizeBytes            Int
  urlOriginal          String
  urlThumbnail         String?
  urlMedium            String?
  urlLarge             String?
  linkedLotIds         Json?
  dataAiHint           String?
  uploadedByUserId     String
  uploadedBy           User             @relation(fields: [uploadedByUserId], references: [id])
  judicialProcessId    String?
  judicialProcess      JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  uploadedAt           DateTime         @default(now())
}

model AuctionHabilitation {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auctionId  String
  auction    Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  approvedAt DateTime @default(now())

  @@unique([userId, auctionId])
}

model Bem {
  id                       String        @id @default(uuid())
  publicId                 String?       @unique
  title                    String
  description              String?       @db.Text
  status                   BemStatus     @default(DISPONIVEL)
  categoryId               String
  category                 LotCategory   @relation(fields: [categoryId], references: [id])
  subcategoryId            String?
  subcategory              Subcategory?  @relation(fields: [subcategoryId], references: [id])
  judicialProcessId        String?
  judicialProcess          JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  sellerId                 String?
  seller                   Seller?       @relation(fields: [sellerId], references: [id])
  evaluationValue          Decimal?      @db.Decimal(15, 2)
  imageUrl                 String?
  imageMediaId             String?
  galleryImageUrls         Json?
  mediaItemIds             Json?
  dataAiHint               String?
  locationCity             String?
  locationState            String?
  address                  String?
  latitude                 Float?
  longitude                Float?
  plate                    String?
  make                     String?
  model                    String?
  version                  String?
  year                     Int?
  modelYear                Int?
  mileage                  Int?
  color                    String?
  fuelType                 String?
  transmissionType         String?
  bodyType                 String?
  vin                      String?       @unique
  renavam                  String?       @unique
  enginePower              String?
  numberOfDoors            Int?
  vehicleOptions           String?
  detranStatus             String?
  debts                    String?
  runningCondition         String?
  bodyCondition            String?
  tiresCondition           String?
  hasKey                   Boolean?
  propertyRegistrationNumber String?
  iptuNumber               String?
  isOccupied               Boolean?
  totalArea                Decimal?      @db.Decimal(15, 2)
  builtArea                Decimal?      @db.Decimal(15, 2)
  bedrooms                 Int?
  suites                   Int?
  bathrooms                Int?
  parkingSpaces            Int?
  constructionType         String?
  finishes                 String?       @db.Text
  infrastructure           String?       @db.Text
  condoDetails             String?       @db.Text
  improvements             String?       @db.Text
  topography               String?
  liensAndEncumbrances     String?       @db.Text
  propertyDebts            String?       @db.Text
  unregisteredRecords      String?       @db.Text
  hasHabiteSe              Boolean?
  zoningRestrictions       String?
  amenities                Json?
  brand                    String?
  serialNumber             String?
  itemCondition            String?
  specifications           String?       @db.Text
  includedAccessories      String?       @db.Text
  batteryCondition         String?
  hasInvoice               Boolean?
  hasWarranty              Boolean?
  repairHistory            String?       @db.Text
  applianceCapacity        String?
  voltage                  String?
  applianceType            String?
  additionalFunctions      String?
  hoursUsed                Int?
  engineType               String?
  capacityOrPower          String?
  maintenanceHistory       String?       @db.Text
  installationLocation     String?
  compliesWithNR           String?
  operatingLicenses        String?
  breed                    String?
  age                      String?
  sex                      String?
  weight                   String?
  individualId             String?
  purpose                  String?
  sanitaryCondition        String?
  lineage                  String?
  isPregnant               Boolean?
  specialSkills            String?
  gtaDocument              String?
  breedRegistryDocument    String?
  furnitureType            String?
  material                 String?
  style                    String?
  dimensions               String?
  pieceCount               Int?
  jewelryType              String?
  metal                    String?
  gemstones                String?
  totalWeight              String?
  jewelrySize              String?
  authenticityCertificate  String?
  workType                 String?
  artist                   String?
  period                   String?
  technique                String?
  provenance               String?       @db.Text
  boatType                 String?
  boatLength               String?
  hullMaterial             String?
  onboardEquipment         String?       @db.Text
  productName              String?
  quantity                 String?
  packagingType            String?
  expirationDate           DateTime?
  storageConditions        String?
  preciousMetalType        String?
  purity                   String?
  forestGoodsType          String?
  volumeOrQuantity         String?
  species                  String?
  dofNumber                String?
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  lots                     LotBens[]
}

// Veículos
model VehicleMake {
  id      String         @id @default(uuid())
  name    String         @unique
  slug    String         @unique
  models  VehicleModel[]
}

model VehicleModel {
  id      String      @id @default(uuid())
  name    String
  slug    String
  makeId  String
  make    VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)

  @@unique([name, makeId])
}

