
// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. MODELS WITHOUT RELATIONS OR WITH FEW DEPENDENCIES
// =================================================================

model PlatformSettings {
  id                            String   @id @default("global")
  siteTitle                     String?
  siteTagline                   String?  @db.VarChar(200)
  logoUrl                       String?
  faviconUrl                    String?
  galleryImageBasePath          String?  @db.VarChar(200)
  storageProvider               String?  @db.VarChar(50)
  firebaseStorageBucket         String?  @db.VarChar(200)
  activeThemeName               String?  @db.VarChar(100)
  themes                        Json?
  platformPublicIdMasks         Json?
  homepageSections              Json?
  mentalTriggerSettings         Json?
  sectionBadgeVisibility        Json?
  mapSettings                   Json?
  searchPaginationType          String?  @db.VarChar(50)
  searchItemsPerPage            Int?
  searchLoadMoreCount           Int?
  showCountdownOnLotDetail      Boolean?
  showCountdownOnCards          Boolean?
  showRelatedLotsOnLotDetail    Boolean?
  relatedLotsCount              Int?
  defaultUrgencyTimerHours      Int?
  variableIncrementTable        Json?
  biddingSettings               Json?
  defaultListItemsPerPage       Int?
  updatedAt                     DateTime @updatedAt
}

model State {
  id                String              @id @default(cuid())
  name              String
  uf                String              @unique
  slug              String              @unique
  cities            City[]
  districts         JudicialDistrict[]
  lots              Lot[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Role {
  id              String         @id @default(cuid())
  name            String
  nameNormalized  String         @unique
  description     String?
  permissions     Json?
  users           UsersOnRoles[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model DocumentTemplate {
  id        String   @id @default(cuid())
  name      String
  type      String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DocumentType {
  id           String         @id @default(cuid())
  name         String
  description  String?
  isRequired   Boolean        @default(true)
  appliesTo    String? // e.g., PHYSICAL, LEGAL, ALL
  userDocs     UserDocument[]
}

// =================================================================
// 2. MAIN DATA MODELS
// =================================================================

model User {
  id                  String               @id @default(cuid())
  uid                 String?              @unique
  email               String               @unique
  password            String?
  fullName            String?
  cpf                 String?              @unique
  cellPhone           String?
  razaoSocial         String?
  cnpj                String?              @unique
  dateOfBirth         DateTime?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  avatarUrl           String?
  dataAiHint          String?
  sellerId            String?              @unique
  seller              Seller?
  auctioneerId        String?              @unique
  auctioneer          Auctioneer?
  habilitationStatus  String?              @default("PENDING_DOCUMENTS")
  accountType         String?              @default("PHYSICAL")
  badges              Json?
  optInMarketing      Boolean?             @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  roles               UsersOnRoles[]
  bids                Bid[]
  wins                UserWin[]            @relation("UserWins")
  maxBids             UserLotMaxBid[]
  notifications       Notification[]
  uploadedMedia       MediaItem[]
  documents           UserDocument[]
  reviews             Review[]
  questions           LotQuestion[]        @relation("QuestionAsker")
  answers             LotQuestion[]        @relation("QuestionAnswerer")
  wonLots             Lot[]                @relation("LotWinner")
  habilitations       AuctionHabilitation[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model Seller {
  id                  String             @id @default(cuid())
  publicId            String             @unique @default(uuid)
  slug                String             @unique
  name                String             @unique
  contactName         String?
  email               String?
  phone               String?
  address             String?
  city                String?
  state               String?
  zipCode             String?
  website             String?
  logoUrl             String?
  logoMediaId         String?
  dataAiHintLogo      String?
  description         String?            @db.Text
  userId              String?            @unique
  user                User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  isJudicial          Boolean            @default(false)
  judicialBranchId    String?            @unique
  judicialBranch      JudicialBranch?
  auctions            Auction[]
  bens                Bem[]
  directSaleOffers    DirectSaleOffer[]
  judicialProcesses   JudicialProcess[]
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model Auctioneer {
  id                      String    @id @default(cuid())
  publicId                String    @unique @default(uuid)
  slug                    String    @unique
  name                    String
  registrationNumber      String?
  contactName             String?
  email                   String?
  phone                   String?
  address                 String?
  city                    String?
  state                   String?
  zipCode                 String?
  website                 String?
  logoUrl                 String?
  logoMediaId             String?
  dataAiHintLogo          String?
  description             String?   @db.Text
  userId                  String?   @unique
  user                    User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  auctions                Auction[]
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

model Auction {
  id                              String               @id @default(cuid())
  publicId                        String               @unique @default(uuid)
  slug                            String               @unique
  title                           String
  description                     String?              @db.Text
  status                          String               @default("RASCUNHO")
  auctionDate                     DateTime
  endDate                         DateTime?
  auctionType                     String?
  imageUrl                        String?
  imageMediaId                    String?
  dataAiHint                      String?
  documentsUrl                    String?
  evaluationReportUrl             String?
  auctionCertificateUrl           String?
  visits                          Int                  @default(0)
  isFeaturedOnMarketplace         Boolean              @default(false)
  marketplaceAnnouncementTitle    String?
  automaticBiddingEnabled         Boolean              @default(false)
  silentBiddingEnabled            Boolean              @default(false)
  allowMultipleBidsPerUser        Boolean              @default(true)
  softCloseEnabled                Boolean              @default(false)
  softCloseMinutes                Int?
  allowInstallmentBids            Boolean              @default(false)
  estimatedRevenue                Float?
  achievedRevenue                 Float?
  totalHabilitatedUsers           Int?
  additionalTriggers              Json?
  decrementAmount                 Float?
  decrementIntervalSeconds        Int?
  floorPrice                      Float?
  autoRelistSettings              Json?
  sellingBranch                   String?
  createdAt                       DateTime             @default(now())
  updatedAt                       DateTime             @updatedAt
  lots                            Lot[]
  bids                            Bid[]
  auctioneerId                    String?
  auctioneer                      Auctioneer?          @relation(fields: [auctioneerId], references: [id])
  sellerId                        String?
  seller                          Seller?              @relation(fields: [sellerId], references: [id])
  categoryId                      String?
  category                        LotCategory?         @relation(fields: [categoryId], references: [id])
  auctionStages                   AuctionStage[]
  habilitations                   AuctionHabilitation[]
  judicialProcessId               String?
  judicialProcess                 JudicialProcess?     @relation(fields: [judicialProcessId], references: [id])

  @@index([sellerId])
  @@index([auctioneerId])
  @@index([categoryId])
  @@index([judicialProcessId])
}

model Court {
  id                String              @id @default(cuid())
  name              String
  slug              String              @unique
  stateUf           String
  website           String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  districts         JudicialDistrict[]
  judicialProcesses JudicialProcess[]
}

model JudicialDistrict {
  id                String              @id @default(cuid())
  name              String
  slug              String              @unique
  zipCode           String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  courtId           String?
  court             Court?              @relation(fields: [courtId], references: [id])
  stateId           String?
  state             State?              @relation(fields: [stateId], references: [id])
  branches          JudicialBranch[]
  judicialProcesses JudicialProcess[]

  @@index([courtId])
  @@index([stateId])
}

model JudicialBranch {
  id                String              @id @default(cuid())
  name              String
  slug              String              @unique
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  districtId        String?
  district          JudicialDistrict?   @relation(fields: [districtId], references: [id])
  seller            Seller?
  judicialProcesses JudicialProcess[]

  @@index([districtId])
}

model JudicialProcess {
  id                String           @id @default(cuid())
  publicId          String           @unique @default(uuid)
  processNumber     String           @unique
  isElectronic      Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  courtId           String?
  court             Court?           @relation(fields: [courtId], references: [id])
  districtId        String?
  district          JudicialDistrict?@relation(fields: [districtId], references: [id])
  branchId          String?
  branch            JudicialBranch?  @relation(fields: [branchId], references: [id])
  sellerId          String?          @unique
  seller            Seller?          @relation(fields: [sellerId], references: [id])
  parties           JudicialParty[]
  bens              Bem[]
  auctions          Auction[]
}

model JudicialParty {
  id             String          @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      String
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@index([processId])
}

model Lot {
  id                   String       @id @default(cuid())
  publicId             String       @unique @default(uuid)
  slug                 String?      @unique
  number               String?
  title                String
  description          String?      @db.Text
  price                Float
  initialPrice         Float?
  secondInitialPrice   Float?
  bidIncrementStep     Float?
  status               String       @default("EM_BREVE")
  bidsCount            Int?         @default(0)
  views                Int?         @default(0)
  isFeatured           Boolean?     @default(false)
  isExclusive          Boolean?     @default(false)
  discountPercentage   Int?
  additionalTriggers   Json?
  imageUrl             String?
  imageMediaId         String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  type                 String?
  auctionName          String?
  sellerName           String?
  cityName             String?
  stateUf              String?
  latitude             Float?
  longitude            Float?
  mapAddress           String?
  mapEmbedUrl          String?      @db.Text
  mapStaticImageUrl    String?
  endDate              DateTime?
  auctionDate          DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate    DateTime?
  condition            String?
  dataAiHint           String?
  winningBidTermUrl    String?
  allowInstallmentBids Boolean?     @default(false)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  bids                 Bid[]
  auctionId            String
  auction              Auction      @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  categoryId           String?
  category             LotCategory? @relation(fields: [categoryId], references: [id])
  subcategoryId        String?
  subcategory          Subcategory? @relation(fields: [subcategoryId], references: [id])
  sellerId             String?
  seller               Seller?      @relation(fields: [sellerId], references: [id])
  cityId               String?
  city                 City?        @relation(fields: [cityId], references: [id])
  stateId              String?
  state                State?       @relation(fields: [stateId], references: [id])
  winnerId             String?      @unique
  winner               User?        @relation("LotWinner", fields: [winnerId], references: [id])
  win                  UserWin?     @relation("LotWinRecord")
  bens                 LotBens[]
  reviews              Review[]
  questions            LotQuestion[]
  maxBids              UserLotMaxBid[]

  @@index([auctionId])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([sellerId])
  @@index([cityId])
  @@index([stateId])
}

model LotBens {
  lot     Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId   String
  bem     Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId   String

  @@id([lotId, bemId])
}

model UserWin {
  id                String    @id @default(cuid())
  winningBidAmount  Float
  winDate           DateTime
  paymentStatus     String
  invoiceUrl        String?
  lotId             String    @unique
  lot               Lot       @relation("LotWinRecord", fields: [lotId], references: [id])
  userId            String
  user              User      @relation("UserWins", fields: [userId], references: [id])

  @@index([userId])
}

model Review {
  id              String   @id @default(cuid())
  rating          Int
  comment         String   @db.Text
  createdAt       DateTime @default(now())
  lotId           String
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  userDisplayName String?

  @@index([lotId])
  @@index([userId])
}

model LotQuestion {
  id                        String   @id @default(cuid())
  questionText              String   @db.Text
  isPublic                  Boolean  @default(true)
  createdAt                 DateTime @default(now())
  answerText                String?  @db.Text
  answeredAt                DateTime?
  lotId                     String
  lot                       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  userId                    String
  user                      User     @relation("QuestionAsker", fields: [userId], references: [id])
  userDisplayName           String?
  answeredByUserId          String?
  answeredByUserDisplayName String?
  answeredByUser            User?    @relation("QuestionAnswerer", fields: [answeredByUserId], references: [id])

  @@index([lotId])
  @@index([userId])
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lotId     String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}
