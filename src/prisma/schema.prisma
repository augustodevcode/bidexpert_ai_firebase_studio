
// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model PlatformSettings {
  id                            String   @id @default("global")
  siteTitle                     String?
  siteTagline                   String?  @db.VarChar(200)
  logoUrl                       String?
  faviconUrl                    String?
  galleryImageBasePath          String?  @db.VarChar(200)
  storageProvider               String?  @db.VarChar(50)
  firebaseStorageBucket         String?  @db.VarChar(200)
  activeThemeName               String?  @db.VarChar(100)
  themes                        Json?
  platformPublicIdMasks         Json?
  homepageSections              Json?
  mentalTriggerSettings         Json?
  sectionBadgeVisibility        Json?
  mapSettings                   Json?
  searchPaginationType          String?  @db.VarChar(50)
  searchItemsPerPage            Int?
  searchLoadMoreCount           Int?
  showCountdownOnLotDetail      Boolean?
  showCountdownOnCards          Boolean?
  showRelatedLotsOnLotDetail    Boolean?
  relatedLotsCount              Int?
  defaultUrgencyTimerHours      Int?
  variableIncrementTable        Json?
  biddingSettings               Json?
  defaultListItemsPerPage       Int?
  updatedAt                     DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model DocumentType {
  id          String         @id @default(cuid())
  name        String
  description String?
  isRequired  Boolean        @default(true)
  appliesTo   String? // e.g., "PHYSICAL", "LEGAL", "ALL"
  documents   UserDocument[]
}

model UserDocument {
  id              String   @id @default(cuid())
  userId          String
  documentTypeId  String
  status          String   @default("PENDING_ANALYSIS") // PENDING_ANALYSIS, APPROVED, REJECTED
  fileUrl         String
  fileName        String?
  rejectionReason String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id])
  documentType DocumentType @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
  @@index([userId])
}

model Role {
  id              String         @id @default(cuid())
  name            String         @unique
  nameNormalized  String         @unique
  description     String?
  permissions     Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  users           UsersOnRoles[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  role       Role     @relation(fields: [roleId], references: [id])
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

model User {
  id                  String                @id @default(cuid())
  uid                 String?               @unique
  email               String                @unique
  password            String?
  fullName            String?
  cpf                 String?               @unique
  rgNumber            String?
  rgIssuer          String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  avatarUrl           String?
  dataAiHint          String?
  sellerId            String?               @unique
  seller              Seller?
  auctioneerId        String?               @unique
  auctioneer          Auctioneer?
  habilitationStatus  String                @default("PENDING_DOCUMENTS")
  accountType         String                @default("PHYSICAL")
  badges              Json?
  optInMarketing      Boolean?              @default(false)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  roles               UsersOnRoles[]
  bids                Bid[]
  wins                UserWin[]
  reviews             Review[]
  questions           LotQuestion[]
  documents           UserDocument[]
  maxBids             UserLotMaxBid[]
  notifications       Notification[]
  habilitations       AuctionHabilitation[]
  uploadedMedia       MediaItem[]
  wonLots             Lot[]                 @relation("Winner")
}

model State {
  id        String             @id @default(cuid())
  name      String
  uf        String             @unique
  slug      String             @unique
  cityCount Int?               @default(0)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  cities    City[]
  districts JudicialDistrict[]
  lots      Lot[] // Relação inversa para Lot
}

model City {
  id        String   @id @default(cuid())
  name      String
  slug      String?
  stateId   String
  stateUf   String?
  ibgeCode  String?  @unique
  lotCount  Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state     State    @relation(fields: [stateId], references: [id])
  lots      Lot[]
}

model LotCategory {
  id                    String        @id @default(cuid())
  name                  String
  slug                  String        @unique
  description           String?       @db.VarChar(500)
  itemCount             Int?          @default(0)
  hasSubcategories      Boolean
  iconName              String?
  logoUrl               String?
  logoMediaId           String?
  dataAiHintIcon        String?
  coverImageUrl         String?
  coverImageMediaId     String?
  dataAiHintCover       String?
  megaMenuImageUrl      String?
  megaMenuImageMediaId  String?
  dataAiHintMegaMenu    String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  subcategories         Subcategory[]
  lots                  Lot[]
  bens                  Bem[]
  auctions              Auction[]
  logoMedia             MediaItem?    @relation("CategoryLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  coverImageMedia       MediaItem?    @relation("CategoryCover", fields: [coverImageMediaId], references: [id], onDelete: SetNull)
  megaMenuImageMedia    MediaItem?    @relation("CategoryMega", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull)
}

model Subcategory {
  id               String      @id @default(cuid())
  name             String
  slug             String?
  parentCategoryId String
  description      String?     @db.VarChar(500)
  itemCount        Int?        @default(0)
  displayOrder     Int         @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id])
  lots             Lot[]
  bens             Bem[]
}

model Auctioneer {
  id                      String    @id @default(cuid())
  publicId                String    @unique @default(cuid())
  slug                    String    @unique
  name                    String
  registrationNumber      String?
  contactName             String?
  email                   String?
  phone                   String?
  address                 String?
  city                    String?
  state                   String?
  zipCode                 String?
  website                 String?
  logoUrl                 String?
  logoMediaId             String?
  dataAiHintLogo          String?
  description             String?   @db.Text
  userId                  String?   @unique
  user                    User?     @relation(fields: [userId], references: [id])
  memberSince             DateTime? @default(now())
  rating                  Float?
  auctionsConductedCount  Int?      @default(0)
  totalValueSold          Float?    @default(0)
  auctions                Auction[]
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

model Seller {
  id                        String             @id @default(cuid())
  publicId                  String             @unique @default(cuid())
  slug                      String             @unique
  name                      String             @unique
  contactName               String?
  email                     String?
  phone                     String?
  address                   String?
  city                      String?
  state                     String?
  zipCode                   String?
  website                   String?
  logoUrl                   String?
  logoMediaId               String?
  dataAiHintLogo            String?
  description               String?            @db.Text
  userId                    String?            @unique
  user                      User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  memberSince               DateTime?          @default(now())
  rating                    Float?
  activeLotsCount           Int?               @default(0)
  totalSalesValue           Float?             @default(0)
  auctionsFacilitatedCount  Int?               @default(0)
  isJudicial                Boolean            @default(false)
  judicialBranchId          String?
  judicialBranch            JudicialBranch?    @relation(fields: [judicialBranchId], references: [id])
  auctions                  Auction[]
  bens                      Bem[]
  directSaleOffers          DirectSaleOffer[]
  lots                      Lot[] // Relação inversa para Lot.seller
  judicialProcesses         JudicialProcess[]
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
}

model Auction {
  id                            String                @id @default(cuid())
  publicId                      String                @unique @default(cuid())
  slug                          String                @unique
  title                         String
  description                   String?               @db.Text
  status                        String                @default("RASCUNHO")
  auctionDate                   DateTime
  endDate                       DateTime?
  totalLots                     Int?                  @default(0)
  categoryId                    String?
  category                      LotCategory?          @relation(fields: [categoryId], references: [id])
  auctioneerId                  String?
  auctioneer                    Auctioneer?           @relation(fields: [auctioneerId], references: [id])
  sellerId                      String?
  seller                        Seller?               @relation(fields: [sellerId], references: [id])
  mapAddress                    String?
  imageUrl                      String?
  imageMediaId                  String?
  dataAiHint                    String?
  visits                        Int?                  @default(0)
  lots                          Lot[]
  auctionType                   String?
  auctionStages                 Json?
  documentsUrl                  String?
  evaluationReportUrl           String?
  auctionCertificateUrl         String?
  sellingBranch                 String?
  automaticBiddingEnabled       Boolean               @default(false)
  silentBiddingEnabled          Boolean               @default(false)
  allowMultipleBidsPerUser      Boolean               @default(true)
  allowInstallmentBids          Boolean               @default(false)
  softCloseEnabled              Boolean               @default(false)
  softCloseMinutes              Int?                  @default(2)
  estimatedRevenue              Float?
  achievedRevenue               Float?
  totalHabilitatedUsers         Int?                  @default(0)
  isFeaturedOnMarketplace       Boolean               @default(false)
  marketplaceAnnouncementTitle  String?
  judicialProcessId             String?
  judicialProcess               JudicialProcess?      @relation(fields: [judicialProcessId], references: [id])
  additionalTriggers            Json?
  decrementAmount               Float?
  decrementIntervalSeconds      Int?
  floorPrice                    Float?
  autoRelistSettings            Json?
  bids                          Bid[]
  habilitations                 AuctionHabilitation[]
  createdAt                     DateTime              @default(now())
  updatedAt                     DateTime              @updatedAt
}

model AuctionHabilitation {
  id        String   @id @default(cuid())
  userId    String
  auctionId String
  user      User     @relation(fields: [userId], references: [id])
  auction   Auction  @relation(fields: [auctionId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, auctionId])
}

model Court {
  id                String               @id @default(cuid())
  name              String
  slug              String?              @unique
  stateUf           String
  website           String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  districts         JudicialDistrict[]
  judicialProcesses JudicialProcess[]
}

model JudicialDistrict {
  id                String               @id @default(cuid())
  name              String
  slug              String               @unique
  courtId           String?
  court             Court?               @relation(fields: [courtId], references: [id])
  stateId           String?
  state             State?               @relation(fields: [stateId], references: [id])
  zipCode           String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  branches          JudicialBranch[]
  judicialProcesses JudicialProcess[]
}

model JudicialBranch {
  id                String               @id @default(cuid())
  name              String
  slug              String               @unique
  districtId        String?
  district          JudicialDistrict?    @relation(fields: [districtId], references: [id])
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  sellers           Seller[]
  judicialProcesses JudicialProcess[]
}

model JudicialProcess {
  id                String            @id @default(cuid())
  publicId          String            @unique @default(cuid())
  processNumber     String
  isElectronic      Boolean           @default(true)
  courtId           String?
  court             Court?            @relation(fields: [courtId], references: [id])
  districtId        String?
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  branchId          String?
  branch            JudicialBranch?   @relation(fields: [branchId], references: [id])
  sellerId          String?
  seller            Seller?           @relation(fields: [sellerId], references: [id])
  parties           JudicialParty[]
  bens              Bem[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  auctions          Auction[]
}

model JudicialParty {
  id             String          @id @default(cuid())
  processId      String
  process        JudicialProcess @relation(fields: [processId], references: [id])
  name           String
  documentNumber String?
  partyType      String
}

model Lot {
  id                         String           @id @default(cuid())
  publicId                   String           @unique
  auctionId                  String
  auction                    Auction          @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  slug                       String?
  number                     String?
  title                      String
  description                String?          @db.Text
  price                      Float
  initialPrice               Float?
  secondInitialPrice         Float?
  bidIncrementStep           Float?
  status                     String           @default("EM_BREVE")
  bidsCount                  Int?             @default(0)
  views                      Int?             @default(0)
  isFeatured                 Boolean?         @default(false)
  isExclusive                Boolean?         @default(false)
  discountPercentage         Int?
  additionalTriggers         Json?
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  type                       String
  categoryId                 String?
  category                   LotCategory?     @relation(fields: [categoryId], references: [id])
  subcategoryId              String?
  subcategory                Subcategory?     @relation(fields: [subcategoryId], references: [id])
  sellerId                   String?
  seller                     Seller?          @relation(fields: [sellerId], references: [id])
  sellerName                 String?
  auctioneerId               String?
  cityId                     String?
  city                       City?            @relation(fields: [cityId], references: [id])
  stateId                    String?
  state                      State?           @relation(fields: [stateId], references: [id])
  cityName                   String?
  stateUf                    String?
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?
  endDate                    DateTime?
  auctionDate                DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  dataAiHint                 String?
  winnerId                   String?
  winner                     User?            @relation("Winner", fields: [winnerId], references: [id], onDelete: SetNull)
  winningBidTermUrl          String?
  allowInstallmentBids       Boolean?         @default(false)
  createdAt                  DateTime         @default(now())
  updatedAt                  DateTime         @updatedAt
  bens                       LotBens[]
  bids                       Bid[]
  reviews                    Review[]
  questions                  LotQuestion[]
  maxBids                    UserLotMaxBid[]
  winRecord                  UserWin?
  stockNumber                String?
  series                     String?
  make                       String?
  model                      String?
  odometer                   Int?
  engineDetails              String?
  primaryDamage              String?
  secondaryDamage            String?
  lossType                   String?
  vinStatus                  String?
  titleInfo                  String?
  airbagsStatus              String?
  bodyStyle                  String?
  driveLineType              String?
  cylinders                  String?
  restraintSystem            String?
  exteriorInteriorColor      String?
  options                    String?
  manufacturedIn             String?
  vehicleClass               String?
  vehicleLocationInBranch    String?
  laneRunNumber              String?
  aisleStall                 String?
  startCode                  String?
  actualCashValue            Float?
  estimatedRepairCost        Float?
  knownDebts                 String?          @db.Text
  additionalDocumentsInfo    String?          @db.Text
  reservePrice               Float?
  evaluationValue            Float?
  debtAmount                 Float?
  itbiValue                  Float?
}

model LotBens {
  lot     Lot    @relation(fields: [lotId], references: [id])
  lotId   String
  bem     Bem    @relation(fields: [bemId], references: [id])
  bemId   String

  @@id([lotId, bemId])
  @@index([lotId])
  @@index([bemId])
}

model Bid {
  id             String   @id @default(cuid())
  lotId          String
  lot            Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId      String
  auction        Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidderId       String
  bidder         User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderDisplay  String?
  amount         Float
  timestamp      DateTime @default(now())

  @@index([lotId])
  @@index([bidderId])
}

model UserWin {
  id                String        @id @default(cuid())
  lotId             String        @unique
  lot               Lot           @relation("LotWinRecord", fields: [lotId], references: [id])
  userId            String
  user              User          @relation(fields: [userId], references: [id])
  winningBidAmount  Float
  winDate           DateTime      @default(now())
  paymentStatus     String
  invoiceUrl        String?
}

model DirectSaleOffer {
  id                   String    @id @default(cuid())
  publicId             String    @unique @default(cuid())
  title                String
  description          String?   @db.Text
  offerType            String?
  price                Float?
  minimumOfferPrice    Float?
  status               String    @default("ACTIVE")
  category             String?
  sellerId             String?
  seller               Seller?   @relation(fields: [sellerId], references: [id])
  sellerName           String?
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?   @unique
  imageMedia           MediaItem? @relation("DirectSaleImage", fields: [imageMediaId], references: [id])
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int?      @default(0)
  expiresAt            DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model MediaItem {
  id                       String             @id @default(cuid())
  fileName                 String
  storagePath              String             @unique
  title                    String?
  altText                  String?
  caption                  String?
  description              String?            @db.Text
  mimeType                 String
  sizeBytes                Int?
  urlOriginal              String
  urlThumbnail             String?
  urlMedium                String?
  urlLarge                 String?
  linkedLotIds             Json?
  dataAiHint               String?
  uploadedBy               String?
  uploadedByUser           User?              @relation(fields: [uploadedBy], references: [id])
  uploadedAt               DateTime           @default(now())
  LotCategoriesLogo        LotCategory[]      @relation("CategoryLogo")
  LotCategoriesCover       LotCategory[]      @relation("CategoryCover")
  LotCategoriesMega        LotCategory[]      @relation("CategoryMega")
  DirectSaleOffers         DirectSaleOffer[]  @relation("DirectSaleImage")
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  lot             Lot      @relation(fields: [lotId], references: [id])
  auctionId       String
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  userDisplayName String
  rating          Int
  comment         String   @db.Text
  createdAt       DateTime @default(now())
}

model LotQuestion {
  id                        String    @id @default(cuid())
  lotId                     String
  lot                       Lot       @relation(fields: [lotId], references: [id])
  auctionId                 String
  userId                    String
  user                      User      @relation(fields: [userId], references: [id])
  userDisplayName           String
  questionText              String    @db.Text
  isPublic                  Boolean   @default(true)
  answerText                String?   @db.Text
  answeredAt                DateTime?
  answeredByUserId          String?
  answeredByUserDisplayName String?
  createdAt                 DateTime  @default(now())
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  lotId     String
  lot       Lot      @relation(fields: [lotId], references: [id])
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}
