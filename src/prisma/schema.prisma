// prisma/schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. TABELAS DE CONFIGURAÇÃO E BASE
// =================================================================

model PlatformSettings {
  id                            String   @id @default("global")
  siteTitle                     String?
  siteTagline                   String?  @db.VarChar(200)
  logoUrl                       String?
  faviconUrl                    String?
  galleryImageBasePath          String?  @db.VarChar(200)
  storageProvider               String?  @db.VarChar(50)
  firebaseStorageBucket         String?  @db.VarChar(200)
  activeThemeName               String?  @db.VarChar(100)
  themes                        Json?
  platformPublicIdMasks         Json?
  homepageSections              Json?
  mentalTriggerSettings         Json?
  sectionBadgeVisibility        Json?
  mapSettings                   Json?
  searchPaginationType          String?  @db.VarChar(50)
  searchItemsPerPage            Int?
  searchLoadMoreCount           Int?
  showCountdownOnLotDetail      Boolean?
  showCountdownOnCards          Boolean?
  showRelatedLotsOnLotDetail    Boolean?
  relatedLotsCount              Int?
  defaultUrgencyTimerHours      Int?
  variableIncrementTable        Json?
  biddingSettings               Json?
  defaultListItemsPerPage       Int?
  updatedAt                     DateTime @updatedAt
}

model Role {
  id            String         @id @default(cuid())
  name          String         @unique
  nameNormalized String        @unique
  description   String?
  permissions   Json?
  users         UsersOnRoles[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model State {
  id                String              @id @default(cuid())
  name              String
  uf                String              @unique
  slug              String              @unique
  cities            City[]
  judicialDistricts JudicialDistrict[]
  lots              Lot[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model City {
  id      String @id @default(cuid())
  name    String
  slug    String?
  stateId String
  stateUf String?
  ibgeCode String? @unique
  lotCount Int?   @default(0)
  state   State  @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots    Lot[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LotCategory {
  id                    String        @id @default(cuid())
  name                  String        @unique
  slug                  String        @unique
  description           String?
  hasSubcategories      Boolean       @default(false)
  subcategories         Subcategory[]
  logoUrl               String?
  logoMediaId           String?
  dataAiHintIcon        String?
  coverImageUrl         String?
  coverImageMediaId     String?
  dataAiHintCover       String?
  megaMenuImageUrl      String?
  megaMenuImageMediaId  String?
  dataAiHintMegaMenu    String?
  iconName              String?
  auctions              Auction[]
  lots                  Lot[]
  bens                  Bem[]
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
}

model Subcategory {
  id               String      @id @default(cuid())
  name             String
  slug             String      @unique
  parentCategoryId String
  description      String?
  displayOrder     Int         @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots             Lot[]
  bens             Bem[]
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model DocumentType {
  id          String         @id @default(cuid())
  name        String
  description String?
  isRequired  Boolean        @default(true)
  appliesTo   String?
  userDocs    UserDocument[]
}

model UserDocument {
  id              String       @id @default(cuid())
  userId          String
  documentTypeId  String
  status          String       @default("PENDING_ANALYSIS")
  fileUrl         String
  fileName        String?
  rejectionReason String?      @db.Text
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType @relation(fields: [documentTypeId], references: [id])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@unique([userId, documentTypeId])
}

// =================================================================
// 2. TABELAS DE USUÁRIOS E PERFIS
// =================================================================

model User {
  id                  String               @id @default(cuid())
  uid                 String?              @unique
  email               String               @unique
  password            String?
  fullName            String?
  habilitationStatus  String               @default("PENDING_DOCUMENTS")
  accountType         String               @default("PHYSICAL")
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?
  bids                Bid[]
  wins                UserWin[]            @relation("LotWinner")
  questions           LotQuestion[]
  reviews             Review[]
  maxBids             UserLotMaxBid[]
  documents           UserDocument[]
  mediaItems          MediaItem[]
  roles               UsersOnRoles[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  habilitations       AuctionHabilitation[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model UsersOnRoles {
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

// =================================================================
// 3. TABELAS DE ENTIDADES PRINCIPAIS (Comitente, Leiloeiro)
// =================================================================

model Seller {
  id               String            @id @default(cuid())
  publicId         String            @unique @default(cuid())
  slug             String            @unique
  name             String            @unique
  contactName      String?
  email            String?
  phone            String?
  address          String?
  city             String?
  state            String?
  zipCode          String?
  website          String?
  logoUrl          String?
  logoMediaId      String?
  dataAiHintLogo   String?
  description      String?           @db.Text
  userId           String?           @unique
  user             User?             @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: SetNull)
  isJudicial       Boolean           @default(false)
  judicialBranchId String?           @unique
  judicialBranch   JudicialBranch?   @relation(fields: [judicialBranchId], references: [id])
  auctions         Auction[]
  lots             Lot[]
  bens             Bem[]
  directSaleOffers DirectSaleOffer[]
  processes        JudicialProcess[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Auctioneer {
  id                 String    @id @default(cuid())
  publicId           String    @unique @default(cuid())
  slug               String    @unique
  name               String
  registrationNumber String?
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?   @db.Text
  userId             String?   @unique
  user               User?     @relation(fields: [userId], references: [id])
  auctions           Auction[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

// =================================================================
// 4. TABELAS DE LEILÕES
// =================================================================

model Auction {
  id                             String                @id @default(cuid())
  publicId                       String                @unique @default(cuid())
  slug                           String                @unique
  title                          String
  description                    String?               @db.Text
  status                         String                @default("RASCUNHO")
  auctionDate                    DateTime
  endDate                        DateTime?
  auctioneerId                   String
  sellerId                       String
  categoryId                     String?
  auctionType                    String?
  imageUrl                       String?
  imageMediaId                   String?
  documentsUrl                   String?
  visits                         Int?                  @default(0)
  totalLots                      Int?                  @default(0)
  initialOffer                   Float?
  isFavorite                     Boolean?              @default(false)
  dataAiHint                     String?
  judicialProcessId              String?               @unique
  auctioneer                     Auctioneer            @relation(fields: [auctioneerId], references: [id])
  seller                         Seller                @relation(fields: [sellerId], references: [id])
  category                       LotCategory?          @relation(fields: [categoryId], references: [id])
  lots                           Lot[]
  bids                           Bid[]
  auctionStages                  AuctionStage[]
  habilitations                  AuctionHabilitation[]
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  automaticBiddingEnabled        Boolean               @default(false)
  silentBiddingEnabled           Boolean               @default(false)
  allowMultipleBidsPerUser       Boolean               @default(true)
  allowInstallmentBids           Boolean               @default(false)
  softCloseEnabled               Boolean               @default(false)
  softCloseMinutes               Int                   @default(2)
  estimatedRevenue               Float?
  achievedRevenue                Float?
  totalHabilitatedUsers          Int?
  isFeaturedOnMarketplace        Boolean               @default(false)
  marketplaceAnnouncementTitle   String?
  decrementAmount                Float?
  decrementIntervalSeconds       Int?
  floorPrice                     Float?
  autoRelistSettings             Json?
  additionalTriggers             Json?
  createdAt                      DateTime              @default(now())
  updatedAt                      DateTime              @updatedAt
}

model AuctionStage {
  id          String   @id @default(cuid())
  auctionId   String
  name        String
  endDate     DateTime
  initialPrice Float?
  statusText  String?
  auction     Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}

model AuctionHabilitation {
  userId      String
  auctionId   String
  habilitatedAt DateTime @default(now())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction     Auction    @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  @@id([userId, auctionId])
}

// =================================================================
// 5. TABELAS DE BENS, LOTES E LANCES
// =================================================================

model Bem {
  id                       String        @id @default(cuid())
  publicId                 String        @unique @default(cuid())
  title                    String
  description              String?       @db.Text
  status                   String        @default("DISPONIVEL")
  categoryId               String
  subcategoryId            String?
  judicialProcessId        String?
  sellerId                 String?
  evaluationValue          Float?
  imageUrl                 String?
  imageMediaId             String?
  galleryImageUrls         Json?
  mediaItemIds             Json?
  dataAiHint               String?
  locationCity             String?
  locationState            String?
  address                  String?
  latitude                 Decimal?
  longitude                Decimal?
  category                 LotCategory   @relation(fields: [categoryId], references: [id])
  subcategory              Subcategory?  @relation(fields: [subcategoryId], references: [id])
  judicialProcess          JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller                   Seller?       @relation(fields: [sellerId], references: [id])
  lots                     LotBens[]
  // Vehicle specific fields
  plate                    String?
  make                     String?
  model                    String?
  version                  String?
  year                     Int?
  modelYear                Int?
  mileage                  Int?
  color                    String?
  fuelType                 String?
  transmissionType         String?
  bodyType                 String?
  vin                      String?
  renavam                  String?
  enginePower              String?
  numberOfDoors            Int?
  vehicleOptions           String?       @db.Text
  detranStatus             String?
  debts                    String?       @db.Text
  runningCondition         String?
  bodyCondition            String?
  tiresCondition           String?
  hasKey                   Boolean?
  // Real Estate specific fields
  propertyType             String?
  propertyRegistrationNumber String?
  iptuNumber               String?
  isOccupied               Boolean?
  area                     Float?
  totalArea                Float?
  builtArea                Float?
  bedrooms                 Int?
  suites                   Int?
  bathrooms                Int?
  parkingSpaces            Int?
  constructionType         String?
  finishes                 String?       @db.Text
  infrastructure           String?       @db.Text
  condoDetails             String?       @db.Text
  improvements             String?       @db.Text
  topography               String?
  liensAndEncumbrances     String?       @db.Text
  propertyDebts            String?       @db.Text
  unregisteredRecords      String?       @db.Text
  hasHabiteSe              Boolean?
  zoningRestrictions       String?
  amenities                Json?
  // Electronics specific fields
  brand                    String?
  serialNumber             String?
  itemCondition            String?
  specifications           String?       @db.Text
  includedAccessories      String?
  batteryCondition         String?
  hasInvoice               Boolean?
  hasWarranty              Boolean?
  repairHistory            String?
  // Appliances specific fields
  applianceCapacity        String?
  voltage                  String?
  applianceType            String?
  additionalFunctions      String?
  // Machinery specific fields
  hoursUsed                Int?
  engineType               String?
  capacityOrPower          String?
  maintenanceHistory       String?       @db.Text
  installationLocation     String?
  compliesWithNR           String?
  operatingLicenses        String?
  // Livestock specific fields
  breed                    String?
  age                      String?
  sex                      String?
  weight                   String?
  individualId             String?
  purpose                  String?
  sanitaryCondition        String?
  vaccinationStatus        String?
  lineage                  String?
  isPregnant               Boolean?
  specialSkills            String?
  gtaDocument              String?
  breedRegistryDocument    String?
  
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
}

model Lot {
  id                             String        @id @default(cuid())
  publicId                       String        @unique @default(cuid())
  auctionId                      String
  slug                           String?
  number                         String?
  title                          String
  description                    String?       @db.Text
  price                          Float
  initialPrice                   Float?
  secondInitialPrice             Float?
  bidIncrementStep               Float?
  status                         String        @default("EM_BREVE")
  bidsCount                      Int?
  views                          Int?
  isFeatured                     Boolean?
  isExclusive                    Boolean?
  discountPercentage             Int?
  additionalTriggers             Json?
  imageUrl                       String?
  imageMediaId                   String?
  galleryImageUrls               Json?
  mediaItemIds                   Json?
  type                           String
  categoryId                     String
  subcategoryId                  String?
  auctionName                    String?
  sellerId                       String?
  sellerName                     String?
  auctioneerId                   String?
  cityId                         String?
  stateId                        String?
  cityName                       String?
  stateUf                        String?
  latitude                       Decimal?
  longitude                      Decimal?
  mapAddress                     String?
  mapEmbedUrl                    String?       @db.Text
  mapStaticImageUrl              String?
  endDate                        DateTime?
  auctionDate                    DateTime?
  lotSpecificAuctionDate         DateTime?
  secondAuctionDate              DateTime?
  condition                      String?
  dataAiHint                     String?
  winnerId                       String?
  winningBidTermUrl              String?
  allowInstallmentBids           Boolean       @default(false)
  auction                        Auction       @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                       LotCategory   @relation(fields: [categoryId], references: [id])
  subcategory                    Subcategory?  @relation(fields: [subcategoryId], references: [id])
  city                           City?         @relation(fields: [cityId], references: [id])
  state                          State?        @relation(fields: [stateId], references: [id])
  seller                         Seller?       @relation(fields: [sellerId], references: [id])
  winner                         User?         @relation("LotWinner", fields: [winnerId], references: [id])
  win                            UserWin?      @relation("LotWinRecord")
  bids                           Bid[]
  questions                      LotQuestion[]
  reviews                        Review[]
  maxBids                        UserLotMaxBid[]
  bens                           LotBens[]
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt
}

model LotBens {
  lotId   String
  bemId   String
  lot     Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bem     Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  
  @@id([lotId, bemId])
}

model UserWin {
  id                String   @id @default(cuid())
  lotId             String   @unique
  userId            String
  winningBidAmount  Float
  winDate           DateTime
  paymentStatus     String
  invoiceUrl        String?
  lot               Lot      @relation("LotWinRecord", fields: [lotId], references: [id])
  user              User     @relation("LotWinner", fields: [userId], references: [id])
}

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String?
  amount        Float
  timestamp     DateTime @default(now())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lotId])
}

// =================================================================
// 6. TABELAS DE CONTEÚDO E INTERAÇÃO
// =================================================================

model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String?
  rating          Int
  comment         String?  @db.Text
  isApproved      Boolean  @default(true)
  createdAt       DateTime @default(now())
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                      String   @id @default(cuid())
  lotId                   String
  auctionId               String
  userId                  String
  userDisplayName         String
  questionText            String   @db.Text
  answerText              String?  @db.Text
  answeredByUserId        String?
  answeredByUserDisplayName String?
  answeredAt              DateTime?
  isPublic                Boolean  @default(false)
  createdAt               DateTime @default(now())
  lot                     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

// =================================================================
// 7. TABELAS DE ENTIDADES JUDICIAIS
// =================================================================

model Court {
  id                String             @id @default(cuid())
  name              String             @unique
  slug              String             @unique
  stateUf           String
  website           String?
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model JudicialDistrict {
  id                String            @id @default(cuid())
  name              String
  slug              String            @unique
  courtId           String
  stateId           String
  zipCode           String?
  court             Court             @relation(fields: [courtId], references: [id])
  state             State             @relation(fields: [stateId], references: [id])
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model JudicialBranch {
  id                String            @id @default(cuid())
  name              String
  slug              String            @unique
  districtId        String
  contactName       String?
  phone             String?
  email             String?
  district          JudicialDistrict  @relation(fields: [districtId], references: [id])
  sellers           Seller[]
  judicialProcesses JudicialProcess[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model JudicialProcess {
  id            String          @id @default(cuid())
  publicId      String          @unique @default(cuid())
  processNumber String          @unique
  isElectronic  Boolean         @default(true)
  courtId       String
  districtId    String
  branchId      String
  sellerId      String?
  court         Court           @relation(fields: [courtId], references: [id])
  district      JudicialDistrict @relation(fields: [districtId], references: [id])
  branch        JudicialBranch  @relation(fields: [branchId], references: [id])
  seller        Seller?         @relation(fields: [sellerId], references: [id])
  bens          Bem[]
  parties       JudicialParty[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model JudicialParty {
  id             String          @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      String
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

// =================================================================
// 8. TABELAS ADICIONAIS
// =================================================================

model MediaItem {
  id            String   @id @default(cuid())
  fileName      String
  storagePath   String   @unique
  title         String?
  altText       String?
  caption       String?
  description   String?  @db.Text
  mimeType      String
  sizeBytes     Int
  urlOriginal   String
  urlThumbnail  String?
  urlMedium     String?
  urlLarge      String?
  linkedLotIds  Json?
  dataAiHint    String?
  uploadedBy    String
  user          User     @relation(fields: [uploadedBy], references: [id])
  uploadedAt    DateTime @default(now())
}

model DocumentTemplate {
  id        String   @id @default(cuid())
  name      String   @unique
  type      String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DirectSaleOffer {
  id                   String   @id @default(cuid())
  publicId             String   @unique @default(cuid())
  title                String
  description          String?  @db.Text
  offerType            String
  price                Float?
  minimumOfferPrice    Float?
  status               String   @default("ACTIVE")
  category             String
  sellerId             String
  sellerName           String
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int?
  expiresAt            DateTime?
  seller               Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}
