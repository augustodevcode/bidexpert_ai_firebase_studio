// datasource db defines the database connection details.
datasource db {
  provider = "mysql" // ou "postgresql"
  url      = env("DATABASE_URL")
}

// generator client specifies that a Prisma Client should be generated.
generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. MODELS WITHOUT FOREIGN KEY DEPENDENCIES (BASE TABLES)
// =================================================================

model PlatformSettings {
  id                         String   @id @default("global") @map("_id")
  siteTitle                  String?
  siteTagline                String?  @db.VarChar(200)
  logoUrl                    String?
  faviconUrl                 String?
  galleryImageBasePath       String?  @db.VarChar(200)
  storageProvider            String?  @db.VarChar(50)
  firebaseStorageBucket      String?  @db.VarChar(200)
  activeThemeName            String?  @db.VarChar(100)
  themes                     Json?
  platformPublicIdMasks      Json?
  homepageSections           Json?
  mentalTriggerSettings      Json?
  sectionBadgeVisibility     Json?
  mapSettings                Json?
  searchPaginationType       String?  @db.VarChar(50)
  searchItemsPerPage         Int?
  searchLoadMoreCount        Int?
  showCountdownOnLotDetail   Boolean?
  showCountdownOnCards       Boolean?
  showRelatedLotsOnLotDetail Boolean?
  relatedLotsCount           Int?
  defaultUrgencyTimerHours   Int?
  variableIncrementTable     Json?
  biddingSettings            Json?
  defaultListItemsPerPage    Int?
  updatedAt                  DateTime @updatedAt
}

model Role {
  id             String        @id @default(cuid())
  name           String
  nameNormalized String        @unique
  description    String?       @db.VarChar(500)
  permissions    Json
  users          UsersOnRoles[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model State {
  id                String              @id @default(cuid())
  name              String
  uf                String              @unique
  slug              String              @unique
  cityCount         Int                 @default(0)
  cities            City[]
  courts            Court[]
  judicialDistricts JudicialDistrict[]
  lots              Lot[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model LotCategory {
  id                      String         @id @default(cuid())
  name                    String         @unique
  slug                    String         @unique
  description             String?        @db.VarChar(500)
  hasSubcategories        Boolean        @default(false)
  subcategories           Subcategory[]
  auctions                Auction[]
  lots                    Lot[]
  bens                    Bem[]
  iconName                String?
  logoUrl                 String?
  logoMediaId             String?        @unique
  logo                    MediaItem?     @relation("CategoryLogo", fields: [logoMediaId], references: [id])
  dataAiHintIcon          String?
  coverImageUrl           String?
  coverImageMediaId       String?        @unique
  coverImage              MediaItem?     @relation("CategoryCover", fields: [coverImageMediaId], references: [id])
  dataAiHintCover         String?
  megaMenuImageUrl        String?
  megaMenuImageMediaId    String?        @unique
  megaMenuImage           MediaItem?     @relation("CategoryMegaMenu", fields: [megaMenuImageMediaId], references: [id])
  dataAiHintMegaMenu      String?
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentTemplate {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(150)
  type      String   @db.VarChar(50)
  content   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(150)
  email     String   @db.VarChar(150)
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentType {
  id          String         @id @default(cuid())
  name        String         @db.VarChar(150)
  description String?
  isRequired  Boolean        @default(true)
  appliesTo   String?        @db.VarChar(50) // e.g., PHYSICAL, LEGAL, ALL
  userDocs    UserDocument[]
}


// =================================================================
// 2. MODELS WITH ONE LEVEL OF DEPENDENCY
// =================================================================

model User {
  id                   String                @id @default(cuid())
  uid                  String?               @unique // For Firebase Auth UID if used
  email                String                @unique
  password             String?
  fullName             String?
  roles                UsersOnRoles[]
  sellerProfile        Seller?
  auctioneerProfile    Auctioneer?
  bids                 Bid[]
  wins                 UserWin[]
  notifications        Notification[]
  questions            LotQuestion[]
  reviews              Review[]
  documents            UserDocument[]
  maxBids              UserLotMaxBid[]
  habilitations        AuctionHabilitation[]
  uploadedMedia        MediaItem[]
  lotsWon              Lot[]                 @relation("Winner")
  habilitationStatus   String                @default("PENDING_DOCUMENTS") @db.VarChar(50)
  accountType          String                @default("PHYSICAL") @db.VarChar(50)
  avatarUrl            String?
  dataAiHint           String?
  badges               Json?
  cpf                  String?               @unique
  dateOfBirth          DateTime?
  cellPhone            String?
  homePhone            String?
  razaoSocial          String?
  cnpj                 String?               @unique
  inscricaoEstadual    String?
  website              String?
  zipCode              String?
  street               String?
  number               String?
  complement           String?
  neighborhood         String?
  city                 String?
  state                String?
  optInMarketing       Boolean?              @default(false)
  rgNumber             String?
  rgIssuer             String?
  rgIssueDate          DateTime?
  rgState              String?
  gender               String?
  profession           String?
  nationality          String?
  maritalStatus        String?
  propertyRegime       String?
  spouseName           String?
  spouseCpf            String?
  responsibleName      String?
  responsibleCpf       String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String // e.g., 'system-signup', 'admin-panel'

  @@id([userId, roleId])
}

model City {
  id        String             @id @default(cuid())
  name      String             @db.VarChar(150)
  slug      String?
  stateId   String
  state     State              @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateUf   String?
  ibgeCode  String?            @unique
  lotCount  Int                @default(0)
  lots      Lot[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model Subcategory {
  id                 String      @id @default(cuid())
  name               String
  slug               String?     @unique
  parentCategoryId   String
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  description        String?     @db.VarChar(500)
  displayOrder       Int         @default(0)
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  lots               Lot[]
  bens               Bem[]
}

model Court {
  id                String              @id @default(cuid())
  name              String              @db.VarChar(150)
  slug              String?             @unique
  stateId           String?
  state             State?              @relation(fields: [stateId], references: [id])
  website           String?
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

// =================================================================
// 3. MODELS WITH TWO OR MORE LEVELS OF DEPENDENCY
// =================================================================

model Auctioneer {
  id                   String    @id @default(cuid())
  publicId             String    @unique @default(cuid())
  slug                 String?   @unique
  name                 String
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?   @db.Text
  userId               String?   @unique
  user                 User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  auctions             Auction[]
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model Seller {
  id                 String              @id @default(cuid())
  publicId           String              @unique @default(cuid())
  slug               String?             @unique
  name               String              @unique
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?             @db.Text
  userId             String?             @unique
  user               User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
  isJudicial         Boolean             @default(false)
  judicialBranchId   String?             @unique
  judicialBranch     JudicialBranch?     @relation(fields: [judicialBranchId], references: [id])
  auctions           Auction[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
  judicialProcesses  JudicialProcess[]
  lots               Lot[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model Auction {
  id                              String                @id @default(cuid())
  publicId                        String                @unique @default(cuid())
  slug                            String?               @unique
  title                           String
  description                     String?               @db.Text
  status                          String                @default("RASCUNHO")
  auctionDate                     DateTime
  endDate                         DateTime?
  auctioneerId                    String?
  auctioneer                      Auctioneer?           @relation(fields: [auctioneerId], references: [id])
  sellerId                        String?
  seller                          Seller?               @relation(fields: [sellerId], references: [id])
  categoryId                      String?
  category                        LotCategory?          @relation(fields: [categoryId], references: [id])
  auctionType                     String?
  imageUrl                        String?
  imageMediaId                    String?
  documentsUrl                    String?
  visits                          Int                   @default(0)
  totalLots                       Int                   @default(0)
  initialOffer                    Float?
  isFavorite                      Boolean               @default(false)
  dataAiHint                      String?
  lots                            Lot[]
  bids                            Bid[]
  auctionStages                   AuctionStage[]
  habilitations                   AuctionHabilitation[]
  isFeaturedOnMarketplace         Boolean               @default(false)
  marketplaceAnnouncementTitle    String?
  automaticBiddingEnabled         Boolean               @default(false)
  allowInstallmentBids            Boolean               @default(false)
  silentBiddingEnabled            Boolean               @default(false)
  allowMultipleBidsPerUser        Boolean               @default(true)
  softCloseEnabled                Boolean               @default(false)
  softCloseMinutes                Int?                  @default(2)
  estimatedRevenue                Float?
  achievedRevenue                 Float?
  totalHabilitatedUsers           Int?
  judicialProcessId               String?
  additionalTriggers              Json?
  decrementAmount                 Float?
  decrementIntervalSeconds        Int?
  floorPrice                      Float?
  autoRelistSettings              Json?
  evaluationReportUrl             String?
  auctionCertificateUrl           String?
  sellingBranch                   String?
  createdAt                       DateTime              @default(now())
  updatedAt                       DateTime              @updatedAt
}

model AuctionStage {
  id         String   @id @default(cuid())
  auctionId  String
  auction    Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  name       String
  endDate    DateTime
  statusText String?
}

model JudicialDistrict {
  id             String           @id @default(cuid())
  name           String           @db.VarChar(150)
  slug           String?          @unique
  courtId        String?
  court          Court?           @relation(fields: [courtId], references: [id])
  stateId        String?
  state          State?           @relation(fields: [stateId], references: [id])
  zipCode        String?
  branches       JudicialBranch[]
  processes      JudicialProcess[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model JudicialBranch {
  id            String            @id @default(cuid())
  name          String            @db.VarChar(150)
  slug          String?           @unique
  districtId    String?
  district      JudicialDistrict? @relation(fields: [districtId], references: [id])
  contactName   String?
  phone         String?
  email         String?
  processes     JudicialProcess[]
  seller        Seller?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model JudicialProcess {
  id              String            @id @default(cuid())
  publicId        String            @unique @default(cuid())
  processNumber   String
  isElectronic    Boolean           @default(true)
  courtId         String?
  court           Court?            @relation(fields: [courtId], references: [id])
  districtId      String?
  district        JudicialDistrict? @relation(fields: [districtId], references: [id])
  branchId        String?
  branch          JudicialBranch?   @relation(fields: [branchId], references: [id])
  sellerId        String?
  seller          Seller?           @relation(fields: [sellerId], references: [id])
  parties         JudicialParty[]
  bens            Bem[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model JudicialParty {
  id             String          @id @default(cuid())
  processId      String
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  name           String
  documentNumber String?
  partyType      String
}

model Lot {
  id                        String          @id @default(cuid())
  publicId                  String          @unique @default(cuid())
  auctionId                 String
  auction                   Auction         @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  slug                      String?
  number                    String?
  title                     String
  description               String?         @db.Text
  price                     Float
  initialPrice              Float?
  secondInitialPrice        Float?
  bidIncrementStep          Float?
  status                    String          @default("EM_BREVE")
  bidsCount                 Int?            @default(0)
  views                     Int?            @default(0)
  isFeatured                Boolean?        @default(false)
  isExclusive               Boolean?        @default(false)
  discountPercentage        Int?
  additionalTriggers        Json?
  imageUrl                  String?
  imageMediaId              String?
  galleryImageUrls          Json?
  mediaItemIds              Json?
  type                      String?
  categoryId                String?
  category                  LotCategory?    @relation(fields: [categoryId], references: [id])
  subcategoryId             String?
  subcategory               Subcategory?    @relation(fields: [subcategoryId], references: [id])
  auctionName               String?
  sellerId                  String?
  seller                    Seller?         @relation(fields: [sellerId], references: [id])
  sellerName                String?
  auctioneerId              String?
  cityId                    String?
  city                      City?           @relation(fields: [cityId], references: [id])
  stateId                   String?
  state                     State?          @relation(fields: [stateId], references: [id])
  cityName                  String?
  stateUf                   String?
  latitude                  Float?
  longitude                 Float?
  mapAddress                String?
  mapEmbedUrl               String?         @db.VarChar(500)
  mapStaticImageUrl         String?
  endDate                   DateTime?
  auctionDate               DateTime?
  lotSpecificAuctionDate    DateTime?
  secondAuctionDate         DateTime?
  condition                 String?
  dataAiHint                String?
  winnerId                  String?
  winner                    User?           @relation("Winner", fields: [winnerId], references: [id])
  winningBidTermUrl         String?
  allowInstallmentBids      Boolean         @default(false)
  bids                      Bid[]
  reviews                   Review[]
  questions                 LotQuestion[]
  maxBids                   UserLotMaxBid[]
  bens                      LotBens[]
  win                       UserWin?        @relation("LotWinRecord")
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
}

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId     String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidderId      String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderDisplay String?
  amount        Float
  timestamp     DateTime @default(now())
}

model UserDocument {
  id                String       @id @default(cuid())
  userId            String
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentTypeId    String
  documentType      DocumentType @relation(fields: [documentTypeId], references: [id])
  status            String       @default("PENDING")
  fileUrl           String
  fileName          String?
  rejectionReason   String?      @db.Text
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model UserWin {
  id               String   @id @default(cuid())
  lotId            String   @unique
  lot              Lot      @relation("LotWinRecord", fields: [lotId], references: [id])
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  winningBidAmount Float
  winDate          DateTime
  paymentStatus    String
  invoiceUrl       String?
}

model DirectSaleOffer {
  id                   String   @id @default(cuid())
  publicId             String   @unique @default(cuid())
  title                String
  description          String?  @db.Text
  offerType            String?
  price                Float?
  minimumOfferPrice    Float?
  status               String   @default("ACTIVE")
  category             String?
  sellerId             String?
  seller               Seller?  @relation(fields: [sellerId], references: [id])
  sellerName           String?
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?  @unique
  image                MediaItem? @relation("DirectSaleImage", fields: [imageMediaId], references: [id])
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int?     @default(0)
  expiresAt            DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model MediaItem {
  id                      String           @id @default(cuid())
  fileName                String           @unique
  storagePath             String
  title                   String?
  altText                 String?
  caption                 String?          @db.VarChar(500)
  description             String?          @db.Text
  mimeType                String
  sizeBytes               Int?
  urlOriginal             String
  urlThumbnail            String?
  urlMedium               String?
  urlLarge                String?
  linkedLotIds            Json?
  dataAiHint              String?
  uploadedBy              String?
  uploader                User?            @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)
  uploadedAt              DateTime         @default(now())
  LotCategoriesLogo       LotCategory[]    @relation("CategoryLogo")
  LotCategoriesCover      LotCategory[]    @relation("CategoryCover")
  LotCategoriesMega       LotCategory[]    @relation("CategoryMegaMenu")
  DirectSaleOffers        DirectSaleOffer[] @relation("DirectSaleImage")
}

model Review {
  id                String   @id @default(cuid())
  lotId             String
  lot               Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId         String
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userDisplayName   String
  rating            Int
  comment           String   @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model LotQuestion {
  id                        String   @id @default(cuid())
  lotId                     String
  lot                       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId                 String
  userId                    String
  user                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userDisplayName           String
  questionText              String   @db.Text
  answerText                String?  @db.Text
  answeredByUserId          String?
  answeredByUserDisplayName String?
  answeredAt                DateTime?
  isPublic                  Boolean  @default(true)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lotId     String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model AuctionHabilitation {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  auctionId String
  auction   Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  approved  Boolean @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, auctionId])
}

model LotBens {
  lot    Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId  String
  bem    Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId  String

  @@id([lotId, bemId])
}
