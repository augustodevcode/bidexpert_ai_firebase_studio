// prisma/schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// MODELOS DE NEGÓCIO PRINCIPAIS
// =================================================================

model Auction {
  id                           String        @id @default(cuid())
  publicId                     String        @unique @default(cuid())
  slug                         String        @unique
  title                        String
  description                  String?       @db.Text
  status                       String        @default("RASCUNHO")
  auctionDate                  DateTime      @default(now())
  endDate                      DateTime?
  totalLots                    Int           @default(0)
  initialOffer                 Decimal?      @db.Decimal(15, 2)
  visits                       Int           @default(0)
  isFavorite                   Boolean       @default(false)
  dataAiHint                   String?       @db.VarChar(100)
  imageUrl                     String?
  imageMediaId                 String?
  documentsUrl                 String?
  evaluationReportUrl          String?
  auctionCertificateUrl        String?
  sellingBranch                String?       @db.VarChar(100)
  automaticBiddingEnabled      Boolean       @default(false)
  silentBiddingEnabled         Boolean       @default(false)
  allowMultipleBidsPerUser     Boolean       @default(true)
  allowInstallmentBids         Boolean       @default(false)
  softCloseEnabled             Boolean       @default(false)
  softCloseMinutes             Int           @default(2)
  estimatedRevenue             Decimal?      @db.Decimal(15, 2)
  achievedRevenue              Decimal?      @db.Decimal(15, 2)
  totalHabilitatedUsers        Int           @default(0)
  isFeaturedOnMarketplace      Boolean       @default(false)
  marketplaceAnnouncementTitle String?       @db.VarChar(150)
  decrementAmount              Decimal?      @db.Decimal(15, 2)
  decrementIntervalSeconds     Int?
  floorPrice                   Decimal?      @db.Decimal(15, 2)
  autoRelistSettings           Json?
  additionalTriggers           Json?
  auctionType                  String?       @db.VarChar(50)
  lots                         Lot[]
  auctioneer                   Auctioneer    @relation(fields: [auctioneerId], references: [id])
  auctioneerId                 String
  seller                       Seller        @relation(fields: [sellerId], references: [id])
  sellerId                     String
  category                     LotCategory?  @relation(fields: [categoryId], references: [id])
  categoryId                   String?
  bids                         Bid[]
  auctionStages                AuctionStage[]
  judicialProcessId            String?
  habilitations                AuctionHabilitation[]
  createdAt                    DateTime      @default(now())
  updatedAt                    DateTime      @updatedAt
}

model Lot {
  id                       String         @id @default(cuid())
  publicId                 String         @unique @default(cuid())
  slug                     String?
  number                   String?        @db.VarChar(20)
  title                    String
  description              String?        @db.Text
  price                    Decimal        @db.Decimal(15, 2)
  initialPrice             Decimal?       @db.Decimal(15, 2)
  secondInitialPrice       Decimal?       @db.Decimal(15, 2)
  bidIncrementStep         Decimal?       @db.Decimal(10, 2)
  status                   String         @default("EM_BREVE")
  bidsCount                Int            @default(0)
  views                    Int            @default(0)
  isFeatured               Boolean        @default(false)
  isExclusive              Boolean        @default(false)
  discountPercentage       Int?
  additionalTriggers       Json?
  imageUrl                 String?
  imageMediaId             String?
  galleryImageUrls         Json?
  mediaItemIds             Json?
  type                     String         @db.VarChar(100)
  condition                String?        @db.VarChar(100)
  dataAiHint               String?        @db.VarChar(100)
  winningBidTermUrl        String?
  allowInstallmentBids     Boolean        @default(false)
  auction                  Auction        @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                String
  category                 LotCategory?   @relation(fields: [categoryId], references: [id])
  categoryId               String?
  subcategory              Subcategory?   @relation(fields: [subcategoryId], references: [id])
  subcategoryId            String?
  bens                     LotBens[]
  bids                     Bid[]
  city                     City?          @relation(fields: [cityId], references: [id])
  cityId                   String?
  state                    State?         @relation(fields: [stateId], references: [id])
  stateId                  String?
  winner                   User?          @relation("WonLots", fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId                 String?
  maxBids                  UserLotMaxBid[]
  wins                     UserWin[]
  reviews                  Review[]
  questions                LotQuestion[]
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  endDate                  DateTime?
  lotSpecificAuctionDate   DateTime?
  secondAuctionDate        DateTime?
  latitude                 Float?
  longitude                Float?
  mapAddress               String?        @db.VarChar(255)
  mapEmbedUrl              String?        @db.VarChar(500)
  mapStaticImageUrl        String?
  auctionName              String?
  sellerName               String?
  sellerId                 String?
  auctioneerId             String?
  cityName                 String?
  stateUf                  String?
}

// =================================================================
// MODELOS DE USUÁRIO E PERMISSÕES
// =================================================================

model User {
  id                   String               @id @default(cuid())
  uid                  String?              @unique // From Firebase Auth if exists
  email                String               @unique
  password             String?
  fullName             String?
  avatarUrl            String?
  dataAiHint           String?              @db.VarChar(100)
  cpf                  String?              @unique
  rgNumber             String?
  rgIssuer             String?
  rgIssueDate          DateTime?
  rgState              String?
  dateOfBirth          DateTime?
  cellPhone            String?
  homePhone            String?
  gender               String?
  profession           String?
  nationality          String?
  maritalStatus        String?
  propertyRegime       String?
  spouseName           String?
  spouseCpf            String?
  zipCode              String?
  street               String?
  number               String?
  complement           String?
  neighborhood         String?
  city                 String?
  state                String?
  razaoSocial          String?
  cnpj                 String?
  inscricaoEstadual    String?
  website              String?
  responsibleName      String?
  responsibleCpf       String?
  optInMarketing       Boolean              @default(false)
  habilitationStatus   String               @default("PENDING_DOCUMENTS")
  accountType          String               @default("PHYSICAL")
  badges               Json?
  roles                UsersOnRoles[]
  bids                 Bid[]
  documents            UserDocument[]
  notifications        Notification[]
  wins                 UserWin[]
  maxBids              UserLotMaxBid[]
  reviews              Review[]
  questions            LotQuestion[]
  mediaItems           MediaItem[]
  sellerProfile        Seller?
  auctioneerProfile    Auctioneer?
  wonLots              Lot[]                @relation("WonLots")
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
}

model Role {
  id             String         @id @default(cuid())
  name           String
  nameNormalized String         @unique
  description    String?        @db.VarChar(255)
  permissions    Json
  users          UsersOnRoles[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  role       Role     @relation(fields: [roleId], references: [id])
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

// =================================================================
// MODELOS DE CATEGORIZAÇÃO E LOCALIZAÇÃO
// =================================================================

model LotCategory {
  id                    String        @id @default(cuid())
  name                  String
  slug                  String        @unique
  description           String?       @db.VarChar(500)
  hasSubcategories      Boolean       @default(false)
  iconName              String?       @db.VarChar(50)
  logoUrl               String?
  logoMediaId           String?
  dataAiHintIcon        String?       @db.VarChar(100)
  coverImageUrl         String?
  coverImageMediaId     String?
  dataAiHintCover       String?       @db.VarChar(100)
  megaMenuImageUrl      String?
  megaMenuImageMediaId  String?
  dataAiHintMegaMenu    String?       @db.VarChar(100)
  lots                  Lot[]
  bens                  Bem[]
  auctions              Auction[]
  subcategories         Subcategory[]
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
}

model Subcategory {
  id                String      @id @default(cuid())
  name              String
  slug              String?
  description       String?     @db.VarChar(500)
  displayOrder      Int         @default(0)
  iconUrl           String?
  iconMediaId       String?
  dataAiHintIcon    String?     @db.VarChar(100)
  parentCategory    LotCategory @relation(fields: [parentCategoryId], references: [id])
  parentCategoryId  String
  lots              Lot[]
  bens              Bem[]
}

model State {
  id      String   @id @default(cuid())
  name    String
  uf      String   @unique @db.VarChar(2)
  slug    String?  @unique
  cities  City[]
}

model City {
  id        String   @id @default(cuid())
  name      String
  slug      String?
  ibgeCode  String?  @unique
  lotCount  Int      @default(0)
  state     State    @relation(fields: [stateId], references: [id])
  stateId   String
  stateUf   String?
  lots      Lot[]
}

// =================================================================
// MODELOS DE ENTIDADES (LEILOEIROS, COMITENTES)
// =================================================================

model Auctioneer {
  id                  String     @id @default(cuid())
  publicId            String     @unique
  slug                String?    @unique
  name                String
  registrationNumber  String?    @db.VarChar(50)
  contactName         String?    @db.VarChar(150)
  email               String?
  phone               String?    @db.VarChar(20)
  address             String?    @db.VarChar(200)
  city                String?    @db.VarChar(100)
  state               String?    @db.VarChar(50)
  zipCode             String?    @db.VarChar(10)
  website             String?
  logoUrl             String?
  logoMediaId         String?
  dataAiHintLogo      String?    @db.VarChar(100)
  description         String?    @db.Text
  userId              String?    @unique
  user                User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  auctions            Auction[]
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
}

model Seller {
  id                String     @id @default(cuid())
  publicId          String     @unique
  slug              String?    @unique
  name              String     @unique
  contactName       String?    @db.VarChar(150)
  email             String?
  phone             String?    @db.VarChar(20)
  address           String?    @db.VarChar(200)
  city              String?    @db.VarChar(100)
  state             String?    @db.VarChar(50)
  zipCode           String?    @db.VarChar(10)
  website           String?
  logoUrl           String?
  logoMediaId       String?
  dataAiHintLogo    String?    @db.VarChar(100)
  description       String?    @db.Text
  userId            String?    @unique
  user              User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  isJudicial        Boolean    @default(false)
  judicialBranchId  String?
  auctions          Auction[]
  bens              Bem[]
  directSaleOffers  DirectSaleOffer[]
  judicialProcesses JudicialProcess[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

// =================================================================
// MODELOS DE LANCE, HABILITAÇÃO E DOCUMENTOS
// =================================================================

model Bid {
  id            String   @id @default(cuid())
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId      String
  bidderDisplay String?
}

model AuctionHabilitation {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  auction     Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId   String
  approvedAt  DateTime  @default(now())

  @@unique([userId, auctionId])
}

model UserDocument {
  id              String   @id @default(cuid())
  status          String   @default("PENDING_ANALYSIS")
  fileUrl         String
  fileName        String?
  rejectionReason String?  @db.Text
  userId          String
  documentTypeId  String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType @relation(fields: [documentTypeId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(150)
  description String?  @db.VarChar(255)
  isRequired  Boolean  @default(true)
  appliesTo   String?  @db.VarChar(50) // e.g., PHYSICAL, LEGAL, ALL
  userDocs    UserDocument[]
}

// =================================================================
// MODELOS JUDICIAIS
// =================================================================

model Court {
  id                 String               @id @default(cuid())
  name               String               @db.VarChar(150)
  slug               String?
  stateUf            String?              @db.VarChar(2)
  website            String?
  judicialDistricts  JudicialDistrict[]
  judicialProcesses  JudicialProcess[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model JudicialDistrict {
  id                String             @id @default(cuid())
  name              String             @unique @db.VarChar(150)
  slug              String?            @unique
  zipCode           String?            @db.VarChar(10)
  court             Court?             @relation(fields: [courtId], references: [id])
  courtId           String?
  state             State?             @relation(fields: [stateId], references: [id])
  stateId           String?
  branches          JudicialBranch[]
  judicialProcesses JudicialProcess[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model JudicialBranch {
  id                String               @id @default(cuid())
  name              String               @db.VarChar(150)
  slug              String?              @unique
  contactName       String?              @db.VarChar(150)
  phone             String?              @db.VarChar(20)
  email             String?
  district          JudicialDistrict?    @relation(fields: [districtId], references: [id])
  districtId        String?
  judicialProcesses JudicialProcess[]
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
}

model JudicialProcess {
  id                String             @id @default(cuid())
  publicId          String             @unique
  processNumber     String
  isElectronic      Boolean            @default(true)
  court             Court?             @relation(fields: [courtId], references: [id])
  courtId           String?
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  districtId        String?
  branch            JudicialBranch?    @relation(fields: [branchId], references: [id])
  branchId          String?
  seller            Seller?            @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId          String?
  parties           JudicialParty[]
  bens              Bem[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model JudicialParty {
  id             String          @id @default(cuid())
  name           String
  documentNumber String?         @db.VarChar(50)
  partyType      String          @db.VarChar(50)
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId      String
}

// =================================================================
// MODELO DE BENS (ASSET) E TABELA DE JUNÇÃO
// =================================================================

model Bem {
  id                String         @id @default(cuid())
  publicId          String         @unique
  title             String         @db.VarChar(200)
  description       String?        @db.Text
  status            String         @default("DISPONIVEL")
  evaluationValue   Decimal?       @db.Decimal(15, 2)
  imageUrl          String?
  imageMediaId      String?
  galleryImageUrls  Json?
  mediaItemIds      Json?
  dataAiHint        String?        @db.VarChar(100)
  locationCity      String?        @db.VarChar(100)
  locationState     String?        @db.VarChar(100)
  address           String?        @db.VarChar(255)
  latitude          Float?
  longitude         Float?
  category          LotCategory?   @relation(fields: [categoryId], references: [id])
  categoryId        String?
  subcategory       Subcategory?   @relation(fields: [subcategoryId], references: [id])
  subcategoryId     String?
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId String?
  seller            Seller?        @relation(fields: [sellerId], references: [id])
  sellerId          String?
  lots              LotBens[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model LotBens {
  lot     Lot    @relation(fields: [lotId], references: [id])
  lotId   String
  bem     Bem    @relation(fields: [bemId], references: [id])
  bemId   String
  @@id([lotId, bemId])
}

// =================================================================
// MODELOS DE CONTEÚDO E OUTROS
// =================================================================

model MediaItem {
  id             String    @id @default(cuid())
  fileName       String    @unique
  storagePath    String
  title          String?
  altText        String?
  caption        String?   @db.VarChar(500)
  description    String?   @db.Text
  mimeType       String    @db.VarChar(100)
  sizeBytes      Int?
  urlOriginal    String
  urlThumbnail   String?
  urlMedium      String?
  urlLarge       String?
  linkedLotIds   Json?
  dataAiHint     String?   @db.VarChar(100)
  uploadedBy     String?   // User ID
  user           User?     @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)
  uploadedAt     DateTime  @default(now())
}

model PlatformSettings {
  id                           String   @id @default("global")
  siteTitle                    String?
  siteTagline                  String?  @db.VarChar(200)
  logoUrl                      String?
  faviconUrl                   String?
  galleryImageBasePath         String?  @db.VarChar(200)
  storageProvider              String?  @db.VarChar(50)
  firebaseStorageBucket        String?  @db.VarChar(200)
  activeThemeName              String?  @db.VarChar(100)
  themes                       Json?
  platformPublicIdMasks        Json?
  homepageSections             Json?
  mentalTriggerSettings        Json?
  sectionBadgeVisibility       Json?
  mapSettings                  Json?
  searchPaginationType         String?  @db.VarChar(50)
  searchItemsPerPage           Int?
  searchLoadMoreCount          Int?
  showCountdownOnLotDetail     Boolean?
  showCountdownOnCards         Boolean?
  showRelatedLotsOnLotDetail   Boolean?
  relatedLotsCount             Int?
  defaultUrgencyTimerHours     Int?
  variableIncrementTable       Json?
  biddingSettings              Json?
  defaultListItemsPerPage      Int?
  updatedAt                    DateTime @updatedAt
}

model DocumentTemplate {
  id      String   @id @default(cuid())
  name    String   @db.VarChar(150)
  type    String   @db.VarChar(50) // e.g., WINNING_BID_TERM
  content String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(150)
  email     String   @db.VarChar(150)
  subject   String?  @db.VarChar(255)
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  link      String?
  isRead    Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
}

model UserWin {
  id               String   @id @default(cuid())
  winningBidAmount Decimal  @db.Decimal(15, 2)
  winDate          DateTime
  paymentStatus    String
  invoiceUrl       String?
  lotId            String
  userId           String?
  lot              Lot      @relation(fields: [lotId], references: [id])
  user             User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model Review {
  id              String   @id @default(cuid())
  rating          Int
  comment         String?  @db.Text
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  createdAt       DateTime @default(now())
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                        String   @id @default(cuid())
  questionText              String   @db.Text
  answerText                String?  @db.Text
  isPublic                  Boolean  @default(true)
  answeredAt                DateTime?
  lotId                     String
  auctionId                 String
  userId                    String
  userDisplayName           String
  answeredByUserId          String?
  answeredByUserDisplayName String?
  createdAt                 DateTime @default(now())
  lot                       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model DirectSaleOffer {
  id                   String   @id @default(cuid())
  publicId             String   @unique
  title                String
  description          String?  @db.Text
  offerType            String   @db.VarChar(50) // BUY_NOW, ACCEPTS_PROPOSALS
  price                Decimal? @db.Decimal(15, 2)
  minimumOfferPrice    Decimal? @db.Decimal(15, 2)
  status               String   @default("ACTIVE") // ACTIVE, PENDING_APPROVAL, SOLD, EXPIRED
  category             String   @db.VarChar(100)
  sellerId             String?
  sellerName           String
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?  @db.VarChar(100)
  locationCity         String?  @db.VarChar(100)
  locationState        String?  @db.VarChar(100)
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?  @db.VarChar(100)
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int      @default(0)
  expiresAt            DateTime?
  seller               Seller?  @relation(fields: [sellerId], references: [id])
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  userId    String
  lotId     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model AuctionStage {
  id      String   @id @default(cuid())
  name    String
  endDate DateTime
  initialPrice Decimal? @db.Decimal(15,2)
  statusText String?
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId String
}
