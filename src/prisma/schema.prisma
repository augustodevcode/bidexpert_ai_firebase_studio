// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. Enumerações e Tipos Personalizados
// =================================================================

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

// =================================================================
// 2. Modelos Principais
// =================================================================
model User {
  id                String   @id @default(uuid())
  email             String   @unique
  password          String?
  fullName          String?
  habilitationStatus String   @default("PENDING_DOCUMENTS") /// PENDING_DOCUMENTS, PENDING_ANALYSIS, HABILITADO, REJECTED_DOCUMENTS, BLOCKED
  accountType       String   @default("PHYSICAL") /// PHYSICAL, LEGAL, DIRECT_SALE_CONSIGNOR
  avatarUrl         String?
  dataAiHint        String?
  badges            Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Detalhes PF
  cpf                   String?
  rgNumber              String?
  rgIssuer              String?
  rgIssueDate           DateTime?
  rgState               String?
  dateOfBirth           DateTime?
  homePhone             String?
  cellPhone             String?
  gender                String?
  profession            String?
  nationality           String?
  maritalStatus         String?
  propertyRegime        String?
  spouseName            String?
  spouseCpf             String?

  // Detalhes PJ
  razaoSocial           String?
  cnpj                  String?
  inscricaoEstadual     String?
  website               String?
  responsibleName       String?
  responsibleCpf        String?
  
  // Endereço
  zipCode       String?
  street        String?
  number        String?
  complement    String?
  neighborhood  String?
  city          String?
  state         String?
  optInMarketing Boolean? @default(false)


  // Relações
  roles                UsersOnRoles[]
  sellers              Seller[]
  auctioneers          Auctioneer[]
  documents            UserDocument[]
  bids                 Bid[]
  maxBids              UserLotMaxBid[]
  wins                 UserWin[] @relation("Winner")
  uploadedMedia        MediaItem[]     @relation("UploadedBy")
  answeredQuestions    LotQuestion[]   @relation("AnsweredByUser")
  notifications        Notification[]
  habilitations        AuctionHabilitation[]
  askedQuestions       LotQuestion[]     @relation("AskedByUser")

  @@index([email])
}

model Role {
  id              String   @id @default(uuid())
  name            String
  nameNormalized  String   @unique
  description     String?  @db.Text
  permissions     Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  users           UsersOnRoles[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String // "system-signup", "admin-panel", etc.

  @@id([userId, roleId])
  @@index([userId])
  @@index([roleId])
}


model State {
  id        String   @id @default(uuid())
  name      String
  uf        String   @unique
  slug      String   @unique
  cityCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relações
  cities      City[]
  districts   JudicialDistrict[]
  auctions    Auction[]
  lots        Lot[]
}

model City {
  id        String    @id @default(uuid())
  name      String
  slug      String?
  state     State     @relation(fields: [stateId], references: [id])
  stateId   String
  stateUf   String?
  ibgeCode  String?   @unique
  lotCount  Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relações
  auctions  Auction[]
  lots      Lot[]

  @@index([stateId])
}

model Court {
  id        String   @id @default(uuid())
  name      String
  slug      String?
  stateUf   String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações
  judicialProcesses  JudicialProcess[]
  judicialDistricts  JudicialDistrict[]
  auctions           Auction[]
}


model JudicialDistrict {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  court     Court?   @relation(fields: [courtId], references: [id])
  courtId   String?
  state     State?   @relation(fields: [stateId], references: [id])
  stateId   String?
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações
  branches      JudicialBranch[]
  processes     JudicialProcess[]
  auctions      Auction[]

  @@index([courtId])
  @@index([stateId])
}

model JudicialBranch {
  id           String   @id @default(uuid())
  name         String
  slug         String   @unique
  district     JudicialDistrict? @relation(fields: [districtId], references: [id])
  districtId   String?
  contactName  String?
  phone        String?
  email        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relações
  sellers           Seller[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]

  @@index([districtId])
}

model LotCategory {
  id                   String   @id @default(uuid())
  name                 String
  slug                 String   @unique
  description          String?  @db.Text
  hasSubcategories     Boolean  @default(false)
  itemCount            Int?     @default(0)
  
  logoUrl              String?
  logoMediaId          String?
  dataAiHintIcon       String?
  
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?

  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?

  iconName             String?

  // Relações
  lots                 Lot[]
  bens                 Bem[]
  auctions             Auction[]
  subcategories        Subcategory[]
  directSaleOffers     DirectSaleOffer[]
  
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Subcategory {
  id                 String      @id @default(uuid())
  name               String
  slug               String?
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id])
  parentCategoryId   String
  description        String?     @db.Text
  displayOrder       Int         @default(0)
  
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  
  // Relações
  lots               Lot[]
  bens               Bem[]
  
  @@index([parentCategoryId])
}

model Bem {
  id          String   @id @default(uuid())
  publicId    String   @unique @default(uuid())
  title       String
  description String?  @db.Text
  status      String   @default("DISPONIVEL") /// DISPONIVEL, LOTEADO, VENDIDO, REMOVIDO, INATIVADO

  evaluationValue     Decimal?
  imageUrl            String?
  imageMediaId        String?
  galleryImageUrls    Json?
  mediaItemIds        Json?
  dataAiHint          String?
  locationCity        String?
  locationState       String?
  address             String?
  latitude            Decimal?
  longitude           Decimal?

  // Relações
  category          LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId        String?
  subcategory       Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId     String?
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId String?
  seller            Seller? @relation(fields: [sellerId], references: [id])
  sellerId          String?
  lots              LotBens[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Veículos
  plate String?
  make String?
  model String?
  version String?
  year Int?
  modelYear Int?
  mileage Int?
  color String?
  fuelType String?
  transmissionType String?
  bodyType String?
  vin String?
  renavam String?
  enginePower String?
  numberOfDoors Int?
  vehicleOptions String? @db.Text
  detranStatus String?
  debts String? @db.Text
  runningCondition String?
  bodyCondition String?
  tiresCondition String?
  hasKey Boolean?

  // Imóveis
  propertyRegistrationNumber String?
  iptuNumber String?
  isOccupied Boolean?
  totalArea Decimal?
  builtArea Decimal?
  bedrooms Int?
  suites Int?
  bathrooms Int?
  parkingSpaces Int?
  constructionType String?
  finishes String? @db.Text
  infrastructure String? @db.Text
  condoDetails String? @db.Text
  improvements String? @db.Text
  topography String?
  liensAndEncumbrances String? @db.Text
  propertyDebts String? @db.Text
  unregisteredRecords String? @db.Text
  hasHabiteSe Boolean?
  zoningRestrictions String? @db.Text
  amenities Json?

  // Eletrônicos
  brand String?
  serialNumber String?
  itemCondition String?
  specifications String? @db.Text
  includedAccessories String? @db.Text
  batteryCondition String?
  hasInvoice Boolean?
  hasWarranty Boolean?
  repairHistory String? @db.Text
  
  // Eletrodomésticos
  applianceCapacity String?
  voltage String?
  applianceType String?
  additionalFunctions String? @db.Text
  
  // Máquinas e Equipamentos
  hoursUsed Int?
  engineType String?
  capacityOrPower String?
  maintenanceHistory String? @db.Text
  installationLocation String?
  compliesWithNR String?
  operatingLicenses String?
  
  // Semoventes (Livestock)
  breed String?
  age String?
  sex String?
  weight String?
  individualId String?
  purpose String?
  sanitaryCondition String? @db.Text
  vaccinationStatus String? @db.Text
  lineage String? @db.Text
  isPregnant Boolean?
  specialSkills String? @db.Text
  gtaDocument String?
  breedRegistryDocument String?

  @@index([categoryId])
  @@index([subcategoryId])
  @@index([judicialProcessId])
  @@index([sellerId])
}


model DirectSaleOffer {
  id                   String     @id @default(uuid())
  publicId             String     @unique @default(uuid())
  title                String
  description          String?    @db.Text
  offerType            String?    /// BUY_NOW, ACCEPTS_PROPOSALS
  price                Decimal?
  minimumOfferPrice    Decimal?
  status               String     @default("ACTIVE") /// ACTIVE, PENDING_APPROVAL, SOLD, EXPIRED
  category             LotCategory @relation(fields: [categoryId], references: [id])
  categoryId           String
  seller               Seller     @relation(fields: [sellerId], references: [id])
  sellerId             String
  sellerName           String?
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int        @default(0)
  expiresAt            DateTime?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  @@index([sellerId])
  @@index([categoryId])
}

model JudicialProcess {
  id            String   @id @default(uuid())
  publicId      String   @unique @default(uuid())
  processNumber String
  isElectronic  Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relações
  court         Court?             @relation(fields: [courtId], references: [id])
  courtId       String?
  district      JudicialDistrict?  @relation(fields: [districtId], references: [id])
  districtId    String?
  branch        JudicialBranch?    @relation(fields: [branchId], references: [id])
  branchId      String?
  seller        Seller?            @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId      String?
  parties       JudicialParty[]
  bens          Bem[]
  mediaItems    MediaItem[]

  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
  @@index([sellerId])
}

model JudicialParty {
  id             String          @id @default(uuid())
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId      String
  name           String
  documentNumber String?
  partyType      String /// AUTOR, REU, ADVOGADO_AUTOR, ADVOGADO_REU, JUIZ, ESCRIVAO, PERITO, ADMINISTRADOR_JUDICIAL, TERCEIRO_INTERESSADO, OUTRO

  @@index([processId])
}

model AuctionHabilitation {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  auction    Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId  String
  status     String   @default("APPROVED")
  approvedAt DateTime @default(now())

  @@id([userId, auctionId])
}

model Seller {
  id                   String   @id @default(uuid())
  publicId             String   @unique @default(uuid())
  slug                 String   @unique
  name                 String   @unique
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?  @db.Text
  isJudicial           Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relações
  user                 User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId               String?  @unique
  judicialBranch       JudicialBranch? @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  judicialBranchId     String?
  auctions             Auction[]
  lots                 Lot[]
  bens                 Bem[]
  judicialProcesses    JudicialProcess[]
  directSaleOffers     DirectSaleOffer[]
}

model Auctioneer {
  id                   String   @id @default(uuid())
  publicId             String   @unique @default(uuid())
  slug                 String   @unique
  name                 String
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?  @db.Text
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relações
  user                 User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId               String?
  auctions             Auction[]
  lots                 Lot[]
}


// Join Table for a many-to-many relationship between Lot and Bem
model LotBens {
  lot      Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId    String
  bem      Bem      @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId    String
  quantity Int      @default(1)
  
  @@id([lotId, bemId])
  @@index([lotId])
  @@index([bemId])
}


model LotAuctionStageDetails {
    lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
    lotId String
    stage AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)
    stageId String

    initialBid Decimal?
    bidIncrement Decimal?
    evaluationValue Decimal?         
    reservePrice Decimal?
    
    @@id([lotId, stageId])
    @@index([lotId])
    @@index([stageId])
}


model LotQuestion {
  id                      String   @id @default(uuid())
  lot                     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId                   String
  auction                 Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId               String
  user                    User     @relation("AskedByUser", fields: [userId], references: [id])
  userId                  String
  userDisplayName         String
  questionText            String   @db.Text
  isPublic                Boolean  @default(true)
  answeredBy              User?    @relation("AnsweredByUser", fields: [answeredByUserId], references: [id])
  answeredByUserId        String?
  answeredByUserDisplayName String?
  answerText              String?  @db.Text
  answeredAt              DateTime?
  createdAt               DateTime @default(now())

  @@index([lotId])
  @@index([userId])
}

model AuctionStage {
  id            String   @id @default(uuid())
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  name          String
  startDate     DateTime
  endDate       DateTime
  initialPrice  Decimal? /// Optional initial price override for this stage
  statusText    String?

  lotStageDetails LotAuctionStageDetails[]
  
  @@index([auctionId])
}

model Auction {
  id                             String   @id @default(uuid())
  publicId                       String   @unique @default(uuid())
  slug                           String   @unique
  title                          String
  description                    String?  @db.Text
  status                         String   @default("RASCUNHO")
  auctionDate                    DateTime @default(now())
  endDate                        DateTime?
  visits                         Int      @default(0)
  imageUrl                       String?
  imageMediaId                   String?
  documentsUrl                   String?
  estimatedRevenue               Decimal?
  achievedRevenue                Decimal?
  totalHabilitatedUsers          Int?     @default(0)
  isFeaturedOnMarketplace        Boolean  @default(false)
  marketplaceAnnouncementTitle   String?
  additionalTriggers             Json?
  
  // Settings
  auctionType                    AuctionType?
  auctionMethod                  AuctionMethod?
  participation                  AuctionParticipation?

  // Location fields for presencial/hibrido
  address                   String?
  zipCode                   String?
  
  // Dutch Auction Specific
  decrementAmount           Decimal?
  decrementIntervalSeconds  Int?
  floorPrice                Decimal?
  
  // Auto-relist settings
  autoRelistSettings        Json?
  
  // Relações
  auctioneer                 Auctioneer?       @relation(fields: [auctioneerId], references: [id])
  auctioneerId               String?
  seller                     Seller?           @relation(fields: [sellerId], references: [id])
  sellerId                   String?
  category                   LotCategory?      @relation(fields: [categoryId], references: [id])
  categoryId                 String?
  lots                       Lot[]
  auctionStages              AuctionStage[]
  bids                       Bid[]
  questions                  LotQuestion[]
  habilitations              AuctionHabilitation[]
  
  // Judicial Relations
  judicialProcess            JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId          String?
  court                      Court?           @relation(fields: [courtId], references: [id])
  courtId                    String?
  district                   JudicialDistrict? @relation(fields: [districtId], references: [id])
  districtId                 String?
  branch                     JudicialBranch?  @relation(fields: [branchId], references: [id])
  branchId                   String?
  
  // Location Relations
  city                       City?            @relation(fields: [cityId], references: [id])
  cityId                     String?
  state                      State?           @relation(fields: [stateId], references: [id])
  stateId                    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([auctioneerId])
  @@index([sellerId])
  @@index([categoryId])
  @@index([judicialProcessId])
  @@index([cityId])
  @@index([stateId])
}


model Lot {
  id                   String     @id @default(uuid())
  publicId             String     @unique @default(uuid())
  slug                 String?
  number               String?
  title                String
  description          String?    @db.Text
  price                Decimal    @default(0.0)
  status               String     @default("EM_BREVE")
  bidsCount            Int?       @default(0)
  views                Int?       @default(0)
  isFeatured           Boolean?   @default(false)
  isExclusive          Boolean?   @default(false)
  discountPercentage   Int?
  additionalTriggers   Json?
  imageUrl             String?
  imageMediaId         String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  inheritedMediaFromBemId String?
  type                 String?
  condition            String?
  dataAiHint           String?
  winningBidTermUrl    String?
  allowInstallmentBids Boolean?   @default(false)
  
  // Timestamps & Dates
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  endDate             DateTime?
  
  // Relações
  auction              Auction      @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId            String
  category             LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId           String?
  subcategory          Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId        String?
  seller               Seller?      @relation(fields: [sellerId], references: [id])
  sellerId             String?
  auctioneer           Auctioneer?  @relation(fields: [auctioneerId], references: [id])
  auctioneerId         String?
  city                 City?        @relation(fields: [cityId], references: [id])
  cityId               String?
  state                State?       @relation(fields: [stateId], references: [id])
  stateId              String?
  winner               User?        @relation("Winner", fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId             String?
  bens                 LotBens[]
  stageDetails         LotAuctionStageDetails[]
  bids                 Bid[]
  questions            LotQuestion[]
  wins                 UserWin[]
  maxBids              UserLotMaxBid[]
  
  // Denormalized fields
  auctionName          String?
  sellerName           String?
  cityName             String?
  stateUf              String?
  latitude             Decimal?
  longitude            Decimal?
  mapAddress           String?
  mapEmbedUrl          String?
  mapStaticImageUrl    String?
  
  @@index([auctionId])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([sellerId])
  @@index([auctioneerId])
  @@index([cityId])
  @@index([stateId])
  @@index([winnerId])
}


model MediaItem {
  id              String    @id @default(uuid())
  fileName        String    
  storagePath     String
  title           String?
  altText         String?
  caption         String?
  description     String?   @db.Text
  mimeType        String
  sizeBytes       Int?
  urlOriginal     String
  urlThumbnail    String?
  urlMedium       String?
  urlLarge        String?
  linkedLotIds    Json?
  dataAiHint      String?
  uploadedAt      DateTime  @default(now())
  
  // Relações
  uploadedBy        User?     @relation("UploadedBy", fields: [uploadedByUserId], references: [id])
  uploadedByUserId  String
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId String?
  
  @@unique([fileName, storagePath])
  @@index([uploadedByUserId])
  @@index([judicialProcessId])
}


model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

model Bid {
  id             String   @id @default(uuid())
  lot            Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId          String
  auction        Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId      String
  bidder         User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId       String
  bidderDisplay  String?
  amount         Decimal  @db.Decimal(15, 2)
  timestamp      DateTime @default(now())

  @@index([lotId])
  @@index([auctionId])
  @@index([bidderId])
}

model UserWin {
  id               String   @id @default(uuid())
  lot              Lot      @relation(fields: [lotId], references: [id])
  lotId            String   @unique // Each lot can only be won once
  user             User     @relation("Winner", fields: [userId], references: [id])
  userId           String
  winningBidAmount Decimal
  winDate          DateTime @default(now())
  paymentStatus    String   // PENDENTE, PROCESSANDO, PAGO, FALHOU, REEMBOLSADO
  invoiceUrl       String?

  @@index([userId])
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Decimal
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model UserDocument {
  id                String       @id @default(uuid())
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  documentType      DocumentType @relation(fields: [documentTypeId], references: [id])
  documentTypeId    String
  status            String       @default("PENDING_ANALYSIS") // PENDING_ANALYSIS, APPROVED, REJECTED
  fileUrl           String
  fileName          String?
  rejectionReason   String?      @db.Text
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  @@unique([userId, documentTypeId])
}

model DocumentType {
  id           String         @id @default(uuid())
  name         String
  description  String?
  isRequired   Boolean        @default(true)
  appliesTo    String?        /// Comma-separated: PHYSICAL,LEGAL,ALL,PROCESS
  userDocs     UserDocument[]
}

model ContactMessage {
  id      String   @id @default(uuid())
  name    String
  email   String
  subject String?
  message String   @db.Text
  isRead  Boolean  @default(false)
  createdAt DateTime @default(now())
}


model VehicleMake {
  id     String         @id @default(uuid())
  name   String         @unique
  slug   String         @unique
  models VehicleModel[]
}

model VehicleModel {
  id     String      @id @default(uuid())
  name   String
  slug   String
  make   VehicleMake @relation(fields: [makeId], references: [id])
  makeId String

  @@unique([name, makeId])
  @@index([makeId])
}


// =================================================================
// 9. Platform Settings (Singleton Table)
// =================================================================

model PlatformSettings {
  id                             String   @id @default("global")
  siteTitle                      String?
  siteTagline                    String?
  logoUrl                        String?
  faviconUrl                     String?
  galleryImageBasePath           String?
  storageProvider                String?  @default("local")
  firebaseStorageBucket          String?
  activeThemeName                String?
  themes                         Json?
  platformPublicIdMasks          Json?
  homepageSections               Json?
  mentalTriggerSettings          Json?
  sectionBadgeVisibility         Json?
  mapSettings                    Json?
  searchPaginationType           String?  @default("loadMore")
  searchItemsPerPage             Int?     @default(12)
  searchLoadMoreCount            Int?     @default(12)
  showCountdownOnLotDetail       Boolean? @default(true)
  showCountdownOnCards           Boolean? @default(true)
  showRelatedLotsOnLotDetail     Boolean? @default(true)
  relatedLotsCount               Int?     @default(5)
  defaultUrgencyTimerHours       Int?
  variableIncrementTable         Json?
  biddingSettings                Json?
  paymentGatewaySettings         Json?
  defaultListItemsPerPage        Int?     @default(10)
  updatedAt                      DateTime @updatedAt
}