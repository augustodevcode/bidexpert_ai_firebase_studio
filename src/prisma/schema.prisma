// prisma/schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. Modelos Base e de Configuração
// =================================================================

model PlatformSettings {
  id                            String   @id @default("global")
  siteTitle                     String?
  siteTagline                   String?  @db.VarChar(200)
  logoUrl                       String?
  faviconUrl                    String?
  galleryImageBasePath          String?  @db.VarChar(200)
  storageProvider               String?  @db.VarChar(50)
  firebaseStorageBucket         String?  @db.VarChar(200)
  activeThemeName               String?  @db.VarChar(100)
  themes                        Json?
  platformPublicIdMasks         Json?
  homepageSections              Json?
  mentalTriggerSettings         Json?
  sectionBadgeVisibility        Json?
  mapSettings                   Json?
  searchPaginationType          String?  @db.VarChar(50)
  searchItemsPerPage            Int?     @default(12)
  searchLoadMoreCount           Int?     @default(12)
  showCountdownOnLotDetail      Boolean? @default(true)
  showCountdownOnCards          Boolean? @default(true)
  showRelatedLotsOnLotDetail    Boolean? @default(true)
  relatedLotsCount              Int?     @default(5)
  defaultUrgencyTimerHours      Int?
  variableIncrementTable        Json?
  biddingSettings               Json?
  defaultListItemsPerPage       Int?     @default(10)
  updatedAt                     DateTime @updatedAt
}

model LotCategory {
  id                   String        @id @default(cuid())
  name                 String        @unique
  slug                 String        @unique
  description          String?       @db.VarChar(500)
  hasSubcategories     Boolean       @default(false)
  logoUrl              String?
  logoMediaId          String?       @unique
  dataAiHintIcon       String?       @db.VarChar(100)
  coverImageUrl        String?
  coverImageMediaId    String?       @unique
  dataAiHintCover      String?       @db.VarChar(100)
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?       @unique
  dataAiHintMegaMenu   String?       @db.VarChar(100)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  lots                 Lot[]
  bens                 Bem[]
  subcategories        Subcategory[]
  auctions             Auction[]
  logo                 MediaItem?    @relation("CategoryLogo", fields: [logoMediaId], references: [id])
  coverImage           MediaItem?    @relation("CategoryCover", fields: [coverImageMediaId], references: [id])
  megaMenuImage        MediaItem?    @relation("CategoryMega", fields: [megaMenuImageMediaId], references: [id])
}

model Subcategory {
  id               String       @id @default(cuid())
  name             String
  slug             String       @unique
  parentCategoryId String
  parentCategory   LotCategory  @relation(fields: [parentCategoryId], references: [id])
  description      String?      @db.VarChar(500)
  displayOrder     Int          @default(0)
  iconUrl          String?
  iconMediaId      String?      @unique
  dataAiHintIcon   String?      @db.VarChar(100)
  lots             Lot[]
  bens             Bem[]
  icon             MediaItem?   @relation(fields: [iconMediaId], references: [id])
}

model State {
  id                String             @id @default(cuid())
  name              String
  uf                String             @unique
  slug              String             @unique
  cities            City[]
  judicialDistricts JudicialDistrict[]
  lots              Lot[]
}

model City {
  id      String @id @default(cuid())
  name    String
  slug    String
  stateId String
  state   State  @relation(fields: [stateId], references: [id])
  stateUf String
  ibgeCode String? @unique
  lots    Lot[]
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


// =================================================================
// 2. Modelos de Usuários, Perfis e Habilitação
// =================================================================

model User {
  id                   String                @id @default(cuid())
  uid                  String?               @unique // From Firebase Auth if used
  email                String                @unique
  password             String?
  fullName             String?
  cpf                  String?               @unique
  cellPhone            String?
  habilitationStatus   String                @default("PENDING_DOCUMENTS")
  accountType          String                @default("PHYSICAL")
  avatarUrl            String?
  dataAiHint           String?
  badges               Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  roles                UsersOnRoles[]
  bids                 Bid[]
  wins                 UserWin[]
  userDocuments        UserDocument[]
  mediaItems           MediaItem[]
  lotQuestions         LotQuestion[]
  notifications        Notification[]
  lotsWon              Lot[]                 @relation("Winner")
  maxBids              UserLotMaxBid[]
  auctionHabilitations AuctionHabilitation[]
  sellerProfile        Seller?
  auctioneerProfile    Auctioneer?
}

model Role {
  id             String         @id @default(cuid())
  name           String
  nameNormalized String         @unique
  description    String?        @db.VarChar(255)
  permissions    Json
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  users          UsersOnRoles[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model DocumentType {
  id          String         @id @default(cuid())
  name        String
  description String?        @db.VarChar(255)
  isRequired  Boolean        @default(true)
  appliesTo   String? // e.g., PHYSICAL,LEGAL
  documents   UserDocument[]
}

model UserDocument {
  id              String         @id @default(cuid())
  userId          String
  documentTypeId  String
  status          String         @default("PENDING")
  fileUrl         String
  fileName        String?
  rejectionReason String?        @db.Text
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType   @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}


// =================================================================
// 3. Modelos de Entidades de Leilão (Comitente, Leiloeiro)
// =================================================================

model Seller {
  id                 String             @id @default(cuid())
  publicId           String             @unique @default(cuid())
  slug               String             @unique
  name               String             @unique
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?            @unique
  dataAiHintLogo     String?            @db.VarChar(100)
  description        String?            @db.Text
  userId             String?            @unique
  user               User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  isJudicial         Boolean            @default(false)
  judicialBranchId   String?            @unique
  judicialBranch     JudicialBranch?    @relation(fields: [judicialBranchId], references: [id])
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  auctions           Auction[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
  judicialProcesses  JudicialProcess[]
}

model Auctioneer {
  id                   String    @id @default(cuid())
  publicId             String    @unique @default(cuid())
  slug                 String    @unique
  name                 String
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?   @unique
  dataAiHintLogo       String?   @db.VarChar(100)
  description          String?   @db.Text
  userId               String?   @unique
  user                 User?     @relation(fields: [userId], references: [id])
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  auctions             Auction[]
}


// =================================================================
// 4. Modelos de Entidades Judiciais
// =================================================================

model Court {
  id                String             @id @default(cuid())
  name              String
  slug              String             @unique
  stateUf           String?
  website           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
}

model JudicialDistrict {
  id                String             @id @default(cuid())
  name              String
  slug              String             @unique
  courtId           String
  court             Court              @relation(fields: [courtId], references: [id])
  stateId           String
  state             State              @relation(fields: [stateId], references: [id])
  zipCode           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
}

model JudicialBranch {
  id                String             @id @default(cuid())
  name              String
  slug              String             @unique
  districtId        String
  district          JudicialDistrict   @relation(fields: [districtId], references: [id])
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialProcesses JudicialProcess[]
  seller            Seller?
}

model JudicialProcess {
  id              String           @id @default(cuid())
  publicId        String           @unique @default(cuid())
  processNumber   String
  isElectronic    Boolean          @default(true)
  courtId         String
  districtId      String
  branchId        String
  sellerId        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  court           Court            @relation(fields: [courtId], references: [id])
  district        JudicialDistrict @relation(fields: [districtId], references: [id])
  branch          JudicialBranch   @relation(fields: [branchId], references: [id])
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  parties         JudicialParty[]
  bens            Bem[]
}

model JudicialParty {
  id             String          @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      String
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}


// =================================================================
// 5. Modelos Centrais de Leilão (Auction, Lot, Bem)
// =================================================================

model Auction {
  id                            String                @id @default(cuid())
  publicId                      String                @unique @default(cuid())
  slug                          String                @unique
  title                         String
  description                   String?               @db.Text
  status                        String                @default("RASCUNHO")
  auctionDate                   DateTime
  endDate                       DateTime?
  auctioneerId                  String
  sellerId                      String
  categoryId                    String?
  auctionType                   String?
  imageUrl                      String?
  imageMediaId                  String?               @unique
  documentsUrl                  String?
  visits                        Int                   @default(0)
  totalLots                     Int                   @default(0)
  initialOffer                  Float?
  isFeaturedOnMarketplace       Boolean               @default(false)
  marketplaceAnnouncementTitle  String?
  dataAiHint                    String?               @db.VarChar(100)
  allowInstallmentBids          Boolean               @default(false)
  automaticBiddingEnabled       Boolean               @default(false)
  softCloseEnabled              Boolean               @default(false)
  softCloseMinutes              Int?                  @default(2)
  silentBiddingEnabled          Boolean               @default(false)
  allowMultipleBidsPerUser      Boolean               @default(true)
  additionalTriggers            Json?
  autoRelistSettings            Json?
  createdAt                     DateTime              @default(now())
  updatedAt                     DateTime              @updatedAt
  auctioneer                    Auctioneer            @relation(fields: [auctioneerId], references: [id])
  seller                        Seller                @relation(fields: [sellerId], references: [id])
  category                      LotCategory?          @relation(fields: [categoryId], references: [id])
  lots                          Lot[]
  bids                          Bid[]
  auctionStages                 AuctionStage[]
  habilitations                 AuctionHabilitation[]
  image                         MediaItem?            @relation(fields: [imageMediaId], references: [id])
}

model AuctionStage {
  id        String   @id @default(cuid())
  auctionId String
  name      String
  endDate   DateTime
  statusText String?
  initialPrice Float?
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}

model AuctionHabilitation {
  userId      String
  auctionId   String
  habilitatedAt DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction     Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@id([userId, auctionId])
}

model Lot {
  id                       String        @id @default(cuid())
  publicId                 String        @unique @default(cuid())
  auctionId                String
  slug                     String?
  number                   String?
  title                    String
  description              String?       @db.Text
  price                    Float
  initialPrice             Float?
  secondInitialPrice       Float?
  bidIncrementStep         Float?
  status                   String        @default("EM_BREVE")
  bidsCount                Int           @default(0)
  views                    Int           @default(0)
  isFeatured               Boolean       @default(false)
  isExclusive              Boolean       @default(false)
  discountPercentage       Int?
  additionalTriggers       Json?
  imageUrl                 String?
  imageMediaId             String?       @unique
  galleryImageUrls         Json?
  mediaItemIds             Json?
  type                     String
  categoryId               String?
  subcategoryId            String?
  auctionName              String?
  sellerId                 String?
  sellerName               String?
  auctioneerId             String?
  cityId                   String?
  stateId                  String?
  cityName                 String?
  stateUf                  String?
  latitude                 Decimal?      @db.Decimal(10, 8)
  longitude                Decimal?      @db.Decimal(11, 8)
  mapAddress               String?
  mapEmbedUrl              String?       @db.VarChar(500)
  mapStaticImageUrl        String?
  endDate                  DateTime?
  auctionDate              DateTime?
  lotSpecificAuctionDate   DateTime?
  secondAuctionDate        DateTime?
  condition                String?
  dataAiHint               String?
  winnerId                 String?
  winningBidTermUrl        String?
  allowInstallmentBids     Boolean       @default(false)
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  auction                  Auction       @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                 LotCategory?  @relation(fields: [categoryId], references: [id])
  subcategory              Subcategory?  @relation(fields: [subcategoryId], references: [id])
  seller                   Seller?       @relation(fields: [sellerId], references: [id])
  city                     City?         @relation(fields: [cityId], references: [id])
  state                    State?        @relation(fields: [stateId], references: [id])
  winner                   User?         @relation("Winner", fields: [winnerId], references: [id])
  image                    MediaItem?    @relation(fields: [imageMediaId], references: [id])
  bids                     Bid[]
  userMaxBids              UserLotMaxBid[]
  bens                     LotBens[]
  reviews                  Review[]
  questions                LotQuestion[]
  win                      UserWin?
}

model Bem {
  id                   String   @id @default(cuid())
  publicId             String   @unique @default(cuid())
  title                String
  description          String?  @db.Text
  status               String   @default("DISPONIVEL")
  categoryId           String
  subcategoryId        String?
  judicialProcessId    String?
  sellerId             String?
  evaluationValue      Float?
  imageUrl             String?
  imageMediaId         String?  @unique
  galleryImageUrls     Json?
  mediaItemIds         Json?
  dataAiHint           String?
  locationCity         String?
  locationState        String?
  address              String?
  latitude             Decimal? @db.Decimal(10, 8)
  longitude            Decimal? @db.Decimal(11, 8)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  category             LotCategory        @relation(fields: [categoryId], references: [id])
  subcategory          Subcategory?       @relation(fields: [subcategoryId], references: [id])
  judicialProcess      JudicialProcess?   @relation(fields: [judicialProcessId], references: [id])
  seller               Seller?            @relation(fields: [sellerId], references: [id])
  lots                 LotBens[]
  image                MediaItem?         @relation(fields: [imageMediaId], references: [id])
}

model LotBens {
  lotId  String
  bemId  String
  lot    Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bem    Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)

  @@id([lotId, bemId])
}


// =================================================================
// 6. Modelos de Interação e Transação (Bid, Win, Review, etc.)
// =================================================================

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String?
  amount        Float
  timestamp     DateTime @default(now())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String      @id @default(cuid())
  lotId            String      @unique
  userId           String
  winningBidAmount Float
  winDate          DateTime
  paymentStatus    String
  invoiceUrl       String?
  lot              Lot         @relation("LotWinRecord", fields: [lotId], references: [id])
  user             User        @relation(fields: [userId], references: [id])
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String   @db.Text
  createdAt       DateTime @default(now())
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id])
}

model LotQuestion {
  id                        String   @id @default(cuid())
  lotId                     String
  auctionId                 String
  userId                    String
  userDisplayName           String
  questionText              String   @db.Text
  answerText                String?  @db.Text
  answeredByUserId          String?
  answeredByUserDisplayName String?
  answeredAt                DateTime?
  isPublic                  Boolean  @default(true)
  createdAt                 DateTime @default(now())
  lot                       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user                      User     @relation(fields: [userId], references: [id])
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}


// =================================================================
// 7. Modelos de Conteúdo e Mídia
// =================================================================

model MediaItem {
  id                   String        @id @default(cuid())
  fileName             String
  storagePath          String
  title                String?
  altText              String?
  caption              String?       @db.VarChar(500)
  description          String?       @db.Text
  mimeType             String
  sizeBytes            Int?
  urlOriginal          String
  urlThumbnail         String?
  urlMedium            String?
  urlLarge             String?
  linkedLotIds         Json?
  dataAiHint           String?
  uploadedBy           String
  uploadedAt           DateTime      @default(now())
  uploader             User          @relation(fields: [uploadedBy], references: [id])
  LotCategoriesLogo    LotCategory[] @relation("CategoryLogo")
  LotCategoriesCover   LotCategory[] @relation("CategoryCover")
  LotCategoriesMega    LotCategory[] @relation("CategoryMega")
  SubcategoryIcon      Subcategory[]
  AuctionImage         Auction[]
  LotImage             Lot[]
  BemImage             Bem[]
  AuctioneerLogo       Auctioneer[]
  SellerLogo           Seller[]
}

model DocumentTemplate {
  id        String   @id @default(cuid())
  name      String
  type      String // WINNING_BID_TERM, EVALUATION_REPORT, AUCTION_CERTIFICATE
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}
