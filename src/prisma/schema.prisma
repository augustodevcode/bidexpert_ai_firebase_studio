// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Auction {
  id                               String    @id @default(cuid())
  publicId                         String    @unique @default(uuid())
  slug                             String?   @unique
  title                            String
  description                      String?   @db.Text
  status                           String?   @default("RASCUNHO")
  auctionDate                      DateTime?
  endDate                          DateTime?
  auctioneerId                     String?
  sellerId                         String?
  categoryId                       String?
  auctionType                      String?
  imageUrl                         String?
  imageMediaId                     String?
  documentsUrl                     String?
  visits                           Int?      @default(0)
  totalLots                        Int?      @default(0)
  initialOffer                     Decimal?  @db.Decimal(15, 2)
  isFavorite                       Boolean?  @default(false)
  dataAiHint                       String?
  createdAt                        DateTime  @default(now())
  updatedAt                        DateTime  @updatedAt
  evaluationReportUrl              String?
  auctionCertificateUrl            String?
  sellingBranch                    String?
  automaticBiddingEnabled          Boolean   @default(false)
  silentBiddingEnabled             Boolean   @default(false)
  allowMultipleBidsPerUser         Boolean   @default(true)
  allowInstallmentBids             Boolean   @default(false)
  softCloseEnabled                 Boolean   @default(false)
  softCloseMinutes                 Int?
  estimatedRevenue                 Decimal?
  achievedRevenue                  Decimal?
  totalHabilitatedUsers            Int?
  isFeaturedOnMarketplace          Boolean   @default(false)
  marketplaceAnnouncementTitle     String?
  judicialProcessId                String?
  additionalTriggers               Json?
  decrementAmount                  Decimal?
  decrementIntervalSeconds         Int?
  floorPrice                       Decimal?
  autoRelistSettings               Json?
  auctioneer                       Auctioneer?   @relation(fields: [auctioneerId], references: [id])
  seller                           Seller?       @relation(fields: [sellerId], references: [id])
  category                         LotCategory?  @relation(fields: [categoryId], references: [id])
  lots                             Lot[]
  auctionStages                    AuctionStage[]
  bids                             Bid[]
  habilitations                    AuctionHabilitation[]
}

model AuctionStage {
  id         String   @id @default(cuid())
  auctionId  String
  name       String
  endDate    DateTime
  statusText String?
  auction    Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Lot {
  id                            String    @id @default(cuid())
  publicId                      String?   @unique
  auctionId                     String
  slug                          String?
  number                        String?
  title                         String
  description                   String?   @db.Text
  price                         Decimal   @db.Decimal(15, 2)
  initialPrice                  Decimal?  @db.Decimal(15, 2)
  secondInitialPrice            Decimal?  @db.Decimal(15, 2)
  bidIncrementStep              Decimal?  @db.Decimal(10, 2)
  status                        String?   @default("EM_BREVE")
  bidsCount                     Int?      @default(0)
  views                         Int?      @default(0)
  isFeatured                    Boolean?  @default(false)
  isExclusive                   Boolean?  @default(false)
  discountPercentage            Int?
  additionalTriggers            Json?
  imageUrl                      String?
  imageMediaId                  String?
  galleryImageUrls              Json?
  mediaItemIds                  Json?
  type                          String?
  categoryId                    String?
  subcategoryId                 String?
  auctionName                   String?
  sellerId                      String?
  sellerName                    String?
  auctioneerId                  String?
  cityId                        String?
  stateId                       String?
  cityName                      String?
  stateUf                       String?
  latitude                      Decimal?  @db.Decimal(10, 8)
  longitude                     Decimal?  @db.Decimal(11, 8)
  mapAddress                    String?
  mapEmbedUrl                   String?   @db.VarChar(500)
  mapStaticImageUrl             String?
  endDate                       DateTime?
  auctionDate                   DateTime?
  lotSpecificAuctionDate        DateTime?
  secondAuctionDate             DateTime?
  condition                     String?
  dataAiHint                    String?
  winnerId                      String?
  winningBidTermUrl             String?
  allowInstallmentBids          Boolean?  @default(false)
  createdAt                     DateTime  @default(now())
  updatedAt                     DateTime  @updatedAt
  auction                       Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                      LotCategory? @relation(fields: [categoryId], references: [id])
  subcategory                   Subcategory? @relation(fields: [subcategoryId], references: [id])
  seller                        Seller?      @relation(fields: [sellerId], references: [id])
  city                          City?        @relation(fields: [cityId], references: [id])
  bens                          LotBens[]
  bids                          Bid[]
  winner                        User?     @relation("WonLots", fields: [winnerId], references: [id])
  maxBids                       UserLotMaxBid[]
  reviews                       Review[]
  questions                     LotQuestion[]
}

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  password              String?
  fullName              String?
  roleId                String?
  sellerId              String?
  habilitationStatus    String    @default("PENDING_DOCUMENTS")
  accountType           String    @default("PHYSICAL")
  avatarUrl             String?
  dataAiHint            String?
  badges                Json?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  cpf                   String?
  dateOfBirth           DateTime?
  rgNumber              String?
  rgIssuer              String?
  rgIssueDate           DateTime?
  rgState               String?
  cellPhone             String?
  homePhone             String?
  gender                String?
  profession            String?
  nationality           String?
  maritalStatus         String?
  propertyRegime        String?
  spouseName            String?
  spouseCpf             String?
  zipCode               String?
  street                String?
  number                String?
  complement            String?
  neighborhood          String?
  city                  String?
  state                 String?
  optInMarketing        Boolean?  @default(false)
  razaoSocial           String?
  cnpj                  String?
  inscricaoEstadual     String?
  website               String?
  responsibleName       String?
  responsibleCpf        String?
  bids                  Bid[]
  wins                  UserWin[]
  reviews               Review[]
  questions             LotQuestion[]
  documents             UserDocument[]
  maxBids               UserLotMaxBid[]
  sellerProfile         Seller?
  auctioneerProfile     Auctioneer?
  notifications         Notification[]
  uploadedMedia         MediaItem[]
  habilitations         AuctionHabilitation[]
  wonLots               Lot[]         @relation("WonLots")
  roles                 UsersOnRoles[]
}

model Role {
  id            String   @id @default(cuid())
  name          String
  nameNormalized String   @unique
  description   String?
  permissions   Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  users         UsersOnRoles[]
}

model UsersOnRoles {
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  role        Role     @relation(fields: [roleId], references: [id])
  roleId      String
  assignedAt  DateTime @default(now())
  assignedBy  String

  @@id([userId, roleId])
}

model State {
  id        String   @id @default(cuid())
  name      String
  uf        String   @unique
  slug      String?  @unique
  cityCount Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cities    City[]
  districts JudicialDistrict[]
}

model LotCategory {
  id                     String        @id @default(cuid())
  name                   String
  slug                   String        @unique
  description            String?       @db.VarChar(500)
  hasSubcategories       Boolean?
  iconName               String?
  logoUrl                String?
  logoMediaId            String?
  dataAiHintIcon         String?
  coverImageUrl          String?
  coverImageMediaId      String?
  dataAiHintCover        String?
  megaMenuImageUrl       String?
  megaMenuImageMediaId   String?
  dataAiHintMegaMenu     String?
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  lots                   Lot[]
  bens                   Bem[]
  subcategories          Subcategory[]
  auctions               Auction[]
}

model Subcategory {
  id                String       @id @default(cuid())
  name              String
  slug              String?
  parentCategoryId  String
  description       String?      @db.VarChar(500)
  displayOrder      Int?         @default(0)
  iconUrl           String?
  iconMediaId       String?
  dataAiHintIcon    String?
  parentCategory    LotCategory  @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots              Lot[]
  bens              Bem[]
}

model Court {
  id                String             @id @default(cuid())
  name              String
  slug              String?
  stateUf           String?
  website           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  districts         JudicialDistrict[]
  judicialProcesses JudicialProcess[]
}

model Seller {
  id               String            @id @default(cuid())
  publicId         String            @unique @default(uuid())
  slug             String?           @unique
  name             String            @unique
  contactName      String?
  email            String?
  phone            String?
  address          String?
  city             String?
  state            String?
  zipCode          String?
  website          String?
  logoUrl          String?
  logoMediaId      String?
  dataAiHintLogo   String?
  description      String?           @db.Text
  userId           String?           @unique
  isJudicial       Boolean           @default(false)
  judicialBranchId String?           @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  judicialBranch   JudicialBranch?   @relation(fields: [judicialBranchId], references: [id])
  user             User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  bens             Bem[]
  auctions         Auction[]
  lots             Lot[]
  directSaleOffers DirectSaleOffer[]
  processes        JudicialProcess[]
}

model Auctioneer {
  id                 String    @id @default(cuid())
  publicId           String    @unique @default(uuid())
  slug               String?   @unique
  name               String
  registrationNumber String?
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?   @db.Text
  userId             String?   @unique
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User?     @relation(fields: [userId], references: [id])
  auctions           Auction[]
}

model JudicialProcess {
  id              String            @id @default(cuid())
  publicId        String?           @unique
  processNumber   String
  isElectronic    Boolean           @default(true)
  courtId         String?
  districtId      String?
  branchId        String?
  sellerId        String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  court           Court?            @relation(fields: [courtId], references: [id])
  district        JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch          JudicialBranch?   @relation(fields: [branchId], references: [id])
  seller          Seller?           @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties         JudicialParty[]
  bens            Bem[]
}

model JudicialParty {
  id             String          @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      String
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model Bem {
  id              String         @id @default(cuid())
  publicId        String         @unique @default(uuid())
  title           String
  description     String?        @db.Text
  status          String         @default("DISPONIVEL")
  categoryId      String?
  subcategoryId   String?
  judicialProcessId String?
  sellerId        String?
  evaluationValue Decimal?       @db.Decimal(15, 2)
  imageUrl        String?
  imageMediaId    String?
  galleryImageUrls Json?
  mediaItemIds    Json?
  dataAiHint      String?
  locationCity    String?
  locationState   String?
  address         String?
  latitude        Decimal?       @db.Decimal(10, 8)
  longitude       Decimal?       @db.Decimal(11, 8)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  category        LotCategory?   @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory?   @relation(fields: [subcategoryId], references: [id])
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller          Seller?        @relation(fields: [sellerId], references: [id])
  lots            LotBens[]
}

model LotBens {
  lot    Lot  @relation(fields: [lotId], references: [id])
  lotId  String
  bem    Bem  @relation(fields: [bemId], references: [id])
  bemId  String

  @@id([lotId, bemId])
}

model AuctionHabilitation {
  userId    String
  auctionId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@id([userId, auctionId])
}

model JudicialDistrict {
  id        String           @id @default(cuid())
  name      String
  slug      String?          @unique
  courtId   String?
  stateId   String?
  zipCode   String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  court     Court?           @relation(fields: [courtId], references: [id])
  state     State?           @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]
}

model JudicialBranch {
  id         String            @id @default(cuid())
  name       String
  slug       String?           @unique
  districtId String?
  contactName String?
  phone      String?
  email      String?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  district   JudicialDistrict? @relation(fields: [districtId], references: [id])
  processes  JudicialProcess[]
  sellers    Seller[]
}

model City {
  id        String   @id @default(cuid())
  name      String
  slug      String?
  stateId   String
  stateUf   String?
  ibgeCode  String?  @unique
  lotCount  Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state     State    @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots      Lot[]
}

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String   @id @default(cuid())
  lotId            String   @unique
  userId           String
  winningBidAmount Decimal  @db.Decimal(15, 2)
  winDate          DateTime
  paymentStatus    String
  invoiceUrl       String?
  lot              Lot      @relation(fields: [lotId], references: [id])
  user             User     @relation(fields: [userId], references: [id])
}

model DirectSaleOffer {
  id                 String   @id @default(cuid())
  publicId           String?  @unique
  title              String
  description        String?  @db.Text
  offerType          String?
  price              Decimal? @db.Decimal(15, 2)
  minimumOfferPrice  Decimal? @db.Decimal(15, 2)
  status             String?  @default("ACTIVE")
  category           String?
  sellerId           String?
  sellerName         String?
  sellerLogoUrl      String?
  dataAiHintSellerLogo String?
  locationCity       String?
  locationState      String?
  imageUrl           String?
  imageMediaId       String?
  dataAiHint         String?
  galleryImageUrls   Json?
  mediaItemIds       Json?
  itemsIncluded      Json?
  views              Int?     @default(0)
  expiresAt          DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  seller             Seller?  @relation(fields: [sellerId], references: [id])
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model Review {
  id                String   @id @default(cuid())
  lotId             String
  auctionId         String
  userId            String
  userDisplayName   String
  rating            Int
  comment           String   @db.Text
  createdAt         DateTime @default(now())
  lot               Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                      String   @id @default(cuid())
  lotId                   String
  auctionId               String
  userId                  String
  userDisplayName         String
  questionText            String   @db.Text
  answerText              String?  @db.Text
  answeredByUserId        String?
  answeredByUserDisplayName String?
  answeredAt              DateTime?
  isPublic                Boolean  @default(true)
  createdAt               DateTime @default(now())
  lot                     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DocumentType {
  id           String         @id @default(cuid())
  name         String
  description  String?
  isRequired   Boolean        @default(true)
  appliesTo    String? // e.g., 'PHYSICAL', 'LEGAL', 'ALL'
  userDocuments UserDocument[]
}

model UserDocument {
  id              String       @id @default(cuid())
  userId          String
  documentTypeId  String
  status          String       @default("PENDING_ANALYSIS")
  fileUrl         String
  fileName        String?
  rejectionReason String?      @db.Text
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

model DocumentTemplate {
  id        String   @id @default(cuid())
  name      String
  type      String // e.g., 'WINNING_BID_TERM', 'EVALUATION_REPORT', 'AUCTION_CERTIFICATE'
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id       String   @id @default(cuid())
  name     String
  email    String
  subject  String
  message  String   @db.Text
  isRead   Boolean  @default(false)
  createdAt DateTime @default(now())
}

model MediaItem {
  id                String    @id @default(cuid())
  fileName          String
  storagePath       String
  title             String
  altText           String?
  caption           String?
  description       String?   @db.Text
  mimeType          String
  sizeBytes         Int
  urlOriginal       String
  urlThumbnail      String
  urlMedium         String?
  urlLarge          String?
  linkedLotIds      Json?
  dataAiHint        String?
  uploadedBy        String?   // userId or 'system-seed'
  uploadedAt        DateTime  @default(now())
  uploader          User?     @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)
}

// Single document for global platform settings
model PlatformSettings {
  id                            String   @id @default("global")
  siteTitle                     String?
  siteTagline                   String?  @db.VarChar(200)
  logoUrl                       String?
  faviconUrl                    String?
  galleryImageBasePath          String?  @db.VarChar(200)
  storageProvider               String?  @db.VarChar(50)
  firebaseStorageBucket         String?  @db.VarChar(200)
  activeThemeName               String?  @db.VarChar(100)
  themes                        Json?
  platformPublicIdMasks         Json?
  homepageSections              Json?
  mentalTriggerSettings         Json?
  sectionBadgeVisibility        Json?
  mapSettings                   Json?
  searchPaginationType          String?  @db.VarChar(50)
  searchItemsPerPage            Int?
  searchLoadMoreCount           Int?
  showCountdownOnLotDetail      Boolean?
  showCountdownOnCards          Boolean?
  showRelatedLotsOnLotDetail    Boolean?
  relatedLotsCount              Int?
  defaultUrgencyTimerHours      Int?
  variableIncrementTable        Json?
  biddingSettings               Json?
  defaultListItemsPerPage       Int?
  updatedAt                     DateTime @updatedAt
}
