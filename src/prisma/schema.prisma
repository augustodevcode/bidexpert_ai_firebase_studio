// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// =================================================================
// 1. MODELS WITHOUT FOREIGN KEY DEPENDENCIES
// =================================================================

model PlatformSettings {
  id                         String   @id @default("global")
  siteTitle                  String?
  siteTagline                String?
  logoUrl                    String?  @db.VarChar(255)
  faviconUrl                 String?  @db.VarChar(255)
  galleryImageBasePath       String?  @db.VarChar(200)
  storageProvider            String?  @db.VarChar(50)
  firebaseStorageBucket      String?  @db.VarChar(200)
  activeThemeName            String?  @db.VarChar(100)
  themes                     Json?
  platformPublicIdMasks      Json?
  homepageSections           Json?
  mentalTriggerSettings      Json?
  sectionBadgeVisibility     Json?
  mapSettings                Json?
  searchPaginationType       String?  @db.VarChar(50)
  searchItemsPerPage         Int?
  searchLoadMoreCount        Int?
  showCountdownOnLotDetail   Boolean?
  showCountdownOnCards       Boolean?
  showRelatedLotsOnLotDetail Boolean?
  relatedLotsCount           Int?
  defaultUrgencyTimerHours   Int?
  variableIncrementTable     Json?
  biddingSettings            Json?
  paymentGatewaySettings     Json?
  defaultListItemsPerPage    Int?     @default(10)
  updatedAt                  DateTime @updatedAt
}


model Role {
  id              String         @id @default(uuid())
  name            String         @unique @db.VarChar(100)
  nameNormalized  String         @unique @db.VarChar(100)
  description     String?        @db.VarChar(255)
  permissions     Json?
  users           UsersOnRoles[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model State {
  id            String             @id @default(uuid())
  name          String             @db.VarChar(100)
  uf            String             @unique @db.VarChar(2)
  slug          String             @unique @db.VarChar(100)
  cityCount     Int?               @default(0)
  cities        City[]
  courts        Court[]
  districts     JudicialDistrict[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  auctions      Auction[]
  lots          Lot[]
}

model LotCategory {
  id                   String        @id @default(uuid())
  name                 String        @unique @db.VarChar(100)
  slug                 String        @unique @db.VarChar(100)
  description          String?       @db.VarChar(500)
  hasSubcategories     Boolean?
  iconName             String?       @db.VarChar(50)
  logoUrl              String?       @db.VarChar(255)
  logoMediaId          String?       @db.VarChar(100)
  dataAiHintIcon       String?       @db.VarChar(100)
  coverImageUrl        String?       @db.VarChar(255)
  coverImageMediaId    String?       @db.VarChar(100)
  dataAiHintCover      String?       @db.VarChar(100)
  megaMenuImageUrl     String?       @db.VarChar(255)
  megaMenuImageMediaId String?       @db.VarChar(100)
  dataAiHintMegaMenu   String?       @db.VarChar(100)
  subcategories        Subcategory[]
  lots                 Lot[]
  bens                 Bem[]
  auctions             Auction[]
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
}

model DocumentTemplate {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(150)
  type      String   @db.VarChar(50)
  content   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(150)
  email     String   @db.VarChar(150)
  subject   String?  @db.VarChar(255)
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentType {
  id                String         @id @default(uuid())
  name              String         @unique @db.VarChar(150)
  description       String?        @db.VarChar(255)
  isRequired        Boolean        @default(true)
  appliesTo         String?        @db.VarChar(100) // e.g., 'PHYSICAL,LEGAL'
  userDocuments     UserDocument[]
}

// =================================================================
// 2. MODELS WITH ONE LEVEL OF DEPENDENCY
// =================================================================

model User {
  id                  String               @id @default(uuid())
  email               String               @unique @db.VarChar(150)
  password            String?              @db.VarChar(255)
  fullName            String?              @db.VarChar(150)
  cpf                 String?              @db.VarChar(20)
  cellPhone           String?              @db.VarChar(20)
  homePhone           String?              @db.VarChar(20)
  dateOfBirth         DateTime?
  zipCode             String?              @db.VarChar(10)
  street              String?              @db.VarChar(200)
  number              String?              @db.VarChar(20)
  complement          String?              @db.VarChar(100)
  neighborhood        String?              @db.VarChar(100)
  city                String?              @db.VarChar(100)
  state               String?              @db.VarChar(50)
  avatarUrl           String?              @db.VarChar(255)
  dataAiHint          String?              @db.VarChar(100)
  habilitationStatus  String               @default("PENDING_DOCUMENTS") @db.VarChar(50)
  accountType         String               @default("PHYSICAL") @db.VarChar(50)
  badges              Json?
  optInMarketing      Boolean              @default(false)
  roles               UsersOnRoles[]
  bids                Bid[]
  wins                UserWin[]
  maxBids             UserLotMaxBid[]
  documents           UserDocument[]
  notifications       Notification[]
  uploadedMedia       MediaItem[]          @relation("UploadedBy")
  answeredQuestions   LotQuestion[]        @relation("AnsweredBy")
  askedQuestions      LotQuestion[]        @relation("AskedBy")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  
  // Detalhes PF
  rgNumber            String?              @db.VarChar(30)
  rgIssuer            String?              @db.VarChar(50)
  rgIssueDate         DateTime?
  rgState             String?              @db.VarChar(2)
  gender              String?              @db.VarChar(30)
  profession          String?              @db.VarChar(100)
  nationality         String?              @db.VarChar(50)
  maritalStatus       String?              @db.VarChar(50)
  propertyRegime      String?              @db.VarChar(50)
  spouseName          String?              @db.VarChar(150)
  spouseCpf           String?              @db.VarChar(20)
  
  // Detalhes PJ
  razaoSocial         String?              @db.VarChar(150)
  cnpj                String?              @db.VarChar(20)
  inscricaoEstadual   String?              @db.VarChar(30)
  website             String?              @db.VarChar(255)
  
  // Relacionamento com Comitente
  seller              Seller[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  role       Role     @relation(fields: [roleId], references: [id])
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model City {
  id        String             @id @default(uuid())
  name      String             @db.VarChar(150)
  slug      String?            @db.VarChar(150)
  state     State              @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId   String
  stateUf   String?            @db.VarChar(2)
  ibgeCode  String?            @unique @db.VarChar(10)
  lotCount  Int?               @default(0)
  auctions  Auction[]
  lots      Lot[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model Subcategory {
  id                 String      @id @default(uuid())
  name               String      @db.VarChar(100)
  slug               String      @unique @db.VarChar(100)
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  parentCategoryId   String
  description        String?     @db.VarChar(500)
  displayOrder       Int?        @default(0)
  iconUrl            String?     @db.VarChar(255)
  iconMediaId        String?     @db.VarChar(100)
  dataAiHintIcon     String?     @db.VarChar(100)
  lots               Lot[]
  bens               Bem[]
}

model Court {
  id                 String             @id @default(uuid())
  name               String             @db.VarChar(150)
  slug               String?            @db.VarChar(150)
  stateUf            String?            @db.VarChar(2)
  website            String?            @db.VarChar(255)
  judicialDistricts  JudicialDistrict[]
  judicialProcesses  JudicialProcess[]
  auctions           Auction[]
  state              State?             @relation(fields: [stateId], references: [id], onDelete: SetNull)
  stateId            String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

// =================================================================
// 3. MODELS WITH TWO OR MORE LEVELS OF DEPENDENCY
// =================================================================

model JudicialDistrict {
  id                String             @id @default(uuid())
  name              String             @db.VarChar(150)
  slug              String             @unique @db.VarChar(150)
  court             Court?             @relation(fields: [courtId], references: [id], onDelete: SetNull)
  courtId           String?
  state             State?             @relation(fields: [stateId], references: [id], onDelete: SetNull)
  stateId           String?
  zipCode           String?            @db.VarChar(10)
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model JudicialBranch {
  id                String             @id @default(uuid())
  name              String             @db.VarChar(150)
  slug              String             @unique @db.VarChar(150)
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id], onDelete: SetNull)
  districtId        String?
  contactName       String?            @db.VarChar(150)
  phone             String?            @db.VarChar(20)
  email             String?            @db.VarChar(150)
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
  auctions          Auction[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Seller {
  id                 String           @id @default(uuid())
  publicId           String?          @unique @db.VarChar(100)
  slug               String?          @unique @db.VarChar(150)
  name               String           @unique @db.VarChar(150)
  contactName        String?          @db.VarChar(150)
  email              String?          @db.VarChar(150)
  phone              String?          @db.VarChar(20)
  address            String?          @db.VarChar(200)
  city               String?          @db.VarChar(100)
  state              String?          @db.VarChar(50)
  zipCode            String?          @db.VarChar(10)
  website            String?          @db.VarChar(255)
  logoUrl            String?          @db.VarChar(255)
  logoMediaId        String?          @db.VarChar(100)
  dataAiHintLogo     String?          @db.VarChar(100)
  description        String?          @db.Text
  user               User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId             String?          @unique
  isJudicial         Boolean          @default(false)
  judicialBranch     JudicialBranch?  @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  judicialBranchId   String?          @unique
  auctions           Auction[]
  bens               Bem[]
  judicialProcesses  JudicialProcess[]
  directSaleOffers   DirectSaleOffer[]
  lots               Lot[]
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model Auctioneer {
  id                 String    @id @default(uuid())
  publicId           String?   @unique @db.VarChar(100)
  slug               String?   @unique @db.VarChar(150)
  name               String    @db.VarChar(150)
  registrationNumber String?   @db.VarChar(50)
  contactName        String?   @db.VarChar(150)
  email              String?   @db.VarChar(150)
  phone              String?   @db.VarChar(20)
  address            String?   @db.VarChar(200)
  city               String?   @db.VarChar(100)
  state              String?   @db.VarChar(50)
  zipCode            String?   @db.VarChar(10)
  website            String?   @db.VarChar(255)
  logoUrl            String?   @db.VarChar(255)
  logoMediaId        String?   @db.VarChar(100)
  dataAiHintLogo     String?   @db.VarChar(100)
  description        String?   @db.Text
  userId             String?   @unique
  auctions           Auction[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model JudicialProcess {
  id                 String             @id @default(uuid())
  publicId           String?            @unique @db.VarChar(100)
  processNumber      String             @unique @db.VarChar(100)
  isElectronic       Boolean            @default(true)
  court              Court?             @relation(fields: [courtId], references: [id], onDelete: SetNull)
  courtId            String?
  district           JudicialDistrict?  @relation(fields: [districtId], references: [id], onDelete: SetNull)
  districtId         String?
  branch             JudicialBranch?    @relation(fields: [branchId], references: [id], onDelete: SetNull)
  branchId           String?
  seller             Seller?            @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId           String?
  bens               Bem[]
  parties            JudicialParty[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model JudicialParty {
  id             String          @id @default(uuid())
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId      String
  name           String          @db.VarChar(255)
  documentNumber String?         @db.VarChar(50)
  partyType      String          @db.VarChar(50)
}

model Bem {
  id                 String             @id @default(uuid())
  publicId           String?            @unique
  title              String             @db.VarChar(200)
  description        String?            @db.Text
  status             String             @default("DISPONIVEL") @db.VarChar(50)
  category           LotCategory?       @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId         String?
  subcategory        Subcategory?       @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  subcategoryId      String?
  judicialProcess    JudicialProcess?   @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  judicialProcessId  String?
  seller             Seller?            @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId           String?
  evaluationValue    Decimal?           @db.Decimal(15, 2)
  imageUrl           String?            @db.VarChar(255)
  imageMediaId       String?            @db.VarChar(100)
  galleryImageUrls   Json?
  mediaItemIds       Json?
  dataAiHint         String?            @db.VarChar(100)
  locationCity       String?            @db.VarChar(100)
  locationState      String?            @db.VarChar(100)
  address            String?            @db.VarChar(255)
  latitude           Float?
  longitude          Float?
  lots               LotBens[]
  
  // Vehicle specific
  plate               String? @db.VarChar(10)
  make                String? @db.VarChar(50)
  model               String? @db.VarChar(50)
  version             String? @db.VarChar(100)
  year                Int?
  modelYear           Int?
  mileage             Int?
  color               String? @db.VarChar(30)
  fuelType            String? @db.VarChar(30)
  transmissionType    String? @db.VarChar(30)
  bodyType            String? @db.VarChar(50)
  vin                 String? @db.VarChar(17)
  renavam             String? @db.VarChar(11)
  enginePower         String? @db.VarChar(50)
  numberOfDoors       Int?
  vehicleOptions      String? @db.VarChar(500)
  detranStatus        String? @db.VarChar(100)
  debts               String? @db.VarChar(500)
  runningCondition    String? @db.VarChar(100)
  bodyCondition       String? @db.VarChar(100)
  tiresCondition      String? @db.VarChar(100)
  hasKey              Boolean?

  // Property specific
  propertyRegistrationNumber String? @db.VarChar(50)
  iptuNumber               String? @db.VarChar(50)
  isOccupied               Boolean?
  area                     Float?
  totalArea                Float?
  builtArea                Float?
  bedrooms                 Int?
  suites                   Int?
  bathrooms                Int?
  parkingSpaces            Int?
  constructionType         String? @db.VarChar(100)
  finishes                 String? @db.VarChar(500)
  infrastructure           String? @db.VarChar(500)
  condoDetails             String? @db.VarChar(500)
  improvements             String? @db.VarChar(500)
  topography               String? @db.VarChar(100)
  liensAndEncumbrances     String? @db.VarChar(1000)
  propertyDebts            String? @db.VarChar(500)
  unregisteredRecords      String? @db.VarChar(500)
  hasHabiteSe              Boolean?
  zoningRestrictions       String? @db.VarChar(200)
  amenities                Json?

  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model AuctionStage {
  id                String  @id @default(uuid())
  auction           Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId         String
  name              String
  startDate         DateTime
  endDate           DateTime
  evaluationValue   Decimal? @db.Decimal(15, 2)
  lotStageDetails   LotAuctionStageDetails[]

  @@unique([auctionId, name])
}

model LotAuctionStageDetails {
  id              String       @id @default(uuid())
  lot             Lot          @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId           String
  stage           AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)
  stageId         String
  initialBid      Decimal?     @db.Decimal(15, 2)
  bidIncrement    Decimal?     @db.Decimal(10, 2)
  
  @@unique([lotId, stageId])
}

model Auction {
  id                  String   @id @default(uuid())
  publicId            String?  @unique @db.VarChar(100)
  slug                String?  @unique @db.VarChar(255)
  title               String   @db.VarChar(255)
  description         String?  @db.Text
  status              String   @default("RASCUNHO") @db.VarChar(50)
  auctionDate         DateTime @default(now())
  endDate             DateTime?
  auctioneer          Auctioneer? @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  auctioneerId        String?
  seller              Seller?  @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId            String?
  category            LotCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId          String?
  auctionType         String?  @db.VarChar(50)
  imageUrl            String?  @db.VarChar(255)
  imageMediaId        String?  @db.VarChar(100)
  documentsUrl        String?  @db.VarChar(255)
  visits              Int?     @default(0)
  isFavorite          Boolean? @default(false)
  dataAiHint          String?  @db.VarChar(100)
  
  // New structured fields
  auctionMethod       String? @default("STANDARD") @db.VarChar(50)
  participation       String? @default("ONLINE") @db.VarChar(50)
  address             String? @db.VarChar(255)
  city                City?   @relation(fields: [cityId], references: [id], onDelete: SetNull)
  cityId              String?
  state               State?  @relation(fields: [stateId], references: [id], onDelete: SetNull)
  stateId             String?
  zipCode             String? @db.VarChar(10)
  latitude            Float?
  longitude           Float?
  onlineUrl           String? @db.VarChar(255)
  
  evaluationReportUrl String? @db.VarChar(255)
  auctionCertificateUrl String? @db.VarChar(255)
  sellingBranch       String? @db.VarChar(100)
  
  // Logic fields
  automaticBiddingEnabled Boolean @default(false)
  allowInstallmentBids    Boolean @default(true)
  silentBiddingEnabled    Boolean @default(false)
  allowMultipleBidsPerUser Boolean @default(true)
  softCloseEnabled        Boolean @default(false)
  softCloseMinutes        Int?    @default(2)
  estimatedRevenue        Decimal? @db.Decimal(15, 2)
  achievedRevenue         Decimal? @db.Decimal(15, 2)
  totalHabilitatedUsers   Int?    @default(0)
  
  // Marketplace fields
  isFeaturedOnMarketplace Boolean @default(false)
  marketplaceAnnouncementTitle String? @db.VarChar(150)
  
  // Dutch Auction Specific
  decrementAmount         Decimal? @db.Decimal(15, 2)
  decrementIntervalSeconds Int?
  floorPrice              Decimal? @db.Decimal(15, 2)

  // Auto-relist settings
  autoRelistSettings      Json?
  
  // Relations
  judicialProcess     JudicialProcess?   @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  judicialProcessId   String?
  district            JudicialDistrict?  @relation(fields: [districtId], references: [id], onDelete: SetNull)
  districtId          String?
  branch              JudicialBranch?    @relation(fields: [branchId], references: [id], onDelete: SetNull)
  branchId            String?
  court               Court?             @relation(fields: [courtId], references: [id], onDelete: SetNull)
  courtId             String?

  lots                Lot[]
  bids                Bid[]
  auctionStages       AuctionStage[]
  habilitations       AuctionHabilitation[]

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Lot {
  id                       String        @id @default(uuid())
  publicId                 String?       @unique @db.VarChar(100)
  auction                  Auction       @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                String
  slug                     String?       @db.VarChar(255)
  number                   String?       @db.VarChar(20)
  title                    String        @db.VarChar(255)
  description              String?       @db.Text
  price                    Decimal       @db.Decimal(15, 2)
  reservePrice             Decimal?      @db.Decimal(15, 2)
  bidIncrementStep         Decimal?      @db.Decimal(10, 2)
  status                   String        @default("EM_BREVE") @db.VarChar(50)
  bidsCount                Int?          @default(0)
  views                    Int?          @default(0)
  isFeatured               Boolean?      @default(false)
  isExclusive              Boolean?      @default(false)
  discountPercentage       Int?
  additionalTriggers       Json?
  imageUrl                 String?       @db.VarChar(255)
  imageMediaId             String?       @db.VarChar(100)
  galleryImageUrls         Json?
  mediaItemIds             Json?
  inheritedMediaFromBemId  String?       @db.VarChar(100)
  type                     String        @db.VarChar(100)
  category                 LotCategory?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId               String?
  subcategory              Subcategory?  @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  subcategoryId            String?
  seller                   Seller?       @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId                 String?
  auctioneer               Auctioneer?   @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  auctioneerId             String?
  city                     City?         @relation(fields: [cityId], references: [id], onDelete: SetNull)
  cityId                   String?
  state                    State?        @relation(fields: [stateId], references: [id], onDelete: SetNull)
  stateId                  String?
  latitude                 Float?
  longitude                Float?
  mapAddress               String?       @db.VarChar(255)
  mapEmbedUrl              String?       @db.VarChar(500)
  mapStaticImageUrl        String?       @db.VarChar(255)
  endDate                  DateTime?
  lotSpecificAuctionDate   DateTime?
  secondAuctionDate        DateTime?
  condition                String?       @db.VarChar(100)
  dataAiHint               String?       @db.VarChar(100)
  winner                   User?         @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId                 String?
  winningBidTermUrl        String?       @db.VarChar(255)
  allowInstallmentBids     Boolean?      @default(false)
  isRelisted               Boolean       @default(false)
  relistCount              Int           @default(0)
  originalLot              Lot?          @relation("RelistHistory", fields: [originalLotId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  originalLotId            String?       @unique
  relistedLots             Lot[]         @relation("RelistHistory")
  bens                     LotBens[]
  bids                     Bid[]
  userWins                 UserWin[]
  maxBids                  UserLotMaxBid[]
  questions                LotQuestion[] @relation("LotQuestions")
  stageDetails             LotAuctionStageDetails[]

  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
}

model LotBens {
  lot     Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId   String
  bem     Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId   String
  @@id([lotId, bemId])
}

model MediaItem {
  id                 String   @id @default(uuid())
  fileName           String   @db.VarChar(255)
  storagePath        String   @db.VarChar(255)
  title              String?  @db.VarChar(255)
  altText            String?  @db.VarChar(255)
  caption            String?  @db.VarChar(500)
  description        String?  @db.Text
  mimeType           String   @db.VarChar(100)
  sizeBytes          Int?
  urlOriginal        String   @db.VarChar(255)
  urlThumbnail       String?  @db.VarChar(255)
  urlMedium          String?  @db.VarChar(255)
  urlLarge           String?  @db.VarChar(255)
  linkedLotIds       Json?
  judicialProcessId  String?
  dataAiHint         String?  @db.VarChar(100)
  uploadedBy         User     @relation("UploadedBy", fields: [uploadedByUserId], references: [id])
  uploadedByUserId   String
  uploadedAt         DateTime @default(now())
}

model UserDocument {
  id                String       @id @default(uuid())
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  documentType      DocumentType @relation(fields: [documentTypeId], references: [id])
  documentTypeId    String
  status            String       @default("PENDING_ANALYSIS") @db.VarChar(50)
  fileUrl           String       @db.VarChar(255)
  fileName          String?      @db.VarChar(255)
  rejectionReason   String?      @db.Text
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@unique([userId, documentTypeId])
}

model Bid {
  id            String   @id @default(uuid())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId      String
  bidderDisplay String?  @db.VarChar(150)
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
}

model UserWin {
  id                 String               @id @default(uuid())
  lot                Lot                  @relation(fields: [lotId], references: [id])
  lotId              String               @unique
  user               User                 @relation(fields: [userId], references: [id])
  userId             String
  winningBidAmount   Decimal              @db.Decimal(15, 2)
  winDate            DateTime             @default(now())
  paymentStatus      String               @default("PENDENTE") @db.VarChar(50)
  invoiceUrl         String?              @db.VarChar(255)
  installments       InstallmentPayment[]
}

model InstallmentPayment {
  id                String  @id @default(uuid())
  userWin           UserWin @relation(fields: [userWinId], references: [id])
  userWinId         String
  installmentNumber Int
  amount            Decimal @db.Decimal(15, 2)
  dueDate           DateTime
  status            String  @default("PENDENTE") @db.VarChar(50)
  paymentDate       DateTime?
  paymentMethod     String? @db.VarChar(50)
  transactionId     String? @db.VarChar(100)
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String   @db.VarChar(500)
  link      String?  @db.VarChar(255)
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model AuctionHabilitation {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId String
  createdAt DateTime @default(now())
  @@id([userId, auctionId])
}

model DirectSaleOffer {
  id                     String    @id @default(uuid())
  publicId               String?   @unique @db.VarChar(100)
  title                  String    @db.VarChar(255)
  description            String?   @db.Text
  offerType              String?   @db.VarChar(50)
  price                  Decimal?  @db.Decimal(15, 2)
  minimumOfferPrice      Decimal?  @db.Decimal(15, 2)
  status                 String    @default("ACTIVE") @db.VarChar(50)
  category               LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId             String?
  seller                 Seller?   @relation(fields: [sellerId], references: [id])
  sellerId               String?
  locationCity           String?   @db.VarChar(100)
  locationState          String?   @db.VarChar(100)
  imageUrl               String?   @db.VarChar(255)
  imageMediaId           String?   @db.VarChar(100)
  dataAiHint             String?   @db.VarChar(100)
  galleryImageUrls       Json?
  mediaItemIds           Json?
  itemsIncluded          Json?
  views                  Int?      @default(0)
  expiresAt              DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
}

model Review {
  id              String  @id @default(uuid())
  lot             Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId           String
  auctionId       String
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  userDisplayName String? @db.VarChar(150)
  rating          Int
  comment         String? @db.Text
  createdAt       DateTime @default(now())
}

model LotQuestion {
  id                      String   @id @default(uuid())
  lot                     Lot      @relation("LotQuestions", fields: [lotId], references: [id], onDelete: Cascade)
  lotId                   String
  auctionId               String
  user                    User     @relation("AskedBy", fields: [userId], references: [id], onDelete: Cascade)
  userId                  String
  userDisplayName         String?  @db.VarChar(150)
  questionText            String   @db.Text
  isPublic                Boolean  @default(true)
  answerText              String?  @db.Text
  answeredByUser          User?    @relation("AnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)
  answeredByUserId        String?
  answeredByUserDisplayName String? @db.VarChar(150)
  answeredAt              DateTime?
  createdAt               DateTime @default(now())
}
