
// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model PlatformSettings {
  id                            String   @id @default("global")
  siteTitle                     String?
  siteTagline                   String?  @db.VarChar(200)
  logoUrl                       String?
  faviconUrl                    String?
  galleryImageBasePath          String?  @db.VarChar(200)
  storageProvider               String?  @db.VarChar(50)
  firebaseStorageBucket         String?  @db.VarChar(200)
  activeThemeName               String?  @db.VarChar(100)
  themes                        Json?
  platformPublicIdMasks         Json?
  homepageSections              Json?
  mentalTriggerSettings         Json?
  sectionBadgeVisibility        Json?
  mapSettings                   Json?
  searchPaginationType          String?  @db.VarChar(50)
  searchItemsPerPage            Int?
  searchLoadMoreCount           Int?
  showCountdownOnLotDetail      Boolean?
  showCountdownOnCards          Boolean?
  showRelatedLotsOnLotDetail    Boolean?
  relatedLotsCount              Int?
  defaultUrgencyTimerHours      Int?
  variableIncrementTable        Json?
  biddingSettings               Json?
  defaultListItemsPerPage       Int?
  updatedAt                     DateTime @updatedAt
}


model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Role {
  id              String         @id @default(cuid())
  name            String
  nameNormalized  String         @unique
  description     String?        @db.VarChar(500)
  permissions     Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  users           UsersOnRoles[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  password            String?
  fullName            String?
  roleId              String? // This might be deprecated if using many-to-many
  sellerId            String?              @unique
  habilitationStatus  String?              @default("PENDING_DOCUMENTS")
  accountType         String?              @default("PHYSICAL")
  avatarUrl           String?
  dataAiHint          String?              @db.VarChar(100)
  badges              Json?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  
  cpf                 String?
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  optInMarketing      Boolean?             @default(false)
  
  // Detalhes PJ
  razaoSocial         String?
  cnpj                String?
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?

  bids                Bid[]
  wins                UserWin[]
  notifications       Notification[]
  documents           UserDocument[]
  maxBids             UserLotMaxBid[]
  mediaItems          MediaItem[]
  reviews             Review[]
  questions           LotQuestion[]        @relation("UserQuestions")
  answeredQuestions   LotQuestion[]        @relation("AnsweredBy")
  lotsWon             Lot[]                @relation("Winner")
  seller              Seller?              @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  auctioneer          Auctioneer?
  roles               UsersOnRoles[]
  auctionHabilitations AuctionHabilitation[]
}

model State {
  id        String    @id @default(cuid())
  name      String
  uf        String    @unique
  slug      String    @unique
  cityCount Int?      @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  cities    City[]
  districts JudicialDistrict[]
  lots      Lot[]
}

model City {
  id        String   @id @default(cuid())
  name      String
  slug      String?
  stateId   String
  stateUf   String?
  ibgeCode  String?  @unique
  lotCount  Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state     State    @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots      Lot[]
}

model LotCategory {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?  @db.VarChar(500)
  hasSubcategories Boolean @default(false)
  itemCount   Int?     @default(0)
  logoUrl     String?
  logoMediaId String?  @unique
  dataAiHintIcon String?
  coverImageUrl String?
  coverImageMediaId String? @unique
  dataAiHintCover String?
  megaMenuImageUrl String?
  megaMenuImageMediaId String? @unique
  dataAiHintMegaMenu String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  subcategories Subcategory[]
  lots          Lot[]
  auctions      Auction[]
  bens          Bem[]
  
  logoMedia          MediaItem? @relation("CategoryLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  coverImageMedia    MediaItem? @relation("CategoryCover", fields: [coverImageMediaId], references: [id], onDelete: SetNull)
  megaMenuImageMedia MediaItem? @relation("CategoryMegaMenu", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull)
}

model Subcategory {
  id        String   @id @default(cuid())
  name      String
  slug      String?
  parentCategoryId String
  description      String?  @db.VarChar(500)
  displayOrder     Int      @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  
  parentCategory LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots           Lot[]
  bens           Bem[]
}

model Auctioneer {
  id                  String   @id @default(cuid())
  publicId            String   @unique @default(cuid())
  slug                String   @unique
  name                String
  registrationNumber  String?  @db.VarChar(50)
  contactName         String?  @db.VarChar(150)
  email               String?  @db.VarChar(150)
  phone               String?  @db.VarChar(20)
  address             String?  @db.VarChar(200)
  city                String?  @db.VarChar(100)
  state               String?  @db.VarChar(50)
  zipCode             String?  @db.VarChar(10)
  website             String?
  logoUrl             String?
  logoMediaId         String?
  dataAiHintLogo      String?
  description         String?  @db.Text
  userId              String?  @unique
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  user     User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  auctions Auction[]
}

model Seller {
  id                String    @id @default(cuid())
  publicId          String    @unique @default(cuid())
  slug              String    @unique
  name              String    @unique
  contactName       String?   @db.VarChar(150)
  email             String?   @db.VarChar(150)
  phone             String?   @db.VarChar(20)
  address           String?   @db.VarChar(200)
  city              String?   @db.VarChar(100)
  state             String?   @db.VarChar(50)
  zipCode           String?   @db.VarChar(10)
  website           String?
  logoUrl           String?
  logoMediaId       String?
  dataAiHintLogo    String?
  description       String?   @db.Text
  isJudicial        Boolean   @default(false)
  judicialBranchId  String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  judicialBranch    JudicialBranch? @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  auctions          Auction[]
  lots              Lot[]
  bens              Bem[]
  directSaleOffers  DirectSaleOffer[]
  judicialProcesses JudicialProcess[]
  user              User?
}


model Auction {
  id                      String      @id @default(cuid())
  publicId                String      @unique @default(cuid())
  slug                    String      @unique
  title                   String
  description             String?     @db.Text
  status                  String?     @default("RASCUNHO")
  auctionDate             DateTime
  endDate                 DateTime?
  totalLots               Int?        @default(0)
  categoryId              String?
  auctioneerId            String
  sellerId                String
  imageUrl                String?
  imageMediaId            String?
  documentsUrl            String?
  evaluationReportUrl     String?
  auctionCertificateUrl   String?
  visits                  Int?        @default(0)
  auctionType             String?
  softCloseEnabled        Boolean     @default(false)
  softCloseMinutes        Int?        @default(2)
  automaticBiddingEnabled Boolean     @default(false)
  silentBiddingEnabled    Boolean     @default(false)
  allowMultipleBidsPerUser Boolean     @default(true)
  isFeaturedOnMarketplace Boolean     @default(false)
  marketplaceAnnouncementTitle String?
  dataAiHint              String?
  estimatedRevenue        Decimal?    @db.Decimal(15, 2)
  achievedRevenue         Decimal?    @db.Decimal(15, 2)
  totalHabilitatedUsers   Int?        @default(0)
  judicialProcessId       String?
  allowInstallmentBids    Boolean     @default(false)
  additionalTriggers      Json?
  sellingBranch           String?
  decrementAmount         Decimal?    @db.Decimal(15,2)
  decrementIntervalSeconds Int?
  floorPrice              Decimal?    @db.Decimal(15,2)
  autoRelistSettings      Json?
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt

  auctioneer           Auctioneer           @relation(fields: [auctioneerId], references: [id])
  seller               Seller               @relation(fields: [sellerId], references: [id])
  category             LotCategory?         @relation(fields: [categoryId], references: [id])
  lots                 Lot[]
  bids                 Bid[]
  auctionStages        AuctionStage[]
  auctionHabilitations AuctionHabilitation[]
  judicialProcess      JudicialProcess?     @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
}

model AuctionStage {
  id         String    @id @default(cuid())
  auctionId  String
  name       String
  endDate    DateTime
  initialPrice Decimal? @db.Decimal(15, 2)
  statusText String?
  auction    Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}

model Court {
  id         String   @id @default(cuid())
  name       String
  slug       String   @unique
  stateUf    String
  website    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  districts  JudicialDistrict[]
  processes  JudicialProcess[]
}

model JudicialDistrict {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  courtId   String
  stateId   String
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  court     Court            @relation(fields: [courtId], references: [id])
  state     State            @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]
}

model JudicialBranch {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  districtId  String
  contactName String?
  phone       String?
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  district  JudicialDistrict @relation(fields: [districtId], references: [id])
  sellers   Seller[]
  processes JudicialProcess[]
}

model JudicialProcess {
  id             String   @id @default(cuid())
  publicId       String   @unique @default(cuid())
  processNumber  String
  isElectronic   Boolean  @default(true)
  courtId        String
  districtId     String
  branchId       String
  sellerId       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  court    Court             @relation(fields: [courtId], references: [id])
  district JudicialDistrict  @relation(fields: [districtId], references: [id])
  branch   JudicialBranch    @relation(fields: [branchId], references: [id])
  seller   Seller?           @relation(fields: [sellerId], references: [id])
  parties  JudicialParty[]
  auctions Auction[]
  bens     Bem[]
}

model JudicialParty {
  id             String  @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      String
  
  process JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model Bem {
  id                          String    @id @default(cuid())
  publicId                    String    @unique @default(cuid())
  title                       String
  description                 String?   @db.Text
  status                      String    @default("DISPONIVEL")
  categoryId                  String
  subcategoryId               String?
  judicialProcessId           String?
  sellerId                    String?
  evaluationValue             Decimal?  @db.Decimal(15, 2)
  imageUrl                    String?
  imageMediaId                String?
  galleryImageUrls            Json?
  mediaItemIds                Json?
  dataAiHint                  String?
  locationCity                String?
  locationState               String?
  address                     String?
  latitude                    Decimal?  @db.Decimal(10, 8)
  longitude                   Decimal?  @db.Decimal(11, 8)
  plate                       String?
  make                        String?
  model                       String?
  version                     String?
  year                        Int?
  modelYear                   Int?
  mileage                     Int?
  color                       String?
  fuelType                    String?
  transmissionType            String?
  bodyType                    String?
  vin                         String?
  renavam                     String?
  enginePower                 String?
  numberOfDoors               Int?
  vehicleOptions              String?
  detranStatus                String?
  debts                       String?
  runningCondition            String?
  bodyCondition               String?
  tiresCondition              String?
  hasKey                      Boolean?
  propertyType                String?
  propertyRegistrationNumber  String?
  iptuNumber                  String?
  isOccupied                  Boolean?
  area                        Decimal?  @db.Decimal(15, 2)
  totalArea                   Decimal?  @db.Decimal(15, 2)
  builtArea                   Decimal?  @db.Decimal(15, 2)
  bedrooms                    Int?
  suites                      Int?
  bathrooms                   Int?
  parkingSpaces               Int?
  constructionType            String?
  finishes                    String?
  infrastructure              String?
  condoDetails                String?
  improvements                String?
  topography                  String?
  liensAndEncumbrances        String?
  propertyDebts               String?
  unregisteredRecords         String?
  hasHabiteSe                 Boolean?
  zoningRestrictions          String?
  amenities                   Json?
  brand                       String?
  serialNumber                String?
  itemCondition               String?
  specifications              String?
  includedAccessories         String?
  batteryCondition            String?
  hasInvoice                  Boolean?
  hasWarranty                 Boolean?
  repairHistory               String?
  applianceCapacity           String?
  voltage                     String?
  applianceType               String?
  additionalFunctions         String?
  hoursUsed                   Int?
  engineType                  String?
  capacityOrPower             String?
  maintenanceHistory          String?
  installationLocation        String?
  compliesWithNR              String?
  operatingLicenses           String?
  breed                       String?
  age                         String?
  sex                         String?
  weight                      String?
  individualId                String?
  purpose                     String?
  sanitaryCondition           String?
  vaccinationStatus           String?
  lineage                     String?
  isPregnant                  Boolean?
  specialSkills               String?
  gtaDocument                 String?
  breedRegistryDocument       String?
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt

  lots           LotBens[]
  category       LotCategory      @relation(fields: [categoryId], references: [id])
  subcategory    Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller         Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
}

model LotBens {
  lot      Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId    String
  bem      Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId    String

  @@id([lotId, bemId])
}


model Lot {
  id                        String      @id @default(cuid())
  publicId                  String      @unique @default(cuid())
  auctionId                 String
  slug                      String?
  number                    String?
  title                     String
  description               String?     @db.Text
  price                     Decimal     @db.Decimal(15, 2)
  initialPrice              Decimal?    @db.Decimal(15, 2)
  secondInitialPrice        Decimal?    @db.Decimal(15, 2)
  bidIncrementStep          Decimal?    @db.Decimal(10, 2)
  status                    String      @default("EM_BREVE")
  bidsCount                 Int?        @default(0)
  views                     Int?        @default(0)
  isFeatured                Boolean?    @default(false)
  isExclusive               Boolean?    @default(false)
  discountPercentage        Int?
  additionalTriggers        Json?
  imageUrl                  String?
  imageMediaId              String?
  galleryImageUrls          Json?
  mediaItemIds              Json?
  type                      String
  categoryId                String
  subcategoryId             String?
  auctionName               String?
  sellerId                  String?
  sellerName                String?
  auctioneerId              String?
  cityId                    String?
  stateId                   String?
  cityName                  String?
  stateUf                   String?
  latitude                  Decimal?    @db.Decimal(10, 8)
  longitude                 Decimal?    @db.Decimal(11, 8)
  mapAddress                String?
  mapEmbedUrl               String?
  mapStaticImageUrl         String?
  endDate                   DateTime?
  auctionDate               DateTime?
  lotSpecificAuctionDate    DateTime?
  secondAuctionDate         DateTime?
  condition                 String?
  dataAiHint                String?
  winnerId                  String?
  winningBidTermUrl         String?
  allowInstallmentBids      Boolean?    @default(false)
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt
  
  bens                      LotBens[]
  bids                      Bid[]
  reviews                   Review[]
  questions                 LotQuestion[]
  maxBids                   UserLotMaxBid[]
  win                       UserWin?
  
  auction      Auction      @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category     LotCategory  @relation(fields: [categoryId], references: [id])
  subcategory  Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  city         City?        @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state        State?       @relation(fields: [stateId], references: [id], onDelete: SetNull)
  seller       Seller?      @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  winner       User?        @relation("Winner", fields: [winnerId], references: [id], onDelete: SetNull)
}

model UserWin {
  id               String   @id @default(cuid())
  lotId            String   @unique
  userId           String
  winningBidAmount Decimal  @db.Decimal(15, 2)
  winDate          DateTime
  paymentStatus    String
  invoiceUrl       String?
  
  lot  Lot  @relation("LotWinRecord", fields: [lotId], references: [id])
  user User @relation(fields: [userId], references: [id])
  
  @@index([userId])
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())

  lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([userId])
}

model LotQuestion {
  id          String   @id @default(cuid())
  lotId       String
  auctionId   String
  userId      String
  userDisplayName String
  questionText String  @db.Text
  answerText   String? @db.Text
  answeredAt   DateTime?
  answeredByUserId String?
  answeredByUserDisplayName String?
  isPublic     Boolean  @default(true)
  createdAt    DateTime @default(now())

  lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user User @relation("UserQuestions", fields: [userId], references: [id], onDelete: Cascade)
  answeredBy User? @relation("AnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)

  @@index([lotId])
  @@index([userId])
}

model MediaItem {
  id            String   @id @default(cuid())
  fileName      String   @unique
  storagePath   String
  title         String
  altText       String?
  caption       String?
  description   String?  @db.Text
  mimeType      String
  sizeBytes     Int
  urlOriginal   String
  urlThumbnail  String?
  urlMedium     String?
  urlLarge      String?
  linkedLotIds  Json?
  dataAiHint    String?
  uploadedBy    String
  uploadedAt    DateTime @default(now())
  
  uploadedByUser User @relation(fields: [uploadedBy], references: [id])
  
  LotCategoriesLogo LotCategory[] @relation("CategoryLogo")
  LotCategoriesCover LotCategory[] @relation("CategoryCover")
  LotCategoriesMega LotCategory[] @relation("CategoryMegaMenu")
}

model UserLotMaxBid {
    id        String   @id @default(cuid())
    userId    String
    lotId     String
    maxAmount Decimal  @db.Decimal(15, 2)
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
    
    @@unique([userId, lotId])
}

model AuctionHabilitation {
  userId     String
  auctionId  String
  habilitatedAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@id([userId, auctionId])
}

model DirectSaleOffer {
  id                 String   @id @default(cuid())
  publicId           String   @unique @default(cuid())
  title              String
  description        String?  @db.Text
  offerType          String
  price              Decimal? @db.Decimal(15, 2)
  minimumOfferPrice  Decimal? @db.Decimal(15, 2)
  status             String   @default("ACTIVE")
  category           String
  sellerId           String
  sellerName         String
  sellerLogoUrl      String?
  dataAiHintSellerLogo String?
  locationCity       String?
  locationState      String?
  imageUrl           String?
  imageMediaId       String?
  dataAiHint         String?
  galleryImageUrls   Json?
  mediaItemIds       Json?
  itemsIncluded      Json?
  views              Int      @default(0)
  expiresAt          DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  seller Seller @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}
