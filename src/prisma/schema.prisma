// prisma/schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. Tabelas Base (Sem Dependências Externas)
// =================================================================

model Role {
  id              String        @id @default(cuid())
  name            String        @unique
  nameNormalized  String        @unique @map("name_normalized")
  description     String?
  permissions     Json? // Alterado de String[] para Json
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  users           UsersOnRoles[]
}

model State {
  id        String   @id @default(cuid())
  name      String
  uf        String   @unique
  slug      String?  @unique
  cityCount Int?     @default(0) @map("city_count")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  cities    City[]
  lots      Lot[] // Relação inversa adicionada
  districts JudicialDistrict[] // Relação inversa adicionada
}

model LotCategory {
  id                   String        @id @default(cuid())
  name                 String
  slug                 String?       @unique
  description          String?       @db.VarChar(500)
  hasSubcategories     Boolean?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime      @default(now()) @map("created_at")
  updatedAt            DateTime      @updatedAt @map("updated_at")
  lots                 Lot[]
  bens                 Bem[]
  subcategories        Subcategory[]
  auctions             Auction[]
}

model DocumentTemplate {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(150)
  type      String   @db.VarChar(50)
  content   String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(150)
  email     String   @db.VarChar(150)
  subject   String?  @db.VarChar(255)
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
}

model DocumentType {
  id              String         @id @default(cuid())
  name            String         @db.VarChar(150)
  description     String?        @db.VarChar(255)
  isRequired      Boolean        @default(true)
  appliesTo       String?        @db.VarChar(50)
  userDocuments   UserDocument[]
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// =================================================================
// 2. Tabelas com Dependências
// =================================================================

model User {
  id                     String            @id @default(cuid())
  uid                    String?           @unique // Mapeia para o UID do Firebase Auth se usado
  email                  String            @unique @db.VarChar(150)
  password               String?
  fullName               String?           @db.VarChar(150)
  habilitationStatus     String            @default("PENDING_DOCUMENTS") @db.VarChar(50)
  accountType            String            @default("PHYSICAL") @db.VarChar(50)
  avatarUrl              String?
  dataAiHint             String?
  badges                 Json?
  cpf                    String?           @unique
  razaoSocial            String?
  cnpj                   String?           @unique
  inscricaoEstadual      String?
  website                String?
  dateOfBirth            DateTime?
  cellPhone              String?
  homePhone              String?
  zipCode                String?
  street                 String?
  number                 String?
  complement             String?
  neighborhood           String?
  city                   String?
  state                  String?
  gender                 String?
  profession             String?
  nationality            String?
  maritalStatus          String?
  propertyRegime         String?
  spouseName             String?
  spouseCpf              String?
  rgNumber               String?
  rgIssuer               String?
  rgState                String?
  rgIssueDate            DateTime?
  optInMarketing         Boolean           @default(false)
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  
  seller                 Seller?
  roles                  UsersOnRoles[]
  documents              UserDocument[]
  mediaItems             MediaItem[]
  bids                   Bid[]
  wins                   UserWin[]
  reviews                Review[]
  questions              LotQuestion[]
  answers                LotQuestion[]     @relation("AnsweredBy")
  maxBids                UserLotMaxBid[]
  habilitations          AuctionHabilitation[]
}

model City {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(150)
  slug      String?
  stateId   String
  stateUf   String?  @db.VarChar(2)
  ibgeCode  String?  @unique @db.VarChar(10)
  lotCount  Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state     State    @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots      Lot[]
}

model Subcategory {
  id                String      @id @default(cuid())
  name              String
  slug              String?
  parentCategoryId  String
  description       String?     @db.VarChar(500)
  displayOrder      Int         @default(0)
  iconUrl           String?
  iconMediaId       String?
  dataAiHintIcon    String?
  parentCategory    LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots              Lot[]
  bens              Bem[]
}

model Court {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(150)
  slug      String?
  stateUf   String?  @db.VarChar(2)
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  districts JudicialDistrict[]
  processes JudicialProcess[]
}

// =================================================================
// 3. Tabelas com Mais Dependências
// =================================================================

model JudicialDistrict {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(150)
  slug      String?  @unique
  courtId   String?
  stateId   String?
  zipCode   String?  @db.VarChar(10)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  court     Court?   @relation(fields: [courtId], references: [id])
  state     State?   @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]
}

model JudicialBranch {
  id          String             @id @default(cuid())
  name        String             @db.VarChar(150)
  slug        String?            @unique
  districtId  String?
  contactName String?            @db.VarChar(150)
  phone       String?            @db.VarChar(20)
  email       String?            @db.VarChar(150)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  district    JudicialDistrict?  @relation(fields: [districtId], references: [id])
  sellers     Seller[]
  processes   JudicialProcess[]
}

model Seller {
  id               String           @id @default(cuid())
  publicId         String           @unique
  slug             String           @unique
  name             String           @unique @db.VarChar(150)
  contactName      String?          @db.VarChar(150)
  email            String?          @db.VarChar(150)
  phone            String?          @db.VarChar(20)
  address          String?          @db.VarChar(200)
  city             String?          @db.VarChar(100)
  state            String?          @db.VarChar(50)
  zipCode          String?          @db.VarChar(10)
  website          String?
  logoUrl          String?
  logoMediaId      String?
  dataAiHintLogo   String?
  description      String?          @db.Text
  userId           String?          @unique
  isJudicial       Boolean          @default(false)
  judicialBranchId String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  judicialBranch   JudicialBranch?  @relation(fields: [judicialBranchId], references: [id])
  user             User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  auctions         Auction[]
  bens             Bem[]
  directSaleOffers DirectSaleOffer[]
  lots             Lot[]
}

model Auctioneer {
  id                 String    @id @default(cuid())
  publicId           String    @unique
  slug               String    @unique
  name               String    @db.VarChar(150)
  registrationNumber String?   @db.VarChar(50)
  contactName        String?   @db.VarChar(150)
  email              String?   @db.VarChar(150)
  phone              String?   @db.VarChar(20)
  address            String?   @db.VarChar(200)
  city               String?   @db.VarChar(100)
  state              String?   @db.VarChar(50)
  zipCode            String?   @db.VarChar(10)
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?   @db.Text
  userId             String?   @unique
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User?     @relation(fields: [userId], references: [id])
  auctions           Auction[]
  lots               Lot[]
}

model JudicialProcess {
  id            String             @id @default(cuid())
  publicId      String             @unique
  processNumber String             @unique @db.VarChar(100)
  isElectronic  Boolean            @default(true)
  courtId       String?
  districtId    String?
  branchId      String?
  sellerId      String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  court         Court?             @relation(fields: [courtId], references: [id])
  district      JudicialDistrict?  @relation(fields: [districtId], references: [id])
  branch        JudicialBranch?    @relation(fields: [branchId], references: [id])
  seller        Seller?            @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties       JudicialParty[]
  bens          Bem[]
}

model JudicialParty {
  id             String          @id @default(cuid())
  processId      String
  name           String          @db.VarChar(255)
  documentNumber String?         @db.VarChar(50)
  partyType      String          @db.VarChar(50)
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model Bem {
  id            String       @id @default(cuid())
  publicId      String       @unique
  title         String       @db.VarChar(200)
  description   String?      @db.Text
  status        String       @default("DISPONIVEL") @db.VarChar(50)
  categoryId    String?
  subcategoryId String?
  judicialProcessId String?
  sellerId      String?
  evaluationValue Decimal?   @db.Decimal(15, 2)
  imageUrl      String?
  imageMediaId  String?
  dataAiHint    String?
  locationCity  String?      @db.VarChar(100)
  locationState String?      @db.VarChar(100)
  address       String?
  latitude      Decimal?
  longitude     Decimal?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  category      LotCategory? @relation(fields: [categoryId], references: [id])
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller        Seller?      @relation(fields: [sellerId], references: [id])
  lots          LotBens[]
}

model Auction {
  id                           String                 @id @default(cuid())
  publicId                     String                 @unique
  slug                         String                 @unique
  title                        String                 @db.VarChar(255)
  description                  String?                @db.Text
  status                       String                 @default("RASCUNHO") @db.VarChar(50)
  auctionDate                  DateTime?
  endDate                      DateTime?
  auctioneerId                 String?
  sellerId                     String?
  categoryId                   String?
  auctionType                  String?                @db.VarChar(50)
  imageUrl                     String?
  imageMediaId                 String?
  documentsUrl                 String?
  visits                       Int                    @default(0)
  totalLots                    Int                    @default(0)
  initialOffer                 Decimal?               @db.Decimal(15, 2)
  isFavorite                   Boolean                @default(false)
  dataAiHint                   String?
  automaticBiddingEnabled      Boolean                @default(true)
  silentBiddingEnabled         Boolean                @default(false)
  allowMultipleBidsPerUser     Boolean                @default(true)
  allowInstallmentBids         Boolean                @default(false)
  softCloseEnabled             Boolean                @default(false)
  softCloseMinutes             Int?                   @default(2)
  estimatedRevenue             Decimal?
  achievedRevenue              Decimal?
  totalHabilitatedUsers        Int?
  isFeaturedOnMarketplace      Boolean                @default(false)
  marketplaceAnnouncementTitle String?
  evaluationReportUrl          String?
  auctionCertificateUrl        String?
  sellingBranch                String?
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  auctioneer                   Auctioneer?            @relation(fields: [auctioneerId], references: [id])
  seller                       Seller?                @relation(fields: [sellerId], references: [id])
  category                     LotCategory?           @relation(fields: [categoryId], references: [id])
  lots                         Lot[]
  bids                         Bid[]
  auctionStages                AuctionStage[]
  habilitations                AuctionHabilitation[]
}

model Lot {
  id                        String          @id @default(cuid())
  publicId                  String          @unique
  auctionId                 String
  slug                      String?         @db.VarChar(255)
  number                    String?         @db.VarChar(20)
  title                     String          @db.VarChar(255)
  description               String?         @db.Text
  price                     Decimal         @db.Decimal(15, 2)
  initialPrice              Decimal?        @db.Decimal(15, 2)
  secondInitialPrice        Decimal?        @db.Decimal(15, 2)
  bidIncrementStep          Decimal?        @db.Decimal(10, 2)
  status                    String          @default("EM_BREVE") @db.VarChar(50)
  bidsCount                 Int             @default(0)
  views                     Int             @default(0)
  isFeatured                Boolean         @default(false)
  isExclusive               Boolean         @default(false)
  discountPercentage        Int?
  additionalTriggers        Json?
  imageUrl                  String?
  imageMediaId              String?
  type                      String          @db.VarChar(100)
  categoryId                String?
  subcategoryId             String?
  auctionName               String?         @db.VarChar(255)
  sellerId                  String?
  sellerName                String?         @db.VarChar(150)
  auctioneerId              String?
  cityId                    String?
  stateId                   String?
  cityName                  String?         @db.VarChar(100)
  stateUf                   String?         @db.VarChar(2)
  latitude                  Decimal?
  longitude                 Decimal?
  mapAddress                String?
  mapEmbedUrl               String?         @db.VarChar(500)
  mapStaticImageUrl         String?
  endDate                   DateTime?
  auctionDate               DateTime?
  lotSpecificAuctionDate    DateTime?
  secondAuctionDate         DateTime?
  condition                 String?         @db.VarChar(100)
  dataAiHint                String?
  winnerId                  String?
  winningBidTermUrl         String?
  allowInstallmentBids      Boolean         @default(false)
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  bens                      LotBens[]
  bids                      Bid[]
  userWins                  UserWin[]
  maxBids                   UserLotMaxBid[]
  reviews                   Review[]
  questions                 LotQuestion[]
  auction                   Auction         @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                  LotCategory?    @relation(fields: [categoryId], references: [id])
  subcategory               Subcategory?    @relation(fields: [subcategoryId], references: [id])
  seller                    Seller?         @relation(fields: [sellerId], references: [id])
  auctioneer                Auctioneer?     @relation(fields: [auctioneerId], references: [id])
  city                      City?           @relation(fields: [cityId], references: [id])
  state                     State?          @relation(fields: [stateId], references: [id]) // Relação que causou erro
  winner                    User?           @relation(name: "LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
}

model LotBens {
  lotId String
  bemId String
  lot   Lot    @relation(fields: [lotId], references: [id])
  bem   Bem    @relation(fields: [bemId], references: [id])

  @@id([lotId, bemId])
}

model MediaItem {
  id            String   @id @default(cuid())
  fileName      String   @unique
  storagePath   String
  title         String?
  altText       String?
  caption       String?  @db.VarChar(500)
  description   String?  @db.Text
  mimeType      String   @db.VarChar(100)
  sizeBytes     Int?
  urlOriginal   String
  urlThumbnail  String?
  urlMedium     String?
  urlLarge      String?
  dataAiHint    String?
  uploadedBy    String?
  uploadedAt    DateTime @default(now())
  uploader      User?    @relation(fields: [uploadedBy], references: [id])
}

model UserDocument {
  id              String        @id @default(cuid())
  userId          String
  documentTypeId  String
  status          String        @default("PENDING") @db.VarChar(50)
  fileUrl         String
  fileName        String?
  rejectionReason String?       @db.Text
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType  @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String?  @db.VarChar(150)
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String   @id @default(cuid())
  lotId            String   @unique
  userId           String?
  winningBidAmount Decimal  @db.Decimal(15, 2)
  winDate          DateTime @default(now())
  paymentStatus    String   @db.VarChar(50)
  invoiceUrl       String?
  lot              Lot      @relation(fields: [lotId], references: [id])
  user             User?    @relation(fields: [userId], references: [id], onDelete: SetNull, name: "UserWin") // Relação corrigida
}

model DirectSaleOffer {
  id                   String    @id @default(cuid())
  publicId             String    @unique
  title                String    @db.VarChar(255)
  description          String?   @db.Text
  offerType            String?   @db.VarChar(50)
  price                Decimal?  @db.Decimal(15, 2)
  minimumOfferPrice    Decimal?  @db.Decimal(15, 2)
  status               String    @default("ACTIVE") @db.VarChar(50)
  category             String?   @db.VarChar(100)
  sellerId             String?
  sellerName           String?   @db.VarChar(150)
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  locationCity         String?   @db.VarChar(100)
  locationState        String?   @db.VarChar(100)
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  itemsIncluded        Json?
  views                Int       @default(0)
  expiresAt            DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  seller               Seller?   @relation(fields: [sellerId], references: [id])
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String   @db.VarChar(150)
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                        String   @id @default(cuid())
  lotId                     String
  auctionId                 String
  userId                    String
  userDisplayName           String   @db.VarChar(150)
  questionText              String   @db.Text
  answerText                String?  @db.Text
  answeredByUserId          String?
  answeredByUserDisplayName String?  @db.VarChar(150)
  answeredAt                DateTime?
  isPublic                  Boolean  @default(true)
  createdAt                 DateTime @default(now())
  lot                       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user                      User     @relation(name: "QuestionAsker", fields: [userId], references: [id], onDelete: Cascade)
  answeredBy                User?    @relation(name: "AnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)
}

model AuctionStage {
  id          String   @id @default(cuid())
  auctionId   String
  name        String
  endDate     DateTime
  initialPrice Decimal? @db.Decimal(15, 2)
  statusText  String?
  auction     Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}

model UsersOnRoles {
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model AuctionHabilitation {
  userId     String
  auctionId  String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction    Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@id([userId, auctionId])
}

model PlatformSettings {
  id                            String   @id @default("global")
  siteTitle                     String?
  siteTagline                   String?  @db.VarChar(200)
  logoUrl                       String?
  faviconUrl                    String?
  galleryImageBasePath          String?  @db.VarChar(200)
  storageProvider               String?  @db.VarChar(50)
  firebaseStorageBucket         String?  @db.VarChar(200)
  activeThemeName               String?  @db.VarChar(100)
  themes                        Json?
  platformPublicIdMasks         Json?
  homepageSections              Json?
  mentalTriggerSettings         Json?
  sectionBadgeVisibility        Json?
  mapSettings                   Json?
  searchPaginationType          String?  @db.VarChar(50)
  searchItemsPerPage            Int?
  searchLoadMoreCount           Int?
  showCountdownOnLotDetail      Boolean?
  showCountdownOnCards          Boolean?
  showRelatedLotsOnLotDetail    Boolean?
  relatedLotsCount              Int?
  defaultUrgencyTimerHours      Int?
  variableIncrementTable        Json?
  biddingSettings               Json?
  defaultListItemsPerPage       Int?
  updatedAt                     DateTime @updatedAt
}