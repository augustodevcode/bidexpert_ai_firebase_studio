// prisma/schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. Enums
// =================================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  REJECTED_DOCUMENTS
  HABILITADO
  BLOCKED
}

enum DocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum DirectSaleOfferStatus {
  RASCUNHO
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

// =================================================================
// 2. Models
// =================================================================

model User {
  id                  String   @id @default(cuid())
  email               String   @unique
  password            String?
  fullName            String?
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType          @default(PHYSICAL)
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // PF Details
  cpf           String? @unique
  rgNumber      String?
  rgIssuer      String?
  rgIssueDate   DateTime?
  rgState       String?
  dateOfBirth   DateTime?
  homePhone     String?
  cellPhone     String?
  gender        String?
  profession    String?
  nationality   String?
  maritalStatus String?
  propertyRegime String?
  spouseName    String?
  spouseCpf     String?

  // PJ Details
  razaoSocial       String?
  cnpj              String? @unique
  inscricaoEstadual String?
  website           String?
  responsibleName   String?
  responsibleCpf    String?

  // Endereço
  zipCode      String?
  street       String?
  number       String?
  complement   String?
  neighborhood String?
  city         String?
  state        String?
  
  // Marketing
  optInMarketing Boolean? @default(false)

  // Relações
  roles             UsersOnRoles[]
  sellerProfile     Seller[]
  auctioneerProfile Auctioneer[]
  bids              Bid[]
  wins              UserWin[]
  documents         UserDocument[]
  notifications     Notification[]
  uploadedMedia     MediaItem[]      @relation("UploadedBy")
  maxBids           UserLotMaxBid[]
  answeredQuestions LotQuestion[]    @relation("AnsweredBy")
  askedQuestions    LotQuestion[]    @relation("AskedBy")
}

model Role {
  id             String         @id @default(cuid())
  name           String         @unique
  nameNormalized String         @unique
  description    String?        @db.Text
  permissions    String[]
  users          UsersOnRoles[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String // e.g., 'system', 'admin-user-id'

  @@id([userId, roleId])
}

model StateInfo {
  id         String            @id @default(cuid())
  name       String
  uf         String            @unique
  slug       String            @unique
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  cities     CityInfo[]
  districts  JudicialDistrict[]
  auctions   Auction[]
  lots       Lot[]
}

model CityInfo {
  id        String   @id @default(cuid())
  name      String
  slug      String?
  state     StateInfo @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId   String
  stateUf   String?
  ibgeCode  String?  @unique
  auctions  Auction[]
  lots      Lot[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Court {
  id                 String             @id @default(cuid())
  name               String
  slug               String?
  stateUf            String?
  website            String?
  judicialDistricts  JudicialDistrict[]
  judicialProcesses  JudicialProcess[]
  auctions           Auction[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model JudicialDistrict {
  id                 String             @id @default(cuid())
  name               String
  slug               String             @unique
  court              Court?             @relation(fields: [courtId], references: [id])
  courtId            String?
  state              StateInfo?         @relation(fields: [stateId], references: [id])
  stateId            String?
  zipCode            String?
  judicialBranches   JudicialBranch[]
  judicialProcesses  JudicialProcess[]
  auctions           Auction[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model JudicialBranch {
  id                 String             @id @default(cuid())
  name               String
  slug               String             @unique
  district           JudicialDistrict?  @relation(fields: [districtId], references: [id])
  districtId         String?
  contactName        String?
  phone              String?
  email              String?
  judicialProcesses  JudicialProcess[]
  sellers            Seller[] // Uma vara pode ser um comitente em vários registros
  auctions           Auction[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model Seller {
  id                 String              @id @default(cuid())
  publicId           String              @unique @default(cuid())
  slug               String              @unique
  name               String              @unique
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?             @db.Text
  userId             String?             @unique
  user               User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
  isJudicial         Boolean             @default(false)
  judicialBranch     JudicialBranch?     @relation(fields: [judicialBranchId], references: [id])
  judicialBranchId   String?             @unique
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  auctions           Auction[]
  lots               Lot[]
  bens               Bem[]
  judicialProcesses  JudicialProcess[]
  directSaleOffers   DirectSaleOffer[]
}

model Auctioneer {
  id                   String    @id @default(cuid())
  publicId             String    @unique @default(cuid())
  slug                 String    @unique
  name                 String
  registrationNumber   String?
  contactName          String?
  email                String?   @unique
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?   @db.Text
  userId               String?   @unique
  user                 User?     @relation(fields: [userId], references: [id])
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  auctions             Auction[]
}

model JudicialProcess {
  id                String           @id @default(cuid())
  publicId          String           @unique @default(cuid())
  processNumber     String           @unique
  isElectronic      Boolean          @default(true)
  courtId           String?
  court             Court?           @relation(fields: [courtId], references: [id])
  districtId        String?
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  branchId          String?
  branch            JudicialBranch?  @relation(fields: [branchId], references: [id])
  sellerId          String?
  seller            Seller?          @relation(fields: [sellerId], references: [id])
  parties           JudicialParty[]
  bens              Bem[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  auctions          Auction[]
}

model JudicialParty {
  id             String          @id @default(cuid())
  processId      String
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  name           String
  documentNumber String?
  partyType      String
}

model PlatformSettings {
  id                         String    @id @default("global")
  siteTitle                  String    @default("BidExpert")
  siteTagline                String?
  logoUrl                    String?
  faviconUrl                 String?
  galleryImageBasePath       String    @default("/uploads/media/")
  storageProvider            String    @default("local") // 'local' or 'firebase'
  firebaseStorageBucket      String?
  activeThemeName            String?
  themes                     Json?
  platformPublicIdMasks      Json?
  homepageSections           Json?
  mentalTriggerSettings      Json?
  sectionBadgeVisibility     Json?
  mapSettings                Json?
  searchPaginationType       String    @default("loadMore")
  searchItemsPerPage         Int       @default(12)
  searchLoadMoreCount        Int       @default(12)
  showCountdownOnLotDetail   Boolean   @default(true)
  showCountdownOnCards       Boolean   @default(true)
  showRelatedLotsOnLotDetail Boolean   @default(true)
  relatedLotsCount           Int       @default(5)
  defaultUrgencyTimerHours   Int?
  variableIncrementTable     Json?
  biddingSettings            Json?
  paymentGatewaySettings     Json?
  defaultListItemsPerPage    Int?      @default(10)
  updatedAt                  DateTime? @updatedAt
}

model LotCategory {
  id                   String              @id @default(cuid())
  name                 String              @unique
  slug                 String              @unique
  description          String?
  hasSubcategories     Boolean             @default(false)
  logoUrl              String?
  logoMediaId          String?
  dataAiHintIcon       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  subcategories      Subcategory[]
  bens               Bem[]
  auctions           Auction[]
  lots               Lot[]
  directSaleOffers   DirectSaleOffer[]
}

model Subcategory {
  id                 String      @id @default(cuid())
  name               String
  slug               String
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  parentCategoryId   String
  description        String?
  displayOrder       Int         @default(0)
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  bens               Bem[]
  lots               Lot[]

  @@unique([parentCategoryId, name])
  @@unique([parentCategoryId, slug])
}

model Auction {
  id                             String                @id @default(cuid())
  publicId                       String                @unique @default(cuid())
  slug                           String                @unique
  title                          String
  description                    String?               @db.Text
  status                         AuctionStatus         @default(RASCUNHO)
  auctionDate                    DateTime
  endDate                        DateTime?
  auctioneerId                   String
  auctioneer                     Auctioneer            @relation(fields: [auctioneerId], references: [id])
  sellerId                       String
  seller                         Seller                @relation(fields: [sellerId], references: [id])
  categoryId                     String
  category                       LotCategory           @relation(fields: [categoryId], references: [id])
  auctionType                    AuctionType?
  participation                  AuctionParticipation? @default(ONLINE)
  auctionMethod                  AuctionMethod?        @default(STANDARD)
  onlineUrl                      String?
  address                        String?
  cityId                         String?
  city                           CityInfo?             @relation(fields: [cityId], references: [id], onDelete: SetNull)
  stateId                        String?
  state                          StateInfo?            @relation(fields: [stateId], references: [id], onDelete: SetNull)
  zipCode                        String?
  latitude                       Float?
  longitude                      Float?
  imageUrl                       String?
  imageMediaId                   String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  visits                         Int?                  @default(0)
  initialOffer                   Decimal?              @db.Decimal(15, 2)
  isFeaturedOnMarketplace        Boolean               @default(false)
  marketplaceAnnouncementTitle   String?
  isFavorite                     Boolean?              @default(false)
  dataAiHint                     String?
  judicialProcessId              String?
  judicialProcess                JudicialProcess?      @relation(fields: [judicialProcessId], references: [id])
  courtId                        String?
  court                          Court?                @relation(fields: [courtId], references: [id])
  districtId                     String?
  district                       JudicialDistrict?     @relation(fields: [districtId], references: [id])
  branchId                       String?
  branch                         JudicialBranch?       @relation(fields: [branchId], references: [id])
  sellingBranch                  String?
  automaticBiddingEnabled        Boolean               @default(false)
  silentBiddingEnabled           Boolean               @default(false)
  allowMultipleBidsPerUser       Boolean               @default(true)
  allowInstallmentBids           Boolean               @default(true)
  softCloseEnabled               Boolean               @default(false)
  softCloseMinutes               Int?                  @default(2)
  estimatedRevenue               Decimal?              @db.Decimal(15, 2)
  achievedRevenue                Decimal?              @db.Decimal(15, 2)
  totalHabilitatedUsers          Int?                  @default(0)
  additionalTriggers             String[]
  decrementAmount                Decimal?
  decrementIntervalSeconds       Int?
  floorPrice                     Decimal?
  autoRelistSettings             Json?
  createdAt                      DateTime              @default(now())
  updatedAt                      DateTime              @updatedAt
  lots                           Lot[]
  bids                           Bid[]
  auctionStages                  AuctionStage[]
  habilitations                  AuctionHabilitation[]
}

model AuctionStage {
  id              String   @id @default(cuid())
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId       String
  name            String
  startDate       DateTime
  endDate         DateTime
  evaluationValue Decimal?
}

model AuctionHabilitation {
  userId    String
  auctionId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction   Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, auctionId])
}

model Lot {
  id                         String              @id @default(cuid())
  publicId                   String              @unique @default(cuid())
  auctionId                  String
  auction                    Auction             @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  slug                       String?
  number                     String?
  title                      String
  description                String?             @db.Text
  price                      Decimal             @db.Decimal(15, 2)
  initialPrice               Decimal?            @db.Decimal(15, 2)
  secondInitialPrice         Decimal?            @db.Decimal(15, 2)
  bidIncrementStep           Decimal?            @db.Decimal(10, 2)
  status                     LotStatus           @default(EM_BREVE)
  bidsCount                  Int?                @default(0)
  views                      Int?                @default(0)
  isFeatured                 Boolean?            @default(false)
  isExclusive                Boolean?            @default(false)
  discountPercentage         Int?
  additionalTriggers         String[]
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  inheritedMediaFromBemId    String? // ID of a Bem from which to inherit media
  type                       String
  categoryId                 String?
  category                   LotCategory?        @relation(fields: [categoryId], references: [id])
  subcategoryId              String?
  subcategory                Subcategory?        @relation(fields: [subcategoryId], references: [id])
  sellerId                   String?
  seller                     Seller?             @relation(fields: [sellerId], references: [id])
  auctioneerId               String?
  cityId                     String?
  city                       CityInfo?           @relation(fields: [cityId], references: [id], onDelete: SetNull)
  stateId                    String?
  state                      StateInfo?          @relation(fields: [stateId], references: [id], onDelete: SetNull)
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?
  endDate                    DateTime?
  auctionDate                DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  dataAiHint                 String?
  winnerId                   String?
  winner                     User?               @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  winningBidTermUrl          String?
  allowInstallmentBids       Boolean             @default(false)
  isRelisted                 Boolean             @default(false)
  relistCount                Int                 @default(0)
  originalLotId              String?             @unique
  originalLot                Lot?                @relation("RelistedLot", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot                Lot?                @relation("RelistedLot")
  createdAt                  DateTime            @default(now())
  updatedAt                  DateTime            @updatedAt
  bids                       Bid[]
  reviews                    Review[]
  questions                  LotQuestion[]
  wins                       UserWin[]
  maxBids                    UserLotMaxBid[]
  bens                       LotBens[]
  evaluationValue            Decimal?
  lotStageDetails            LotAuctionStageDetails[]

  @@unique([auctionId, number])
}

model LotBens {
  lot     Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId   String
  bem     Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId   String

  @@id([lotId, bemId])
}

// Detalhes de preço específicos por etapa do leilão
model LotAuctionStageDetails {
  id             String  @id @default(cuid())
  lotId          String
  lot            Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  stageId        String
  stage          AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)
  initialBid     Decimal?
  bidIncrement   Decimal?
  
  @@unique([lotId, stageId])
}


model Bem {
  id                         String   @id @default(cuid())
  publicId                   String   @unique @default(cuid())
  title                      String
  description                String?  @db.Text
  status                     String   @default("DISPONIVEL")
  categoryId                 String
  category                   LotCategory @relation(fields: [categoryId], references: [id])
  subcategoryId              String?
  subcategory                Subcategory? @relation(fields: [subcategoryId], references: [id])
  judicialProcessId          String?
  judicialProcess            JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  sellerId                   String?
  seller                     Seller?  @relation(fields: [sellerId], references: [id])
  evaluationValue            Decimal? @db.Decimal(15, 2)
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  lots                       LotBens[]

  // Veículos
  plate String?
  make String?
  model String?
  version String?
  year Int?
  modelYear Int?
  mileage Int?
  color String?
  fuelType String?
  transmissionType String?
  bodyType String?
  vin String?
  renavam String?
  enginePower String?
  numberOfDoors Int?
  vehicleOptions String?
  detranStatus String?
  debts String?
  runningCondition String?
  bodyCondition String?
  tiresCondition String?
  hasKey Boolean?

  // Imóveis
  propertyRegistrationNumber String?
  iptuNumber String?
  isOccupied Boolean?
  area Decimal? @db.Decimal(10,2)
  totalArea Decimal? @db.Decimal(10,2)
  builtArea Decimal? @db.Decimal(10,2)
  bedrooms Int?
  suites Int?
  bathrooms Int?
  parkingSpaces Int?
  constructionType String?
  finishes String?
  infrastructure String?
  condoDetails String?
  improvements String?
  topography String?
  liensAndEncumbrances String?
  propertyDebts String?
  unregisteredRecords String?
  hasHabiteSe Boolean?
  zoningRestrictions String?
  amenities Json?

  // Eletrônicos
  brand String?
  serialNumber String?
  itemCondition String?
  specifications String?
  includedAccessories String?
  batteryCondition String?
  hasInvoice Boolean?
  hasWarranty Boolean?
  repairHistory String?
  
  // Eletrodomésticos
  applianceCapacity String?
  voltage String?
  applianceType String?
  additionalFunctions String?
  
  // Máquinas e Equipamentos
  hoursUsed Int?
  engineType String?
  capacityOrPower String?
  maintenanceHistory String?
  installationLocation String?
  compliesWithNR String?
  operatingLicenses String?
  
  // Semoventes (Livestock)
  breed String?
  age String?
  sex String?
  weight String?
  individualId String?
  purpose String?
  sanitaryCondition String?
  vaccinationStatus String?
  lineage String?
  isPregnant Boolean?
  specialSkills String?
  gtaDocument String?
  breedRegistryDocument String?
}

model DirectSaleOffer {
  id                   String        @id @default(cuid())
  publicId             String        @unique @default(cuid())
  title                String
  description          String?       @db.Text
  offerType            DirectSaleOfferType
  price                Decimal?      @db.Decimal(15, 2)
  minimumOfferPrice    Decimal?      @db.Decimal(15, 2)
  status               DirectSaleOfferStatus @default(ACTIVE)
  categoryId           String
  category             LotCategory @relation(fields: [categoryId], references: [id])
  sellerId             String
  seller               Seller   @relation(fields: [sellerId], references: [id])
  sellerName           String?
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int?          @default(0)
  expiresAt            DateTime?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
}

model UserDocument {
  id              String          @id @default(cuid())
  userId          String
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentTypeId  String
  documentType    DocumentType    @relation(fields: [documentTypeId], references: [id])
  status          DocumentStatus  @default(PENDING_ANALYSIS)
  fileUrl         String
  fileName        String?
  rejectionReason String?         @db.Text
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id          String         @id @default(cuid())
  name        String         @unique
  description String?
  isRequired  Boolean        @default(true)
  appliesTo   String         // 'ALL', 'PHYSICAL', 'LEGAL'
  documents   UserDocument[]
}

model Bid {
  id             String   @id @default(cuid())
  lotId          String
  lot            Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId      String
  auction        Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidderId       String
  bidder         User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderDisplay  String?  // Nome ou apelido a ser exibido publicamente
  amount         Decimal  @db.Decimal(15, 2)
  timestamp      DateTime @default(now())
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())
}

model LotQuestion {
  id             String   @id @default(cuid())
  lotId          String
  lot            Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  userId         String
  user           User     @relation("AskedBy", fields: [userId], references: [id], onDelete: Cascade)
  userDisplayName String
  questionText   String   @db.Text
  isPublic       Boolean  @default(true)
  answerText     String?  @db.Text
  answeredByUserId String?
  answeredByUser User?    @relation("AnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)
  answeredByUserDisplayName String?
  answeredAt     DateTime?
  createdAt      DateTime @default(now())
}


model UserWin {
  id                  String               @id @default(cuid())
  lotId               String               @unique
  lot                 Lot                  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  userId              String
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  winningBidAmount    Decimal              @db.Decimal(15, 2)
  winDate             DateTime             @default(now())
  paymentStatus       PaymentStatus        @default(PENDENTE)
  invoiceUrl          String?
  installments        InstallmentPayment[]
}

// Model para armazenar os detalhes de pagamento de cada parcela.
model InstallmentPayment {
  id                String       @id @default(cuid())
  userWinId         String
  userWin           UserWin      @relation(fields: [userWinId], references: [id], onDelete: Cascade)
  installmentNumber Int
  amount            Decimal      @db.Decimal(15, 2)
  dueDate           DateTime
  status            PaymentStatus @default("PENDENTE")
  paymentDate       DateTime?
  paymentMethod     String?
  transactionId     String?
}


model Notification {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    message   String
    link      String?
    isRead    Boolean  @default(false)
    createdAt DateTime @default(now())
}

model MediaItem {
  id                 String  @id @default(cuid())
  fileName           String
  storagePath        String
  title              String
  altText            String?
  caption            String?
  description        String?  @db.Text
  mimeType           String
  sizeBytes          Int?
  urlOriginal        String
  urlThumbnail       String?
  urlMedium          String?
  urlLarge           String?
  linkedLotIds       Json?
  judicialProcessId  String?
  dataAiHint         String?
  uploadedByUserId   String
  uploadedBy         User     @relation("UploadedBy", fields: [uploadedByUserId], references: [id], onDelete: Cascade)
  uploadedAt         DateTime @default(now())
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lotId     String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model ContactMessage {
  id       String   @id @default(cuid())
  name     String
  email    String
  subject  String?
  message  String   @db.Text
  isRead   Boolean  @default(false)
  createdAt DateTime @default(now())
}
