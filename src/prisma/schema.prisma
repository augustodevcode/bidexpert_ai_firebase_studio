
// datasource and generator definitions...
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Global settings for the platform
model PlatformSettings {
  id                            String   @id @default("global")
  siteTitle                     String?
  siteTagline                   String?  @db.VarChar(200)
  logoUrl                       String?
  faviconUrl                    String?
  galleryImageBasePath          String?  @db.VarChar(200)
  storageProvider               String?  @db.VarChar(50)
  firebaseStorageBucket         String?  @db.VarChar(200)
  activeThemeName               String?  @db.VarChar(100)
  themes                        Json?
  platformPublicIdMasks         Json?
  homepageSections              Json?
  mentalTriggerSettings         Json?
  sectionBadgeVisibility        Json?
  mapSettings                   Json?
  searchPaginationType          String?  @db.VarChar(50)
  searchItemsPerPage            Int?
  searchLoadMoreCount           Int?
  showCountdownOnLotDetail      Boolean?
  showCountdownOnCards          Boolean?
  showRelatedLotsOnLotDetail    Boolean?
  relatedLotsCount              Int?
  defaultUrgencyTimerHours      Int?
  variableIncrementTable        Json?
  biddingSettings               Json?
  defaultListItemsPerPage       Int?
  updatedAt                     DateTime @updatedAt
}

model State {
  id                String              @id @default(cuid())
  name              String
  uf                String              @unique
  slug              String              @unique
  cityCount         Int?                @default(0)
  cities            City[]
  judicialDistricts JudicialDistrict[]
  lots              Lot[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model City {
  id        String   @id @default(cuid())
  name      String
  slug      String?
  stateId   String
  state     State    @relation(fields: [stateId], references: [id])
  stateUf   String?
  ibgeCode  String?  @unique
  lotCount  Int?     @default(0)
  lots      Lot[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model UserDocument {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  documentTypeId  String
  documentType    DocumentType @relation(fields: [documentTypeId], references: [id])
  status          String   @default("PENDING") // PENDING, APPROVED, REJECTED
  fileUrl         String
  fileName        String?
  rejectionReason String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id          String         @id @default(cuid())
  name        String
  description String?
  isRequired  Boolean        @default(true)
  appliesTo   String? // e.g., PHYSICAL, LEGAL, ALL
  submissions UserDocument[]
}

model User {
  id                   String                 @id @default(cuid())
  email                String                 @unique
  password             String?
  fullName             String?
  sellerId             String?                @unique
  habilitationStatus   String?                @default("PENDING_DOCUMENTS")
  accountType          String?                @default("PHYSICAL")
  avatarUrl            String?
  dataAiHint           String?
  badges               Json?
  cpf                  String?
  cellPhone            String?
  dateOfBirth          DateTime?
  zipCode              String?
  street               String?
  number               String?
  complement           String?
  neighborhood         String?
  city                 String?
  state                String?
  optInMarketing       Boolean?               @default(false)
  razaoSocial          String?
  cnpj                 String?
  inscricaoEstadual    String?
  website              String?
  responsibleName      String?
  responsibleCpf       String?
  rgNumber             String?
  rgIssuer             String?
  rgIssueDate          DateTime?
  rgState              String?
  homePhone            String?
  gender               String?
  profession           String?
  nationality          String?
  maritalStatus        String?
  propertyRegime       String?
  spouseName           String?
  spouseCpf            String?
  roles                UsersOnRoles[]
  bids                 Bid[]
  wins                 UserWin[]
  notifications        Notification[]
  reviews              Review[]
  questions            LotQuestion[]
  userDocuments        UserDocument[]
  auctionHabilitations AuctionHabilitation[]
  auctioneerProfile    Auctioneer?
  sellerProfile        Seller?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
}

model Role {
  id             String         @id @default(cuid())
  name           String         @unique
  nameNormalized String         @unique
  description    String?
  permissions    Json?
  users          UsersOnRoles[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  role       Role     @relation(fields: [roleId], references: [id])
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model LotCategory {
  id                    String        @id @default(cuid())
  name                  String        @unique
  slug                  String        @unique
  description           String?       @db.VarChar(500)
  hasSubcategories      Boolean       @default(false)
  iconName              String?
  logoUrl               String?
  logoMediaId           String?
  dataAiHintIcon        String?
  coverImageUrl         String?
  coverImageMediaId     String?
  dataAiHintCover       String?
  megaMenuImageUrl      String?
  megaMenuImageMediaId  String?
  dataAiHintMegaMenu    String?
  lots                  Lot[]
  bens                  Bem[]
  subcategories         Subcategory[]
  auctions              Auction[]
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
}

model Subcategory {
  id               String      @id @default(cuid())
  name             String
  slug             String      @unique
  parentCategoryId String
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id])
  description      String?     @db.VarChar(500)
  displayOrder     Int         @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  lots             Lot[]
  bens             Bem[]
}

model Auctioneer {
  id                   String    @id @default(cuid())
  publicId             String    @unique @default(cuid())
  slug                 String    @unique
  name                 String    @unique
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?   @db.Text
  userId               String?   @unique
  user                 User?     @relation(fields: [userId], references: [id])
  memberSince          DateTime?
  rating               Float?
  auctionsConductedCount Int?      @default(0)
  totalValueSold       Decimal?  @db.Decimal(15, 2)
  auctions             Auction[]
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model Seller {
  id                        String             @id @default(cuid())
  publicId                  String             @unique @default(cuid())
  slug                      String             @unique
  name                      String             @unique
  contactName               String?
  email                     String?
  phone                     String?
  address                   String?
  city                      String?
  state                     String?
  zipCode                   String?
  website                   String?
  logoUrl                   String?
  logoMediaId               String?
  dataAiHintLogo            String?
  description               String?            @db.Text
  userId                    String?            @unique
  user                      User?              @relation(fields: [userId], references: [id])
  isJudicial                Boolean            @default(false)
  judicialBranchId          String?            @unique
  judicialBranch            JudicialBranch?    @relation(fields: [judicialBranchId], references: [id])
  memberSince               DateTime?
  rating                    Float?
  activeLotsCount           Int?               @default(0)
  totalSalesValue           Decimal?           @db.Decimal(15, 2)
  auctionsFacilitatedCount  Int?               @default(0)
  auctions                  Auction[]
  bens                      Bem[]
  judicialProcesses         JudicialProcess[]
  directSaleOffers          DirectSaleOffer[]
  lots                      Lot[]
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
}

model Auction {
  id                            String                @id @default(cuid())
  publicId                      String                @unique @default(cuid())
  slug                          String                @unique
  title                         String
  description                   String?               @db.Text
  status                        String                @default("RASCUNHO")
  auctionDate                   DateTime
  endDate                       DateTime?
  totalLots                     Int?                  @default(0)
  categoryId                    String?
  category                      LotCategory?          @relation(fields: [categoryId], references: [id])
  auctioneerId                  String
  auctioneer                    Auctioneer            @relation(fields: [auctioneerId], references: [id])
  sellerId                      String?
  seller                        Seller?               @relation(fields: [sellerId], references: [id])
  imageUrl                      String?
  imageMediaId                  String?
  dataAiHint                    String?
  isFavorite                    Boolean?              @default(false)
  visits                        Int?                  @default(0)
  initialOffer                  Decimal?              @db.Decimal(15, 2)
  auctionType                   String?
  documentsUrl                  String?
  evaluationReportUrl           String?
  auctionCertificateUrl         String?
  sellingBranch                 String?
  automaticBiddingEnabled       Boolean               @default(false)
  silentBiddingEnabled          Boolean               @default(false)
  allowMultipleBidsPerUser      Boolean               @default(true)
  allowInstallmentBids          Boolean               @default(false)
  softCloseEnabled              Boolean               @default(false)
  softCloseMinutes              Int?                  @default(2)
  estimatedRevenue              Decimal?              @db.Decimal(15, 2)
  achievedRevenue               Decimal?              @db.Decimal(15, 2)
  totalHabilitatedUsers         Int?                  @default(0)
  isFeaturedOnMarketplace       Boolean               @default(false)
  marketplaceAnnouncementTitle  String?
  judicialProcessId             String?
  additionalTriggers            Json?
  decrementAmount               Decimal?              @db.Decimal(15, 2)
  decrementIntervalSeconds      Int?
  floorPrice                    Decimal?              @db.Decimal(15, 2)
  autoRelistSettings            Json?
  lots                          Lot[]
  bids                          Bid[]
  auctionStages                 AuctionStage[]
  habilitations                 AuctionHabilitation[]
  createdAt                     DateTime              @default(now())
  updatedAt                     DateTime              @updatedAt
}

model AuctionHabilitation {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  auctionId String
  auction   Auction  @relation(fields: [auctionId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, auctionId])
}

model AuctionStage {
  id          String   @id @default(cuid())
  auctionId   String
  auction     Auction  @relation(fields: [auctionId], references: [id])
  name        String
  endDate     DateTime
  initialPrice Decimal? @db.Decimal(15, 2)
  statusText  String?
}

model Bem {
  id                   String        @id @default(cuid())
  publicId             String        @unique @default(cuid())
  title                String
  description          String?       @db.Text
  status               String        @default("DISPONIVEL")
  categoryId           String
  category             LotCategory   @relation(fields: [categoryId], references: [id])
  subcategoryId        String?
  subcategory          Subcategory?  @relation(fields: [subcategoryId], references: [id])
  judicialProcessId    String?
  judicialProcess      JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  sellerId             String?
  seller               Seller?       @relation(fields: [sellerId], references: [id])
  evaluationValue      Decimal?      @db.Decimal(15, 2)
  imageUrl             String?
  imageMediaId         String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  dataAiHint           String?
  locationCity         String?
  locationState        String?
  address              String?
  latitude             Decimal?      @db.Decimal(10, 8)
  longitude            Decimal?      @db.Decimal(11, 8)
  plate                String?
  make                 String?
  model                String?
  version              String?
  year                 Int?
  modelYear            Int?
  mileage              Int?
  color                String?
  fuelType             String?
  transmissionType     String?
  bodyType             String?
  vin                  String?
  renavam              String?
  enginePower          String?
  numberOfDoors        Int?
  vehicleOptions       String?
  detranStatus         String?
  debts                String?
  runningCondition     String?
  bodyCondition        String?
  tiresCondition       String?
  hasKey               Boolean?
  propertyType         String?
  propertyRegistrationNumber String?
  iptuNumber           String?
  isOccupied           Boolean?
  area                 Decimal?      @db.Decimal(15, 2)
  totalArea            Decimal?      @db.Decimal(15, 2)
  builtArea            Decimal?      @db.Decimal(15, 2)
  bedrooms             Int?
  suites               Int?
  bathrooms            Int?
  parkingSpaces        Int?
  constructionType     String?
  finishes             String?       @db.Text
  infrastructure       String?       @db.Text
  condoDetails         String?       @db.Text
  improvements         String?       @db.Text
  topography           String?
  liensAndEncumbrances String?       @db.Text
  propertyDebts        String?       @db.Text
  unregisteredRecords  String?       @db.Text
  hasHabiteSe          Boolean?
  zoningRestrictions   String?
  amenities            Json?
  brand                String?
  serialNumber         String?
  itemCondition        String?
  specifications       String?       @db.Text
  includedAccessories  String?
  batteryCondition     String?
  hasInvoice           Boolean?
  hasWarranty          Boolean?
  repairHistory        String?       @db.Text
  applianceCapacity    String?
  voltage              String?
  applianceType        String?
  additionalFunctions  String?
  hoursUsed            Int?
  engineType           String?
  capacityOrPower      String?
  maintenanceHistory   String?       @db.Text
  installationLocation String?
  compliesWithNR       String?
  operatingLicenses    String?
  breed                String?
  age                  String?
  sex                  String?
  weight               String?
  individualId         String?
  purpose              String?
  sanitaryCondition    String?
  vaccinationStatus    String?
  lineage              String?
  isPregnant           Boolean?
  specialSkills        String?
  gtaDocument          String?
  breedRegistryDocument String?
  lots                 LotBens[]
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
}

model Lot {
  id                       String        @id @default(cuid())
  publicId                 String        @unique @default(cuid())
  auctionId                String
  auction                  Auction       @relation(fields: [auctionId], references: [id])
  slug                     String?
  number                   String?
  title                    String
  description              String?       @db.Text
  price                    Decimal       @db.Decimal(15, 2)
  initialPrice             Decimal?      @db.Decimal(15, 2)
  secondInitialPrice       Decimal?      @db.Decimal(15, 2)
  bidIncrementStep         Decimal?      @db.Decimal(10, 2)
  status                   String        @default("EM_BREVE")
  bidsCount                Int?          @default(0)
  views                    Int?          @default(0)
  isFeatured               Boolean?      @default(false)
  isExclusive              Boolean?      @default(false)
  discountPercentage       Int?
  additionalTriggers       Json?
  imageUrl                 String?
  imageMediaId             String?
  galleryImageUrls         Json?
  mediaItemIds             Json?
  type                     String?
  categoryId               String?
  category                 LotCategory?  @relation(fields: [categoryId], references: [id])
  subcategoryId            String?
  subcategory              Subcategory?  @relation(fields: [subcategoryId], references: [id])
  auctionName              String?
  sellerId                 String?
  seller                   Seller?       @relation(fields: [sellerId], references: [id])
  sellerName               String?
  auctioneerId             String?
  cityId                   String?
  city                     City?         @relation(fields: [cityId], references: [id])
  stateId                  String?
  state                    State?        @relation(fields: [stateId], references: [id])
  cityName                 String?
  stateUf                  String?
  latitude                 Decimal?      @db.Decimal(10, 8)
  longitude                Decimal?      @db.Decimal(11, 8)
  mapAddress               String?
  mapEmbedUrl              String?       @db.VarChar(500)
  mapStaticImageUrl        String?
  endDate                  DateTime?
  auctionDate              DateTime?
  lotSpecificAuctionDate   DateTime?
  secondAuctionDate        DateTime?
  condition                String?
  dataAiHint               String?
  winnerId                 String?
  winner                   User?         @relation("Winner", fields: [winnerId], references: [id])
  winningBidTermUrl        String?
  allowInstallmentBids     Boolean?      @default(false)
  bens                     LotBens[]
  bids                     Bid[]
  reviews                  Review[]
  questions                LotQuestion[]
  winRecord                UserWin?      @relation("LotWinRecord")
  maxBids                  UserLotMaxBid[]
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
}

model LotBens {
  lot    Lot    @relation(fields: [lotId], references: [id])
  lotId  String
  bem    Bem    @relation(fields: [bemId], references: [id])
  bemId  String

  @@id([lotId, bemId])
}

model UserWin {
  id               String   @id @default(cuid())
  lotId            String   @unique // A lot can only be won once
  lot              Lot      @relation("LotWinRecord", fields: [lotId], references: [id])
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  winningBidAmount Decimal  @db.Decimal(15, 2)
  winDate          DateTime
  paymentStatus    String
  invoiceUrl       String?
}

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  lot           Lot      @relation(fields: [lotId], references: [id])
  auctionId     String
  auction       Auction  @relation(fields: [auctionId], references: [id])
  bidderId      String
  bidder        User     @relation(fields: [bidderId], references: [id])
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  lot             Lot      @relation(fields: [lotId], references: [id])
  auctionId       String
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  userDisplayName String?
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())
}

model LotQuestion {
  id                        String   @id @default(cuid())
  lotId                     String
  lot                       Lot      @relation(fields: [lotId], references: [id])
  auctionId                 String
  userId                    String
  user                      User     @relation(fields: [userId], references: [id])
  userDisplayName           String
  questionText              String   @db.Text
  answerText                String?  @db.Text
  answeredByUserId          String?
  answeredByUserDisplayName String?
  answeredAt                DateTime?
  isPublic                  Boolean  @default(true)
  createdAt                 DateTime @default(now())
}

model MediaItem {
  id               String    @id @default(cuid())
  fileName         String    @unique
  storagePath      String
  title            String?
  altText          String?
  caption          String?   @db.VarChar(500)
  description      String?   @db.Text
  mimeType         String
  sizeBytes        Int?
  urlOriginal      String
  urlThumbnail     String?
  urlMedium        String?
  urlLarge         String?
  linkedLotIds     Json?
  dataAiHint       String?
  uploadedBy       String?
  uploadedAt       DateTime  @default(now())
  LotCategoriesLogo  LotCategory[] @relation("logo")
  LotCategoriesCover LotCategory[] @relation("cover")
  LotCategoriesMega  LotCategory[] @relation("megaMenu")
}

model ContactMessage {
  id       String   @id @default(cuid())
  name     String
  email    String
  subject  String
  message  String   @db.Text
  isRead   Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DirectSaleOffer {
  id                  String   @id @default(cuid())
  publicId            String   @unique
  title               String
  description         String?  @db.Text
  offerType           String?
  price               Decimal? @db.Decimal(15, 2)
  minimumOfferPrice   Decimal? @db.Decimal(15, 2)
  status              String?  @default("ACTIVE")
  category            String?
  sellerId            String?
  seller              Seller?  @relation(fields: [sellerId], references: [id])
  sellerName          String?
  sellerLogoUrl       String?
  dataAiHintSellerLogo String?
  locationCity        String?
  locationState       String?
  imageUrl            String?
  imageMediaId        String?
  dataAiHint          String?
  galleryImageUrls    Json?
  mediaItemIds        Json?
  itemsIncluded       Json?
  views               Int?     @default(0)
  expiresAt           DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  lotId     String
  lot       Lot      @relation(fields: [lotId], references: [id])
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model Court {
  id                  String              @id @default(cuid())
  name                String              @unique
  slug                String              @unique
  stateUf             String
  website             String?
  judicialDistricts   JudicialDistrict[]
  judicialProcesses   JudicialProcess[]
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

model JudicialDistrict {
  id                String            @id @default(cuid())
  name              String            @unique
  slug              String            @unique
  courtId           String
  court             Court             @relation(fields: [courtId], references: [id])
  stateId           String
  state             State             @relation(fields: [stateId], references: [id])
  zipCode           String?
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model JudicialBranch {
  id                  String             @id @default(cuid())
  name                String             @unique
  slug                String             @unique
  districtId          String
  district            JudicialDistrict   @relation(fields: [districtId], references: [id])
  contactName         String?
  phone               String?
  email               String?
  seller              Seller?
  judicialProcesses   JudicialProcess[]
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model JudicialProcess {
  id            String          @id @default(cuid())
  publicId      String          @unique @default(cuid())
  processNumber String          @unique
  isElectronic  Boolean         @default(true)
  courtId       String
  court         Court           @relation(fields: [courtId], references: [id])
  districtId    String
  district      JudicialDistrict @relation(fields: [districtId], references: [id])
  branchId      String
  branch        JudicialBranch  @relation(fields: [branchId], references: [id])
  sellerId      String?
  seller        Seller?         @relation(fields: [sellerId], references: [id])
  parties       JudicialParty[]
  bens          Bem[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model JudicialParty {
  id             String          @id @default(cuid())
  processId      String
  process        JudicialProcess @relation(fields: [processId], references: [id])
  name           String
  documentNumber String?
  partyType      String
}
