
// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. Enumerações (Tipos Personalizados)
// =================================================================

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

// =================================================================
// 2. Modelos de Entidades Principais
// =================================================================

model User {
  id                  String   @id @default(uuid())
  email               String   @unique
  password            String?
  fullName            String?
  roleId              String?
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType    @default(PHYSICAL)
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  cpf                 String?  @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  optInMarketing      Boolean  @default(false)
  razaoSocial         String?
  cnpj                String?  @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  
  seller              Seller?
  auctioneer          Auctioneer?
  documents           UserDocument[]
  bids                Bid[]
  maxBids             UserLotMaxBid[]
  roles               UsersOnRoles[]
  uploadedMedia       MediaItem[] @relation("UploadedBy")
  answeredQuestions   LotQuestion[] @relation("AnsweredByUser")
  questions           LotQuestion[] @relation("AskedByUser")
  wins                UserWin[]
  notifications       Notification[]

  @@index([email])
}

model Role {
  id              String   @id @default(uuid())
  name            String
  nameNormalized  String   @unique
  description     String?  @db.Text
  permissions     Json?
  users           UsersOnRoles[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}


model State {
  id              String   @id @default(uuid())
  name            String
  uf              String   @unique
  slug            String   @unique
  
  cities          City[]
  courts          Court[]
  judicialDistricts JudicialDistrict[]
  lots            Lot[]
  auctions        Auction[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model City {
  id          String   @id @default(uuid())
  name        String
  slug        String
  stateId     String
  stateUf     String
  ibgeCode    String?  @unique
  
  state       State    @relation(fields: [stateId], references: [id])
  auctions    Auction[]
  lots        Lot[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Bem {
  id                String  @id @default(uuid())
  publicId          String  @unique @default(uuid())
  title             String  @db.VarChar(200)
  description       String? @db.Text
  status            String  @default("DISPONIVEL")
  categoryId        String
  subcategoryId     String?
  judicialProcessId String?
  sellerId          String?
  evaluationValue   Decimal? @db.Decimal(15, 2)
  imageUrl          String?
  imageMediaId      String?
  galleryImageUrls  Json?
  mediaItemIds      Json?
  dataAiHint        String? @db.VarChar(100)
  locationCity      String?
  locationState     String?
  address           String?
  latitude          Decimal? @db.Decimal(10, 8)
  longitude         Decimal? @db.Decimal(11, 8)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  category          LotCategory      @relation(fields: [categoryId], references: [id])
  subcategory       Subcategory?     @relation(fields: [subcategoryId], references: [id])
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller            Seller?          @relation(fields: [sellerId], references: [id])
  lots              LotBens[]

  /// Veículos
  plate                 String?
  make                  String?
  model                 String?
  version               String?
  year                  Int?
  modelYear             Int?
  mileage               Int?
  color                 String?
  fuelType              String?
  transmissionType      String?
  bodyType              String?
  vin                   String?
  renavam               String?
  enginePower           String?
  numberOfDoors         Int?
  vehicleOptions        String?
  detranStatus          String?
  debts                 String?
  runningCondition      String?
  bodyCondition         String?
  tiresCondition        String?
  hasKey                Boolean?
  
  /// Imóveis
  propertyRegistrationNumber String?
  iptuNumber            String?
  isOccupied            Boolean?
  totalArea             Decimal?
  builtArea             Decimal?
  bedrooms              Int?
  suites                Int?
  bathrooms             Int?
  parkingSpaces         Int?
  constructionType      String?
  finishes              String?
  infrastructure        String?
  condoDetails          String?
  improvements          String?
  topography            String?
  liensAndEncumbrances  String?
  propertyDebts         String?
  unregisteredRecords   String?
  hasHabiteSe           Boolean?
  zoningRestrictions    String?
  amenities             Json?
  
  /// Eletrônicos
  brand                 String?
  serialNumber          String?
  itemCondition         String?
  specifications        String?
  includedAccessories   String?
  batteryCondition      String?
  hasInvoice            Boolean?
  hasWarranty           Boolean?
  repairHistory         String?
  
  /// Eletrodomésticos
  applianceCapacity     String?
  voltage               String?
  applianceType         String?
  additionalFunctions   String?
  
  /// Máquinas e Equipamentos
  hoursUsed             Int?
  engineType            String?
  capacityOrPower       String?
  maintenanceHistory    String?
  installationLocation  String?
  compliesWithNR        String?
  operatingLicenses     String?
  
  /// Semoventes (Livestock)
  breed                 String?
  age                   String?
  sex                   String?
  weight                String?
  individualId          String?
  purpose               String?
  sanitaryCondition     String?
  lineage               String?
  isPregnant            Boolean?
  specialSkills         String?
  gtaDocument           String?
  breedRegistryDocument String?

  /// Móveis
  furnitureType         String?
  material              String?
  style                 String?
  dimensions            String?
  pieceCount            Int?
  
  /// Joias
  jewelryType           String?
  metal                 String?
  gemstones             String?
  totalWeight           String?
  jewelrySize           String?
  authenticityCertificate String?
  
  /// Obras de Arte e Antiguidades
  workType              String?
  artist                String?
  period                String?
  technique             String?
  provenance            String?
  
  /// Embarcações
  boatType              String?
  boatLength            String?
  hullMaterial          String?
  onboardEquipment      String?
  
  /// Alimentos
  productName           String?
  quantity              String?
  packagingType         String?
  expirationDate        DateTime?
  storageConditions     String?
  
  /// Metais Preciosos e Pedras
  preciousMetalType     String?
  purity                String?
  
  /// Bens Florestais
  forestGoodsType       String?
  volumeOrQuantity      String?
  species               String?
  dofNumber             String?

}

model DirectSaleOffer {
  id                String  @id @default(uuid())
  publicId          String  @unique @default(uuid())
  title             String
  description       String? @db.Text
  offerType         DirectSaleOfferType
  price             Decimal? @db.Decimal(15, 2)
  minimumOfferPrice Decimal? @db.Decimal(15, 2)
  status            DirectSaleOfferStatus  @default(ACTIVE)
  categoryId        String
  sellerId          String
  sellerName        String
  sellerLogoUrl     String?
  dataAiHintSellerLogo String?
  locationCity      String?
  locationState     String?
  imageUrl          String?
  imageMediaId      String?
  dataAiHint        String?
  galleryImageUrls  Json?
  mediaItemIds      Json?
  itemsIncluded     Json?
  views             Int      @default(0)
  expiresAt         DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  category          LotCategory @relation(fields: [categoryId], references: [id])
  seller            Seller   @relation(fields: [sellerId], references: [id])
}


model Court {
  id                String   @id @default(uuid())
  name              String
  slug              String?  @unique
  stateId           String?
  stateUf           String?
  website           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  state             State?              @relation(fields: [stateId], references: [id])
  judicialProcesses JudicialProcess[]
  judicialDistricts JudicialDistrict[]
  auctions          Auction[]
}

model JudicialDistrict {
  id              String   @id @default(uuid())
  name            String
  slug            String?  @unique
  courtId         String?
  stateId         String?
  zipCode         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  court             Court?              @relation(fields: [courtId], references: [id])
  state             State?              @relation(fields: [stateId], references: [id])
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialBranch {
  id                String   @id @default(uuid())
  name              String
  slug              String?  @unique
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  sellers           Seller[]
}

model JudicialProcess {
  id               String   @id @default(uuid())
  publicId         String   @unique @default(uuid())
  processNumber    String
  isElectronic     Boolean  @default(true)
  courtId          String?
  districtId       String?
  branchId         String?
  sellerId         String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  court            Court?              @relation(fields: [courtId], references: [id])
  district         JudicialDistrict?   @relation(fields: [districtId], references: [id])
  branch           JudicialBranch?     @relation(fields: [branchId], references: [id])
  seller           Seller?             @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  bens             Bem[]
  parties          JudicialParty[]
  mediaItems       MediaItem[]
  auctions         Auction[]
}

model JudicialParty {
  id             String           @id @default(uuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  
  process        JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model AuctionHabilitation {
  userId     String
  auctionId  String
  habilitatedAt DateTime @default(now())
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction    Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@id([userId, auctionId])
}


model LotCategory {
  id                   String   @id @default(uuid())
  name                 String
  slug                 String   @unique
  description          String?  @db.Text
  hasSubcategories     Boolean
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  lots               Lot[]
  bens               Bem[]
  subcategories      Subcategory[]
  auctions           Auction[]
  directSaleOffers   DirectSaleOffer[]
}

model Subcategory {
  id                 String  @id @default(uuid())
  name               String
  slug               String?
  parentCategoryId   String
  description        String? @db.Text
  displayOrder       Int     @default(0)
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  
  parentCategory LotCategory @relation(fields: [parentCategoryId], references: [id])
  lots           Lot[]
  bens           Bem[]
}


model Seller {
  id                 String   @id @default(uuid())
  publicId           String?  @unique
  slug               String?  @unique
  name               String   @unique
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?  @db.Text
  isJudicial         Boolean  @default(false)
  userId             String?  @unique
  judicialBranchId   String?  @unique
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user               User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  judicialBranch     JudicialBranch?   @relation(fields: [judicialBranchId], references: [id])
  auctions           Auction[]
  lots               Lot[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
  judicialProcesses  JudicialProcess[]
}

model Auctioneer {
  id                 String   @id @default(uuid())
  publicId           String?  @unique
  slug               String?  @unique
  name               String
  registrationNumber String?
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?  @db.Text
  userId             String?  @unique
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  user               User?     @relation(fields: [userId], references: [id])
  auctions           Auction[]
  lots               Lot[]
}

model AuctionStage {
  id           String @id @default(uuid())
  auctionId    String
  name         String
  startDate    DateTime
  endDate      DateTime
  initialPrice Decimal? @db.Decimal(15, 2)
  statusText   String?

  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  lotStageDetails LotAuctionStageDetails[]

  @@index([auctionId])
}

model LotAuctionStageDetails {
  id String @id @default(uuid())
  lotId String
  auctionStageId String
  initialBid Decimal? @db.Decimal(15, 2)
  bidIncrement Decimal? @db.Decimal(15, 2)
  evaluationValue Decimal? @comment("Valor de avaliação específico para esta praça") @db.Decimal(15, 2)

  lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionStage AuctionStage @relation(fields: [auctionStageId], references: [id], onDelete: Cascade)

  @@unique([lotId, auctionStageId])
}


model LotBens {
  lotId String
  bemId String

  lot   Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bem   Bem  @relation(fields: [bemId], references: [id], onDelete: Cascade)

  @@id([lotId, bemId])
}

model Auction {
  id                   String @id @default(uuid())
  publicId             String?  @unique
  slug                 String?  @unique
  title                String
  description          String?  @db.Text
  
  // Settings
  auctionType          AuctionType?
  auctionMethod        AuctionMethod?
  participation        AuctionParticipation?
  status               String?   @default("RASCUNHO")
  
  // Dates
  auctionDate          DateTime?
  endDate              DateTime?
  
  // Relations
  auctioneerId         String?
  sellerId             String?
  categoryId           String?
  judicialProcessId    String?
  courtId              String?
  districtId           String?
  branchId             String?
  cityId               String?
  stateId              String?
  
  // Display Info
  imageUrl             String?
  imageMediaId         String?
  documentsUrl         String?
  onlineUrl            String?
  address              String?
  zipCode              String?

  // Stats
  visits               Int?     @default(0)
  totalLots            Int?     @default(0)
  estimatedRevenue     Decimal?
  achievedRevenue      Decimal?
  totalHabilitatedUsers Int?    @default(0)
  
  // Features
  isFeaturedOnMarketplace          Boolean  @default(false)
  marketplaceAnnouncementTitle     String?
  automaticBiddingEnabled          Boolean  @default(false)
  allowInstallmentBids             Boolean  @default(true)
  silentBiddingEnabled             Boolean  @default(false)
  allowMultipleBidsPerUser         Boolean  @default(true)
  softCloseEnabled                 Boolean  @default(false)
  softCloseMinutes                 Int      @default(2)

  /// Dutch Auction Specific
  decrementAmount                  Decimal?
  decrementIntervalSeconds         Int?
  floorPrice                       Decimal?
  
  autoRelistSettings             Json?
  
  // Timestamps
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relations
  auctioneer           Auctioneer?       @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  seller               Seller?           @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  category             LotCategory?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  judicialProcess      JudicialProcess?  @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  court                Court?            @relation(fields: [courtId], references: [id], onDelete: SetNull)
  district             JudicialDistrict? @relation(fields: [districtId], references: [id], onDelete: SetNull)
  branch               JudicialBranch?   @relation(fields: [branchId], references: [id], onDelete: SetNull)
  city                 City?             @relation(fields: [cityId], references: [id])
  state                State?            @relation(fields: [stateId], references: [id])

  lots                 Lot[]
  bids                 Bid[]
  auctionStages        AuctionStage[]
  habilitations        AuctionHabilitation[]
  questions            LotQuestion[]
}

model Lot {
  id                         String   @id @default(uuid())
  publicId                   String?  @unique
  auctionId                  String
  slug                       String?
  number                     String?
  title                      String
  description                String?  @db.Text
  price                      Decimal  @db.Decimal(15, 2)
  status                     String   @default("EM_BREVE")
  
  // Stats
  bidsCount                  Int      @default(0)
  views                      Int      @default(0)
  
  // Features
  isFeatured                 Boolean  @default(false)
  isExclusive                Boolean  @default(false)
  discountPercentage         Int?
  allowInstallmentBids       Boolean  @default(false)
  
  // Media
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  inheritedMediaFromBemId    String? // ID do Bem principal para herdar mídia
  
  // Categorization
  type                       String
  categoryId                 String?
  subcategoryId              String?
  
  // Denormalized/Display
  auctionName                String?
  sellerName                 String?
  
  // Relations
  sellerId                   String?
  auctioneerId               String?
  cityId                     String?
  stateId                    String?
  
  // Location
  cityName                   String?
  stateUf                    String?
  latitude                   Decimal? @db.Decimal(10, 8)
  longitude                  Decimal? @db.Decimal(11, 8)
  mapAddress                 String?
  mapEmbedUrl                String?  @db.VarChar(500)
  mapStaticImageUrl          String?
  
  // Dates
  endDate                    DateTime?
  lotSpecificAuctionDate     DateTime?
  
  // Misc
  condition                  String?
  dataAiHint                 String?
  
  // Post-Auction
  winnerId                   String?
  winningBidTermUrl          String?
  
  // Timestamps
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  
  // Relations
  auction                    Auction        @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                   LotCategory?   @relation(fields: [categoryId], references: [id])
  subcategory                Subcategory?   @relation(fields: [subcategoryId], references: [id])
  seller                     Seller?        @relation(fields: [sellerId], references: [id])
  auctioneer                 Auctioneer?    @relation(fields: [auctioneerId], references: [id])
  city                       City?          @relation(fields: [cityId], references: [id])
  state                      State?         @relation(fields: [stateId], references: [id])
  winner                     User?          @relation(fields: [winnerId], references: [id], onDelete: SetNull)

  bens                       LotBens[]
  bids                       Bid[]
  maxBids                    UserLotMaxBid[]
  questions                  LotQuestion[]
  win                        UserWin?
  stageDetails               LotAuctionStageDetails[]

  @@index([auctionId])
}

model Bid {
  id            String   @id @default(uuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())

  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder    User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id                 String   @id @default(uuid())
  lotId              String   @unique
  userId             String
  winningBidAmount   Decimal  @db.Decimal(15, 2)
  winDate            DateTime @default(now())
  paymentStatus      PaymentStatus
  invoiceUrl         String?
  
  lot                Lot      @relation(fields: [lotId], references: [id])
  user               User     @relation(fields: [userId], references: [id])
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lotId])
}

model Review {
  id              String   @id @default(uuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String?
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())
}

model LotQuestion {
  id                        String   @id @default(uuid())
  lotId                     String
  auctionId                 String
  userId                    String
  userDisplayName           String?
  questionText              String   @db.Text
  isPublic                  Boolean  @default(true)
  answerText                String?  @db.Text
  answeredByUserId          String?
  answeredByUserDisplayName String?
  answeredAt                DateTime?
  createdAt                 DateTime @default(now())

  lot       Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction   Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user      User   @relation("AskedByUser", fields: [userId], references: [id], onDelete: Cascade)
  answeredBy User?  @relation("AnsweredByUser", fields: [answeredByUserId], references: [id], onDelete: SetNull)
}


model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MediaItem {
  id                   String   @id @default(uuid())
  fileName             String
  storagePath          String
  title                String?
  altText              String?
  caption              String?
  description          String?  @db.Text
  mimeType             String
  sizeBytes            Int?
  urlOriginal          String
  urlThumbnail         String?
  urlMedium            String?
  urlLarge             String?
  linkedLotIds         Json?
  judicialProcessId    String?
  dataAiHint           String?
  uploadedAt           DateTime @default(now())
  uploadedByUserId     String

  uploadedBy           User     @relation("UploadedBy", fields: [uploadedByUserId], references: [id])
  judicialProcess      JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
}

model UserDocument {
  id                String   @id @default(uuid())
  userId            String
  documentTypeId    String
  status            UserDocumentStatus @default(NOT_SENT)
  fileUrl           String
  fileName          String?
  rejectionReason   String? @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType      DocumentType  @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id          String   @id @default(uuid())
  name        String
  description String?  @db.Text
  isRequired  Boolean  @default(true)
  /// Comma-separated: PHYSICAL,LEGAL,ALL,PROCESS
  appliesTo   String? 
  
  userDocuments UserDocument[]
}

model DocumentTemplate {
  id        String   @id @default(uuid())
  name      String
  type      DocumentTemplateType
  content   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id        String @id @default(uuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}


model VehicleMake {
    id    String  @id @default(uuid())
    name  String  @unique
    slug  String  @unique
    models VehicleModel[]
}

model VehicleModel {
    id    String  @id @default(uuid())
    name  String
    slug  String?
    makeId String
    
    make VehicleMake @relation(fields: [makeId], references: [id])

    @@unique([name, makeId])
}


model PlatformSettings {
  id                             String @id @default("global")
  siteTitle                      String?
  siteTagline                    String?
  logoUrl                        String?
  faviconUrl                     String?
  galleryImageBasePath           String
  storageProvider                String?
  firebaseStorageBucket          String?
  activeThemeName                String?
  themes                         Json?
  platformPublicIdMasks          Json?
  homepageSections               Json?
  mentalTriggerSettings          Json?
  sectionBadgeVisibility         Json?
  mapSettings                    Json?
  paymentGatewaySettings         Json?
  searchPaginationType           String?
  searchItemsPerPage             Int?
  searchLoadMoreCount            Int?
  showCountdownOnLotDetail       Boolean?
  showCountdownOnCards           Boolean?
  showRelatedLotsOnLotDetail     Boolean?
  relatedLotsCount               Int?
  defaultUrgencyTimerHours       Int?
  variableIncrementTable         Json?
  biddingSettings                Json?
  defaultListItemsPerPage        Int?
  updatedAt                      DateTime @updatedAt
}


