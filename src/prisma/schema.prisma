// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. TABELAS COM NENHUMA OU POUCAS DEPENDÊNCIAS (BASE)
// =================================================================

model PlatformSettings {
  id                            String    @id @default("global")
  siteTitle                     String?
  siteTagline                   String?   @db.VarChar(200)
  logoUrl                       String?
  faviconUrl                    String?
  galleryImageBasePath          String?   @db.VarChar(200)
  storageProvider               String?   @db.VarChar(50)
  firebaseStorageBucket         String?   @db.VarChar(200)
  activeThemeName               String?   @db.VarChar(100)
  themes                        Json?
  platformPublicIdMasks         Json?
  homepageSections              Json?
  mentalTriggerSettings         Json?
  sectionBadgeVisibility        Json?
  mapSettings                   Json?
  searchPaginationType          String?   @db.VarChar(50)
  searchItemsPerPage            Int?
  searchLoadMoreCount           Int?
  showCountdownOnLotDetail      Boolean?
  showCountdownOnCards          Boolean?
  showRelatedLotsOnLotDetail    Boolean?
  relatedLotsCount              Int?
  defaultUrgencyTimerHours      Int?
  variableIncrementTable        Json?
  biddingSettings               Json?
  defaultListItemsPerPage       Int?
  updatedAt                     DateTime? @updatedAt
}

model Role {
  id            String          @id @default(cuid())
  name          String
  nameNormalized String         @unique
  description   String?
  permissions   Json?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  users         UsersOnRoles[]
}

model State {
  id                String              @id @default(cuid())
  name              String
  uf                String              @unique @db.VarChar(2)
  slug              String              @unique
  cityCount         Int?                @default(0)
  cities            City[]
  judicialDistricts JudicialDistrict[]
  lots              Lot[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model LotCategory {
  id                      String          @id @default(cuid())
  name                    String          @unique
  slug                    String          @unique
  description             String?         @db.VarChar(500)
  hasSubcategories        Boolean         @default(false)
  iconName                String?
  logoUrl                 String?
  logoMediaId             String?         @unique
  dataAiHintIcon          String?
  coverImageUrl           String?
  coverImageMediaId       String?         @unique
  dataAiHintCover         String?
  megaMenuImageUrl        String?
  megaMenuImageMediaId    String?         @unique
  dataAiHintMegaMenu      String?
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  subcategories           Subcategory[]
  auctions                Auction[]
  lots                    Lot[]
  bens                    Bem[]
  logo                    MediaItem?      @relation("CategoryLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  coverImage              MediaItem?      @relation("CategoryCover", fields: [coverImageMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  megaMenuImage           MediaItem?      @relation("CategoryMegaMenu", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model DocumentTemplate {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(150)
  type      String   @db.VarChar(50)
  content   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(150)
  email     String   @db.VarChar(150)
  subject   String?  @db.VarChar(255)
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentType {
  id          String         @id @default(cuid())
  name        String         @db.VarChar(150)
  description String?        @db.VarChar(255)
  isRequired  Boolean        @default(true)
  appliesTo   String?        @db.VarChar(50) // e.g., 'PHYSICAL', 'LEGAL', 'ALL'
  userDocs    UserDocument[]
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// =================================================================
// 2. TABELAS COM UM NÍVEL DE DEPENDÊNCIA
// =================================================================

model User {
  id                    String                @id @default(cuid())
  email                 String                @unique
  password              String?
  fullName              String?
  habilitationStatus    String                @default("PENDING_DOCUMENTS")
  accountType           String                @default("PHYSICAL")
  avatarUrl             String?
  dataAiHint            String?
  badges                Json?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  roles                 UsersOnRoles[]
  seller                Seller?
  auctioneer            Auctioneer?
  uploadedMedia         MediaItem[]
  documents             UserDocument[]
  bids                  Bid[]
  wins                  UserWin[]
  questions             LotQuestion[]
  maxBids               UserLotMaxBid[]
  habilitations         AuctionHabilitation[]
  notifications         Notification[]
  lotsWon               Lot[]                 @relation("Winner")
}

model City {
  id        String    @id @default(cuid())
  name      String
  slug      String?
  stateId   String
  stateUf   String?
  ibgeCode  String?   @unique
  lotCount  Int?      @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  state     State     @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots      Lot[]
}

model Subcategory {
  id                 String      @id @default(cuid())
  name               String
  slug               String?
  parentCategoryId   String
  description        String?     @db.VarChar(500)
  displayOrder       Int?        @default(0)
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots               Lot[]
  bens               Bem[]
}

model Court {
  id                String             @id @default(cuid())
  name              String
  slug              String?
  stateUf           String?            @db.VarChar(2)
  website           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
}

// =================================================================
// 3. TABELAS COM DOIS OU MAIS NÍVEIS DE DEPENDÊNCIA
// =================================================================

model JudicialDistrict {
  id                String             @id @default(cuid())
  name              String
  slug              String             @unique
  courtId           String?
  stateId           String?
  zipCode           String?            @db.VarChar(10)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  court             Court?             @relation(fields: [courtId], references: [id])
  state             State?             @relation(fields: [stateId], references: [id])
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
}

model JudicialBranch {
  id                String             @id @default(cuid())
  name              String
  slug              String             @unique
  districtId        String?
  contactName       String?            @db.VarChar(150)
  phone             String?            @db.VarChar(20)
  email             String?            @db.VarChar(150)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  seller            Seller?
  judicialProcesses JudicialProcess[]
}

model Seller {
  id                 String             @id @default(cuid())
  publicId           String             @unique
  slug               String             @unique
  name               String             @unique
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?            @unique
  dataAiHintLogo     String?
  description        String?            @db.Text
  userId             String?            @unique
  isJudicial         Boolean            @default(false)
  judicialBranchId   String?            @unique
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  user               User?              @relation(fields: [userId], references: [id])
  logo               MediaItem?         @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  judicialBranch     JudicialBranch?    @relation(fields: [judicialBranchId], references: [id])
  auctions           Auction[]
  bens               Bem[]
  judicialProcesses  JudicialProcess[]
  directSaleOffers   DirectSaleOffer[]
}

model Auctioneer {
  id                  String    @id @default(cuid())
  publicId            String    @unique
  slug                String    @unique
  name                String
  registrationNumber  String?
  contactName         String?
  email               String?
  phone               String?
  address             String?
  city                String?
  state               String?
  zipCode             String?
  website             String?
  logoUrl             String?
  logoMediaId         String?   @unique
  dataAiHintLogo      String?
  description         String?   @db.Text
  userId              String?   @unique
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  user                User?     @relation(fields: [userId], references: [id])
  auctions            Auction[]
  logo                MediaItem? @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model JudicialProcess {
  id              String           @id @default(cuid())
  publicId        String           @unique
  processNumber   String
  isElectronic    Boolean          @default(true)
  courtId         String?
  districtId      String?
  branchId        String?
  sellerId        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  court           Court?           @relation(fields: [courtId], references: [id])
  district        JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch          JudicialBranch?  @relation(fields: [branchId], references: [id])
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  bens            Bem[]
  parties         JudicialParty[]
}

model JudicialParty {
  id              String          @id @default(cuid())
  processId       String
  name            String
  documentNumber  String?
  partyType       String
  process         JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model Bem {
  id                         String         @id @default(cuid())
  publicId                   String         @unique
  title                      String         @db.VarChar(200)
  description                String?        @db.Text
  status                     String         @default("DISPONIVEL")
  categoryId                 String?
  subcategoryId              String?
  judicialProcessId          String?
  sellerId                   String?
  evaluationValue            Decimal?       @db.Decimal(15, 2)
  imageUrl                   String?
  imageMediaId               String?        @unique
  galleryImageUrls           Json?
  mediaItemIds               Json?
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Decimal?       @db.Decimal(10, 8)
  longitude                  Decimal?       @db.Decimal(11, 8)
  createdAt                  DateTime       @default(now())
  updatedAt                  DateTime       @updatedAt
  category                   LotCategory?   @relation(fields: [categoryId], references: [id])
  subcategory                Subcategory?   @relation(fields: [subcategoryId], references: [id])
  judicialProcess            JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller                     Seller?        @relation(fields: [sellerId], references: [id])
  image                      MediaItem?     @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  lots                       LotBens[]
}

model AuctionHabilitation {
  userId     String
  auctionId  String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction    Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  @@id([userId, auctionId])
}

model Auction {
  id                            String                @id @default(cuid())
  publicId                      String                @unique
  slug                          String                @unique
  title                         String                @db.VarChar(255)
  description                   String?               @db.Text
  status                        String                @default("RASCUNHO")
  auctionDate                   DateTime
  endDate                       DateTime?
  auctioneerId                  String?
  sellerId                      String?
  categoryId                    String?
  auctionType                   String?
  imageUrl                      String?
  imageMediaId                  String?               @unique
  documentsUrl                  String?
  visits                        Int?                  @default(0)
  totalLots                     Int?                  @default(0)
  initialOffer                  Decimal?              @db.Decimal(15, 2)
  isFavorite                    Boolean?              @default(false)
  dataAiHint                    String?
  allowInstallmentBids          Boolean               @default(false)
  isFeaturedOnMarketplace       Boolean               @default(false)
  marketplaceAnnouncementTitle  String?
  automaticBiddingEnabled       Boolean               @default(false)
  softCloseEnabled              Boolean               @default(false)
  softCloseMinutes              Int?
  estimatedRevenue              Decimal?              @db.Decimal(15, 2)
  achievedRevenue               Decimal?              @db.Decimal(15, 2)
  totalHabilitatedUsers         Int?                  @default(0)
  evaluationReportUrl           String?
  auctionCertificateUrl         String?
  silentBiddingEnabled          Boolean               @default(false)
  allowMultipleBidsPerUser      Boolean               @default(true)
  sellingBranch                 String?
  judicialProcessId             String?
  mapAddress                    String?
  createdAt                     DateTime              @default(now())
  updatedAt                     DateTime              @updatedAt
  additionalTriggers            Json?
  autoRelistSettings            Json?
  decrementAmount               Decimal?              @db.Decimal(15, 2)
  decrementIntervalSeconds      Int?
  floorPrice                    Decimal?              @db.Decimal(15, 2)
  lots                          Lot[]
  bids                          Bid[]
  auctioneer                    Auctioneer?           @relation(fields: [auctioneerId], references: [id])
  seller                        Seller?               @relation(fields: [sellerId], references: [id])
  category                      LotCategory?          @relation(fields: [categoryId], references: [id])
  image                         MediaItem?            @relation("AuctionImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  auctionStages                 AuctionStage[]
  habilitatedUsers              AuctionHabilitation[]
}

model AuctionStage {
  id           String   @id @default(cuid())
  auctionId    String
  name         String
  endDate      DateTime
  initialPrice Decimal? @db.Decimal(15, 2)
  statusText   String?
  auction      Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}

model Lot {
  id                          String          @id @default(cuid())
  publicId                    String          @unique
  auctionId                   String
  slug                        String?
  number                      String?
  title                       String          @db.VarChar(255)
  description                 String?         @db.Text
  price                       Decimal         @db.Decimal(15, 2)
  initialPrice                Decimal?        @db.Decimal(15, 2)
  secondInitialPrice          Decimal?        @db.Decimal(15, 2)
  bidIncrementStep            Decimal?        @db.Decimal(10, 2)
  status                      String          @default("EM_BREVE")
  bidsCount                   Int?            @default(0)
  views                       Int?            @default(0)
  isFeatured                  Boolean?        @default(false)
  isExclusive                 Boolean?        @default(false)
  discountPercentage          Int?
  additionalTriggers          Json?
  imageUrl                    String?
  imageMediaId                String?         @unique
  galleryImageUrls            Json?
  mediaItemIds                Json?
  type                        String
  categoryId                  String?
  subcategoryId               String?
  auctionName                 String?
  sellerId                    String?
  sellerName                  String?
  auctioneerId                String?
  cityId                      String?
  stateId                     String?
  cityName                    String?
  stateUf                     String?
  latitude                    Decimal?        @db.Decimal(10, 8)
  longitude                   Decimal?        @db.Decimal(11, 8)
  mapAddress                  String?
  mapEmbedUrl                 String?         @db.VarChar(500)
  mapStaticImageUrl           String?
  endDate                     DateTime?
  auctionDate                 DateTime?
  lotSpecificAuctionDate      DateTime?
  secondAuctionDate           DateTime?
  condition                   String?
  dataAiHint                  String?
  winnerId                    String?
  winningBidTermUrl           String?
  allowInstallmentBids        Boolean?        @default(false)
  createdAt                   DateTime        @default(now())
  updatedAt                   DateTime        @updatedAt
  bens                        LotBens[]
  bids                        Bid[]
  auction                     Auction         @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                    LotCategory?    @relation(fields: [categoryId], references: [id])
  subcategory                 Subcategory?    @relation(fields: [subcategoryId], references: [id])
  seller                      Seller?         @relation(fields: [sellerId], references: [id])
  city                        City?           @relation(fields: [cityId], references: [id])
  state                       State?          @relation(fields: [stateId], references: [id])
  image                       MediaItem?      @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  winner                      User?           @relation("Winner", fields: [winnerId], references: [id], onDelete: SetNull)
  win                         UserWin?
  maxBids                     UserLotMaxBid[]
  reviews                     Review[]
  questions                   LotQuestion[]
}

model LotBens {
  lotId String
  bemId String
  lot   Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bem   Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)

  @@id([lotId, bemId])
}

model MediaItem {
  id                 String            @id @default(cuid())
  fileName           String
  storagePath        String
  title              String?
  altText            String?
  caption            String?           @db.VarChar(500)
  description        String?           @db.Text
  mimeType           String
  sizeBytes          Int?
  urlOriginal        String
  urlThumbnail       String?
  urlMedium          String?
  urlLarge           String?
  linkedLotIds       Json?
  dataAiHint         String?
  uploadedBy         String
  uploadedAt         DateTime          @default(now())
  user               User?             @relation(fields: [uploadedBy], references: [id])
  Auctions           Auction[]         @relation("AuctionImage")
  Lots               Lot[]             @relation("LotImage")
  Bens               Bem[]             @relation("BemImage")
  Sellers            Seller[]          @relation("SellerLogo")
  Auctioneers        Auctioneer[]      @relation("AuctioneerLogo")
  LotCategoriesLogo  LotCategory[]     @relation("CategoryLogo")
  LotCategoriesCover LotCategory[]     @relation("CategoryCover")
  LotCategoriesMega  LotCategory[]     @relation("CategoryMegaMenu")
  DirectSaleOffers   DirectSaleOffer[] @relation("DirectSaleOfferImage")
}

model DirectSaleOffer {
  id                   String            @id @default(cuid())
  publicId             String?           @unique
  title                String            @db.VarChar(255)
  description          String?           @db.Text
  offerType            String?           @db.VarChar(50)
  price                Decimal?          @db.Decimal(15, 2)
  minimumOfferPrice    Decimal?          @db.Decimal(15, 2)
  status               String?           @default("ACTIVE") @db.VarChar(50)
  category             String?           @db.VarChar(100)
  sellerId             String?
  sellerName           String?           @db.VarChar(150)
  sellerLogoUrl        String?           @db.VarChar(255)
  dataAiHintSellerLogo String?           @db.VarChar(100)
  locationCity         String?           @db.VarChar(100)
  locationState        String?           @db.VarChar(100)
  imageUrl             String?           @db.VarChar(255)
  imageMediaId         String?           @unique
  dataAiHint           String?           @db.VarChar(100)
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int?              @default(0)
  expiresAt            DateTime?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  seller               Seller?           @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  image                MediaItem?        @relation("DirectSaleOfferImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model UserDocument {
  id              String       @id @default(cuid())
  userId          String
  documentTypeId  String
  status          String       @default("PENDING")
  fileUrl         String
  fileName        String?
  rejectionReason String?      @db.Text
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String   @id @default(cuid())
  lotId            String   @unique
  userId           String
  winningBidAmount Decimal  @db.Decimal(15, 2)
  winDate          DateTime
  paymentStatus    String
  invoiceUrl       String?
  user             User     @relation(fields: [userId], references: [id])
  lot              Lot      @relation(fields: [lotId], references: [id])
}

model Review {
    id String @id @default(cuid())
    lotId String
    auctionId String
    userId String
    userDisplayName String
    rating Int @db.TinyInt
    comment String? @db.Text
    createdAt DateTime @default(now())

    lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LotQuestion {
    id String @id @default(cuid())
    lotId String
    auctionId String
    userId String
    userDisplayName String
    questionText String @db.Text
    isPublic Boolean @default(true)
    createdAt DateTime @default(now())

    answerText String? @db.Text
    answeredAt DateTime?
    answeredByUserId String?
    answeredByUserDisplayName String?

    lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model UsersOnRoles {
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}
