// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// =================================================================
// 1. Enumerações (Enums)
// =================================================================

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD // Leilão Inglês (crescente)
  DUTCH // Leilão Holandês (decrescente)
  SILENT // Leilão Silencioso (lances fechados)
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
  RELISTADO // Novo status
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO // Novo status
  CANCELADO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  REJECTED_DOCUMENTS
  HABILITADO
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}


// =================================================================
// 2. Modelos Base (Sem muitas dependências)
// =================================================================

model PlatformSettings {
  id                         String   @id @default("global")
  siteTitle                  String?
  siteTagline                String?
  logoUrl                    String?
  faviconUrl                 String?
  galleryImageBasePath       String
  storageProvider            String   @default("local") // 'local' or 'firebase'
  firebaseStorageBucket      String?
  activeThemeName            String?
  themes                     Json? // JSON array of theme objects
  platformPublicIdMasks      Json?
  homepageSections           Json?
  mentalTriggerSettings      Json?
  sectionBadgeVisibility     Json?
  mapSettings                Json?
  searchPaginationType       String   @default("loadMore")
  searchItemsPerPage         Int      @default(12)
  searchLoadMoreCount        Int      @default(12)
  showCountdownOnLotDetail   Boolean  @default(true)
  showCountdownOnCards       Boolean  @default(true)
  showRelatedLotsOnLotDetail Boolean  @default(true)
  relatedLotsCount           Int      @default(5)
  defaultUrgencyTimerHours   Int?
  variableIncrementTable     Json?
  biddingSettings            Json?
  paymentGatewaySettings     Json?
  defaultListItemsPerPage    Int      @default(10)
  updatedAt                  DateTime @updatedAt
}

model Role {
  id              String         @id @default(uuid())
  name            String         @unique
  nameNormalized  String         @unique
  description     String?        @db.Text
  permissions     Json? // Array of strings
  users           UsersOnRoles[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String // e.g., 'system', 'admin-user-id'

  @@id([userId, roleId])
}

model State {
  id              String             @id @default(uuid())
  name            String
  uf              String             @unique
  slug            String?            @unique
  cities          City[]
  courts          Court[]
  judicialDistricts JudicialDistrict[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model LotCategory {
  id                 String             @id @default(uuid())
  name               String             @unique
  slug               String             @unique
  description        String?            @db.Text
  hasSubcategories   Boolean
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  coverImageUrl      String?
  coverImageMediaId  String?
  dataAiHintCover    String?
  megaMenuImageUrl   String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu String?
  iconName           String?
  auctions           Auction[]
  lots               Lot[]
  bens               Bem[]
  subcategories      Subcategory[]
  directSaleOffers   DirectSaleOffer[] // Back-relation added
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model Subcategory {
  id                 String      @id @default(uuid())
  name               String
  slug               String?
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  parentCategoryId   String
  description        String?     @db.Text
  displayOrder       Int         @default(0)
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  lots               Lot[]
  bens               Bem[]
}

model DocumentType {
  id          String         @id @default(uuid())
  name        String
  description String?
  isRequired  Boolean        @default(true)
  appliesTo   String?
  userDocs    UserDocument[]
}

model ContactMessage {
  id      String   @id @default(uuid())
  name    String
  email   String
  subject String
  message String   @db.Text
  isRead  Boolean  @default(false)
  createdAt DateTime @default(now())
}

// =================================================================
// 3. Modelos com Dependências
// =================================================================

model City {
  id      String    @id @default(uuid())
  name    String
  slug    String?
  state   State     @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId String
  stateUf String?
  ibgeCode String?   @unique
  auctions Auction[]
  lots    Lot[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Court {
  id                String             @id @default(uuid())
  name              String
  slug              String?
  state             State?             @relation(fields: [stateId], references: [id])
  stateId           String?
  stateUf           String?
  website           String?
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model User {
  id                   String                  @id @default(uuid())
  email                String                  @unique
  password             String?
  fullName             String?
  roles                UsersOnRoles[]
  sellerProfile        Seller?                 @relation("UserSeller")
  auctioneerProfile    Auctioneer?             @relation("UserAuctioneer")
  habilitationStatus   UserHabilitationStatus  @default(PENDING_DOCUMENTS)
  accountType          AccountType             @default(PHYSICAL)
  avatarUrl            String?
  dataAiHint           String?
  badges               Json?
  documents            UserDocument[]
  bids                 Bid[]
  wins                 UserWin[]
  maxBids              UserLotMaxBid[]
  notifications        Notification[]
  mediaItems           MediaItem[]
  habilitations        AuctionHabilitation[]
  
  // Detalhes PF
  cpf                  String?
  rgNumber             String?
  rgIssuer             String?
  rgIssueDate          DateTime?
  rgState              String?
  dateOfBirth          DateTime?
  homePhone            String?
  cellPhone            String?
  gender               String?
  profession           String?
  nationality          String?
  maritalStatus        String?
  propertyRegime       String?
  spouseName           String?
  spouseCpf            String?
  
  // Detalhes PJ
  razaoSocial          String?
  cnpj                 String?
  inscricaoEstadual    String?
  website              String?
  responsibleName      String?
  responsibleCpf       String?
  
  // Endereço (comum)
  zipCode              String?
  street               String?
  number               String?
  complement           String?
  neighborhood         String?
  city                 String?
  state                String?
  
  // Preferências
  optInMarketing       Boolean?                @default(false)
  
  // Timestamps
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
}

model UserDocument {
  id              String             @id @default(uuid())
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  documentType    DocumentType       @relation(fields: [documentTypeId], references: [id])
  documentTypeId  String
  status          UserDocumentStatus @default(PENDING_ANALYSIS)
  fileUrl         String
  fileName        String?
  rejectionReason String?            @db.Text
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@unique([userId, documentTypeId])
}

model JudicialDistrict {
  id         String             @id @default(uuid())
  name       String
  slug       String?            @unique
  court      Court?             @relation(fields: [courtId], references: [id])
  courtId    String?
  state      State?             @relation(fields: [stateId], references: [id])
  stateId    String?
  zipCode    String?
  branches   JudicialBranch[]
  processes  JudicialProcess[]
  auctions   Auction[]
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
}

model JudicialBranch {
  id                String             @id @default(uuid())
  name              String
  slug              String?            @unique
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  processes         JudicialProcess[]
  auctions          Auction[]
  sellers           Seller[]           @relation("JudicialBranchSellers")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Seller {
  id                        String              @id @default(uuid())
  publicId                  String?             @unique
  slug                      String?             @unique
  name                      String              @unique
  contactName               String?
  email                     String?
  phone                     String?
  address                   String?
  city                      String?
  state                     String?
  zipCode                   String?
  website                   String?
  logoUrl                   String?
  logoMediaId               String?
  dataAiHintLogo            String?
  description               String?             @db.Text
  user                      User?               @relation("UserSeller", fields: [userId], references: [id], onDelete: SetNull)
  userId                    String?             @unique
  isJudicial                Boolean             @default(false)
  judicialBranch            JudicialBranch?     @relation("JudicialBranchSellers", fields: [judicialBranchId], references: [id], onDelete: SetNull)
  judicialBranchId          String?             @unique
  auctions                  Auction[]
  lots                      Lot[]
  bens                      Bem[]
  directSaleOffers          DirectSaleOffer[]
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
}

model Auctioneer {
  id                 String    @id @default(uuid())
  publicId           String?   @unique
  slug               String?   @unique
  name               String
  registrationNumber String?
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?   @db.Text
  user               User?     @relation("UserAuctioneer", fields: [userId], references: [id], onDelete: SetNull)
  userId             String?   @unique
  auctions           Auction[]
  lots               Lot[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}


model JudicialProcess {
  id                String       @id @default(uuid())
  publicId          String?      @unique
  processNumber     String       @unique
  isElectronic      Boolean      @default(true)
  court             Court?       @relation(fields: [courtId], references: [id])
  courtId           String?
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  districtId        String?
  branch            JudicialBranch?   @relation(fields: [branchId], references: [id])
  branchId          String?
  seller            Seller?      @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId          String?
  parties           JudicialParty[]
  bens              Bem[]
  auctions          Auction[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}


model DirectSaleOffer {
  id                   String                @id @default(uuid())
  publicId             String?               @unique
  title                String
  description          String?               @db.Text
  offerType            DirectSaleOfferType
  price                Decimal?              @db.Decimal(15, 2)
  minimumOfferPrice    Decimal?              @db.Decimal(15, 2)
  status               DirectSaleOfferStatus @default(ACTIVE)
  category             LotCategory           @relation(fields: [categoryId], references: [id])
  categoryId           String
  seller               Seller                @relation(fields: [sellerId], references: [id])
  sellerId             String
  sellerName           String?
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int                   @default(0)
  expiresAt            DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model DocumentTemplate {
  id      String               @id @default(uuid())
  name    String
  type    DocumentTemplateType
  content String               @db.Text
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}


model AuctionHabilitation {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId String
  status    String   @default("APPROVED") // Pode expandir para PENDING, APPROVED, REJECTED
  createdAt DateTime @default(now())

  @@unique([userId, auctionId])
}


model Bem {
  id                         String    @id @default(uuid())
  publicId                   String?   @unique
  title                      String
  description                String?   @db.Text
  status                     BemStatus @default(DISPONIVEL)
  category                   LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId                 String?
  subcategory                Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId              String?
  judicialProcess            JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId          String?
  seller                     Seller?   @relation(fields: [sellerId], references: [id])
  sellerId                   String?
  evaluationValue            Decimal?  @db.Decimal(15, 2)
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  
  // Veículos
  plate                      String?
  make                       String?
  model                      String?
  version                    String?
  year                       Int?
  modelYear                  Int?
  mileage                    Int?
  color                      String?
  fuelType                   String?
  transmissionType           String?
  bodyType                   String?
  vin                        String?
  renavam                    String?
  enginePower                String?
  numberOfDoors              Int?
  vehicleOptions             String?   @db.Text
  detranStatus               String?
  debts                      String?   @db.Text
  runningCondition           String?
  bodyCondition              String?
  tiresCondition             String?
  hasKey                     Boolean?

  // Imóveis
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Decimal?  @db.Decimal(15, 2)
  builtArea                  Decimal?  @db.Decimal(15, 2)
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?   @db.Text
  infrastructure             String?   @db.Text
  condoDetails               String?   @db.Text
  improvements               String?   @db.Text
  topography                 String?
  liensAndEncumbrances       String?   @db.Text
  propertyDebts              String?   @db.Text
  unregisteredRecords        String?   @db.Text
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  amenities                  Json?
  
  // Eletrônicos
  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String?   @db.Text
  includedAccessories        String?   @db.Text
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String?   @db.Text
  
  // Eletrodomésticos
  applianceCapacity          String?
  voltage                    String?
  applianceType              String?
  additionalFunctions        String?
  
  // Máquinas e Equipamentos
  hoursUsed                  Int?
  engineType                 String?
  capacityOrPower            String?
  maintenanceHistory         String?   @db.Text
  installationLocation       String?
  compliesWithNR             String?
  operatingLicenses          String?
  
  // Semoventes
  breed                      String?
  age                        String?
  sex                        String? // Macho, Femea
  weight                     String?
  individualId               String?
  purpose                    String?
  sanitaryCondition          String?
  vaccinationStatus          String?
  lineage                    String?
  isPregnant                 Boolean?
  specialSkills              String?
  gtaDocument                String?
  breedRegistryDocument      String?

  lots                       LotBens[]

  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
}


model Auction {
  id                               String                @id @default(uuid())
  publicId                         String?               @unique
  slug                             String?               @unique
  title                            String
  description                      String?               @db.Text
  status                           AuctionStatus         @default(RASCUNHO)
  auctionDate                      DateTime?
  endDate                          DateTime?
  // Settings
  auctionType                      AuctionType?
  auctionMethod                    AuctionMethod?
  participation                    AuctionParticipation?
  onlineUrl                        String?
  address                          String?
  city                             City?                 @relation(fields: [cityId], references: [id], onDelete: SetNull)
  cityId                           String?
  state                            State?                @relation(fields: [stateId], references: [id], onDelete: SetNull)
  stateId                          String?
  zipCode                          String?
  latitude                         Float?
  longitude                        Float?
  automaticBiddingEnabled          Boolean               @default(false)
  allowInstallmentBids             Boolean               @default(true)
  silentBiddingEnabled             Boolean               @default(false)
  allowMultipleBidsPerUser         Boolean               @default(true)
  softCloseEnabled                 Boolean               @default(false)
  softCloseMinutes                 Int                   @default(2)
  isFeaturedOnMarketplace          Boolean               @default(false)
  marketplaceAnnouncementTitle     String?
  // Relations
  auctioneer                       Auctioneer?           @relation(fields: [auctioneerId], references: [id])
  auctioneerId                     String?
  seller                           Seller?               @relation(fields: [sellerId], references: [id])
  sellerId                         String?
  category                         LotCategory?          @relation(fields: [categoryId], references: [id])
  categoryId                       String?
  judicialProcess                  JudicialProcess?      @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId                String?
  court                            Court?                @relation(fields: [courtId], references: [id])
  courtId                          String?
  district                         JudicialDistrict?     @relation(fields: [districtId], references: [id])
  districtId                       String?
  branch                           JudicialBranch?       @relation(fields: [branchId], references: [id])
  branchId                         String?
  lots                             Lot[]
  bids                             Bid[]
  habilitations                    AuctionHabilitation[]
  // Financial & Stats
  estimatedRevenue                 Decimal?              @db.Decimal(15, 2)
  achievedRevenue                  Decimal?              @db.Decimal(15, 2)
  visits                           Int?                  @default(0)
  totalHabilitatedUsers            Int?                  @default(0)
  // Additional Fields
  documentsUrl                     String?
  evaluationReportUrl              String?
  auctionCertificateUrl            String?
  sellingBranch                    String?
  additionalTriggers               Json?
  // Relist Settings
  autoRelistSettings               Json?
  // Timestamps
  createdAt                        DateTime              @default(now())
  updatedAt                        DateTime              @updatedAt
  // Stages
  auctionStages                    AuctionStage[]
}

model AuctionStage {
  id              String                   @id @default(uuid())
  auction         Auction                  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId       String
  name            String
  startDate       DateTime
  endDate         DateTime
  evaluationValue Decimal?                 @db.Decimal(15, 2)
  lotsDetails     LotAuctionStageDetails[] // Back-relation
}

model LotBens {
  lot   Lot    @relation(fields: [lotId], references: [id])
  lotId String
  bem   Bem    @relation(fields: [bemId], references: [id])
  bemId String

  @@id([lotId, bemId])
}

model Lot {
  id                           String                   @id @default(uuid())
  publicId                     String?                  @unique
  auction                      Auction                  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                    String
  slug                         String?
  number                       String?
  title                        String
  description                  String?                  @db.Text
  price                        Decimal                  @db.Decimal(15, 2)
  status                       LotStatus                @default(EM_BREVE)
  bidsCount                    Int?                     @default(0)
  views                        Int?                     @default(0)
  isFeatured                   Boolean?                 @default(false)
  isExclusive                  Boolean?                 @default(false)
  discountPercentage           Int?
  additionalTriggers           Json?
  imageUrl                     String?
  imageMediaId                 String?
  galleryImageUrls             Json?
  mediaItemIds                 Json?
  inheritedMediaFromBemId      String?
  type                         String
  category                     LotCategory?             @relation(fields: [categoryId], references: [id])
  categoryId                   String?
  subcategory                  Subcategory?             @relation(fields: [subcategoryId], references: [id])
  subcategoryId                String?
  auctionName                  String?
  seller                       Seller?                  @relation(fields: [sellerId], references: [id])
  sellerId                     String?
  sellerName                   String?
  auctioneer                   Auctioneer?              @relation(fields: [auctioneerId], references: [id])
  auctioneerId                 String?
  city                         City?                    @relation(fields: [cityId], references: [id], onDelete: SetNull)
  cityId                       String?
  state                        State?                   @relation(fields: [stateId], references: [id], onDelete: SetNull)
  stateId                      String?
  cityName                     String?
  stateUf                      String?
  latitude                     Float?
  longitude                    Float?
  mapAddress                   String?
  mapEmbedUrl                  String?
  mapStaticImageUrl            String?
  endDate                      DateTime?
  lotSpecificAuctionDate       DateTime?
  secondAuctionDate            DateTime?
  condition                    String?
  dataAiHint                   String?
  winner                       User?                    @relation("UserWins", fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId                     String?
  winningBidTermUrl            String?
  allowInstallmentBids         Boolean?                 @default(false)
  bids                         Bid[]
  wins                         UserWin[]
  maxBids                      UserLotMaxBid[]
  bens                         LotBens[]
  isRelisted                   Boolean                  @default(false)
  relistCount                  Int                      @default(0)
  originalLot                  Lot?                     @relation("LotRelistHistory", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  originalLotId                String?                  @unique
  relistedLots                 Lot[]                    @relation("LotRelistHistory")
  stageDetails                 LotAuctionStageDetails[] // Back-relation
  createdAt                    DateTime                 @default(now())
  updatedAt                    DateTime                 @updatedAt
}

model LotAuctionStageDetails {
  lot             Lot          @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId           String
  auctionStage    AuctionStage @relation(fields: [auctionStageId], references: [id], onDelete: Cascade)
  auctionStageId  String
  initialBid      Decimal?     @db.Decimal(15, 2)
  bidIncrement    Decimal?     @db.Decimal(10, 2)

  @@id([lotId, auctionStageId])
}

model MediaItem {
  id                   String           @id @default(uuid())
  fileName             String           @unique
  storagePath          String
  title                String?
  altText              String?
  caption              String?
  description          String?          @db.Text
  mimeType             String
  sizeBytes            Int?
  urlOriginal          String
  urlThumbnail         String?
  urlMedium            String?
  urlLarge             String?
  linkedLotIds         Json?
  dataAiHint           String?
  uploadedBy           User             @relation(fields: [uploadedByUserId], references: [id])
  uploadedByUserId     String
  judicialProcess      JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId    String?
  createdAt            DateTime         @default(now())
}

model Bid {
  id            String   @id @default(uuid())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId      String
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
}

model UserWin {
  id               String        @id @default(uuid())
  lot              Lot           @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId            String        @unique // Um lote só pode ser ganho por um usuário
  user             User          @relation(fields: [userId], references: [id])
  userId           String
  winningBidAmount Decimal       @db.Decimal(15, 2)
  winDate          DateTime      @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model JudicialParty {
  id              String          @id @default(uuid())
  process         JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId       String
  name            String
  documentNumber  String?
  partyType       ProcessPartyType
}
