
// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// ENUMS - DEFINIÇÕES DE TIPOS
// =================================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

// =================================================================
// MODELS
// =================================================================

model User {
  id                  String                   @id @default(uuid())
  email               String                   @unique
  password            String?
  fullName            String?
  habilitationStatus  UserHabilitationStatus   @default(PENDING_DOCUMENTS)
  accountType         AccountType              @default(PHYSICAL)
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  optInMarketing      Boolean                  @default(false)
  cpf                 String?                  @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  razaoSocial         String?
  cnpj                String?                  @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  roles               UsersOnRoles[]
  bids                Bid[]
  wins                UserWin[]
  maxBids             UserLotMaxBid[]
  uploadedMedia       MediaItem[]              @relation("UploadedBy")
  answeredQuestions   LotQuestion[]            @relation("AnsweredByUser")
  questions           LotQuestion[]            @relation("AskedByUser")
  notifications       Notification[]
  habilitations       AuctionHabilitation[]
  documents           UserDocument[]
  wonLots             Lot[]                    @relation("Winner")
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

model Role {
  id             String         @id @default(uuid())
  name           String         @unique
  nameNormalized String         @unique
  description    String?
  permissions    Json?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  users          UsersOnRoles[]
}

model State {
  id                String             @id @default(uuid())
  name              String
  uf                String             @unique
  slug              String             @unique
  cityCount         Int                @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  cities            City[]
  judicialDistricts JudicialDistrict[]
  lots              Lot[]
}

model City {
  id        String   @id @default(uuid())
  name      String
  slug      String
  state     State    @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId   String
  stateUf   String?
  ibgeCode  String?  @unique
  lotCount  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  auctions  Auction[]
  lots      Lot[]

  @@index([stateId])
}

model Seller {
  id                     String             @id @default(uuid())
  publicId               String             @unique
  slug                   String             @unique
  name                   String             @unique
  contactName            String?
  email                  String?
  phone                  String?
  address                String?
  city                   String?
  state                  String?
  zipCode                String?
  website                String?
  logoUrl                String?
  logoMediaId            String?
  dataAiHintLogo         String?
  description            String?
  isJudicial             Boolean            @default(false)
  user                   User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId                 String?            @unique
  judicialBranch         JudicialBranch?    @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  judicialBranchId       String?            @unique
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  auctions               Auction[]
  bens                   Bem[]
  judicialProcesses      JudicialProcess[]
  lots                   Lot[]
  directSaleOffers       DirectSaleOffer[]
}

model Auctioneer {
  id                   String     @id @default(uuid())
  publicId             String     @unique
  slug                 String     @unique
  name                 String
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?
  user                 User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId               String?    @unique
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  auctions             Auction[]
  lots                 Lot[]
}

model Court {
  id                String             @id @default(uuid())
  name              String
  slug              String?
  stateUf           String?
  website           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialDistrict {
  id                String             @id @default(uuid())
  name              String
  slug              String?            @unique
  court             Court?             @relation(fields: [courtId], references: [id])
  courtId           String?
  state             State?             @relation(fields: [stateId], references: [id])
  stateId           String?
  zipCode           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  branches          JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]

  @@index([courtId])
  @@index([stateId])
}

model JudicialBranch {
  id                String             @id @default(uuid())
  name              String
  slug              String?            @unique
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
  auctions          Auction[]

  @@index([districtId])
}

model JudicialProcess {
  id              String           @id @default(uuid())
  publicId        String           @unique
  processNumber   String
  isElectronic    Boolean          @default(true)
  court           Court?           @relation(fields: [courtId], references: [id])
  courtId         String?
  district        JudicialDistrict?@relation(fields: [districtId], references: [id])
  districtId      String?
  branch          JudicialBranch?  @relation(fields: [branchId], references: [id])
  branchId        String?
  seller          Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  parties         JudicialParty[]
  bens            Bem[]
  mediaItems      MediaItem[]

  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
  @@index([sellerId])
}

model JudicialParty {
  id             String          @id @default(uuid())
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType

  @@index([processId])
}

model AuctionHabilitation {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  auction    Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId  String
  createdAt  DateTime @default(now())

  @@id([userId, auctionId])
  @@index([userId])
  @@index([auctionId])
}

model LotBens {
  lot    Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId  String
  bem    Bem  @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId  String

  @@id([lotId, bemId])
  @@index([lotId])
  @@index([bemId])
}

model AuctionStage {
  id            String   @id @default(uuid())
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  name          String
  startDate     DateTime
  endDate       DateTime
  initialPrice  Decimal?
  statusText    String?

  @@index([auctionId])
}

model LotAuctionStageDetails {
  id                   String        @id @default(uuid())
  lot                  Lot           @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId                String
  auctionStage         AuctionStage  @relation(fields: [auctionStageId], references: [id], onDelete: Cascade)
  auctionStageId       String
  initialBid           Decimal
  bidIncrement         Decimal?
  evaluationValue      Decimal?      /// Valor de avaliação específico para esta praça
  
  @@unique([lotId, auctionStageId])
  @@index([lotId])
  @@index([auctionStageId])
}

model Auction {
  id                               String        @id @default(uuid())
  publicId                         String        @unique
  slug                             String        @unique
  title                            String
  description                      String?       @db.Text
  status                           AuctionStatus @default(RASCUNHO)
  auctionDate                      DateTime?
  endDate                          DateTime?
  auctioneer                       Auctioneer?   @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  auctioneerId                     String?
  seller                           Seller?       @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId                         String?
  category                         LotCategory?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId                       String?
  imageUrl                         String?
  imageMediaId                     String?
  documentsUrl                     String?
  visits                           Int           @default(0)
  initialOffer                     Decimal?
  isFavorite                       Boolean       @default(false)
  dataAiHint                       String?
  createdAt                        DateTime      @default(now())
  updatedAt                        DateTime      @updatedAt
  
  // New structured fields
  auctionType                    AuctionType?
  auctionMethod                  AuctionMethod?  @default(STANDARD)
  participation                  AuctionParticipation? @default(ONLINE)

  // Location fields for presencial/hibrido
  address                        String?
  zipCode                        String?
  onlineUrl                      String?
  
  // Judicial related fields (optional)
  judicialProcess                JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  judicialProcessId              String?
  court                          Court? @relation(fields: [courtId], references: [id], onDelete: SetNull)
  courtId                        String?
  district                       JudicialDistrict?      @relation(fields: [districtId], references: [id], onDelete: SetNull)
  districtId                     String?
  branch                         JudicialBranch? @relation(fields: [branchId], references: [id], onDelete: SetNull)
  branchId                       String?
  city                           City?                 @relation(fields: [cityId], references: [id])
  cityId                         String?
  state                          State?            @relation(fields: [stateId], references: [id])
  stateId                        String?


  // Settings
  evaluationReportUrl              String?
  auctionCertificateUrl            String?
  sellingBranch                    String?
  automaticBiddingEnabled          Boolean       @default(false)
  silentBiddingEnabled             Boolean       @default(false)
  allowMultipleBidsPerUser         Boolean       @default(true)
  allowInstallmentBids             Boolean       @default(true)
  softCloseEnabled                 Boolean       @default(false)
  softCloseMinutes                 Int?          @default(2)
  estimatedRevenue                 Decimal?
  achievedRevenue                  Decimal?
  totalHabilitatedUsers            Int?
  isFeaturedOnMarketplace          Boolean       @default(false)
  marketplaceAnnouncementTitle     String?
  additionalTriggers               Json?
  
  // Dutch Auction Specific
  decrementAmount                  Decimal?
  decrementIntervalSeconds         Int?
  floorPrice                       Decimal?
  autoRelistSettings               Json?


  // Relations
  lots                             Lot[]
  auctionStages                    AuctionStage[]
  habilitations                    AuctionHabilitation[]
  bids                             Bid[]
  questions                        LotQuestion[]
  
  @@index([auctioneerId])
  @@index([sellerId])
  @@index([categoryId])
  @@index([judicialProcessId])
  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
}

model LotQuestion {
  id                        String   @id @default(uuid())
  lot                       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId                     String
  auction                   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                 String
  user                      User     @relation("AskedByUser", fields: [userId], references: [id])
  userId                    String
  userDisplayName           String
  questionText              String   @db.Text
  isPublic                  Boolean  @default(true)
  answerText                String?  @db.Text
  answeredBy                User?    @relation("AnsweredByUser", fields: [answeredByUserId], references: [id])
  answeredByUserId          String?
  answeredByUserDisplayName String?
  answeredAt                DateTime?
  createdAt                 DateTime @default(now())

  @@index([lotId])
  @@index([userId])
}

model Bem {
  id            String  @id @default(uuid())
  publicId      String  @unique
  title         String
  description   String? @db.Text
  status        String  @default("DISPONIVEL")
  categoryId    String
  subcategoryId String?
  
  // Relations
  category             LotCategory?    @relation(fields: [categoryId], references: [id])
  subcategory          Subcategory?    @relation(fields: [subcategoryId], references: [id])
  judicialProcess      JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId    String?
  seller               Seller?         @relation(fields: [sellerId], references: [id])
  sellerId             String?

  // Financials
  evaluationValue Decimal?

  // Media
  imageUrl          String?
  imageMediaId      String?
  galleryImageUrls  Json?
  mediaItemIds      Json?
  dataAiHint        String?

  // Location
  locationCity  String?
  locationState String?
  address       String?
  latitude      Float?
  longitude     Float?

  // Vehicle-specific fields
  plate                String?
  make                 String?
  model                String?
  version              String?
  year                 Int?
  modelYear            Int?
  mileage              Int?
  color                String?
  fuelType             String?
  transmissionType     String?
  bodyType             String?
  vin                  String? @unique
  renavam              String? @unique
  enginePower          String?
  numberOfDoors        Int?
  vehicleOptions       String?
  detranStatus         String?
  debts                String?
  runningCondition     String?
  bodyCondition        String?
  tiresCondition       String?
  hasKey               Boolean?

  // Real Estate-specific fields
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Decimal?
  builtArea                  Decimal?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?
  infrastructure             String?
  condoDetails               String?
  improvements               String?
  topography                 String?
  liensAndEncumbrances       String?
  propertyDebts              String?
  unregisteredRecords        String?
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  amenities                  Json?
  
  // Electronics-specific fields
  brand                 String?
  serialNumber          String?
  itemCondition         String?
  specifications        String? @db.Text
  includedAccessories   String?
  batteryCondition      String?
  hasInvoice            Boolean?
  hasWarranty           Boolean?
  repairHistory         String? @db.Text

  // Appliance-specific fields
  applianceCapacity   String?
  voltage             String?
  applianceType       String?
  additionalFunctions String?

  // Machinery-specific fields
  hoursUsed            Int?
  engineType           String?
  capacityOrPower      String?
  maintenanceHistory   String? @db.Text
  installationLocation String?
  compliesWithNR       String?
  operatingLicenses    String?

  // Livestock-specific fields
  breed                 String?
  age                   String?
  sex                   String?
  weight                String?
  individualId          String?
  purpose               String?
  sanitaryCondition     String?
  vaccinationStatus     String?
  lineage               String?
  isPregnant            Boolean?
  specialSkills         String?
  gtaDocument           String?
  breedRegistryDocument String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relation to join table
  lots LotBens[]

  @@index([categoryId])
  @@index([sellerId])
  @@index([judicialProcessId])
}

model DirectSaleOffer {
  id                   String   @id @default(uuid())
  publicId             String   @unique
  title                String
  description          String?  @db.Text
  offerType            DirectSaleOfferType
  price                Decimal?
  minimumOfferPrice    Decimal?
  status               DirectSaleOfferStatus @default(ACTIVE)
  category             LotCategory @relation(fields: [categoryId], references: [id])
  categoryId           String
  seller               Seller   @relation(fields: [sellerId], references: [id])
  sellerId             String
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int      @default(0)
  expiresAt            DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([sellerId])
  @@index([categoryId])
}

model Lot {
  id                         String    @id @default(uuid())
  publicId                   String?   @unique
  auction                    Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                  String
  slug                       String?
  number                     String?
  title                      String
  description                String?   @db.Text
  price                      Decimal
  status                     LotStatus @default(EM_BREVE)
  bidsCount                  Int       @default(0)
  views                      Int       @default(0)
  isFeatured                 Boolean   @default(false)
  isExclusive                Boolean   @default(false)
  additionalTriggers         Json?
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  inheritedMediaFromBemId    String?
  type                       String
  category                   LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId                 String?
  subcategory                Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId              String?
  auctionName                String?
  seller                     Seller?                  @relation(fields: [sellerId], references: [id])
  sellerId                   String?
  sellerName                 String?
  auctioneer                 Auctioneer?              @relation(fields: [auctioneerId], references: [id])
  auctioneerId               String?
  city                       City?                    @relation(fields: [cityId], references: [id])
  cityId                     String?
  state                      State?                   @relation(fields: [stateId], references: [id])
  stateId                    String?
  cityName                   String?
  stateUf                    String?
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?
  endDate                    DateTime?
  lotSpecificAuctionDate     DateTime?
  condition                  String?
  dataAiHint                 String?
  winner                     User?                    @relation("Winner", fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId                   String?
  winningBidTermUrl          String?
  allowInstallmentBids       Boolean?  @default(false)
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt

  // Relations
  bens             LotBens[]
  bids             Bid[]
  wins             UserWin[]
  maxBids          UserLotMaxBid[]
  questions        LotQuestion[]
  lotStageDetails  LotAuctionStageDetails[]

  @@index([auctionId])
  @@index([categoryId])
  @@index([sellerId])
  @@index([winnerId])
}

model MediaItem {
  id                  String   @id @default(uuid())
  fileName            String
  storagePath         String
  title               String
  altText             String?
  caption             String?
  description         String?  @db.Text
  mimeType            String
  sizeBytes           Int
  urlOriginal         String
  urlThumbnail        String
  urlMedium           String?
  urlLarge            String?
  linkedLotIds        Json?
  dataAiHint          String?
  uploadedByUser      User     @relation("UploadedBy", fields: [uploadedByUserId], references: [id])
  uploadedByUserId    String
  uploadedAt          DateTime @default(now())
  judicialProcess     JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId   String?

  @@unique([fileName])
  @@index([uploadedByUserId])
}

model UserDocument {
  id              String             @id @default(uuid())
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  documentType    DocumentType       @relation(fields: [documentTypeId], references: [id])
  documentTypeId  String
  status          UserDocumentStatus @default(NOT_SENT)
  fileUrl         String
  fileName        String?
  rejectionReason String?            @db.Text
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@unique([userId, documentTypeId])
  @@index([userId])
}

model DocumentType {
  id            String         @id @default(uuid())
  name          String
  description   String?
  isRequired    Boolean        @default(true)
  appliesTo     String?        /// Comma-separated: PHYSICAL,LEGAL,ALL,PROCESS
  userDocuments UserDocument[]
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

model Bid {
  id            String   @id @default(uuid())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId      String
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())

  @@index([lotId])
  @@index([bidderId])
  @@index([auctionId])
}

model UserWin {
  id               String   @id @default(uuid())
  lot              Lot      @relation(fields: [lotId], references: [id])
  lotId            String   @unique // One user per lot win
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  winningBidAmount Decimal  @db.Decimal(15, 2)
  winDate          DateTime @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?

  @@index([lotId])
  @@index([userId])
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
  @@index([userId])
  @@index([lotId])
}
