// prisma/models/asset.prisma
/**
 * @fileoverview Asset (Bem) model. Represents an individual item
 * that can be sold, such as a car, a property, or a piece of equipment,
 * before it is grouped into a Lot for auction.
 */
import { Lot, AssetsOnLots } from './lot.prisma'
import { Seller } from './seller.prisma'
import { JudicialProcess } from './judicial-process.prisma'
import { LotCategory, Subcategory } from './category.prisma'
import { Tenant } from './tenant.prisma'
import { City, State } from './location.prisma'
import { MediaItem } from './media-item.prisma'
import { AssetMedia } from './asset-media.prisma'

model Asset {
  id                      BigInt   @id @default(autoincrement())
  publicId                BigInt   @unique @default(uuid()) @map("public_id")
  title                   BigInt
  description             BigInt?  @db.Text
  properties              BigInt?  @db.Text
  status                  BigInt   @default("DISPONIVEL")
  evaluationValue         Decimal? @db.Decimal(12, 2)
  
  // Relacionamento com Leilão/Lote
  lots                    AssetsOnLots[]

  // Relacionamento com Proprietário
  sellerId                BigInt?       @map("seller_id")
  seller                  Seller?       @relation(fields: [sellerId], references: [id])
  judicialProcessId       BigInt?       @map("judicial_process_id")
  judicialProcess         JudicialProcess? @relation(fields: [judicialProcessId], references: [id])

  // Relacionamento com Categoria
  categoryId              BigInt?       @map("category_id")
  category                LotCategory?  @relation(fields: [categoryId], references: [id])
  subcategoryId           BigInt?       @map("subcategory_id")
  subcategory             Subcategory?  @relation(fields: [subcategoryId], references: [id])

  // Mídia Principal
  imageUrl                BigInt?
  imageMediaId            BigInt?       @map("image_media_id")
  mediaItem               MediaItem?    @relation("AssetImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  dataAiHint              BigInt?

  // Galeria de Mídia (Many-to-Many)
  gallery                 AssetMedia[] @relation("AssetGallery")

  // Localização Estruturada
  street                  BigInt?
  number                  BigInt?
  complement              BigInt?
  neighborhood            BigInt?
  zipCode                 BigInt?
  latitude                Float?
  longitude               Float?
  cityId                  BigInt?       @map("city_id")
  city                    City?         @relation(fields: [cityId], references: [id])
  stateId                 BigInt?       @map("state_id")
  state                   State?        @relation(fields: [stateId], references: [id])


  // Multi-Tenant
  tenantId                BigInt        @map("tenant_id")
  tenant                  Tenant        @relation(fields: [tenantId], references: [id])

  createdAt               DateTime      @default(now()) @map("created_at")
  updatedAt               DateTime      @updatedAt @map("updated_at")

  @@map("assets")
}
