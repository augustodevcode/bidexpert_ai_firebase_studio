// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// =================================================================
// 1. TABLES WITH NO FOREIGN KEY DEPENDENCIES (BASE TABLES)
// =================================================================

model PlatformSettings {
  id                                String                      @id @default("global")
  siteTitle                         String?                     @db.VarChar(100)
  siteTagline                       String?                     @db.VarChar(200)
  logoUrl                           String?
  faviconUrl                        String?
  galleryImageBasePath              String                      @default("/uploads/media/") @db.VarChar(200)
  storageProvider                   String?                     @db.VarChar(50)
  firebaseStorageBucket             String?                     @db.VarChar(200)
  activeThemeName                   String?                     @db.VarChar(100)
  themes                            Json?
  platformPublicIdMasks             Json?
  homepageSections                  Json?
  mentalTriggerSettings             Json?
  sectionBadgeVisibility            Json?
  mapSettings                       Json?
  searchPaginationType              String?                     @db.VarChar(50)
  searchItemsPerPage                Int?
  searchLoadMoreCount               Int?
  showCountdownOnLotDetail          Boolean?
  showCountdownOnCards              Boolean?
  showRelatedLotsOnLotDetail        Boolean?
  relatedLotsCount                  Int?
  defaultUrgencyTimerHours          Int?
  variableIncrementTable            Json?
  biddingSettings                   Json?
  paymentGatewaySettings            Json?
  defaultListItemsPerPage           Int?                        @default(10)
  updatedAt                         DateTime?                   @updatedAt
}

model Role {
  id                    String        @id @default(cuid())
  name                  String        @db.VarChar(50)
  nameNormalized        String        @unique @db.VarChar(50)
  description           String?       @db.VarChar(255)
  permissions           String[]
  createdAt             DateTime?     @default(now())
  updatedAt             DateTime?     @updatedAt
  users                 UsersOnRoles[]
}

model State {
  id              String        @id @default(cuid())
  name            String        @db.VarChar(100)
  uf              String        @unique @db.VarChar(2)
  slug            String?       @unique @db.VarChar(100)
  cityCount       Int?          @default(0)
  createdAt       DateTime?     @default(now())
  updatedAt       DateTime?     @updatedAt
  cities          City[]
  districts       JudicialDistrict[]
}

model LotCategory {
  id                      String        @id @default(cuid())
  name                    String        @db.VarChar(100)
  slug                    String        @unique @db.VarChar(100)
  description             String?       @db.VarChar(500)
  itemCount               Int?          @default(0)
  hasSubcategories        Boolean?
  iconName                String?
  logoUrl                 String?
  logoMediaId             String?       @db.VarChar(100)
  dataAiHintIcon          String?       @db.VarChar(100)
  dataAiHintLogo          String?       @db.VarChar(100)
  coverImageUrl           String?
  coverImageMediaId       String?       @db.VarChar(100)
  dataAiHintCover         String?       @db.VarChar(100)
  megaMenuImageUrl        String?
  megaMenuImageMediaId    String?       @db.VarChar(100)
  dataAiHintMegaMenu      String?       @db.VarChar(100)
  createdAt               DateTime?     @default(now())
  updatedAt               DateTime?     @updatedAt
  subcategories           Subcategory[]
  lots                    Lot[]
  bens                    Bem[]
  auctions                Auction[]
}

model DocumentTemplate {
  id        String    @id @default(cuid())
  name      String    @db.VarChar(150)
  type      String    @db.VarChar(50)
  content   String?   @db.Text
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(150)
  email     String   @db.VarChar(150)
  subject   String?  @db.VarChar(255)
  message   String   @db.Text
  isRead    Boolean? @default(false)
  createdAt DateTime? @default(now())
}

model DocumentType {
  id                String          @id @default(cuid())
  name              String          @db.VarChar(150)
  description       String?         @db.VarChar(255)
  isRequired        Boolean?        @default(true)
  appliesTo         String?         @db.VarChar(50) // e.g., 'PHYSICAL,LEGAL,ALL'
  userDocuments     UserDocument[]
}

// =================================================================
// 2. TABLES WITH ONE LEVEL OF DEPENDENCY
// =================================================================

model User {
  id                      String        @id @default(cuid())
  email                   String        @unique @db.VarChar(150)
  password                String?       @db.VarChar(255)
  fullName                String?       @db.VarChar(150)
  cpf                     String?       @unique @db.VarChar(20)
  habilitationStatus      String        @default("PENDING_DOCUMENTS") @db.VarChar(50)
  accountType             String        @default("PHYSICAL") @db.VarChar(50)
  avatarUrl               String?
  dataAiHint              String?       @db.VarChar(100)
  badges                  Json?
  createdAt               DateTime?     @default(now())
  updatedAt               DateTime?     @updatedAt
  
  // Relational Fields
  roles                   UsersOnRoles[]
  bids                    Bid[]
  wins                    UserWin[]
  notifications           Notification[]
  seller                  Seller?
  auctioneer              Auctioneer?
  documents               UserDocument[]
  mediaItems              MediaItem[]
  maxBids                 UserLotMaxBid[]
  auctionHabilitations    AuctionHabilitation[]

  // Detalhes PF
  rgNumber                String?
  rgIssuer                String?
  rgIssueDate             DateTime?
  rgState                 String?
  dateOfBirth             DateTime?
  cellPhone               String?
  homePhone               String?
  gender                  String?
  profession              String?
  nationality             String?
  maritalStatus           String?
  propertyRegime          String?
  spouseName              String?
  spouseCpf               String?
  
  // Detalhes PJ
  razaoSocial             String?
  cnpj                    String? @unique
  inscricaoEstadual       String?
  website                 String?
  responsibleName         String?
  responsibleCpf          String?

  // Endere√ßo (comum a ambos)
  zipCode                 String?
  street                  String?
  number                  String?
  complement              String?
  neighborhood            String?
  city                    String?
  state                   String?

  optInMarketing          Boolean? @default(false)
}

model UsersOnRoles {
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  role            Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId          String
  assignedAt      DateTime @default(now())
  assignedBy      String

  @@id([userId, roleId])
}

model City {
  id              String        @id @default(cuid())
  name            String        @db.VarChar(150)
  slug            String?       @unique @db.VarChar(150)
  state           State         @relation(fields: [stateId], references: [id])
  stateId         String
  stateUf         String?       @db.VarChar(2)
  ibgeCode        String?       @unique @db.VarChar(10)
  lotCount        Int?          @default(0)
  createdAt       DateTime?     @default(now())
  updatedAt       DateTime?     @updatedAt
  lots            Lot[]
}

model Subcategory {
  id                      String        @id @default(cuid())
  name                    String        @db.VarChar(100)
  slug                    String?       @unique @db.VarChar(100)
  parentCategory          LotCategory   @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  parentCategoryId        String
  description             String?       @db.VarChar(500)
  displayOrder            Int?          @default(0)
  iconUrl                 String?
  iconMediaId             String?       @db.VarChar(100)
  dataAiHintIcon          String?       @db.VarChar(100)
  lots                    Lot[]
  bens                    Bem[]
}

model Court {
  id                  String            @id @default(cuid())
  name                String            @db.VarChar(150)
  slug                String?           @unique @db.VarChar(150)
  stateUf             String?           @db.VarChar(2)
  website             String?
  createdAt           DateTime?         @default(now())
  updatedAt           DateTime?         @updatedAt
  districts           JudicialDistrict[]
  judicialProcesses   JudicialProcess[]
  auctions            Auction[]
}

// =================================================================
// 3. TABLES WITH TWO OR MORE LEVELS OF DEPENDENCY
// =================================================================

model JudicialDistrict {
  id                  String            @id @default(cuid())
  name                String            @db.VarChar(150)
  slug                String?           @unique @db.VarChar(150)
  court               Court?            @relation(fields: [courtId], references: [id])
  courtId             String?
  state               State?            @relation(fields: [stateId], references: [id])
  stateId             String?
  zipCode             String?           @db.VarChar(10)
  createdAt           DateTime?         @default(now())
  updatedAt           DateTime?         @updatedAt
  branches            JudicialBranch[]
  judicialProcesses   JudicialProcess[]
}

model JudicialBranch {
  id                  String            @id @default(cuid())
  name                String            @db.VarChar(150)
  slug                String?           @unique @db.VarChar(150)
  district            JudicialDistrict? @relation(fields: [districtId], references: [id])
  districtId          String?
  contactName         String?           @db.VarChar(150)
  phone               String?           @db.VarChar(20)
  email               String?           @db.VarChar(150)
  createdAt           DateTime?         @default(now())
  updatedAt           DateTime?         @updatedAt
  judicialProcesses   JudicialProcess[]
  sellers             Seller[]
}

model Seller {
  id                      String            @id @default(cuid())
  publicId                String            @unique @default(uuid())
  slug                    String            @unique @db.VarChar(150)
  name                    String            @unique @db.VarChar(150)
  contactName             String?           @db.VarChar(150)
  email                   String?           @unique @db.VarChar(150)
  phone                   String?           @db.VarChar(20)
  address                 String?           @db.VarChar(200)
  city                    String?           @db.VarChar(100)
  state                   String?           @db.VarChar(50)
  zipCode                 String?           @db.VarChar(10)
  website                 String?
  logoUrl                 String?
  logoMediaId             String?           @db.VarChar(100)
  dataAiHintLogo          String?           @db.VarChar(100)
  description             String?           @db.Text
  userId                  String?           @unique
  user                    User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  isJudicial              Boolean           @default(false)
  judicialBranchId        String?
  judicialBranch          JudicialBranch?   @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  createdAt               DateTime?         @default(now())
  updatedAt               DateTime?         @updatedAt
  auctions                Auction[]
  lots                    Lot[]
  bens                    Bem[]
  directSaleOffers        DirectSaleOffer[]
}

model Auctioneer {
  id                      String    @id @default(cuid())
  publicId                String    @unique @default(uuid())
  slug                    String    @unique @db.VarChar(150)
  name                    String    @db.VarChar(150)
  registrationNumber      String?   @db.VarChar(50)
  contactName             String?   @db.VarChar(150)
  email                   String?   @unique @db.VarChar(150)
  phone                   String?   @db.VarChar(20)
  address                 String?   @db.VarChar(200)
  city                    String?   @db.VarChar(100)
  state                   String?   @db.VarChar(50)
  zipCode                 String?   @db.VarChar(10)
  website                 String?
  logoUrl                 String?
  logoMediaId             String?   @db.VarChar(100)
  dataAiHintLogo          String?   @db.VarChar(100)
  description             String?   @db.Text
  userId                  String?   @unique
  user                    User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt               DateTime? @default(now())
  updatedAt               DateTime? @updatedAt
  auctions                Auction[]
  lots                    Lot[]
}

model JudicialProcess {
  id                    String            @id @default(cuid())
  publicId              String?           @unique @default(uuid())
  processNumber         String            @unique @db.VarChar(100)
  isElectronic          Boolean?          @default(true)
  courtId               String?
  court                 Court?            @relation(fields: [courtId], references: [id], onDelete: SetNull)
  districtId            String?
  district              JudicialDistrict? @relation(fields: [districtId], references: [id], onDelete: SetNull)
  branchId              String?
  branch                JudicialBranch?   @relation(fields: [branchId], references: [id], onDelete: SetNull)
  sellerId              String?
  seller                Seller?           @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  createdAt             DateTime?         @default(now())
  updatedAt             DateTime?         @updatedAt
  parties               JudicialParty[]
  bens                  Bem[]
  auctions              Auction[]
}

model JudicialParty {
  id              String          @id @default(cuid())
  process         JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId       String
  name            String          @db.VarChar(255)
  documentNumber  String?         @db.VarChar(50)
  partyType       String          @db.VarChar(50)
}

model Bem {
  id                          String          @id @default(cuid())
  publicId                    String?         @unique @default(uuid())
  title                       String          @db.VarChar(200)
  description                 String?         @db.Text
  status                      String          @default("DISPONIVEL") @db.VarChar(50)
  categoryId                  String
  category                    LotCategory     @relation(fields: [categoryId], references: [id])
  subcategoryId               String?
  subcategory                 Subcategory?    @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcessId           String?
  judicialProcess             JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  sellerId                    String?
  seller                      Seller?         @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  evaluationValue             Float?          @db.Float
  imageUrl                    String?
  imageMediaId                String?         @db.VarChar(100)
  galleryImageUrls            Json?
  mediaItemIds                Json?
  dataAiHint                  String?         @db.VarChar(100)
  locationCity                String?         @db.VarChar(100)
  locationState               String?         @db.VarChar(100)
  address                     String?
  latitude                    Float?
  longitude                   Float?
  createdAt                   DateTime?       @default(now())
  updatedAt                   DateTime?       @updatedAt
  lots                        LotBens[]

  // Vehicle-specific fields
  plate                       String?
  make                        String?
  model                       String?
  version                     String?
  year                        Int?
  modelYear                   Int?
  mileage                     Int?
  color                       String?
  fuelType                    String?
  transmissionType            String?
  bodyType                    String?
  vin                         String?
  renavam                     String?
  enginePower                 String?
  numberOfDoors               Int?
  vehicleOptions              String?
  detranStatus                String?
  debts                       String?
  runningCondition            String?
  bodyCondition               String?
  tiresCondition              String?
  hasKey                      Boolean?

  // Real estate-specific fields
  propertyRegistrationNumber  String?
  iptuNumber                  String?
  isOccupied                  Boolean?
  totalArea                   Float?
  builtArea                   Float?
  bedrooms                    Int?
  suites                      Int?
  bathrooms                   Int?
  parkingSpaces               Int?
  constructionType            String?
  finishes                    String?
  infrastructure              String?
  condoDetails                String?
  improvements                String?
  topography                  String?
  liensAndEncumbrances        String?
  propertyDebts               String?
  unregisteredRecords         String?
  hasHabiteSe                 Boolean?
  zoningRestrictions          String?
  amenities                   Json?
}

model Auction {
  id                                String    @id @default(cuid())
  publicId                          String?   @unique @default(uuid())
  slug                              String?   @unique @db.VarChar(255)
  title                             String    @db.VarChar(255)
  description                       String?   @db.Text
  status                            String?   @default("RASCUNHO") @db.VarChar(50)
  auctionDate                       DateTime?
  endDate                           DateTime?
  auctioneerId                      String?
  auctioneer                        Auctioneer? @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  sellerId                          String?
  seller                            Seller?   @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  categoryId                        String?
  category                          LotCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  auctionType                       String?   @db.VarChar(50)
  auctionMethod                     String?   @default("STANDARD") @db.VarChar(50)
  participation                     String?   @default("ONLINE") @db.VarChar(50)
  imageUrl                          String?
  imageMediaId                      String?   @db.VarChar(100)
  documentsUrl                      String?
  visits                            Int?      @default(0)
  initialOffer                      Float?
  isFavorite                        Boolean?  @default(false)
  dataAiHint                        String?   @db.VarChar(100)
  createdAt                         DateTime? @default(now())
  updatedAt                         DateTime? @updatedAt
  
  // New structured fields from Auction type
  evaluationReportUrl               String?
  auctionCertificateUrl             String?
  sellingBranch                     String?
  automaticBiddingEnabled           Boolean?  @default(false)
  silentBiddingEnabled              Boolean?  @default(false)
  allowMultipleBidsPerUser          Boolean?  @default(true)
  allowInstallmentBids              Boolean?  @default(true)
  softCloseEnabled                  Boolean?  @default(false)
  softCloseMinutes                  Int?      @default(2)
  estimatedRevenue                  Float?
  isFeaturedOnMarketplace           Boolean?  @default(false)
  marketplaceAnnouncementTitle      String?
  
  // Dutch Auction Specific
  decrementAmount                   Float?
  decrementIntervalSeconds          Int?
  floorPrice                        Float?

  // Relational Fields
  lots                              Lot[]
  bids                              Bid[]
  auctionHabilitations              AuctionHabilitation[]
  stages                            AuctionStage[]
  judicialProcessId                 String?
  judicialProcess                   JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  courtId                           String?
  court                             Court? @relation(fields: [courtId], references: [id], onDelete: SetNull)
  districtId                        String?
  district                          JudicialDistrict? @relation(fields: [districtId], references: [id], onDelete: SetNull)
  branchId                          String?
  branch                            JudicialBranch? @relation(fields: [branchId], references: [id], onDelete: SetNull)

  // Endere√ßo
  address                           String?
  cityId                            String?
  stateId                           String?
  zipCode                           String?
  latitude                          Float?
  longitude                         Float?
  onlineUrl                         String?
}

model AuctionStage {
  id              String      @id @default(cuid())
  auction         Auction     @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId       String
  name            String
  startDate       DateTime
  endDate         DateTime
  evaluationValue Float?
  prices          LotStagePrice[]
}

model AuctionHabilitation {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId String
  createdAt DateTime @default(now())

  @@id([userId, auctionId])
}

model Lot {
  id                          String    @id @default(cuid())
  publicId                    String?   @unique @default(uuid())
  auction                     Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                   String
  slug                        String?   @unique @db.VarChar(255)
  number                      String?   @db.VarChar(20)
  title                       String    @db.VarChar(255)
  description                 String?   @db.Text
  price                       Float
  initialPrice                Float?
  secondInitialPrice          Float?
  bidIncrementStep            Float?
  status                      String    @default("EM_BREVE") @db.VarChar(50)
  bidsCount                   Int?      @default(0)
  views                       Int?      @default(0)
  isFeatured                  Boolean?  @default(false)
  isExclusive                 Boolean?  @default(false)
  discountPercentage          Int?
  additionalTriggers          Json?
  imageUrl                    String?
  imageMediaId                String?   @db.VarChar(100)
  galleryImageUrls            Json?
  mediaItemIds                Json?
  type                        String?   @db.VarChar(100)
  categoryId                  String?
  category                    LotCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategoryId               String?
  subcategory                 Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  sellerId                    String?
  seller                      Seller?   @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  auctioneerId                String?
  auctioneer                  Auctioneer? @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  cityId                      String?
  city                        City?     @relation(fields: [cityId], references: [id], onDelete: SetNull)
  stateId                     String?
  state                       State?    @relation(fields: [stateId], references: [id])
  cityName                    String?
  stateUf                     String?
  latitude                    Float?
  longitude                   Float?
  mapAddress                  String?
  mapEmbedUrl                 String?
  mapStaticImageUrl           String?
  endDate                     DateTime?
  lotSpecificAuctionDate      DateTime?
  secondAuctionDate           DateTime?
  condition                   String?   @db.VarChar(100)
  dataAiHint                  String?   @db.VarChar(100)
  winnerId                    String?
  winner                      User?     @relation("WonLots", fields: [winnerId], references: [id], onDelete: SetNull)
  winningBidTermUrl           String?
  allowInstallmentBids        Boolean?  @default(true)
  isRelisted                  Boolean   @default(false)
  relistCount                 Int       @default(0)
  originalLotId               String?   @unique
  originalLot                 Lot?      @relation("RelistedLots", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLots                Lot[]     @relation("RelistedLots")
  inheritedMediaFromBemId     String?
  evaluationValue             Float?

  createdAt                   DateTime? @default(now())
  updatedAt                   DateTime? @updatedAt
  
  bens                        LotBens[]
  bids                        Bid[]
  wins                        UserWin[]
  maxBids                     UserLotMaxBid[]
  stageDetails                LotStagePrice[]
}

model LotStagePrice {
  id              String      @id @default(cuid())
  lot             Lot         @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId           String
  stage           AuctionStage @relation(fields: [auctionStageId], references: [id], onDelete: Cascade)
  auctionStageId  String
  initialBid      Float?
  increment       Float?

  @@unique([lotId, auctionStageId])
}


model LotBens {
  lot     Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId   String
  bem     Bem     @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId   String

  @@id([lotId, bemId])
}

model MediaItem {
  id                    String        @id @default(cuid())
  fileName              String        @db.VarChar(255)
  storagePath           String
  title                 String?
  altText               String?
  caption               String?       @db.Text
  description           String?       @db.Text
  mimeType              String        @db.VarChar(100)
  sizeBytes             Int?
  urlOriginal           String
  urlThumbnail          String?
  urlMedium             String?
  urlLarge              String?
  linkedLotIds          Json?
  dataAiHint            String?       @db.VarChar(100)
  uploadedByUserId      String?
  uploadedBy            User?         @relation(fields: [uploadedByUserId], references: [id], onDelete: SetNull)
  uploadedAt            DateTime?     @default(now())
  judicialProcessId     String?
}

model UserDocument {
  id                  String        @id @default(cuid())
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
  documentType        DocumentType  @relation(fields: [documentTypeId], references: [id])
  documentTypeId      String
  status              String        @default("PENDING_ANALYSIS") @db.VarChar(50)
  fileUrl             String
  fileName            String?
  rejectionReason     String?       @db.Text
  createdAt           DateTime?     @default(now())
  updatedAt           DateTime?     @updatedAt
  
  @@unique([userId, documentTypeId])
}

model Bid {
  id              String   @id @default(cuid())
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId           String
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId       String
  bidder          User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId        String
  bidderDisplay   String?  @db.VarChar(150)
  amount          Float
  timestamp       DateTime @default(now())
}

model UserWin {
  id                  String        @id @default(cuid())
  lot                 Lot           @relation(fields: [lotId], references: [id])
  lotId               String        @unique
  user                User          @relation("WonLots", fields: [userId], references: [id])
  userId              String
  winningBidAmount    Float
  winDate             DateTime      @default(now())
  paymentStatus       String        @default("PENDENTE") @db.VarChar(50)
  invoiceUrl          String?
  installments        InstallmentPayment[]
}

model InstallmentPayment {
  id                  String      @id @default(cuid())
  userWin             UserWin     @relation(fields: [userWinId], references: [id], onDelete: Cascade)
  userWinId           String
  installmentNumber   Int
  amount              Float
  dueDate             DateTime
  status              String      @default("PENDENTE") @db.VarChar(50)
  paymentDate         DateTime?
  paymentMethod       String?
  transactionId       String?
}


model Notification {
    id              String @id @default(cuid())
    user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId          String
    message         String @db.Text
    link            String?
    isRead          Boolean @default(false)
    createdAt       DateTime @default(now())
}

model DirectSaleOffer {
  id                        String    @id @default(cuid())
  publicId                  String?   @unique @default(uuid())
  title                     String
  description               String?   @db.Text
  offerType                 String?   @db.VarChar(50)
  price                     Float?
  minimumOfferPrice         Float?
  status                    String?   @default("ACTIVE") @db.VarChar(50)
  category                  String?   @db.VarChar(100)
  sellerId                  String?
  seller                    Seller?   @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  locationCity              String?   @db.VarChar(100)
  locationState             String?   @db.VarChar(100)
  imageUrl                  String?
  imageMediaId              String?   @db.VarChar(100)
  dataAiHint                String?   @db.VarChar(100)
  galleryImageUrls          Json?
  mediaItemIds              Json?
  itemsIncluded             Json?
  views                     Int?      @default(0)
  expiresAt                 DateTime?
  createdAt                 DateTime? @default(now())
  updatedAt                 DateTime? @updatedAt
}

model UserLotMaxBid {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  lot         Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId       String
  maxAmount   Float
  isActive    Boolean? @default(true)
  createdAt   DateTime? @default(now())

  @@unique([userId, lotId])
}

model VehicleMake {
  id      String         @id @default(cuid())
  name    String         @unique
  slug    String         @unique
  models  VehicleModel[]
}

model VehicleModel {
  id      String      @id @default(cuid())
  name    String
  slug    String
  make    VehicleMake @relation(fields: [makeId], references: [id])
  makeId  String

  @@unique([name, makeId])
}
