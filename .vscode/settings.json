{
    "IDX.aI.enableInlineCompletion": true,
    "IDX.aI.enableCodebaseIndexing": true,
    "terminal.integrated.copyOnSelection": true,
    "IDX.agenticWorkspace": true,
    "IDX.corgiMode": true,
    "IDX.aI.showChatInEditorTab": true,
    "geminicodeassist.agentYoloMode": true,
    "geminicodeassist.agentDebugMode": true,
    "geminicodeassist.codeGenerationPaneViewEnabled": true,
    "geminicodeassist.inlineSuggestions.nextEditPredictions": true,
    "geminicodeassist.inlineSuggestions.suggestionSpeed": "Moderate",
    "geminicodeassist.rules": "1. Guidelines T√©cnicos e Regras de Engenharia\n\nNunca atualize o estado diretamente no corpo do render. Todos updates de estado devem ocorrer em event handlers, hooks (useEffect) ou callbacks ass√≠ncronas.\n\nUse sempre dependency arrays em efeitos (useEffect). Falta de array causa loops.\n\nEvite atualiza√ß√£o condicional de estado no render. Sincronize estado sempre via useEffect.\n\nNunca fa√ßa side-effect dentro de useMemo ou useCallback.\n\nPara depend√™ncias n√£o primitivas, como arrays, objetos, fun√ß√µes: estabilize usando useMemo e useCallback.\n\nNunca use selectors que retornam objetos ou arrays em Zustand. Sempre selecione apenas valores primitivos individualmente.\n\nN√£o destruture m√∫ltiplos valores de um selector. Se necess√°rio, use o comparador shallow do Zustand.\n\nSempre defina, importe e declare corretamente todas vari√°veis, fun√ß√µes e componentes antes de usar.\n\nTodos imports devem ser validados: alguns pacotes exigem named imports exclusivos (@xyflow/react ‚Üí { ReactFlow }), nunca import default onde n√£o existe.\n\nNunca lance erros n√£o capturados; use fallback visual, tratamento de erro and graceful handling.\n\nFique atento ao DRY, evite redund√¢ncia e duplicidade de c√≥digo.\n\nExporte sempre componentes e fun√ß√µes via named exports, jamais misturar exports default/named.\n\n2. Guia de UI/UX, Visual e Layout\n\nHierarquia de tipografia: headlines (text-4xl/5xl/6xl), subheadings (text-2xl/3xl), body (text-lg/base), captions (text-sm); sempre usar o peso correto.\n\nCor: textos principais em text-gray-900, secund√°rios em text-gray-600, terci√°rios em text-gray-400.\n\nRitmo de espa√ßo: use space-y-4/6/8/16/24, nunca margens aleat√≥rias.\n\nLayout: containers centralizados com max-w-7xl mx-auto, padding responsivo (px-4 sm:px-6 lg:px-8), grids (grid-cols-1/2/3/4/12) com gaps adequados.\n\nTodos bot√µes e elementos interativos devem ter hover, focus e active state bem vis√≠veis.\n\nEstados de loading nunca podem ser ausentes; sempre tenha spinners, skeleton screens ou anima√ß√µes.\n\nEstados de erro sempre amig√°veis ao usu√°rio ‚Äî nada de mensagens t√©cnicas ou brutas.\n\nEmpty states devem orientar o usu√°rio para a primeira a√ß√£o de sucesso, com visual elegante.\n\nComponentes devem ser polidos: cards com shadow, padding consistente, hover que anima, bordas sutis.\n\nNavega√ß√£o: menus claros, breadcrumbs vis√≠veis, mobile menus animados suavemente.\n\nResponsividade: deve funcionar perfeito em mobile, tablet, desktop; touch targets m√≠nimos (44px), tipografia escal√°vel.\n\n3. Estrat√©gia do Projeto, Fases e Contexto\n\nSempre entregar frontends lindos e funcionais no in√≠cio. Cada fase deve ser demo√°vel e polida, com preview.\n\nFase inicial: montar design system, identidade visual, interfaces com shadcn components, navega√ß√£o completa, branding consistente.\n\nFases seguintes: polir visual, aprimorar componentes, refinar UX via feedback, elevar performance.\n\nInstru√ß√µes customizadas para SaaS/E-commerce/Dashboard: incluir hero section, bot√µes CTA, visual hierarchy, pricing tables, dashboards densos, filtros, cards, etc.\n\nMaximize reuso de componentes e fun√ß√µes j√° presentes no template (ex: shadcn em src/components/ui).\n\nN√£o modifique arquivos redatados ou protegidos, sempre respeite as restri√ß√µes do boilerplate.\n\nProibido usar websockets e dynamic imports.\n\nNunca escreva/edite README, licences ou arquivos n√£o relacionados √† l√≥gica do frontend.\n\nAdapte o visual ao style selecionado: Brutalismo, Retro, Ilustrativo, Minimalista, Kid Playful etc; consulte guidelines espec√≠ficos de cada estilo.\n\n4. Preven√ß√£o e An√°lise de Erros\n\nPriorize corre√ß√£o de erros cr√≠ticos de render loop e useEffect. Sempre traga matriz de erro: runtime, lint, typecheck.\n\nIgnore linhas irrelevantes no stack de erro, serialize mensagens amigavelmente.\n\nValide sempre o contexto antes de corrigir (cross-reference).\n\nPrefira tratar erros no frontend, nunca deixar o app quebrar.\n\nValidar sempre a exist√™ncia dos comandos, template, comandos j√° executados.\n\n5. Modelos de Conte√∫do\n\nUse formato full_content ou unified_diff para sugest√£o de altera√ß√µes em arquivos.\n\nAltera√ß√µes pequenas devem ir em unified_diff, altera√ß√µes grandes ou arquivos novos em full_content.\n\nDiffs precisam seguir rigorosamente os padr√µes, com todos hunks, + e - corretos, sem detalhes irrelevantes.\n\nNunca escreva arquivos bin√°rios, imagem, pdf - s√≥ texto puro.\n\nTexto final do PROMPT para somar ao usu√°rio:\n\nüîí Regras t√©cnicas e UI/UX para todo o projeto\nVoc√™ deve seguir as pr√°ticas abaixo sem exce√ß√£o:\n\nNunca atualize estado durante render. S√≥ use event handlers ou hooks.\n\nTodos efeitos precisam de dependency arrays.\n\nNunca retorne objetos/literais em selectors, cada valor deve ser acessado individualmente.\n\nImports e exports sempre validados, s√≥ named imports/export.\n\nResolva todos erros, sempre com visual fallback, comunica√ß√£o amig√°vel ao usu√°rio.\n\nUtilize design system robusto, layout harm√¥nico, anima√ß√µes suaves, responsividade, acessibilidade, visual polido.\n\nLoading, error, empty states sempre presentes e elegantes.\n\nReuse componentes do template (shadcn/UI).\n\nNunca modifique arquivos protected/redacted.\n\nSiga os guidelines espec√≠ficos do estilo visual escolhido para o projeto contidos em /home/user/studio/context.\n\nPriorize corre√ß√£o de runtime errors e loops de renderiza√ß√£o.\n\nUse modelos de diffs e conte√∫do conforme descrito para toda edi√ß√£o/cria√ß√£o de arquivos.\n\nUse o conhecimento do projeto para saber o que √©, o que faz, at√© onde chegamos e para onde estamos indo verificando a pasta: /home/user/studio/context/ ;\n\n\n\n\n",
    "geminicodeassist.updateChannel": "Insiders",
    "geminicodeassist.verboseLogging": true
}