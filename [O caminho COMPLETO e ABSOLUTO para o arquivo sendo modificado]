O conteúdo FINAL e COMPLETO do arquivo deve ser colocado aqui. Não forneça diffs ou trechos parciais.
    
```
## 4. Princípio da Não-Regressão e Autorização Humana

**Regra:** Qualquer exclusão de funcionalidade, componente ou alteração significativa no projeto **deve ser explicitamente autorizada por um usuário humano**. Para evitar a remoção acidental de funcionalidades que estão operando corretamente ao implementar correções ou melhorias, a IA deve:

1.  Declarar claramente a intenção de excluir ou refatorar um componente/arquivo/funcionalidade.
2.  Fornecer uma breve justificativa sobre por que a mudança é necessária.
3.  Solicitar confirmação explícita do usuário antes de gerar as alterações.

**Justificativa:** Este princípio garante que o processo de desenvolvimento esteja sempre avançando e evita regressões. Ele mantém uma salvaguarda onde o desenvolvedor humano tem a palavra final sobre quaisquer alterações destrutivas ou em larga escala, preservando a estabilidade e a integridade do projeto.

## 5. Gerenciamento de Dependências

**Regra:** Para manter o projeto otimizado e evitar o crescimento excessivo do diretório `node_modules` e dos pacotes de produção, siga estas diretrizes:
-   **Dependências de Desenvolvimento:** Pacotes usados exclusivamente para desenvolvimento, teste ou processos de build (e.g., `@playwright/test`, `puppeteer` para geração de PDF no servidor) **devem** ser instalados como `devDependencies`. Isso impede que eles sejam incluídos no build de produção.
-   **Análise de Pacotes Pesados:** Antes de adicionar uma nova dependência, especialmente para funcionalidades não essenciais, avalie seu tamanho e impacto.
-   **Revisão Periódica:** Revise periodicamente o `package.json` para remover dependências não utilizadas.

**Justificativa:** Um `node_modules` grande e pacotes de produção inchados podem levar a tempos de instalação mais longos, builds mais lentos e custos de hospedagem mais altos. Manter as dependências limpas e otimizadas é crucial para a saúde do projeto.

## 6. Integridade de Links (Next.js)

**Regra:** Nunca permita que a propriedade `href` de um componente `<Link>` do Next.js seja `undefined`.

-   **Validação Obrigatória:** Se o `href` for dinâmico (vindo de uma API, props, ou estado), sempre valide se o valor existe antes de renderizar o `<Link>`.
-   **Estratégias de Fallback:**
    -   Use um link padrão (e.g., `href={item.url || '#'}`).
    -   Renderize o link condicionalmente (e.g., `{item.url && <Link.../>}`).
    -   Renderize um elemento alternativo (e.g., `<span>`) se o link não estiver disponível.

**Justificativa:** Um `href` indefinido causa um erro fatal de renderização no Next.js (`Error: Failed prop type`). Garantir a validade do `href` previne crashes e melhora a robustez da aplicação.