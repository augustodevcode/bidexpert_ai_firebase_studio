
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null && request.auth.uid != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Check if the requesting user's email is in the admin list
    function isAdminEmail() {
      return isSignedIn() && request.auth.token.email in ['admin@bidexpert.com', 'augusto.devcode@gmail.com', 'analyst@bidexpert.com'];
    }
    
    // Check if the user document being read/written has the admin role
    function isActualAdmin(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return isSignedIn() && 
             userDoc.data.roleName == 'ADMINISTRATOR' &&
             userDoc.data.habilitationStatus == 'HABILITADO';
    }

    function isDefaultRoleName(roleName) {
      return roleName.upper() in ['ADMINISTRATOR', 'USER', 'CONSIGNOR', 'AUCTIONEER', 'AUCTION_ANALYST'];
    }

    match /roles/{roleId} {
      allow read, list: if true; // Temporarily open for easier debugging of AuthProvider

      allow create: if isSignedIn() &&
                      (
                        isActualAdmin(request.auth.uid) || 
                        isAdminEmail() // Admin-by-email can create default roles during bootstrap
                      ) &&
                      request.resource.data.name_normalized == request.resource.data.name.upper() &&
                      request.resource.data.keys().hasAll(['name', 'name_normalized', 'permissions', 'createdAt', 'updatedAt']) &&
                      request.resource.data.keys().hasOnly(['name', 'name_normalized', 'description', 'permissions', 'createdAt', 'updatedAt']);

      allow update: if isSignedIn() &&
                      (
                        // Case 1: User is an actual admin (has ADMINISTRATOR role in their user document)
                        (
                          isActualAdmin(request.auth.uid) &&
                          // Admin can update 'name' and 'name_normalized' ONLY IF it's NOT a default role
                          // OR if it IS a default role but the name/name_normalized are NOT changing.
                          (
                            !isDefaultRoleName(resource.data.name) || 
                            (
                              (!request.resource.data.keys().hasAny(['name']) || request.resource.data.name == resource.data.name) &&
                              (!request.resource.data.keys().hasAny(['name_normalized']) || request.resource.data.name_normalized == resource.data.name_normalized)
                            )
                          ) &&
                          // Admin cannot change name_normalized of default roles if it means changing the identity
                          (!request.resource.data.keys().hasAny(['name_normalized']) || !isDefaultRoleName(resource.data.name) || request.resource.data.name_normalized == resource.data.name_normalized) &&
                          request.resource.data.keys().hasOnly(['name', 'name_normalized', 'description', 'permissions', 'updatedAt'])
                        ) ||
                        // Case 2: Admin by email is bootstrapping/syncing default roles (e.g., "USER")
                        // Can ONLY update description and/or permissions. 'name' and 'name_normalized' MUST NOT be in the request keys.
                        (
                          isAdminEmail() &&
                          isDefaultRoleName(resource.data.name) && // Role being updated IS a default one
                          !request.resource.data.keys().hasAny(['name', 'name_normalized']) && // Explicitly forbid 'name' or 'name_normalized' in the write request keys
                           // Ensures at least one of description, permissions, or updatedAt is being affected/present
                          request.resource.data.diff(resource.data).affectedKeys().hasAny(['description', 'permissions', 'updatedAt']) &&
                           // Ensures ONLY description, permissions, or updatedAt are being affected
                          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['description', 'permissions', 'updatedAt'])
                        )
                      ) &&
                      request.resource.data.keys().hasAll(['updatedAt']); // updatedAt is always sent by the action

      allow delete: if isSignedIn() && isActualAdmin(request.auth.uid) && !isDefaultRoleName(resource.data.name);
    }

    match /users/{userId} {
      // Bootstrap: Allow an admin-by-email to create their own user document if it's for an ADMIN role
      allow create: if isAdminEmail() && isUser(userId) &&
                      request.resource.data.roleName == 'ADMINISTRATOR' &&
                      request.resource.data.habilitationStatus == 'HABILITADO' &&
                      request.resource.data.keys().hasAll(['uid', 'email', 'fullName', 'roleId', 'roleName', 'status', 'habilitationStatus', 'createdAt', 'updatedAt', 'permissions']) &&
                      request.resource.data.keys().size() == 10;
      
      allow read, get: if isUser(userId) || isActualAdmin(request.auth.uid);
      
      allow update: if 
        // Case 1: User updating their own profile (most fields)
        (
          isUser(userId) &&
          !request.resource.data.keys().hasAny(['roleId', 'roleName', 'status', 'habilitationStatus', 'permissions']) 
          // Add other fields a user *can* update here, e.g. hasOnly(['fullName', 'phone', 'updatedAt', ...])
        ) ||
        // Case 2: Admin updating any user's roleId, roleName, status, habilitationStatus, permissions
        (
          isActualAdmin(request.auth.uid) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['roleId', 'roleName', 'status', 'habilitationStatus', 'updatedAt', 'permissions', 'role']) // 'role' for legacy deletion
        ) ||
        // Case 3: Bootstrap for an admin-by-email to set their own role to ADMINISTRATOR if not already set
        // This is crucial for the AuthProvider flow.
        (
          isAdminEmail() && isUser(userId) && 
          (resource.data.roleId == null || resource.data.roleName != 'ADMINISTRATOR' || resource.data.habilitationStatus != 'HABILITADO') && // Condition for update to make sense
          request.resource.data.roleName == 'ADMINISTRATOR' &&
          request.resource.data.habilitationStatus == 'HABILITADO' &&
          // Verifies that the roleId being set actually corresponds to "ADMINISTRATOR" (assuming specific ID or lookup)
          // A safer check might be to ensure roleId exists if provided, or not change it if not provided by this specific bootstrap.
          // For simplicity, assuming the action sends the correct roleId for 'ADMINISTRATOR'
          (request.resource.data.roleId != null && request.resource.data.roleId == get(/databases/$(database)/documents/roles/$(request.resource.data.roleName.lower().replaceAll(' ', '_'))).id) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['roleId', 'roleName', 'updatedAt', 'habilitationStatus', 'permissions', 'role']) 
        );

      allow delete: if isActualAdmin(request.auth.uid); 
    }

    match /lotCategories/{categoryId} {
      allow read, list: if true;
      allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }
    
    match /states/{stateId} {
        allow read, list: if true;
        allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }
    match /cities/{cityId} {
        allow read, list: if true;
        allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }

    match /auctioneers/{auctioneerId} {
        allow read, list: if true;
        allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }
    
    match /sellers/{sellerId} {
        allow read, list: if true;
        allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }

    match /auctions/{auctionId} {
      allow read, list: if true; 
      allow create, update, delete: if isSignedIn() && 
                                      (isActualAdmin(request.auth.uid) || 
                                       (resource.data.sellerId != null && resource.data.sellerId == request.auth.uid) || // Seller can manage their own auctions
                                       (resource.data.auctioneerId != null && resource.data.auctioneerId == request.auth.uid) // Auctioneer can manage assigned auctions
                                      ); 
    }

    match /lots/{lotId} {
      allow read, list: if true;
      allow create, update, delete: if isSignedIn() && 
                                      (isActualAdmin(request.auth.uid) || 
                                       (resource.data.sellerId != null && resource.data.sellerId == request.auth.uid) || // Seller can manage their own lots
                                       (resource.data.auctioneerId != null && resource.data.auctioneerId == request.auth.uid) // Auctioneer can manage lots in assigned auctions
                                      );
    }
    
    match /mediaItems/{mediaItemId} {
      allow read, list: if true; 
      allow create, update, delete: if true; // Temporarily open
    }
    
    match /platformSettings/global {
        allow read: if true;
        allow write: if isSignedIn() && isActualAdmin(request.auth.uid);
    }
  }
}

    