
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Regras para a coleção 'lotCategories' (exemplo de CRUD anterior)
    match /lotCategories/{categoryId} {
      allow read: if true; // Qualquer um pode ler categorias
      // Apenas administradores autenticados (ou com um papel específico) devem escrever.
      // TODO: Refinar com base em custom claims (ex: request.auth.token.role == 'admin')
      allow create, update, delete: if request.auth != null;
    }

    // Regras para a coleção 'states' (exemplo de CRUD anterior)
    match /states/{stateId} {
      allow read: if true; // Qualquer um pode ler estados
      // Apenas administradores autenticados devem escrever.
      // TODO: Refinar com base em custom claims
      allow create, update, delete: if request.auth != null;
    }

    // Regras para a coleção 'cities' (exemplo de CRUD anterior)
    match /cities/{cityId} {
      allow read: if true; // Qualquer um pode ler cidades
      // Apenas administradores autenticados devem escrever.
      // TODO: Refinar com base em custom claims
      allow create, update, delete: if request.auth != null;
    }

    // Regras para a coleção 'auctioneers'
    match /auctioneers/{auctioneerId} {
      allow read: if true; // Qualquer um pode ler informações de leiloeiros
      // Apenas administradores autenticados devem escrever.
      // TODO: Refinar com base em custom claims
      allow create, update, delete: if request.auth != null;
    }

    // Regras para a coleção 'sellers'
    match /sellers/{sellerId} {
      allow read: if true; // Qualquer um pode ler informações de comitentes
      // Usuário pode criar seu próprio perfil de comitente se userId corresponder
      // allow create: if request.auth.uid == request.resource.data.userId;
      // Usuário pode atualizar seu próprio perfil de comitente
      // allow update: if request.auth.uid == resource.data.userId;
      // Apenas administradores autenticados devem criar, atualizar todos, ou deletar.
      // TODO: Refinar com base em custom claims (ex: e permitir que comitentes editem seus próprios dados)
      allow create, update, delete: if request.auth != null;
    }
    
    // Regras para a coleção 'auctions'
    match /auctions/{auctionId} {
      allow read: if true; // Qualquer um pode ler leilões
      // Apenas usuários autenticados (ou com papel específico) devem criar/editar/deletar.
      // TODO: Refinar com base em custom claims (ex: request.auth.token.role == 'admin' || request.auth.token.role == 'auctioneer')
      allow create, update, delete: if request.auth != null;
    }

    // Regras para a coleção 'lots'
    match /lots/{lotId} {
      allow read: if true; // Qualquer um pode ler lotes
      // Apenas usuários autenticados (ou com papel específico) devem criar/editar/deletar.
      // TODO: Refinar com base em custom claims
      allow create, update, delete: if request.auth != null;
    }

    // Regras para a coleção 'mediaItems'
    match /mediaItems/{mediaItemId} {
      allow read: if request.auth != null; // Permitir leitura para usuários autenticados (ex: para selecionar na biblioteca)
      // Apenas usuários autenticados (ou com papel específico, ex: admin, consignor) devem criar/editar/deletar.
      // TODO: Refinar com base em custom claims
      allow create, update, delete: if request.auth != null;
    }

    // --- NOVAS REGRAS ---

    // Regras para a coleção 'roles' (Perfis de Usuário)
    match /roles/{roleId} {
      // Qualquer usuário autenticado pode ler os perfis (necessário para o admin atribuir e para o sistema verificar permissões)
      allow read: if request.auth != null;
      // APENAS administradores deveriam poder criar, atualizar ou deletar perfis.
      // TODO: Alterar para if request.auth.token.role == 'ADMINISTRATOR' ou similar após a lógica de verificação de permissões ser implementada nas Server Actions.
      // Por enquanto, para facilitar o desenvolvimento da interface admin:
      allow create, update, delete: if request.auth != null;
    }

    // Regras para a coleção 'users' (Perfis de Usuário da Plataforma)
    match /users/{userId} {
      // Um usuário pode ler e atualizar seu próprio perfil.
      allow read, update: if request.auth.uid == userId;
      // Um usuário pode criar seu próprio documento de perfil (geralmente após o registro no Firebase Auth).
      allow create: if request.auth.uid == userId;
      
      // Administradores também podem ler e atualizar perfis de usuários (ex: para atribuir um perfil).
      // TODO: Alterar a parte de update para if request.auth.token.role == 'ADMINISTRATOR'
      // Por enquanto, para facilitar o desenvolvimento da interface admin:
      allow read, update: if request.auth != null; 
                                  // (Regra de read acima já permite owner, esta expande para outros auth users)
      
      // APENAS administradores deveriam poder deletar perfis de usuários.
      // TODO: Alterar para if request.auth.token.role == 'ADMINISTRATOR'
      allow delete: if request.auth != null;
    }

    // Regras para a coleção 'platformSettings'
    match /platformSettings/{settingsId} {
      // Qualquer usuário autenticado pode ler as configurações globais (se necessário para o frontend)
      allow read: if request.auth != null; 
      // APENAS administradores deveriam poder escrever nas configurações globais.
      // TODO: Alterar para if request.auth.token.role == 'ADMINISTRATOR'
      // Por enquanto, para facilitar o desenvolvimento da interface admin, especialmente via Admin SDK:
      allow write: if request.auth != null; 
    }

  }
}
