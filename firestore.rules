
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdminEmail() {
      // IMPORTANT: Update this list with your actual admin emails
      return request.auth.token.email in ["admin@bidexpert.com", "augusto.devcode@gmail.com", "analyst@bidexpert.com"];
    }

    function isActualAdmin(userId) {
      return isSignedIn() &&
             exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.roleName == 'ADMINISTRATOR';
    }
    
    function isAuctionAnalyst(userId) {
      return isSignedIn() &&
             exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.roleName == 'AUCTION_ANALYST';
    }

    function isDefaultRoleName(roleName) {
      return roleName in ['ADMINISTRATOR', 'USER', 'CONSIGNOR', 'AUCTIONEER', 'AUCTION_ANALYST'];
    }

    // platformSettings
    match /platformSettings/global {
      allow read: if true;
      allow write: if isActualAdmin(request.auth.uid);
    }

    // Roles Collection
    match /roles/{roleId} {
      allow read: if true; // TEMPORARILY VERY PERMISSIVE FOR DIAGNOSIS
      allow list: if true; // TEMPORARILY VERY PERMISSIVE FOR DIAGNOSIS

      allow create: if isSignedIn() &&
                      (
                        isActualAdmin(request.auth.uid) ||
                        isAdminEmail() // Simplified: an admin email can create any role needed for bootstrap
                      ) &&
                      request.resource.data.name_normalized == request.resource.data.name.upper() &&
                      request.resource.data.keys().hasOnly(['name', 'name_normalized', 'description', 'permissions', 'createdAt', 'updatedAt']); // Ensures only expected fields

      allow update: if isSignedIn() && isActualAdmin(request.auth.uid) &&
                      request.resource.data.name_normalized == request.resource.data.name.upper() &&
                      // Prevent renaming default roles to something non-default, or default to another default
                      (!isDefaultRoleName(resource.data.name) || (isDefaultRoleName(request.resource.data.name) && request.resource.data.name == resource.data.name)) &&
                      request.resource.data.keys().hasOnly(['name', 'name_normalized', 'description', 'permissions', 'updatedAt']);

      allow delete: if isSignedIn() && isActualAdmin(request.auth.uid) &&
                       !isDefaultRoleName(resource.data.name); // Prevent deleting default roles
    }

    // Users Collection
    match /users/{userId} {
      allow read, get: if isUser(userId) || isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid);
      allow list: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid));

      allow create: if isUser(userId) &&
                       request.resource.data.email == request.auth.token.email &&
                       (
                         !('roleId' in request.resource.data.keys()) ||
                         request.resource.data.roleId == null ||
                         (
                           request.resource.data.roleId is string &&
                           exists(/databases/$(database)/documents/roles/$(request.resource.data.roleId)) &&
                           get(/databases/$(database)/documents/roles/$(request.resource.data.roleId)).data.name_normalized == 'USER'
                         )
                       );

      allow update: if
                      // 1. Admin/Analyst updating user's habilitationStatus or role (Admin only for role)
                      (
                        isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid)) &&
                        request.resource.data.keys().hasAny(['habilitationStatus', 'roleId', 'roleName']) && // Ensure these are the fields being changed by admin/analyst
                        (!request.resource.data.keys().hasAny(['email', 'cpf']) || isActualAdmin(request.auth.uid) ) && // Only admin can change sensitive fields
                        (request.resource.data.keys().has('roleId') || request.resource.data.keys().has('roleName') ? isActualAdmin(request.auth.uid) : true) // Only admin can change role
                      ) ||
                      // 2. Admin bootstrapping THEMSELVES
                      (
                        isAdminEmail() && isUser(userId) &&
                        (resource.data.roleName == null || resource.data.roleName != 'ADMINISTRATOR') &&
                        request.resource.data.roleName == 'ADMINISTRATOR' &&
                        request.resource.data.keys().hasAll(['roleId', 'roleName', 'updatedAt']) && 
                        request.resource.data.keys().size() <= 7 // Allows for a few other fields like fullName, email, status, habilitationStatus
                      ) ||
                      // 3. User updating their own non-critical profile info
                      (
                        isUser(userId) &&
                        !request.resource.data.keys().hasAny(['roleId', 'roleName', 'status', 'habilitationStatus'])
                      );


      allow delete: if isActualAdmin(request.auth.uid);
    }

    // LotCategories Collection
    match /lotCategories/{categoryId} {
      allow read: if true;
      allow list: if true;
      allow create, update, delete: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid));
    }

    // States Collection
    match /states/{stateId} {
      allow read: if true;
      allow list: if true;
      allow create, update, delete: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid));
    }

    // Cities Collection
    match /cities/{cityId} {
      allow read: if true;
      allow list: if true;
      allow create, update, delete: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid));
    }

    // Auctioneers Collection
    match /auctioneers/{auctioneerId} {
      allow read: if true;
      allow list: if true;
      allow create, update, delete: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid));
    }

    // Sellers Collection
    match /sellers/{sellerId} {
      allow read: if true;
      allow list: if true;
      allow create: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid));
      allow update: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid) || (isUser(resource.data.userId) && !request.resource.data.keys().hasAny(['userId', 'roleId', 'roleName'])));
      allow delete: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid));
    }

    // Auctions Collection
    match /auctions/{auctionId} {
      allow read: if true;
      allow list: if true;
      allow create, update, delete: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid));
    }

    // Lots Collection
    match /lots/{lotId} {
      allow read: if true;
      allow list: if true;
      allow create, update, delete: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid));
    }

    // Bids Collection (Placeholder - Define more specific rules when implemented)
    match /auctions/{auctionId}/lots/{lotId}/bids/{bidId} {
      allow read: if true; // Or perhaps only for participants/admin
      allow create: if isSignedIn() &&
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.habilitationStatus == 'HABILITADO';
      // No update/delete for bids usually
    }
    
    // MediaItems Collection
    match /mediaItems/{mediaItemId} {
      allow read: if true; // Publicly readable if URLs are public
      allow list: if isSignedIn(); // Only signed-in users (e.g., for selection)
      // Create: User needs to be signed in (e.g., admin, consignor uploading)
      // For simplicity, checking if user is admin or analyst. Could be more granular (e.g., isConsignorOfLot(mediaItem.linkedLotIds[0]))
      allow create: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid)); 
      allow update: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid)); 
      allow delete: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid));
    }
  }
}

    