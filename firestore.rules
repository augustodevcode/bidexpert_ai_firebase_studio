
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null && request.auth.uid != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdminEmail() {
      return isSignedIn() && request.auth.token.email in ['admin@bidexpert.com', 'augusto.devcode@gmail.com', 'analyst@bidexpert.com'];
    }
    
    function isActualAdmin(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return isSignedIn() && userDoc.data.roleName == 'ADMINISTRATOR';
    }

    function isDefaultRoleName(roleNameInDb) {
      // Ensure roleNameInDb is treated as a string for upper()
      return string(roleNameInDb).upper() in ['ADMINISTRATOR', 'USER', 'CONSIGNOR', 'AUCTIONEER', 'AUCTION_ANALYST'];
    }

    match /roles/{roleId} {
      allow read, list: if true;

      allow create: if isSignedIn() &&
                      (isActualAdmin(request.auth.uid) || isAdminEmail()) &&
                      request.resource.data.name_normalized == request.resource.data.name.upper() &&
                      request.resource.data.keys().hasAll(['name', 'name_normalized', 'permissions', 'createdAt', 'updatedAt']) &&
                      request.resource.data.keys().hasOnly(['name', 'name_normalized', 'description', 'permissions', 'createdAt', 'updatedAt']);

      allow update: if isSignedIn() &&
                      (
                        // Case 1: Actual Admin updating any role
                        (
                          isActualAdmin(request.auth.uid) &&
                          // For default roles, name and name_normalized must not change IF THEY ARE SENT in the request
                          // If they are not sent, this condition is implicitly true for those fields.
                          (
                            !isDefaultRoleName(resource.data.name) || // If not a default role, name can change
                            ( // If it IS a default role:
                              // name_normalized: allow if not in request OR if in request and unchanged
                              (!request.resource.data.keys().hasAny(['name_normalized']) || request.resource.data.name_normalized == resource.data.name_normalized) &&
                              // name: allow if not in request OR if in request and (new name.upper() == existing name_normalized)
                              (!request.resource.data.keys().hasAny(['name']) || request.resource.data.name.upper() == resource.data.name_normalized)
                            )
                          ) &&
                          // Allowed fields for general update by admin
                          request.resource.data.keys().hasOnly(['name', 'name_normalized', 'description', 'permissions', 'updatedAt']) &&
                          request.resource.data.keys().hasAll(['updatedAt']) // updatedAt is always sent
                        ) ||
                        // Case 2: Bootstrap/sync by isAdminEmail for Default Roles
                        (
                          isAdminEmail() && isDefaultRoleName(resource.data.name) &&
                          // name_normalized MUST NOT be in the request OR, if it is, IT MUST be equal to the existing one.
                          (!request.resource.data.keys().hasAny(['name_normalized']) || request.resource.data.name_normalized == resource.data.name_normalized) &&
                          // name MUST NOT be in the request OR, if it is, ITS UPPERCASE VALUE MUST be equal to the existing name_normalized.
                          (!request.resource.data.keys().hasAny(['name']) || request.resource.data.name.upper() == resource.data.name_normalized) &&
                          // Only 'description', 'permissions', and 'updatedAt' are expected to be *actually changed* by this bootstrap/sync path.
                          // Other fields in request.resource.data, if present (like name or name_normalized), must pass the checks above (i.e., not effectively changing identity).
                          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['description', 'permissions', 'updatedAt']) &&
                          request.resource.data.keys().hasAll(['updatedAt'])
                        )
                      );
      
      allow delete: if isSignedIn() && isActualAdmin(request.auth.uid) && !isDefaultRoleName(resource.data.name);
    }

    match /users/{userId} {
      allow create: if isAdminEmail() && 
                      request.auth.uid == request.resource.data.uid && // User can only create their own doc during initial setup by admin-flagged email
                      request.resource.data.roleName == 'ADMINISTRATOR' &&
                      request.resource.data.permissions.hasAny(['manage_all']) && // Ensure permissions array is present and has 'manage_all'
                      request.resource.data.keys().hasAll(['uid', 'email', 'fullName', 'roleId', 'roleName', 'status', 'habilitationStatus', 'createdAt', 'updatedAt', 'permissions']) &&
                      request.resource.data.keys().size() >= 10; // Ensure permissions is part of the count if not empty

      allow read, get: if isSignedIn() && (isUser(userId) || isActualAdmin(request.auth.uid));
      
      allow update: if isSignedIn() &&
        (
          // Case 1: User updating their own profile (limited fields)
          (
            isUser(userId) &&
            !request.resource.data.keys().hasAny(['roleId', 'roleName', 'status', 'habilitationStatus', 'permissions', 'role']) && // Cannot change sensitive fields
            request.resource.data.keys().hasAll(['updatedAt']) // Must always include updatedAt
            // Add other allowed fields here like: .hasOnly(['fullName', 'cpf', ..., 'updatedAt'])
          ) ||
          // Case 2: Actual Admin updating any user's role/status
          (
            isActualAdmin(request.auth.uid) &&
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['roleId', 'roleName', 'status', 'habilitationStatus', 'updatedAt', 'permissions', 'role']) &&
            request.resource.data.keys().hasAll(['updatedAt'])
          ) ||
          // Case 3: Admin by email, bootstrapping THEMSELVES to full Admin
          (
            isAdminEmail() && isUser(userId) && 
            // Condition to ensure this is a one-time bootstrap or correction:
            (resource.data.roleId == null || resource.data.roleName != 'ADMINISTRATOR' || resource.data.habilitationStatus != 'HABILITADO') &&
            request.resource.data.roleName == 'ADMINISTRATOR' &&
            request.resource.data.habilitationStatus == 'HABILITADO' &&
            request.resource.data.permissions.hasAny(['manage_all']) &&
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['roleId', 'roleName', 'updatedAt', 'habilitationStatus', 'permissions', 'role']) &&
            request.resource.data.keys().hasAll(['updatedAt'])
          )
        );

      allow delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }
    
    match /lotCategories/{categoryId} {
      allow read, list: if true;
      allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }
    
    match /states/{stateId} {
        allow read, list: if true;
        allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }
    match /cities/{cityId} {
        allow read, list: if true;
        allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }

    match /auctioneers/{auctioneerId} {
        allow read, list: if true;
        allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }
    
    match /sellers/{sellerId} {
        allow read, list: if true;
        allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }

    match /auctions/{auctionId} {
      allow read, list: if true; 
      allow create, update, delete: if isSignedIn() && 
                                      (isActualAdmin(request.auth.uid) || 
                                       (request.resource.data.sellerId == request.auth.uid || resource.data.sellerId == request.auth.uid)
                                      );
    }

    match /lots/{lotId} {
      allow read, list: if true;
      allow create, update, delete: if isSignedIn() && 
                                      (isActualAdmin(request.auth.uid) || 
                                       (request.resource.data.sellerId == request.auth.uid || resource.data.sellerId == request.auth.uid)
                                      );
    }
    
    match /mediaItems/{mediaItemId} {
      allow read, list: if true;
      // Temporarily open for testing, refine later
      allow create, update, delete: if true; 
    }
    
    match /platformSettings/global {
        allow read: if true;
        allow write: if isSignedIn() && isActualAdmin(request.auth.uid);
    }
  }
}

    