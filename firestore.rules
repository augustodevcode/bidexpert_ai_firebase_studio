
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdminEmail() {
      // IMPORTANT: Update this list with your actual admin emails
      // Make sure the email casing matches exactly what's in Firebase Auth
      return request.auth.token.email in ["admin@bidexpert.com", "augusto.devcode@gmail.com", "analyst@bidexpert.com"];
    }

    function isActualAdmin(userId) {
      return isSignedIn() &&
             exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.roleName == 'ADMINISTRATOR';
    }

    function isAuctionAnalyst(userId) {
      return isSignedIn() &&
             exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.roleName == 'AUCTION_ANALYST';
    }

    function isDefaultRoleName(roleName) {
      return roleName in ['ADMINISTRATOR', 'USER', 'CONSIGNOR', 'AUCTIONEER', 'AUCTION_ANALYST'];
    }
    
    function isStandardUserField(key) {
      return key in ['fullName', 'cpf', 'rgNumber', 'rgIssuer', 'rgIssueDate', 'rgState', 'dateOfBirth', 'cellPhone', 'homePhone', 'gender', 'profession', 'nationality', 'maritalStatus', 'propertyRegime', 'spouseName', 'spouseCpf', 'zipCode', 'street', 'number', 'complement', 'neighborhood', 'city', 'state', 'optInMarketing', 'avatarUrl', 'dataAiHint', 'activeBids', 'auctionsWon', 'itemsSold', 'sellerProfileId', 'updatedAt', 'createdAt', 'email', 'uid'];
    }

    // platformSettings
    match /platformSettings/global {
      allow read: if true;
      allow write: if isActualAdmin(request.auth.uid);
    }

    // Roles Collection
    match /roles/{roleId} {
      allow read: if true; // Temporarily open for easier debugging
      allow list: if true; // Temporarily open

      allow create: if isSignedIn() &&
                      (
                        isActualAdmin(request.auth.uid) ||
                        isAdminEmail() // Simplificado: se for adminEmail, pode criar qualquer role (para bootstrap)
                      ) &&
                      request.resource.data.name_normalized == request.resource.data.name.upper() &&
                      request.resource.data.keys().hasOnly(['name', 'name_normalized', 'description', 'permissions', 'createdAt', 'updatedAt']);


      allow update: if isSignedIn() && isActualAdmin(request.auth.uid) &&
                      request.resource.data.name_normalized == request.resource.data.name.upper() &&
                      (!isDefaultRoleName(resource.data.name) || request.resource.data.name == resource.data.name) && // Prevent renaming default roles unless name is identical
                      request.resource.data.keys().hasOnly(['name', 'name_normalized', 'description', 'permissions', 'updatedAt']);


      allow delete: if isSignedIn() && isActualAdmin(request.auth.uid) &&
                       !isDefaultRoleName(resource.data.name);
    }

    // Users Collection
    match /users/{userId} {
      allow read, get: if isUser(userId) || isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid);
      allow list: if isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid);

      allow create: if isUser(userId) &&
                       request.resource.data.email == request.auth.token.email &&
                       (
                         // Condição para usuários normais se registrarem com perfil USER ou sem perfil
                         (
                           !('roleId' in request.resource.data.keys()) ||
                           request.resource.data.roleId == null ||
                           (
                             request.resource.data.roleId is string &&
                             exists(/databases/$(database)/documents/roles/$(request.resource.data.roleId)) &&
                             get(/databases/$(database)/documents/roles/$(request.resource.data.roleId)).data.name == 'USER'
                           )
                         ) ||
                         // Condição para um adminEmail criar seu próprio perfil como ADMINISTRATOR
                         (
                           isAdminEmail() &&
                           request.resource.data.roleName == 'ADMINISTRATOR' &&
                           request.resource.data.keys().hasAll(['uid', 'email', 'fullName', 'roleId', 'roleName', 'status', 'habilitationStatus', 'createdAt', 'updatedAt']) &&
                           request.resource.data.keys().size() <= 10 // Permitindo um campo extra como 'optInMarketing' ou 'avatarUrl'
                         )
                       );

      allow update: if
                      // 1. Admin fazendo bootstrap em si mesmo OU atualizando seu próprio perfil
                      (
                        isAdminEmail() && isUser(userId) &&
                        request.resource.data.roleName == 'ADMINISTRATOR' && // Tentando ser/manter admin
                        // Permite atualizar roleId, roleName, habilitationStatus e outros campos básicos durante bootstrap ou auto-edição
                        request.resource.data.keys().hasAll(['roleId', 'roleName', 'updatedAt', 'habilitationStatus']) // Campos base para role
                        // Campos opcionais que podem ser atualizados:
                        // && (!request.resource.data.keys().hasAny(['email', 'uid', 'createdAt'])) // Não permitir mudar email, uid, createdAt
                      ) ||
                      // 2. Admin real gerenciando outros usuários ou seu próprio perfil (após bootstrap)
                      (
                        isActualAdmin(request.auth.uid) &&
                        // Admin pode mudar roleId, roleName, status, habilitationStatus
                        // Não permitir que admin mude o email ou uid do usuário
                        !request.resource.data.keys().hasAny(['email', 'uid', 'createdAt'])
                      ) ||
                       // 3. Analista de Leilões atualizando APENAS habilitationStatus
                      (
                        isAuctionAnalyst(request.auth.uid) &&
                        request.resource.data.keys().hasAll(['habilitationStatus', 'updatedAt']) &&
                        request.resource.data.keys().size() == 2 // Apenas estes dois campos
                      ) ||
                      // 4. Usuário comum atualizando seu próprio perfil (sem mudar roles/status/habilitation)
                      (
                        isUser(userId) &&
                        !request.resource.data.keys().hasAny(['roleId', 'roleName', 'status', 'habilitationStatus'])
                      );

      allow delete: if isActualAdmin(request.auth.uid);
    }

    // LotCategories Collection
    match /lotCategories/{categoryId} {
      allow read: if true;
      allow list: if true;
      allow create, update, delete: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid));
    }

    // States Collection
    match /states/{stateId} {
      allow read: if true;
      allow list: if true;
      allow create, update, delete: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid));
    }

    // Cities Collection
    match /cities/{cityId} {
      allow read: if true;
      allow list: if true;
      allow create, update, delete: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid));
    }

    // Auctioneers Collection
    match /auctioneers/{auctioneerId} {
      allow read: if true;
      allow list: if true;
      allow create, update, delete: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid));
    }

    // Sellers Collection
    match /sellers/{sellerId} {
      allow read: if true;
      allow list: if true;
      // Admin ou Analista podem criar. Comitente poderia criar o seu próprio se associado ao userId.
      allow create: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid));
      allow update: if isSignedIn() &&
                      (
                        isActualAdmin(request.auth.uid) ||
                        isAuctionAnalyst(request.auth.uid) ||
                        (isUser(resource.data.userId) && !request.resource.data.keys().hasAny(['userId', 'roleId', 'roleName']))
                      );
      allow delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }

    // Auctions Collection
    match /auctions/{auctionId} {
      allow read: if true;
      allow list: if true;
      allow create: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid)); // Analista pode precisar criar
      allow update: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid)); // Analista pode precisar editar
      allow delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }

    // Lots Collection
    match /lots/{lotId} {
      allow read: if true;
      allow list: if true;
      allow create: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid));
      allow update: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid));
      allow delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }

    // MediaItems Collection
    match /mediaItems/{mediaItemId} {
      allow read: if true;
      allow list: if isSignedIn(); // Usuários logados podem listar para selecionar
      // Create: Qualquer usuário logado (se estiver criando um lote/leilão)
      // Ou mais restrito: admin, analista, comitente, leiloeiro
      allow create: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid) || request.auth.token.email.endsWith('@bidexpert.com')); // Exemplo de restrição
      allow update: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid)); // Ou proprietário da mídia (requer campo uploadedBy)
      allow delete: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid)); // Ou proprietário
    }
  }
}

    