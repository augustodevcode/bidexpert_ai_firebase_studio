
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdminEmail() {
      // IMPORTANT: Update this list with your actual admin emails
      return request.auth.token.email in ["admin@bidexpert.com", "augusto.devcode@gmail.com", "analyst@bidexpert.com"];
    }

    function isActualAdmin(userId) {
      return isSignedIn() &&
             exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.roleName == 'ADMINISTRATOR';
    }
    
    function isAuctionAnalyst(userId) {
      return isSignedIn() &&
             exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.roleName == 'AUCTION_ANALYST';
    }

    function isDefaultRoleName(roleName) {
      return roleName in ['ADMINISTRATOR', 'USER', 'CONSIGNOR', 'AUCTIONEER', 'AUCTION_ANALYST'];
    }

    // platformSettings
    match /platformSettings/global {
      allow read: if true;
      allow write: if isActualAdmin(request.auth.uid);
    }

    // Roles Collection
    match /roles/{roleId} {
      allow read: if isSignedIn(); // Admins and users who need to check role details
      allow list: if isSignedIn(); 

      // Admin pode criar qualquer perfil.
      // Um email na lista de admin PODE CRIAR OS PERFIS PADRÃO durante o bootstrap.
      allow create: if isSignedIn() &&
                      (
                        isActualAdmin(request.auth.uid) ||
                        isAdminEmail() // Allows admin emails to create any role during bootstrap
                      ) &&
                      request.resource.data.name_normalized == request.resource.data.name.upper() &&
                      // Ensures essential fields are present, allows for optional 'description'
                      request.resource.data.keys().hasAll(['name', 'name_normalized', 'permissions', 'createdAt', 'updatedAt']) &&
                      (!request.resource.data.keys().has('description') || request.resource.data.description is string);


      allow update: if isSignedIn() && isActualAdmin(request.auth.uid) &&
                      request.resource.data.name_normalized == request.resource.data.name.upper() &&
                      // Prevent renaming default roles to something else, but allow updating their permissions/description
                      (!isDefaultRoleName(resource.data.name) || request.resource.data.name == resource.data.name) && 
                      request.resource.data.keys().hasAll(['name', 'name_normalized', 'permissions', 'updatedAt']) &&
                      (!request.resource.data.keys().has('description') || request.resource.data.description is string);


      allow delete: if isSignedIn() && isActualAdmin(request.auth.uid) &&
                       !isDefaultRoleName(resource.data.name); // Prevent deleting default roles
    }

    // Users Collection
    match /users/{userId} {
      allow read, get: if isUser(userId) || isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid);
      allow list: if isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid);

      allow create: if isUser(userId) &&
                       request.resource.data.email == request.auth.token.email &&
                       (
                         !('roleId' in request.resource.data.keys()) ||
                         request.resource.data.roleId == null ||
                         (
                           request.resource.data.roleId is string &&
                           exists(/databases/$(database)/documents/roles/$(request.resource.data.roleId)) &&
                           get(/databases/$(database)/documents/roles/$(request.resource.data.roleId)).data.name_normalized == 'USER'
                         )
                       ) &&
                       (!('habilitationStatus' in request.resource.data.keys()) || request.resource.data.habilitationStatus == 'PENDING_DOCUMENTS');

      allow update: if 
                      // 1. Admin fazendo bootstrap em si mesmo para ADMINISTRATOR
                      (
                        isAdminEmail() && isUser(userId) &&
                        (resource.data.roleName == null || resource.data.roleName != 'ADMINISTRATOR') && // Only if not already admin
                        request.resource.data.roleName == 'ADMINISTRATOR' &&
                        request.resource.data.keys().hasAll(['roleId', 'roleName', 'updatedAt']) && // Must set these for bootstrap
                        (!request.resource.data.keys().has('habilitationStatus') || request.resource.data.habilitationStatus == 'HABILITADO')
                      ) ||
                      // 2. Admin real gerenciando outros usuários ou seu próprio perfil (após bootstrap)
                      (
                        isActualAdmin(request.auth.uid) &&
                        // Admin can change roleId, roleName, status, habilitationStatus for any user
                        (
                           !request.resource.data.keys().hasAny(['email', 'createdAt', 'uid']) || // Cannot change these immutable fields
                           request.resource.data.email == resource.data.email // Email can only be set if it matches existing or is not changing
                        )
                      ) ||
                      // 3. Analista de Leilão gerenciando habilitação
                      (
                        isAuctionAnalyst(request.auth.uid) &&
                        request.resource.data.keys().hasOnly(['habilitationStatus', 'updatedAt']) // Analyst can only update these fields
                      ) ||
                      // 4. Usuário comum atualizando seu próprio perfil (sem mudar roles/status/habilitation)
                      (
                        isUser(userId) &&
                        !request.resource.data.keys().hasAny(['roleId', 'roleName', 'status', 'habilitationStatus', 'email', 'createdAt', 'uid'])
                      );

      allow delete: if isActualAdmin(request.auth.uid);
    }

    // LotCategories Collection
    match /lotCategories/{categoryId} {
      allow read, list: if true; // Public read
      allow create, update, delete: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid));
    }

    // States Collection
    match /states/{stateId} {
      allow read, list: if true; // Public read
      allow create, update, delete: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid));
    }

    // Cities Collection
    match /cities/{cityId} {
      allow read, list: if true; // Public read
      allow create, update, delete: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid));
    }

    // Auctioneers Collection
    match /auctioneers/{auctioneerId} {
      allow read, list: if true; // Public read
      allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid); // Only full admin for now
    }

    // Sellers Collection
    match /sellers/{sellerId} {
      allow read, list: if true; // Public read
      allow create: if isSignedIn() && isActualAdmin(request.auth.uid); 
      allow update: if isSignedIn() && (isActualAdmin(request.auth.uid) || (isUser(resource.data.userId) && !request.resource.data.keys().hasAny(['userId', 'roleId', 'roleName'])));
      allow delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }

    // Auctions Collection
    match /auctions/{auctionId} {
      allow read, list: if true; // Public read
      allow create, update, delete: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid)); // Analyst can manage auctions too
    }

    // Lots Collection
    match /lots/{lotId} {
      allow read, list: if true; // Public read
      allow create, update, delete: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid)); // Analyst can manage lots
    }
    
    // MediaItems Collection
    match /mediaItems/{mediaItemId} {
      allow read: if true;
      allow list: if isSignedIn(); // Any signed-in user can list (e.g. for selection)
      allow create: if isSignedIn(); // Any signed-in user can upload for now, could be restricted later
      allow update: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid)); // Admins/Analysts can edit metadata
      allow delete: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAuctionAnalyst(request.auth.uid)); // Admins/Analysts can delete
    }
  }
}
