
// firestore.rules
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null && request.auth.uid != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdminEmail() {
      // Certifique-se de que esta lista está atualizada com os e-mails de admin corretos
      return isSignedIn() && request.auth.token.email in ['admin@bidexpert.com', 'augusto.devcode@gmail.com', 'analyst@bidexpert.com'];
    }
    
    function isActualAdmin(userId) {
      // Esta função pode falhar se o documento do usuário ainda não tem roleName='ADMINISTRATOR'
      // ou se as permissões para ler /users/{userId} não estão configuradas para permitir a leitura pela regra.
      // Para o bootstrap inicial, dependa mais de isAdminEmail() ou de um estado temporário.
      return isSignedIn() && get(/databases/$(database)/documents/users/$(userId)).data.roleName == 'ADMINISTRATOR';
    }

    function isDefaultRoleName(roleNameInDb) {
      return roleNameInDb.upper() in ['ADMINISTRATOR', 'USER', 'CONSIGNOR', 'AUCTIONEER', 'AUCTION_ANALYST'];
    }

    match /roles/{roleId} {
      // TEMPORÁRIO PARA DESBLOQUEAR: Permitir leitura e escrita por qualquer usuário autenticado.
      // ISSO É INSEGURO PARA PRODUÇÃO.
      allow read: if true;
      allow write: if isSignedIn(); 
      // Antes: allow read, list: if true;
      // Antes: allow create: if isSignedIn() && (isActualAdmin(request.auth.uid) || isAdminEmail()) && ...;
      // Antes: allow update: if isSignedIn() && ((isActualAdmin(request.auth.uid) && ...) || (isAdminEmail() && ...));
      // Antes: allow delete: if isSignedIn() && isActualAdmin(request.auth.uid) && !isDefaultRoleName(resource.data.name);
    }

    match /users/{userId} {
      // TEMPORÁRIO PARA DESBLOQUEAR:
      allow read: if isSignedIn(); // Permitir que usuários autenticados leiam perfis (para getRole e getUsersWithRoles)
      allow get: if isUser(userId) || isActualAdmin(request.auth.uid) || isAdminEmail(); // Permite que admin/email admin leiam qualquer perfil
      allow create, update: if isSignedIn(); // Permitir que usuários autenticados criem/atualizem (para bootstrap)
      allow delete: if isSignedIn() && isActualAdmin(request.auth.uid); // Manter delete para admin

      // REGRAS ANTERIORES COMENTADAS:
      // allow create: if isAdminEmail() && isUser(userId) &&
      //                 request.resource.data.roleName == 'ADMINISTRATOR' &&
      //                 request.resource.data.permissions.hasAny(['manage_all']) &&
      //                 request.resource.data.keys().hasAll(['uid', 'email', 'fullName', 'roleId', 'roleName', 'status', 'habilitationStatus', 'createdAt', 'updatedAt', 'permissions']) &&
      //                 request.resource.data.keys().size() == 10;
      
      // allow read, get: if isUser(userId) || isActualAdmin(request.auth.uid);
      
      // allow update: if 
      //   (
      //     isUser(userId) &&
      //     !request.resource.data.keys().hasAny(['roleId', 'roleName', 'status', 'habilitationStatus', 'permissions', 'role'])
      //   ) ||
      //   (
      //     isActualAdmin(request.auth.uid) &&
      //     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['roleId', 'roleName', 'status', 'habilitationStatus', 'updatedAt', 'permissions', 'role'])
      //   ) ||
      //   (
      //     isAdminEmail() && isUser(userId) && 
      //     (resource.data.roleId == null || resource.data.roleName != 'ADMINISTRATOR' || resource.data.habilitationStatus != 'HABILITADO') &&
      //     request.resource.data.roleName == 'ADMINISTRATOR' &&
      //     request.resource.data.habilitationStatus == 'HABILITADO' &&
      //     request.resource.data.permissions.hasAny(['manage_all']) &&
      //     // request.resource.data.roleId != null && request.resource.data.roleId == get(/databases/$(database)/documents/roles/$(request.resource.data.roleName.lower().replaceAll(' ', '_'))).id &&
      //     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['roleId', 'roleName', 'updatedAt', 'habilitationStatus', 'permissions', 'role'])
      //   );

      // allow delete: if isActualAdmin(request.auth.uid);
    }

    match /lotCategories/{categoryId} {
      allow read, list: if true;
      allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }
    
    match /states/{stateId} {
        allow read, list: if true;
        allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }
    match /cities/{cityId} {
        allow read, list: if true;
        allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }

    match /auctioneers/{auctioneerId} {
        allow read, list: if true;
        allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }
    
    match /sellers/{sellerId} {
        allow read, list: if true;
        allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }

    match /auctions/{auctionId} {
      allow read, list: if true; 
      allow create, update, delete: if isSignedIn() && 
                                      (isActualAdmin(request.auth.uid) || 
                                       (request.resource.data.sellerId == request.auth.uid || resource.data.sellerId == request.auth.uid)
                                      );
    }

    match /lots/{lotId} {
      allow read, list: if true;
      allow create, update, delete: if isSignedIn() && 
                                      (isActualAdmin(request.auth.uid) || 
                                       (request.resource.data.sellerId == request.auth.uid || resource.data.sellerId == request.auth.uid)
                                      );
    }
    
    match /mediaItems/{mediaItemId} {
      allow read, list: if true;
      // Temporariamente aberto para facilitar desenvolvimento, idealmente seria restrito a usuários autenticados
      allow create, update, delete: if true; // Ou if isSignedIn();
    }
    
    match /platformSettings/global {
        allow read: if true;
        allow write: if isSignedIn() && isActualAdmin(request.auth.uid);
    }
  }
}

    