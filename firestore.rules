
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null && request.auth.uid != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdminEmail() {
      return isSignedIn() && request.auth.token.email in ['admin@bidexpert.com', 'augusto.devcode@gmail.com', 'analyst@bidexpert.com'];
    }
    
    function isActualAdmin(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return isSignedIn() && userDoc.data.roleName == 'ADMINISTRATOR';
    }

    function isDefaultRoleName(roleNameInDb) {
      // Ensure roleNameInDb is treated as a string for .upper()
      let upperRoleName = string(roleNameInDb).upper();
      return upperRoleName in ['ADMINISTRATOR', 'USER', 'CONSIGNOR', 'AUCTIONEER', 'AUCTION_ANALYST'];
    }

    match /roles/{roleId} {
      allow read, list: if true;

      allow create: if isSignedIn() &&
                      (isActualAdmin(request.auth.uid) || isAdminEmail()) &&
                      request.resource.data.name_normalized == request.resource.data.name.upper() &&
                      request.resource.data.keys().hasAll(['name', 'name_normalized', 'permissions', 'createdAt', 'updatedAt']) &&
                      request.resource.data.keys().hasOnly(['name', 'name_normalized', 'description', 'permissions', 'createdAt', 'updatedAt']);

      allow update: if isSignedIn() &&
                      (
                        // Case 1: Actual Admin updating any role
                        (
                          isActualAdmin(request.auth.uid) &&
                          // For default roles, name and name_normalized must not change if they are part of the request
                          (!isDefaultRoleName(resource.data.name) || 
                            ((!request.resource.data.keys().has('name') || request.resource.data.name == resource.data.name) && 
                             (!request.resource.data.keys().has('name_normalized') || request.resource.data.name_normalized == resource.data.name_normalized))
                          ) &&
                          // Allowed fields for general update by admin
                          request.resource.data.keys().hasOnly(['name', 'name_normalized', 'description', 'permissions', 'updatedAt']) &&
                          request.resource.data.keys().hasAll(['updatedAt']) // updatedAt is always sent
                        ) ||
                        // Case 2: Bootstrap/sync by isAdminEmail for Default Roles
                        (
                          isAdminEmail() && isDefaultRoleName(resource.data.name) &&
                          // Name and name_normalized MUST match existing values IF they are present in the request.
                          // The action should only send description/permissions if name/name_normalized are unchanged.
                          (!request.resource.data.keys().has('name') || request.resource.data.name == resource.data.name) &&
                          (!request.resource.data.keys().has('name_normalized') || request.resource.data.name_normalized == resource.data.name_normalized) &&
                          // Ensures that ONLY description, permissions, and updatedAt are being modified OR
                          // if name/name_normalized are sent, they are identical to existing.
                          request.resource.data.keys().hasOnly(['description', 'permissions', 'updatedAt', 'name', 'name_normalized']) &&
                          request.resource.data.keys().hasAll(['updatedAt'])
                        )
                      );
      
      allow delete: if isSignedIn() && isActualAdmin(request.auth.uid) && !isDefaultRoleName(resource.data.name);
    }

    match /users/{userId} {
      allow create: if isAdminEmail() && isUser(userId) &&
                      request.resource.data.roleName == 'ADMINISTRATOR' &&
                      request.resource.data.permissions.hasAny(['manage_all']) && // Check if permissions array contains 'manage_all'
                      request.resource.data.keys().hasAll(['uid', 'email', 'fullName', 'roleId', 'roleName', 'status', 'habilitationStatus', 'createdAt', 'updatedAt', 'permissions']) &&
                      request.resource.data.keys().size() == 10;
      
      allow read, get: if isUser(userId) || isActualAdmin(request.auth.uid);
      
      allow update: if 
        // Case 1: User updating their own profile (limited fields)
        (
          isUser(userId) &&
          !request.resource.data.keys().hasAny(['roleId', 'roleName', 'status', 'habilitationStatus', 'permissions', 'role']) 
        ) ||
        // Case 2: Actual admin updating any user's role/status/permissions
        (
          isActualAdmin(request.auth.uid) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['roleId', 'roleName', 'status', 'habilitationStatus', 'updatedAt', 'permissions', 'role'])
        ) ||
        // Case 3: Bootstrap for isAdminEmail to become ActualAdmin
        (
          isAdminEmail() && isUser(userId) && 
          (resource.data.roleId == null || resource.data.roleName != 'ADMINISTRATOR' || resource.data.habilitationStatus != 'HABILITADO') &&
          request.resource.data.roleName == 'ADMINISTRATOR' &&
          request.resource.data.habilitationStatus == 'HABILITADO' &&
          request.resource.data.permissions.hasAny(['manage_all']) && // Check if permissions array contains 'manage_all'
          // Ensure the roleId in the request, if provided, matches an actual "ADMINISTRATOR" role document's ID
          (!request.resource.data.keys().has('roleId') || request.resource.data.roleId == null || request.resource.data.roleId == get(/databases/$(database)/documents/roles/$(request.resource.data.roleName.lower().replaceAll(' ', '_'))).id) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['roleId', 'roleName', 'updatedAt', 'habilitationStatus', 'permissions', 'role'])
        );

      allow delete: if isActualAdmin(request.auth.uid);
    }
    
    match /lotCategories/{categoryId} {
      allow read, list: if true;
      allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }
    
    match /states/{stateId} {
        allow read, list: if true;
        allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }
    match /cities/{cityId} {
        allow read, list: if true;
        allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }

    match /auctioneers/{auctioneerId} {
        allow read, list: if true;
        allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }
    
    match /sellers/{sellerId} {
        allow read, list: if true;
        allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }

    match /auctions/{auctionId} {
      allow read, list: if true; 
      allow create, update, delete: if isSignedIn() && 
                                      (isActualAdmin(request.auth.uid) || 
                                       (request.resource.data.sellerId == request.auth.uid || resource.data.sellerId == request.auth.uid)
                                      );
    }

    match /lots/{lotId} {
      allow read, list: if true;
      allow create, update, delete: if isSignedIn() && 
                                      (isActualAdmin(request.auth.uid) || 
                                       (request.resource.data.sellerId == request.auth.uid || resource.data.sellerId == request.auth.uid)
                                      );
    }
    
    match /mediaItems/{mediaItemId} {
      allow read, list: if true;
      allow create, update, delete: if true; // Permissions managed by application logic/user roles
    }
    
    match /platformSettings/global {
        allow read: if true;
        allow write: if isSignedIn() && isActualAdmin(request.auth.uid);
    }
  }
}

    