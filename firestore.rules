
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow read access to general collections if needed for public data
    match /lotCategories/{categoryId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.role == 'ADMIN'; // Example: Only admins can write
    }
    match /states/{stateId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.role == 'ADMIN';
    }
    match /cities/{cityId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.role == 'ADMIN';
    }
    match /auctioneers/{auctioneerId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.role == 'ADMIN';
    }
     match /sellers/{sellerId} {
      allow read: if true;
      allow write: if request.auth != null && (request.auth.token.role == 'ADMIN' || request.auth.uid == resource.data.userId);
    }
    match /auctions/{auctionId} {
      allow read: if true;
      allow write: if request.auth != null && (request.auth.token.role == 'ADMIN' || request.auth.uid == resource.data.auctioneerId || request.auth.uid == resource.data.sellerId);
    }
    match /lots/{lotId} {
      allow read: if true;
      allow write: if request.auth != null && (request.auth.token.role == 'ADMIN' || request.auth.uid == resource.data.auctioneerId || request.auth.uid == resource.data.sellerId);
    }
     match /mediaItems/{mediaItemId} {
      allow read: if true; // Or restrict as needed
      // Temporarily allow authenticated write for easier setup of media library
      // TODO: Secure this rule in production, e.g., allow write: if request.auth != null && request.auth.token.role == 'ADMIN';
      allow write: if request.auth != null; 
    }
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
      // Admins might need broader access, e.g.,
      // allow read, write: if request.auth != null && (request.auth.uid == userId || request.auth.token.role == 'ADMIN');
    }

    // Platform Settings:
    // Allow authenticated users to read (e.g., client-side might need some settings).
    // For now, allow authenticated users to write to facilitate Admin SDK setup.
    // TODO: In production, restrict write to specific admin roles or UIDs.
    // e.g., allow write: if request.auth != null && request.auth.token.role == 'ADMIN';
    match /platformSettings/{settingsId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // TEMPORARY - More open for easier Admin SDK setup
                                           // In production: allow write: if request.auth != null && request.auth.token.role == 'ADMIN';
    }
  }
}
