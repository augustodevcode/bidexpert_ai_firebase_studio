
// firestore.rules
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions (mantidas para uso futuro, mas não estritamente necessárias para as regras abertas abaixo)
    function isSignedIn() {
      return request.auth != null && request.auth.uid != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdminEmail() {
      return isSignedIn() && request.auth.token.email in ['admin@bidexpert.com', 'augusto.devcode@gmail.com', 'analyst@bidexpert.com'];
    }
    
    function isActualAdmin(userId) {
      // Esta função dependerá que o documento do usuário seja atualizado corretamente.
      // Para as regras abertas, ela não será o fator limitante primário.
      return isSignedIn() && get(/databases/$(database)/documents/users/$(userId)).data.roleName == 'ADMINISTRATOR';
    }

    function isDefaultRoleName(roleNameInDb) {
      return roleNameInDb.upper() in ['ADMINISTRATOR', 'USER', 'CONSIGNOR', 'AUCTIONEER', 'AUCTION_ANALYST'];
    }

    // REGRAS TEMPORARIAMENTE ABERTAS PARA DESENVOLVIMENTO
    match /roles/{roleId} {
      allow read: if true; // Leitura pública para roles
      allow list: if true; // Leitura pública para roles
      allow create, update, delete: if isSignedIn(); // Qualquer usuário logado pode modificar roles (Temporário!)
    }

    match /users/{userId} {
      allow read, get: if isSignedIn(); // Qualquer usuário logado pode ler qualquer perfil (Temporário!)
      allow list: if isSignedIn() && isActualAdmin(request.auth.uid); // Apenas admins podem listar todos os usuários
      allow create: if isSignedIn() && isUser(userId); // Usuário pode criar seu próprio perfil
      allow update: if isSignedIn() && (isUser(userId) || isActualAdmin(request.auth.uid)); // Usuário pode atualizar seu perfil, admin pode atualizar qualquer um (Temporário!)
      allow delete: if isSignedIn() && isActualAdmin(request.auth.uid); // Apenas admins podem deletar usuários
    }
    // FIM DAS REGRAS TEMPORARIAMENTE ABERTAS

    match /lotCategories/{categoryId} {
      allow read, list: if true;
      allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }
    
    match /states/{stateId} {
        allow read, list: if true;
        allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }
    match /cities/{cityId} {
        allow read, list: if true;
        allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }

    match /auctioneers/{auctioneerId} {
        allow read, list: if true;
        allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }
    
    match /sellers/{sellerId} {
        allow read, list: if true;
        allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }

    match /auctions/{auctionId} {
      allow read, list: if true; 
      allow create, update, delete: if isSignedIn() && 
                                      (isActualAdmin(request.auth.uid) || 
                                       (request.resource.data.sellerId == request.auth.uid || resource.data.sellerId == request.auth.uid)
                                      );
    }

    match /lots/{lotId} {
      allow read, list: if true;
      allow create, update, delete: if isSignedIn() && 
                                      (isActualAdmin(request.auth.uid) || 
                                       (request.resource.data.sellerId == request.auth.uid || resource.data.sellerId == request.auth.uid)
                                      );
    }
    
    match /mediaItems/{mediaItemId} {
      allow read, list: if true;
      // Temporariamente aberto para escrita por qualquer usuário logado, para facilitar o desenvolvimento do upload.
      // TODO: Restringir para apenas admins ou usuários com permissões específicas de upload.
      allow create, update, delete: if isSignedIn(); 
    }
    
    match /platformSettings/global {
        allow read: if true;
        allow write: if isSignedIn() && isActualAdmin(request.auth.uid);
    }
  }
}
