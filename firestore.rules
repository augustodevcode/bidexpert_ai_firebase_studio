
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get user's role data
    function getUserRoleData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Helper function to get role permissions by roleId
    function getRolePermissions(roleId) {
      return get(/databases/$(database)/documents/roles/$(roleId)).data.permissions;
    }

    // Helper function to check if a user has a specific permission
    function hasPermission(userId, permission) {
      let userRoleData = getUserRoleData(userId);
      let roleId = userRoleData.roleId;
      if (roleId == null) {
        return false;
      }
      let rolePermissions = getRolePermissions(roleId);
      return permission in rolePermissions || 'manage_all' in rolePermissions;
    }

    // Roles Collection
    match /roles/{roleId} {
      allow read: if request.auth != null; // Any authenticated user can read roles (e.g., for admin UI to assign roles)
      allow create, update, delete: if request.auth != null && getUserRoleData(request.auth.uid).roleName == 'ADMINISTRATOR';
        // Create: Only admins can create new roles.
        // Update: Only admins can update role details (name, description, permissions).
        // Delete: Only admins can delete roles (consider preventing deletion of system roles like ADMIN/USER).
    }

    // Users Collection
    match /users/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId; // User can create their own profile document
      allow read: if request.auth != null && (request.auth.uid == userId || getUserRoleData(request.auth.uid).roleName == 'ADMINISTRATOR');
        // User can read their own profile.
        // Admin can read any user's profile.
      allow update: if request.auth != null &&
                       ( (request.auth.uid == userId && !(request.resource.data.diff(resource.data).affectedKeys().hasAny(['roleId', 'roleName', 'status']))) ||
                         getUserRoleData(request.auth.uid).roleName == 'ADMINISTRATOR'
                       );
        // User can update their own profile, EXCEPT for roleId, roleName, and status.
        // Admin can update any field on any user's profile.
      allow delete: if request.auth != null && getUserRoleData(request.auth.uid).roleName == 'ADMINISTRATOR';
        // Only admins can delete user documents from Firestore. (Auth user deletion is separate).
    }

    // Lot Categories Collection
    match /lotCategories/{categoryId} {
      allow read: if true; // Publicly readable
      allow create, update, delete: if request.auth != null && getUserRoleData(request.auth.uid).roleName == 'ADMINISTRATOR';
    }

    // States Collection
    match /states/{stateId} {
      allow read: if true; // Publicly readable
      allow create, update, delete: if request.auth != null && getUserRoleData(request.auth.uid).roleName == 'ADMINISTRATOR';
    }

    // Cities Collection
    match /cities/{cityId} {
      allow read: if true; // Publicly readable
      allow create, update, delete: if request.auth != null && getUserRoleData(request.auth.uid).roleName == 'ADMINISTRATOR';
    }
    
    // Auctioneers Collection
    match /auctioneers/{auctioneerId} {
      allow read: if true; // Publicly readable
      allow create, update, delete: if request.auth != null && getUserRoleData(request.auth.uid).roleName == 'ADMINISTRATOR';
    }

    // Sellers Collection
    match /sellers/{sellerId} {
      allow read: if true; // Publicly readable
      allow create, update, delete: if request.auth != null && getUserRoleData(request.auth.uid).roleName == 'ADMINISTRATOR';
    }

    // Auctions Collection
    match /auctions/{auctionId} {
      allow read: if true; // Publicly readable
      // TODO: Refine write rules for auctioneers/sellers to manage their own/assigned auctions
      allow create, update, delete: if request.auth != null && getUserRoleData(request.auth.uid).roleName == 'ADMINISTRATOR';
    }

    // Lots Collection
    match /lots/{lotId} {
      allow read: if true; // Publicly readable
      // TODO: Refine write rules for auctioneers/sellers to manage their own/assigned lots
      allow create, update, delete: if request.auth != null && getUserRoleData(request.auth.uid).roleName == 'ADMINISTRATOR';
    }
    
    // MediaItems Collection
    match /mediaItems/{mediaItemId} {
      // Read access for media items might depend on whether they are linked to public lots/auctions
      // For now, allow authenticated read.
      allow read: if request.auth != null; 
      // Write access generally for admins or specific roles (e.g., auctioneers for their lots)
      allow create, update, delete: if request.auth != null && getUserRoleData(request.auth.uid).roleName == 'ADMINISTRATOR';
    }

    // Platform Settings Collection
    match /platformSettings/{settingsId} {
        // Only admins should read or write platform settings
        allow read, write: if request.auth != null && getUserRoleData(request.auth.uid).roleName == 'ADMINISTRATOR';
    }

    // TODO: Add rules for Bids, UserDocuments, etc. as those features are fully developed.
    // Example for Bids (highly dependent on auction status and user role):
    // match /bids/{bidId} {
    //   allow create: if request.auth != null && 
    //                   exists(/databases/$(database)/documents/lots/$(request.resource.data.lotId)) &&
    //                   get(/databases/$(database)/documents/lots/$(request.resource.data.lotId)).data.status == 'ABERTO_PARA_LANCES';
    //                   // Add more checks like user habilitation status
    //   allow read: if request.auth != null && (request.auth.uid == resource.data.userId || hasPermission(request.auth.uid, 'bids:read_all'));
    // }
  }
}
