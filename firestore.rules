
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null && request.auth.uid != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdminEmail() {
      return isSignedIn() && request.auth.token.email in ['admin@bidexpert.com', 'augusto.devcode@gmail.com', 'analyst@bidexpert.com'];
    }
    
    function isActualAdmin(userId) {
      // Checks if the user document in Firestore has roleName 'ADMINISTRATOR'
      return isSignedIn() && get(/databases/$(database)/documents/users/$(userId)).data.roleName == 'ADMINISTRATOR';
    }

    function isDefaultRoleName(roleNameInDb) {
      // Checks against the name stored in the database (which should be uppercase if created by seed)
      return roleNameInDb.upper() in ['ADMINISTRATOR', 'USER', 'CONSIGNOR', 'AUCTIONEER', 'AUCTION_ANALYST'];
    }

    match /roles/{roleId} {
      allow read, list: if true; // Publicly readable

      allow create: if isSignedIn() &&
                      (isActualAdmin(request.auth.uid) || isAdminEmail()) && // Allow admin by email to create during bootstrap
                      request.resource.data.name_normalized == request.resource.data.name.upper() &&
                      request.resource.data.keys().hasAll(['name', 'name_normalized', 'permissions', 'createdAt', 'updatedAt']) &&
                      request.resource.data.keys().hasOnly(['name', 'name_normalized', 'description', 'permissions', 'createdAt', 'updatedAt']);

      allow update: if isSignedIn() &&
                      (
                        // Case 1: Actual Admin can update (with some restrictions for default roles)
                        (
                          isActualAdmin(request.auth.uid) &&
                          // For default roles, name and name_normalized cannot change
                          (!isDefaultRoleName(resource.data.name) || 
                            (request.resource.data.name == resource.data.name && 
                             request.resource.data.name_normalized == resource.data.name_normalized)
                          ) &&
                          // Admin can only change these fields
                          request.resource.data.keys().hasOnly(['name', 'name_normalized', 'description', 'permissions', 'updatedAt']) &&
                          request.resource.data.keys().hasAll(['updatedAt']) // updatedAt is always sent
                        ) ||
                        // Case 2: Bootstrap/sync by isAdminEmail for Default Roles
                        (
                          isAdminEmail() && isDefaultRoleName(resource.data.name) &&
                          // Name and name_normalized MUST NOT be changed by this bootstrap path
                          request.resource.data.name == resource.data.name &&
                          request.resource.data.name_normalized == resource.data.name_normalized &&
                          // Only 'description', 'permissions', and 'updatedAt' can be in the incoming data to be written or changed.
                          // If other fields like 'name' or 'name_normalized' are present in request.resource.data,
                          // they MUST be identical to resource.data (i.e., not part of the diff).
                          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['description', 'permissions', 'updatedAt']) &&
                          request.resource.data.keys().hasAll(['updatedAt']) // updatedAt is always sent
                        )
                      );
      
      allow delete: if isSignedIn() && isActualAdmin(request.auth.uid) && !isDefaultRoleName(resource.data.name);
    }

    match /users/{userId} {
      allow create: if isAdminEmail() && isUser(userId) &&
                      request.resource.data.roleName == 'ADMINISTRATOR' &&
                      request.resource.data.permissions.hasAny(['manage_all']) &&
                      request.resource.data.keys().hasAll(['uid', 'email', 'fullName', 'roleId', 'roleName', 'status', 'habilitationStatus', 'createdAt', 'updatedAt', 'permissions']) &&
                      request.resource.data.keys().size() == 10;
      
      allow read, get: if isUser(userId) || isActualAdmin(request.auth.uid);
      
      allow update: if 
        // Case 1: User updating their own profile (limited fields, cannot change role or status)
        (
          isUser(userId) &&
          !request.resource.data.keys().hasAny(['roleId', 'roleName', 'status', 'habilitationStatus', 'permissions', 'role']) // 'role' is the legacy field
        ) ||
        // Case 2: An actual admin updating any user's profile (can change role, status, etc.)
        (
          isActualAdmin(request.auth.uid) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['roleId', 'roleName', 'status', 'habilitationStatus', 'updatedAt', 'permissions', 'role'])
        ) ||
        // Case 3: Bootstrap/Sync for an Admin-by-Email becoming Actual Admin (their own profile)
        (
          isAdminEmail() && isUser(userId) && 
          (resource.data.roleId == null || resource.data.roleName != 'ADMINISTRATOR' || resource.data.habilitationStatus != 'HABILITADO') &&
          request.resource.data.roleName == 'ADMINISTRATOR' &&
          request.resource.data.habilitationStatus == 'HABILITADO' &&
          request.resource.data.permissions.hasAny(['manage_all']) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['roleId', 'roleName', 'updatedAt', 'habilitationStatus', 'permissions', 'role'])
        );

      allow delete: if isActualAdmin(request.auth.uid);
    }

    match /lotCategories/{categoryId} {
      allow read, list: if true;
      allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }
    
    match /states/{stateId} {
        allow read, list: if true;
        allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }
    match /cities/{cityId} {
        allow read, list: if true;
        allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }

    match /auctioneers/{auctioneerId} {
        allow read, list: if true;
        allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }
    
    match /sellers/{sellerId} {
        allow read, list: if true;
        allow create, update, delete: if isSignedIn() && isActualAdmin(request.auth.uid);
    }

    match /auctions/{auctionId} {
      allow read, list: if true; 
      allow create, update, delete: if isSignedIn() && 
                                      (isActualAdmin(request.auth.uid) || 
                                       (request.resource.data.sellerId == request.auth.uid || resource.data.sellerId == request.auth.uid)
                                      );
    }

    match /lots/{lotId} {
      allow read, list: if true;
      allow create, update, delete: if isSignedIn() && 
                                      (isActualAdmin(request.auth.uid) || 
                                       (request.resource.data.sellerId == request.auth.uid || resource.data.sellerId == request.auth.uid)
                                      );
    }
    
    match /mediaItems/{mediaItemId} {
      allow read, list: if true;
      allow create, update, delete: if true;
    }
    
    match /platformSettings/global {
        allow read: if true;
        allow write: if isSignedIn() && isActualAdmin(request.auth.uid);
    }
  }
}
