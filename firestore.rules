
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function para verificar se o email do requisitante está na lista de emails de admin
    // Esta lista deve ser mantida em sincronia com a lógica da aplicação ou gerenciada de forma mais robusta no futuro.
    function isAdminEmail() {
      return request.auth.token.email in [
        'admin@bidexpert.com', 
        'analyst@bidexpert.com', 
        'augusto.devcode@gmail.com'
        // Adicione outros e-mails de administradores iniciais aqui
      ];
    }

    // Coleção de Perfis (Roles)
    match /roles/{roleId} {
      // Qualquer usuário autenticado pode ler os perfis (para listagem, por exemplo)
      allow read: if request.auth != null;

      // Criar/Atualizar:
      // 1. Usuários com roleName 'ADMINISTRATOR' no seu documento 'users'.
      // 2. OU (para bootstrapping): Se o usuário está tentando criar/atualizar o perfil 'ADMINISTRATOR'
      //    E o email do usuário está na lista de isAdminEmail().
      allow create, update: if request.auth != null && (
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roleName == 'ADMINISTRATOR') ||
        (request.resource.data.name == 'ADMINISTRATOR' && isAdminEmail())
      );

      // Deletar: Apenas administradores podem deletar perfis, exceto os perfis padrão.
      allow delete: if request.auth != null &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roleName == 'ADMINISTRATOR' &&
                       !(resource.data.name in ['ADMINISTRATOR', 'USER', 'CONSIGNOR', 'AUCTIONEER']);
    }

    // Coleção de Perfis de Usuário (Users)
    match /users/{userId} {
      // Criar: Usuário pode criar seu próprio perfil (durante o registro).
      //        E um admin (bootstrapping) pode criar seu próprio perfil com role de admin.
      allow create: if request.auth != null && request.auth.uid == userId;

      // Ler: Usuário pode ler seu próprio perfil. Administradores podem ler qualquer perfil.
      allow read: if request.auth != null && (
        request.auth.uid == userId ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roleName == 'ADMINISTRATOR'
      );

      // Atualizar:
      // 1. Usuário pode atualizar seu próprio perfil, EXCETO os campos roleId e roleName.
      // 2. OU Administradores podem atualizar qualquer campo de qualquer usuário.
      // 3. OU (para bootstrapping): Usuário com email de admin pode definir SEU PRÓPRIO roleId/roleName
      //    para 'ADMINISTRATOR' se ainda não for ou se não tiver perfil.
      allow update: if request.auth != null && (
        ( // Usuário atualizando seus próprios dados (não-role)
          request.auth.uid == userId &&
          !(request.resource.data.roleId != resource.data.roleId || 
            request.resource.data.roleName != resource.data.roleName ||
            request.resource.data.status != resource.data.status // Status também só admin
           )
        ) ||
        ( // Admin atualizando qualquer usuário
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roleName == 'ADMINISTRATOR'
        ) ||
        ( // Bootstrapping admin definindo seu próprio perfil para ADMINISTRATOR
          request.auth.uid == userId &&
          isAdminEmail() &&
          request.resource.data.roleName == 'ADMINISTRATOR' &&
          (resource.data.roleName == null || resource.data.roleName != 'ADMINISTRATOR')
        )
      );

      // Deletar: Apenas administradores podem deletar (exclui auto-deleção por enquanto).
      // A exclusão real de usuários também envolve a Auth e pode ser mais complexa.
      allow delete: if request.auth != null &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roleName == 'ADMINISTRATOR';
    }

    // Categorias de Lotes
    match /lotCategories/{categoryId} {
      allow read: if true; // Qualquer um pode ler categorias
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roleName == 'ADMINISTRATOR';
    }

    // Estados
    match /states/{stateId} {
      allow read: if true; // Qualquer um pode ler estados
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roleName == 'ADMINISTRATOR';
    }

    // Cidades
    match /cities/{cityId} {
      allow read: if true; // Qualquer um pode ler cidades
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roleName == 'ADMINISTRATOR';
    }
    
    // Leiloeiros (Auctioneers)
    match /auctioneers/{auctioneerId} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roleName == 'ADMINISTRATOR';
      // TODO: Adicionar regra para o próprio leiloeiro (se `resource.data.userId == request.auth.uid`) poder editar.
    }

    // Comitentes (Sellers)
    match /sellers/{sellerId} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roleName == 'ADMINISTRATOR';
      // TODO: Adicionar regra para o próprio comitente (se `resource.data.userId == request.auth.uid`) poder editar.
    }
    
    // Leilões (Auctions)
    match /auctions/{auctionId} {
      allow read: if true;
      // A escrita em leilões será mais complexa (admins, leiloeiro do leilão, comitente do leilão)
      // Por enquanto, apenas admins.
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roleName == 'ADMINISTRATOR';
    }

    // Lotes (Lots)
    match /lots/{lotId} {
      allow read: if true;
      // A escrita em lotes também será complexa. Por enquanto, apenas admins.
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roleName == 'ADMINISTRATOR';
    }

    // Itens de Mídia
    match /mediaItems/{mediaItemId} {
      allow read: if true; // ou if request.auth != null; se for privado
      // Admins podem escrever, ou o uploader original (se tivermos um campo `uploadedBy`)
      allow write: if request.auth != null && 
                      (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roleName == 'ADMINISTRATOR' || 
                       (request.resource.data.uploadedBy != null && request.resource.data.uploadedBy == request.auth.uid));
    }

    // Configurações da Plataforma
    match /platformSettings/global {
        allow read: if true; // As configurações podem precisar ser lidas pela aplicação cliente
        allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roleName == 'ADMINISTRATOR';
    }
  }
}

    