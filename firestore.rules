
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user is an Admin based on their email
    // IMPORTANT: Update this list with actual admin emails for production.
    function isAdminEmail() {
      return request.auth.token.email in ['admin@bidexpert.com', 'analyst@bidexpert.com', 'augusto.devcode@gmail.com'];
    }

    // Helper function to check if the user document has roleName 'ADMINISTRATOR'
    // Corrected to check for existence before accessing .data
    function isActualAdmin(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.roleName == 'ADMINISTRATOR';
    }

    match /platformSettings/{docId} {
      allow read: if true;
      allow write: if request.auth != null && isActualAdmin(request.auth.uid);
    }

    // Roles collection
    match /roles/{roleId} {
      allow read: if request.auth != null;

      // Allow create/update:
      // 1. If the user is already an Admin (has the role in their user doc).
      // 2. OR if an admin email is creating/updating the 'ADMINISTRATOR' or 'USER' role specifically (bootstrapping).
      allow write: if request.auth != null && (
                    isActualAdmin(request.auth.uid) ||
                    (isAdminEmail() && (request.resource.data.name == 'ADMINISTRATOR' || request.resource.data.name == 'USER'))
                  );
      allow delete: if request.auth != null && isActualAdmin(request.auth.uid)
                      && !(resource.data.name in ['ADMINISTRATOR', 'USER', 'CONSIGNOR', 'AUCTIONEER']);
    }

    // Users collection
    match /users/{userId} {
      // User can create their own profile document (e.g., during registration)
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // User can read their own profile. Admin can read any user profile.
      allow read: if request.auth != null && (request.auth.uid == userId || isActualAdmin(request.auth.uid));
      
      // Allow user to update their own profile (but not critical fields like roleId, roleName, status)
      // Allow admin to update any user profile (including roleId, roleName, status)
      // Allow admin email to bootstrap their own role to ADMINISTRATOR
      allow update: if request.auth != null && (
                      (request.auth.uid == userId && !(request.resource.data.diff(resource.data).affectedKeys().hasAny(['roleId', 'roleName', 'status']))) ||
                      isActualAdmin(request.auth.uid) ||
                      (isAdminEmail() && request.auth.uid == userId &&
                       request.resource.data.roleName == 'ADMINISTRATOR' &&
                       request.resource.data.roleId != null 
                      )
                    );
      // Only admins can delete users (actual user deletion from Auth service is separate)
      allow delete: if request.auth != null && isActualAdmin(request.auth.uid);
    }

    match /lotCategories/{docId} {
      allow read: if true;
      allow write: if request.auth != null && isActualAdmin(request.auth.uid);
    }
    match /states/{docId} {
      allow read: if true;
      allow write: if request.auth != null && isActualAdmin(request.auth.uid);
    }
    match /cities/{docId} {
      allow read: if true;
      allow write: if request.auth != null && isActualAdmin(request.auth.uid);
    }
    match /auctioneers/{docId} {
      allow read: if true;
      allow write: if request.auth != null && isActualAdmin(request.auth.uid);
    }
    match /sellers/{docId} {
      allow read: if true;
      allow write: if request.auth != null && isActualAdmin(request.auth.uid);
    }
     match /auctions/{docId} {
      allow read: if true;
      // Allow write if user is admin OR if the auction's sellerId matches the user's UID (for consignors)
      allow write: if request.auth != null && 
                      (isActualAdmin(request.auth.uid) || 
                       (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.sellerProfileId == resource.data.sellerId)
                      );
    }
    match /lots/{docId} {
      allow read: if true;
      // Allow write if user is admin OR if the lot's sellerId matches the user's UID (for consignors)
      // This assumes lot.sellerId is correctly populated.
      allow write: if request.auth != null && 
                      (isActualAdmin(request.auth.uid) ||
                       (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.sellerProfileId == resource.data.sellerId)
                      );
    }
     match /mediaItems/{docId} {
      allow read: if true; 
      allow write: if request.auth != null && isActualAdmin(request.auth.uid); // Only admins can write/delete media for now
    }
  }
}
