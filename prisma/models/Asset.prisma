/// Representa um ativo individual (um bem) antes de ser agrupado em um lote.
/// Pode ser um veículo, um imóvel, uma máquina, etc.

model Asset {
  id              String   @id @default(cuid())
  publicId        String   @unique @default(uuid())
  title           String
  description     String?  @db.Text
  properties      String?  @db.Text
  status          String   @default("DISPONIVEL")
  evaluationValue Decimal? @db.Decimal(12, 2)
  isFeatured      Boolean  @default(false)
  isExclusive     Boolean  @default(false)
  
  // Imagem Principal
  imageUrl        String?
  imageMediaId    String?  @map("image_media_id")
  mediaItem       MediaItem? @relation("AssetImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  // Galeria
  galleryImageUrls String[] @default([])
  mediaItemIds    String[] @default([])

  dataAiHint        String?

  street          String?
  number          String?
  complement      String?
  neighborhood    String?
  zipCode         String?  @map("zip_code")
  latitude        Float?
  longitude       Float?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relações
  category          LotCategory?  @relation(fields: [categoryId], references: [id])
  categoryId        String?       @map("category_id")
  subcategory       Subcategory?  @relation(fields: [subcategoryId], references: [id])
  subcategoryId     String?       @map("subcategory_id")

  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId String?       @map("judicial_process_id")

  seller            Seller?       @relation(fields: [sellerId], references: [id])
  sellerId          String?       @map("seller_id")
  
  city              City?         @relation(fields: [cityId], references: [id])
  cityId            String?       @map("city_id")
  state             State?        @relation(fields: [stateId], references: [id])
  stateId           String?       @map("state_id")

  lots              AssetsOnLots[]

  tenant            Tenant        @relation(fields: [tenantId], references: [id])
  tenantId          String        @map("tenant_id")
  
  @@map("assets")
}