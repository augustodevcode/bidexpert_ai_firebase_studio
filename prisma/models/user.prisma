
/// Modelo base para todos os usuários da plataforma.
model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  password            String?
  fullName            String?
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType          @default(PHYSICAL)
  avatarUrl           String?
  dataAiHint          String?              @db.VarChar(100)
  cpf                 String?              @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  cellPhone           String?
  homePhone           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  optInMarketing      Boolean              @default(false)
  badges              Json?
  roles               UsersOnRoles[]
  tenants             UsersOnTenants[]
  bids                Bid[]
  wins                UserWin[]
  maxBids             UserLotMaxBid[]
  documents           UserDocument[]
  notifications       Notification[]
  uploadedMedia       MediaItem[]
  reviews             Review[]
  questions           LotQuestion[]
  answeredQuestions   LotQuestion[]        @relation("AnsweredBy")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  razaoSocial       String?
  cnpj              String? @unique
  inscricaoEstadual String?
  website           String?
  responsibleName   String?
  responsibleCpf    String?

  @@index([email])
}

/// Tabela de junção para a relação muitos-para-muitos entre User e Role.
model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

/// Define os perfis de usuário e suas permissões.
model Role {
  id           String         @id @default(cuid())
  name         String         @unique
  nameNormalized String       @unique
  description  String?
  permissions  String[]
  users        UsersOnRoles[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

/// Define um Tenant (inquilino) na plataforma. Cada Tenant representa um leiloeiro ou cliente.
model Tenant {
  id              String           @id @default(cuid())
  name            String
  subdomain       String           @unique
  domain          String?          @unique
  users           UsersOnTenants[]
  auctions        Auction[]
  lots            Lot[]
  bens            Bem[]
  sellers         Seller[]
  auctioneers     Auctioneer[]
  judicialProcesses JudicialProcess[]
  reports         Report[]
  platformSettings PlatformSettings[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([subdomain])
}

/// Tabela de junção para a relação muitos-para-muitos entre User e Tenant.
model UsersOnTenants {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId   String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, tenantId])
}
