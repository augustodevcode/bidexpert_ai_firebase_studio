// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ============================================================================
// Tenant and User Management
// ============================================================================

model Tenant {
  id                String           @id @default(cuid())
  name              String
  subdomain         String           @unique
  domain            String?          @unique
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  auctions          Auction[]
  lots              Lot[]
  sellers           Seller[]
  auctioneers       Auctioneer[]
  assets            Asset[]
  users             UsersOnTenants[]
  platformSettings  PlatformSettings?
  judicialProcesses JudicialProcess[]
  bids              Bid[]
  notifications     Notification[]
  reports           Report[]
}

model User {
  id                    String                @id @default(cuid())
  publicId              String?               @unique
  fullName              String?
  email                 String                @unique
  password              String
  avatarUrl             String?
  dataAiHint            String?
  habilitationStatus    UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType           AccountType           @default(PHYSICAL)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  roles                 UsersOnRoles[]
  tenants               UsersOnTenants[]
  cpf                   String?
  rgNumber              String?
  rgIssuer              String?
  rgState               String?
  dateOfBirth           DateTime?
  cellPhone             String?
  homePhone             String?
  gender                String?
  profession            String?
  nationality           String?
  maritalStatus         String?
  propertyRegime        String?
  spouseName            String?
  spouseCpf             String?
  zipCode               String?
  street                String?
  number                String?
  complement            String?
  neighborhood          String?
  city                  String?
  state                 String?
  optInMarketing        Boolean?              @default(false)
  sellerProfile         Seller?               @relation("UserToSeller")
  auctioneerProfile     Auctioneer?           @relation("UserToAuctioneer")
  uploadedMedia         MediaItem[]           @relation("UploadedBy")
  documents             UserDocument[]
  bids                  Bid[]
  wins                  UserWin[]
  reviews               Review[]
  questions             LotQuestion[]
  maxBids               UserLotMaxBid[]
  notifications         Notification[]
  habilitations         AuctionHabilitation[]
  assignedAssets        Asset[]               @relation("AssignedAssetManager")
}

model Role {
  id             String         @id @default(cuid())
  name           String         @unique
  nameNormalized String         @unique
  description    String?
  permissions    Json
  users          UsersOnRoles[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model UsersOnTenants {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId   String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, tenantId])
}


// ============================================================================
// Core Auction and Lot Entities
// ============================================================================

model Auction {
  id                      String                 @id @default(cuid())
  publicId                String?                @unique
  title                   String
  description             String?                @db.Text
  status                  AuctionStatus          @default(EM_PREPARACAO)
  auctionType             AuctionType?
  auctionMethod           AuctionMethod?
  participation           AuctionParticipation?
  auctionDate             DateTime?              @default(now())
  endDate                 DateTime?
  initialOffer            Decimal?
  achievedRevenue         Decimal?
  estimatedRevenue        Decimal?
  softCloseMinutes        Int?
  onlineUrl               String?
  visits                  Int?                   @default(0)
  isFeaturedOnMarketplace Boolean?               @default(false)
  additionalTriggers      Json?
  dataAiHint              String?
  imageUrl                String?
  documentsUrl            String?                @db.Text
  evaluationReportUrl     String?                @db.Text
  auctionCertificateUrl   String?                @db.Text
  sellingBranch           String?
  automaticBiddingEnabled Boolean?               @default(false)
  allowInstallmentBids    Boolean?               @default(true)
  silentBiddingEnabled    Boolean?               @default(false)
  allowMultipleBidsPerUser Boolean?               @default(true)
  softCloseEnabled        Boolean?               @default(false)
  decrementAmount         Decimal?
  decrementIntervalSeconds Int?
  floorPrice              Decimal?
  imageMediaId            String?
  tenantId                String
  tenant                  Tenant?                @relation(fields: [tenantId], references: [id])
  sellerId                String?
  seller                  Seller?                @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  auctioneerId            String?
  auctioneer              Auctioneer?            @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  categoryId              String?
  category                LotCategory?           @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  cityId                  String?
  city                    City?                  @relation(fields: [cityId], references: [id], onDelete: SetNull)
  stateId                 String?
  state                   State?                 @relation(fields: [stateId], references: [id], onDelete: SetNull)
  judicialProcessId       String?
  judicialProcess         JudicialProcess?       @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  lots                    Lot[]
  bids                    Bid[]
  reviews                 Review[]
  questions               LotQuestion[]
  stages                  AuctionStage[]
  habilitations           AuctionHabilitation[]
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  slug                    String                 @unique
}

model AuctionStage {
  id           String    @id @default(cuid())
  name         String
  startDate    DateTime
  endDate      DateTime
  initialPrice Decimal?
  auctionId    String
  auction      Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  lotDetails   LotStageDetails[]

  @@index([auctionId])
}

model Lot {
  id                      String                  @id @default(cuid())
  publicId                String?                 @unique
  number                  String?
  title                   String
  description             String?                 @db.Text
  properties              String?                 @db.Text
  status                  LotStatus               @default(RASCUNHO)
  type                    String
  price                   Decimal                 @db.Decimal(12, 2)
  initialPrice            Decimal?                @db.Decimal(12, 2)
  secondInitialPrice      Decimal?                @db.Decimal(12, 2)
  bidIncrementStep        Decimal?                @db.Decimal(10, 2)
  evaluationValue         Decimal?                @db.Decimal(12, 2)
  views                   Int?                    @default(0)
  bidsCount               Int?                    @default(0)
  isFeatured              Boolean?                @default(false)
  isExclusive             Boolean?                @default(false)
  isRelisted              Boolean?                @default(false)
  relistCount             Int?                    @default(0)
  auctionDate             DateTime?
  endDate                 DateTime?
  street                  String?
  complement              String?
  neighborhood            String?
  cityName                String?
  stateUf                 String?
  zipCode                 String?
  latitude                Decimal?
  longitude               Decimal?
  mapAddress              String?
  dataAiHint              String?
  dataAiHintIcon          String?
  dataAiHintCover         String?
  dataAiHintGallery       String?
  additionalTriggers      Json?
  imageUrl                String?
  imageMediaId            String?
  winningBidTermUrl       String?
  auctionId               String
  auction                 Auction                 @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  categoryId              String?
  category                LotCategory?            @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategoryId           String?
  subcategory             Subcategory?            @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  sellerId                String?
  seller                  Seller?                 @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  auctioneerId            String?
  auctioneer              Auctioneer?             @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  cityId                  String?
  city                    City?                   @relation(fields: [cityId], references: [id], onDelete: SetNull)
  stateId                 String?
  state                   State?                  @relation(fields: [stateId], references: [id], onDelete: SetNull)
  assets                  AssetsOnLots[]
  winnerId                String?
  winner                  User?                   @relation(fields: [winnerId], references: [id], onDelete: SetNull)
  originalLotId           String?
  originalLot             Lot?                    @relation("RelistHistory", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLots            Lot[]                   @relation("RelistHistory")
  tenantId                String
  tenant                  Tenant                  @relation(fields: [tenantId], references: [id])
  stageDetails            LotStageDetails[]
  bids                    Bid[]
  reviews                 Review[]
  questions               LotQuestion[]
  maxBids                 UserLotMaxBid[]
  wins                    UserWin[]
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  slug                    String                  @unique
  inheritedMediaFromAssetId String?               @map("inherited_media_from_asset_id")

  @@index([auctionId])
  @@index([sellerId])
  @@index([categoryId])
}

model Asset {
  id                   String       @id @default(cuid())
  publicId             String?      @unique
  title                String
  description          String?      @db.Text
  properties           String?      @db.Text
  status               AssetStatus  @default(CADASTRO)
  evaluationValue      Decimal?     @db.Decimal(12, 2)
  street               String?
  number               String?
  complement           String?
  neighborhood         String?
  cityName             String?
  stateUf              String?
  zipCode              String?
  latitude             Decimal?
  longitude            Decimal?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  tenantId             String
  tenant               Tenant       @relation(fields: [tenantId], references: [id])
  categoryId           String?
  category             LotCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategoryId        String?
  subcategory          Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  sellerId             String?
  seller               Seller?      @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  judicialProcessId    String?
  judicialProcess      JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  assignedById         String?
  assignedBy           User?        @relation("AssignedAssetManager", fields: [assignedById], references: [id], onDelete: SetNull)
  lots                 AssetsOnLots[]
  assetMedia           AssetMedia[]
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
}

model AssetsOnLots {
  assetId    String
  lotId      String
  asset      Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  lot        Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([assetId, lotId])
}

// ============================================================================
// Entities related to People and Organizations
// ============================================================================

model Seller {
  id                       String               @id @default(cuid())
  publicId                 String?              @unique
  slug                     String               @unique
  name                     String
  isJudicial               Boolean              @default(false)
  email                    String?              @unique
  phone                    String?
  website                  String?
  contactName              String?
  logoUrl                  String?
  logoMediaId              String?
  dataAiHintLogo           String?
  description              String?              @db.Text
  address                  String?
  street                   String?
  number                   String?
  complement               String?
  neighborhood             String?
  city                     String?
  state                    String?
  zipCode                  String?
  latitude                 Decimal?
  longitude                Decimal?
  tenantId                 String
  tenant                   Tenant               @relation(fields: [tenantId], references: [id])
  auctions                 Auction[]
  lots                     Lot[]
  assets                   Asset[]
  judicialBranchId         String?              @unique
  judicialBranch           JudicialBranch?
  judicialProcesses        JudicialProcess[]
  directSaleOffers         DirectSaleOffer[]
  userId                   String?              @unique
  user                     User?                @relation("UserToSeller", fields: [userId], references: [id])
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
}

model Auctioneer {
  id                   String    @id @default(cuid())
  publicId             String?   @unique
  slug                 String    @unique
  name                 String
  registrationNumber   String?
  email                String?   @unique
  phone                String?
  website              String?
  contactName          String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?   @db.Text
  address              String?
  street               String?
  number               String?
  complement           String?
  neighborhood         String?
  city                 String?
  state                String?
  zipCode              String?
  latitude             Decimal?
  longitude            Decimal?
  tenantId             String
  tenant               Tenant    @relation(fields: [tenantId], references: [id])
  auctions             Auction[]
  lots                 Lot[]
  userId               String?   @unique
  user                 User?     @relation("UserToAuctioneer", fields: [userId], references: [id])
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model Subscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
}


// ============================================================================
// Bidding and Post-Auction
// ============================================================================

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId     String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidderId      String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderDisplay String
  amount        Decimal  @db.Decimal(12, 2)
  timestamp     DateTime @default(now())
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id])

  @@index([lotId])
  @@index([bidderId])
}

model UserWin {
  id                 String               @id @default(cuid())
  userId             String
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  lotId              String
  lot                Lot                  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  winningBidAmount   Decimal              @db.Decimal(12, 2)
  winDate            DateTime             @default(now())
  paymentStatus      PaymentStatus        @default(PENDENTE)
  payments           InstallmentPayment[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  @@index([userId])
  @@index([lotId])
}

model InstallmentPayment {
  id                 String        @id @default(cuid())
  userWinId          String
  userWin            UserWin       @relation(fields: [userWinId], references: [id], onDelete: Cascade)
  installmentNumber  Int
  totalInstallments  Int
  amount             Decimal       @db.Decimal(12, 2)
  dueDate            DateTime
  paymentDate        DateTime?
  status             PaymentStatus @default(PENDENTE)

  @@index([userWinId])
}

// ============================================================================
// Catalogs and Taxonomy
// ============================================================================

model LotCategory {
  id                String       @id @default(cuid())
  name              String       @unique
  slug              String       @unique
  description       String?
  hasSubcategories  Boolean      @default(false)
  displayOrder      Int          @default(0)
  iconName          String?
  logoUrl           String?
  logoMediaId       String?
  dataAiHintIcon    String?
  coverImageUrl     String?
  coverImageMediaId String?
  dataAiHintCover   String?
  megaMenuImageUrl  String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu String?
  auctions          Auction[]
  lots              Lot[]
  assets            Asset[]
  subcategories     Subcategory[]
  directSaleOffers  DirectSaleOffer[]
}

model Subcategory {
  id                String       @id @default(cuid())
  name              String
  slug              String       @unique
  description       String?
  displayOrder      Int          @default(0)
  iconUrl           String?
  iconMediaId       String?
  dataAiHintIcon    String?
  parentCategoryId  String
  parentCategory    LotCategory  @relation(fields: [parentCategoryId], references: [id])
  lots              Lot[]
  assets            Asset[]

  @@unique([name, parentCategoryId])
}

// ============================================================================
// User-Generated Content
// ============================================================================

model Review {
  id              String   @id @default(cuid())
  lotId           String
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId       String
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userDisplayName String
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([lotId])
}

model LotQuestion {
  id                      String   @id @default(cuid())
  lotId                   String
  lot                     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId               String
  auction                 Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  userId                  String
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userDisplayName         String
  questionText            String   @db.Text
  answerText              String?  @db.Text
  answeredAt              DateTime?
  answeredByUserId        String?
  answeredByUserDisplayName String?
  isPublic                Boolean  @default(true)
  createdAt               DateTime @default(now())

  @@index([lotId])
}

// ============================================================================
// Habilitation and Documents
// ============================================================================

model DocumentType {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isRequired  Boolean  @default(false)
  appliesTo   String   // Example: "PHYSICAL,LEGAL"
}

model UserDocument {
  id              String             @id @default(cuid())
  userId          String
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentTypeId  String
  documentType    DocumentType       @relation(fields: [documentTypeId], references: [id])
  fileUrl         String             @db.Text
  fileName        String
  status          UserDocumentStatus @default(SUBMITTED)
  rejectionReason String?
  verifiedAt      DateTime?
  submittedAt     DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@unique([userId, documentTypeId])
}

model AuctionHabilitation {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auctionId String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, auctionId])
}

// ============================================================================
// Venda Direta
// ============================================================================

model DirectSaleOffer {
  id                      String                  @id @default(cuid())
  publicId                String                  @unique
  title                   String
  description             String?                 @db.Text
  status                  DirectSaleOfferStatus   @default(PENDING_APPROVAL)
  offerType               DirectSaleOfferType
  price                   Decimal?                @db.Decimal(12, 2)
  minimumOfferPrice       Decimal?                @db.Decimal(12, 2)
  views                   Int                     @default(0)
  locationCity            String?
  locationState           String?
  imageUrl                String?
  imageMediaId            String?
  dataAiHint              String?
  galleryImageUrls        Json?
  mediaItemIds            Json?
  expiresAt               DateTime?
  itemsIncluded           Json?
  tenantId                String
  tenant                  Tenant                  @relation(fields: [tenantId], references: [id])
  categoryId              String?
  category                LotCategory?            @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  sellerId                String?
  seller                  Seller?                 @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
}

// ============================================================================
// Judicial-Specific Entities
// ============================================================================

model JudicialProcess {
  id             String         @id @default(cuid())
  publicId       String?        @unique
  processNumber  String
  isElectronic   Boolean        @default(true)
  auctions       Auction[]
  assets         Asset[]
  courtId        String?
  court          Court?         @relation(fields: [courtId], references: [id], onDelete: SetNull)
  districtId     String?
  district       JudicialDistrict? @relation(fields: [districtId], references: [id], onDelete: SetNull)
  branchId       String?
  branch         JudicialBranch? @relation(fields: [branchId], references: [id], onDelete: SetNull)
  sellerId       String?
  seller         Seller?        @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties        JudicialParty[]
  tenantId       String
  tenant         Tenant         @relation(fields: [tenantId], references: [id])
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@unique([processNumber, tenantId])
}

model JudicialParty {
  id             String          @id @default(cuid())
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  processId      String
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model Court {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  stateUf     String
  website     String?
  processes   JudicialProcess[]
  districts   JudicialDistrict[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model JudicialDistrict {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  zipCode     String?
  courtId     String?
  court       Court?   @relation(fields: [courtId], references: [id], onDelete: SetNull)
  stateId     String?
  state       State?   @relation(fields: [stateId], references: [id], onDelete: SetNull)
  branches    JudicialBranch[]
  processes   JudicialProcess[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model JudicialBranch {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  contactName String?
  phone       String?
  email       String?
  districtId  String?
  district    JudicialDistrict? @relation(fields: [districtId], references: [id], onDelete: SetNull)
  processes   JudicialProcess[]
  seller      Seller?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// ============================================================================
// Location Entities
// ============================================================================

model State {
  id        String   @id @default(cuid())
  name      String   @unique
  uf        String   @unique
  slug      String   @unique
  cities    City[]
  auctions  Auction[]
  lots      Lot[]
  districts JudicialDistrict[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id       String   @id @default(cuid())
  name     String
  slug     String?  @unique
  stateId  String
  state    State    @relation(fields: [stateId], references: [id])
  ibgeCode String?  @unique
  lotCount Int      @default(0)
  auctions Auction[]
  lots     Lot[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, stateId])
}


// ============================================================================
// Platform Settings & Miscellaneous
// ============================================================================

model PlatformSettings {
  id                              String                     @id @default(cuid())
  tenantId                        String                     @unique
  tenant                          Tenant                     @relation(fields: [tenantId], references: [id])
  siteTitle                       String                     @default("BidExpert")
  siteTagline                     String?
  logoUrl                         String?
  faviconUrl                      String?
  isSetupComplete                 Boolean                    @default(false)
  galleryImageBasePath            String?
  storageProvider                 StorageProviderType?
  searchPaginationType            SearchPaginationType?
  searchItemsPerPage              Int?
  searchLoadMoreCount             Int?
  showCountdownOnLotDetail        Boolean?                   @default(true)
  showCountdownOnCards            Boolean?                   @default(true)
  showRelatedLotsOnLotDetail      Boolean?                   @default(true)
  relatedLotsCount                Int?                       @default(4)
  crudFormMode                    String?                    @default("modal") // 'modal' or 'sheet'
  themes                          ThemeSettings[]
  platformPublicIdMasks           IdMasks?
  mapSettings                     MapSettings?
  biddingSettings                 BiddingSettings?
  paymentGatewaySettings          PaymentGatewaySettings?
  notificationSettings            NotificationSettings?
  mentalTriggerSettings           MentalTriggerSettings?
  sectionBadgeVisibility          SectionBadgeVisibility?
  variableIncrementTable          VariableIncrementRule[]
}

model ThemeSettings {
  id                  String   @id @default(cuid())
  name                String   @unique
  isActive            Boolean  @default(false)
  platformSettingsId  String
  platformSettings    PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  colors              ThemeColors?
}

model ThemeColors {
  id              String   @id @default(cuid())
  themeSettingsId String   @unique
  themeSettings   ThemeSettings @relation(fields: [themeSettingsId], references: [id])
  primary         String?
  background      String?
  accent          String?
}

model IdMasks {
  id                  String   @id @default(cuid())
  platformSettingsId  String   @unique
  platformSettings    PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  auctionCodeMask     String?
  lotCodeMask         String?
  sellerCodeMask      String?
  userCodeMask        String?
  auctioneerCodeMask  String?
  assetCodeMask       String?
  categoryCodeMask    String?
  subcategoryCodeMask String?
}

model MapSettings {
  id                  String   @id @default(cuid())
  platformSettingsId  String   @unique
  platformSettings    PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  defaultProvider     String   @default("openstreetmap") // 'openstreetmap', 'google'
  googleMapsApiKey    String?
}

model BiddingSettings {
  id                                String   @id @default(cuid())
  platformSettingsId                String   @unique
  platformSettings                  PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  instantBiddingEnabled             Boolean  @default(true)
  getBidInfoInstantly               Boolean  @default(true)
  biddingInfoCheckIntervalSeconds   Int      @default(1)
  defaultStageDurationDays          Int      @default(7)
  defaultDaysBetweenStages          Int      @default(1)
}

model PaymentGatewaySettings {
  id                              String   @id @default(cuid())
  platformSettingsId              String   @unique
  platformSettings                PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  defaultGateway                  String   @default("Manual") // 'Manual', 'Pagarme', 'Stripe'
  platformCommissionPercentage    Float    @default(5.0)
  gatewayApiKey                   String?
  gatewayEncryptionKey            String?
}

model NotificationSettings {
  id                        String   @id @default(cuid())
  platformSettingsId        String   @unique
  platformSettings          PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  notifyOnNewAuction        Boolean  @default(true)
  notifyOnFeaturedLot       Boolean  @default(false)
  notifyOnAuctionEndingSoon Boolean  @default(true)
  notifyOnPromotions        Boolean  @default(true)
}

model MentalTriggerSettings {
  id                      String   @id @default(cuid())
  platformSettingsId      String   @unique
  platformSettings        PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  showDiscountBadge         Boolean  @default(true)
  showPopularityBadge       Boolean  @default(true)
  popularityViewThreshold   Int      @default(500)
  showHotBidBadge           Boolean  @default(true)
  hotBidThreshold           Int      @default(10)
  showExclusiveBadge        Boolean  @default(true)
}

model SectionBadgeVisibility {
  id                String   @id @default(cuid())
  platformSettingsId  String   @unique
  platformSettings    PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  searchGrid        Json? // JSON object with boolean flags per badge
  lotDetail         Json?
}

model VariableIncrementRule {
  id                  String   @id @default(cuid())
  platformSettingsId  String
  platformSettings    PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  from                Decimal  @db.Decimal(12, 2)
  to                  Decimal? @db.Decimal(12, 2)
  increment           Decimal  @db.Decimal(10, 2)
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message     String
  link        String?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])

  @@index([userId])
}

model MediaItem {
  id                String    @id @default(cuid())
  fileName          String
  storagePath       String
  urlOriginal       String
  urlThumbnail      String?
  mimeType          String
  sizeBytes         Int
  title             String?
  altText           String?
  caption           String?
  description       String?
  dataAiHint        String?
  uploadedById      String
  uploadedBy        User      @relation("UploadedBy", fields: [uploadedById], references: [id])
  judicialProcessId String?
  judicialProcess   JudicialProcess?
  assetMedia        AssetMedia[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model AssetMedia {
  id          String    @id @default(cuid())
  assetId     String
  asset       Asset     @relation(fields: [assetId], references: [id], onDelete: Cascade)
  mediaId     String
  mediaItem   MediaItem @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  displayOrder Int
  @@unique([assetId, mediaId])
}

model LotStageDetails {
  id              String   @id @default(cuid())
  lotId           String
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  stageId         String
  stage           AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)
  initialBid      Decimal? @db.Decimal(12, 2)
  bidIncrement    Decimal? @db.Decimal(10, 2)

  @@unique([lotId, stageId])
}


// ============================================================================
// ENUMERATIONS
// ============================================================================

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum AssetStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum StorageProviderType {
  LOCAL
  FIREBASE_STORAGE
  GOOGLE_CLOUD_STORAGE
}

enum SearchPaginationType {
  PAGINATION
  LOAD_MORE
}

model Report {
    id String @id @default(cuid())
    name String
    description String?
    definition Json
    tenantId String
    tenant Tenant @relation(fields: [tenantId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([tenantId])
}

model DataSource {
    id String @id @default(cuid())
    name String
    modelName String @unique
    fields Json
}

model VehicleMake {
    id String @id @default(cuid())
    name String @unique
    slug String @unique
    models VehicleModel[]
}

model VehicleModel {
    id String @id @default(cuid())
    name String
    slug String @unique
    makeId String
    make VehicleMake @relation(fields: [makeId], references: [id])

    @@unique([makeId, name])
}
