// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// ===================================
// Modelos de Usuário e Autenticação
// ===================================

model Usuario {
  id                  String                 @id @default(cuid())
  email               String                 @unique
  senha               String
  nomeCompleto        String
  tipoConta           TipoContaUsuario       @default(PESSOA_FISICA)
  dataNascimento      DateTime?
  cpf                 String?                @unique
  rg                  String?
  celular             String?
  telefoneFixo        String?
  razaoSocial         String?
  cnpj                String?                @unique
  inscricaoEstadual   String?
  statusHabilitacao   StatusHabilitacaoUsuario @default(PENDENTE_DOCUMENTOS)
  optInMarketing      Boolean                @default(false)
  dataCriacao         DateTime               @default(now())
  dataAtualizacao     DateTime               @updatedAt
  
  // Relacionamentos
  lances              Lance[]
  arremates           Arremate[]
  notificacoes        Notificacao[]
  perguntas           PerguntaLote[]
  respostas           PerguntaLote[]         @relation("RespostasAdmin")
  avaliacoes          Avaliacao[]
  lancesMaximos       LanceMaximoUsuario[]
  documentos          DocumentoUsuario[]
  uploadsMidia        ItemMidia[]
  
  // Perfil de Comitente/Leiloeiro/Usuário
  perfilComitente     Vendedor?
  perfilLeiloeiro     Leiloeiro?

  // Relacionamento com Perfis
  perfilId            String?                @unique
  perfil              Perfil?                @relation(fields: [perfilId], references: [id])
}

model Perfil {
  id              String      @id @default(cuid())
  nome            String      @unique
  nomeNormalizado String      @unique
  descricao       String?
  permissoes      Permissao[]
  usuarios        Usuario[]
  dataCriacao     DateTime    @default(now())
  dataAtualizacao DateTime    @updatedAt
}

model Permissao {
  id        String   @id @default(cuid())
  nome      String   @unique
  descricao String?
  perfis    Perfil[]
}

model DocumentoUsuario {
  id                  String              @id @default(cuid())
  usuarioId           String
  tipoDocumentoId     String
  urlArquivo          String
  nomeArquivo         String?
  status              StatusDocumentoUsuario @default(NAO_ENVIADO)
  dataEnvio           DateTime            @default(now())
  dataAnalise         DateTime?
  idAnalista          String?
  motivoRejeicao      String?
  
  usuario             Usuario             @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  tipoDocumento       TipoDocumento       @relation(fields: [tipoDocumentoId], references: [id])
  
  @@unique([usuarioId, tipoDocumentoId])
}

model TipoDocumento {
  id              String                @id @default(cuid())
  nome            String                @unique
  descricao       String?
  obrigatorio     Boolean               @default(true)
  aplicaA         TipoContaUsuario[]
  formatos        String[]
  ordemExibicao   Int                   @default(0)
  
  documentos      DocumentoUsuario[]
}

// ===================================
// Modelos de Leilão
// ===================================

model Leilao {
  id                      String        @id @default(cuid())
  idPublico               String        @unique
  titulo                  String
  tituloCompleto          String?
  descricao               String?       @db.Text
  status                  StatusLeilao
  modalidade              ModalidadeLeilao?
  dataLeilao              DateTime
  dataFim                 DateTime?
  fusoHorario             String?       @default("America/Sao_Paulo")
  etapas                  Json[]        // Armazena as praças/etapas como JSON
  visitas                 Int           @default(0)
  lanceInicial            Float?        @default(0)
  lanceMaximo             Float?
  contagemLances          Int           @default(0)
  incrementoMinimo        Float?
  permiteLanceParcelado   Boolean       @default(false)
  destaqueMarketplace     Boolean       @default(false)
  tituloAnuncioMarketplace String?
  gatilhosMentais         String[]
  
  // Relacionamentos
  categoriaId             String?
  leiloeiroId             String
  vendedorId              String?
  processoJudicialId      String?
  
  categoria               CategoriaLote?   @relation(fields: [categoriaId], references: [id])
  leiloeiro               Leiloeiro        @relation(fields: [leiloeiroId], references: [id])
  vendedor                Vendedor?        @relation(fields: [vendedorId], references: [id])
  processoJudicial        ProcessoJudicial? @relation(fields: [processoJudicialId], references: [id])

  lotes                   Lote[]
  lances                  Lance[]
  arremates               Arremate[]
  avaliacoes              Avaliacao[]
  perguntas               PerguntaLote[]

  dataCriacao             DateTime      @default(now())
  dataAtualizacao         DateTime      @updatedAt

  @@index([status, dataFim])
  @@index([leiloeiroId])
  @@index([vendedorId])
}

model CategoriaLote {
  id                      String        @id @default(cuid())
  nome                    String        @unique
  slug                    String        @unique
  descricao               String?
  urlLogo                 String?
  urlImagemCapa           String?
  urlImagemMegaMenu       String?
  contagemItens           Int           @default(0)
  temSubcategorias        Boolean       @default(false)
  
  leiloes                 Leilao[]
  lotes                   Lote[]
  subcategorias           Subcategoria[]
  vendasDiretas           VendaDireta[]
  postsBlog               PostBlog[]
  
  dataCriacao             DateTime      @default(now())
  dataAtualizacao         DateTime      @updatedAt
}

model Subcategoria {
  id              String          @id @default(cuid())
  nome            String
  slug            String          @unique
  descricao       String?
  contagemItens   Int             @default(0)
  
  categoriaPaiId  String
  categoriaPai    CategoriaLote   @relation(fields: [categoriaPaiId], references: [id])
  
  lotes           Lote[]
  
  dataCriacao     DateTime        @default(now())
  dataAtualizacao DateTime        @updatedAt
}

model Lote {
  id                      String        @id @default(cuid())
  idPublico               String        @unique
  titulo                  String
  numeroLote              String?
  descricao               String?       @db.Text
  preco                   Float         @default(0)
  precoInicial            Float?
  precoSegundaPraca       Float?
  incrementoLance         Float?
  status                  StatusLote
  visitas                 Int           @default(0)
  contagemLances          Int           @default(0)
  destaque                Boolean       @default(false)
  exclusivo               Boolean       @default(false)
  percentualDesconto      Float?
  gatilhosMentais         String[]
  
  // Relacionamentos
  leilaoId                String
  leilao                  Leilao        @relation(fields: [leilaoId], references: [id], onDelete: Cascade)
  
  categoriaId             String?
  categoria               CategoriaLote?   @relation(fields: [categoriaId], references: [id])

  subcategoriaId          String?
  subcategoria            Subcategoria?   @relation(fields: [subcategoriaId], references: [id], onDelete: SetNull)
  
  bens                    Bem[]         // Relação muitos-para-muitos com Bem
  
  lances                  Lance[]
  arremate                Arremate?
  avaliacoes              Avaliacao[]
  perguntas               PerguntaLote[]
  lancesMaximos           LanceMaximoUsuario[]

  dataCriacao             DateTime      @default(now())
  dataAtualizacao         DateTime      @updatedAt

  @@index([leilaoId])
  @@index([status])
}

model Bem {
  id                    String      @id @default(cuid())
  idPublico             String      @unique
  titulo                String
  descricao             String?     @db.Text
  status                StatusBem
  valorAvaliacao        Float?
  
  // Relacionamentos
  processoJudicialId      String?
  processoJudicial        ProcessoJudicial? @relation(fields: [processoJudicialId], references: [id])

  vendedorId              String?
  vendedor                Vendedor?         @relation(fields: [vendedorId], references: [id])

  categoriaId             String?
  categoria               CategoriaLote?    @relation(fields: [categoriaId], references: [id])

  subcategoriaId          String?
  subcategoria            Subcategoria?     @relation(fields: [subcategoriaId], references: [id])
  
  lotes                   Lote[] // Relação muitos-para-muitos com Lote
  
  dataCriacao             DateTime    @default(now())
  dataAtualizacao         DateTime    @updatedAt
}


model Lance {
  id              String      @id @default(cuid())
  valor           Float
  dataHora        DateTime    @default(now())
  
  // Relacionamentos
  leilaoId        String
  leilao          Leilao      @relation(fields: [leilaoId], references: [id], onDelete: Cascade)
  
  loteId          String
  lote            Lote        @relation(fields: [loteId], references: [id], onDelete: Cascade)
  
  licitanteId     String
  licitante       Usuario     @relation(fields: [licitanteId], references: [id], onDelete: Cascade)
  
  displayLicitante String

  @@index([loteId, dataHora])
}

model Arremate {
  id                  String           @id @default(cuid())
  valorArremate       Float
  dataArremate        DateTime         @default(now())
  statusPagamento     StatusPagamento  @default(PENDENTE)
  urlFatura           String?
  
  // Relacionamentos
  loteId              String           @unique
  lote                Lote             @relation(fields: [loteId], references: [id], onDelete: Cascade)
  
  leilaoId            String
  leilao              Leilao           @relation(fields: [leilaoId], references: [id])
  
  arrematanteId       String
  arrematante         Usuario          @relation(fields: [arrematanteId], references: [id])
}


// ===================================
// Modelos de Entidades (Vendedor, Leiloeiro)
// ===================================

model Vendedor {
  id                      String             @id @default(cuid())
  idPublico               String             @unique
  nome                    String             @unique
  slug                    String             @unique
  nomeContato             String?
  email                   String?            @unique
  telefone                String?
  endereco                String?
  cidade                  String?
  estado                  String?
  cep                     String?
  website                 String?
  urlLogo                 String?
  dataAiHintLogo          String?
  descricao               String?
  isJudicial              Boolean            @default(false)
  dataCriacao             DateTime           @default(now())
  dataAtualizacao         DateTime           @updatedAt

  // Relacionamentos
  usuarioId               String?            @unique
  usuario                 Usuario?           @relation(fields: [usuarioId], references: [id])
  
  filialJudicialId        String?            @unique
  filialJudicial          Vara?              @relation(fields: [filialJudicialId], references: [id])
  
  leiloes                 Leilao[]
  bens                    Bem[]
  vendasDiretas           VendaDireta[]
}

model Leiloeiro {
  id                      String        @id @default(cuid())
  idPublico               String        @unique
  nome                    String        @unique
  slug                    String        @unique
  numeroRegistro          String?
  nomeContato             String?
  email                   String?       @unique
  telefone                String?
  endereco                String?
  cidade                  String?
  estado                  String?
  cep                     String?
  website                 String?
  urlLogo                 String?
  dataAiHintLogo          String?
  descricao               String?
  dataCriacao             DateTime      @default(now())
  dataAtualizacao         DateTime      @updatedAt

  // Relacionamentos
  usuarioId               String?       @unique
  usuario                 Usuario?      @relation(fields: [usuarioId], references: [id])
  
  leiloes                 Leilao[]
}

// ===================================
// Modelos de Localização
// ===================================

model Estado {
  id              String      @id @default(cuid())
  nome            String      @unique
  uf              String      @unique
  slug            String      @unique
  
  cidades         Cidade[]
  tribunais       Tribunal[]
  comarcas        Comarca[]
}

model Cidade {
  id          String @id @default(cuid())
  nome        String
  slug        String
  ibgeCode    String?
  
  estadoId    String
  estado      Estado @relation(fields: [estadoId], references: [id])

  @@unique([nome, estadoId])
}


// ===================================
// Modelos para Leilão Judicial
// ===================================

model Tribunal {
  id          String      @id @default(cuid())
  nome        String      @unique
  slug        String      @unique
  website     String?
  
  estadoUf    String
  estado      Estado      @relation(fields: [estadoUf], references: [uf])
  
  comarcas    Comarca[]
  processos   ProcessoJudicial[]
}

model Comarca {
  id          String      @id @default(cuid())
  nome        String
  slug        String      @unique
  cep         String?
  
  tribunalId  String
  tribunal    Tribunal    @relation(fields: [tribunalId], references: [id])
  
  estadoId    String
  estado      Estado      @relation(fields: [estadoId], references: [id])
  
  varas       Vara[]
  processos   ProcessoJudicial[]
}

model Vara {
  id              String      @id @default(cuid())
  nome            String
  slug            String      @unique
  nomeContato     String?
  telefone        String?
  email           String?
  
  comarcaId       String
  comarca         Comarca     @relation(fields: [comarcaId], references: [id])

  processos       ProcessoJudicial[]
  vendedorVinculado Vendedor?
}

model ProcessoJudicial {
  id              String      @id @default(cuid())
  idPublico       String      @unique
  numeroProcesso  String      @unique
  isEletronico    Boolean     @default(true)
  
  // Relacionamentos
  tribunalId      String
  tribunal        Tribunal    @relation(fields: [tribunalId], references: [id])
  
  comarcaId       String
  comarca         Comarca     @relation(fields: [comarcaId], references: [id])

  varaId          String
  vara            Vara        @relation(fields: [varaId], references: [id])
  
  vendedorId      String?
  vendedor        Vendedor?   @relation(fields: [vendedorId], references: [id])
  
  leiloes         Leilao[]
  partes          ParteProcesso[]
  bens            Bem[]
  
  dataCriacao     DateTime    @default(now())
  dataAtualizacao DateTime    @updatedAt
}

model ParteProcesso {
  id                String      @id @default(cuid())
  nome              String
  documento         String?
  tipoParte         TipoParteProcesso
  
  processoJudicialId String
  processoJudicial  ProcessoJudicial @relation(fields: [processoJudicialId], references: [id], onDelete: Cascade)

  @@unique([processoJudicialId, nome, tipoParte])
}

// ===================================
// Modelos Auxiliares e de Conteúdo
// ===================================

model VendaDireta {
  id                  String              @id @default(cuid())
  idPublico           String              @unique
  titulo              String
  descricao           String              @db.Text
  urlImagem           String
  idImagemMidia       String?
  dataAiHint          String?
  tipoOferta          TipoVendaDireta
  preco               Float?
  precoMinimoProposta Float?
  status              StatusVendaDireta   @default(PENDENTE_APROVACAO)
  
  cidade              String?
  estado              String?
  latitude            Float?
  longitude           Float?
  
  // Relacionamentos
  categoriaId         String
  categoria           CategoriaLote       @relation(fields: [categoriaId], references: [id])
  
  vendedorId          String
  vendedor            Vendedor            @relation(fields: [vendedorId], references: [id])
  
  dataCriacao         DateTime            @default(now())
  dataAtualizacao     DateTime            @updatedAt
  dataExpiracao       DateTime?
}

model ItemMidia {
  id              String      @id @default(cuid())
  nomeArquivo     String
  caminhoStorage  String      @unique
  urlOriginal     String
  urlThumbnail    String?
  tipoMime        String
  tamanhoBytes    Int
  
  titulo          String?
  altText         String?
  legenda         String?
  descricao       String?
  
  // Relacionamentos
  enviadoPorId    String
  enviadoPor      Usuario     @relation(fields: [enviadoPorId], references: [id], onDelete: NoAction)
  
  dataEnvio       DateTime    @default(now())
  dataAtualizacao DateTime    @updatedAt

  @@index([enviadoPorId])
}

model PostBlog {
  id              String      @id @default(cuid())
  titulo          String
  slug            String      @unique
  conteudo        String      @db.Text
  urlImagemCapa   String
  autor           String
  
  categoriaId     String?
  categoria       CategoriaLote? @relation(fields: [categoriaId], references: [id])
  
  dataPublicacao  DateTime    @default(now())
  dataAtualizacao DateTime    @updatedAt
}

model MensagemContato {
    id              String      @id @default(cuid())
    nome            String
    email           String
    assunto         String
    mensagem        String      @db.Text
    isLida          Boolean     @default(false)
    
    dataCriacao     DateTime    @default(now())
}

model Notificacao {
    id              String      @id @default(cuid())
    usuarioId       String
    usuario         Usuario     @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
    mensagem        String
    isLida          Boolean     @default(false)
    link            String?
    
    dataCriacao     DateTime    @default(now())

    @@index([usuarioId])
}

model Avaliacao {
    id              String      @id @default(cuid())
    nota            Int
    comentario      String?
    
    leilaoId        String
    leilao          Leilao      @relation(fields: [leilaoId], references: [id], onDelete: Cascade)
    
    loteId          String
    lote            Lote        @relation(fields: [loteId], references: [id])
    
    usuarioId       String
    usuario         Usuario     @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
    
    displayUsuario  String
    
    dataCriacao     DateTime    @default(now())

    @@index([loteId])
    @@unique([loteId, usuarioId])
}

model PerguntaLote {
    id                      String      @id @default(cuid())
    textoPergunta           String
    isPublica               Boolean     @default(true)
    
    textoResposta           String?
    dataResposta            DateTime?
    
    // Relacionamentos
    leilaoId                String
    leilao                  Leilao      @relation(fields: [leilaoId], references: [id], onDelete: Cascade)
    
    loteId                  String
    lote                    Lote        @relation(fields: [loteId], references: [id])
    
    usuarioId               String
    usuario                 Usuario     @relation(fields: [usuarioId], references: [id])
    
    displayUsuario          String
    
    idUsuarioResposta       String?
    usuarioResposta         Usuario?    @relation("RespostasAdmin", fields: [idUsuarioResposta], references: [id], onDelete: SetNull)
    displayUsuarioResposta  String?
    
    dataCriacao             DateTime    @default(now())
}

model LanceMaximoUsuario {
  id          String    @id @default(cuid())
  valorMaximo Float
  isAtivo     Boolean   @default(true)
  
  usuarioId   String
  usuario     Usuario   @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  
  loteId      String
  lote        Lote      @relation(fields: [loteId], references: [id], onDelete: Cascade)
  
  dataCriacao     DateTime  @default(now())
  dataAtualizacao DateTime  @updatedAt

  @@unique([usuarioId, loteId])
}

model ConfiguracoesPlataforma {
  id                          String    @id @default("global")
  tituloSite                  String
  taglineSite                 String
  basePathImagensGaleria      String
  provedorStorage             String
  bucketFirebaseStorage       String?
  temaAtivo                   String?
  temas                       Json[]
  mascarasIdPublico           Json
  configuracoesMapa           Json
  tipoPaginacaoBusca          String
  itensPorPaginaBusca         Int
  contagemCarregarMaisBusca   Int
  exibirContadorLoteDetalhe   Boolean
  exibirContadorCards         Boolean
  exibirLotesRelacionados     Boolean
  contagemLotesRelacionados   Int
  gatilhosMentais             Json
  visibilidadeBadgesSecao     Json
  configuracoesLances         Json
  tabelaIncrementoVariavel    Json
  itensPorPaginaPadraoListas  Int
  dataAtualizacao             DateTime  @updatedAt
}


// ===================================
// ENUMS
// ===================================

enum TipoContaUsuario {
  PESSOA_FISICA
  PESSOA_JURIDICA
  COMITENTE_VENDA_DIRETA
}

enum StatusHabilitacaoUsuario {
  PENDENTE_DOCUMENTOS
  EM_ANALISE
  HABILITADO
  DOCUMENTOS_REJEITADOS
  BLOQUEADO
}

enum StatusDocumentoUsuario {
  NAO_ENVIADO
  ENVIADO
  APROVADO
  REJEITADO
  EM_ANALISE
}

enum StatusLeilao {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum StatusLote {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum ModalidadeLeilao {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  HOLANDES
  SILENCIOSO
}

enum StatusBem {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum TipoParteProcesso {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum StatusPagamento {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum TipoVendaDireta {
  COMPRAR_JA
  ACEITA_PROPOSTAS
}

enum StatusVendaDireta {
  ATIVO
  VENDIDO
  EXPIRADO
  PENDENTE_APROVACAO
}

enum TipoTemplateDocumento {
  TERMO_ARREMATACAO
  LAUDO_AVALIACAO
  CERTIFICADO_LEILAO
}

