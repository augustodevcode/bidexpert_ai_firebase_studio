// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ========================================
// ENUMS
// ========================================

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserAccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
  RETIRADO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ACTIVE
  SOLD
  EXPIRED
  PENDING_APPROVAL
  REMOVED
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

// ========================================
// MODELS
// ========================================

model User {
  id                  String                @id @default(cuid())
  email               String                @unique
  fullName            String?
  password            String
  roleId              String?
  habilitationStatus  UserHabilitationStatus? @default(PENDING_DOCUMENTS)
  cpf                 String?
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  status              String?
  optInMarketing      Boolean?              @default(false)
  avatarUrl           String?
  dataAiHint          String?               @db.Text
  accountType         UserAccountType?      @default(PHYSICAL)
  razaoSocial         String?
  cnpj                String?               @unique
  inscricaoEstadual   String?
  website             String?
  sellerId            String?               @unique
  auctioneerId        String?               @unique
  badges              Json?

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt

  role                Role?                 @relation(fields: [roleId], references: [id], onDelete: SetNull, map: "User_roleId_fkey")
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  notifications       Notification[]
  askedQuestions      LotQuestion[]         @relation("AskedByUser")
  answeredQuestions   LotQuestion[]         @relation("AnsweredByUser")
  reviews             Review[]
  maxBids             UserLotMaxBid[]
  uploadedMedia       MediaItem[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
}

model Role {
  id              String       @id @default(cuid())
  name            String
  name_normalized String       @unique
  description     String?      @db.Text
  permissions     Json?
  users           User[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  permissionsRel  Permission[]
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DocumentType {
  id             String         @id @default(cuid())
  name           String         @unique
  description    String?        @db.Text
  isRequired     Boolean        @default(false)
  appliesTo      String?
  allowedFormats String?
  displayOrder   Int            @default(0)
  userDocuments  UserDocument[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model UserDocument {
  id              String             @id @default(cuid())
  userId          String
  documentTypeId  String
  fileUrl         String?
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  rejectionReason String?            @db.Text
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType       @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, documentTypeId])
}

model MediaItem {
  id                     String      @id @default(cuid())
  fileName               String
  storagePath            String?     @unique
  title                  String?
  altText                String?
  caption                String?
  description            String?     @db.Text
  mimeType               String
  sizeBytes              Int
  dimensions             Json?
  urlOriginal            String      @db.Text
  urlThumbnail           String?     @db.Text
  urlMedium              String?     @db.Text
  urlLarge               String?     @db.Text
  linkedLotIds           Json?
  dataAiHint             String?
  uploadedBy             String?
  uploadedAt             DateTime    @default(now())
  userUploader           User?       @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)
  auction                Auction?
  lot                    Lot?
  bem                    Bem?
  sellerLogo             Seller?
  auctioneerLogo         Auctioneer?
  categoryLogo           LotCategory?
  categoryCover          LotCategory?
  categoryMegaMenu       LotCategory?
  subcategoryIcon        Subcategory?
  blogPostImage          BlogPost?
  directSaleOfferImage   DirectSaleOffer?
}

model Auction {
  id                             String        @id @default(cuid())
  publicId                       String        @unique
  title                          String
  fullTitle                      String?
  description                    String?       @db.Text
  status                         AuctionStatus @default(RASCUNHO)
  auctionType                    AuctionType?
  auctioneerId                   String
  sellerId                       String?
  categoryId                     String
  judicialProcessId              String?
  imageMediaId                   String?       @unique
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json?
  city                           String?
  state                          String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  vehicleLocation                String?
  automaticBiddingEnabled        Boolean       @default(false)
  silentBiddingEnabled           Boolean       @default(false)
  allowMultipleBidsPerUser       Boolean       @default(true)
  allowInstallmentBids           Boolean       @default(false)
  softCloseEnabled               Boolean       @default(false)
  softCloseMinutes               Int?          @default(2)
  estimatedRevenue               Float?
  achievedRevenue                Float?        @default(0)
  totalHabilitatedUsers          Int?          @default(0)
  isFeaturedOnMarketplace        Boolean?      @default(false)
  marketplaceAnnouncementTitle   String?
  additionalTriggers             Json?
  totalLots                      Int           @default(0)
  visits                         Int           @default(0)
  dataAiHint                     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category                       LotCategory     @relation(fields: [categoryId], references: [id])
  auctioneer                     Auctioneer      @relation(fields: [auctioneerId], references: [id])
  seller                         Seller?         @relation(fields: [sellerId], references: [id])
  judicialProcess                JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  image                          MediaItem?      @relation("AuctionImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  lots                           Lot[]
  bids                           Bid[]
  questions                      LotQuestion[]
}

model Lot {
  id                         String    @id @default(cuid())
  publicId                   String    @unique
  auctionId                  String
  number                     String?
  title                      String
  description                String?   @db.Text
  price                      Float
  initialPrice               Float?
  secondInitialPrice         Float?
  bidIncrementStep           Float?
  status                     LotStatus @default(EM_BREVE)
  categoryId                 String
  subcategoryId              String?
  imageMediaId               String?   @unique
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?   @db.Text
  mapStaticImageUrl          String?   @db.Text
  winningBidTermUrl          String?
  views                      Int       @default(0)
  bidsCount                  Int       @default(0)
  isFeatured                 Boolean   @default(false)
  isExclusive                Boolean   @default(false)
  discountPercentage         Float?
  additionalTriggers         Json?
  bemIds                     Json?
  mediaItemIds               Json?
  condition                  String?
  dataAiHint                 String?
  judicialProcessNumber      String?
  courtDistrict              String?
  courtName                  String?
  publicProcessUrl           String?
  propertyRegistrationNumber String?
  propertyLiens              String?   @db.Text
  knownDebts                 String?   @db.Text
  additionalDocumentsInfo    String?   @db.Text
  reservePrice               Float?
  evaluationValue            Float?
  debtAmount                 Float?
  itbiValue                  Float?
  endDate                    DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  auction     Auction     @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category    LotCategory @relation(fields: [categoryId], references: [id])
  subcategory Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  image       MediaItem?  @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  bids        Bid[]
  wins        UserWin[]
  reviews     Review[]
  questions   LotQuestion[]
  maxBids     UserLotMaxBid[]
}

model Seller {
  id                         String   @id @default(cuid())
  publicId                   String   @unique
  name                       String
  slug                       String   @unique
  userId                     String?  @unique
  isJudicial                 Boolean  @default(false)
  judicialBranchId           String?  @unique
  logoMediaId                String?  @unique
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  description                String?  @db.Text
  dataAiHintLogo             String?
  rating                     Float?
  memberSince                DateTime?
  activeLotsCount            Int?
  totalSalesValue            Float?
  auctionsFacilitatedCount   Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user                       User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  judicialBranch             JudicialBranch?
  logo                       MediaItem?       @relation("LogoSeller", fields: [logoMediaId], references: [id])
  auctions                   Auction[]
  bens                       Bem[]
  directSaleOffers           DirectSaleOffer[]
}

model Auctioneer {
  id                       String   @id @default(cuid())
  publicId                 String   @unique
  name                     String
  slug                     String   @unique
  userId                   String?  @unique
  registrationNumber       String?
  logoMediaId              String?  @unique
  contactName              String?
  email                    String?
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  description              String?  @db.Text
  dataAiHintLogo           String?
  rating                   Float?
  memberSince              DateTime?
  auctionsConductedCount   Int?
  totalValueSold           Float?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user                     User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  logo                     MediaItem? @relation("LogoAuctioneer", fields: [logoMediaId], references: [id])
  auctions                 Auction[]
}

model Bem {
  id                         String   @id @default(cuid())
  publicId                   String   @unique
  title                      String
  description                String?  @db.Text
  status                     BemStatus
  categoryId                 String
  subcategoryId              String?
  judicialProcessId          String?
  sellerId                   String?
  evaluationValue            Float?
  imageMediaId               String?  @unique
  latitude                   Float?
  longitude                  Float?
  locationCity               String?
  locationState              String?
  address                    String?
  dataAiHint                 String?

  plate                      String?
  make                       String?
  model                      String?
  version                    String?
  year                       Int?
  modelYear                  Int?
  mileage                    Int?
  color                      String?
  fuelType                   String?
  transmissionType           String?
  bodyType                   String?
  vin                        String?
  renavam                    String?
  enginePower                String?
  numberOfDoors              Int?
  vehicleOptions             String? @db.Text
  detranStatus               String?
  debts                      String? @db.Text
  runningCondition           String?
  bodyCondition              String?
  tiresCondition             String?
  hasKey                     Boolean?

  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  propertyType               String?
  constructionType           String?
  finishes                   String? @db.Text
  infrastructure             String? @db.Text
  condoDetails               String? @db.Text
  improvements               String? @db.Text
  topography                 String?
  liensAndEncumbrances       String? @db.Text
  propertyDebts              String? @db.Text
  unregisteredRecords        String? @db.Text
  hasHabiteSe                Boolean?
  zoningRestrictions         String?

  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String? @db.Text
  includedAccessories        String? @db.Text
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String? @db.Text

  applianceCapacity          String?
  voltage                    String?
  applianceType              String?
  additionalFunctions        String?

  hoursUsed                  Int?
  engineType                 String?
  capacityOrPower            String?
  maintenanceHistory         String? @db.Text
  installationLocation       String?
  compliesWithNR             String?
  operatingLicenses          String?

  breed                      String?
  age                        String?
  sex                        String?
  weight                     String?
  individualId               String?
  purpose                    String?
  sanitaryCondition          String? @db.Text
  lineage                    String? @db.Text
  isPregnant                 Boolean?
  specialSkills              String? @db.Text
  gtaDocument                String?
  breedRegistryDocument      String?
  vaccinationStatus          String? @db.Text

  furnitureType              String?
  material                   String?
  style                      String?
  dimensions                 String?
  pieceCount                 Int?
  jewelryType                String?
  metal                      String?
  gemstones                  String?
  totalWeight                String?
  jewelrySize                String?
  authenticityCertificate    String?
  workType                   String?
  artist                     String?
  period                     String?
  technique                  String?
  provenance                 String?
  boatType                   String?
  boatLength                 String?
  hullMaterial               String?
  onboardEquipment           String? @db.Text
  productName                String?
  quantity                   String?
  packagingType              String?
  expirationDate             DateTime?
  storageConditions          String?
  preciousMetalType          String?
  purity                     String?
  forestGoodsType            String?
  volumeOrQuantity           String?
  species                    String?
  dofNumber                  String?
  amenities                  Json?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category          LotCategory      @relation(fields: [categoryId], references: [id])
  subcategory       Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller            Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  image             MediaItem?       @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
}

model JudicialProcess {
  id              String   @id @default(cuid())
  publicId        String   @unique
  processNumber   String   @unique
  isElectronic    Boolean  @default(true)
  courtId         String
  districtId      String
  branchId        String
  sellerId        String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  court           Court            @relation(fields: [courtId], references: [id])
  district        JudicialDistrict @relation(fields: [districtId], references: [id])
  branch          JudicialBranch   @relation(fields: [branchId], references: [id])
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  parties         ProcessParty[]
  bens            Bem[]
  auctions        Auction[]
}

model StateInfo {
  id        String             @id @default(cuid())
  name      String             @unique
  uf        String             @unique
  slug      String             @unique
  cityCount Int                @default(0)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  cities    CityInfo[]
  courts    Court[]
  districts JudicialDistrict[]
}

model CityInfo {
  id        String   @id @default(cuid())
  name      String
  slug      String
  stateId   String
  stateUf   String
  ibgeCode  String?
  lotCount  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state     StateInfo @relation(fields: [stateId], references: [id])

  @@unique([name, stateId])
}

model Court {
  id        String             @id @default(cuid())
  name      String
  slug      String             @unique
  stateUf   String
  website   String?
  stateId   String?
  state     StateInfo?         @relation(fields: [stateId], references: [id])
  districts JudicialDistrict[]
  processes JudicialProcess[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JudicialDistrict {
  id        String           @id @default(cuid())
  name      String
  slug      String
  courtId   String
  stateId   String
  zipCode   String?
  court     Court            @relation(fields: [courtId], references: [id])
  state     StateInfo        @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, courtId])
}

model JudicialBranch {
  id         String             @id @default(cuid())
  name       String
  slug       String
  districtId String
  contactName String?
  phone      String?
  email      String?
  district   JudicialDistrict   @relation(fields: [districtId], references: [id])
  processes  JudicialProcess[]
  sellers    Seller?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, districtId])
}

model ProcessParty {
  id             String           @id @default(cuid())
  processId      String
  name           String
  partyType      ProcessPartyType
  documentNumber String?
  process        JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([processId, name, partyType])
}

model LotCategory {
  id                   String        @id @default(cuid())
  name                 String        @unique
  slug                 String        @unique
  description          String?
  logoMediaId          String?       @unique
  coverImageMediaId    String?       @unique
  megaMenuImageMediaId String?       @unique
  dataAiHintLogo       String?
  dataAiHintCover      String?
  dataAiHintMegaMenu   String?
  hasSubcategories     Boolean       @default(false)
  itemCount            Int           @default(0)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  auctions             Auction[]
  lots                 Lot[]
  bens                 Bem[]
  subcategories        Subcategory[]
  logo                 MediaItem?    @relation("LogoCategory", fields: [logoMediaId], references: [id])
  coverImage           MediaItem?    @relation("CoverCategory", fields: [coverImageMediaId], references: [id])
  megaMenuImage        MediaItem?    @relation("MegaMenuCategory", fields: [megaMenuImageMediaId], references: [id])
}

model Subcategory {
  id              String      @id @default(cuid())
  name            String
  slug            String
  parentCategoryId String
  description     String?
  iconMediaId     String?     @unique
  dataAiHintIcon  String?
  displayOrder    Int         @default(0)
  itemCount       Int         @default(0)
  parentCategory  LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots            Lot[]
  bens            Bem[]
  icon            MediaItem?  @relation("IconSubcategory", fields: [iconMediaId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, parentCategoryId])
}

model DirectSaleOffer {
  id                       String                @id @default(cuid())
  publicId                 String                @unique
  title                    String
  description              String                @db.Text
  offerType                DirectSaleOfferType
  status                   DirectSaleOfferStatus
  price                    Float?
  minimumOfferPrice        Float?
  sellerId                 String
  categoryId               String
  locationCity             String?
  locationState            String?
  imageMediaId             String?               @unique
  dataAiHint               String?
  expiresAt                DateTime?
  views                    Int                   @default(0)
  proposalsCount           Int                   @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category LotCategory @relation(fields: [categoryId], references: [id])
  seller   Seller      @relation(fields: [sellerId], references: [id])
  image    MediaItem?  @relation("OfferImage", fields: [imageMediaId], references: [id])
}

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())
  user          User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction     Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String        @id @default(cuid())
  lotId            String
  userId           String
  winningBidAmount Float
  winDate          DateTime      @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model UserLotMaxBid {
  id       String  @id @default(cuid())
  userId   String
  lotId    String
  maxAmount Float
  isActive Boolean @default(true)
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot        Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId, lotId])
}

model Review {
  id                String   @id @default(cuid())
  lotId             String
  auctionId         String?
  userId            String
  userDisplayName   String
  rating            Int
  comment           String   @db.Text
  isVerifiedPurchase Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                       String   @id @default(cuid())
  lotId                    String
  auctionId                String
  userId                   String
  userDisplayName          String
  questionText             String   @db.Text
  answerText               String?  @db.Text
  answeredByUserId         String?
  answeredByUserDisplayName String?
  answeredAt               DateTime?
  isPublic                 Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user       User    @relation("AskedByUser", fields: [userId], references: [id], onDelete: Cascade)
  answerer   User?   @relation("AnsweredByUser", fields: [answeredByUserId], references: [id], onDelete: SetNull)
  lot        Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction    Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}

model BlogPost {
    id            String @id @default(cuid())
    title         String
    slug          String @unique
    content       String @db.Text
    authorId      String
    publishedAt   DateTime?
    status        String @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
    featuredImage String? @unique
    tags          String?
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    image           MediaItem? @relation("BlogPostImage", fields: [featuredImage], references: [id], onDelete: SetNull)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ContactMessage {
    id        String @id @default(cuid())
    name      String
    email     String
    subject   String
    message   String @db.Text
    isRead    Boolean @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model PlatformSettings {
    id                          String    @id @default("global")
    siteTitle                   String?
    siteTagline                 String?
    galleryImageBasePath        String?
    storageProvider             String?
    firebaseStorageBucket       String?
    activeThemeName             String?
    themes                      Json?
    platformPublicIdMasks       Json?
    homepageSections            Json?
    mentalTriggerSettings       Json?
    sectionBadgeVisibility      Json?
    mapSettings                 Json?
    biddingSettings             Json?
    searchPaginationType        String?
    searchItemsPerPage          Int?
    searchLoadMoreCount         Int?
    showCountdownOnLotDetail    Boolean?
    showCountdownOnCards        Boolean?
    showRelatedLotsOnLotDetail  Boolean?
    relatedLotsCount            Int?
    defaultUrgencyTimerHours    Int?
    variableIncrementTable      Json?
    defaultListItemsPerPage     Int?
    
    updatedAt DateTime @updatedAt
}
