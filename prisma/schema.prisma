// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// =================================================================
// ENUMS - Tipos de Dados Reutilizáveis
// =================================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  REJECTED_DOCUMENTS
  HABILITADO
  BLOCKED
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

// =================================================================
// MODELS - Representação das Tabelas do Banco de Dados
// =================================================================

model User {
  id                  String   @id @default(uuid())
  email               String   @unique
  password            String?
  fullName            String?
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType          @default(PHYSICAL)
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Detalhes PF
  cpf                 String? @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  
  // Detalhes PJ
  razaoSocial         String?
  cnpj                String? @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  
  // Endereço
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?

  optInMarketing      Boolean? @default(false)

  // Relações
  roles           UsersOnRoles[]
  sellerProfile   Seller?
  auctioneer      Auctioneer?
  documents       UserDocument[]
  bids            Bid[]
  wins            UserWin[]
  maxBids         UserLotMaxBid[]
  uploadedMedia   MediaItem[]
  notifications   Notification[]
  habilitations   AuctionHabilitation[]
  wonLots         Lot[]                 @relation("LotWinner")
}

model Role {
  id               String   @id @default(uuid())
  name             String   @unique
  nameNormalized   String   @unique
  description      String?
  permissions      String[]
  users            UsersOnRoles[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model UsersOnRoles {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model StateInfo {
  id        String   @id @default(uuid())
  name      String
  uf        String   @unique
  slug      String   @unique
  cityCount Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cities    CityInfo[]
  auctions  Auction[]
  lots      Lot[]
}

model CityInfo {
  id        String    @id @default(uuid())
  name      String
  slug      String?
  stateId   String
  stateUf   String?
  ibgeCode  String?   @unique
  lotCount  Int?      @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  state     StateInfo @relation(fields: [stateId], references: [id], onDelete: Cascade)
  auctions  Auction[]
  lots      Lot[]
}

model LotCategory {
  id                  String   @id @default(uuid())
  name                String   @unique
  slug                String   @unique
  description         String?  @db.VarChar(500)
  hasSubcategories    Boolean?
  logoUrl             String?
  logoMediaId         String?
  dataAiHintIcon      String?
  coverImageUrl       String?
  coverImageMediaId   String?
  dataAiHintCover     String?
  megaMenuImageUrl    String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu  String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relações
  subcategories      Subcategory[]
  lots               Lot[]
  bens               Bem[]
  auctions           Auction[]
  directSaleOffers   DirectSaleOffer[]
}

model Subcategory {
  id                String      @id @default(uuid())
  name              String
  slug              String?
  parentCategoryId  String
  parentCategory    LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  description       String?     @db.VarChar(500)
  displayOrder      Int?        @default(0)
  iconUrl           String?
  iconMediaId       String?
  dataAiHintIcon    String?

  // Relações
  lots Lot[]
  bens Bem[]
}

model Court {
  id                String              @id @default(uuid())
  name              String              @unique
  slug              String?             @unique
  stateUf           String?
  website           String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  // Relações
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
}

model JudicialDistrict {
  id                String              @id @default(uuid())
  name              String
  slug              String              @unique
  courtId           String?
  stateId           String?
  zipCode           String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt @default(now())
  // Relações
  court             Court?              @relation(fields: [courtId], references: [id])
  state             StateInfo?          @relation(fields: [stateId], references: [id])
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
}

model JudicialBranch {
  id                String            @id @default(uuid())
  name              String
  slug              String            @unique
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt @default(now())
  // Relações
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
}

model JudicialProcess {
  id                String           @id @default(uuid())
  publicId          String           @unique
  processNumber     String           @unique
  isElectronic      Boolean          @default(true)
  courtId           String?
  districtId        String?
  branchId          String?
  sellerId          String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt @default(now())
  // Relações
  court             Court?           @relation(fields: [courtId], references: [id])
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch            JudicialBranch?  @relation(fields: [branchId], references: [id])
  seller            Seller?          @relation(fields: [sellerId], references: [id])
  parties           JudicialParty[]
  bens              Bem[]
  auctions          Auction[]
}

model JudicialParty {
  id             String          @id @default(uuid())
  processId      String
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  name           String
  documentNumber String?
  partyType      ProcessPartyType
}

model Seller {
  id               String   @id @default(uuid())
  publicId         String?  @unique
  slug             String?  @unique
  name             String   @unique
  contactName      String?
  email            String?
  phone            String?
  address          String?
  city             String?
  state            String?
  zipCode          String?
  website          String?
  logoUrl          String?
  logoMediaId      String?
  dataAiHintLogo   String?
  description      String?  @db.Text
  userId           String?  @unique
  user             User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  isJudicial       Boolean  @default(false)
  judicialBranchId String?  @unique
  judicialBranch   JudicialBranch? @relation(fields: [judicialBranchId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt @default(now())
  // Relações
  auctions         Auction[]
  lots             Lot[]
  bens             Bem[]
  judicialProcesses JudicialProcess[]
  directSaleOffers DirectSaleOffer[]
}

model Auctioneer {
  id                 String    @id @default(uuid())
  publicId           String?   @unique
  slug               String?   @unique
  name               String
  registrationNumber String?
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?   @db.Text
  userId             String?   @unique
  user               User?     @relation(fields: [userId], references: [id])
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt @default(now())
  // Relações
  auctions           Auction[]
}

model Auction {
  id                               String        @id @default(uuid())
  publicId                         String?       @unique
  slug                             String?       @unique
  title                            String
  description                      String?       @db.Text
  status                           AuctionStatus @default(RASCUNHO)
  auctionType                      AuctionType?
  auctionMethod                    AuctionMethod?
  participation                    AuctionParticipation?
  onlineUrl                        String?
  address                          String?
  zipCode                          String?
  latitude                         Float?
  longitude                        Float?
  auctionDate                      DateTime
  endDate                          DateTime?
  auctioneerId                     String?
  sellerId                         String?
  categoryId                       String?
  visits                           Int?          @default(0)
  totalLots                        Int?          @default(0)
  initialOffer                     Float?
  isFavorite                       Boolean?      @default(false)
  dataAiHint                       String?
  imageMediaId                     String?
  imageUrl                         String?
  documentsUrl                     String?
  evaluationReportUrl              String?
  auctionCertificateUrl            String?
  sellingBranch                    String?
  automaticBiddingEnabled          Boolean       @default(false)
  allowInstallmentBids             Boolean       @default(true)
  silentBiddingEnabled             Boolean       @default(false)
  allowMultipleBidsPerUser         Boolean       @default(true)
  softCloseEnabled                 Boolean       @default(false)
  softCloseMinutes                 Int           @default(2)
  estimatedRevenue                 Float?
  achievedRevenue                  Float?
  totalHabilitatedUsers            Int?
  isFeaturedOnMarketplace          Boolean       @default(false)
  marketplaceAnnouncementTitle     String?
  judicialProcessId                String?
  additionalTriggers               Json?
  decrementAmount                  Float?
  decrementIntervalSeconds         Int?
  floorPrice                       Float?
  autoRelistSettings               Json?
  createdAt                        DateTime      @default(now())
  updatedAt                        DateTime      @updatedAt
  cityId                           String?
  stateId                          String?
  
  // Relações
  auctioneer                       Auctioneer?         @relation(fields: [auctioneerId], references: [id])
  seller                           Seller?             @relation(fields: [sellerId], references: [id])
  category                         LotCategory?        @relation(fields: [categoryId], references: [id])
  judicialProcess                  JudicialProcess?    @relation(fields: [judicialProcessId], references: [id])
  city                             CityInfo?           @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state                            StateInfo?          @relation(fields: [stateId], references: [id], onDelete: SetNull)
  lots                             Lot[]
  auctionStages                    AuctionStage[]
  habilitations                    AuctionHabilitation[]
  bids                             Bid[]
}

model AuctionHabilitation {
  id        String   @id @default(uuid())
  userId    String
  auctionId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, auctionId])
}

model AuctionStage {
  id              String    @id @default(uuid())
  auctionId       String
  auction         Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  name            String
  startDate       DateTime
  endDate         DateTime
  evaluationValue Float?
  lots            LotAuctionStageDetails[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Lot {
  id                    String        @id @default(uuid())
  publicId              String        @unique
  auctionId             String
  slug                  String?
  number                String?
  title                 String
  description           String?       @db.Text
  price                 Float
  initialPrice          Float?
  secondInitialPrice    Float?
  bidIncrementStep      Float?
  status                LotStatus     @default(EM_BREVE)
  bidsCount             Int?          @default(0)
  views                 Int?          @default(0)
  isFeatured            Boolean?      @default(false)
  isExclusive           Boolean?      @default(false)
  discountPercentage    Int?
  additionalTriggers    Json?
  imageUrl              String?
  imageMediaId          String?
  galleryImageUrls      Json?
  mediaItemIds          Json?
  type                  String?
  categoryId            String?
  subcategoryId         String?
  auctionName           String?
  sellerId              String?
  seller                Seller?       @relation(fields: [sellerId], references: [id])
  auctioneerId          String?
  auctioneer            Auctioneer?   @relation(fields: [auctioneerId], references: [id])
  cityId                String?
  stateId               String?
  cityName              String?
  stateUf               String?
  latitude              Float?
  longitude             Float?
  mapAddress            String?
  mapEmbedUrl           String?
  mapStaticImageUrl     String?
  endDate               DateTime?
  auctionDate           DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate     DateTime?
  condition             String?
  dataAiHint            String?
  winnerId              String?
  winner                User?         @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  winningBidTermUrl     String?
  allowInstallmentBids  Boolean       @default(false)
  isRelisted            Boolean       @default(false)
  relistCount           Int           @default(0)
  originalLotId         String?       @unique
  originalLot           Lot?          @relation("RelistedLot", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot           Lot?          @relation("RelistedLot")
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  
  // Relações
  auction               Auction       @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category              LotCategory?  @relation(fields: [categoryId], references: [id])
  subcategory           Subcategory?  @relation(fields: [subcategory], references: [id])
  city                  CityInfo?     @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state                 StateInfo?    @relation(fields: [stateId], references: [id], onDelete: SetNull)
  bids                  Bid[]
  userMaxBids           UserLotMaxBid[]
  wins                  UserWin[]
  bens                  LotBens[]
  stageDetails          LotAuctionStageDetails[]
  inheritedMediaFrom    Bem?          @relation("InheritedMedia", fields: [inheritedMediaFromBemId], references: [id], onDelete: SetNull)
  inheritedMediaFromBemId String?     @unique
}

model LotAuctionStageDetails {
  lotId         String
  stageId       String
  initialBid    Float?
  bidIncrement  Float?
  
  lot           Lot         @relation(fields: [lotId], references: [id], onDelete: Cascade)
  stage         AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)
  
  @@id([lotId, stageId])
}

model Bem {
  id                         String   @id @default(uuid())
  publicId                   String?  @unique
  title                      String
  description                String?  @db.Text
  status                     String   @default("DISPONIVEL")
  categoryId                 String?
  subcategoryId              String?
  judicialProcessId          String?
  sellerId                   String?
  evaluationValue            Float?
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  // Vehicle-specific fields
  plate                String?
  make                 String?
  model                String?
  version              String?
  year                 Int?
  modelYear            Int?
  mileage              Int?
  color                String?
  fuelType             String?
  transmissionType     String?
  bodyType             String?
  vin                  String?
  renavam              String?
  enginePower          String?
  numberOfDoors        Int?
  vehicleOptions       String?
  detranStatus         String?
  debts                String?
  runningCondition     String?
  bodyCondition        String?
  tiresCondition       String?
  hasKey               Boolean?

  // Real estate-specific fields
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  area                       Float?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?  @db.Text
  infrastructure             String?  @db.Text
  condoDetails               String?  @db.Text
  improvements               String?  @db.Text
  topography                 String?
  liensAndEncumbrances       String?  @db.Text
  propertyDebts              String?  @db.Text
  unregisteredRecords        String?  @db.Text
  hasHabiteSe                Boolean?
  zoningRestrictions         String?

  // Electronics
  brand                        String?
  serialNumber                 String?
  itemCondition                String?
  specifications               String? @db.Text
  includedAccessories          String? @db.Text
  batteryCondition             String?
  hasInvoice                   Boolean?
  hasWarranty                  Boolean?
  repairHistory                String? @db.Text
  
  // Appliances
  applianceCapacity            String?
  voltage                      String?
  applianceType                String?
  additionalFunctions          String?

  // Machinery
  hoursUsed                    Int?
  engineType                   String?
  capacityOrPower              String?
  maintenanceHistory           String? @db.Text
  installationLocation         String?
  compliesWithNR               String?
  operatingLicenses            String?

  // Livestock
  breed                        String?
  age                          String?
  sex                          String? // Consider enum: 'Macho', 'Femea'
  weight                       String?
  individualId                 String?
  purpose                      String?
  sanitaryCondition            String?
  vaccinationStatus            String?
  lineage                      String?
  isPregnant                   Boolean?
  specialSkills                String?
  gtaDocument                  String?
  breedRegistryDocument        String?

  // Furniture
  furnitureType                String?
  material                     String?
  style                        String?
  dimensions                   String?
  pieceCount                   Int?

  // Jewelry
  jewelryType                  String?
  metal                        String?
  gemstones                    String? @db.Text
  totalWeight                  String?
  jewelrySize                  String?
  authenticityCertificate      String?

  // Art & Antiques
  workType                     String?
  artist                       String?
  period                       String?
  technique                    String?
  provenance                   String? @db.Text

  // Boats
  boatType                     String?
  boatLength                   String?
  hullMaterial                 String?
  onboardEquipment             String? @db.Text

  // Food
  productName                  String?
  quantity                     String?
  packagingType                String?
  expirationDate               DateTime?
  storageConditions            String?

  // Precious Metals
  preciousMetalType            String?
  purity                       String?

  // Forest Goods
  forestGoodsType              String?
  volumeOrQuantity             String?
  species                      String?
  dofNumber                    String?

  // Relações
  category          LotCategory?    @relation(fields: [categoryId], references: [id])
  subcategory       Subcategory?    @relation(fields: [subcategoryId], references: [id])
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller            Seller?         @relation(fields: [sellerId], references: [id])
  lots              LotBens[]
  inheritedMediaLot Lot?            @relation("InheritedMedia")
}

model LotBens {
  lot     Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId   String
  bem     Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId   String

  @@id([lotId, bemId])
}

model MediaItem {
  id                   String   @id @default(uuid())
  fileName             String   @unique
  storagePath          String
  title                String
  altText              String?
  caption              String?
  description          String?  @db.Text
  mimeType             String
  sizeBytes            Int?
  urlOriginal          String
  urlThumbnail         String?
  urlMedium            String?
  urlLarge             String?
  linkedLotIds         Json?
  dataAiHint           String?
  uploadedByUserId     String?
  uploadedByUser       User?    @relation(fields: [uploadedByUserId], references: [id], onDelete: SetNull)
  judicialProcessId    String?  // Links to a specific judicial process
  uploadedAt           DateTime @default(now())
}

model UserDocument {
  id               String           @id @default(uuid())
  userId           String
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentTypeId   String
  documentType     DocumentType     @relation(fields: [documentTypeId], references: [id])
  status           UserDocumentStatus @default(NOT_SENT)
  fileUrl          String
  fileName         String?
  rejectionReason  String?          @db.Text
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  @@unique([userId, documentTypeId])
}

model DocumentType {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  isRequired  Boolean  @default(true)
  appliesTo   String   // e.g., 'PHYSICAL,LEGAL' or 'ALL'

  // Relação
  userDocuments UserDocument[]
}


model Bid {
  id             String   @id @default(uuid())
  lotId          String
  auctionId      String
  bidderId       String
  bidderDisplay  String?
  amount         Float
  timestamp      DateTime @default(now())
  // Relações
  lot            Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bidder         User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  auction        Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String             @id @default(uuid())
  lotId            String             @unique
  userId           String
  winningBidAmount Float
  winDate          DateTime           @default(now())
  paymentStatus    PaymentStatus      @default(PENDENTE)
  invoiceUrl       String?
  installments     InstallmentPayment[]
  // Relações
  lot              Lot                @relation(fields: [lotId], references: [id])
  user             User               @relation(fields: [userId], references: [id])
}

// Model para armazenar os detalhes de pagamento de cada parcela.
model InstallmentPayment {
  id                String        @id @default(uuid())
  userWinId         String
  userWin           UserWin       @relation(fields: [userWinId], references: [id], onDelete: Cascade)
  installmentNumber Int
  amount            Float
  dueDate           DateTime
  status            PaymentStatus @default(PENDENTE)
  paymentDate       DateTime?
  paymentMethod     String?
  transactionId     String?
}

model DirectSaleOffer {
  id                   String                @id @default(uuid())
  publicId             String?               @unique
  title                String
  description          String?               @db.Text
  offerType            DirectSaleOfferType
  price                Float?
  minimumOfferPrice    Float?
  status               DirectSaleOfferStatus @default(ACTIVE)
  category             String
  sellerId             String
  sellerName           String
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int?                  @default(0)
  expiresAt            DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  categoryId           String
  // Relações
  category             LotCategory           @relation(fields: [categoryId], references: [id])
  seller               Seller                @relation(fields: [sellerId], references: [id])
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  // Relações
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model ContactMessage {
  id      String   @id @default(uuid())
  name    String
  email   String
  subject String
  message String   @db.Text
  isRead  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentTemplate {
  id      String               @id @default(uuid())
  name    String               @unique
  type    DocumentTemplateType
  content String               @db.Text
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model PlatformSettings {
    id                               String @id @default("global")
    siteTitle                        String @default("BidExpert")
    siteTagline                      String?
    logoUrl                          String?
    faviconUrl                       String?
    galleryImageBasePath             String
    storageProvider                  String
    firebaseStorageBucket            String?
    activeThemeName                  String?
    themes                           Json?
    platformPublicIdMasks            Json?
    homepageSections                 Json?
    mentalTriggerSettings            Json?
    sectionBadgeVisibility           Json?
    mapSettings                      Json?
    biddingSettings                  Json?
    searchPaginationType             String
    searchItemsPerPage               Int
    searchLoadMoreCount              Int
    showCountdownOnLotDetail         Boolean
    showCountdownOnCards             Boolean
    showRelatedLotsOnLotDetail       Boolean
    relatedLotsCount                 Int
    defaultUrgencyTimerHours         Int?
    variableIncrementTable           Json?
    paymentGatewaySettings           Json?
    defaultListItemsPerPage          Int?
    updatedAt                        DateTime @updatedAt
}

model VehicleMake {
    id        String @id @default(uuid())
    name      String @unique
    slug      String @unique
    models    VehicleModel[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VehicleModel {
    id        String      @id @default(uuid())
    name      String
    slug      String
    makeId    String
    make      VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    @@unique([name, makeId])
}
