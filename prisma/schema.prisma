// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// ENUMERATIONS
// =================================================================

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum SexType {
  Macho
  Femea
}


// =================================================================
// BASE MODELS (No dependencies or few dependencies)
// =================================================================

model PlatformSettings {
  id                               String        @id @default("global")
  siteTitle                        String        @default("BidExpert")
  siteTagline                      String?
  logoUrl                          String?
  faviconUrl                       String?
  galleryImageBasePath             String        @default("/uploads/media/")
  storageProvider                  String        @default("local") // local or firebase
  firebaseStorageBucket            String?
  activeThemeName                  String?
  platformPublicIdMasks            Json?
  mentalTriggerSettings            Json?
  sectionBadgeVisibility           Json?
  mapSettings                      Json?
  searchPaginationType             String        @default("loadMore")
  searchItemsPerPage               Int           @default(12)
  searchLoadMoreCount              Int           @default(12)
  showCountdownOnLotDetail         Boolean       @default(true)
  showCountdownOnCards             Boolean       @default(true)
  showRelatedLotsOnLotDetail       Boolean       @default(true)
  relatedLotsCount                 Int           @default(4)
  defaultUrgencyTimerHours         Int?
  biddingSettings                  Json?
  paymentGatewaySettings           Json?
  defaultListItemsPerPage          Int           @default(10)
  updatedAt                        DateTime      @updatedAt
  // JSON arrays stored as single JSON objects
  themes                           Json?
  homepageSections                 Json?
  variableIncrementTable           Json?
}

model Role {
  id              String         @id @default(uuid())
  name            String         @unique
  nameNormalized  String         @unique
  description     String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  users           UsersOnRoles[]
  permissions     Json?
}

model State {
  id        String             @id @default(uuid())
  name      String             @unique
  uf        String             @unique
  slug      String             @unique
  cityCount Int                @default(0)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  cities    City[]
  auctions  Auction[]
  lots      Lot[]
  districts JudicialDistrict[]
}

model City {
  id        String    @id @default(uuid())
  name      String
  slug      String?
  stateId   String
  stateUf   String?
  ibgeCode  String?   @unique
  lotCount  Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  state     State     @relation(fields: [stateId], references: [id])
  auctions  Auction[]
  lots      Lot[]

  @@index([stateId])
}

model LotCategory {
  id                   String            @id @default(uuid())
  name                 String            @unique
  slug                 String            @unique
  description          String?           @db.VarChar(500)
  hasSubcategories     Boolean           @default(false)
  itemCount            Int               @default(0)
  iconName             String?
  dataAiHintIcon       String?
  logoUrl              String?
  logoMediaId          String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  subcategories        Subcategory[]
  lots                 Lot[]
  bens                 Bem[]
  directSaleOffers     DirectSaleOffer[]
  auctions             Auction[]
}

model Subcategory {
  id                 String       @id @default(uuid())
  name               String
  slug               String?
  parentCategoryId   String
  description        String?      @db.VarChar(500)
  displayOrder       Int          @default(0)
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  parentCategory     LotCategory  @relation(fields: [parentCategoryId], references: [id])
  lots               Lot[]
  bens               Bem[]
  
  @@index([parentCategoryId])
}

model DocumentType {
  id          String         @id @default(uuid())
  name        String
  description String?
  isRequired  Boolean        @default(true)
  appliesTo   String? // e.g., "PHYSICAL,LEGAL"
  userDocs    UserDocument[]
}

model DocumentTemplate {
  id        String               @id @default(uuid())
  name      String
  type      DocumentTemplateType
  content   String?              @db.Text
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Court {
  id                  String               @id @default(uuid())
  name                String               @unique
  slug                String?
  stateUf             String?
  website             String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  judicialDistricts   JudicialDistrict[]
  auctions            Auction[]            @relation("AuctionCourt")
  judicialProcesses   JudicialProcess[]    @relation("JudicialProcessCourt")
}

model JudicialDistrict {
  id                String             @id @default(uuid())
  name              String
  slug              String?            @unique
  courtId           String
  stateId           String
  zipCode           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  court             Court              @relation(fields: [courtId], references: [id])
  state             State              @relation(fields: [stateId], references: [id])
  judicialBranches  JudicialBranch[]
  auctions          Auction[]          @relation("AuctionDistrict")
  judicialProcesses JudicialProcess[]  @relation("JudicialProcessDistrict")

  @@index([courtId])
  @@index([stateId])
}

model JudicialBranch {
  id                  String             @id @default(uuid())
  name                String
  slug                String?            @unique
  districtId          String
  contactName         String?
  phone               String?
  email               String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  district            JudicialDistrict   @relation(fields: [districtId], references: [id])
  sellers             Seller[]
  auctions            Auction[]          @relation("AuctionBranch")
  judicialProcesses   JudicialProcess[]  @relation("JudicialProcessBranch")

  @@index([districtId])
}


// =================================================================
// USER AND SELLER MODELS
// =================================================================
model User {
  id                   String                  @id @default(uuid())
  email                String                  @unique
  password             String?
  fullName             String?
  sellerId             String?                 @unique
  habilitationStatus   UserHabilitationStatus  @default(PENDING_DOCUMENTS)
  accountType          AccountType             @default(PHYSICAL)
  avatarUrl            String?
  dataAiHint           String?
  badges               Json?
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  cpf                  String?
  rgNumber             String?
  rgIssuer             String?
  rgIssueDate          DateTime?
  rgState              String?
  dateOfBirth          DateTime?
  cellPhone            String?
  homePhone            String?
  gender               String?
  profession           String?
  nationality          String?
  maritalStatus        String?
  propertyRegime       String?
  spouseName           String?
  spouseCpf            String?
  zipCode              String?
  street               String?
  number               String?
  complement           String?
  neighborhood         String?
  city                 String?
  state                String?
  optInMarketing       Boolean?                @default(false)
  razaoSocial          String?
  cnpj                 String?
  inscricaoEstadual    String?
  website              String?
  responsibleName      String?
  responsibleCpf       String?
  seller               Seller?                 @relation("SellerUser", fields: [sellerId], references: [id], onDelete: SetNull)
  roles                UsersOnRoles[]
  bids                 Bid[]
  wins                 UserWin[]               @relation("UserWins")
  documents            UserDocument[]
  notifications        Notification[]
  maxBids              UserLotMaxBid[]
  habilitations        AuctionHabilitation[]
  uploadedMedia        MediaItem[]             @relation("UploadedBy")
}

model Seller {
  id                   String               @id @default(uuid())
  publicId             String?              @unique
  slug                 String?              @unique
  name                 String               @unique
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?              @db.Text
  userId               String?              @unique
  isJudicial           Boolean              @default(false)
  judicialBranchId     String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  user                 User?
  judicialBranch       JudicialBranch?      @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  auctions             Auction[]
  lots                 Lot[]
  bens                 Bem[]
  directSaleOffers     DirectSaleOffer[]

  @@index([judicialBranchId])
}


// =================================================================
// AUCTION, LOT, BEM AND RELATED MODELS
// =================================================================

model Auction {
  id                             String                 @id @default(uuid())
  publicId                       String?                @unique
  slug                           String?                @unique
  title                          String
  description                    String?                @db.Text
  status                         AuctionStatus          @default(RASCUNHO)
  auctionDate                    DateTime               @default(now())
  endDate                        DateTime?
  auctioneerId                   String
  sellerId                       String
  categoryId                     String?
  auctionType                    AuctionType?
  participation                  AuctionParticipation?  @default(ONLINE)
  auctionMethod                  AuctionMethod?         @default(STANDARD)
  onlineUrl                      String?
  address                        String?
  cityId                         String?
  stateId                        String?
  zipCode                        String?
  latitude                       Float?
  longitude                      Float?
  imageUrl                       String?
  imageMediaId                   String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  automaticBiddingEnabled        Boolean                @default(false)
  silentBiddingEnabled           Boolean                @default(false)
  allowMultipleBidsPerUser       Boolean                @default(true)
  allowInstallmentBids           Boolean                @default(true)
  softCloseEnabled               Boolean                @default(false)
  softCloseMinutes               Int                    @default(2)
  estimatedRevenue               Float?
  achievedRevenue                Float?
  totalHabilitatedUsers          Int?
  isFeaturedOnMarketplace        Boolean                @default(false)
  marketplaceAnnouncementTitle   String?
  judicialProcessId              String?
  dataAiHint                     String?
  decrementAmount                Float?
  decrementIntervalSeconds       Int?
  floorPrice                     Float?
  autoRelistSettings             Json?
  visits                         Int?                   @default(0)
  totalLots                      Int?                   @default(0)
  createdAt                      DateTime               @default(now())
  updatedAt                      DateTime               @updatedAt
  courtId                        String?
  districtId                     String?
  branchId                       String?
  lots                           Lot[]
  bids                           Bid[]
  auctionStages                  AuctionStage[]
  habilitations                  AuctionHabilitation[]
  auctioneer                     Auctioneer             @relation(fields: [auctioneerId], references: [id])
  seller                         Seller                 @relation(fields: [sellerId], references: [id])
  category                       LotCategory?           @relation(fields: [categoryId], references: [id])
  judicialProcess                JudicialProcess?       @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  court                          Court?                 @relation("AuctionCourt", fields: [courtId], references: [id])
  district                       JudicialDistrict?      @relation("AuctionDistrict", fields: [districtId], references: [id])
  branch                         JudicialBranch?        @relation("AuctionBranch", fields: [branchId], references: [id])
  city                           City?                  @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state                          State?                 @relation(fields: [stateId], references: [id], onDelete: SetNull)
  
  @@index([auctioneerId])
  @@index([sellerId])
  @@index([categoryId])
  @@index([judicialProcessId])
  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
  @@index([cityId])
  @@index([stateId])
}

model Lot {
  id                       String                 @id @default(uuid())
  publicId                 String?                @unique
  auctionId                String
  slug                     String?
  number                   String?
  title                    String
  description              String?                @db.Text
  price                    Float
  initialPrice             Float?
  secondInitialPrice       Float?
  bidIncrementStep         Float?
  status                   LotStatus              @default(EM_BREVE)
  bidsCount                Int?                   @default(0)
  views                    Int?                   @default(0)
  isFeatured               Boolean                @default(false)
  isExclusive              Boolean                @default(false)
  isRelisted               Boolean                @default(false)
  relistCount              Int                    @default(0)
  discountPercentage       Int?
  additionalTriggers       Json?
  imageUrl                 String?
  imageMediaId             String?
  galleryImageUrls         Json?
  mediaItemIds             Json?
  inheritedMediaFromBemId  String?
  type                     String // Categoria
  categoryId               String?
  subcategoryId            String?
  auctionName              String?
  sellerId                 String?
  sellerName               String?
  auctioneerId             String?
  cityId                   String?
  stateId                  String?
  cityName                 String?
  stateUf                  String?
  latitude                 Float?
  longitude                Float?
  mapAddress               String?
  mapEmbedUrl              String?
  mapStaticImageUrl        String?
  endDate                  DateTime?
  auctionDate              DateTime?
  lotSpecificAuctionDate   DateTime?
  secondAuctionDate        DateTime?
  condition                String?
  dataAiHint               String?
  winnerId                 String?
  winningBidTermUrl        String?
  allowInstallmentBids     Boolean                @default(false)
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  originalLotId            String?                @unique
  bens                     LotBens[]
  auction                  Auction                @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                 LotCategory?           @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory              Subcategory?           @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  seller                   Seller?                @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  auctioneer               Auctioneer?            @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  city                     City?                  @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state                    State?                 @relation(fields: [stateId], references: [id], onDelete: SetNull)
  winner                   User?                  @relation("WonLots", fields: [winnerId], references: [id], onDelete: SetNull)
  originalLot              Lot?                   @relation("RelistHistory", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot              Lot?                   @relation("RelistHistory")
  bids                     Bid[]
  userWins                 UserWin[]
  maxBids                  UserLotMaxBid[]
  stageDetails             LotAuctionStageDetails[]

  @@index([auctionId])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([sellerId])
  @@index([auctioneerId])
  @@index([cityId])
  @@index([stateId])
  @@index([winnerId])
}

model Bem {
  id                          String      @id @default(uuid())
  publicId                    String      @unique
  title                       String
  description                 String?     @db.Text
  status                      String      @default("DISPONIVEL")
  categoryId                  String?
  subcategoryId               String?
  judicialProcessId           String?
  sellerId                    String?
  evaluationValue             Float?
  imageUrl                    String?
  imageMediaId                String?
  galleryImageUrls            Json?
  mediaItemIds                Json?
  dataAiHint                  String?
  locationCity                String?
  locationState               String?
  address                     String?
  latitude                    Float?
  longitude                   Float?
  plate                       String?
  make                        String?
  model                       String?
  version                     String?
  year                        Int?
  modelYear                   Int?
  mileage                     Int?
  color                       String?
  fuelType                    String?
  transmissionType            String?
  bodyType                    String?
  vin                         String?     @unique
  renavam                     String?     @unique
  enginePower                 String?
  numberOfDoors               Int?
  vehicleOptions              String?
  detranStatus                String?
  debts                       String?
  runningCondition            String?
  bodyCondition               String?
  tiresCondition              String?
  hasKey                      Boolean?
  propertyRegistrationNumber  String?     @unique
  iptuNumber                  String?     @unique
  isOccupied                  Boolean?
  totalArea                   Float?
  builtArea                   Float?
  bedrooms                    Int?
  suites                      Int?
  bathrooms                   Int?
  parkingSpaces               Int?
  constructionType            String?
  finishes                    String?
  infrastructure              String?
  condoDetails                String?
  improvements                String?
  topography                  String?
  liensAndEncumbrances        String?
  propertyDebts               String?
  unregisteredRecords         String?
  hasHabiteSe                 Boolean?
  zoningRestrictions          String?
  amenities                   Json?
  brand                       String?
  serialNumber                String?
  itemCondition               String?
  specifications              String?
  includedAccessories         String?
  batteryCondition            String?
  hasInvoice                  Boolean?
  hasWarranty                 Boolean?
  repairHistory               String?
  applianceCapacity           String?
  voltage                     String?
  applianceType               String?
  additionalFunctions         String?
  hoursUsed                   Int?
  engineType                  String?
  capacityOrPower             String?
  maintenanceHistory          String?
  installationLocation        String?
  compliesWithNR              String?
  operatingLicenses           String?
  breed                       String?
  age                         String?
  sex                         SexType?
  weight                      String?
  individualId                String?
  purpose                     String?
  sanitaryCondition           String?
  lineage                     String?
  isPregnant                  Boolean?
  specialSkills               String?
  gtaDocument                 String?
  breedRegistryDocument       String?
  furnitureType               String?
  material                    String?
  style                       String?
  dimensions                  String?
  pieceCount                  Int?
  jewelryType                 String?
  metal                       String?
  gemstones                   String?
  totalWeight                 String?
  jewelrySize                 String?
  authenticityCertificate     String?
  workType                    String?
  artist                      String?
  period                      String?
  technique                   String?
  provenance                  String?
  boatType                    String?
  boatLength                  String?
  hullMaterial                String?
  onboardEquipment            String?
  productName                 String?
  quantity                    String?
  packagingType               String?
  expirationDate              DateTime?
  preciousMetalType           String?
  purity                      String?
  forestGoodsType             String?
  volumeOrQuantity            String?
  species                     String?
  dofNumber                   String?
  createdAt                   DateTime    @default(now())
  updatedAt                   DateTime    @updatedAt
  lots                        LotBens[]
  category                    LotCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory                 Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess             JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller                      Seller?      @relation(fields: [sellerId], references: [id], onDelete: SetNull)

  @@index([categoryId])
  @@index([subcategoryId])
  @@index([judicialProcessId])
  @@index([sellerId])
}

model LotBens {
  lotId String
  bemId String
  lot   Lot    @relation(fields: [lotId], references: [id])
  bem   Bem    @relation(fields: [bemId], references: [id])

  @@id([lotId, bemId])
  @@index([bemId])
}


model DirectSaleOffer {
  id                      String                @id @default(uuid())
  publicId                String?               @unique
  title                   String
  description             String?               @db.Text
  offerType               DirectSaleOfferType
  price                   Float?
  minimumOfferPrice       Float?
  status                  DirectSaleOfferStatus @default(ACTIVE)
  categoryId              String?
  sellerId                String?
  sellerName              String?
  sellerLogoUrl           String?
  dataAiHintSellerLogo    String?
  locationCity            String?
  locationState           String?
  imageUrl                String?
  imageMediaId            String?
  dataAiHint              String?
  galleryImageUrls        Json?
  mediaItemIds            Json?
  itemsIncluded           Json?
  views                   Int?                  @default(0)
  expiresAt               DateTime?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  category                LotCategory?          @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  seller                  Seller?               @relation(fields: [sellerId], references: [id], onDelete: SetNull)
}

model Auctioneer {
  id                   String    @id @default(uuid())
  publicId             String?   @unique
  slug                 String?   @unique
  name                 String
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?   @db.Text
  userId               String?   @unique
  auctions             Auction[]
  lots                 Lot[]
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

// =================================================================
// JOIN TABLES AND OTHER RELATIONS
// =================================================================

model JudicialProcess {
  id              String           @id @default(uuid())
  publicId        String?          @unique
  processNumber   String           @unique
  isElectronic    Boolean          @default(true)
  courtId         String?
  districtId      String?
  branchId        String?
  sellerId        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  court           Court?           @relation("JudicialProcessCourt", fields: [courtId], references: [id])
  district        JudicialDistrict?@relation("JudicialProcessDistrict", fields: [districtId], references: [id])
  branch          JudicialBranch?  @relation("JudicialProcessBranch", fields: [branchId], references: [id])
  seller          Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties         JudicialParty[]
  bens            Bem[]
  auctions        Auction[]

  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
  @@index([sellerId])
}

model JudicialParty {
  id              String           @id @default(uuid())
  processId       String
  name            String
  documentNumber  String?
  partyType       ProcessPartyType
  process         JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@index([processId])
}

model UserDocument {
    id String @id @default(uuid())
    userId String
    documentTypeId String
    status      UserDocumentStatus @default(PENDING_ANALYSIS)
    fileUrl String
    fileName String?
    rejectionReason String? @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    documentType DocumentType @relation(fields: [documentTypeId], references: [id])

    @@unique([userId, documentTypeId])
    @@index([userId])
    @@index([documentTypeId])
}

model Bid {
    id String @id @default(uuid())
    lotId String
    auctionId String
    bidderId String
    bidderDisplay String?
    amount Float
    timestamp DateTime @default(now())
    lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
    auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
    bidder User @relation(fields: [bidderId], references: [id], onDelete: Cascade)

    @@index([lotId])
    @@index([auctionId])
    @@index([bidderId])
}

model UserWin {
    id String @id @default(uuid())
    lotId String @unique
    userId String
    winningBidAmount Float
    winDate DateTime @default(now())
    paymentStatus PaymentStatus @default(PENDENTE)
    invoiceUrl String?
    lot Lot @relation(fields: [lotId], references: [id])
    user User @relation("UserWins", fields: [userId], references: [id])
    installments InstallmentPayment[]

    @@index([userId])
}

model InstallmentPayment {
  id                  String        @id @default(uuid())
  userWinId           String
  installmentNumber   Int
  amount              Float
  dueDate             DateTime
  status              PaymentStatus @default(PENDENTE)
  paymentDate         DateTime?
  paymentMethod       String?
  transactionId       String?
  userWin             UserWin       @relation(fields: [userWinId], references: [id], onDelete: Cascade)

  @@index([userWinId])
}

model UserLotMaxBid {
    id String @id @default(uuid())
    userId String
    lotId String
    maxAmount Float
    isActive Boolean @default(true)
    createdAt DateTime @default(now())
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)

    @@unique([userId, lotId])
    @@index([userId])
    @@index([lotId])
}

model Notification {
    id String @id @default(uuid())
    userId String
    message String
    link String?
    isRead Boolean @default(false)
    createdAt DateTime @default(now())
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model MediaItem {
    id String @id @default(uuid())
    fileName String
    storagePath String @unique
    title String?
    altText String?
    caption String?
    description String? @db.Text
    mimeType String
    sizeBytes Int
    urlOriginal String
    urlThumbnail String?
    urlMedium String?
    urlLarge String?
    linkedLotIds Json?
    judicialProcessId String?
    dataAiHint String?
    uploadedByUserId String?
    uploadedAt DateTime @default(now())
    uploadedBy User? @relation("UploadedBy", fields: [uploadedByUserId], references: [id], onDelete: SetNull)

    @@index([uploadedByUserId])
    @@index([judicialProcessId])
}

model UsersOnRoles {
  userId      String
  roleId      String
  assignedAt  DateTime @default(now())
  assignedBy  String

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@index([roleId])
}

model AuctionHabilitation {
  id        String   @id @default(uuid())
  userId    String
  auctionId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@unique([userId, auctionId])
  @@index([userId])
  @@index([auctionId])
}

model AuctionStage {
  id String @id @default(uuid())
  auctionId String
  name String
  startDate DateTime
  endDate DateTime
  evaluationValue Float?
  lots LotAuctionStageDetails[]
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@index([auctionId])
}

model LotAuctionStageDetails {
    id String @id @default(uuid())
    lotId String
    stageId String
    initialBid Float?
    bidIncrement Float?

    lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
    stage AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)

    @@unique([lotId, stageId])
    @@index([stageId])
}
