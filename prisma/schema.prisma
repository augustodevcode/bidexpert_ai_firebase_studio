// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================================================================
// AUTH & USERS
// ==============================================================================
model Usuario {
  id                String                 @id @default(cuid())
  email             String                 @unique
  fullName          String?
  password          String
  roleId            String?
  role              Perfil?                @relation(fields: [roleId], references: [id])
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  cpf               String?                @unique
  dateOfBirth       DateTime?              @db.Date
  cellPhone         String?
  zipCode           String?
  street            String?
  number            String?
  complement        String?
  neighborhood      String?
  city              String?
  state             String?
  optInMarketing    Boolean?               @default(false)
  avatarUrl         String?
  dataAiHint        String?
  accountType       String? // PHYSICAL, LEGAL, DIRECT_SALE_CONSIGNOR
  razaoSocial       String?
  cnpj              String?                @unique
  inscricaoEstadual String?
  website           String?
  habilitationStatus UserHabilitationStatus @default(PENDENTE_DOCUMENTOS)
  badges            String[]               @default([])
  
  // Relations
  vendedor          Vendedor?              @relation("UserToSeller")
  leiloeiro         Leiloeiro?             @relation("UserToAuctioneer")
  bids              Lance[]
  wins              Arremate[]
  documents         DocumentoUsuario[]
  notifications     Notificacao[]
  reviews           Avaliacao[]
  questions         QuestaoLote[]
  maxBids           LanceMaximoUsuario[]
  uploadedMedia     MediaItem[]            @relation("UploadedBy")
  answeredQuestions QuestaoLote[]          @relation("AnsweredBy")

  @@map("usuarios")
}

model Perfil {
  id              String      @id @default(cuid())
  name            String      @unique
  name_normalized String      @unique
  description     String?
  permissions     String[]    @default([])
  usuarios        Usuario[]

  @@map("perfis")
}

// ==============================================================================
// BUSINESS ENTITIES (AUCTIONEERS, SELLERS)
// ==============================================================================
model Leiloeiro {
  id                         String    @id @default(cuid())
  publicId                   String    @unique @default(cuid())
  slug                       String    @unique
  name                       String
  registrationNumber         String?
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  logoUrl                    String?
  dataAiHintLogo             String?
  description                String?
  memberSince                DateTime?
  rating                     Float?
  auctionsConductedCount     Int?
  totalValueSold             Float?
  userId                     String?   @unique
  usuario                    Usuario?  @relation("UserToAuctioneer", fields: [userId], references: [id])
  leiloes                    Leilao[]

  @@map("leiloeiros")
}

model Vendedor {
  id                         String     @id @default(cuid())
  publicId                   String     @unique @default(cuid())
  slug                       String     @unique
  name                       String
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  logoUrl                    String?
  dataAiHintLogo             String?
  description                String?
  isJudicial                 Boolean    @default(false)
  judicialBranchId           String?    @unique
  vara                       Vara?      @relation(fields: [judicialBranchId], references: [id])
  memberSince                DateTime?
  rating                     Float?
  activeLotsCount            Int?
  totalSalesValue            Float?
  auctionsFacilitatedCount   Int?
  userId                     String?    @unique
  usuario                    Usuario?   @relation("UserToSeller", fields: [userId], references: [id])
  leiloes                    Leilao[]
  processosJudiciais         ProcessoJudicial[]
  bens                       Bem[]
  ofertasVendaDireta         VendaDireta[]

  @@map("vendedores")
}

// ==============================================================================
// AUCTION & LOTS
// ==============================================================================
model Leilao {
  id                             String        @id @default(cuid())
  publicId                       String        @unique @default(cuid())
  title                          String
  description                    String?
  status                         AuctionStatus @default(RASCUNHO)
  auctionType                    AuctionType?
  auctionDate                    DateTime
  endDate                        DateTime?
  city                           String?
  state                          String?
  imageUrl                       String?
  imageMediaId                   String?       @unique
  imagemPrincipal                MediaItem?    @relation("AuctionImage", fields: [imageMediaId], references: [id])
  dataAiHint                     String?
  documentsUrl                   String?
  visits                         Int?          @default(0)
  initialOffer                   Float?
  isFavorite                     Boolean?      @default(false)
  softCloseEnabled               Boolean?      @default(false)
  softCloseMinutes               Int?          @default(2)
  automaticBiddingEnabled        Boolean?      @default(false)
  allowInstallmentBids           Boolean?      @default(false)
  estimatedRevenue               Float?
  achievedRevenue                Float?
  totalHabilitatedUsers          Int?
  isFeaturedOnMarketplace        Boolean?
  marketplaceAnnouncementTitle   String?
  additionalTriggers             String[]
  sellingBranch                  String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  silentBiddingEnabled           Boolean?      @default(false)
  allowMultipleBidsPerUser       Boolean?      @default(true)
  decrementAmount                Float?
  decrementIntervalSeconds       Int?
  floorPrice                     Float?
  autoRelistSettings             Json?
  auctionStages                  Json[]        @default("[]")
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt
  
  // Relations
  categoryId                     String
  categoria                      CategoriaLote @relation(fields: [categoryId], references: [id])
  auctioneerId                   String
  leiloeiro                      Leiloeiro     @relation(fields: [auctioneerId], references: [id])
  sellerId                       String?
  vendedor                       Vendedor?     @relation(fields: [sellerId], references: [id])
  judicialProcessId              String?
  processoJudicial               ProcessoJudicial? @relation(fields: [judicialProcessId], references: [id])
  lotes                          Lote[]
  lances                         Lance[]
  avaliacoes                     Avaliacao[]
  questoes                       QuestaoLote[]
  arremates                      Arremate[]

  @@map("leiloes")
}

model Lote {
  id                         String      @id @default(cuid())
  publicId                   String      @unique @default(cuid())
  number                     String?
  title                      String
  description                String?
  status                     LotStatus
  price                      Float
  initialPrice               Float
  secondInitialPrice         Float?
  bidIncrementStep           Float?
  views                      Int?        @default(0)
  bidsCount                  Int?        @default(0)
  isFeatured                 Boolean?    @default(false)
  isExclusive                Boolean?    @default(false)
  discountPercentage         Float?
  additionalTriggers         String[]
  imageUrl                   String?
  imageMediaId               String?     @unique
  imagemPrincipal            MediaItem?  @relation("LotImage", fields: [imageMediaId], references: [id])
  galleryImageUrls           String[]
  mediaItemIds               String[]
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?
  judicialProcessNumber      String?
  courtDistrict              String?
  courtName                  String?
  publicProcessUrl           String?
  propertyRegistrationNumber String?
  propertyLiens              String?
  knownDebts                 String?
  additionalDocumentsInfo    String?
  reservePrice               Float?
  evaluationValue            Float?
  debtAmount                 Float?
  itbiValue                  Float?
  endDate                    DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  dataAiHint                 String?
  winningBidTermUrl          String?
  createdAt                  DateTime    @default(now())
  updatedAt                  DateTime    @updatedAt
  
  // Relations
  auctionId                  String
  auction                    Leilao      @relation(fields: [auctionId], references: [id])
  categoryId                 String
  category                   CategoriaLote @relation(fields: [categoryId], references: [id])
  subcategoryId              String?
  subcategory                Subcategoria? @relation(fields: [subcategoryId], references: [id])
  stateId                    String?
  estado                     Estado?     @relation(fields: [stateId], references: [id])
  cityId                     String?
  cidade                     Cidade?     @relation(fields: [cityId], references: [id])
  sellerId                   String?     // Can be inherited from auction
  auctioneerId               String?     // Can be inherited from auction
  bemIds                     String[]
  bens                       Bem[]
  bids                       Lance[]
  wins                       Arremate[]
  reviews                    Avaliacao[]
  questions                  QuestaoLote[]
  maxBids                    LanceMaximoUsuario[]

  @@map("lotes")
}

model Bem {
  id                    String      @id @default(cuid())
  publicId              String      @unique @default(cuid())
  title                 String
  description           String?
  status                BemStatus
  evaluationValue       Float?
  imageUrl              String?
  imageMediaId          String?     @unique
  imagemPrincipal       MediaItem?  @relation("BemImage", fields: [imageMediaId], references: [id])
  galleryImageUrls      String[]
  mediaItemIds          String[]
  dataAiHint            String?
  locationCity          String?
  locationState         String?
  address               String?
  latitude              Float?
  longitude             Float?
  
  // Vehicle Specific
  plate                 String?
  make                  String?
  model                 String?
  version               String?
  year                  Int?
  modelYear             Int?
  mileage               Int?
  color                 String?
  fuelType              String?
  transmissionType      String?
  bodyType              String?
  vin                   String?
  renavam               String?
  enginePower           String?
  numberOfDoors         Int?
  vehicleOptions        String?
  detranStatus          String?
  debts                 String?
  runningCondition      String?
  bodyCondition         String?
  tiresCondition        String?
  hasKey                Boolean?
  
  // Property Specific
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?
  infrastructure             String?
  condoDetails               String?
  improvements               String?
  topography                 String?
  liensAndEncumbrances       String?
  propertyDebts              String?
  unregisteredRecords        String?
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  
  // Common for many types
  brand                 String?
  serialNumber          String?
  itemCondition         String?
  specifications        String?
  includedAccessories   String?
  hasInvoice            Boolean?
  hasWarranty           Boolean?
  repairHistory         String?

  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  // Relations
  categoryId          String?
  category            CategoriaLote? @relation(fields: [categoryId], references: [id])
  subcategoryId       String?
  subcategory         Subcategoria? @relation(fields: [subcategoryId], references: [id])
  judicialProcessId   String?
  judicialProcess     ProcessoJudicial? @relation(fields: [judicialProcessId], references: [id])
  sellerId            String?
  seller              Vendedor?   @relation(fields: [sellerId], references: [id])
  lotes               Lote[]
  
  @@map("bens")
}

model CategoriaLote {
  id                   String        @id @default(cuid())
  name                 String        @unique
  slug                 String        @unique
  description          String?
  logoUrl              String?
  coverImageUrl        String?
  megaMenuImageUrl     String?
  dataAiHintLogo       String?
  dataAiHintCover      String?
  dataAiHintMegaMenu   String?
  itemCount            Int           @default(0)
  hasSubcategories     Boolean       @default(false)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  leiloes              Leilao[]
  lotes                Lote[]
  bens                 Bem[]
  subcategorias        Subcategoria[]

  @@map("categorias_lote")
}

model Subcategoria {
  id               String       @id @default(cuid())
  name             String
  slug             String       @unique
  description      String?
  displayOrder     Int?
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  itemCount        Int          @default(0)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  parentCategoryId String
  parentCategory   CategoriaLote @relation(fields: [parentCategoryId], references: [id])
  lotes            Lote[]
  bens             Bem[]

  @@map("subcategorias")
}

// ==============================================================================
// BIDDING & WINNING
// ==============================================================================
model Lance {
  id              String   @id @default(cuid())
  amount          Float
  timestamp       DateTime @default(now())
  bidderDisplay   String?
  
  // Relations
  lotId           String
  lote            Lote     @relation(fields: [lotId], references: [id])
  auctionId       String
  leilao          Leilao   @relation(fields: [auctionId], references: [id])
  bidderId        String
  licitante       Usuario  @relation(fields: [bidderId], references: [id])

  @@map("lances")
}

model Arremate {
  id                 String        @id @default(cuid())
  winningBidAmount   Float
  winDate            DateTime      @default(now())
  paymentStatus      PaymentStatus @default(PENDENTE)
  invoiceUrl         String?
  
  // Relations
  lotId              String
  lote               Lote          @relation(fields: [lotId], references: [id])
  userId             String
  usuario            Usuario       @relation(fields: [userId], references: [id])

  @@map("arremates")
}

model LanceMaximoUsuario {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  usuario   Usuario  @relation(fields: [userId], references: [id])
  lote      Lote     @relation(fields: [lotId], references: [id])

  @@unique([userId, lotId])
  @@map("lances_maximos_usuario")
}

// ==============================================================================
// LOCATION
// ==============================================================================
model Estado {
  id        String   @id @default(cuid())
  name      String   @unique
  uf        String   @unique
  slug      String   @unique
  cityCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cidades   Cidade[]
  tribunais Comarca[]

  @@map("estados")
}

model Cidade {
  id        String   @id @default(cuid())
  name      String
  slug      String
  stateUf   String
  ibgeCode  String?
  lotCount  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stateId   String
  estado    Estado   @relation(fields: [stateId], references: [id])
  lotes     Lote[]

  @@map("cidades")
}

// ==============================================================================
// JUDICIAL ENTITIES
// ==============================================================================
model Tribunal {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  stateUf     String
  website     String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  comarcas    Comarca[]
  processos   ProcessoJudicial[]

  @@map("tribunais")
}

model Comarca {
  id         String     @id @default(cuid())
  name       String
  slug       String
  zipCode    String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  courtId    String
  tribunal   Tribunal   @relation(fields: [courtId], references: [id])
  stateId    String
  estado     Estado     @relation(fields: [stateId], references: [id])
  varas      Vara[]
  processos  ProcessoJudicial[]

  @@unique([name, stateId])
  @@map("comarcas")
}

model Vara {
  id          String     @id @default(cuid())
  name        String
  slug        String
  contactName String?
  phone       String?
  email       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  districtId  String
  comarca     Comarca    @relation(fields: [districtId], references: [id])
  processos   ProcessoJudicial[]
  vendedor    Vendedor?

  @@unique([name, districtId])
  @@map("varas")
}

model ProcessoJudicial {
  id           String    @id @default(cuid())
  publicId     String    @unique @default(cuid())
  processNumber String   @unique
  isElectronic Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relations
  courtId      String
  tribunal     Tribunal  @relation(fields: [courtId], references: [id])
  districtId   String
  comarca      Comarca   @relation(fields: [districtId], references: [id])
  branchId     String
  vara         Vara      @relation(fields: [branchId], references: [id])
  sellerId     String?   @unique
  vendedor     Vendedor? @relation(fields: [sellerId], references: [id])
  partes       ParteProcesso[]
  bens         Bem[]
  leiloes      Leilao[]

  @@map("processos_judiciais")
}

model ParteProcesso {
  id             String         @id @default(cuid())
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  processoJudicialId String
  processo       ProcessoJudicial @relation(fields: [processoJudicialId], references: [id], onDelete: Cascade)

  @@unique([processoJudicialId, name, partyType])
  @@map("partes_processo")
}

// ==============================================================================
// CONTENT & MISC
// ==============================================================================

model MediaItem {
  id              String      @id @default(cuid())
  fileName        String
  storagePath     String
  title           String?
  altText         String?
  caption         String?
  description     String?
  mimeType        String
  sizeBytes       Int
  urlOriginal     String
  urlThumbnail    String?
  urlMedium       String?
  urlLarge        String?
  linkedLotIds    String[]
  dataAiHint      String?
  uploadedBy      String?
  uploadedAt      DateTime    @default(now())
  
  // Relations
  uploader        Usuario?    @relation("UploadedBy", fields: [uploadedBy], references: [id])
  auctionImageFor Leilao?     @relation("AuctionImage")
  lotImageFor     Lote?       @relation("LotImage")
  bemImageFor     Bem?        @relation("BemImage")
  
  @@map("media_items")
}

model DirectSaleOffer {
  id                  String     @id @default(cuid())
  publicId            String     @unique @default(cuid())
  title               String
  description         String?
  offerType           DirectSaleOfferType
  status              DirectSaleOfferStatus
  price               Float?
  minimumOfferPrice   Float?
  locationCity        String?
  locationState       String?
  imageUrl            String?
  imageMediaId        String?
  dataAiHint          String?
  galleryImageUrls    String[]
  mediaItemIds        String[]
  itemsIncluded       String[]
  tags                String[]
  views               Int?
  proposalsCount      Int?
  expiresAt           DateTime?
  sellerLogoUrl       String?
  dataAiHintSellerLogo String?
  latitude            Float?
  longitude           Float?
  mapAddress          String?
  mapEmbedUrl         String?
  mapStaticImageUrl   String?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  
  // Relations
  categoryId          String
  category            CategoriaLote @relation(fields: [categoryId], references: [id])
  sellerId            String
  seller              Vendedor @relation(fields: [sellerId], references: [id])

  @@map("ofertas_venda_direta")
}

model DocumentoUsuario {
  id              String             @id @default(cuid())
  status          UserDocumentStatus @default(NOT_SENT)
  fileUrl         String?
  fileName        String?
  uploadDate      DateTime?
  analysisDate    DateTime?
  rejectionReason String?
  
  // Relations
  userId          String
  usuario         Usuario            @relation(fields: [userId], references: [id])
  documentTypeId  String
  documentType    TipoDocumento      @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
  @@map("documentos_usuario")
}

model TipoDocumento {
  id           String   @id @default(cuid())
  name         String   @unique
  description  String?
  isRequired   Boolean  @default(false)
  appliesTo    String   // e.g., "PHYSICAL,LEGAL"
  allowedFormats String?  // e.g., "pdf,jpg,png"
  displayOrder Int?     @default(0)
  
  // Relations
  userDocs     DocumentoUsuario[]
  
  @@map("tipos_documento")
}

model Notificacao {
  id        String   @id @default(cuid())
  message   String
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())
  
  // Relations
  userId    String
  usuario   Usuario  @relation(fields: [userId], references: [id])

  @@map("notificacoes")
}

model BlogPost {
  id        String   @id @default(cuid())
  title     String
  content   String
  slug      String   @unique
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("mensagens_contato")
}

model Avaliacao {
  id              String   @id @default(cuid())
  rating          Int
  comment         String?
  createdAt       DateTime @default(now())
  
  // Relations
  userId          String
  usuario         Usuario  @relation(fields: [userId], references: [id])
  lotId           String
  lote            Lote     @relation(fields: [lotId], references: [id])
  auctionId       String
  leilao          Leilao   @relation(fields: [auctionId], references: [id])
  
  @@map("avaliacoes")
}

model QuestaoLote {
  id            String   @id @default(cuid())
  questionText  String
  answerText    String?
  isPublic      Boolean  @default(true)
  createdAt     DateTime @default(now())
  answeredAt    DateTime?
  
  // Relations
  lotId         String
  lote          Lote     @relation(fields: [lotId], references: [id])
  auctionId     String
  leilao        Leilao   @relation(fields: [auctionId], references: [id])
  userId        String
  usuario       Usuario  @relation(fields: [userId], references: [id])
  answeredByUserId        String?
  answeredByUser          Usuario? @relation("AnsweredBy", fields: [answeredByUserId], references: [id])
  
  @@map("questoes_lote")
}

model PlatformSettings {
    id                          String    @id @default("global")
    siteTitle                   String?
    siteTagline                 String?
    galleryImageBasePath        String?
    storageProvider             String?
    firebaseStorageBucket       String?
    activeThemeName             String?
    themes                      Json[]
    platformPublicIdMasks       Json?
    homepageSections            Json[]
    mentalTriggerSettings       Json?
    sectionBadgeVisibility      Json?
    mapSettings                 Json?
    searchPaginationType        String?
    searchItemsPerPage          Int?
    searchLoadMoreCount         Int?
    showCountdownOnLotDetail    Boolean?
    showCountdownOnCards        Boolean?
    showRelatedLotsOnLotDetail  Boolean?
    relatedLotsCount            Int?
    variableIncrementTable      Json[]
    defaultListItemsPerPage     Int?
    biddingSettings             Json?
    updatedAt                   DateTime  @updatedAt

    @@map("platform_settings")
}


// ==============================================================================
// ENUMS
// ==============================================================================
enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum UserHabilitationStatus {
  PENDENTE_DOCUMENTOS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}
