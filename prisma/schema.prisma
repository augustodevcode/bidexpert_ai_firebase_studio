// /prisma/schema.prisma
// Este é o schema principal do Prisma para a aplicação BidExpert.
// Ele define todos os modelos de dados, suas relações e configurações de banco de dados.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// -----------------------------
// Modelos Globais (Sem TenantId)
// -----------------------------

model User {
  id                       BigInt                 @id @default(autoincrement())
  email                    String               @unique
  password                 String?              @db.Text
  fullName                 String?              @db.Text
  cpf                      String?              @db.Text
  rgNumber                 String?              @db.Text
  rgIssuer                 String?              @db.Text
  rgIssueDate              DateTime?
  dateOfBirth              DateTime?
  cellPhone                String?              @db.Text
  homePhone                String?              @db.Text
  gender                   String?              @db.Text
  profession               String?              @db.Text
  nationality              String?              @db.Text
  maritalStatus            String?              @db.Text
  propertyRegime           String?              @db.Text
  spouseName               String?              @db.Text
  spouseCpf                String?              @db.Text
  zipCode                  String?              @db.Text
  street                   String?              @db.Text
  number                   String?              @db.Text
  complement               String?              @db.Text
  neighborhood             String?              @db.Text
  city                     String?              @db.Text
  state                    String?              @db.Text
  avatarUrl                String?              @db.Text
  dataAiHint               String?              @db.Text
  habilitationStatus       UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType              AccountType          @default(PHYSICAL)
  badges                   Json?
  razaoSocial              String?              @db.Text
  cnpj                     String?              @db.Text
  inscricaoEstadual        String?              @db.Text
  website                  String?              @db.Text
  responsibleName          String?              @db.Text
  responsibleCpf           String?              @db.Text
  optInMarketing           Boolean?             @default(false)
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  bids                     Bid[]
  notifications            Notification[]
  habilitations            AuctionHabilitation[]
  wins                     UserWin[]
  reviews                  Review[]
  questions                LotQuestion[]
  documents                UserDocument[]
  sellers                  Seller[]
  auctioneers              Auctioneer[]
  createdMedia             MediaItem[]          @relation("UploadedBy")
  lotsWon                  Lot[]                @relation("LotsWon")
  createdReports           Report[]             @relation("CreatedBy")
  maxBids                  UserLotMaxBid[]
  roles                    UsersOnRoles[]
  tenants                  UsersOnTenants[]
  bidderProfile            BidderProfile?
}

model Role {
  id              BigInt         @id @default(autoincrement())
  name            String         @unique
  nameNormalized  String         @unique
  description     String?
  permissions     Json?          @default("[]")
  users           UsersOnRoles[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     BigInt
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     BigInt
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
  @@index([roleId])
}

// -----------------------------
// Modelos por Tenant
// -----------------------------

model Tenant {
  id          BigInt         @id @default(autoincrement())
  name        String
  subdomain   String         @unique
  domain      String?        @unique
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  users       UsersOnTenants[]
  auctions    Auction[]
  lots        Lot[]
  bids        Bid[]
  assets      Asset[]
  sellers     Seller[]
  auctioneers Auctioneer[]
  notifications Notification[]
  reports     Report[]
  processes   JudicialProcess[]
  subscribers Subscriber[]
  settings    PlatformSettings?

  DirectSaleOffer DirectSaleOffer[]
}

model UsersOnTenants {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     BigInt
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId   BigInt
  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([userId, tenantId])
  @@index([tenantId])
}

model Lot {
  id                  BigInt               @id @default(autoincrement())
  publicId            String?              @unique
  auctionId           BigInt
  number              String?
  title               String
  description         String?              @db.Text
  slug                String?
  price               Decimal              @db.Decimal(15, 2)
  initialPrice        Decimal?             @db.Decimal(15, 2)
  secondInitialPrice  Decimal?             @db.Decimal(15, 2)
  bidIncrementStep    Decimal?             @db.Decimal(10, 2)
  status              LotStatus            @default(EM_BREVE)
  bidsCount           Int?                 @default(0)
  views               Int?                 @default(0)
  isFeatured          Boolean?             @default(false)
  isExclusive         Boolean?             @default(false)
  discountPercentage  Int?
  additionalTriggers  Json?
  imageUrl            String?              @db.Text
  imageMediaId        BigInt?
  galleryImageUrls    Json?
  mediaItemIds        Json?
  stageDetails        Json?
  lotPrices           LotStagePrice[]
  type                String
  condition           String?
  dataAiHint          String?
  winnerId            BigInt?
  winner              User?                @relation("LotsWon", fields: [winnerId], references: [id], onDelete: SetNull)
  winningBidTermUrl   String?
  allowInstallmentBids Boolean?             @default(false)
  isRelisted          Boolean              @default(false)
  relistCount         Int                  @default(0)
  original_lot_id     BigInt?              @unique
  originalLot         Lot?                 @relation("RelistedLot", fields: [original_lot_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot         Lot?                 @relation("RelistedLot")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  endDate             DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate   DateTime?
  auction             Auction              @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  categoryId          BigInt?
  category            LotCategory?         @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategoryId       BigInt?
  subcategory         Subcategory?         @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  sellerId            BigInt?
  seller              Seller?              @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  auctioneerId        BigInt?
  auctioneer          Auctioneer?          @relation(fields: [auctioneerId], references: [id])
  cityId              BigInt?
  city                City?                @relation(fields: [cityId], references: [id])
  stateId             BigInt?
  state               State?               @relation(fields: [stateId], references: [id])
  cityName            String?
  stateUf             String?
  latitude            Decimal?
  longitude           Decimal?
  mapAddress          String?
  tenantId            BigInt
  tenant              Tenant               @relation(fields: [tenantId], references: [id], onUpdate: Cascade)
  bids                Bid[]
  wins                UserWin[]
  reviews             Review[]
  questions           LotQuestion[]
  maxBids             UserLotMaxBid[]
  assets              AssetsOnLots[]
  payments            InstallmentPayment[] @relation("InstallmentPaymentToLot")
  judicialProcesses   JudicialProcess[]

  @@unique([auctionId, number])
  Notification Notification[]
}

model Asset {
  id                           BigInt          @id @default(autoincrement())
  publicId                     String          @unique
  title                        String
  description                  String?         @db.Text
  status                       AssetStatus     @default(DISPONIVEL)
  categoryId                   BigInt?
  category                     LotCategory?    @relation(fields: [categoryId], references: [id])
  subcategoryId                BigInt?
  subcategory                  Subcategory?    @relation(fields: [subcategoryId], references: [id])
  judicialProcessId            BigInt?
  judicialProcess              JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  sellerId                     BigInt?
  seller                       Seller?         @relation(fields: [sellerId], references: [id])
  evaluationValue              Decimal?        @db.Decimal(15, 2)
  imageUrl                     String?
  imageMediaId                 BigInt?
  galleryImageUrls             Json?
  mediaItemIds                 Json?
  dataAiHint                   String?
  locationCity                 String?
  locationState                String?
  address                      String?
  latitude                     Decimal?
  longitude                    Decimal?
  createdAt                    DateTime        @default(now())
  updatedAt                    DateTime        @updatedAt
  tenantId                     BigInt
  tenant                       Tenant          @relation(fields: [tenantId], references: [id], onUpdate: Cascade)
  lots                         AssetsOnLots[]
  gallery                      AssetMedia[]

  // Vehicle Specific Fields
  plate                        String?
  make                         String?
  model                        String?
  version                      String?
  year                         Int?
  modelYear                    Int?
  mileage                      Int?
  color                        String?
  fuelType                     String?
  transmissionType             String?
  bodyType                     String?
  vin                          String?         @unique
  renavam                      String?         @unique
  enginePower                  String?
  numberOfDoors                Int?
  vehicleOptions               String?         @db.Text
  detranStatus                 String?         @db.Text
  debts                        String?         @db.Text
  runningCondition             String?
  bodyCondition                String?
  tiresCondition               String?
  hasKey                       Boolean?

  // Property Specific Fields
  propertyRegistrationNumber   String?
  iptuNumber                   String?
  isOccupied                   Boolean?
  totalArea                    Decimal?
  builtArea                    Decimal?
  bedrooms                     Int?
  suites                       Int?
  bathrooms                    Int?
  parkingSpaces                Int?
  constructionType             String?
  finishes                     String?         @db.Text
  infrastructure               String?         @db.Text
  condoDetails                 String?         @db.Text
  improvements                 String?         @db.Text
  topography                   String?
  liensAndEncumbrances         String?         @db.Text
  propertyDebts                String?         @db.Text
  unregisteredRecords          String?         @db.Text
  hasHabiteSe                  Boolean?
  zoningRestrictions           String?
  amenities                    Json?

  // Machinery/Electronics/Other
  brand                        String?
  serialNumber                 String?
  itemCondition                String?
  specifications               String?         @db.Text
  includedAccessories          String?         @db.Text
  batteryCondition             String?
  hasInvoice                   Boolean?
  hasWarranty                  Boolean?
  repairHistory                String?         @db.Text
  applianceCapacity            String?
  voltage                      String?
  applianceType                String?
  additionalFunctions          String?
  hoursUsed                    Int?
  engineType                   String?
  capacityOrPower              String?
  maintenanceHistory           String?         @db.Text
  installationLocation         String?
  compliesWithNR               String?
  operatingLicenses            String?

  // Livestock
  breed                        String?
  age                          String?
  sex                          String?
  weight                       String?
  individualId                 String?
  purpose                      String?
  sanitaryCondition            String?         @db.Text
  lineage                      String?
  isPregnant                   Boolean?
  specialSkills                String?
  gtaDocument                  String?
  breedRegistryDocument        String?

  // Furniture
  furnitureType                String?
  material                     String?
  style                        String?
  dimensions                   String?
  pieceCount                   Int?

  // Jewelry
  jewelryType                  String?
  metal                        String?
  gemstones                    String?
  totalWeight                  String?
  jewelrySize                  String?
  authenticityCertificate      String?

  // Art
  workType                     String?
  artist                       String?
  period                       String?
  technique                    String?
  provenance                   String?         @db.Text

  // Boating
  boatType                     String?
  boatLength                   String?
  hullMaterial                 String?
  onboardEquipment             String?         @db.Text

  // Commodities
  productName                  String?
  quantity                     String?
  packagingType                String?
  expirationDate               DateTime?
  storageConditions            String?

  // Metals
  preciousMetalType            String?
  purity                       String?

  // Forest Goods
  forestGoodsType              String?
  volumeOrQuantity             String?
  species                      String?
  dofNumber                    String?
}

model AssetsOnLots {
  lot        Lot      @relation(fields: [lotId], references: [id])
  lotId      BigInt
  asset      Asset    @relation(fields: [assetId], references: [id])
  assetId    BigInt
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([lotId, assetId])
}

model Auction {
  id                          BigInt                @id @default(autoincrement())
  publicId                    String?               @unique
  slug                        String?               @unique
  title                       String
  description                 String?               @db.Text
  status                      AuctionStatus         @default(RASCUNHO)
  auctionDate                 DateTime?
  endDate                     DateTime?
  totalLots                   Int                   @default(0)
  visits                      Int                   @default(0)
  totalHabilitatedUsers       Int                   @default(0)
  initialOffer                Decimal?              @db.Decimal(15, 2)
  auctionType                 AuctionType?
  auctionMethod               AuctionMethod?        @default(STANDARD)
  participation               AuctionParticipation? @default(ONLINE)
  onlineUrl                   String?               @db.VarChar(500)
  address                     String?
  zipCode                     String?               @db.VarChar(10)
  latitude                    Decimal?              @db.Decimal(10, 8)
  longitude                   Decimal?              @db.Decimal(11, 8)
  documentsUrl                String?               @db.VarChar(500)
  isFeaturedOnMarketplace     Boolean               @default(false)
  softCloseEnabled            Boolean?              @default(false)
  softCloseMinutes            Int?
  achievedRevenue             Decimal?              @db.Decimal(15, 2)
  evaluationReportUrl         String?               @db.VarChar(500)
  auctionCertificateUrl       String?               @db.VarChar(500)
  floorPrice                  Decimal?              @db.Decimal(15, 2)
  decrementAmount             Decimal?              @db.Decimal(10, 2)
  decrementIntervalSeconds    Int?
  sellingBranch               String?
  additionalTriggers          Json?
  createdAt                   DateTime              @default(now())
  updatedAt                   DateTime              @updatedAt
  tenantId                    BigInt
  tenant                      Tenant                @relation(fields: [tenantId], references: [id], onUpdate: Cascade)
  auctioneerId                BigInt?
  auctioneer                  Auctioneer?           @relation(fields: [auctioneerId], references: [id])
  sellerId                    BigInt?
  seller                      Seller?               @relation(fields: [sellerId], references: [id])
  imageMediaId                BigInt?
  isRelisted                  Boolean               @default(false)
  relistCount                 Int                   @default(0)
  originalAuctionId           BigInt?               @unique
  originalAuction             Auction?              @relation("RelistedAuction", fields: [originalAuctionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedAuction             Auction?              @relation("RelistedAuction")
  
  // Relacionamentos com Entidades Judiciais e Localização
  courts             Court[]
  judicialDistricts  JudicialDistrict[]
  judicialBranches   JudicialBranch[]
  cityId             BigInt?
  cityRef            City?                 @relation("CityAuctions", fields: [cityId], references: [id])
  stateId            BigInt?
  stateRef           State?                @relation("StateAuctions", fields: [stateId], references: [id])
  judicialProcessId  BigInt?
  judicialProcess    JudicialProcess?      @relation(fields: [judicialProcessId], references: [id])
  
  // Relacionamentos com outras entidades
  lots               Lot[]
  lotPrices          LotStagePrice[]
  bids               Bid[]
  notifications      Notification[]
  stages             AuctionStage[]
  habilitations      AuctionHabilitation[]
  category           LotCategory?          @relation(fields: [categoryId], references: [id])
  categoryId         BigInt?

  @@index([auctioneerId])
  @@index([sellerId])
  Review Review[]
  LotQuestion LotQuestion[]
}

model AuctionStage {
  id           BigInt        @id @default(autoincrement())
  name         String
  startDate    DateTime      @db.DateTime
  endDate      DateTime      @db.DateTime
  auctionId    BigInt
  auction      Auction       @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  initialPrice Decimal?      @db.Decimal(15, 2)
  lotPrices    LotStagePrice[]

  @@index([auctionId])
}

model LotStagePrice {
  id              BigInt       @id @default(autoincrement())
  lotId           BigInt
  lot             Lot          @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId       BigInt
  auction         Auction      @relation(fields: [auctionId], references: [id])
  auctionStageId  BigInt
  auctionStage    AuctionStage @relation(fields: [auctionStageId], references: [id], onDelete: Cascade)
  initialBid      Decimal?     @db.Decimal(15, 2)
  bidIncrement    Decimal?     @db.Decimal(10, 2)

  @@unique([lotId, auctionStageId])
  @@index([auctionId])
}

model JudicialProcess {
  id              BigInt             @id @default(autoincrement())
  publicId        String             @unique
  processNumber   String
  isElectronic    Boolean            @default(true)
  createdAt       DateTime?          @default(now())
  updatedAt       DateTime?          @updatedAt
  tenantId        BigInt
  tenant          Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  courtId         BigInt?
  court           Court?             @relation(fields: [courtId], references: [id])
  districtId      BigInt?
  district        JudicialDistrict?  @relation(fields: [districtId], references: [id])
  branchId        BigInt?
  branch          JudicialBranch?    @relation(fields: [branchId], references: [id])
  sellerId        BigInt?
  seller          Seller?            @relation(fields: [sellerId], references: [id])
  parties         JudicialParty[]
  lots            Lot[]
  assets          Asset[]
  mediaItems      MediaItem[]
  auctions        Auction[]
  
  @@unique([processNumber, tenantId])
}

model JudicialParty {
  id             BigInt          @id @default(autoincrement())
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  processId      BigInt
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@index([processId])
}

model Seller {
  id               BigInt          @id @default(autoincrement())
  publicId         String          @unique
  name             String          @unique
  description      String?         @db.Text
  logoUrl          String?         @db.Text
  logoMediaId      BigInt?
  dataAiHintLogo   String?
  website          String?         @db.Text
  email            String?         @db.Text
  phone            String?         @db.Text
  contactName      String?
  address          String?         @db.Text
  city             String?
  state            String?
  zipCode          String?
  slug             String          @unique
  isJudicial       Boolean         @default(false)
  judicialBranchId BigInt?         @unique
  judicialBranch   JudicialBranch? @relation(fields: [judicialBranchId], references: [id])
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  tenantId         BigInt
  tenant           Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId           BigInt?         @unique
  user             User?           @relation(fields: [userId], references: [id])
  auctions         Auction[]
  lots             Lot[]
  assets           Asset[]
  judicialProcesses JudicialProcess[]
  directSaleOffers  DirectSaleOffer[]
}

model Auctioneer {
  id                  BigInt     @id @default(autoincrement())
  publicId            String     @unique
  name                String
  slug                String     @unique
  description         String?    @db.Text
  registrationNumber  String?
  logoUrl             String?    @db.Text
  logoMediaId         BigInt?
  dataAiHintLogo      String?
  website             String?    @db.Text
  email               String?
  phone               String?
  contactName         String?
  address             String?
  city                String?
  state               String?
  zipCode             String?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  tenantId            BigInt
  tenant              Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId              BigInt?    @unique
  user                User?      @relation(fields: [userId], references: [id])
  auctions            Auction[]
  lots                Lot[]
}

model Court {
  id                BigInt             @id @default(autoincrement())
  slug              String             @unique
  name              String
  stateUf           String
  website           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialDistrict {
  id                BigInt            @id @default(autoincrement())
  slug              String            @unique
  name              String            @unique
  courtId           BigInt?
  court             Court?            @relation(fields: [courtId], references: [id])
  stateId           BigInt?
  state             State?            @relation(fields: [stateId], references: [id])
  zipCode           String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialBranch {
  id                BigInt            @id @default(autoincrement())
  slug              String            @unique
  name              String            @unique
  districtId        BigInt?
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
  auctions          Auction[]
}

model State {
  id                BigInt             @id @default(autoincrement())
  slug              String             @unique
  name              String
  uf                String             @unique
  cities            City[]
  judicialDistricts JudicialDistrict[]
  lots              Lot[]
  auctions          Auction[]          @relation("StateAuctions")
}

model City {
  id        BigInt    @id @default(autoincrement())
  name      String
  stateId   BigInt
  state     State     @relation(fields: [stateId], references: [id])
  ibgeCode  String?   @unique
  slug      String?
  lotCount  Int?      @default(0)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  lots      Lot[]
  auctions  Auction[] @relation("CityAuctions")

  @@unique([name, stateId])
}

model AssetMedia {
  id          BigInt   @id @default(autoincrement())
  asset       Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  assetId     BigInt
  mediaItem   MediaItem @relation(fields: [mediaItemId], references: [id], onDelete: Cascade)
  mediaItemId BigInt
  isPrimary   Boolean  @default(false)
  displayOrder Int     @default(0)

  @@index([assetId])
  @@index([mediaItemId])
}

model Bid {
  id            BigInt    @id @default(autoincrement())
  lotId         BigInt
  lot           Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId     BigInt
  auction       Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidderId      BigInt
  bidder        User      @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  amount        Decimal   @db.Decimal(15, 2)
  timestamp     DateTime  @default(now())
  bidderDisplay String?
  tenantId      BigInt
  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([bidderId])
}

model UserWin {
  id                 BigInt             @id @default(autoincrement())
  lotId              BigInt             @unique
  lot                Lot                @relation(fields: [lotId], references: [id])
  userId             BigInt
  user               User               @relation(fields: [userId], references: [id])
  winningBidAmount   Decimal            @db.Decimal(15, 2)
  winDate            DateTime           @default(now())
  paymentStatus      PaymentStatus      @default(PENDENTE)
  retrievalStatus    String             @default("PENDENTE")
  invoiceUrl         String?
  installmentPayment InstallmentPayment[]

  @@index([userId])
}

model InstallmentPayment {
  id                BigInt        @id @default(autoincrement())
  userWinId         BigInt
  userWin           UserWin       @relation(fields: [userWinId], references: [id], onDelete: Cascade)
  lot               Lot[]         @relation("InstallmentPaymentToLot")
  installmentNumber Int
  totalInstallments Int
  amount            Decimal       @db.Decimal(15, 2)
  dueDate           DateTime
  paymentDate       DateTime?
  status            PaymentStatus @default(PENDENTE)
  paymentMethod     String?
  transactionId     String?

  @@unique([userWinId, installmentNumber])
  @@index([userWinId])
}

model UserLotMaxBid {
  id         BigInt   @id @default(autoincrement())
  userId     BigInt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lotId      BigInt
  lot        Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  maxAmount  Decimal  @db.Decimal(15, 2)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())

  @@unique([userId, lotId])
  @@index([lotId])
}

model LotCategory {
  id                   BigInt            @id @default(autoincrement())
  slug                 String            @unique
  name                 String            @unique
  description          String?           @db.Text
  logoUrl              String?
  logoMediaId          BigInt?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    BigInt?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId BigInt?
  dataAiHintMegaMenu   String?
  hasSubcategories     Boolean?          @default(false)
  subcategories        Subcategory[]
  lots                 Lot[]
  assets               Asset[]
  auctions             Auction[]
  directSaleOffers     DirectSaleOffer[]
  createdAt            DateTime?         @default(now())
  updatedAt            DateTime?         @updatedAt
}

model Subcategory {
  id               BigInt       @id @default(autoincrement())
  name             String
  slug             String
  description      String?
  parentCategoryId BigInt
  parentCategory   LotCategory  @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  displayOrder     Int          @default(0)
  iconUrl          String?
  iconMediaId      BigInt?
  dataAiHintIcon   String?
  lots             Lot[]
  assets           Asset[]

  @@unique([name, parentCategoryId])
}

model DirectSaleOffer {
  id                   BigInt              @id @default(autoincrement())
  publicId             String              @unique
  title                String
  description          String?             @db.Text
  offerType            DirectSaleOfferType
  price                Decimal?            @db.Decimal(15, 2)
  minimumOfferPrice    Decimal?            @db.Decimal(15, 2)
  status               DirectSaleOfferStatus @default(ACTIVE)
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         BigInt?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  expiresAt            DateTime?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  category             LotCategory         @relation(fields: [categoryId], references: [id])
  categoryId           BigInt
  seller               Seller              @relation(fields: [sellerId], references: [id])
  sellerId             BigInt
  sellerName           String?
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  tenant               Tenant              @relation(fields: [tenantId], references: [id])
  tenantId             BigInt
  itemsIncluded        Json?
  views                Int                 @default(0)
}

model Notification {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  lotId     BigInt?
  lot       Lot?     @relation(fields: [lotId], references: [id])
  auctionId BigInt?
  auction   Auction? @relation(fields: [auctionId], references: [id])
  tenantId  BigInt
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserDocument {
  id              BigInt           @id @default(autoincrement())
  status          UserDocumentStatus @default(PENDING_ANALYSIS)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userId          BigInt
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentTypeId  BigInt
  documentType    DocumentType     @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)
  fileName        String?
  fileUrl         String
  rejectionReason String?

  @@unique([userId, documentTypeId])
  @@index([documentTypeId])
}

model DocumentType {
  id          BigInt         @id @default(autoincrement())
  name        String         @unique
  description String?
  isRequired  Boolean        @default(true)
  appliesTo   String
  documents   UserDocument[]
}

model AuctionHabilitation {
  userId        BigInt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auctionId     BigInt
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  habilitatedAt DateTime @default(now())

  @@id([userId, auctionId])
  @@index([auctionId])
}

model Review {
  id              BigInt    @id @default(autoincrement())
  lotId           BigInt
  lot             Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId       BigInt
  auction         Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  userId          BigInt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating          Int
  comment         String?   @db.Text
  createdAt       DateTime  @default(now())
  userDisplayName String?

  @@index([lotId])
}

model LotQuestion {
  id                      BigInt    @id @default(autoincrement())
  lotId                   BigInt
  lot                     Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId               BigInt
  auction                 Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  userId                  BigInt
  user                    User      @relation(fields: [userId], references: [id])
  userDisplayName         String
  questionText            String    @db.Text
  answerText              String?   @db.Text
  isPublic                Boolean   @default(true)
  createdAt               DateTime  @default(now())
  answeredAt              DateTime?
  answeredByUserId        BigInt?
  answeredByUserDisplayName String?

  @@index([lotId])
}

model MediaItem {
  id               BigInt       @id @default(autoincrement())
  fileName         String
  storagePath      String
  urlOriginal      String
  urlThumbnail     String?
  urlMedium        String?
  urlLarge         String?
  mimeType         String
  sizeBytes        Int?
  altText          String?
  caption          String?
  description      String?      @db.Text
  title            String?
  dataAiHint       String?
  uploadedAt       DateTime     @default(now())
  uploadedByUserId BigInt?
  uploadedBy       User?        @relation("UploadedBy", fields: [uploadedByUserId], references: [id], onDelete: SetNull)
  judicialProcessId BigInt?
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  linkedLotIds      Json?
  assetGallery      AssetMedia[]
}

model PlatformSettings {
  id                              BigInt                    @id @default(autoincrement())
  tenantId                        BigInt                    @unique
  tenant                          Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  siteTitle                       String?
  siteTagline                     String?
  logoUrl                         String?
  faviconUrl                      String?
  isSetupComplete                 Boolean                   @default(false)
  themes                          ThemeSettings[]
  platformPublicIdMasks           IdMasks?
  mapSettings                     MapSettings?
  biddingSettings                 BiddingSettings?
  paymentGatewaySettings          PaymentGatewaySettings?
  notificationSettings            NotificationSettings?
  mentalTriggerSettings           MentalTriggerSettings?
  sectionBadgeVisibility          SectionBadgeVisibility?
  variableIncrementTable          VariableIncrementRule[]
  crudFormMode                    String?                   @default("modal") // 'modal' or 'sheet'
  galleryImageBasePath            String?
  storageProvider                 StorageProviderType?
  firebaseStorageBucket           String?
  activeThemeName                 String?
  searchPaginationType            SearchPaginationType?
  searchItemsPerPage              Int?                      @default(12)
  searchLoadMoreCount             Int?                      @default(12)
  showCountdownOnLotDetail        Boolean?                  @default(true)
  showCountdownOnCards            Boolean?                  @default(true)
  showRelatedLotsOnLotDetail      Boolean?                  @default(true)
  relatedLotsCount                Int?                      @default(5)
  defaultUrgencyTimerHours        Int?
  defaultListItemsPerPage         Int?                      @default(10)
  updatedAt                       DateTime?                 @updatedAt
}

model ThemeSettings {
  id               BigInt            @id @default(autoincrement())
  name             String            @unique
  platformSettings PlatformSettings? @relation(fields: [platformSettingsId], references: [id])
  platformSettingsId BigInt?
  colors           ThemeColors?
}

model ThemeColors {
  id              BigInt         @id @default(autoincrement())
  themeSettingsId BigInt         @unique
  themeSettings   ThemeSettings  @relation(fields: [themeSettingsId], references: [id], onDelete: Cascade)
  light           Json?
  dark            Json?
}

model IdMasks {
  id                  BigInt            @id @default(autoincrement())
  platformSettingsId  BigInt            @unique
  platformSettings    PlatformSettings  @relation(fields: [platformSettingsId], references: [id], onDelete: Cascade)
  auctionCodeMask     String?
  lotCodeMask         String?
  sellerCodeMask      String?
  auctioneerCodeMask  String?
  userCodeMask        String?
  assetCodeMask       String?
  categoryCodeMask    String?
  subcategoryCodeMask String?
}

model VariableIncrementRule {
    id                  BigInt           @id @default(autoincrement())
    platformSettingsId  BigInt
    platformSettings    PlatformSettings @relation(fields: [platformSettingsId], references: [id], onDelete: Cascade)
    from                Float
    to                  Float?
    increment           Float
}

model MapSettings {
  id                 BigInt           @id @default(autoincrement())
  platformSettingsId BigInt           @unique
  platformSettings   PlatformSettings @relation(fields: [platformSettingsId], references: [id], onDelete: Cascade)
  defaultProvider    String?          @default("openstreetmap")
  googleMapsApiKey   String?
}

model BiddingSettings {
  id                              BigInt            @id @default(autoincrement())
  platformSettingsId              BigInt            @unique
  platformSettings                PlatformSettings  @relation(fields: [platformSettingsId], references: [id], onDelete: Cascade)
  instantBiddingEnabled           Boolean?          @default(true)
  getBidInfoInstantly             Boolean?          @default(true)
  biddingInfoCheckIntervalSeconds Int?              @default(1)
  defaultStageDurationDays        Int?              @default(7)
  defaultDaysBetweenStages        Int?              @default(1)
}

model PaymentGatewaySettings {
  id                           BigInt            @id @default(autoincrement())
  platformSettingsId           BigInt            @unique
  platformSettings             PlatformSettings  @relation(fields: [platformSettingsId], references: [id], onDelete: Cascade)
  defaultGateway               String?           @default("Manual")
  platformCommissionPercentage Float?            @default(5.0)
  gatewayApiKey                String?
  gatewayEncryptionKey         String?
}

model NotificationSettings {
  id                           BigInt            @id @default(autoincrement())
  platformSettingsId           BigInt            @unique
  platformSettings             PlatformSettings  @relation(fields: [platformSettingsId], references: [id], onDelete: Cascade)
  notifyOnNewAuction           Boolean           @default(true)
  notifyOnFeaturedLot          Boolean           @default(false)
  notifyOnAuctionEndingSoon    Boolean           @default(true)
  notifyOnPromotions           Boolean           @default(true)
}

model MentalTriggerSettings {
  id                      BigInt            @id @default(autoincrement())
  platformSettingsId      BigInt            @unique
  platformSettings        PlatformSettings  @relation(fields: [platformSettingsId], references: [id], onDelete: Cascade)
  showDiscountBadge       Boolean           @default(true)
  showPopularityBadge     Boolean           @default(true)
  popularityViewThreshold Int               @default(500)
  showHotBidBadge         Boolean           @default(true)
  hotBidThreshold         Int               @default(10)
  showExclusiveBadge      Boolean           @default(true)
}

model SectionBadgeVisibility {
  id                 BigInt           @id @default(autoincrement())
  platformSettingsId BigInt           @unique
  platformSettings   PlatformSettings @relation(fields: [platformSettingsId], references: [id], onDelete: Cascade)
  searchGrid         Json?
  lotDetail          Json?
}

model DataSource {
  id        BigInt @id @default(autoincrement())
  name      String
  modelName String @unique
  fields    Json
}

model Report {
  id           BigInt   @id @default(autoincrement())
  name         String
  description  String?
  definition   Json
  tenantId     BigInt
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    User     @relation("CreatedBy", fields: [createdById], references: [id])
  createdById  BigInt
}

model Subscriber {
  id          BigInt   @id @default(autoincrement())
  email       String   @unique
  name        String?
  phone       String?
  preferences Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenantId    BigInt
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        BigInt   @id @default(autoincrement())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
}

model VehicleMake {
  id     BigInt         @id @default(autoincrement())
  name   String         @unique
  slug   String         @unique
  models VehicleModel[]
}

model VehicleModel {
  id     BigInt      @id @default(autoincrement())
  name   String
  slug   String
  makeId BigInt
  make   VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)

  @@unique([makeId, name])
  @@index([slug])
}

// -----------------------------
// Bidder Dashboard Models
// -----------------------------

model BidderProfile {
  id                    BigInt   @id @default(autoincrement())
  userId               BigInt   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Informações Pessoais
  fullName             String?
  cpf                  String?  @unique
  phone                String?
  dateOfBirth          DateTime?

  // Endereço
  address              String?
  city                 String?
  state                String?
  zipCode              String?

  // Documentos
  documentStatus       BidderDocumentStatus @default(PENDING)
  submittedDocuments   Json?    // Array de documentos submetidos

  // Configurações
  emailNotifications   Boolean  @default(true)
  smsNotifications     Boolean  @default(false)

  // Status
  isActive             Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relacionamentos
  wonLots              WonLot[]
  notifications        BidderNotification[]
  paymentMethods       PaymentMethod[]
  participationHistory ParticipationHistory[]

  @@map("bidder_profiles")
}

model WonLot {
  id              BigInt   @id @default(autoincrement())
  bidderId        BigInt
  bidder          BidderProfile @relation(fields: [bidderId], references: [id], onDelete: Cascade)

  // Informações do Lote
  lotId           BigInt
  auctionId       BigInt
  title           String
  finalBid        Decimal  @db.Decimal(10,2)
  wonAt           DateTime @default(now())

  // Status do Arremate
  status          WonLotStatus @default(WON)
  paymentStatus   PaymentStatus @default(PENDENTE)

  // Pagamento
  totalAmount     Decimal @db.Decimal(10,2) // Valor final + taxas
  paidAmount      Decimal @db.Decimal(10,2) @default(0)
  dueDate         DateTime?

  // Entrega
  deliveryStatus  DeliveryStatus @default(PENDING)
  trackingCode    String?

  // Documentos
  invoiceUrl      String?
  receiptUrl      String?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("won_lots")
}

model BidderNotification {
  id          BigInt   @id @default(autoincrement())
  bidderId    BigInt
  bidder      BidderProfile @relation(fields: [bidderId], references: [id], onDelete: Cascade)

  type        BidderNotificationType
  title       String
  message     String
  data        Json?    // Dados adicionais

  isRead      Boolean  @default(false)
  readAt      DateTime?

  createdAt   DateTime @default(now())

  @@map("bidder_notifications")
}

model PaymentMethod {
  id              BigInt   @id @default(autoincrement())
  bidderId        BigInt
  bidder          BidderProfile @relation(fields: [bidderId], references: [id], onDelete: Cascade)

  type            PaymentMethodType // CREDIT_CARD, DEBIT_CARD, PIX, BOLETO
  isDefault       Boolean  @default(false)

  // Para Cartão de Crédito
  cardLast4       String?
  cardBrand       String? // VISA, MASTERCARD, etc
  cardToken       String? // Token seguro do gateway

  // Para PIX
  pixKey          String?
  pixKeyType      String? // CPF, EMAIL, PHONE, RANDOM

  // Status
  isActive        Boolean  @default(true)
  expiresAt       DateTime?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("payment_methods")
}

model ParticipationHistory {
  id            BigInt   @id @default(autoincrement())
  bidderId      BigInt
  bidder        BidderProfile @relation(fields: [bidderId], references: [id], onDelete: Cascade)

  // Informações da Participação
  lotId         BigInt
  auctionId     BigInt
  title         String
  auctionName   String

  // Valores
  maxBid        Decimal? @db.Decimal(10,2)
  finalBid      Decimal? @db.Decimal(10,2)
  result        ParticipationResult // WON, LOST, WITHDRAWN

  // Detalhes
  participatedAt DateTime @default(now())
  bidCount      Int      @default(0)

  createdAt     DateTime @default(now())

  @@map("participation_history")
}

model ContactMessage {
  id        BigInt   @id @default(autoincrement())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentTemplate {
  id        BigInt              @id @default(autoincrement())
  name      String              @unique
  type      DocumentTemplateType
  content   String?             @db.Text
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

// -----------------------------
// Enums
// -----------------------------
enum AssetStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
  RETIRADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  VENDA_DIRETA
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum StorageProviderType {
  LOCAL
  FIREBASE
}

enum SearchPaginationType {
  loadMore
  numberedPages
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

// -----------------------------
// Bidder Dashboard Enums
// -----------------------------
enum BidderDocumentStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  EXPIRED
}

enum BidderNotificationType {
  AUCTION_WON
  PAYMENT_DUE
  PAYMENT_OVERDUE
  DOCUMENT_APPROVED
  DOCUMENT_REJECTED
  DELIVERY_UPDATE
  AUCTION_ENDING
  SYSTEM_UPDATE
}

enum PaymentMethodType {
  CREDIT_CARD
  DEBIT_CARD
  PIX
  BOLETO
  BANK_TRANSFER
}

enum ParticipationResult {
  WON
  LOST
  WITHDRAWN
}

enum WonLotStatus {
  WON
  PAID
  DELIVERED
  CANCELLED
}

enum DeliveryStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  FAILED
}