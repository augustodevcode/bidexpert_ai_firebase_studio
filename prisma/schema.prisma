// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. MODELS WITHOUT FOREIGN KEY DEPENDENCIES (BASE TABLES)
// =================================================================

model PlatformSettings {
  id                              String   @id @default("global")
  siteTitle                       String?  @db.VarChar(100)
  siteTagline                     String?  @db.VarChar(200)
  logoUrl                         String?
  faviconUrl                      String?
  galleryImageBasePath            String   @default("/uploads/media/")
  storageProvider                 String   @default("local") @db.VarChar(50)
  firebaseStorageBucket           String?  @db.VarChar(200)
  activeThemeName                 String?  @db.VarChar(100)
  themes                          Json?
  platformPublicIdMasks           Json?
  homepageSections                Json?
  mentalTriggerSettings           Json?
  sectionBadgeVisibility          Json?
  mapSettings                     Json?
  searchPaginationType            String   @default("loadMore") @db.VarChar(50)
  searchItemsPerPage              Int      @default(12)
  searchLoadMoreCount             Int      @default(12)
  showCountdownOnLotDetail        Boolean  @default(true)
  showCountdownOnCards            Boolean  @default(true)
  showRelatedLotsOnLotDetail      Boolean  @default(true)
  relatedLotsCount                Int      @default(5)
  defaultUrgencyTimerHours        Int?
  variableIncrementTable          Json?
  biddingSettings                 Json?
  paymentGatewaySettings          Json?
  defaultListItemsPerPage         Int      @default(10)
  updatedAt                       DateTime @updatedAt
}

model Role {
  id             String         @id @default(uuid())
  name           String         @db.VarChar(50)
  nameNormalized String         @unique @db.VarChar(50)
  description    String?        @db.VarChar(255)
  permissions    String[]
  users          UsersOnRoles[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model State {
  id        String             @id @default(uuid())
  name      String             @unique @db.VarChar(100)
  uf        String             @unique @db.VarChar(2)
  slug      String             @unique @db.VarChar(100)
  cityCount Int                @default(0)
  cities    City[]
  districts JudicialDistrict[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model LotCategory {
  id                   String        @id @default(uuid())
  name                 String        @unique @db.VarChar(100)
  slug                 String        @unique @db.VarChar(100)
  description          String?       @db.VarChar(500)
  hasSubcategories     Boolean       @default(false)
  iconName             String?       @db.VarChar(50)
  logoUrl              String?       @db.VarChar(255)
  logoMediaId          String?       @db.VarChar(100)
  dataAiHintIcon       String?       @db.VarChar(100)
  coverImageUrl        String?       @db.VarChar(255)
  coverImageMediaId    String?       @db.VarChar(100)
  dataAiHintCover      String?       @db.VarChar(100)
  megaMenuImageUrl     String?       @db.VarChar(255)
  megaMenuImageMediaId String?       @db.VarChar(100)
  dataAiHintMegaMenu   String?       @db.VarChar(100)
  lots                 Lot[]
  bens                 Bem[]
  auctions             Auction[]
  subcategories        Subcategory[]
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
}

model DocumentTemplate {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(150)
  type      String   @db.VarChar(50)
  content   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DocumentType {
  id          String         @id @default(uuid())
  name        String         @db.VarChar(150)
  description String?        @db.VarChar(255)
  isRequired  Boolean        @default(true)
  appliesTo   String[]       @db.VarChar(50)
  documents   UserDocument[]
}

model ContactMessage {
  id      String   @id @default(uuid())
  name    String   @db.VarChar(150)
  email   String   @db.VarChar(150)
  subject String   @db.VarChar(255)
  message String   @db.Text
  isRead  Boolean  @default(false)
  sentAt  DateTime @default(now())
}

// =================================================================
// 2. MODELS WITH ONE LEVEL OF DEPENDENCY
// =================================================================

model User {
  id                  String              @id @default(uuid())
  email               String              @unique @db.VarChar(150)
  password            String?             @db.VarChar(255)
  fullName            String?             @db.VarChar(150)
  habilitationStatus  String              @default("PENDING_DOCUMENTS") @db.VarChar(50)
  accountType         String              @default("PHYSICAL") @db.VarChar(50)
  avatarUrl           String?             @db.VarChar(255)
  dataAiHint          String?             @db.VarChar(100)
  badges              Json?
  roles               UsersOnRoles[]
  seller              Seller?
  auctioneer          Auctioneer?
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  mediaItems          MediaItem[]
  maxBids             UserLotMaxBid[]
  habilitations       AuctionHabilitation[]
  wonLots             Lot[]               @relation("WonLots")
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model City {
  id        String             @id @default(uuid())
  name      String             @db.VarChar(150)
  slug      String             @unique @db.VarChar(150)
  stateId   String
  state     State              @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateUf   String?            @db.VarChar(2)
  ibgeCode  String?            @unique @db.VarChar(10)
  lotCount  Int                @default(0)
  lots      Lot[]
  auctions  Auction[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model Subcategory {
  id                 String      @id @default(uuid())
  name               String      @db.VarChar(100)
  slug               String      @unique
  parentCategoryId   String
  description        String?     @db.VarChar(500)
  displayOrder       Int         @default(0)
  iconUrl            String?     @db.VarChar(255)
  iconMediaId        String?     @db.VarChar(100)
  dataAiHintIcon     String?     @db.VarChar(100)
  lots               Lot[]
  bens               Bem[]
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
}

model Court {
  id                String             @id @default(uuid())
  name              String             @unique @db.VarChar(150)
  slug              String             @unique
  stateUf           String?            @db.VarChar(2)
  website           String?            @db.VarChar(255)
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

// =================================================================
// 3. MODELS WITH MULTIPLE LEVELS OF DEPENDENCY
// =================================================================

model JudicialDistrict {
  id                String             @id @default(uuid())
  name              String             @db.VarChar(150)
  slug              String             @unique
  courtId           String?
  court             Court?             @relation(fields: [courtId], references: [id])
  stateId           String
  state             State              @relation(fields: [stateId], references: [id])
  zipCode           String?            @db.VarChar(10)
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@unique([name, stateId])
}

model JudicialBranch {
  id                String             @id @default(uuid())
  name              String             @db.VarChar(150)
  slug              String             @unique
  districtId        String?
  contactName       String?            @db.VarChar(150)
  phone             String?            @db.VarChar(20)
  email             String?            @db.VarChar(150)
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  sellers           Seller[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@unique([name, districtId])
}

model Seller {
  id                 String             @id @default(uuid())
  publicId           String             @unique
  slug               String             @unique @db.VarChar(150)
  name               String             @unique @db.VarChar(150)
  contactName        String?            @db.VarChar(150)
  email              String?            @db.VarChar(150)
  phone              String?            @db.VarChar(20)
  address            String?            @db.VarChar(200)
  city               String?            @db.VarChar(100)
  state              String?            @db.VarChar(50)
  zipCode            String?            @db.VarChar(10)
  website            String?            @db.VarChar(255)
  logoUrl            String?            @db.VarChar(255)
  logoMediaId        String?            @db.VarChar(100)
  dataAiHintLogo     String?            @db.VarChar(100)
  description        String?            @db.Text
  userId             String?            @unique
  user               User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  isJudicial         Boolean            @default(false)
  judicialBranchId   String?
  judicialBranch     JudicialBranch?    @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  auctions           Auction[]
  bens               Bem[]
  lots               Lot[]
  directSaleOffers   DirectSaleOffer[]
  judicialProcesses  JudicialProcess[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model Auctioneer {
  id                 String    @id @default(uuid())
  publicId           String    @unique
  slug               String    @unique @db.VarChar(150)
  name               String    @db.VarChar(150)
  registrationNumber String?   @db.VarChar(50)
  contactName        String?   @db.VarChar(150)
  email              String?   @db.VarChar(150)
  phone              String?   @db.VarChar(20)
  address            String?   @db.VarChar(200)
  city               String?   @db.VarChar(100)
  state              String?   @db.VarChar(50)
  zipCode            String?   @db.VarChar(10)
  website            String?   @db.VarChar(255)
  logoUrl            String?   @db.VarChar(255)
  logoMediaId        String?   @db.VarChar(100)
  dataAiHintLogo     String?   @db.VarChar(100)
  description        String?   @db.Text
  userId             String?   @unique
  user               User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  auctions           Auction[]
  lots               Lot[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Lot {
  id                        String              @id @default(uuid())
  publicId                  String              @unique
  auctionId                 String
  slug                      String              @unique
  number                    String?             @db.VarChar(20)
  title                     String              @db.VarChar(255)
  description               String?             @db.Text
  price                     Decimal             @default(0.00) @db.Decimal(15, 2)
  status                    String              @default("EM_BREVE") @db.VarChar(50)
  bidsCount                 Int                 @default(0)
  views                     Int                 @default(0)
  isFeatured                Boolean             @default(false)
  isExclusive               Boolean             @default(false)
  imageUrl                  String?             @db.VarChar(255)
  imageMediaId              String?             @db.VarChar(100)
  galleryImageUrls          Json?
  mediaItemIds              Json?
  inheritedMediaFromBemId   String?             // New field for inherited media
  type                      String              @db.VarChar(100)
  categoryId                String?
  subcategoryId             String?
  sellerId                  String?
  sellerName                String?             @db.VarChar(150) // Denormalized for display
  auctioneerId              String?
  cityId                    String?
  stateId                   String?
  cityName                  String?             @db.VarChar(100)
  stateUf                   String?             @db.VarChar(2)
  latitude                  Float?
  longitude                 Float?
  mapAddress                String?             @db.VarChar(255)
  endDate                   DateTime?
  lotSpecificAuctionDate    DateTime?
  condition                 String?             @db.VarChar(100)
  dataAiHint                String?             @db.VarChar(100)
  winnerId                  String?
  winner                    User?               @relation("WonLots", fields: [winnerId], references: [id], onDelete: SetNull)
  winningBidTermUrl         String?             @db.VarChar(255)
  allowInstallmentBids      Boolean             @default(false)
  isRelisted                Boolean             @default(false)
  relistCount               Int                 @default(0)
  originalLotId             String?
  originalLot               Lot?                @relation("RelistedFrom", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLots              Lot[]               @relation("RelistedFrom")
  auction                   Auction             @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                  LotCategory?        @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory               Subcategory?        @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  seller                    Seller?             @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  auctioneer                Auctioneer?         @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  city                      City?               @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state                     State?              @relation(fields: [stateId], references: [id], onDelete: SetNull)
  bens                      LotBens[]
  bids                      Bid[]
  wins                      UserWin[]
  maxBids                   UserLotMaxBid[]
  stageDetails              LotAuctionStageDetails[]
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt

  @@unique([auctionId, number])
  @@index([sellerId])
  @@index([categoryId])
}

model Bem {
  id                   String       @id @default(uuid())
  publicId             String       @unique
  title                String       @db.VarChar(200)
  description          String?      @db.Text
  status               String       @default("DISPONIVEL") @db.VarChar(50)
  categoryId           String?
  subcategoryId        String?
  judicialProcessId    String?
  sellerId             String?
  evaluationValue      Decimal?     @db.Decimal(15, 2)
  imageUrl             String?      @db.VarChar(255)
  imageMediaId         String?      @db.VarChar(100)
  galleryImageUrls     Json?
  mediaItemIds         Json?
  dataAiHint           String?      @db.VarChar(100)
  locationCity         String?      @db.VarChar(100)
  locationState        String?      @db.VarChar(100)
  address              String?      @db.VarChar(255)
  latitude             Float?
  longitude            Float?
  plate                String?      @db.VarChar(10)
  make                 String?      @db.VarChar(50)
  model                String?      @db.VarChar(50)
  version              String?      @db.VarChar(100)
  year                 Int?
  modelYear            Int?
  mileage              Int?
  color                String?      @db.VarChar(30)
  fuelType             String?      @db.VarChar(30)
  transmissionType     String?      @db.VarChar(30)
  bodyType             String?      @db.VarChar(50)
  vin                  String?      @db.VarChar(17)
  renavam              String?      @db.VarChar(11)
  enginePower          String?      @db.VarChar(50)
  numberOfDoors        Int?
  vehicleOptions       String?      @db.VarChar(500)
  detranStatus         String?      @db.VarChar(100)
  debts                String?      @db.VarChar(500)
  runningCondition     String?      @db.VarChar(100)
  bodyCondition        String?      @db.VarChar(100)
  tiresCondition       String?      @db.VarChar(100)
  hasKey               Boolean?
  propertyRegistrationNumber String? @db.VarChar(50)
  iptuNumber           String?      @db.VarChar(50)
  isOccupied           Boolean?
  totalArea            Decimal?     @db.Decimal(15, 2)
  builtArea            Decimal?     @db.Decimal(15, 2)
  bedrooms             Int?
  suites               Int?
  bathrooms            Int?
  parkingSpaces        Int?
  constructionType     String?      @db.VarChar(100)
  finishes             String?      @db.VarChar(500)
  infrastructure       String?      @db.VarChar(500)
  condoDetails         String?      @db.VarChar(500)
  improvements         String?      @db.VarChar(500)
  topography           String?      @db.VarChar(100)
  liensAndEncumbrances String?      @db.Text
  propertyDebts        String?      @db.VarChar(500)
  unregisteredRecords  String?      @db.VarChar(500)
  hasHabiteSe          Boolean?
  zoningRestrictions   String?      @db.VarChar(200)
  amenities            Json?
  brand                String?      @db.VarChar(50)
  serialNumber         String?      @db.VarChar(100)
  itemCondition        String?      @db.VarChar(100)
  specifications       String?      @db.Text
  includedAccessories  String?      @db.VarChar(500)
  batteryCondition     String?      @db.VarChar(100)
  hasInvoice           Boolean?
  hasWarranty          Boolean?
  repairHistory        String?      @db.VarChar(500)
  applianceCapacity    String?      @db.VarChar(50)
  voltage              String?      @db.VarChar(20)
  applianceType        String?      @db.VarChar(50)
  additionalFunctions  String?      @db.VarChar(200)
  hoursUsed            Int?
  engineType           String?      @db.VarChar(50)
  capacityOrPower      String?      @db.VarChar(100)
  maintenanceHistory   String?      @db.Text
  installationLocation String?      @db.VarChar(200)
  compliesWithNR       String?      @db.VarChar(100)
  operatingLicenses    String?      @db.VarChar(200)
  breed                String?      @db.VarChar(50)
  age                  String?      @db.VarChar(30)
  sex                  String?      @db.VarChar(10)
  weight               String?      @db.VarChar(30)
  individualId         String?      @db.VarChar(50)
  purpose              String?      @db.VarChar(100)
  sanitaryCondition    String?      @db.VarChar(200)
  vaccinationStatus    String?      @db.VarChar(500)
  lineage              String?      @db.VarChar(200)
  isPregnant           Boolean?
  specialSkills        String?      @db.VarChar(200)
  gtaDocument          String?      @db.VarChar(100)
  breedRegistryDocument String?      @db.VarChar(100)
  furnitureType        String?      @db.VarChar(100)
  material             String?      @db.VarChar(100)
  style                String?      @db.VarChar(50)
  dimensions           String?      @db.VarChar(100)
  pieceCount           Int?
  jewelryType          String?      @db.VarChar(100)
  metal                String?      @db.VarChar(100)
  gemstones            String?      @db.VarChar(500)
  totalWeight          String?      @db.VarChar(50)
  jewelrySize          String?      @db.VarChar(50)
  authenticityCertificate String? @db.VarChar(200)
  workType             String?      @db.VarChar(100)
  artist               String?      @db.VarChar(100)
  period               String?      @db.VarChar(100)
  technique            String?      @db.VarChar(100)
  provenance           String?      @db.VarChar(500)
  boatType             String?      @db.VarChar(100)
  boatLength           String?      @db.VarChar(50)
  hullMaterial         String?      @db.VarChar(50)
  onboardEquipment     String?      @db.Text
  productName          String?      @db.VarChar(100)
  quantity             String?      @db.VarChar(50)
  packagingType        String?      @db.VarChar(50)
  expirationDate       DateTime?
  storageConditions    String?      @db.VarChar(200)
  preciousMetalType    String?      @db.VarChar(50)
  purity               String?      @db.VarChar(50)
  forestGoodsType      String?      @db.VarChar(100)
  volumeOrQuantity     String?      @db.VarChar(100)
  species              String?      @db.VarChar(100)
  dofNumber            String?      @db.VarChar(100)
  category             LotCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory          Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess      JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller               Seller?      @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  lots                 LotBens[]
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
}

model LotBens {
  lot     Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId   String
  bem     Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId   String
  addedAt DateTime @default(now())

  @@id([lotId, bemId])
}

model Auction {
  id                   String              @id @default(uuid())
  publicId             String              @unique
  slug                 String              @unique
  title                String              @db.VarChar(255)
  description          String?             @db.Text
  status               String              @default("RASCUNHO") @db.VarChar(50)
  auctionDate          DateTime?
  endDate              DateTime?
  auctioneerId         String?
  sellerId             String?
  categoryId           String?
  auctionType          String?             @db.VarChar(50)
  participation        String              @default("ONLINE") @db.VarChar(50)
  auctionMethod        String              @default("STANDARD") @db.VarChar(50)
  onlineUrl            String?             @db.VarChar(255)
  address              String?             @db.VarChar(255)
  cityId               String?
  stateId              String?
  zipCode              String?             @db.VarChar(10)
  latitude             Float?
  longitude            Float?
  imageUrl             String?             @db.VarChar(255)
  imageMediaId         String?             @db.VarChar(100)
  dataAiHint           String?             @db.VarChar(100)
  documentsUrl         String?             @db.VarChar(255)
  evaluationReportUrl  String?
  auctionCertificateUrl String?
  sellingBranch        String?
  automaticBiddingEnabled Boolean @default(false)
  allowInstallmentBids    Boolean @default(true)
  silentBiddingEnabled   Boolean @default(false)
  allowMultipleBidsPerUser Boolean @default(true)
  softCloseEnabled       Boolean @default(false)
  softCloseMinutes       Int     @default(2)
  estimatedRevenue       Decimal? @db.Decimal(15, 2)
  achievedRevenue        Decimal? @db.Decimal(15, 2)
  totalHabilitatedUsers  Int?     @default(0)
  isFeaturedOnMarketplace Boolean @default(false)
  marketplaceAnnouncementTitle String? @db.VarChar(150)
  visits               Int?                @default(0)
  totalLots            Int?                @default(0)
  initialOffer         Decimal?            @db.Decimal(15, 2)
  isFavorite           Boolean?            @default(false)
  judicialProcessId    String?
  decrementAmount      Decimal?            @db.Decimal(15, 2)
  decrementIntervalSeconds Int?
  floorPrice           Decimal?            @db.Decimal(15, 2)
  autoRelistSettings   Json?
  bids                 Bid[]
  auctioneer           Auctioneer?         @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  seller               Seller?             @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  category             LotCategory?        @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  lots                 Lot[]
  auctionStages        AuctionStage[]
  habilitations        AuctionHabilitation[]
  judicialProcess      JudicialProcess?    @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  court                Court?              @relation(fields: [id], references: [id])
  district             JudicialDistrict?   @relation(fields: [id], references: [id])
  branch               JudicialBranch?     @relation(fields: [id], references: [id])
  city                 City?               @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state                State?              @relation(fields: [stateId], references: [id], onDelete: SetNull)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model AuctionStage {
  id              String   @id @default(uuid())
  auctionId       String
  name            String
  startDate       DateTime
  endDate         DateTime
  evaluationValue Decimal? @db.Decimal(15, 2)
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  lotDetails      LotAuctionStageDetails[]

  @@unique([auctionId, name])
}

model LotAuctionStageDetails {
  id              String       @id @default(uuid())
  lotId           String
  stageId         String
  initialBid      Decimal?     @db.Decimal(15, 2)
  bidIncrement    Decimal?     @db.Decimal(10, 2)
  lot             Lot          @relation(fields: [lotId], references: [id], onDelete: Cascade)
  stage           AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)

  @@unique([lotId, stageId])
}

model MediaItem {
  id                String    @id @default(uuid())
  fileName          String    @unique @db.VarChar(255)
  storagePath       String    @db.VarChar(255)
  title             String?   @db.VarChar(255)
  altText           String?   @db.VarChar(255)
  caption           String?   @db.VarChar(500)
  description       String?   @db.Text
  mimeType          String    @db.VarChar(100)
  sizeBytes         Int?
  urlOriginal       String    @db.VarChar(255)
  urlThumbnail      String?   @db.VarChar(255)
  urlMedium         String?   @db.VarChar(255)
  urlLarge          String?   @db.VarChar(255)
  linkedLotIds      Json?
  judicialProcessId String?
  dataAiHint        String?   @db.VarChar(100)
  uploadedByUserId  String
  user              User      @relation(fields: [uploadedByUserId], references: [id])
  uploadedAt        DateTime  @default(now())
}

model UserDocument {
  id              String       @id @default(uuid())
  userId          String
  documentTypeId  String
  status          String       @default("PENDING_ANALYSIS") @db.VarChar(50)
  fileUrl         String       @db.VarChar(255)
  fileName        String?      @db.VarChar(255)
  rejectionReason String?      @db.Text
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType @relation(fields: [documentTypeId], references: [id])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@unique([userId, documentTypeId])
}

model Bid {
  id            String   @id @default(uuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String?  @db.VarChar(150)
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id                String       @id @default(uuid())
  lotId             String       @unique
  userId            String
  winningBidAmount  Decimal      @db.Decimal(15, 2)
  winDate           DateTime     @default(now())
  paymentStatus     String       @db.VarChar(50)
  invoiceUrl        String?      @db.VarChar(255)
  installments      InstallmentPayment[]
  lot               Lot          @relation(fields: [lotId], references: [id])
  user              User         @relation(fields: [userId], references: [id])
}

model InstallmentPayment {
    id String @id @default(uuid())
    userWinId String
    userWin UserWin @relation(fields: [userWinId], references: [id])
    installmentNumber Int
    amount Decimal @db.Decimal(15, 2)
    dueDate DateTime
    status String @db.VarChar(50) // e.g., PENDING, PAID, OVERDUE
    paymentDate DateTime?
    paymentMethod String?
    transactionId String?
    
    @@unique([userWinId, installmentNumber])
}


model DirectSaleOffer {
  id                      String    @id @default(uuid())
  publicId                String    @unique
  title                   String    @db.VarChar(255)
  description             String?   @db.Text
  offerType               String?   @db.VarChar(50)
  price                   Decimal?  @db.Decimal(15, 2)
  minimumOfferPrice       Decimal?  @db.Decimal(15, 2)
  status                  String    @default("ACTIVE") @db.VarChar(50)
  categoryId              String?
  sellerId                String?
  sellerName              String?   @db.VarChar(150)
  sellerLogoUrl           String?   @db.VarChar(255)
  dataAiHintSellerLogo    String?   @db.VarChar(100)
  locationCity            String?   @db.VarChar(100)
  locationState           String?   @db.VarChar(100)
  imageUrl                String?   @db.VarChar(255)
  imageMediaId            String?   @db.VarChar(100)
  dataAiHint              String?   @db.VarChar(100)
  galleryImageUrls        Json?
  mediaItemIds            Json?
  itemsIncluded           Json?
  views                   Int       @default(0)
  expiresAt               DateTime?
  category                LotCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  seller                  Seller?   @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model JudicialProcess {
  id                      String    @id @default(uuid())
  publicId                String    @unique
  processNumber           String    @unique
  isElectronic            Boolean   @default(true)
  courtId                 String?
  districtId              String?
  branchId                String?
  sellerId                String?
  court                   Court?    @relation(fields: [courtId], references: [id])
  district                JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch                  JudicialBranch? @relation(fields: [branchId], references: [id])
  seller                  Seller?   @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties                 JudicialParty[]
  bens                    Bem[]
  auction                 Auction[]
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

model JudicialParty {
  id              String          @id @default(uuid())
  processId       String
  name            String
  documentNumber  String?
  partyType       String          @db.VarChar(50)
  judicialProcess JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model Notification {
  id         String   @id @default(uuid())
  userId     String
  message    String   @db.Text
  link       String?  @db.VarChar(255)
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model Review {
  id              String   @id @default(uuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())
}

model LotQuestion {
  id                      String    @id @default(uuid())
  lotId                   String
  auctionId               String
  userId                  String
  userDisplayName         String
  questionText            String    @db.Text
  answerText              String?   @db.Text
  isPublic                Boolean   @default(true)
  answeredAt              DateTime?
  answeredByUserId        String?
  answeredByUserDisplayName String?
  createdAt               DateTime  @default(now())
}

model AuctionHabilitation {
    id              String @id @default(uuid())
    userId          String
    auctionId       String
    habilitatedAt   DateTime @default(now())
    user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    auction     Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

    @@unique([userId, auctionId])
}

model VehicleMake {
    id      String @id @default(uuid())
    name    String @unique @db.VarChar(100)
    slug    String @unique
    models  VehicleModel[]
}

model VehicleModel {
    id      String @id @default(uuid())
    name    String @db.VarChar(100)
    slug    String
    makeId  String
    make    VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)
    
    @@unique([name, makeId])
}
