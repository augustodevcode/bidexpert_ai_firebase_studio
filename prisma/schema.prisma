
// datasource db {
//   provider  = "postgresql"
//   url       = env("POSTGRES_DATABASE_URL")
//   directUrl = env("POSTGRES_DIRECT_URL")
// }

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Tenant {
  id          String   @id @default(cuid())
  name        String
  subdomain   String   @unique
  domain      String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  auctions    Auction[]
  lots        Lot[]
  bens        Asset[]
  users       UsersOnTenants[]
  sellers     Seller[]
  auctioneers Auctioneer[]
  reports     Report[]

  @@index([subdomain])
}

model User {
  id                  String                @id @default(cuid())
  publicId            String                @unique @default(cuid())
  fullName            String?
  email               String                @unique
  password            String
  avatarUrl           String?
  dataAiHint          String?
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType           @default(PHYSICAL)
  cpf                 String?               @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  optInMarketing      Boolean               @default(false)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  bids                Bid[]
  notifications       Notification[]
  habilitations       AuctionHabilitation[]
  wins                UserWin[]
  reviews             Review[]
  questions           LotQuestion[]
  documents           UserDocument[]
  maxBids             UserLotMaxBid[]
  roles               UsersOnRoles[]
  tenants             UsersOnTenants[]
  uploadedMedia       MediaItem[]           @relation("UploadedBy")
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  role       Role     @relation(fields: [roleId], references: [id])
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model UsersOnTenants {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  tenantId   String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, tenantId])
}

model Role {
  id              String         @id @default(cuid())
  name            String         @unique
  nameNormalized  String         @unique
  description     String?
  permissions     String[]
  users           UsersOnRoles[]
}

model DocumentType {
  id           String         @id @default(cuid())
  name         String         @unique
  description  String?
  isRequired   Boolean        @default(true)
  appliesTo    String         @default("PHYSICAL,LEGAL")
  userDocs     UserDocument[]
}

model UserDocument {
  id              String             @id @default(cuid())
  user            User               @relation(fields: [userId], references: [id])
  userId          String
  documentType    DocumentType       @relation(fields: [documentTypeId], references: [id])
  documentTypeId  String
  fileUrl         String
  fileName        String
  status          UserDocumentStatus @default(SUBMITTED)
  rejectionReason String?
  submittedAt     DateTime           @default(now())
  verifiedAt      DateTime?

  @@unique([userId, documentTypeId])
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  tenantId  String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model AuctionHabilitation {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  auction    Auction  @relation(fields: [auctionId], references: [id])
  auctionId  String
  createdAt  DateTime @default(now())

  @@id([userId, auctionId])
}

model LotStagePrice {
  id            String   @id @default(cuid())
  lot           Lot      @relation(fields: [lotId], references: [id])
  lotId         String
  stage         AuctionStage @relation(fields: [stageId], references: [id])
  stageId       String
  initialBid    Decimal? @db.Decimal(12, 2)
  bidIncrement  Decimal? @db.Decimal(12, 2)
  
  @@unique([lotId, stageId])
}

model Lot {
  id                      String   @id @default(cuid())
  publicId                String   @unique
  number                  String?
  title                   String
  slug                    String   @unique
  description             String?  @db.Text
  properties              String?  @db.Text
  status                  LotStatus
  price                   Decimal  @db.Decimal(12, 2)
  initialPrice            Decimal? @db.Decimal(12, 2)
  secondInitialPrice      Decimal? @db.Decimal(12, 2)
  bidIncrementStep        Decimal? @db.Decimal(12, 2)
  evaluationValue         Decimal? @db.Decimal(12, 2)
  discountPercentage      Float?
  allowInstallmentBids    Boolean  @default(false)
  
  imageUrl                String?
  imageMediaId            String?
  inheritedMediaFromAssetId String?
  galleryImageUrls        String[]
  mediaItemIds            String[] @default([])
  dataAiHint              String?
  
  views                   Int      @default(0)
  bidsCount               Int      @default(0)
  isFeatured              Boolean  @default(false)
  isExclusive             Boolean  @default(false)
  
  latitude                Decimal? @db.Decimal(9, 6)
  longitude               Decimal? @db.Decimal(10, 6)
  locationCity            String?
  locationState           String?
  
  auctionId               String
  auction                 Auction  @relation(fields: [auctionId], references: [id])
  bids                    Bid[]
  maxBids                 UserLotMaxBid[]
  questions               LotQuestion[]
  reviews                 Review[]
  
  winnerId                String?
  winner                  User?    @relation("LotWinner", fields: [winnerId], references: [id])
  wins                    UserWin[]
  installments            InstallmentPayment[]

  tenantId                String
  tenant                  Tenant @relation(fields: [tenantId], references: [id])

  assets                  AssetsOnLots[]
  
  // Relisting Information
  originalLotId           String?
  originalLot             Lot?     @relation("RelistedLot", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLots            Lot[]    @relation("RelistedLot")
  relistCount             Int      @default(0)
  isRelisted              Boolean  @default(false)
  
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  lotPrices               LotStagePrice[]
  category                LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId              String?
  subcategory             Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId           String?
  seller                  Seller?      @relation(fields: [sellerId], references: [id])
  sellerId                String?
  auctioneer              Auctioneer?  @relation(fields: [auctioneerId], references: [id])
  auctioneerId            String?
  city                    City?        @relation(fields: [cityId], references: [id])
  cityId                  String?
  state                   State?       @relation(fields: [stateId], references: [id])
  stateId                 String?
  
  @@index([auctionId])
  @@index([status])
  @@index([winnerId])
  @@index([sellerId])
}

model Asset {
  id                      String       @id @default(cuid())
  publicId                String       @unique
  title                   String
  description             String?      @db.Text
  properties              String?      @db.Text
  status                  AssetStatus
  evaluationValue         Decimal?     @db.Decimal(12, 2)
  imageUrl                String?
  imageMediaId            String?
  dataAiHint              String?
  galleryImageUrls        String[]
  mediaItemIds            String[]     @default([])
  
  street                  String?
  number                  String?
  complement              String?
  neighborhood            String?
  zipCode                 String?
  latitude                Decimal?     @db.Decimal(9, 6)
  longitude               Decimal?     @db.Decimal(10, 6)
  locationCity            String?
  locationState           String?

  tenantId                String
  tenant                  Tenant       @relation(fields: [tenantId], references: [id])

  lots                    AssetsOnLots[]
  
  categoryId              String?
  category                LotCategory? @relation(fields: [categoryId], references: [id])
  subcategoryId           String?
  subcategory             Subcategory? @relation(fields: [subcategoryId], references: [id])
  judicialProcessId       String?
  judicialProcess         JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  sellerId                String?
  seller                  Seller?      @relation(fields: [sellerId], references: [id])
  
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt

  @@index([tenantId])
}

model AssetsOnLots {
  asset      Asset    @relation(fields: [assetId], references: [id])
  assetId    String
  lot        Lot      @relation(fields: [lotId], references: [id])
  lotId      String
  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([assetId, lotId])
}
