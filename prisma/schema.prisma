// prisma/header.prisma
// Este é o cabeçalho do schema do Prisma.
// Ele contém as configurações do gerador e da fonte de dados.
// NÃO adicione modelos de dados aqui. Os modelos devem ser definidos
// em arquivos individuais no diretório `prisma/models`.

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

/// Representa um ativo individual (um bem) antes de ser agrupado em um lote.
/// Pode ser um veículo, um imóvel, uma máquina, etc.
model Asset {
  id        String   @id @default(cuid())
  publicId  String   @unique @default(cuid())
  title     String
  description           String? @db.Text
  status                AssetStatus @default(DISPONIVEL)
  category              LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId            String?
  subcategory           Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId         String?
  judicialProcess       JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId     String?
  seller                Seller?          @relation(fields: [sellerId], references: [id])
  sellerId              String?
  evaluationValue       Decimal?         @db.Decimal(15, 2)
  imageUrl              String?
  imageMediaId          String?
  galleryImageUrls      Json?
  mediaItemIds          Json?
  dataAiHint            String?
  locationCity          String?
  locationState         String?
  address               String?
  latitude              Decimal?
  longitude             Decimal?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  lots      AssetsOnLots[]
  tenant    Tenant         @relation(fields: [tenantId], references: [id])
  tenantId  String

  // Vehicle Specific Fields
  plate                    String?
  make                     String?
  model                    String?
  version                  String?
  year                     Int?
  modelYear                Int?
  mileage                  Int?
  color                    String?
  fuelType                 String?
  transmissionType         String?
  bodyType                 String?
  vin                      String? @unique
  renavam                  String? @unique
  enginePower              String?
  numberOfDoors            Int?
  vehicleOptions           String? @db.Text
  detranStatus             String? @db.Text
  debts                    String? @db.Text
  runningCondition         String?
  bodyCondition            String?
  tiresCondition           String?
  hasKey                   Boolean?
  
  // Real Estate Specific Fields
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Decimal?
  builtArea                  Decimal?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String? @db.Text
  infrastructure             String? @db.Text
  condoDetails               String? @db.Text
  improvements               String? @db.Text
  topography                 String?
  liensAndEncumbrances       String? @db.Text
  propertyDebts              String? @db.Text
  unregisteredRecords        String? @db.Text
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  amenities                  Json?
  
  // Electronics Specific Fields
  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String? @db.Text
  includedAccessories        String? @db.Text
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String? @db.Text
  
  // Appliance Specific Fields
  applianceCapacity          String?
  voltage                    String?
  applianceType              String?
  additionalFunctions        String?

  // Machinery Specific Fields
  hoursUsed                  Int?
  engineType                 String?
  capacityOrPower            String?
  maintenanceHistory         String? @db.Text
  installationLocation       String?
  compliesWithNR             String?
  operatingLicenses          String?

  // Livestock Specific Fields
  breed                      String?
  age                        String?
  sex                        String?
  weight                     String?
  individualId               String?
  purpose                    String?
  sanitaryCondition          String? @db.Text
  lineage                    String?
  isPregnant                 Boolean?
  specialSkills              String?
  gtaDocument                String?
  breedRegistryDocument      String?

  // Furniture Specific Fields
  furnitureType              String?
  material                   String?
  style                      String?
  dimensions                 String?
  pieceCount                 Int?

  // Jewelry Specific Fields
  jewelryType                String?
  metal                      String?
  gemstones                  String?
  totalWeight                String?
  jewelrySize                String?
  authenticityCertificate    String?

  // Artwork & Antiques Specific Fields
  workType                   String?
  artist                     String?
  period                     String?
  technique                  String?
  provenance                 String? @db.Text

  // Vessel Specific Fields
  boatType                   String?
  boatLength                 String?
  hullMaterial               String?
  onboardEquipment           String? @db.Text

  // Foodstuffs Specific Fields
  productName                String?
  quantity                   String?
  packagingType              String?
  expirationDate             DateTime?
  storageConditions          String?

  // Precious Metals/Stones Specific Fields
  preciousMetalType          String?
  purity                     String?

  // Forestry Goods Specific Fields
  forestGoodsType            String?
  volumeOrQuantity           String?
  species                    String?
  dofNumber                  String?

  @@index([tenantId])
}

/// Status of an individual asset.
enum AssetStatus {
  /// The asset is being registered and is not ready to be used.
  CADASTRO
  /// The asset is available in the inventory to be added to a lot.
  DISPONIVEL
  /// The asset is already part of a lot.
  LOTEADO
  /// The asset has been sold (as part of a lot).
  VENDIDO
  /// The asset has been removed from the inventory (e.g., returned to the consignor).
  REMOVIDO
  /// The asset is no longer active, but the record is kept.
  INATIVADO
}
// /prisma/models/AssetsOnLots.prisma

model AssetsOnLots {
  lot      Lot    @relation(fields: [lotId], references: [id])
  lotId    String
  asset    Asset  @relation(fields: [assetId], references: [id])
  assetId  String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([lotId, assetId])
}


model Auction {
  id                            String                @id @default(cuid())
  publicId                      String?               @unique
  slug                          String?               @unique
  title                         String
  description                   String?               @db.Text
  status                        AuctionStatus         @default(RASCUNHO)
  auctionDate                   DateTime?             @default(now())
  endDate                       DateTime?
  totalLots                     Int                   @default(0)
  visits                        Int                   @default(0)
  initialOffer                  Decimal?
  isFeaturedOnMarketplace       Boolean               @default(false)
  marketplaceAnnouncementTitle  String?               @db.Text
  totalHabilitatedUsers         Int?                  @default(0)
  isFavorite                    Boolean?              @default(false)
  dataAiHint                    String?
  documentsUrl                  String?               @db.Text
  evaluationReportUrl           String?               @db.Text
  auctionCertificateUrl         String?               @db.Text
  sellingBranch                 String?               @db.Text
  automaticBiddingEnabled       Boolean               @default(false)
  silentBiddingEnabled          Boolean               @default(false)
  allowMultipleBidsPerUser      Boolean               @default(true)
  allowInstallmentBids          Boolean               @default(true)
  softCloseEnabled              Boolean               @default(false)
  softCloseMinutes              Int                   @default(2)
  estimatedRevenue              Decimal?
  achievedRevenue               Decimal?
  additionalTriggers            Json?
  decrementAmount               Decimal?
  decrementIntervalSeconds      Int?
  floorPrice                    Decimal?
  createdAt                     DateTime              @default(now())
  updatedAt                     DateTime              @updatedAt
  lots                          Lot[]
  auctioneer                    Auctioneer?           @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  auctioneerId                  String?
  seller                        Seller?               @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId                      String?
  category                      LotCategory?          @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId                    String?
  tenant                        Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId                      String
  city                          City?                 @relation(fields: [cityId], references: [id], onDelete: SetNull)
  cityId                        String?
  state                         State?                @relation(fields: [stateId], references: [id], onDelete: SetNull)
  stateId                       String?
  zipCode                       String?
  latitude                      Float?
  longitude                     Float?
  onlineUrl                     String?               @db.Text
  address                       String?               @db.Text
  auctionType                   AuctionType?
  auctionMethod                 AuctionMethod?        @default(STANDARD)
  participation                 AuctionParticipation? @default(ONLINE)
  stages                        AuctionStage[]
  judicialProcessId             String?
  judicialProcess               JudicialProcess?      @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  habilitations                 AuctionHabilitation[]
  reviews                       Review[]
  questions                     LotQuestion[]
  courtId                       String?
  court                         Court?                @relation(map: "CourtAuctions", fields: [courtId], references: [id], onDelete: SetNull)
  districtId                    String?
  district                      JudicialDistrict?     @relation(map: "DistrictAuctions", fields: [districtId], references: [id], onDelete: SetNull)
  branchId                      String?
  branch                        JudicialBranch?       @relation(map: "BranchAuctions", fields: [branchId], references: [id], onDelete: SetNull)
  bids                          Bid[]
}

model AuctionHabilitation {
  userId      String
  auctionId   String
  habilitatedAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@id([userId, auctionId])
  @@index([auctionId])
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

model AuctionStage {
  id           String   @id @default(cuid())
  name         String
  startDate    DateTime @db.DateTime(0)
  endDate      DateTime @db.DateTime(0)
  initialPrice Decimal? @db.Decimal(15, 2)
  auctionId    String

  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@index([auctionId])
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  VENDA_DIRETA
}


model Auctioneer {
  id                   String    @id @default(cuid())
  publicId             String    @unique
  slug                 String    @unique
  name                 String
  registrationNumber   String?   @db.Text
  contactName          String?   @db.Text
  email                String?   @db.Text
  phone                String?   @db.Text
  address              String?   @db.Text
  city                 String?   @db.Text
  state                String?   @db.Text
  zipCode              String?   @db.Text
  website              String?   @db.Text
  logoUrl              String?   @db.Text
  logoMediaId          String?
  dataAiHintLogo       String?   @db.Text
  description          String?   @db.Text
  userId               String?   @unique
  user                 User?     @relation("UserAuctioneer", fields: [userId], references: [id], onDelete: SetNull)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  auctions             Auction[]
  lots                 Lot[]
  // Multi-Tenant
  tenant               Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId             String
}

/// Representa um lance feito por um usuário em um lote.
model Bid {
  id            String   @id @default(uuid())
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
  bidderDisplay String?

  // Relações
  lot       Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId String
  bidder    User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId  String

  // Multi-Tenant
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId String
}

model City {
  id        String    @id @default(cuid())
  name      String
  slug      String?
  ibgeCode  String?   @unique
  lotCount  Int?      @default(0)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  state     State     @relation(fields: [stateId], references: [id])
  stateId   String
  lots      Lot[]
  auctions  Auction[]

  @@unique([name, stateId])
}

model ContactMessage {
  id      String   @id @default(cuid())
  name    String
  email   String
  subject String?
  message String   @db.Text
  isRead  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Court {
  id                String              @id @default(cuid())
  name              String
  slug              String?             @unique
  stateUf           String?
  website           String?
  createdAt         DateTime?           @default(now())
  updatedAt         DateTime?           @updatedAt
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]           @relation(map: "CourtAuctions")
}

/// @Model {label: "Fonte de Dados de Relatório", icon: "database"}
model DataSource {
  id        String @id @default(cuid())
  name      String
  modelName String @unique
  fields    Json

  @@map("data_sources")
}


model DirectSaleOffer {
  id                   String                @id @default(cuid())
  publicId             String                @unique
  title                String
  description          String?               @db.Text
  offerType            DirectSaleOfferType
  price                Decimal?              @db.Decimal(15, 2)
  minimumOfferPrice    Decimal?              @db.Decimal(15, 2)
  status               DirectSaleOfferStatus @default(ACTIVE)
  sellerId             String
  seller               Seller                @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerName           String?
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  categoryId           String
  category             LotCategory           @relation(fields: [categoryId], references: [id])
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int                   @default(0)
  expiresAt            DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  tenant               Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId             String
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

model DocumentTemplate {
  id      String   @id @default(cuid())
  name    String   @unique
  type    DocumentTemplateType
  content String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

model DocumentType {
  id              String         @id @default(cuid())
  name            String   @unique
  description     String?
  isRequired      Boolean        @default(true)
  appliesTo       String // e.g., 'PHYSICAL,LEGAL'
  userDocuments   UserDocument[]
}

model InstallmentPayment {
  id                String        @id @default(cuid())
  userWinId         String
  installmentNumber Int
  amount            Decimal       @db.Decimal(15, 2)
  dueDate           DateTime
  status            PaymentStatus @default(PENDENTE)
  paymentDate       DateTime?
  paymentMethod     String?
  transactionId     String?
  userWin           UserWin       @relation(fields: [userWinId], references: [id], onDelete: Cascade)

  @@unique([userWinId, installmentNumber])
  @@index([userWinId])
  Lot Lot[]
}

model JudicialBranch {
  id                String              @id @default(cuid())
  name              String            @unique
  slug              String?             @unique
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime?           @default(now())
  updatedAt         DateTime?           @updatedAt
  district          JudicialDistrict?   @relation(fields: [districtId], references: [id])
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
  auctions          Auction[]           @relation(map: "BranchAuctions")
}

model JudicialDistrict {
  id                String            @id @default(cuid())
  name              String            @unique
  slug              String?           @unique
  courtId           String?
  stateId           String?
  zipCode           String?
  createdAt         DateTime?         @default(now())
  updatedAt         DateTime?         @updatedAt
  court             Court?            @relation(fields: [courtId], references: [id])
  state             State?            @relation(fields: [stateId], references: [id])
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]         @relation(map: "DistrictAuctions")
}

model JudicialParty {
  id             String           @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType

  process JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@index([processId])
}

model JudicialProcess {
  id                String  @id @default(cuid())
  publicId          String  @unique
  processNumber     String
  isElectronic      Boolean @default(true)
  courtId           String?
  districtId        String?
  branchId          String?
  sellerId          String?
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt
  tenantId          String
  assets            Asset[]
  auctions          Auction[] @relation(map: "AuctionToJudicialProcess")

  // Relations
  court             Court?            @relation(fields: [courtId], references: [id])
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch            JudicialBranch?   @relation(fields: [branchId], references: [id])
  seller            Seller?           @relation(fields: [sellerId], references: [id])
  tenant            Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  parties           JudicialParty[] // Back-relation added here

  @@unique([processNumber, tenantId])
}
/// Modelo para Lotes individuais dentro de um leilão.
model Lot {
  id                      String    @id @default(cuid())
  publicId                String?   @unique
  auctionId               String
  slug                    String?
  number                  String?
  title                   String
  description             String?   @db.Text
  price                   Decimal   @db.Decimal(15, 2)
  initialPrice            Decimal?  @db.Decimal(15, 2)
  secondInitialPrice      Decimal?  @db.Decimal(15, 2)
  bidIncrementStep        Decimal?  @db.Decimal(10, 2)
  evaluationValue         Decimal?  @db.Decimal(15, 2)
  status                  LotStatus @default(EM_BREVE)
  bidsCount               Int?      @default(0)
  views                   Int?      @default(0)
  isFeatured              Boolean?  @default(false)
  isExclusive             Boolean?  @default(false)
  discountPercentage      Int?
  additionalTriggers      Json?
  imageUrl                String?   @db.Text
  imageMediaId            String?
  galleryImageUrls        Json?
  mediaItemIds            Json?
  type                    String
  categoryId              String?
  subcategoryId           String?
  auctionName             String?
  sellerId                String?
  sellerName              String?
  auctioneerId            String?
  cityId                  String?
  stateId                 String?
  cityName                String?
  stateUf                 String?
  latitude                Decimal?
  longitude               Decimal?
  mapAddress              String?
  mapEmbedUrl             String?   @db.Text
  mapStaticImageUrl       String?   @db.Text
  endDate                 DateTime?
  auctionDate             DateTime?
  lotSpecificAuctionDate  DateTime?
  secondAuctionDate       DateTime?
  condition               String?
  dataAiHint              String?
  winnerId                String?
  winningBidTermUrl       String?
  allowInstallmentBids    Boolean?  @default(false)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  tenantId                String

  // Relacionamentos
  tenant          Tenant              @relation(fields: [tenantId], references: [id])
  auction         Auction             @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category        LotCategory?        @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory?        @relation(fields: [subcategoryId], references: [id])
  seller          Seller?             @relation(fields: [sellerId], references: [id])
  auctioneer      Auctioneer?         @relation(fields: [auctioneerId], references: [id])
  city            City?               @relation(fields: [cityId], references: [id])
  state           State?              @relation(fields: [stateId], references: [id])
  winner          User?               @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  assets          AssetsOnLots[]
  bids            Bid[]
  reviews         Review[]
  questions       LotQuestion[]
  maxBids         UserLotMaxBid[]
  userWins        UserWin[]
  originalLotId   String?             @unique @map("original_lot_id")
  originalLot     Lot?                @relation("Relist", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot     Lot?                @relation("Relist")
  isRelisted      Boolean             @default(false)
  relistCount     Int                 @default(0)
  installments    InstallmentPayment[]
  stageDetails    Json?

  @@unique([auctionId, number])
}

// prisma/models/LotCategory.prisma
model LotCategory {
  id              String        @id @default(cuid())
  name            String
  slug            String        @unique
  description     String?       @db.Text
  hasSubcategories Boolean?      @default(false)
  logoUrl         String?       @db.Text
  logoMediaId     String?       @db.Text
  dataAiHintLogo  String?       @db.Text
  coverImageUrl   String?       @db.Text
  coverImageMediaId String?     @db.Text
  dataAiHintCover String?       @db.Text
  megaMenuImageUrl String?      @db.Text
  megaMenuImageMediaId String?  @db.Text
  dataAiHintMegaMenu String?    @db.Text
  createdAt       DateTime?     @default(now())
  updatedAt       DateTime?     @updatedAt
  
  // Relations
  subcategories   Subcategory[]
  auctions        Auction[]
  lots            Lot[]
  assets          Asset[]

  @@unique([name])
  DirectSaleOffer DirectSaleOffer[]
}


model LotQuestion {
  id                      String    @id @default(cuid())
  lot                     Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId                   String
  auction                 Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId               String
  user                    User      @relation(fields: [userId], references: [id])
  userId                  String
  userDisplayName         String
  questionText            String    @db.Text
  answerText              String?   @db.Text
  answeredByUserId        String?
  answeredByUserDisplayName String?
  answeredAt              DateTime?
  isPublic                Boolean   @default(true)
  createdAt               DateTime  @default(now())

  @@index([lotId])
  @@index([userId])
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
  RETIRADO
}

model MediaItem {
  id               String    @id @default(cuid())
  fileName         String
  storagePath      String
  title            String?
  altText          String?
  caption          String?
  description      String?   @db.Text
  mimeType         String
  sizeBytes        Int?
  urlOriginal      String
  urlThumbnail     String?
  urlMedium        String?
  urlLarge         String?
  linkedLotIds     Json?
  judicialProcessId String?
  dataAiHint       String?
  uploadedAt       DateTime  @default(now())
  uploadedByUserId String?   // Made optional to work with onDelete: SetNull
  uploadedBy       User?     @relation(fields: [uploadedByUserId], references: [id], onDelete: SetNull)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  tenantId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

model PlatformSettings {
  id                           String               @id @default("global")
  siteTitle                    String?
  siteTagline                  String?
  logoUrl                      String?
  faviconUrl                   String?
  galleryImageBasePath         String?
  storageProvider              String?
  firebaseStorageBucket        String?
  activeThemeName              String?
  themes                       Json?
  platformPublicIdMasks        Json?
  homepageSections             Json?
  mentalTriggerSettings        Json?
  sectionBadgeVisibility       Json?
  mapSettings                  Json?
  searchPaginationType         SearchPaginationType @default(loadMore)
  searchItemsPerPage           Int                  @default(12)
  searchLoadMoreCount          Int                  @default(12)
  showCountdownOnLotDetail     Boolean              @default(true)
  showCountdownOnCards         Boolean              @default(true)
  showRelatedLotsOnLotDetail   Boolean              @default(true)
  relatedLotsCount             Int                  @default(5)
  defaultUrgencyTimerHours     Int?
  variableIncrementTable       Json?
  biddingSettings              Json?
  paymentGatewaySettings       Json?
  defaultListItemsPerPage      Int                  @default(10)
  updatedAt                    DateTime?            @updatedAt
  tenantId                     String               @unique
  tenant                       Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  isSetupComplete                   Boolean                     @default(false)
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String?
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([lotId])
}

model Role {
  id              String         @id @default(cuid())
  name            String         @unique
  nameNormalized  String         @unique
  description     String?
  permissions     Json?
  users           UsersOnRoles[]
}

enum SearchPaginationType {
  loadMore
  numberedPages
}


model Seller {
  id                   String              @id @default(cuid())
  publicId             String              @unique
  slug                 String              @unique
  name                 String              @unique
  contactName          String?             @db.Text
  email                String?             @db.Text
  phone                String?             @db.Text
  address              String?             @db.Text
  city                 String?             @db.Text
  state                String?             @db.Text
  zipCode              String?             @db.Text
  website              String?             @db.Text
  logoUrl              String?             @db.Text
  logoMediaId          String?
  dataAiHintLogo       String?             @db.Text
  description          String?             @db.Text
  userId               String?             @unique
  user                 User?               @relation("UserSeller", fields: [userId], references: [id], onDelete: SetNull)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  isJudicial           Boolean             @default(false)
  judicialBranchId     String?             @unique
  judicialBranch       JudicialBranch?     @relation(fields: [judicialBranchId], references: [id])
  // Relacionamentos
  auctions             Auction[]
  lots                 Lot[]
  assets               Asset[]
  directSaleOffers     DirectSaleOffer[]
  judicialProcesses    JudicialProcess[]
  // Multi-Tenant
  tenant               Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId             String
}

model State {
  id                String             @id @default(cuid())
  name              String
  uf                String             @unique
  slug              String?            @unique
  cityCount         Int?               @default(0)
  createdAt         DateTime?          @default(now())
  updatedAt         DateTime?          @updatedAt
  cities            City[]
  judicialDistricts JudicialDistrict[]
  auctions          Auction[]
  lots              Lot[]
}

model Subcategory {
  id                 String      @id @default(cuid())
  name               String
  slug               String
  parentCategoryId   String
  description        String?
  displayOrder       Int         @default(0)
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots               Lot[]
  assets             Asset[]

  @@unique([name, parentCategoryId])
}
/// Define um Tenant (inquilino) na plataforma. Cada Tenant representa um leiloeiro ou cliente.
model Tenant {
  id        String   @id @default(uuid())
  name      String
  subdomain String   @unique
  domain    String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações inversas
  users             UsersOnTenants[]
  auctions          Auction[]
  lots              Lot[]
  assets            Asset[]
  sellers           Seller[]
  auctioneers       Auctioneer[]
  judicialProcesses JudicialProcess[]
  directSaleOffers  DirectSaleOffer[]
  notifications     Notification[]
  bids              Bid[]
  reports           Report[]
  platformSettings  PlatformSettings?
}

/// Modelo para Usuários. Armazena informações de perfil, autenticação e
/// status de habilitação. É um modelo global, não associado a um tenant específico.
model User {
  id                      String                @id @default(cuid())
  email                   String                @unique
  password                String?               @db.Text
  fullName                String?               @db.Text
  habilitationStatus      UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType             AccountType           @default(PHYSICAL)
  avatarUrl               String?               @db.Text
  dataAiHint              String?               @db.Text
  badges                  Json?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  cpf                     String?               @db.Text
  rgNumber                String?               @db.Text
  rgIssuer                String?               @db.Text
  rgIssueDate             DateTime?
  rgState                 String?               @db.Text
  dateOfBirth             DateTime?
  cellPhone               String?               @db.Text
  homePhone               String?               @db.Text
  gender                  String?               @db.Text
  profession              String?               @db.Text
  nationality             String?               @db.Text
  maritalStatus           String?               @db.Text
  propertyRegime          String?               @db.Text
  spouseName              String?               @db.Text
  spouseCpf               String?               @db.Text
  zipCode                 String?               @db.Text
  street                  String?               @db.Text
  number                  String?               @db.Text
  complement              String?               @db.Text
  neighborhood            String?               @db.Text
  city                    String?               @db.Text
  state                   String?               @db.Text
  optInMarketing          Boolean?              @default(false)
  razaoSocial             String?               @db.Text
  cnpj                    String?               @db.Text
  inscricaoEstadual       String?               @db.Text
  website                 String?               @db.Text
  responsibleName         String?               @db.Text
  responsibleCpf          String?               @db.Text

  // Relations
  notifications           Notification[]
  mediaItems              MediaItem[]
  documents               UserDocument[]
  bids                    Bid[]
  maxBids                 UserLotMaxBid[]
  sellerProfile           Seller?               @relation("UserSeller")
  auctioneerProfile       Auctioneer?           @relation("UserAuctioneer")
  roles                   UsersOnRoles[]
  tenants                 UsersOnTenants[]
  wins                    UserWin[]
  lotsWon                 Lot[]                 @relation("LotWinner")
  auctionHabilitations    AuctionHabilitation[]
  lotQuestions            LotQuestion[]
  reviews                 Review[]
}

model UserDocument {
  id              String             @id @default(cuid())
  userId          String
  documentTypeId  String
  status          UserDocumentStatus @default(PENDING_ANALYSIS)
  fileUrl         String
  fileName        String?
  rejectionReason String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType DocumentType @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
  @@index([userId])
}


enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  REJEITADO
  BLOCKED
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
  @@index([lotId])
}

model UserWin {
  id                String               @id @default(cuid())
  lotId             String               @unique
  userId            String
  winningBidAmount  Decimal              @db.Decimal(15, 2)
  winDate           DateTime             @default(now())
  paymentStatus     PaymentStatus        @default(PENDENTE)
  invoiceUrl        String?
  installments      InstallmentPayment[]
  lot               Lot                  @relation(fields: [lotId], references: [id])
  user              User                 @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UsersOnRoles {
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([roleId])
}

model UsersOnTenants {
  userId     String
  tenantId   String
  assignedAt DateTime @default(now())
  assignedBy String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@id([userId, tenantId])
  @@index([tenantId])
}

model VehicleMake {
  id     String         @id @default(cuid())
  name   String         @unique
  slug   String         @unique
  models VehicleModel[]
}

model VehicleModel {
  id     String      @id @default(cuid())
  name   String
  slug   String
  makeId String
  make   VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)

  @@unique([makeId, name])
  @@index([slug])
}


/// @model
/// @description Armazena tokens temporários para redefinição de senha.
model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
}


model Report {
  id          String   @id @default(uuid())
  name        String
  description String?
  definition  Json
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("reports")
}
