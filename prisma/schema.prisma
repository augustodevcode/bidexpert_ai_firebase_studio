// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ==============================================================================
// ENUMS
// ==============================================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum StorageProviderType {
  local
  firebase
}

enum SearchPaginationType {
  loadMore
  numberedPages
}


// ==============================================================================
// AUTHENTICATION & USERS
// ==============================================================================

model User {
  id                   String                 @id @default(cuid())
  email                String                 @unique
  password             String
  fullName             String?
  roleId               String?
  role                 Role?                  @relation(fields: [roleId], references: [id], onDelete: SetNull)
  habilitationStatus   UserHabilitationStatus? @default(PENDING_DOCUMENTS)
  accountType          AccountType?           @default(PHYSICAL)
  cpf                  String?                @unique
  rgNumber             String?
  rgIssuer             String?
  rgIssueDate          DateTime?
  rgState              String?
  dateOfBirth          DateTime?
  cellPhone            String?
  homePhone            String?
  gender               String?
  profession           String?
  nationality          String?
  maritalStatus        String?
  propertyRegime       String?
  spouseName           String?
  spouseCpf            String?
  zipCode              String?
  street               String?
  number               String?
  complement           String?
  neighborhood         String?
  city                 String?
  state                 String?                @default("ACTIVE")
  optInMarketing       Boolean?               @default(false)
  avatarUrl            String?
  dataAiHint           String?
  sellerProfileId      String?                @unique
  sellerProfile        Seller?
  auctioneerProfileId  String?                @unique
  auctioneerProfile    Auctioneer?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt

  // Relationships
  documents            UserDocument[]
  bids                 Bid[]
  wins                 UserWin[]
  notifications        Notification[]
  reviews              Review[]
  maxBids              UserLotMaxBid[]
  blogPosts            BlogPost[]
  badges               String?
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  roles       Role[]
}

model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  users           User[]
  permissions     Permission[]
}

model UserDocument {
  id              String             @id @default(cuid())
  userId          String
  documentTypeId  String
  fileUrl         String?            @db.Text
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  rejectionReason String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  // Relationships
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType DocumentType @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id           String         @id @default(cuid())
  name         String         @unique
  description  String?
  isRequired   Boolean        @default(true)
  appliesTo    String?        // e.g., "PHYSICAL,LEGAL"
  allowedFormats String?      // e.g., "pdf,jpg,png"
  displayOrder Int            @default(0)
  userDocs     UserDocument[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

// ==============================================================================
// CORE AUCTION MODELS
// ==============================================================================

model Auction {
  id                             String        @id @default(cuid())
  publicId                       String        @unique
  title                          String
  fullTitle                      String?
  description                    String?       @db.Text
  status                         AuctionStatus @default(RASCUNHO)
  auctionType                    AuctionType?
  auctionDate                    DateTime
  endDate                        DateTime?
  visits                         Int?          @default(0)
  totalLots                      Int?          @default(0)
  initialOffer                   Float?
  isFavorite                     Boolean?
  currentBid                     Float?
  bidsCount                      Int?          @default(0)
  sellingBranch                  String?
  vehicleLocation                String?
  documentsUrl                   String?       @db.Text
  evaluationReportUrl            String?       @db.Text
  auctionCertificateUrl          String?       @db.Text
  automaticBiddingEnabled        Boolean?      @default(false)
  silentBiddingEnabled           Boolean?      @default(false)
  allowMultipleBidsPerUser       Boolean?      @default(true)
  allowInstallmentBids           Boolean?      @default(false)
  softCloseEnabled               Boolean?      @default(false)
  softCloseMinutes               Int?          @default(2)
  estimatedRevenue               Float?
  achievedRevenue                Float?
  totalHabilitatedUsers          Int?
  isFeaturedOnMarketplace        Boolean?      @default(false)
  marketplaceAnnouncementTitle   String?
  dataAiHint                     String?
  additionalTriggers             String?
  auctionStages                  Json?
  decrementAmount                Float?
  decrementIntervalSeconds       Int?
  floorPrice                     Float?
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt
  city                           String?
  state                          String?

  // Foreign Keys
  categoryId                     String?
  auctioneerId                   String
  sellerId                       String?
  judicialProcessId              String?       @unique
  imageMediaId                   String?       @unique

  // Relationships
  lots                           Lot[]
  bids                           Bid[]
  category                       LotCategory?           @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  auctioneer                     Auctioneer             @relation(fields: [auctioneerId], references: [id])
  seller                         Seller?                @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  judicialProcess                JudicialProcess?       @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  image                          MediaItem?             @relation("AuctionImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
}

model Lot {
  id                             String        @id @default(cuid())
  publicId                       String        @unique
  number                         String?
  title                          String
  description                    String?       @db.Text
  price                          Float
  initialPrice                   Float?
  secondAuctionDate              DateTime?
  secondInitialPrice             Float?
  bidIncrementStep               Float?
  status                         LotStatus
  endDate                        DateTime?
  lotSpecificAuctionDate         DateTime?
  condition                      String?
  dataAiHint                     String?
  isFeatured                     Boolean?      @default(false)
  isExclusive                    Boolean?      @default(false)
  discountPercentage             Float?
  additionalTriggers             String?
  views                          Int           @default(0)
  bidsCount                      Int           @default(0)
  latitude                       Float?
  longitude                      Float?
  mapAddress                     String?
  mapEmbedUrl                    String?       @db.Text
  mapStaticImageUrl              String?       @db.Text
  winningBidTermUrl              String?       @db.Text
  judicialProcessNumber          String?
  courtDistrict                  String?
  courtName                      String?
  publicProcessUrl               String?
  propertyRegistrationNumber     String?
  propertyLiens                  String?       @db.Text
  knownDebts                     String?       @db.Text
  additionalDocumentsInfo        String?       @db.Text
  reservePrice                   Float?
  evaluationValue                Float?
  debtAmount                     Float?
  itbiValue                      Float?
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt

  // Foreign Keys
  auctionId                      String
  categoryId                     String?
  subcategoryId                  String?
  stateId                        String?
  cityId                         String?
  sellerId                       String?
  auctioneerId                   String?
  imageMediaId                   String?       @unique

  // Relationships
  auction        Auction           @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category       LotCategory?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory    Subcategory?      @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  state          StateInfo?        @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city           CityInfo?         @relation(fields: [cityId], references: [id], onDelete: SetNull)
  image          MediaItem?        @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  bens           Bem[]
  bids           Bid[]
  wins           UserWin[]
  reviews        Review[]
  questions      LotQuestion[]
  maxBids        UserLotMaxBid[]
}

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())

  // Relationships
  lot     Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user    User @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String        @id @default(cuid())
  userId           String
  lotId            String        @unique // A lot can only be won once
  winningBidAmount Float
  winDate          DateTime      @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}


// ==============================================================================
// PROFILE & ENTITY MODELS
// ==============================================================================

model Seller {
  id                         String             @id @default(cuid())
  publicId                   String             @unique
  name                       String
  slug                       String             @unique
  contactName                String?
  email                      String?            @unique
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  logoUrl                    String?
  dataAiHintLogo             String?
  description                String?            @db.Text
  isJudicial                 Boolean            @default(false)
  createdAt                  DateTime           @default(now())
  updatedAt                  DateTime           @updatedAt
  
  // Foreign Keys
  userId                     String?            @unique
  judicialBranchId           String?            @unique
  
  // Relationships
  user                       User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  auctions                   Auction[]
  bens                       Bem[]
  judicialProcesses          JudicialProcess[]
  directSaleOffers           DirectSaleOffer[]
  judicialBranch             JudicialBranch?    @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  blogPosts                  BlogPost[]
}

model Auctioneer {
  id                   String     @id @default(cuid())
  publicId             String     @unique
  name                 String
  slug                 String     @unique
  registrationNumber   String?
  contactName          String?
  email                String?    @unique
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  dataAiHintLogo       String?
  description          String?    @db.Text
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  
  // Foreign Keys
  userId               String?    @unique
  
  // Relationships
  user                 User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  auctions             Auction[]
}


// ==============================================================================
// JUDICIAL ENTITY MODELS
// ==============================================================================

model Court {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  stateUf   String
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Foreign Keys
  stateId   String?
  
  // Relationships
  districts JudicialDistrict[]
  state     StateInfo?         @relation(fields: [stateId], references: [id])
}

model JudicialDistrict {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Foreign Keys
  courtId   String
  stateId   String
  
  // Relationships
  court     Court            @relation(fields: [courtId], references: [id])
  state     StateInfo        @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
}

model JudicialBranch {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  contactName String?
  phone       String?
  email       String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Foreign Keys
  districtId String

  // Relationships
  district          JudicialDistrict   @relation(fields: [districtId], references: [id])
  processes         JudicialProcess[]
  seller            Seller?
}

model JudicialProcess {
  id             String      @id @default(cuid())
  publicId       String      @unique
  processNumber  String      @unique
  isElectronic   Boolean     @default(true)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  // Foreign Keys
  courtId        String
  districtId     String
  branchId       String
  sellerId       String?
  
  // Relationships
  court          Court            @relation(fields: [courtId], references: [id])
  district       JudicialDistrict @relation(fields: [districtId], references: [id])
  branch         JudicialBranch   @relation(fields: [branchId], references: [id])
  seller         Seller?          @relation(fields: [sellerId], references: [id])
  parties        ProcessParty[]
  bens           Bem[]
  auction        Auction?
}

model ProcessParty {
  id             String           @id @default(cuid())
  processId      String
  name           String
  partyType      ProcessPartyType
  documentNumber String?

  // Relationships
  process JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  
  @@unique([processId, name, partyType])
}


// ==============================================================================
// ITEM & CATEGORY MODELS
// ==============================================================================

model LotCategory {
  id                   String            @id @default(cuid())
  name                 String            @unique
  slug                 String            @unique
  description          String?
  itemCount            Int?              @default(0)
  hasSubcategories     Boolean?          @default(false)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  // Foreign Keys
  logoMediaId          String?           @unique
  coverImageMediaId    String?           @unique
  megaMenuImageMediaId String?           @unique

  // Relationships
  logo                 MediaItem?        @relation("CategoryLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  coverImage           MediaItem?        @relation("CategoryCover", fields: [coverImageMediaId], references: [id], onDelete: SetNull)
  megaMenuImage        MediaItem?        @relation("CategoryMegaMenu", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull)
  lots                 Lot[]
  bens                 Bem[]
  directSaleOffers     DirectSaleOffer[]
  subcategories        Subcategory[]
  auctions             Auction[]
}

model Subcategory {
  id                 String       @id @default(cuid())
  name               String
  slug               String       @unique
  description        String?
  itemCount          Int?         @default(0)
  displayOrder       Int          @default(0)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  // Foreign Keys
  parentCategoryId   String
  iconMediaId        String?      @unique

  // Relationships
  parentCategory     LotCategory  @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots               Lot[]
  bens               Bem[]
  icon               MediaItem?   @relation("SubcategoryIcon", fields: [iconMediaId], references: [id], onDelete: SetNull)
}

model Bem {
  id              String   @id @default(cuid())
  publicId        String   @unique
  title           String
  description     String?  @db.Text
  status          BemStatus @default(DISPONIVEL)
  evaluationValue Float?
  locationCity    String?
  locationState   String?
  address         String?
  latitude        Float?
  longitude       Float?
  dataAiHint      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Vehicle specific fields
  plate                String?
  make                 String?
  model                String?
  version              String?
  year                 Int?
  modelYear            Int?
  mileage              Int?
  color                String?
  fuelType             String?
  transmissionType     String?
  bodyType             String?
  vin                  String?
  renavam              String?
  enginePower          String?
  numberOfDoors        Int?
  vehicleOptions       String?
  detranStatus         String?
  debts                String?
  runningCondition     String?
  bodyCondition        String?
  tiresCondition        String?
  hasKey               Boolean?

  // Real estate specific fields
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?       @db.Text
  infrastructure             String?       @db.Text
  condoDetails               String?       @db.Text
  improvements               String?       @db.Text
  topography                 String?
  liensAndEncumbrances       String?       @db.Text
  propertyDebts              String?       @db.Text
  unregisteredRecords        String?       @db.Text
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  
  // Electronics specific fields
  brand                String?
  serialNumber         String?
  itemCondition        String?
  specifications       String? @db.Text
  includedAccessories  String?
  batteryCondition     String?
  hasInvoice           Boolean?
  hasWarranty          Boolean?
  repairHistory        String?

  // Appliance specific fields
  applianceCapacity    String?
  voltage              String?
  applianceType        String?
  additionalFunctions  String?

  // Machinery specific fields
  hoursUsed                Int?
  engineType               String?
  capacityOrPower          String?
  maintenanceHistory       String?       @db.Text
  installationLocation     String?
  compliesWithNR           String?
  operatingLicenses        String?
  
  // Livestock specific fields
  breed                 String?
  age                   String?
  sex                   String?
  weight                String?
  individualId          String?
  purpose               String?
  sanitaryCondition     String?
  lineage               String?
  isPregnant            Boolean?
  specialSkills         String?
  gtaDocument           String?
  breedRegistryDocument String?
  
  // Furniture specific fields
  furnitureType String?
  material      String?
  style         String?
  dimensions    String?
  pieceCount    Int?
  
  // Jewelry specific fields
  jewelryType             String?
  metal                   String?
  gemstones               String?
  totalWeight             String?
  jewelrySize             String?
  authenticityCertificate String?
  
  // Art specific fields
  workType   String?
  artist     String?
  period     String?
  technique  String?
  provenance String?  @db.Text
  
  // Boat specific fields
  boatType         String?
  boatLength       String?
  hullMaterial     String?
  onboardEquipment String? @db.Text
  
  // Food specific fields
  productName        String?
  quantity           String?
  packagingType      String?
  expirationDate     DateTime?
  storageConditions  String?
  
  // Precious Metals specific fields
  preciousMetalType String?
  purity            String?
  
  // Forest Goods specific fields
  forestGoodsType  String?
  volumeOrQuantity String?
  species          String?
  dofNumber        String?

  // Foreign Keys
  categoryId         String
  subcategoryId      String?
  judicialProcessId  String?
  sellerId           String?
  imageMediaId       String?           @unique

  // Relationships
  category        LotCategory      @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory?     @relation(fields: [subcategoryId], references: [id])
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller          Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  image           MediaItem?       @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  lots            Lot[]
}


// ==============================================================================
// GEOGRAPHIC & GENERIC MODELS
// ==============================================================================

model StateInfo {
  id        String   @id @default(cuid())
  name      String   @unique
  uf        String   @unique
  slug      String   @unique
  cityCount Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  cities    CityInfo[]
  courts    Court[]
  districts JudicialDistrict[]
}

model CityInfo {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  ibgeCode  String?
  lotCount  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Foreign Keys
  stateId   String
  
  // Relationships
  state StateInfo @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots  Lot[]
}


// ==============================================================================
// CONTENT & MISC MODELS
// ==============================================================================

model MediaItem {
  id                   String        @id @default(cuid())
  fileName             String
  storagePath          String?       @unique
  title                String?
  altText              String?
  caption              String?
  description          String?
  mimeType             String
  sizeBytes            Int
  dimensions           Json?
  urlOriginal          String        @db.Text
  urlThumbnail         String?       @db.Text
  urlMedium            String?       @db.Text
  urlLarge             String?       @db.Text
  uploadedBy           String?
  uploadedAt           DateTime      @default(now())
  dataAiHint           String?
  
  // Relationships
  auctionAsImage           Auction?          @relation("AuctionImage")
  lotAsImage               Lot?              @relation("LotImage")
  bemAsImage               Bem?              @relation("BemImage")
  lotCategoryAsLogo        LotCategory?      @relation("CategoryLogo")
  lotCategoryAsCover       LotCategory?      @relation("CategoryCover")
  lotCategoryAsMegaMenu    LotCategory?      @relation("CategoryMegaMenu")
  subcategoryAsIcon        Subcategory?      @relation("SubcategoryIcon")
  directSaleOfferAsImage   DirectSaleOffer?  @relation("DirectSaleOfferImage")
}

model DirectSaleOffer {
  id                       String                @id @default(cuid())
  publicId                 String                @unique
  title                    String
  description              String                @db.Text
  offerType                DirectSaleOfferType
  status                   DirectSaleOfferStatus
  price                    Float?
  minimumOfferPrice        Float?
  locationCity             String?
  locationState            String?
  views                    Int                   @default(0)
  proposalsCount           Int                   @default(0)
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt
  expiresAt                DateTime?

  // Foreign Keys
  categoryId               String
  sellerId                 String
  imageMediaId             String?               @unique
  
  // Relationships
  seller                   Seller                @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  category                 LotCategory           @relation(fields: [categoryId], references: [id])
  image                    MediaItem?            @relation("DirectSaleOfferImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   @db.Text
  authorId    String
  publishedAt DateTime @default(now())
  tags        String?

  // Relationships
  author User @relation(fields: [authorId], references: [id])
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Review {
    id              String @id @default(cuid())
    userId          String
    lotId           String
    auctionId       String
    userDisplayName String
    rating          Int    @default(0)
    comment         String @db.Text
    createdAt       DateTime @default(now())

    // Relationships
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model LotQuestion {
    id                        String @id @default(cuid())
    userId                    String
    lotId                     String
    auctionId                 String
    userDisplayName           String
    questionText              String @db.Text
    isPublic                  Boolean @default(true)
    createdAt                 DateTime @default(now())
    answerText                String?  @db.Text
    answeredAt                DateTime?
    answeredByUserId          String?
    answeredByUserDisplayName String?

    // Relationships
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model UserLotMaxBid {
    id        String   @id @default(cuid())
    userId    String
    lotId     String
    maxAmount Float
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    // Relationships
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)

    @@unique([userId, lotId])
}

model PlatformSettings {
  id                           String               @id @default("global")
  siteTitle                    String
  siteTagline                  String?
  galleryImageBasePath         String?
  storageProvider              StorageProviderType? @default(local)
  firebaseStorageBucket        String?
  activeThemeName              String?
  themes                       Json?
  platformPublicIdMasks        Json?
  homepageSections             Json?
  mentalTriggerSettings        Json?
  sectionBadgeVisibility       Json?
  mapSettings                  Json?
  biddingSettings              Json?
  searchPaginationType         SearchPaginationType? @default(loadMore)
  searchItemsPerPage           Int?                 @default(12)
  searchLoadMoreCount          Int?                 @default(12)
  showCountdownOnLotDetail     Boolean?             @default(true)
  showCountdownOnCards         Boolean?             @default(true)
  showRelatedLotsOnLotDetail   Boolean?             @default(true)
  relatedLotsCount             Int?                 @default(5)
  defaultUrgencyTimerHours     Int?                 @default(24)
  variableIncrementTable       Json?
  defaultListItemsPerPage      Int?                 @default(10)
  updatedAt                    DateTime             @updatedAt
}
