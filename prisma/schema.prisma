// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// ===================================
// Authentication & Authorization
// ===================================

model User {
  id                       String                 @id @default(cuid())
  email                    String                 @unique
  fullName                 String
  password                 String
  roleId                   String?
  habilitationStatus       UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType              String?                @default("PHYSICAL")
  cpf                      String?                @unique
  rgNumber                 String?
  rgIssuer                 String?
  rgIssueDate              DateTime?
  rgState                  String?
  dateOfBirth              DateTime?
  cellPhone                String?
  homePhone                String?
  gender                   String?
  profession               String?
  nationality              String?
  maritalStatus            String?
  propertyRegime           String?
  spouseName               String?
  spouseCpf                String?
  zipCode                  String?
  street                   String?
  number                   String?
  complement               String?
  neighborhood             String?
  city                     String?
  state                    String?
  status                   String?                @default("ACTIVE")
  optInMarketing           Boolean?               @default(false)
  avatarUrl                String?
  dataAiHint               String?
  activeBids               Int?                   @default(0)
  auctionsWon              Int?                   @default(0)
  itemsSold                Int?                   @default(0)
  sellerId                 String?                @unique
  razaoSocial              String?
  cnpj                     String?                @unique
  inscricaoEstadual        String?
  website                  String?
  badges                   Json?
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt

  // Relationships
  role                     Role?                  @relation(fields: [roleId], references: [id], onDelete: SetNull)
  documents                UserDocument[]
  notifications            Notification[]
  bids                     Bid[]
  wins                     UserWin[]
  maxBids                  UserLotMaxBid[]
  reviews                  Review[]
  questions                LotQuestion[]          @relation("QuestionAskedBy")
  answers                  LotQuestion[]          @relation("QuestionAnsweredBy")
  uploadedMedia            MediaItem[]
  sellerProfile            Seller?
  auctioneerProfile        Auctioneer?
  authoredBlogPosts        BlogPost[]
}

model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?      @db.Text
  permissions     Permission[]
  users           User[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?  @db.Text
  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// ===================================
// Habilitation
// ===================================

model UserDocument {
  id              String             @id @default(cuid())
  userId          String
  documentTypeId  String
  fileUrl         String
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  rejectionReason String?            @db.Text
  uploadDate      DateTime           @default(now())
  analysisDate    DateTime?
  analystId       String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  // Relationships
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType DocumentType @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id             String         @id @default(cuid())
  name           String         @unique
  description    String?        @db.Text
  isRequired     Boolean        @default(true)
  appliesTo      String?        // e.g., "PHYSICAL,LEGAL"
  allowedFormats String?        // e.g., "pdf,jpg,png"
  displayOrder   Int            @default(0)
  userDocuments  UserDocument[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

// ===================================
// Auction & Lot Core
// ===================================

model Auction {
  id                             String        @id @default(cuid())
  publicId                       String        @unique
  title                          String
  fullTitle                      String?       @db.Text
  description                    String?       @db.Text
  status                         AuctionStatus @default(RASCUNHO)
  auctionType                    String?
  categoryId                     String?
  auctioneerId                   String
  sellerId                       String?
  judicialProcessId              String?       @unique
  imageMediaId                   String?       @unique
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json?
  city                           String?
  state                          String?
  imageUrl                       String?
  dataAiHint                     String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  visits                         Int           @default(0)
  totalLots                      Int           @default(0)
  initialOffer                   Float?
  bidsCount                      Int           @default(0)
  sellingBranch                  String?
  vehicleLocation                String?
  automaticBiddingEnabled        Boolean?      @default(false)
  silentBiddingEnabled           Boolean?      @default(false)
  allowMultipleBidsPerUser       Boolean?      @default(true)
  allowInstallmentBids           Boolean?      @default(false)
  softCloseEnabled               Boolean?      @default(false)
  softCloseMinutes               Int?          @default(2)
  estimatedRevenue               Float?
  achievedRevenue                Float?        @default(0)
  totalHabilitatedUsers          Int?          @default(0)
  isFeaturedOnMarketplace        Boolean?      @default(false)
  marketplaceAnnouncementTitle   String?
  additionalTriggers             String?
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt

  // Relationships
  lots             Lot[]
  bids             Bid[]
  category         LotCategory?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  auctioneer       Auctioneer      @relation(fields: [auctioneerId], references: [id])
  seller           Seller?         @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  judicialProcess  JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  image            MediaItem?      @relation("AuctionImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
}

model Lot {
  id                         String    @id @default(cuid())
  publicId                   String    @unique
  auctionId                  String
  number                     String?
  title                      String
  description                String?   @db.Text
  price                      Float
  initialPrice               Float?
  secondInitialPrice         Float?
  bidIncrementStep           Float?
  status                     LotStatus @default(EM_BREVE)
  categoryId                 String?
  subcategoryId              String?
  stateId                    String?
  cityId                     String?
  imageMediaId               String?   @unique
  imageUrl                   String?
  dataAiHint                 String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  bemIds                     Json?
  views                      Int       @default(0)
  bidsCount                  Int       @default(0)
  isFeatured                 Boolean?  @default(false)
  isExclusive                Boolean?  @default(false)
  discountPercentage         Float?
  additionalTriggers         String?
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?
  judicialProcessNumber      String?
  courtDistrict              String?
  courtName                  String?
  publicProcessUrl           String?
  propertyRegistrationNumber String?
  propertyLiens              String?   @db.Text
  knownDebts                 String?   @db.Text
  additionalDocumentsInfo    String?   @db.Text
  winningBidTermUrl          String?
  reservePrice               Float?
  evaluationValue            Float?
  debtAmount                 Float?
  itbiValue                  Float?
  endDate                    DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt

  // Relationships
  auction        Auction           @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category       LotCategory?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory    Subcategory?      @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  state          StateInfo?        @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city           CityInfo?         @relation(fields: [cityId], references: [id], onDelete: SetNull)
  image          MediaItem?        @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  bens           Bem[]
  bids           Bid[]
  wins           UserWin[]
  reviews        Review[]
  questions      LotQuestion[]
  maxBids        UserLotMaxBid[]
}

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())

  // Relationships
  lot     Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder  User    @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String        @id @default(cuid())
  lotId            String        @unique
  userId           String
  winningBidAmount Float
  winDate          DateTime
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?

  // Relationships
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ===================================
// People & Companies
// ===================================

model Auctioneer {
  id                     String    @id @default(cuid())
  publicId               String    @unique
  name                   String
  slug                   String    @unique
  registrationNumber     String?
  contactName            String?
  email                  String?
  phone                  String?
  address                String?
  city                   String?
  state                  String?
  zipCode                String?
  website                String?
  logoMediaId            String?   @unique
  dataAiHintLogo         String?
  description            String?   @db.Text
  memberSince            DateTime?
  rating                 Float?
  auctionsConductedCount Int?      @default(0)
  totalValueSold         Float?    @default(0)
  userId                 String?   @unique
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  // Relationships
  user     User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  auctions Auction[]
  logo     MediaItem? @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
}

model Seller {
  id                       String        @id @default(cuid())
  publicId                 String        @unique
  name                     String
  slug                     String        @unique
  contactName              String?
  email                    String?
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  logoMediaId              String?       @unique
  dataAiHintLogo           String?
  description              String?       @db.Text
  memberSince              DateTime?
  rating                   Float?
  activeLotsCount          Int?          @default(0)
  totalSalesValue          Float?        @default(0)
  auctionsFacilitatedCount Int?          @default(0)
  userId                   String?       @unique
  isJudicial               Boolean?      @default(false)
  judicialBranchId         String?       @unique
  cnpj                     String?       @unique
  razaoSocial              String?
  inscricaoEstadual        String?
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt

  // Relationships
  user             User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  auctions         Auction[]
  judicialProcess  JudicialProcess[]
  bens             Bem[]
  directSaleOffers DirectSaleOffer[]
  blogPosts        BlogPost[]
  judicialBranch   JudicialBranch?   @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  logo             MediaItem?        @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
}

// ===================================
// Judicial Entities
// ===================================

model Court {
  id        String             @id @default(cuid())
  name      String             @unique
  slug      String             @unique
  stateUf   String
  website   String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  // Relationships
  districts JudicialDistrict[]
  processes JudicialProcess[]
}

model JudicialDistrict {
  id        String             @id @default(cuid())
  name      String
  slug      String             @unique
  courtId   String
  stateId   String
  zipCode   String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  // Relationships
  court     Court              @relation(fields: [courtId], references: [id])
  state     StateInfo          @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]
}

model JudicialBranch {
  id          String             @id @default(cuid())
  name        String
  slug        String             @unique
  districtId  String
  contactName String?
  phone       String?
  email       String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relationships
  district  JudicialDistrict   @relation(fields: [districtId], references: [id])
  processes JudicialProcess[]
  seller    Seller?
}

model JudicialProcess {
  id              String   @id @default(cuid())
  publicId        String   @unique
  processNumber   String   @unique
  isElectronic    Boolean  @default(true)
  courtId         String
  districtId      String
  branchId        String
  sellerId        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  court    Court          @relation(fields: [courtId], references: [id])
  district JudicialDistrict @relation(fields: [districtId], references: [id])
  branch   JudicialBranch   @relation(fields: [branchId], references: [id])
  seller   Seller?        @relation(fields: [sellerId], references: [id])
  parties  ProcessParty[]
  bens     Bem[]
  auction  Auction?
}

model ProcessParty {
  id             String         @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Relationships
  process JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@unique([processId, name, partyType])
}

model Bem {
  id                         String   @id @default(cuid())
  publicId                   String   @unique
  title                      String
  description                String?  @db.Text
  status                     BemStatus @default(DISPONIVEL)
  categoryId                 String?
  subcategoryId              String?
  judicialProcessId          String?
  sellerId                   String?
  evaluationValue            Float?
  imageMediaId               String?  @unique
  imageUrl                   String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  plate                      String?
  make                       String?
  model                      String?
  version                    String?
  year                       Int?
  modelYear                  Int?
  mileage                    Int?
  color                      String?
  fuelType                   String?
  transmissionType           String?
  bodyType                   String?
  vin                        String?
  renavam                    String?
  enginePower                String?
  numberOfDoors              Int?
  vehicleOptions             String?
  detranStatus               String?
  debts                      String?
  runningCondition           String?
  bodyCondition              String?
  tiresCondition             String?
  hasKey                     Boolean?
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?
  infrastructure             String?
  condoDetails               String?
  improvements               String?
  topography                 String?
  liensAndEncumbrances       String?  @db.Text
  propertyDebts              String?
  unregisteredRecords        String?
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  amenities                  Json?
  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String?
  includedAccessories        String?
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String?
  applianceCapacity          String?
  voltage                    String?
  applianceType              String?
  hoursUsed                  Int?
  engineType                 String?
  capacityOrPower            String?
  maintenanceHistory         String?  @db.Text
  installationLocation       String?
  compliesWithNR             String?
  operatingLicenses          String?
  breed                      String?
  age                        String?
  sex                        String?
  weight                     String?
  individualId               String?
  purpose                    String?
  sanitaryCondition          String?
  lineage                    String?
  isPregnant                 Boolean?
  specialSkills              String?
  gtaDocument                String?
  breedRegistryDocument      String?
  furnitureType              String?
  material                   String?
  style                      String?
  dimensions                 String?
  pieceCount                 Int?
  jewelryType                String?
  metal                      String?
  gemstones                  String?
  totalWeight                String?
  jewelrySize                String?
  authenticityCertificate    String?
  workType                   String?
  artist                     String?
  period                     String?
  technique                  String?
  provenance                 String?
  boatType                   String?
  boatLength                 String?
  hullMaterial               String?
  onboardEquipment           String?
  productName                String?
  quantity                   String?
  packagingType              String?
  expirationDate             DateTime?
  storageConditions          String?
  preciousMetalType          String?
  purity                     String?
  forestGoodsType            String?
  volumeOrQuantity           String?
  species                    String?
  dofNumber                  String?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  // Relationships
  category        LotCategory?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory     Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller          Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  image           MediaItem?       @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  lots            Lot[]
}

// ===================================
// General & Content
// ===================================

model LotCategory {
  id                 String        @id @default(cuid())
  name               String        @unique
  slug               String        @unique
  description        String?       @db.Text
  logoMediaId        String?       @unique
  coverImageMediaId  String?       @unique
  megaMenuImageMediaId String?     @unique
  dataAiHintLogo     String?
  dataAiHintCover    String?
  dataAiHintMegaMenu String?
  itemCount          Int           @default(0)
  hasSubcategories   Boolean       @default(false)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  // Relationships
  subcategories     Subcategory[]
  lots              Lot[]
  bens              Bem[]
  auctions          Auction[]
  directSaleOffers  DirectSaleOffer[]
  logo              MediaItem?        @relation("CategoryLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  coverImage        MediaItem?        @relation("CategoryCover", fields: [coverImageMediaId], references: [id], onDelete: SetNull)
  megaMenuImage     MediaItem?        @relation("CategoryMegaMenu", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull)
}

model Subcategory {
  id              String      @id @default(cuid())
  name            String
  slug            String      @unique
  description     String?     @db.Text
  parentCategoryId String
  itemCount       Int         @default(0)
  displayOrder    Int         @default(0)
  iconMediaId     String?     @unique
  dataAiHintIcon  String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relationships
  parentCategory  LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots            Lot[]
  bens            Bem[]
  icon            MediaItem?  @relation("SubcategoryIcon", fields: [iconMediaId], references: [id], onDelete: SetNull)
}

model StateInfo {
  id        String             @id @default(cuid())
  name      String             @unique
  uf        String             @unique
  slug      String             @unique
  cityCount Int                @default(0)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  // Relationships
  lots      Lot[]
  cities    CityInfo[]
  courts    Court[]
  districts JudicialDistrict[]
}

model CityInfo {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  stateId   String
  stateUf   String
  ibgeCode  String?
  lotCount  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  state StateInfo @relation(fields: [stateId], references: [id])
  lots  Lot[]
}

model DirectSaleOffer {
  id                     String                @id @default(cuid())
  publicId               String                @unique
  title                  String
  description            String                @db.Text
  offerType              DirectSaleOfferType
  status                 DirectSaleOfferStatus
  price                  Float?
  minimumOfferPrice      Float?
  categoryId             String
  sellerId               String
  locationCity           String?
  locationState          String?
  imageMediaId           String?               @unique
  imageUrl               String?
  dataAiHint             String?
  galleryImageUrls       Json?
  mediaItemIds           Json?
  itemsIncluded          Json?
  tags                   Json?
  views                  Int                   @default(0)
  proposalsCount         Int                   @default(0)
  expiresAt              DateTime?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt

  // Relationships
  category             LotCategory       @relation(fields: [categoryId], references: [id])
  seller               Seller            @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  image                MediaItem?        @relation("DirectSaleOfferImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
}

model MediaItem {
  id                 String    @id @default(cuid())
  fileName           String
  storagePath        String?   @unique
  uploadedAt         DateTime  @default(now())
  uploadedBy         String?
  title              String?
  altText            String?
  caption            String?
  description        String?   @db.Text
  mimeType           String
  sizeBytes          Int
  dimensions         Json?
  urlOriginal        String    @db.Text
  urlThumbnail       String?   @db.Text
  urlMedium          String?   @db.Text
  urlLarge           String?   @db.Text
  dataAiHint         String?

  // Relationships
  uploader                 User?             @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)
  auctionAsImage           Auction?          @relation("AuctionImage")
  lotAsImage               Lot?              @relation("LotImage")
  bemAsImage               Bem?              @relation("BemImage")
  auctioneerAsLogo         Auctioneer?       @relation("AuctioneerLogo")
  sellerAsLogo             Seller?           @relation("SellerLogo")
  categoryAsLogo           LotCategory?      @relation("CategoryLogo")
  categoryAsCover          LotCategory?      @relation("CategoryCover")
  categoryAsMegaMenu       LotCategory?      @relation("CategoryMegaMenu")
  subcategoryAsIcon        Subcategory?      @relation("SubcategoryIcon")
  directSaleOfferAsImage   DirectSaleOffer?  @relation("DirectSaleOfferImage")
}

model BlogPost {
    id        String @id @default(cuid())
    title     String
    content   String @db.Text
    authorId  String
    slug      String @unique
    published Boolean @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relationships
    author User @relation(fields: [authorId], references: [id])
}

model ContactMessage {
    id          String @id @default(cuid())
    name        String
    email       String
    subject     String
    message     String @db.Text
    isRead      Boolean @default(false)
    createdAt   DateTime @default(now())
}

model Notification {
    id          String @id @default(cuid())
    userId      String
    message     String
    link        String?
    isRead      Boolean @default(false)
    createdAt   DateTime @default(now())

    // Relationships
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
    id              String   @id @default(cuid())
    userId          String
    userDisplayName String
    lotId           String
    auctionId       String
    rating          Int // 1-5
    comment         String   @db.Text
    createdAt       DateTime @default(now())

    // Relationships
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model LotQuestion {
    id                       String   @id @default(cuid())
    userId                   String
    userDisplayName          String
    lotId                    String
    auctionId                String
    questionText             String   @db.Text
    isPublic                 Boolean  @default(true)
    answerText               String?  @db.Text
    answeredAt               DateTime?
    answeredByUserId         String?
    answeredByUserDisplayName String?
    createdAt                DateTime @default(now())

    // Relationships
    user     User @relation("QuestionAskedBy", fields: [userId], references: [id], onDelete: Cascade)
    answerer User? @relation("QuestionAnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)
    lot      Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model UserLotMaxBid {
    id        String   @id @default(cuid())
    userId    String
    lotId     String
    maxAmount Float
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relationships
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)

    @@unique([userId, lotId])
}

// ===================================
// Platform Settings
// ===================================

model PlatformSettings {
  id                             String                @id @default("global")
  siteTitle                      String?
  siteTagline                    String?
  galleryImageBasePath           String?
  storageProvider                StorageProviderType?  @default(local)
  firebaseStorageBucket          String?
  activeThemeName                String?
  themes                         Json?
  platformPublicIdMasks          Json?
  homepageSections               Json?
  mentalTriggerSettings          Json?
  sectionBadgeVisibility         Json?
  mapSettings                    Json?
  searchPaginationType           SearchPaginationType? @default(loadMore)
  searchItemsPerPage             Int?
  searchLoadMoreCount            Int?
  showCountdownOnLotDetail       Boolean?
  showCountdownOnCards           Boolean?
  showRelatedLotsOnLotDetail     Boolean?
  relatedLotsCount               Int?
  variableIncrementTable         Json?
  defaultListItemsPerPage        Int?
  biddingSettings                Json?
  updatedAt                      DateTime              @updatedAt
}

// ===================================
// Enums
// ===================================

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ACTIVE
  SOLD
  EXPIRED
  PENDING_APPROVAL
}

enum SearchPaginationType {
  loadMore
  numberedPages
}

enum StorageProviderType {
  local
  firebase
}

    