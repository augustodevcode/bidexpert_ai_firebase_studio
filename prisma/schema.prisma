
// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// ENUMS
// =================================================================
enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum Sex {
  Macho
  Femea
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

// =================================================================
// MODELS
// =================================================================

model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  password            String?
  fullName            String?
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType          @default(PHYSICAL)
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?
  
  cpf                      String?
  rgNumber                 String?
  rgIssuer                 String?
  rgIssueDate              DateTime?
  rgState                  String?
  dateOfBirth              DateTime?
  cellPhone                String?
  homePhone                String?
  gender                   String?
  profession               String?
  nationality              String?
  maritalStatus            String?
  propertyRegime           String?
  spouseName               String?
  spouseCpf                String?
  zipCode                  String?
  street                   String?
  number                   String?
  complement               String?
  neighborhood             String?
  city                     String?
  state                    String?
  optInMarketing           Boolean?             @default(false)
  
  razaoSocial              String?
  cnpj                     String?
  inscricaoEstadual        String?
  website                  String?
  responsibleName          String?
  responsibleCpf           String?

  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  // Relations
  seller              Seller?
  auctioneer          Auctioneer?
  bids                Bid[]
  wins                UserWin[]            @relation("LotWinner")
  documents           UserDocument[]
  maxBids             UserLotMaxBid[]
  notifications       Notification[]
  uploadedMedia       MediaItem[]
  auctionHabilitations AuctionHabilitation[]
  roles               UsersOnRoles[]
}

model Role {
  id             String         @id @default(uuid())
  name           String         @unique @db.VarChar(50)
  nameNormalized String         @unique @db.VarChar(50)
  description    String?        @db.VarChar(255)
  permissions    Json
  users          UsersOnRoles[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model State {
  id        String    @id @default(uuid())
  name      String    @db.VarChar(100)
  uf        String    @unique @db.VarChar(2)
  slug      String    @unique @db.VarChar(100)
  cities    City[]
  courts    Court[]
  districts JudicialDistrict[]
  lots      Lot[]
}

model City {
  id       String @id @default(uuid())
  name     String @db.VarChar(150)
  slug     String @db.VarChar(150)
  stateId  String
  stateUf  String?
  ibgeCode String?  @unique @db.VarChar(10)
  lotCount Int?     @default(0)
  lots     Lot[]
  state    State    @relation(fields: [stateId], references: [id], onDelete: Cascade)
}

model LotCategory {
  id                  String        @id @default(uuid())
  name                String
  slug                String        @unique
  description         String?       @db.VarChar(500)
  hasSubcategories    Boolean?
  logoUrl             String?
  logoMediaId         String?
  dataAiHintLogo      String?
  coverImageUrl       String?
  coverImageMediaId   String?
  dataAiHintCover     String?
  megaMenuImageUrl    String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu  String?
  lots                Lot[]
  bens                Bem[]
  subcategories       Subcategory[]
  auctions            Auction[]
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model Subcategory {
  id               String       @id @default(uuid())
  name             String
  slug             String
  parentCategoryId String
  description      String?      @db.VarChar(500)
  displayOrder     Int          @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  lots             Lot[]
  bens             Bem[]
  parentCategory   LotCategory  @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
}

model Court {
  id                String              @id @default(uuid())
  name              String              @db.VarChar(150)
  slug              String?             @db.VarChar(150)
  stateId           String?
  state             State?              @relation(fields: [stateId], references: [id])
  stateUf           String?             @db.VarChar(2)
  website           String?
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model JudicialDistrict {
  id                String            @id @default(uuid())
  name              String            @db.VarChar(150)
  slug              String            @unique @db.VarChar(150)
  courtId           String?
  stateId           String
  zipCode           String?           @db.VarChar(10)
  judicialBranches  JudicialBranch[]
  court             Court?            @relation(fields: [courtId], references: [id])
  state             State             @relation(fields: [stateId], references: [id])
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model JudicialBranch {
  id                String            @id @default(uuid())
  name              String            @db.VarChar(150)
  slug              String            @unique @db.VarChar(150)
  districtId        String?
  contactName       String?           @db.VarChar(150)
  phone             String?           @db.VarChar(20)
  email             String?           @db.VarChar(150)
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  Seller            Seller?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Seller {
  id                String    @id @default(uuid())
  publicId          String?   @unique
  slug              String?   @unique @db.VarChar(150)
  name              String    @unique @db.VarChar(150)
  contactName       String?   @db.VarChar(150)
  email             String?   @db.VarChar(150)
  phone             String?   @db.VarChar(20)
  address           String?   @db.VarChar(200)
  city              String?   @db.VarChar(100)
  state             String?   @db.VarChar(50)
  zipCode           String?   @db.VarChar(10)
  website           String?
  logoUrl           String?
  logoMediaId       String?
  dataAiHintLogo    String?
  description       String?   @db.Text
  userId            String?   @unique
  isJudicial        Boolean   @default(false)
  judicialBranchId  String?   @unique
  judicialBranch    JudicialBranch? @relation(fields: [judicialBranchId], references: [id])
  user              User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  auctions          Auction[]
  lots              Lot[]
  bens              Bem[]
  directSaleOffers  DirectSaleOffer[]
  judicialProcesses JudicialProcess[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Auctioneer {
  id                 String    @id @default(uuid())
  publicId           String?   @unique
  slug               String?   @unique @db.VarChar(150)
  name               String    @db.VarChar(150)
  registrationNumber String?   @db.VarChar(50)
  contactName        String?   @db.VarChar(150)
  email              String?   @db.VarChar(150)
  phone              String?   @db.VarChar(20)
  address            String?   @db.VarChar(200)
  city               String?   @db.VarChar(100)
  state              String?   @db.VarChar(50)
  zipCode            String?   @db.VarChar(10)
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?   @db.Text
  userId             String?   @unique
  user               User?     @relation(fields: [userId], references: [id])
  auctions           Auction[]
  lots               Lot[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model JudicialProcess {
  id            String  @id @default(uuid())
  publicId      String? @unique
  processNumber String  @db.VarChar(100)
  isElectronic  Boolean @default(true)
  
  courtId    String?
  districtId String?
  branchId   String?
  sellerId   String?
  
  bens          Bem[]
  
  // Relações
  court         Court?             @relation(fields: [courtId], references: [id])
  district      JudicialDistrict?  @relation(fields: [districtId], references: [id])
  branch        JudicialBranch?    @relation(fields: [branchId], references: [id])
  seller        Seller?            @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties       JudicialParty[]
  mediaItems    MediaItem[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JudicialParty {
  id              String          @id @default(uuid())
  processId       String
  name            String
  documentNumber  String?         @db.VarChar(50)
  partyType       ProcessPartyType
  judicialProcess JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model Auction {
  id                String @id @default(uuid())
  publicId          String? @unique @db.VarChar(100)
  slug              String? @unique @db.VarChar(255)
  title             String  @db.VarChar(255)
  description       String? @db.Text
  status            AuctionStatus @default(RASCUNHO)
  auctionDate       DateTime?
  endDate           DateTime?
  
  auctioneerId      String
  sellerId          String
  categoryId        String?
  auctionType       AuctionType?
  auctionMethod     AuctionMethod? @default(STANDARD)
  participation     AuctionParticipation? @default(ONLINE)

  imageUrl          String?
  imageMediaId      String?
  dataAiHint        String? @db.VarChar(100)
  documentsUrl      String?
  
  address              String?
  zipCode              String?
  latitude             Float?
  longitude            Float?

  visits                 Int?     @default(0)
  totalLots              Int?     @default(0)
  initialOffer           Decimal? @db.Decimal(15, 2)
  isFavorite             Boolean? @default(false)
  
  evaluationReportUrl    String?
  auctionCertificateUrl  String?
  sellingBranch          String?              @db.VarChar(100)
  automaticBiddingEnabled Boolean             @default(false)
  allowInstallmentBids   Boolean             @default(true)
  silentBiddingEnabled   Boolean             @default(false)
  allowMultipleBidsPerUser Boolean           @default(true)
  softCloseEnabled       Boolean             @default(false)
  softCloseMinutes       Int?                @default(2)
  estimatedRevenue       Decimal?            @db.Decimal(15, 2)
  achievedRevenue        Decimal?            @db.Decimal(15, 2)
  totalHabilitatedUsers  Int?                @default(0)
  isFeaturedOnMarketplace Boolean            @default(false)
  marketplaceAnnouncementTitle String?       @db.VarChar(150)
  
  decrementAmount           Decimal?  @db.Decimal(15, 2)
  decrementIntervalSeconds  Int?
  floorPrice                Decimal?  @db.Decimal(15, 2)
  
  autoRelistSettings Json?

  // Relações
  auctioneerId_fk      String? // Campo temporário
  sellerId_fk          String? // Campo temporário
  categoryId_fk        String? // Campo temporário
  judicialProcessId    String?
  courtId              String?
  districtId           String?
  branchId             String?
  cityId               String?
  stateId              String?
  
  auctioneer             Auctioneer        @relation(fields: [auctioneerId], references: [id])
  seller                 Seller            @relation(fields: [sellerId], references: [id])
  category               LotCategory?      @relation(fields: [categoryId], references: [id])
  judicialProcess        JudicialProcess?  @relation(fields: [judicialProcessId], references: [id])
  court                  Court?            @relation(fields: [courtId], references: [id])
  district               JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch                 JudicialBranch?   @relation(fields: [branchId], references: [id])
  city                   City?             @relation(fields: [cityId], references: [id])
  state                  State?            @relation(fields: [stateId], references: [id])

  lots                 Lot[]
  auctionStages        AuctionStage[]
  habilitations        AuctionHabilitation[]
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model AuctionStage {
  id              String  @id @default(uuid())
  name            String
  startDate       DateTime
  endDate         DateTime
  evaluationValue Decimal? @db.Decimal(15, 2)
  auctionId       String
  auction         Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  LotStageDetails LotAuctionStageDetails[]

  @@index([auctionId])
}

model Lot {
  id                      String        @id @default(uuid())
  publicId                String?       @unique @db.VarChar(100)
  auctionId               String
  slug                    String?       @db.VarChar(255)
  number                  String?       @db.VarChar(20)
  title                   String        @db.VarChar(255)
  description             String?       @db.Text
  price                   Decimal       @db.Decimal(15, 2)
  initialPrice            Decimal?      @db.Decimal(15, 2)
  secondInitialPrice      Decimal?      @db.Decimal(15, 2)
  bidIncrementStep        Decimal?      @db.Decimal(10, 2)
  status                  LotStatus     @default(EM_BREVE)
  bidsCount               Int?          @default(0)
  views                   Int?          @default(0)
  isFeatured              Boolean?      @default(false)
  isExclusive             Boolean?      @default(false)
  discountPercentage      Int?
  additionalTriggers      Json?
  imageUrl                String?
  imageMediaId            String?
  galleryImageUrls        Json?
  mediaItemIds            Json?
  type                    String        @db.VarChar(100)
  categoryId              String?
  subcategoryId           String?
  auctionName             String?       @db.VarChar(255)
  sellerId                String?
  sellerName              String?       @db.VarChar(150)
  auctioneerId            String?
  cityId                  String?
  stateId                 String?
  cityName                String?       @db.VarChar(100)
  stateUf                 String?       @db.VarChar(2)
  latitude                Decimal?      @db.Decimal(10, 8)
  longitude               Decimal?      @db.Decimal(11, 8)
  mapAddress              String?       @db.VarChar(255)
  mapEmbedUrl             String?       @db.VarChar(500)
  mapStaticImageUrl       String?
  endDate                 DateTime?
  auctionDate             DateTime?
  lotSpecificAuctionDate  DateTime?
  secondAuctionDate       DateTime?
  condition               String?       @db.VarChar(100)
  dataAiHint              String?       @db.VarChar(100)
  winnerId                String?
  winningBidTermUrl       String?
  allowInstallmentBids    Boolean?      @default(false)
  isRelisted              Boolean       @default(false)
  relistCount             Int           @default(0)
  originalLotId           String?       @unique
  inheritedMediaFromBemId String?
  
  // Relações
  auction                  Auction                @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                 LotCategory?           @relation(fields: [categoryId], references: [id])
  subcategory              Subcategory?           @relation(fields: [subcategoryId], references: [id])
  seller                   Seller?                @relation(fields: [sellerId], references: [id])
  city                     City?                  @relation(fields: [cityId], references: [id])
  state                    State?                 @relation(fields: [stateId], references: [id])
  originalLot              Lot?                   @relation("RelistedLot", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot              Lot?                   @relation("RelistedLot")
  winner                   User?                  @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  
  bids                     Bid[]
  maxBids                  UserLotMaxBid[]
  wins                     UserWin[]
  bens                     LotBens[]
  stageDetails             LotAuctionStageDetails[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LotBens {
  lotId String
  bemId String
  lot   Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bem   Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)

  @@id([lotId, bemId])
}

// Detalhes de Lance específico para uma Praça/Etapa
model LotAuctionStageDetails {
  id             String   @id @default(uuid())
  lotId          String
  stageId        String
  initialBid     Decimal? @db.Decimal(15, 2)
  bidIncrement   Decimal? @db.Decimal(10, 2)

  lot   Lot          @relation(fields: [lotId], references: [id], onDelete: Cascade)
  stage AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)

  @@unique([lotId, stageId])
}

model UserWin {
  id               String   @id @default(uuid())
  lotId            String   @unique
  lot              Lot      @relation(fields: [lotId], references: [id])
  userId           String
  user             User     @relation("LotWinner", fields: [userId], references: [id], onDelete: Cascade)
  winningBidAmount Decimal  @db.Decimal(15, 2)
  winDate          DateTime @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?
  installments     InstallmentPayment[]
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  // Relações
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lotId])
}


model Bid {
  id            String   @id @default(uuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())

  // Relações
  lot     Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bidder  User @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relação
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Model para armazenar os detalhes de pagamento de cada parcela.
model InstallmentPayment {
  id                 String   @id @default(uuid())
  userWinId          String
  installmentNumber  Int
  amount             Decimal  @db.Decimal(15, 2)
  dueDate            DateTime
  status             PaymentStatus @default(PENDENTE)
  paymentDate        DateTime?
  paymentMethod      String?
  transactionId      String?
  
  // Relações
  win                UserWin @relation(fields: [userWinId], references: [id], onDelete: Cascade)
}

model DirectSaleOffer {
  id                    String        @id @default(uuid())
  publicId              String?       @unique @db.VarChar(100)
  title                 String        @db.VarChar(255)
  description           String?       @db.Text
  offerType             DirectSaleOfferType
  price                 Decimal?      @db.Decimal(15, 2)
  minimumOfferPrice     Decimal?      @db.Decimal(15, 2)
  status                DirectSaleOfferStatus @default(ACTIVE)
  categoryName          String?       @db.VarChar(100)
  categoryId            String
  sellerId              String
  sellerName            String?       @db.VarChar(150)
  sellerLogoUrl         String?
  dataAiHintSellerLogo  String?       @db.VarChar(100)
  locationCity          String?       @db.VarChar(100)
  locationState         String?       @db.VarChar(100)
  imageUrl              String?
  imageMediaId          String?
  dataAiHint            String?       @db.VarChar(100)
  galleryImageUrls      Json?
  mediaItemIds          Json?
  itemsIncluded         Json?
  views                 Int?          @default(0)
  expiresAt             DateTime?
  
  // Relações
  category             LotCategory @relation(fields: [categoryId], references: [id])
  seller                Seller    @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DocumentType {
  id            String         @id @default(uuid())
  name          String         @db.VarChar(150)
  description   String?        @db.VarChar(255)
  isRequired    Boolean        @default(true)
  appliesTo     String? // Comma-separated: PHYSICAL,LEGAL,ALL
  userDocuments UserDocument[]
}

model UserDocument {
  id              String   @id @default(uuid())
  userId          String
  documentTypeId  String
  status          UserDocumentStatus @default(PENDING_ANALYSIS)
  fileUrl         String
  fileName        String?
  rejectionReason String?  @db.Text

  // Relações
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType  DocumentType @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)

  @@unique([userId, documentTypeId])
}


model DocumentTemplate {
  id        String               @id @default(uuid())
  name      String               @db.VarChar(150)
  type      DocumentTemplateType
  content   String?              @db.Text
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(150)
  email     String   @db.VarChar(150)
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model MediaItem {
  id                  String  @id @default(uuid())
  fileName            String
  storagePath         String
  title               String?
  altText             String?
  caption             String? @db.VarChar(500)
  description         String? @db.Text
  mimeType            String  @db.VarChar(100)
  sizeBytes           Int?
  urlOriginal         String
  urlThumbnail        String?
  urlMedium           String?
  urlLarge            String?
  linkedLotIds        Json?
  dataAiHint          String? @db.VarChar(100)
  
  uploadedByUserId    String
  judicialProcessId   String?

  // Relações
  uploadedBy          User             @relation(fields: [uploadedByUserId], references: [id])
  judicialProcess     JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)

  uploadedAt DateTime @default(now())
}

model AuctionHabilitation {
  id        String   @id @default(uuid())
  userId    String
  auctionId String
  createdAt DateTime @default(now())
  
  // Relações
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction   Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  
  @@unique([userId, auctionId])
}

model PlatformSettings {
  id                             String   @id @default("global")
  siteTitle                      String?
  siteTagline                    String?
  galleryImageBasePath           String?
  storageProvider                String?
  firebaseStorageBucket          String?
  activeThemeName                String?
  themes                         Json?
  platformPublicIdMasks          Json?
  homepageSections               Json?
  mentalTriggerSettings          Json?
  sectionBadgeVisibility         Json?
  mapSettings                    Json?
  searchPaginationType           String?
  searchItemsPerPage             Int?
  searchLoadMoreCount            Int?
  showCountdownOnLotDetail       Boolean?
  showCountdownOnCards           Boolean?
  showRelatedLotsOnLotDetail     Boolean?
  relatedLotsCount               Int?
  defaultUrgencyTimerHours       Int?
  variableIncrementTable         Json?
  biddingSettings                Json?
  paymentGatewaySettings         Json?
  defaultListItemsPerPage        Int?
  updatedAt                      DateTime? @updatedAt
}

model Bem {
    id                String   @id @default(uuid())
    publicId          String   @unique
    title             String
    description       String?  @db.Text
    status            BemStatus @default(DISPONIVEL)
    categoryId        String
    subcategoryId     String?
    judicialProcessId String?
    sellerId          String?
    evaluationValue   Decimal? @db.Decimal(15, 2)
    imageUrl          String?
    imageMediaId      String?
    galleryImageUrls  Json?
    mediaItemIds      Json?
    dataAiHint        String?
    locationCity      String?
    locationState     String?
    address           String?
    latitude          Decimal? @db.Decimal(10, 8)
    longitude         Decimal? @db.Decimal(11, 8)
    
    // Vehicle
    plate                 String?
    make                  String?
    model                 String?
    version               String?
    year                  Int?
    modelYear             Int?
    mileage               Int?
    color                 String?
    fuelType              String?
    transmissionType      String?
    bodyType              String?
    vin                   String? @unique
    renavam               String? @unique
    enginePower           String?
    numberOfDoors         Int?
    vehicleOptions        String? @db.Text
    detranStatus          String?
    debts                 String? @db.Text
    runningCondition      String?
    bodyCondition         String?
    tiresCondition        String?
    hasKey                Boolean?

    // Real Estate
    propertyRegistrationNumber String?
    iptuNumber                 String?
    isOccupied                 Boolean?
    totalArea                  Decimal? @db.Decimal(15, 2)
    builtArea                  Decimal? @db.Decimal(15, 2)
    bedrooms                   Int?
    suites                     Int?
    bathrooms                  Int?
    parkingSpaces              Int?
    constructionType           String?
    finishes                   String? @db.Text
    infrastructure             String? @db.Text
    condoDetails               String? @db.Text
    improvements               String? @db.Text
    topography                 String?
    liensAndEncumbrances       String? @db.Text
    propertyDebts              String? @db.Text
    unregisteredRecords        String? @db.Text
    hasHabiteSe                Boolean?
    zoningRestrictions         String?

    // Electronics & Others
    brand                      String?
    serialNumber               String?
    itemCondition              String?
    specifications             String? @db.Text
    includedAccessories        String? @db.Text
    batteryCondition           String?
    hasInvoice                 Boolean?
    hasWarranty                Boolean?
    repairHistory              String? @db.Text
    applianceCapacity          String?
    voltage                    String?
    applianceType              String?
    additionalFunctions        String?
    hoursUsed                  Int?
    engineType                 String?
    capacityOrPower            String?
    maintenanceHistory         String? @db.Text
    installationLocation       String?
    compliesWithNR             String?
    operatingLicenses          String?
    breed                      String?
    age                        String?
    sex                        Sex?
    weight                     String?
    individualId               String?
    purpose                    String?
    sanitaryCondition          String?
    vaccinationStatus          String?
    lineage                    String?
    isPregnant                 Boolean?
    specialSkills              String?
    gtaDocument                String?
    breedRegistryDocument      String?
    furnitureType              String?
    material                   String?
    style                      String?
    dimensions                 String?
    pieceCount                 Int?
    jewelryType                String?
    metal                      String?
    gemstones                  String?
    totalWeight                String?
    jewelrySize                String?
    authenticityCertificate    String?
    workType                   String?
    artist                     String?
    period                     String?
    technique                  String?
    provenance                 String? @db.Text
    boatType                   String?
    boatLength                 String?
    hullMaterial               String?
    onboardEquipment           String? @db.Text
    productName                String?
    quantity                   String?
    packagingType              String?
    expirationDate             DateTime?
    storageConditions          String?
    preciousMetalType          String?
    purity                     String?
    forestGoodsType            String?
    volumeOrQuantity           String?
    species                    String?
    dofNumber                  String?

    // Relações
    category          LotCategory       @relation(fields: [categoryId], references: [id])
    subcategory       Subcategory?      @relation(fields: [subcategoryId], references: [id])
    judicialProcess   JudicialProcess?  @relation(fields: [judicialProcessId], references: [id])
    seller            Seller?           @relation(fields: [sellerId], references: [id])
    lots              LotBens[]

    createdAt         DateTime          @default(now())
    updatedAt         DateTime          @updatedAt
}

model VehicleMake {
    id    String @id @default(uuid())
    name  String @unique
    slug  String @unique
    models VehicleModel[]
}

model VehicleModel {
    id      String @id @default(uuid())
    name    String
    slug    String
    makeId  String
    make    VehicleMake @relation(fields: [makeId], references: [id])

    @@unique([name, makeId])
}
