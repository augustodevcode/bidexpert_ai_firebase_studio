// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// --- ENUMS ---

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum DirectSaleOfferStatus {
  PENDING_APPROVAL
  ACTIVE
  SOLD
  EXPIRED
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

// --- MODELS ---

model User {
  id                    String                   @id @default(cuid())
  email                 String                   @unique
  password              String
  fullName              String
  accountType           AccountType              @default(PHYSICAL)
  habilitationStatus    UserHabilitationStatus   @default(PENDING_DOCUMENTS)
  badges                Json?
  sellerId              String?                  @unique
  sellerProfile         Seller?                  @relation("UserToSeller")
  auctioneerId          String?                  @unique
  auctioneerProfile     Auctioneer?              @relation("UserToAuctioneer")
  documents             UserDocument[]
  bids                  Bid[]
  wins                  UserWin[]
  reviews               Review[]
  questions             LotQuestion[]            @relation("UserQuestions")
  answers               LotQuestion[]            @relation("UserAnswers")
  maxBids               UserLotMaxBid[]
  notifications         Notification[]
  mediaItems            MediaItem[]              @relation("UserUploader")
  blogPosts             BlogPost[]
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  roleId                String?
  role                  Role?                    @relation(fields: [roleId], references: [id], onDelete: SetNull)
  cpf                   String?
  dateOfBirth           DateTime?
  razaoSocial           String?
  cnpj                  String?
  inscricaoEstadual     String?
  website               String?
  cellPhone             String?
  zipCode               String?
  street                String?
  number                String?
  complement            String?
  neighborhood          String?
  city                  String?
  state                 String?
  optInMarketing        Boolean?                 @default(false)
  rgNumber              String?
  rgIssuer              String?
  rgIssueDate           DateTime?
  rgState               String?
  homePhone             String?
  gender                String?
  profession            String?
  nationality           String?
  maritalStatus         String?
  propertyRegime        String?
  spouseName            String?
  spouseCpf             String?
}

model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  permissions     Permission[]
  users           User[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Permission {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  roles       Role[]
}

model DocumentType {
  id             String         @id @default(cuid())
  name           String
  description    String?
  isRequired     Boolean        @default(true)
  appliesTo      String
  allowedFormats String
  displayOrder   Int            @default(0)
  userDocuments  UserDocument[]
}

model UserDocument {
  id                String             @id @default(cuid())
  userId            String
  documentTypeId    String
  fileUrl           String?
  fileName          String?
  status            UserDocumentStatus @default(NOT_SENT)
  uploadDate        DateTime?
  analysisDate      DateTime?
  analystId         String?
  rejectionReason   String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType      DocumentType       @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

model Auction {
  id                           String       @id @default(cuid())
  publicId                     String       @unique
  title                        String
  description                  String?      @db.Text
  status                       AuctionStatus @default(RASCUNHO)
  auctionType                  String?
  auctionDate                  DateTime
  endDate                      DateTime?
  auctionStages                Json?
  imageUrl                     String?
  imageMediaId                 String?      @unique
  documentsUrl                 String?
  sellingBranch                String?
  automaticBiddingEnabled      Boolean      @default(false)
  allowInstallmentBids         Boolean      @default(false)
  softCloseEnabled             Boolean      @default(false)
  softCloseMinutes             Int?         @default(2)
  estimatedRevenue             Float?
  achievedRevenue              Float?       @default(0)
  totalHabilitatedUsers        Int?         @default(0)
  isFeaturedOnMarketplace      Boolean?     @default(false)
  marketplaceAnnouncementTitle String?
  visits                       Int?         @default(0)
  createdAt                    DateTime     @default(now())
  updatedAt                    DateTime     @updatedAt
  city                         String?
  state                        String?
  categoryId                   String
  auctioneerId                 String
  sellerId                     String?
  judicialProcessId            String?
  bids                         Bid[]
  lots                         Lot[]
  category                     LotCategory  @relation(fields: [categoryId], references: [id])
  auctioneer                   Auctioneer   @relation(fields: [auctioneerId], references: [id])
  seller                       Seller?      @relation(fields: [sellerId], references: [id])
  judicialProcess              JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onUpdate: NoAction, onDelete: SetNull)
  image                        MediaItem?   @relation("AuctionImage", fields: [imageMediaId], references: [id])
}

model Lot {
  id                         String    @id @default(cuid())
  publicId                   String    @unique
  number                     String?
  title                      String
  description                String?   @db.Text
  status                     LotStatus @default(EM_BREVE)
  price                      Float     @default(0)
  initialPrice               Float?
  secondInitialPrice         Float?
  bidIncrementStep           Float?
  isFeatured                 Boolean?  @default(false)
  isExclusive                Boolean?  @default(false)
  discountPercentage         Float?
  additionalTriggers         Json?
  endDate                    DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  imageUrl                   String?
  imageMediaId               String?   @unique
  galleryImageUrls           Json?
  mediaItemIds               Json?
  bemIds                     Json?
  views                      Int?      @default(0)
  bidsCount                  Int?      @default(0)
  winningBidTermUrl          String?
  condition                  String?
  dataAiHint                 String?
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
  auctionId                  String
  categoryId                 String
  subcategoryId              String?
  sellerId                   String?
  stateId                    String?
  cityId                     String?
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?
  judicialProcessNumber      String?
  courtDistrict              String?
  courtName                  String?
  publicProcessUrl           String?
  propertyRegistrationNumber String?
  propertyLiens              String?
  knownDebts                 String?
  additionalDocumentsInfo    String?   @db.Text
  reservePrice               Float?
  evaluationValue            Float?
  debtAmount                 Float?
  itbiValue                  Float?
  auction                    Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                   LotCategory @relation(fields: [categoryId], references: [id])
  subcategory                Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  state                      StateInfo? @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city                       CityInfo? @relation(fields: [cityId], references: [id], onDelete: SetNull)
  image                      MediaItem? @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  bids                       Bid[]
  wins                       UserWin[]
  questions                  LotQuestion[]
  reviews                    Review[]
  maxBids                    UserLotMaxBid[]
}

model Seller {
  id                         String    @id @default(cuid())
  publicId                   String    @unique
  name                       String    @unique
  slug                       String    @unique
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                  String?
  description                String?   @db.Text
  memberSince                DateTime?
  rating                     Float?
  activeLotsCount            Int?
  totalSalesValue            Float?
  auctionsFacilitatedCount   Int?
  isJudicial                 Boolean   @default(false)
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
  userId                     String?   @unique
  user                       User?     @relation("UserToSeller", fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  logoMediaId                String?   @unique
  logo                       MediaItem? @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  judicialBranchId           String?   @unique
  judicialBranch             JudicialBranch? @relation(fields: [judicialBranchId], references: [id])
  auctions                   Auction[]
  directSaleOffers           DirectSaleOffer[]
  bens                       Bem[]
}

model Auctioneer {
  id                       String    @id @default(cuid())
  publicId                 String    @unique
  name                     String    @unique
  slug                     String    @unique
  registrationNumber       String?
  contactName              String?
  email                    String?
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  description              String?   @db.Text
  memberSince              DateTime?
  rating                   Float?
  auctionsConductedCount   Int?
  totalValueSold           Float?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  userId                   String?   @unique
  user                     User?     @relation("UserToAuctioneer", fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  logoMediaId              String?   @unique
  logo                     MediaItem? @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  auctions                 Auction[]
}

model LotCategory {
  id                   String            @id @default(cuid())
  name                 String            @unique
  slug                 String            @unique
  description          String?
  itemCount            Int?              @default(0)
  hasSubcategories     Boolean?          @default(false)
  logoMediaId          String?           @unique
  coverImageMediaId    String?           @unique
  megaMenuImageMediaId String?           @unique
  dataAiHintLogo       String?
  dataAiHintCover      String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  auctions             Auction[]
  lots                 Lot[]
  directSaleOffers     DirectSaleOffer[]
  bens                 Bem[]
  subcategories        Subcategory[]
  logo                 MediaItem?        @relation("CategoryLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  coverImage           MediaItem?        @relation("CategoryCoverImage", fields: [coverImageMediaId], references: [id], onDelete: SetNull)
  megaMenuImage        MediaItem?        @relation("CategoryMegaMenuImage", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull)
}

model Subcategory {
  id                String       @id @default(cuid())
  name              String
  slug              String       @unique
  description       String?
  itemCount         Int?         @default(0)
  displayOrder      Int?         @default(0)
  parentCategoryId  String
  iconMediaId       String?      @unique
  dataAiHintIcon    String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  parentCategory    LotCategory  @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots              Lot[]
  bens              Bem[]
  icon              MediaItem?   @relation("SubcategoryIcon", fields: [iconMediaId], references: [id], onDelete: SetNull)
}

model MediaItem {
  id                     String           @id @default(cuid())
  fileName               String
  storagePath            String?          @unique
  title                  String?
  altText                String?
  caption                String?
  description            String?          @db.Text
  mimeType               String
  sizeBytes              Int
  dimensions             Json?
  urlOriginal            String           @db.Text
  urlThumbnail           String?          @db.Text
  urlMedium              String?          @db.Text
  urlLarge               String?          @db.Text
  uploadedAt             DateTime         @default(now())
  uploadedBy             String?
  dataAiHint             String?
  linkedLotIds           Json?
  userUploader           User?            @relation("UserUploader", fields: [uploadedBy], references: [id], onDelete: SetNull, onUpdate: NoAction)
  auctionImage           Auction?         @relation("AuctionImage")
  lotImage               Lot?             @relation("LotImage")
  sellerLogo             Seller?          @relation("SellerLogo")
  auctioneerLogo         Auctioneer?      @relation("AuctioneerLogo")
  blogPostImage          BlogPost?        @relation("BlogPostImage")
  directSaleOfferAsImage DirectSaleOffer? @relation("DirectSaleOfferImage")
  categoryAsLogo         LotCategory?     @relation("CategoryLogo")
  categoryAsCoverImage   LotCategory?     @relation("CategoryCoverImage")
  categoryAsMegaMenuImage LotCategory?    @relation("CategoryMegaMenuImage")
  subcategoryAsIcon      Subcategory?     @relation("SubcategoryIcon")
  bemImage               Bem?             @relation("BemImage")
}

model StateInfo {
  id        String             @id @default(cuid())
  name      String             @unique
  uf        String             @unique
  slug      String             @unique
  cityCount Int?               @default(0)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  cities    CityInfo[]
  courts    Court[]
  districts JudicialDistrict[]
}

model CityInfo {
  id        String    @id @default(cuid())
  name      String
  slug      String
  stateId   String
  stateUf   String
  ibgeCode  String?
  lotCount  Int?      @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  state     StateInfo @relation(fields: [stateId], references: [id])
  lots      Lot[]
}

model Court {
  id        String             @id @default(cuid())
  name      String             @unique
  slug      String             @unique
  stateUf   String
  website   String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  districts JudicialDistrict[]
  processes JudicialProcess[]
  stateId   String?
  state     StateInfo?         @relation(fields: [stateId], references: [id])
}

model JudicialDistrict {
  id         String             @id @default(cuid())
  name       String
  slug       String
  courtId    String
  stateId    String
  zipCode    String?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  court      Court              @relation(fields: [courtId], references: [id])
  state      StateInfo          @relation(fields: [stateId], references: [id])
  branches   JudicialBranch[]
  processes  JudicialProcess[]
}

model JudicialBranch {
  id            String             @id @default(cuid())
  name          String
  slug          String
  districtId    String
  contactName   String?
  phone         String?
  email         String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  district      JudicialDistrict   @relation(fields: [districtId], references: [id])
  sellers       Seller[]
  processes     JudicialProcess[]
}

model JudicialProcess {
  id              String           @id @default(cuid())
  publicId        String           @unique
  processNumber   String           @unique
  isElectronic    Boolean          @default(true)
  courtId         String
  districtId      String
  branchId        String
  sellerId        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  court           Court            @relation(fields: [courtId], references: [id])
  district        JudicialDistrict @relation(fields: [districtId], references: [id])
  branch          JudicialBranch   @relation(fields: [branchId], references: [id])
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  parties         ProcessParty[]
  bens            Bem[]
  auctions        Auction[]
}

model ProcessParty {
  id             String           @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  process        JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)
  @@unique([processId, name, partyType])
}

model Bem {
    id                         String    @id @default(cuid())
    publicId                   String    @unique
    title                      String
    description                String?   @db.Text
    status                     String
    evaluationValue            Float?
    imageUrl                   String?
    imageMediaId               String?   @unique
    dataAiHint                 String?
    locationCity               String?
    locationState              String?
    address                    String?
    latitude                   Float?
    longitude                  Float?
    createdAt                  DateTime  @default(now())
    updatedAt                  DateTime  @updatedAt
    categoryId                 String
    subcategoryId              String?
    judicialProcessId          String?
    sellerId                   String?
    plate                      String?
    make                       String?
    model                      String?
    version                    String?
    year                       Int?
    modelYear                  Int?
    mileage                    Int?
    color                      String?
    fuelType                   String?
    transmissionType           String?
    bodyType                   String?
    vin                        String?
    renavam                    String?
    enginePower                String?
    numberOfDoors              Int?
    vehicleOptions             String?
    detranStatus               String?
    debts                      String?
    runningCondition           String?
    bodyCondition              String?
    tiresCondition             String?
    hasKey                     Boolean?
    propertyRegistrationNumber String?
    iptuNumber                 String?
    isOccupied                 Boolean?
    totalArea                  Float?
    builtArea                  Float?
    bedrooms                   Int?
    suites                     Int?
    bathrooms                  Int?
    parkingSpaces              Int?
    constructionType           String?
    finishes                   String?
    infrastructure             String?
    condoDetails               String?
    improvements               String?
    topography                 String?
    liensAndEncumbrances       String?
    propertyDebts              String?
    unregisteredRecords        String?
    hasHabiteSe                Boolean?
    zoningRestrictions         String?
    amenities                  Json?
    brand                      String?
    serialNumber               String?
    itemCondition              String?
    specifications             String?
    includedAccessories        String?
    batteryCondition           String?
    hasInvoice                 Boolean?
    hasWarranty                Boolean?
    repairHistory              String?
    applianceCapacity          String?
    voltage                    String?
    applianceType              String?
    additionalFunctions        String?
    hoursUsed                  Int?
    engineType                 String?
    capacityOrPower            String?
    maintenanceHistory         String?
    installationLocation       String?
    compliesWithNR             String?
    operatingLicenses          String?
    breed                      String?
    age                        String?
    sex                        String?
    weight                     String?
    individualId               String?
    purpose                    String?
    sanitaryCondition          String?
    lineage                    String?
    isPregnant                 Boolean?
    specialSkills              String?
    gtaDocument                String?
    breedRegistryDocument      String?
    furnitureType              String?
    material                   String?
    style                      String?
    dimensions                 String?
    pieceCount                 Int?
    jewelryType                String?
    metal                      String?
    gemstones                  String?
    totalWeight                String?
    jewelrySize                String?
    authenticityCertificate    String?
    workType                   String?
    artist                     String?
    period                     String?
    technique                  String?
    provenance                 String?
    boatType                   String?
    boatLength                 String?
    hullMaterial               String?
    onboardEquipment           String?
    productName                String?
    quantity                   String?
    packagingType              String?
    expirationDate             DateTime?
    storageConditions          String?
    preciousMetalType          String?
    purity                     String?
    forestGoodsType            String?
    volumeOrQuantity           String?
    species                    String?
    dofNumber                  String?
    category                   LotCategory      @relation(fields: [categoryId], references: [id])
    subcategory                Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
    judicialProcess            JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
    seller                     Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
    image                      MediaItem?       @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
}

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())
  user          User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String        @id @default(cuid())
  userId           String
  lotId            String        @unique
  winningBidAmount Float
  winDate          DateTime
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?
  createdAt        DateTime      @default(now())
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot              Lot           @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  @@unique([userId, lotId])
}

model DirectSaleOffer {
  id                   String                @id @default(cuid())
  publicId             String                @unique
  title                String
  description          String                @db.Text
  offerType            DirectSaleOfferType
  status               DirectSaleOfferStatus
  price                Float?
  minimumOfferPrice    Float?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?               @unique
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  tags                 Json?
  views                Int                   @default(0)
  proposalsCount       Int                   @default(0)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  expiresAt            DateTime?
  categoryId           String
  sellerId             String
  image                MediaItem?            @relation("DirectSaleOfferImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  category             LotCategory           @relation(fields: [categoryId], references: [id])
  seller               Seller                @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model BlogPost {
  id              String    @id @default(cuid())
  title           String
  slug            String    @unique
  content         String    @db.Text
  authorId        String
  featuredImageId String?   @unique
  status          String    @default("DRAFT")
  publishedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  author          User      @relation(fields: [authorId], references: [id])
  image           MediaItem? @relation("BlogPostImage", fields: [featuredImageId], references: [id], onDelete: SetNull)
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                      String   @id @default(cuid())
  lotId                   String
  auctionId               String
  userId                  String
  userDisplayName         String
  questionText            String   @db.Text
  isPublic                Boolean  @default(true)
  answerText              String?  @db.Text
  answeredByUserId        String?
  answeredByUserDisplayName String?
  answeredAt              DateTime?
  createdAt               DateTime @default(now())
  lot                     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user                    User     @relation("UserQuestions", fields: [userId], references: [id], onDelete: Cascade)
  answeredBy              User?    @relation("UserAnswers", fields: [answeredByUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

model PlatformSettings {
  id                         String @id @default("global")
  siteTitle                  String
  siteTagline                String?
  galleryImageBasePath       String?
  storageProvider            String @default("local")
  firebaseStorageBucket      String?
  activeThemeName            String?
  themes                     Json?
  platformPublicIdMasks      Json?
  homepageSections           Json?
  mentalTriggerSettings      Json?
  sectionBadgeVisibility     Json?
  mapSettings                Json?
  biddingSettings            Json?
  searchPaginationType       String @default("loadMore")
  searchItemsPerPage         Int    @default(12)
  searchLoadMoreCount        Int    @default(12)
  defaultListItemsPerPage    Int    @default(10)
  showCountdownOnLotDetail   Boolean @default(true)
  showCountdownOnCards       Boolean @default(true)
  showRelatedLotsOnLotDetail Boolean @default(true)
  relatedLotsCount           Int    @default(5)
  variableIncrementTable     Json?
  updatedAt                  DateTime @updatedAt
}

model DocumentTemplate {
  id        String   @id @default(cuid())
  name      String   @unique
  type      String   // e.g., WINNING_BID_TERM, EVALUATION_REPORT, AUCTION_CERTIFICATE
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
