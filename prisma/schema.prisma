// prisma/schema.prisma

// ============================================================================
// ATENÇÃO: ESTE ARQUIVO É GERADO AUTOMATICAMENTE.
// As alterações devem ser feitas nos arquivos individuais dentro de `prisma/models`.
// Execute `npm run prisma:build` ou `npm run dev` para gerar este arquivo.
// ============================================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Auction {
  id                            String           @id @default(cuid())
  publicId                      String           @unique @default(cuid())
  slug                          String           @unique
  title                         String
  description                   String?          @db.Text
  status                        String           @default("RASCUNHO")
  auctionDate                   DateTime?
  endDate                       DateTime?
  auctioneerId                  String
  sellerId                      String
  categoryId                    String?
  auctionType                   String?
  participation                 String?
  auctionMethod                 String?
  onlineUrl                     String?
  address                       String?
  cityId                        String?
  stateId                       String?
  zipCode                       String?
  latitude                      Decimal?         @db.Decimal(10, 8)
  longitude                     Decimal?         @db.Decimal(11, 8)
  imageUrl                      String?
  imageMediaId                  String?
  documentsUrl                  String?
  evaluationReportUrl           String?
  auctionCertificateUrl         String?
  visits                        Int              @default(0)
  totalLots                     Int              @default(0)
  totalHabilitatedUsers         Int              @default(0)
  initialOffer                  Decimal?
  estimatedRevenue              Decimal?
  achievedRevenue               Decimal?
  isFeaturedOnMarketplace       Boolean?         @default(false)
  marketplaceAnnouncementTitle  String?
  automaticBiddingEnabled       Boolean?         @default(false)
  allowInstallmentBids          Boolean?         @default(true)
  silentBiddingEnabled          Boolean?         @default(false)
  softCloseEnabled              Boolean?         @default(false)
  softCloseMinutes              Int?             @default(2)
  additionalTriggers            Json?
  dataAiHint                    String?
  tenantId                      String
  judicialProcessId             String?
  sellingBranch                 String?
  decrementAmount               Decimal?
  decrementIntervalSeconds      Int?
  floorPrice                    Decimal?
  createdAt                     DateTime         @default(now())
  updatedAt                     DateTime         @updatedAt
  bids                          Bid[]
  lots                          Lot[]
  reviews                       Review[]
  questions                     LotQuestion[]
  category                      LotCategory?     @relation(fields: [categoryId], references: [id])
  auctioneer                    Auctioneer?      @relation(fields: [auctioneerId], references: [id])
  seller                        Seller?          @relation(fields: [sellerId], references: [id])
  city                          City?            @relation(fields: [cityId], references: [id])
  state                         State?           @relation(fields: [stateId], references: [id])
  tenant                        Tenant           @relation(fields: [tenantId], references: [id])
  judicialProcess               JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  habilitations                 AuctionHabilitation[]
  stages                        AuctionStage[]

  @@index([sellerId])
  @@index([auctioneerId])
  @@index([categoryId])
  @@index([tenantId])
}

model Auctioneer {
  id                 String    @id @default(cuid())
  publicId           String    @unique @default(cuid())
  slug               String    @unique
  name               String
  registrationNumber String?
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?   @db.Text
  userId             String?   @unique
  tenantId           String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  auctions           Auction[]
  lots               Lot[]
  user               User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  tenant             Tenant    @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

model AuctionHabilitation {
  userId     String
  auctionId  String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction    Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@id([userId, auctionId])
}

model AuctionStage {
  id           String    @id @default(cuid())
  auctionId    String
  name         String
  startDate    DateTime
  endDate      DateTime
  initialPrice Decimal?
  auction      Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  lotDetails   LotStageDetails[]

  @@index([auctionId])
}

model Bem {
  id                         String    @id @default(cuid())
  publicId                   String    @unique @default(cuid())
  title                      String
  description                String?   @db.Text
  status                     String    @default("DISPONIVEL")
  evaluationValue            Decimal?
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Decimal?  @db.Decimal(10, 8)
  longitude                  Decimal?  @db.Decimal(11, 8)
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
  tenantId                   String
  categoryId                 String?
  subcategoryId              String?
  judicialProcessId          String?
  sellerId                   String?
  plate                      String?
  make                       String?
  model                      String?
  version                    String?
  year                       Int?
  modelYear                  Int?
  mileage                    Int?
  color                      String?
  fuelType                   String?
  transmissionType           String?
  bodyType                   String?
  vin                        String?
  renavam                    String?
  enginePower                String?
  numberOfDoors              Int?
  vehicleOptions             String?   @db.Text
  detranStatus               String?
  debts                      String?   @db.Text
  runningCondition           String?
  bodyCondition              String?
  tiresCondition             String?
  hasKey                     Boolean?
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Decimal?
  builtArea                  Decimal?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?   @db.Text
  infrastructure             String?   @db.Text
  condoDetails               String?   @db.Text
  improvements               String?   @db.Text
  topography                 String?
  liensAndEncumbrances       String?   @db.Text
  propertyDebts              String?   @db.Text
  unregisteredRecords        String?   @db.Text
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String?   @db.Text
  includedAccessories        String?   @db.Text
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String?   @db.Text
  applianceCapacity          String?
  voltage                    String?
  applianceType              String?
  additionalFunctions        String?
  hoursUsed                  Int?
  engineType                 String?
  capacityOrPower            String?
  maintenanceHistory         String?   @db.Text
  installationLocation       String?
  compliesWithNR             String?
  operatingLicenses          String?
  breed                      String?
  age                        String?
  sex                        String?
  weight                     String?
  individualId               String?
  purpose                    String?
  sanitaryCondition          String?
  lineage                    String?
  isPregnant                 Boolean?
  specialSkills              String?
  gtaDocument                String?
  breedRegistryDocument      String?
  furnitureType              String?
  material                   String?
  style                      String?
  dimensions                 String?
  pieceCount                 Int?
  jewelryType                String?
  metal                      String?
  gemstones                  String?
  totalWeight                String?
  jewelrySize                String?
  authenticityCertificate    String?
  workType                   String?
  artist                     String?
  period                     String?
  technique                  String?
  provenance                 String?
  boatType                   String?
  boatLength                 String?
  hullMaterial               String?
  onboardEquipment           String?   @db.Text
  productName                String?
  quantity                   String?
  packagingType              String?
  expirationDate             DateTime?
  storageConditions          String?
  preciousMetalType          String?
  purity                     String?
  forestGoodsType            String?
  volumeOrQuantity           String?
  species                    String?
  dofNumber                  String?
  tenant                     Tenant    @relation(fields: [tenantId], references: [id])
  category                   LotCategory?      @relation(fields: [categoryId], references: [id])
  subcategory                Subcategory?      @relation(fields: [subcategoryId], references: [id])
  judicialProcess            JudicialProcess?  @relation(fields: [judicialProcessId], references: [id])
  seller                     Seller?           @relation(fields: [sellerId], references: [id])
  lots                       LotBens[]

  @@index([tenantId])
}

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
  tenantId      String
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  tenant        Tenant   @relation(fields: [tenantId], references: [id])

  @@index([lotId])
  @@index([bidderId])
  @@index([tenantId])
}

model City {
  id       String    @id @default(cuid())
  name     String
  slug     String    @unique
  stateId  String
  stateUf  String?
  ibgeCode String?   @unique
  lotCount Int       @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  auctions Auction[]
  lots     Lot[]
  state    State     @relation(fields: [stateId], references: [id], onDelete: Cascade)
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Court {
  id                String              @id @default(cuid())
  name              String              @unique
  slug              String              @unique
  stateUf           String?
  website           String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model DataSource {
  id        String @id @default(cuid())
  name      String @unique
  modelName String @unique
  fields    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DirectSaleOffer {
  id                   String    @id @default(cuid())
  publicId             String    @unique @default(cuid())
  title                String
  description          String?   @db.Text
  offerType            String?
  price                Decimal?  @db.Decimal(15, 2)
  minimumOfferPrice    Decimal?  @db.Decimal(15, 2)
  status               String    @default("ACTIVE")
  category             String?
  sellerId             String?
  sellerName           String?
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int       @default(0)
  expiresAt            DateTime?
  tenantId             String
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  seller               Seller?   @relation(fields: [sellerId], references: [id])
  tenant               Tenant    @relation(fields: [tenantId], references: [id])

  @@index([sellerId])
  @@index([tenantId])
}

model DocumentTemplate {
  id        String   @id @default(cuid())
  name      String
  type      String
  content   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DocumentType {
  id          String         @id @default(cuid())
  name        String         @unique
  description String?
  isRequired  Boolean        @default(true)
  appliesTo   String?        @default("ALL") // e.g., "PHYSICAL,LEGAL"
  documents   UserDocument[]
}

model InstallmentPayment {
  id                String   @id @default(cuid())
  userWinId         String
  installmentNumber Int
  amount            Decimal  @db.Decimal(15, 2)
  dueDate           DateTime
  status            String   @default("PENDENTE") // PENDENTE, PAGO, ATRASADO
  paidAt            DateTime?
  win               UserWin  @relation(fields: [userWinId], references: [id], onDelete: Cascade)

  @@index([userWinId])
}

model JudicialBranch {
  id                String              @id @default(cuid())
  name              String
  slug              String              @unique
  districtId        String
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  district          JudicialDistrict    @relation(fields: [districtId], references: [id], onDelete: Cascade)
  judicialProcesses JudicialProcess[]
  Seller            Seller[]
  auctions          Auction[]

  @@index([districtId])
}

model JudicialDistrict {
  id                String            @id @default(cuid())
  name              String
  slug              String            @unique
  courtId           String
  stateId           String
  zipCode           String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  branches          JudicialBranch[]
  court             Court             @relation(fields: [courtId], references: [id])
  state             State             @relation(fields: [stateId], references: [id])
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialParty {
  id             String          @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      String
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@index([processId])
}

model JudicialProcess {
  id            String           @id @default(cuid())
  publicId      String           @unique @default(cuid())
  processNumber String
  isElectronic  Boolean          @default(true)
  courtId       String
  districtId    String
  branchId      String
  sellerId      String?
  tenantId      String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  bens          Bem[]
  auctions      Auction[]
  court         Court            @relation(fields: [courtId], references: [id])
  district      JudicialDistrict @relation(fields: [districtId], references: [id])
  branch        JudicialBranch   @relation(fields: [branchId], references: [id])
  seller        Seller?          @relation(fields: [sellerId], references: [id])
  tenant        Tenant           @relation(fields: [tenantId], references: [id])
  parties       JudicialParty[]

  @@unique([processNumber, tenantId])
  @@index([tenantId])
}

model Lot {
  id                        String    @id @default(cuid())
  publicId                  String    @unique @default(cuid())
  auctionId                 String
  slug                      String?
  number                    String?
  title                     String
  description               String?   @db.Text
  price                     Decimal   @db.Decimal(15, 2)
  initialPrice              Decimal?  @db.Decimal(15, 2)
  secondInitialPrice        Decimal?  @db.Decimal(15, 2)
  bidIncrementStep          Decimal?  @db.Decimal(10, 2)
  status                    String    @default("EM_BREVE")
  bidsCount                 Int       @default(0)
  views                     Int       @default(0)
  isFeatured                Boolean   @default(false)
  isExclusive               Boolean   @default(false)
  discountPercentage        Int?
  additionalTriggers        Json?
  imageUrl                  String?
  imageMediaId              String?
  galleryImageUrls          Json?
  mediaItemIds              Json?
  type                      String
  condition                 String?
  dataAiHint                String?
  latitude                  Decimal?  @db.Decimal(10, 8)
  longitude                 Decimal?  @db.Decimal(11, 8)
  mapAddress                String?
  mapEmbedUrl               String?
  mapStaticImageUrl         String?
  endDate                   DateTime?
  auctionDate               DateTime?
  lotSpecificAuctionDate    DateTime?
  secondAuctionDate         DateTime?
  winningBidTermUrl         String?
  allowInstallmentBids      Boolean   @default(false)
  tenantId                  String
  inheritedMediaFromBemId   String?
  originalLotId             String?
  isRelisted                Boolean   @default(false)
  relistCount               Int       @default(0)
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  categoryId                String?
  subcategoryId             String?
  sellerId                  String?
  auctioneerId              String?
  cityId                    String?
  stateId                   String?
  winnerId                  String?
  bids                      Bid[]
  wins                      UserWin[]
  reviews                   Review[]
  questions                 LotQuestion[]
  bens                      LotBens[]
  maxBids                   UserLotMaxBid[]
  auction                   Auction    @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                  LotCategory?   @relation(fields: [categoryId], references: [id])
  subcategory               Subcategory?   @relation(fields: [subcategoryId], references: [id])
  seller                    Seller?        @relation(fields: [sellerId], references: [id])
  auctioneer                Auctioneer?    @relation(fields: [auctioneerId], references: [id])
  city                      City?          @relation(fields: [cityId], references: [id])
  state                     State?         @relation(fields: [stateId], references: [id])
  winner                    User?          @relation(fields: [winnerId], references: [id])
  tenant                    Tenant         @relation(fields: [tenantId], references: [id])
  originalLot               Lot?           @relation("LotRelist", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLots              Lot[]          @relation("LotRelist")
  stageDetails              LotStageDetails[]

  @@index([auctionId])
  @@index([status])
  @@index([tenantId])
}

model LotBens {
  lotId String
  bemId String
  lot   Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bem   Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)

  @@id([lotId, bemId])
  @@index([bemId])
}

model LotCategory {
  id                   String        @id @default(cuid())
  name                 String        @unique
  slug                 String        @unique
  description          String?
  hasSubcategories     Boolean       @default(false)
  logoUrl              String?
  logoMediaId          String?
  dataAiHintIcon       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  iconName             String?
  subcategories        Subcategory[]
  auctions             Auction[]
  lots                 Lot[]
  bens                 Bem[]
}

model LotQuestion {
  id                        String    @id @default(cuid())
  lotId                     String
  auctionId                 String
  userId                    String
  userDisplayName           String
  questionText              String    @db.Text
  answerText                String?   @db.Text
  answeredByUserId          String?
  answeredByUserDisplayName String?
  answeredAt                DateTime?
  isPublic                  Boolean   @default(true)
  createdAt                 DateTime  @default(now())
  lot                       Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction                   Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user                      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  answeredBy                User?     @relation("answeredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)

  @@index([lotId])
}

model LotStageDetails {
  id             String    @id @default(cuid())
  lotId          String
  stageId        String
  initialBid     Decimal?
  bidIncrement   Decimal?
  lot            Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
  stage          AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)

  @@unique([lotId, stageId])
}

model MediaItem {
  id                  String   @id @default(cuid())
  fileName            String
  storagePath         String
  title               String?
  altText             String?
  caption             String?
  description         String?  @db.Text
  mimeType            String
  sizeBytes           Int?
  urlOriginal         String
  urlThumbnail        String?
  urlMedium           String?
  urlLarge            String?
  linkedLotIds        Json?
  dataAiHint          String?
  uploadedAt          DateTime @default(now())
  judicialProcessId   String?
  uploadedByUserId    String?
  uploadedBy          User?    @relation(fields: [uploadedByUserId], references: [id], onDelete: SetNull)

  @@index([uploadedByUserId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  tenantId  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant    Tenant   @relation(fields: [tenantId], references: [id])

  @@index([userId])
  @@index([tenantId])
}

model PlatformSettings {
  id                         String   @id @default(cuid())
  siteTitle                  String?
  siteTagline                String?
  logoUrl                    String?
  faviconUrl                 String?
  galleryImageBasePath       String?
  storageProvider            String?
  firebaseStorageBucket      String?
  activeThemeName            String?
  defaultListItemsPerPage    Int?
  showCountdownOnLotDetail   Boolean?
  showCountdownOnCards       Boolean?
  showRelatedLotsOnLotDetail Boolean?
  relatedLotsCount           Int?
  defaultUrgencyTimerHours   Int?
  searchPaginationType       String?
  searchItemsPerPage         Int?
  searchLoadMoreCount        Int?
  tenantId                   String   @unique
  themes                     Json?
  platformPublicIdMasks      Json?
  homepageSections           Json?
  mapSettings                Json?
  variableIncrementTable     Json?
  biddingSettings            Json?
  paymentGatewaySettings     Json?
  mentalTriggerSettings      Json?
  sectionBadgeVisibility     Json?
  tenant                     Tenant   @relation(fields: [tenantId], references: [id])
}

model Report {
  id          String   @id @default(cuid())
  name        String
  description String?
  definition  Json
  tenantId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenant      Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String   @db.Text
  createdAt       DateTime @default(now())
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([lotId])
}

model Role {
  id            String         @id @default(cuid())
  name          String         @unique
  nameNormalized String         @unique
  description   String?
  permissions   String[]
  users         UsersOnRoles[]
}

model Seller {
  id                   String            @id @default(cuid())
  publicId             String            @unique @default(cuid())
  slug                 String            @unique
  name                 String
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?           @db.Text
  userId               String?           @unique
  isJudicial           Boolean           @default(false)
  tenantId             String
  judicialBranchId     String?           @unique
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  auctions             Auction[]
  lots                 Lot[]
  bens                 Bem[]
  judicialProcesses    JudicialProcess[]
  directSaleOffers     DirectSaleOffer[]
  user                 User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  judicialBranch       JudicialBranch?   @relation(fields: [judicialBranchId], references: [id])
  tenant               Tenant            @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

model State {
  id      String   @id @default(cuid())
  name    String
  uf      String   @unique
  slug    String   @unique
  cities  City[]
  cityCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  auctions Auction[]
  lots    Lot[]
  judicialDistricts JudicialDistrict[]
}

model Subcategory {
  id                 String      @id @default(cuid())
  name               String
  slug               String      @unique
  parentCategoryId   String
  description        String?
  displayOrder       Int         @default(0)
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots               Lot[]
  bens               Bem[]

  @@index([parentCategoryId])
}

model Tenant {
  id                String              @id @default(cuid())
  name              String
  subdomain         String              @unique
  domain            String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  users             UsersOnTenants[]
  auctions          Auction[]
  lots              Lot[]
  bens              Bem[]
  sellers           Seller[]
  auctioneers       Auctioneer[]
  judicialProcesses JudicialProcess[]
  directSaleOffers  DirectSaleOffer[]
  notifications     Notification[]
  reports           Report[]
  platformSettings  PlatformSettings?
}

model User {
  id                  String                @id @default(cuid())
  email               String                @unique
  password            String?
  fullName            String?
  cpf                 String?
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  cellPhone           String?
  homePhone           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  avatarUrl           String?
  dataAiHint          String?
  habilitationStatus  String                @default("PENDING_DOCUMENTS")
  accountType         String                @default("PHYSICAL")
  razaoSocial         String?
  cnpj                String?
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  badges              Json?
  optInMarketing      Boolean               @default(false)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  reviews             Review[]
  questions           LotQuestion[]
  answeredQuestions   LotQuestion[]         @relation("answeredBy")
  mediaItems          MediaItem[]
  maxBids             UserLotMaxBid[]
  roles               UsersOnRoles[]
  tenants             UsersOnTenants[]
  habilitations       AuctionHabilitation[]
}

model UserDocument {
  id              String       @id @default(cuid())
  userId          String
  documentTypeId  String
  status          String       @default("PENDING_ANALYSIS") // PENDING_ANALYSIS, APPROVED, REJECTED
  fileUrl         String
  fileName        String?
  rejectionReason String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model UsersOnRoles {
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model UsersOnTenants {
  userId     String
  tenantId   String
  assignedAt DateTime @default(now())
  assignedBy String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@id([userId, tenantId])
}

model UserWin {
  id                String               @id @default(cuid())
  lotId             String
  userId            String
  winningBidAmount  Decimal              @db.Decimal(15, 2)
  winDate           DateTime             @default(now())
  paymentStatus     String               @default("PENDENTE")
  invoiceUrl        String?
  lot               Lot                  @relation(fields: [lotId], references: [id])
  user              User                 @relation(fields: [userId], references: [id])
  installments      InstallmentPayment[]

  @@unique([lotId])
}

model VehicleMake {
  id     String         @id @default(cuid())
  name   String         @unique
  slug   String         @unique
  models VehicleModel[]
}

model VehicleModel {
  id     String      @id @default(cuid())
  name   String
  slug   String
  makeId String
  make   VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)

  @@unique([makeId, name])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  usedAt    DateTime?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
