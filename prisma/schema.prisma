// prisma/header.prisma
// Este é o cabeçalho do schema do Prisma.
// Ele contém as configurações do gerador e da fonte de dados.
// NÃO adicione modelos de dados aqui. Os modelos devem ser definidos
// em arquivos individuais no diretório `prisma/models`.

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

/// Modelo de Ativo (Bem). Representa um item individual
/// que pode ser leiloado, como um carro, uma casa, ou um equipamento.
/// Um ou mais ativos podem ser agrupados em um Lote.
model Asset {
  id                String   @id @default(cuid())
  publicId          String   @unique @map("public_id")
  title             String
  description       String?  @db.Text
  status            String   @default("DISPONIVEL")
  evaluationValue   Decimal? @db.Decimal(12, 2) @map("evaluation_value")

  // Imagem Principal
  imageUrl          String?  @map("image_url")
  imageMediaId      String?  @map("image_media_id")
  mediaItem         MediaItem? @relation("AssetImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  // Galeria de Imagens (Relação Many-to-Many)
  gallery           AssetMedia[] @relation("AssetGallery")

  dataAiHint        String?  @map("data_ai_hint")

  // Relacionamentos
  category          LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId        String?      @map("category_id")
  subcategory       Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId     String?      @map("subcategory_id")

  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId String?          @map("judicial_process_id")

  seller            Seller?       @relation(fields: [sellerId], references: [id])
  sellerId          String?       @map("seller_id")
  
  // Endereço
  street         String?
  number         String?
  complement     String?
  neighborhood   String?
  zipCode        String?       @map("zip_code")
  latitude       Decimal?      @db.Decimal(10, 8)
  longitude      Decimal?      @db.Decimal(11, 8)
  city           City?         @relation(fields: [cityId], references: [id])
  cityId         String?       @map("city_id")
  state          State?        @relation(fields: [stateId], references: [id])
  stateId        String?       @map("state_id")
  
  properties        Json?

  // Relacionamento com lotes
  lots              AssetsOnLots[]

  tenant            Tenant @relation(fields: [tenantId], references: [id])
  tenantId          String @map("tenant_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("assets")
}

/// Modelo de junção para a relação many-to-many
/// entre Ativos (Assets) e Itens de Mídia (MediaItem), representando
/// a galeria de imagens de um ativo.
model AssetMedia {
  asset      Asset     @relation("AssetGallery", fields: [assetId], references: [id], onDelete: Cascade)
  assetId    String
  mediaItem  MediaItem @relation("AssetMediaGallery", fields: [mediaId], references: [id], onDelete: Cascade)
  mediaId    String
  order      Int       @default(0)

  @@id([assetId, mediaId])
  @@map("asset_media")
}

/// Status of an individual asset.
enum AssetStatus {
  /// The asset is being registered and is not ready to be used.
  CADASTRO
  /// The asset is available in the inventory to be added to a lot.
  DISPONIVEL
  /// The asset is already part of a lot.
  LOTEADO
  /// The asset has been sold (as part of a lot).
  VENDIDO
  /// The asset has been removed from the inventory (e.g., returned to the consignor).
  REMOVIDO
  /// The asset is no longer active, but the record is kept.
  INATIVADO
}
// /prisma/models/AssetsOnLots.prisma

model AssetsOnLots {
  lot      Lot    @relation(fields: [lotId], references: [id])
  lotId    String
  asset    Asset  @relation(fields: [assetId], references: [id])
  assetId  String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([lotId, assetId])
}

// prisma/models/auction.prisma
model Auction {
  id              String   @id @default(cuid())
  publicId        String?  @unique
  slug            String?  @unique
  title           String
  description     String?  @db.Text
  status          AuctionStatus @default(RASCUNHO)
  auctionDate     DateTime?
  endDate         DateTime?
  visits          Int      @default(0)
  totalLots       Int      @default(0)
  totalHabilitatedUsers Int @default(0)
  initialOffer    Decimal? @db.Decimal(15, 2)
  achievedRevenue Decimal? @db.Decimal(15, 2)
  isFeaturedOnMarketplace Boolean @default(false)
  additionalTriggers String?

  imageMediaId    String?
  documentsUrl    String? @db.VarChar(500)
  evaluationReportUrl String? @db.VarChar(500)
  auctionCertificateUrl String? @db.VarChar(500)

  auctionType    AuctionType?
  auctionMethod  AuctionMethod? @default(STANDARD)
  participation  AuctionParticipation? @default(ONLINE)

  onlineUrl       String? @db.VarChar(500)
  address         String?
  zipCode         String? @db.VarChar(10)
  latitude        Decimal? @db.Decimal(10, 8)
  longitude       Decimal? @db.Decimal(11, 8)

  softCloseEnabled Boolean? @default(false)
  softCloseMinutes Int?
  
  decrementAmount Decimal? @db.Decimal(10, 2)
  decrementIntervalSeconds Int?
  floorPrice      Decimal? @db.Decimal(15, 2)
  
  isRelisted      Boolean  @default(false)
  relistCount     Int      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  
  auctioneerId    String?
  auctioneer      Auctioneer? @relation(fields: [auctioneerId], references: [id])
  
  sellerId        String?
  seller          Seller?     @relation(fields: [sellerId], references: [id])
  
  cityId          String?
  city            City?       @relation(fields: [cityId], references: [id])
  
  stateId         String?
  state           State?      @relation(fields: [stateId], references: [id])
  
  lots            Lot[]
  bids            Bid[]
  stages          AuctionStage[]
  habilitations   AuctionHabilitation[]

  judicialProcessId String?
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])

  originalAuctionId String?   @unique
  originalAuction   Auction?    @relation("RelistHistory", fields: [originalAuctionId], references: [id])
  relistedAuction   Auction?    @relation("RelistHistory")

  @@index([tenantId])
  @@index([sellerId])
  @@index([auctioneerId])
  @@index([status])
  @@index([auctionType])
  Court Court[] @relation(map: "CourtAuctions")
  JudicialBranch JudicialBranch[] @relation(map: "BranchAuctions")
  LotCategory LotCategory[]
  LotQuestion LotQuestion[]
  JudicialDistrict JudicialDistrict[] @relation(map: "DistrictAuctions")
  Review Review[]
}

model AuctionHabilitation {
  userId      String
  auctionId   String
  habilitatedAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@id([userId, auctionId])
  @@index([auctionId])
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

model AuctionStage {
  id           String   @id @default(cuid())
  name         String
  startDate    DateTime @db.DateTime(0)
  endDate      DateTime @db.DateTime(0)
  initialPrice Decimal? @db.Decimal(15, 2)
  auctionId    String

  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@index([auctionId])
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  VENDA_DIRETA
}


model Auctioneer {
  id                   String    @id @default(cuid())
  publicId             String    @unique
  slug                 String    @unique
  name                 String
  registrationNumber   String?   @db.Text
  contactName          String?   @db.Text
  email                String?   @db.Text
  phone                String?   @db.Text
  address              String?   @db.Text
  city                 String?   @db.Text
  state                String?   @db.Text
  zipCode              String?   @db.Text
  website              String?   @db.Text
  logoUrl              String?   @db.Text
  logoMediaId          String?
  dataAiHintLogo       String?   @db.Text
  description          String?   @db.Text
  userId               String?   @unique
  user                 User?     @relation("UserAuctioneer", fields: [userId], references: [id], onDelete: SetNull)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  auctions             Auction[]
  lots                 Lot[]
  // Multi-Tenant
  tenant               Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId             String
}

/// Representa um lance feito por um usuário em um lote.
model Bid {
  id            String   @id @default(uuid())
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
  bidderDisplay String?

  // Relações
  lot       Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId String
  bidder    User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId  String

  // Multi-Tenant
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId String
}

model ContactMessage {
  id      String   @id @default(cuid())
  name    String
  email   String
  subject String?
  message String   @db.Text
  isRead  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Court {
  id                String              @id @default(cuid())
  name              String
  slug              String?             @unique
  stateUf           String?
  website           String?
  createdAt         DateTime?           @default(now())
  updatedAt         DateTime?           @updatedAt
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]           @relation(map: "CourtAuctions")
}

/// @Model {label: "Fonte de Dados de Relatório", icon: "database"}
model DataSource {
  id        String @id @default(cuid())
  name      String
  modelName String @unique
  fields    Json

  @@map("data_sources")
}


model DirectSaleOffer {
  id                   String                @id @default(cuid())
  publicId             String                @unique
  title                String
  description          String?               @db.Text
  offerType            DirectSaleOfferType
  price                Decimal?              @db.Decimal(15, 2)
  minimumOfferPrice    Decimal?              @db.Decimal(15, 2)
  status               DirectSaleOfferStatus @default(ACTIVE)
  sellerId             String
  seller               Seller                @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerName           String?
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  categoryId           String
  category             LotCategory           @relation(fields: [categoryId], references: [id])
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int                   @default(0)
  expiresAt            DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  tenant               Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId             String
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

model DocumentTemplate {
  id      String   @id @default(cuid())
  name    String   @unique
  type    DocumentTemplateType
  content String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

model DocumentType {
  id              String         @id @default(cuid())
  name            String   @unique
  description     String?
  isRequired      Boolean        @default(true)
  appliesTo       String // e.g., 'PHYSICAL,LEGAL'
  userDocuments   UserDocument[]
}

model InstallmentPayment {
  id                String        @id @default(cuid())
  userWinId         String
  installmentNumber Int
  amount            Decimal       @db.Decimal(15, 2)
  dueDate           DateTime
  status            PaymentStatus @default(PENDENTE)
  paymentDate       DateTime?
  paymentMethod     String?
  transactionId     String?
  userWin           UserWin       @relation(fields: [userWinId], references: [id], onDelete: Cascade)

  @@unique([userWinId, installmentNumber])
  @@index([userWinId])
  Lot Lot[]
}

model JudicialBranch {
  id                String              @id @default(cuid())
  name              String            @unique
  slug              String?             @unique
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime?           @default(now())
  updatedAt         DateTime?           @updatedAt
  district          JudicialDistrict?   @relation(fields: [districtId], references: [id])
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
  auctions          Auction[]           @relation(map: "BranchAuctions")
}

model JudicialDistrict {
  id                String            @id @default(cuid())
  name              String            @unique
  slug              String?           @unique
  courtId           String?
  stateId           String?
  zipCode           String?
  createdAt         DateTime?         @default(now())
  updatedAt         DateTime?         @updatedAt
  court             Court?            @relation(fields: [courtId], references: [id])
  state             State?            @relation(fields: [stateId], references: [id])
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]         @relation(map: "DistrictAuctions")
}

model JudicialParty {
  id             String           @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType

  process JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@index([processId])
}

model JudicialProcess {
  id                String  @id @default(cuid())
  publicId          String  @unique
  processNumber     String
  isElectronic      Boolean @default(true)
  courtId           String?
  districtId        String?
  branchId          String?
  sellerId          String?
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt
  tenantId          String
  assets            Asset[]
  auctions          Auction[] @relation(map: "AuctionToJudicialProcess")

  // Relations
  court             Court?            @relation(fields: [courtId], references: [id])
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch            JudicialBranch?   @relation(fields: [branchId], references: [id])
  seller            Seller?           @relation(fields: [sellerId], references: [id])
  tenant            Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  parties           JudicialParty[] // Back-relation added here

  @@unique([processNumber, tenantId])
  MediaItem MediaItem[]
}
/// Modelo para Lotes individuais dentro de um leilão.
model Lot {
  id                      String    @id @default(cuid())
  publicId                String?   @unique
  auctionId               String
  slug                    String?
  number                  String?
  title                   String
  description             String?   @db.Text
  price                   Decimal   @db.Decimal(15, 2)
  initialPrice            Decimal?  @db.Decimal(15, 2)
  secondInitialPrice      Decimal?  @db.Decimal(15, 2)
  bidIncrementStep        Decimal?  @db.Decimal(10, 2)
  evaluationValue         Decimal?  @db.Decimal(15, 2)
  status                  LotStatus @default(EM_BREVE)
  bidsCount               Int?      @default(0)
  views                   Int?      @default(0)
  isFeatured              Boolean?  @default(false)
  isExclusive             Boolean?  @default(false)
  discountPercentage      Int?
  additionalTriggers      Json?
  imageUrl                String?   @db.Text
  imageMediaId            String?
  galleryImageUrls        Json?
  mediaItemIds            Json?
  type                    String
  categoryId              String?
  subcategoryId           String?
  auctionName             String?
  sellerId                String?
  sellerName              String?
  auctioneerId            String?
  cityId                  String?
  stateId                 String?
  cityName                String?
  stateUf                 String?
  latitude                Decimal?
  longitude               Decimal?
  mapAddress              String?
  mapEmbedUrl             String?   @db.Text
  mapStaticImageUrl       String?   @db.Text
  endDate                 DateTime?
  auctionDate             DateTime?
  lotSpecificAuctionDate  DateTime?
  secondAuctionDate       DateTime?
  condition               String?
  dataAiHint              String?
  winnerId                String?
  winningBidTermUrl       String?
  allowInstallmentBids    Boolean?  @default(false)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  tenantId                String

  // Relacionamentos
  tenant          Tenant              @relation(fields: [tenantId], references: [id])
  auction         Auction             @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category        LotCategory?        @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory?        @relation(fields: [subcategoryId], references: [id])
  seller          Seller?             @relation(fields: [sellerId], references: [id])
  auctioneer      Auctioneer?         @relation(fields: [auctioneerId], references: [id])
  city            City?               @relation(fields: [cityId], references: [id])
  state           State?              @relation(fields: [stateId], references: [id])
  winner          User?               @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  assets          AssetsOnLots[]
  bids            Bid[]
  reviews         Review[]
  questions       LotQuestion[]
  maxBids         UserLotMaxBid[]
  userWins        UserWin[]
  originalLotId   String?             @unique @map("original_lot_id")
  originalLot     Lot?                @relation("Relist", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot     Lot?                @relation("Relist")
  isRelisted      Boolean             @default(false)
  relistCount     Int                 @default(0)
  installments    InstallmentPayment[]
  stageDetails    Json?

  @@unique([auctionId, number])
}

// prisma/models/LotCategory.prisma
model LotCategory {
  id              String        @id @default(cuid())
  name            String
  slug            String        @unique
  description     String?       @db.Text
  hasSubcategories Boolean?      @default(false)
  logoUrl         String?       @db.Text
  logoMediaId     String?       @db.Text
  dataAiHintLogo  String?       @db.Text
  coverImageUrl   String?       @db.Text
  coverImageMediaId String?     @db.Text
  dataAiHintCover String?       @db.Text
  megaMenuImageUrl String?      @db.Text
  megaMenuImageMediaId String?  @db.Text
  dataAiHintMegaMenu String?    @db.Text
  createdAt       DateTime?     @default(now())
  updatedAt       DateTime?     @updatedAt
  
  // Relations
  subcategories   Subcategory[]
  auctions        Auction[]
  lots            Lot[]
  assets          Asset[]

  @@unique([name])
  DirectSaleOffer DirectSaleOffer[]
}


model LotQuestion {
  id                      String    @id @default(cuid())
  lot                     Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId                   String
  auction                 Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId               String
  user                    User      @relation(fields: [userId], references: [id])
  userId                  String
  userDisplayName         String
  questionText            String    @db.Text
  answerText              String?   @db.Text
  answeredByUserId        String?
  answeredByUserDisplayName String?
  answeredAt              DateTime?
  isPublic                Boolean   @default(true)
  createdAt               DateTime  @default(now())

  @@index([lotId])
  @@index([userId])
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
  RETIRADO
}

/// Modelo de Item de Mídia. Representa um único arquivo
/// (imagem, PDF, etc.) armazenado, com seus metadados.
model MediaItem {
  id           String  @id @default(cuid())
  fileName     String
  mimeType     String
  sizeBytes    Int
  storagePath  String  @unique
  urlOriginal  String
  urlThumbnail String?
  title        String?
  altText      String?
  caption      String?
  description  String?
  dataAiHint   String? @map("data_ai_hint")

  uploadedByUserId String?       @map("uploaded_by_user_id")
  uploadedBy       User?         @relation(fields: [uploadedByUserId], references: [id])
  
  judicialProcessId String?       @map("judicial_process_id")
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])

  // Relação para imagem principal de um Ativo
  imageForAssets Asset[] @relation("AssetImage")

  // Relação para galeria de um Ativo
  galleryForAssets AssetMedia[] @relation("AssetMediaGallery")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("media_items")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  tenantId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([userId])
}


/// @model
/// @description Armazena tokens temporários para redefinição de senha.
model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

// prisma/models/PlatformSettings.prisma

model PlatformSettings {
  id                        String    @id @default(cuid())
  isSetupComplete           Boolean   @default(false) @map("is_setup_complete")
  siteTitle                 String?   @map("site_title")
  siteTagline               String?   @map("site_tagline")
  logoUrl                   String?   @map("logo_url")
  faviconUrl                String?   @map("favicon_url")
  galleryImageBasePath      String?   @map("gallery_image_base_path")
  storageProvider           String?   @map("storage_provider")
  firebaseStorageBucket     String?   @map("firebase_storage_bucket")
  activeThemeName           String?   @map("active_theme_name")
  themes                    Json?
  platformPublicIdMasks     Json?     @map("platform_public_id_masks")
  mentalTriggerSettings     Json?     @map("mental_trigger_settings")
  sectionBadgeVisibility    Json?     @map("section_badge_visibility")
  mapSettings               Json?     @map("map_settings")
  notificationSettings      Json?     @map("notification_settings")
  defaultUrgencyTimerHours  Int?      @map("default_urgency_timer_hours")
  variableIncrementTable    Json?     @map("variable_increment_table")
  biddingSettings           Json?     @map("bidding_settings")
  paymentGatewaySettings    Json?     @map("payment_gateway_settings")
  homepageSections          Json?     @map("homepage_sections")
  searchPaginationType      String?   @default("loadMore") @map("search_pagination_type")
  searchItemsPerPage        Int?      @default(12) @map("search_items_per_page")
  searchLoadMoreCount       Int?      @default(12) @map("search_load_more_count")
  showCountdownOnLotDetail  Boolean?  @default(true) @map("show_countdown_on_lot_detail")
  showCountdownOnCards      Boolean?  @default(true) @map("show_countdown_on_cards")
  showRelatedLotsOnLotDetail Boolean? @default(true) @map("show_related_lots_on_lot_detail")
  relatedLotsCount          Int?      @default(5) @map("related_lots_count")
  defaultListItemsPerPage   Int?      @default(10) @map("default_list_items_per_page")
  updatedAt                 DateTime? @updatedAt @map("updated_at")

  // Relation to Tenant
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId String @unique @map("tenant_id")
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}


model Report {
  id          String   @id @default(uuid())
  name        String
  description String?
  definition  Json
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("reports")
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String?
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([lotId])
}

model Role {
  id              String         @id @default(cuid())
  name            String         @unique
  nameNormalized  String         @unique
  description     String?
  permissions     Json?
  users           UsersOnRoles[]
}

enum SearchPaginationType {
  loadMore
  numberedPages
}


model Seller {
  id                   String              @id @default(cuid())
  publicId             String              @unique
  slug                 String              @unique
  name                 String              @unique
  contactName          String?             @db.Text
  email                String?             @db.Text
  phone                String?             @db.Text
  address              String?             @db.Text
  city                 String?             @db.Text
  state                String?             @db.Text
  zipCode              String?             @db.Text
  website              String?             @db.Text
  logoUrl              String?             @db.Text
  logoMediaId          String?
  dataAiHintLogo       String?             @db.Text
  description          String?             @db.Text
  userId               String?             @unique
  user                 User?               @relation("UserSeller", fields: [userId], references: [id], onDelete: SetNull)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  isJudicial           Boolean             @default(false)
  judicialBranchId     String?             @unique
  judicialBranch       JudicialBranch?     @relation(fields: [judicialBranchId], references: [id])
  // Relacionamentos
  auctions             Auction[]
  lots                 Lot[]
  assets               Asset[]
  directSaleOffers     DirectSaleOffer[]
  judicialProcesses    JudicialProcess[]
  // Multi-Tenant
  tenant               Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId             String
}

model State {
  id                String             @id @default(cuid())
  name              String
  uf                String             @unique
  slug              String?            @unique
  cityCount         Int?               @default(0)
  createdAt         DateTime?          @default(now())
  updatedAt         DateTime?          @updatedAt
  cities            City[]
  judicialDistricts JudicialDistrict[]
  auctions          Auction[]
  lots              Lot[]

  Asset Asset[]
}

model Subcategory {
  id                 String      @id @default(cuid())
  name               String
  slug               String
  parentCategoryId   String
  description        String?
  displayOrder       Int         @default(0)
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots               Lot[]
  assets             Asset[]

  @@unique([name, parentCategoryId])
}
// prisma/models/subscriber.prisma
/// @model Subscriber
/// @description Armazena informações de usuários que se inscreveram na newsletter ou para receber notificações.

model Subscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isVerified Boolean  @default(false)
  
  // Preferências de notificação em formato JSON. Ex: { "notifyOnNewAuction": true, "categories": ["veiculos"] }
  preferences Json?
  
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId  String
  
  @@index([tenantId])
}

/// Define um Tenant (inquilino) na plataforma. Cada Tenant representa um leiloeiro ou cliente.
model Tenant {
  id        String   @id @default(uuid())
  name      String
  subdomain String   @unique
  domain    String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações inversas
  users             UsersOnTenants[]
  auctions          Auction[]
  lots              Lot[]
  assets            Asset[]
  sellers           Seller[]
  auctioneers       Auctioneer[]
  judicialProcesses JudicialProcess[]
  directSaleOffers  DirectSaleOffer[]
  notifications     Notification[]
  bids              Bid[]
  reports           Report[]
  platformSettings  PlatformSettings?

  Subscriber Subscriber[]
}

/// Modelo para Usuários. Armazena informações de perfil, autenticação e
/// status de habilitação. É um modelo global, não associado a um tenant específico.
model User {
  id                      String                @id @default(cuid())
  email                   String                @unique
  password                String?               @db.Text
  fullName                String?               @db.Text
  habilitationStatus      UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType             AccountType           @default(PHYSICAL)
  avatarUrl               String?               @db.Text
  dataAiHint              String?               @db.Text
  badges                  Json?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  cpf                     String?               @db.Text
  rgNumber                String?               @db.Text
  rgIssuer                String?               @db.Text
  rgIssueDate             DateTime?
  rgState                 String?               @db.Text
  dateOfBirth             DateTime?
  cellPhone               String?               @db.Text
  homePhone               String?               @db.Text
  gender                  String?               @db.Text
  profession              String?               @db.Text
  nationality             String?               @db.Text
  maritalStatus           String?               @db.Text
  propertyRegime          String?               @db.Text
  spouseName              String?               @db.Text
  spouseCpf               String?               @db.Text
  zipCode                 String?               @db.Text
  street                  String?               @db.Text
  number                  String?               @db.Text
  complement              String?               @db.Text
  neighborhood            String?               @db.Text
  city                    String?               @db.Text
  state                   String?               @db.Text
  optInMarketing          Boolean?              @default(false)
  razaoSocial             String?               @db.Text
  cnpj                    String?               @db.Text
  inscricaoEstadual       String?               @db.Text
  website                 String?               @db.Text
  responsibleName         String?               @db.Text
  responsibleCpf          String?               @db.Text

  // Relations
  notifications           Notification[]
  mediaItems              MediaItem[]
  documents               UserDocument[]
  bids                    Bid[]
  maxBids                 UserLotMaxBid[]
  sellerProfile           Seller?               @relation("UserSeller")
  auctioneerProfile       Auctioneer?           @relation("UserAuctioneer")
  roles                   UsersOnRoles[]
  tenants                 UsersOnTenants[]
  wins                    UserWin[]
  lotsWon                 Lot[]                 @relation("LotWinner")
  auctionHabilitations    AuctionHabilitation[]
  lotQuestions            LotQuestion[]
  reviews                 Review[]
}

model UserDocument {
  id              String             @id @default(cuid())
  userId          String
  documentTypeId  String
  status          UserDocumentStatus @default(PENDING_ANALYSIS)
  fileUrl         String
  fileName        String?
  rejectionReason String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType DocumentType @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
  @@index([userId])
}


enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  REJEITADO
  BLOCKED
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
  @@index([lotId])
}

model UserWin {
  id                String               @id @default(cuid())
  lotId             String               @unique
  userId            String
  winningBidAmount  Decimal              @db.Decimal(15, 2)
  winDate           DateTime             @default(now())
  paymentStatus     PaymentStatus        @default(PENDENTE)
  invoiceUrl        String?
  installments      InstallmentPayment[]
  lot               Lot                  @relation(fields: [lotId], references: [id])
  user              User                 @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UsersOnRoles {
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([roleId])
}

model UsersOnTenants {
  userId     String
  tenantId   String
  assignedAt DateTime @default(now())
  assignedBy String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@id([userId, tenantId])
  @@index([tenantId])
}

model VehicleMake {
  id     String         @id @default(cuid())
  name   String         @unique
  slug   String         @unique
  models VehicleModel[]
}

model VehicleModel {
  id     String      @id @default(cuid())
  name   String
  slug   String
  makeId String
  make   VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)

  @@unique([makeId, name])
  @@index([slug])
}

model Asset {
  id                BigInt   @id @default(autoincrement())
  publicId          String   @unique @default(uuid())
  title             String
  description       String?  @db.Text
  status            String   @default("DISPONIVEL")
  categoryId        BigInt?
  subcategoryId     BigInt?
  judicialProcessId BigInt?
  sellerId          BigInt?
  evaluationValue   Decimal? @db.Decimal(12, 2)
  imageUrl          String?
  imageMediaId      String?
  dataAiHint        String?
  street            String?
  number            String?
  complement        String?
  neighborhood      String?
  cityId            BigInt?
  stateId           BigInt?
  zipCode           String?
  latitude          Decimal?
  longitude         Decimal?
  properties        Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  tenantId          String

  category        LotCategory?     @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory?     @relation(fields: [subcategoryId], references: [id])
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  city            City?            @relation(fields: [cityId], references: [id])
  state           State?           @relation(fields: [stateId], references: [id])
  lots            AssetsOnLots[]
  mediaGallery    AssetMedia[]
  tenant          Tenant           @relation(fields: [tenantId], references: [id])

  @@index([sellerId])
  @@index([judicialProcessId])
  @@index([categoryId])
}

model AssetsOnLots {
  asset     Asset    @relation(fields: [assetId], references: [id])
  assetId   BigInt
  lot       Lot      @relation(fields: [lotId], references: [id])
  lotId     BigInt
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([assetId, lotId])
}

model AuctionHabilitation {
  id        BigInt   @id @default(autoincrement())
  userId    String
  auctionId BigInt
  status    String   @default("APPROVED") // APPROVED, PENDING, REJECTED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  auction Auction @relation(fields: [auctionId], references: [id])

  @@unique([userId, auctionId])
}

model AuctionStage {
  id           BigInt    @id @default(autoincrement())
  auctionId    BigInt
  name         String
  startDate    DateTime
  endDate      DateTime
  initialPrice Decimal?  @db.Decimal(12, 2)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  statusText   String?

  auction      Auction          @relation(fields: [auctionId], references: [id])
  lotPrices    LotStagePrice[]

  @@index([auctionId])
}

model Auction {
  id                           BigInt         @id @default(autoincrement())
  publicId                     String         @unique @default(uuid())
  title                        String
  slug                         String         @unique
  description                  String?        @db.Text
  status                       String         @default("RASCUNHO")
  auctionDate                  DateTime       @default(now())
  endDate                      DateTime?
  visits                       Int            @default(0)
  totalHabilitatedUsers        Int            @default(0)
  initialOffer                 Decimal?       @db.Decimal(12, 2)
  isFeaturedOnMarketplace      Boolean        @default(false)
  additionalTriggers           Json?
  dataAiHint                   String?
  imageUrl                     String?
  imageMediaId                 String?
  documentsUrl                 String?
  evaluationReportUrl          String?
  auctionCertificateUrl        String?
  onlineUrl                    String?
  street                       String?
  number                       String?
  complement                   String?
  neighborhood                 String?
  zipCode                      String?
  latitude                     Decimal?
  longitude                    Decimal?
  auctioneerId                 BigInt?
  sellerId                     BigInt?
  categoryId                   BigInt?
  judicialProcessId            BigInt?
  cityId                       BigInt?
  stateId                      BigInt?
  tenantId                     String
  auctionType                  String?
  auctionMethod                String?        @default("STANDARD")
  participation                String?        @default("ONLINE")
  sellingBranch                String?
  automaticBiddingEnabled      Boolean        @default(false)
  allowInstallmentBids         Boolean        @default(true)
  silentBiddingEnabled         Boolean        @default(false)
  allowMultipleBidsPerUser     Boolean        @default(true)
  softCloseEnabled             Boolean        @default(false)
  softCloseMinutes             Int?           @default(2)
  estimatedRevenue             Decimal?       @db.Decimal(12, 2)
  achievedRevenue              Decimal?       @db.Decimal(12, 2)
  marketplaceAnnouncementTitle String?
  decrementAmount              Decimal?       @db.Decimal(12, 2)
  decrementIntervalSeconds     Int?
  floorPrice                   Decimal?       @db.Decimal(12, 2)
  autoRelistSettings           Json?
  createdAt                    DateTime       @default(now())
  updatedAt                    DateTime       @updatedAt

  lots          Lot[]
  bids          Bid[]
  auctioneer    Auctioneer?      @relation(fields: [auctioneerId], references: [id])
  seller        Seller?          @relation(fields: [sellerId], references: [id])
  category      LotCategory?     @relation(fields: [categoryId], references: [id])
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  city          City?            @relation(fields: [cityId], references: [id])
  state         State?           @relation(fields: [stateId], references: [id])
  tenant        Tenant           @relation(fields: [tenantId], references: [id])
  stages        AuctionStage[]
  habilitations AuctionHabilitation[]

  @@index([sellerId])
  @@index([auctioneerId])
  @@index([categoryId])
  @@index([judicialProcessId])
  @@index([tenantId])
}

model Auctioneer {
  id                 BigInt   @id @default(autoincrement())
  publicId           String   @unique @default(cuid())
  slug               String   @unique
  name               String
  registrationNumber String?
  email              String?
  phone              String?
  website            String?
  logoUrl            String?
  logoMediaId        BigInt?
  dataAiHintLogo     String?
  description        String?  @db.Text
  address            String?
  city               String?
  state              String?
  zipCode            String?
  
  rating Decimal? @db.Decimal(3, 2)
  auctionsConductedCount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenantId BigInt
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  
  userId BigInt?      @unique
  user   User?        @relation(fields: [userId], references: [id])
  
  auctions Auction[]
  lots     Lot[]
}

model Bem {
  id                  BigInt   @id @default(autoincrement())
  publicId            String   @unique @default(cuid())
  title               String
  description         String?  @db.Text
  status              String   @default("DISPONIVEL")
  evaluationValue     Decimal? @db.Decimal(12, 2)
  imageUrl            String?
  imageMediaId        String?
  galleryImageUrls    Json?
  dataAiHint          String?
  properties          Json?
  locationCity        String?
  locationState       String?
  latitude            Decimal? @db.Decimal(10, 8)
  longitude           Decimal? @db.Decimal(11, 8)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  lots                AssetsOnLots[]

  category            LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId          String?
  subcategory         Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId       String?
  judicialProcess     JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId   String?
  seller              Seller?      @relation(fields: [sellerId], references: [id])
  sellerId            String?

  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String

  @@index([tenantId])
}

model User {
  id                  BigInt       @id @default(autoincrement())
  publicId            String     @unique @default(cuid())
  email               String     @unique
  password            String
  fullName            String?
  cpf                 String?    @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  avatarUrl           String?
  dataAiHint          String?
  accountType         AccountType @default(PHYSICAL)
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  razaoSocial         String?
  cnpj                String?    @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  optInMarketing      Boolean    @default(false)
  lastLogin           DateTime?
  bids                Bid[]
  lotsWon             UserWin[]  @relation("WonLots")
  maxBids             UserLotMaxBid[]
  reviews             Review[]
  questions           LotQuestion[]
  documents           UserDocument[]
  notifications       Notification[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  uploadedMedia       MediaItem[]
  roles               UsersOnRoles[]
  tenants             UsersOnTenants[]
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@index([email])
}
model LotCategory {
  id                  BigInt        @id @default(autoincrement())
  name                String      @unique
  slug                String      @unique
  description         String?
  itemCount           Int         @default(0)
  hasSubcategories    Boolean     @default(false)
  displayOrder        Int         @default(0)

  // Media
  iconName            String?
  logoUrl             String?
  logoMediaId         BigInt?
  dataAiHintIcon      String?
  coverImageUrl       String?
  coverImageMediaId   BigInt?
  dataAiHintCover     String?
  megaMenuImageUrl    String?
  megaMenuImageMediaId BigInt?
  dataAiHintMegaMenu  String?
  
  auctions      Auction[]
  lots          Lot[]
  assets        Asset[]
  subcategories Subcategory[]
  directSaleOffers DirectSaleOffer[]
}


model City {
  id        BigInt    @id @default(autoincrement())
  slug      String    @unique
  name      String
  stateId   BigInt
  state     State     @relation(fields: [stateId], references: [id])
  ibgeCode  String?
  latitude  Decimal?
  longitude Decimal?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  auctions  Auction[]
  lots      Lot[]

  @@unique([name, stateId])
}

model User {
  id                  BigInt       @id @default(autoincrement())
  publicId            String     @unique @default(cuid())
  email               String     @unique
  password            String
  fullName            String?
  cpf                 String?    @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  avatarUrl           String?
  dataAiHint          String?
  accountType         AccountType @default(PHYSICAL)
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  razaoSocial         String?
  cnpj                String?    @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  optInMarketing      Boolean    @default(false)
  lastLogin           DateTime?
  bids                Bid[]
  lotsWon             UserWin[]  @relation("WonLots")
  maxBids             UserLotMaxBid[]
  reviews             Review[]
  questions           LotQuestion[]
  documents           UserDocument[]
  notifications       Notification[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  uploadedMedia       MediaItem[]
  roles               UsersOnRoles[]
  tenants             UsersOnTenants[]
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@index([email])
}
model User {
  id                  BigInt       @id @default(autoincrement())
  publicId            String     @unique @default(cuid())
  email               String     @unique
  password            String
  fullName            String?
  cpf                 String?    @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  avatarUrl           String?
  dataAiHint          String?
  accountType         AccountType @default(PHYSICAL)
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  razaoSocial         String?
  cnpj                String?    @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  optInMarketing      Boolean    @default(false)
  lastLogin           DateTime?
  bids                Bid[]
  lotsWon             UserWin[]  @relation("WonLots")
  maxBids             UserLotMaxBid[]
  reviews             Review[]
  questions           LotQuestion[]
  documents           UserDocument[]
  notifications       Notification[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  uploadedMedia       MediaItem[]
  roles               UsersOnRoles[]
  tenants             UsersOnTenants[]
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@index([email])
}

model DataSource {
  id        BigInt   @id @default(autoincrement())
  modelName String   @unique
  name      String
  fields    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DirectSaleOffer {
  id                BigInt     @id @default(autoincrement())
  publicId          String   @unique @default(cuid())
  title             String
  description       String?  @db.Text
  offerType         String   @default("BUY_NOW")
  status            String   @default("PENDING_APPROVAL")
  price             Decimal? @db.Decimal(12, 2)
  minimumOfferPrice Decimal? @db.Decimal(12, 2)
  
  locationCity      String?
  locationState     String?
  
  imageUrl          String?
  imageMediaId      BigInt?
  dataAiHint        String?
  galleryImageUrls  String[]
  mediaItemIds      BigInt[]

  views             Int      @default(0)
  proposalsCount    Int      @default(0)
  
  expiresAt         DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  tenantId BigInt
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  
  categoryId BigInt
  category   LotCategory @relation(fields: [categoryId], references: [id])
  
  sellerId BigInt
  seller   Seller @relation(fields: [sellerId], references: [id])
}

model User {
  id                  BigInt       @id @default(autoincrement())
  publicId            String     @unique @default(cuid())
  email               String     @unique
  password            String
  fullName            String?
  cpf                 String?    @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  avatarUrl           String?
  dataAiHint          String?
  accountType         AccountType @default(PHYSICAL)
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  razaoSocial         String?
  cnpj                String?    @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  optInMarketing      Boolean    @default(false)
  lastLogin           DateTime?
  bids                Bid[]
  lotsWon             UserWin[]  @relation("WonLots")
  maxBids             UserLotMaxBid[]
  reviews             Review[]
  questions           LotQuestion[]
  documents           UserDocument[]
  notifications       Notification[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  uploadedMedia       MediaItem[]
  roles               UsersOnRoles[]
  tenants             UsersOnTenants[]
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@index([email])
}
model User {
  id                  BigInt       @id @default(autoincrement())
  publicId            String     @unique @default(cuid())
  email               String     @unique
  password            String
  fullName            String?
  cpf                 String?    @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  avatarUrl           String?
  dataAiHint          String?
  accountType         AccountType @default(PHYSICAL)
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  razaoSocial         String?
  cnpj                String?    @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  optInMarketing      Boolean    @default(false)
  lastLogin           DateTime?
  bids                Bid[]
  lotsWon             UserWin[]  @relation("WonLots")
  maxBids             UserLotMaxBid[]
  reviews             Review[]
  questions           LotQuestion[]
  documents           UserDocument[]
  notifications       Notification[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  uploadedMedia       MediaItem[]
  roles               UsersOnRoles[]
  tenants             UsersOnTenants[]
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@index([email])
}
model InstallmentPayment {
  id                BigInt   @id @default(autoincrement())
  userWinId         BigInt
  lotId             BigInt
  installmentNumber Int
  totalInstallments Int
  amount            Decimal  @db.Decimal(12, 2)
  dueDate           DateTime
  paymentDate       DateTime?
  status            String   @default("PENDENTE") // PENDING, PAID, OVERDUE

  userWin UserWin @relation(fields: [userWinId], references: [id])
}

model User {
  id                  BigInt       @id @default(autoincrement())
  publicId            String     @unique @default(cuid())
  email               String     @unique
  password            String
  fullName            String?
  cpf                 String?    @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  avatarUrl           String?
  dataAiHint          String?
  accountType         AccountType @default(PHYSICAL)
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  razaoSocial         String?
  cnpj                String?    @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  optInMarketing      Boolean    @default(false)
  lastLogin           DateTime?
  bids                Bid[]
  lotsWon             UserWin[]  @relation("WonLots")
  maxBids             UserLotMaxBid[]
  reviews             Review[]
  questions           LotQuestion[]
  documents           UserDocument[]
  notifications       Notification[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  uploadedMedia       MediaItem[]
  roles               UsersOnRoles[]
  tenants             UsersOnTenants[]
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@index([email])
}
model User {
  id                  BigInt       @id @default(autoincrement())
  publicId            String     @unique @default(cuid())
  email               String     @unique
  password            String
  fullName            String?
  cpf                 String?    @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  avatarUrl           String?
  dataAiHint          String?
  accountType         AccountType @default(PHYSICAL)
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  razaoSocial         String?
  cnpj                String?    @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  optInMarketing      Boolean    @default(false)
  lastLogin           DateTime?
  bids                Bid[]
  lotsWon             UserWin[]  @relation("WonLots")
  maxBids             UserLotMaxBid[]
  reviews             Review[]
  questions           LotQuestion[]
  documents           UserDocument[]
  notifications       Notification[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  uploadedMedia       MediaItem[]
  roles               UsersOnRoles[]
  tenants             UsersOnTenants[]
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@index([email])
}
model JudicialParty {
  id             BigInt   @id @default(autoincrement())
  name           String
  documentNumber String?
  partyType      String
  
  processId BigInt
  process   JudicialProcess @relation(fields: [processId], references: [id])
}

model User {
  id                  BigInt       @id @default(autoincrement())
  publicId            String     @unique @default(cuid())
  email               String     @unique
  password            String
  fullName            String?
  cpf                 String?    @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  avatarUrl           String?
  dataAiHint          String?
  accountType         AccountType @default(PHYSICAL)
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  razaoSocial         String?
  cnpj                String?    @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  optInMarketing      Boolean    @default(false)
  lastLogin           DateTime?
  bids                Bid[]
  lotsWon             UserWin[]  @relation("WonLots")
  maxBids             UserLotMaxBid[]
  reviews             Review[]
  questions           LotQuestion[]
  documents           UserDocument[]
  notifications       Notification[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  uploadedMedia       MediaItem[]
  roles               UsersOnRoles[]
  tenants             UsersOnTenants[]
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@index([email])
}
// prisma/models/lot-stage-details.prisma
model LotStageDetails {
  id            Int     @id @default(autoincrement())
  lot           Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         Int
  stage         AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)
  stageId       Int
  initialBid    Decimal? @db.Decimal(12, 2)
  bidIncrement  Decimal? @db.Decimal(12, 2)

  @@unique([lotId, stageId])
}

model User {
  id                  BigInt       @id @default(autoincrement())
  publicId            String     @unique @default(cuid())
  email               String     @unique
  password            String
  fullName            String?
  cpf                 String?    @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  avatarUrl           String?
  dataAiHint          String?
  accountType         AccountType @default(PHYSICAL)
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  razaoSocial         String?
  cnpj                String?    @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  optInMarketing      Boolean    @default(false)
  lastLogin           DateTime?
  bids                Bid[]
  lotsWon             UserWin[]  @relation("WonLots")
  maxBids             UserLotMaxBid[]
  reviews             Review[]
  questions           LotQuestion[]
  documents           UserDocument[]
  notifications       Notification[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  uploadedMedia       MediaItem[]
  roles               UsersOnRoles[]
  tenants             UsersOnTenants[]
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@index([email])
}
model Lot {
  id                        BigInt           @id @default(autoincrement())
  publicId                  String           @unique
  slug                      String           @unique
  number                    String?
  title                     String
  description               String?          @db.Text
  properties                Json?
  status                    String
  price                     Decimal          @db.Decimal(12, 2)
  initialPrice              Decimal?         @db.Decimal(12, 2)
  bidIncrementStep          Decimal?         @db.Decimal(12, 2)
  evaluationValue           Decimal?         @db.Decimal(12, 2)
  discountPercentage        Float?
  views                     Int              @default(0)
  bidsCount                 Int              @default(0)
  isFeatured                Boolean          @default(false)
  isExclusive               Boolean          @default(false)
  hasKey                    Boolean          @default(false)
  imageUrl                  String?
  imageMediaId              String?
  inheritedMediaFromBemId   BigInt?
  dataAiHint                String?
  mapAddress                String?
  latitude                  Decimal?
  longitude                 Decimal?
  createdAt                 DateTime         @default(now())
  updatedAt                 DateTime         @updatedAt
  endDate                   DateTime?
  winnerId                  String?
  auctionId                 BigInt
  categoryId                BigInt?
  subcategoryId             BigInt?
  sellerId                  BigInt?
  auctioneerId              BigInt?
  stateId                   BigInt?
  cityId                    BigInt?
  tenantId                  String
  originalLotId             BigInt?
  isRelisted                Boolean          @default(false)
  relistCount               Int              @default(0)
  winningBidTermUrl         String?

  bids          Bid[]
  auction       Auction          @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category      LotCategory?     @relation(fields: [categoryId], references: [id])
  subcategory   Subcategory?     @relation(fields: [subcategoryId], references: [id])
  seller        Seller?          @relation(fields: [sellerId], references: [id])
  auctioneer    Auctioneer?      @relation(fields: [auctioneerId], references: [id])
  winner        User?            @relation("Winner", fields: [winnerId], references: [id])
  assets        AssetsOnLots[]
  state         State?           @relation(fields: [stateId], references: [id])
  city          City?            @relation(fields: [cityId], references: [id])
  tenant        Tenant           @relation(fields: [tenantId], references: [id])
  originalLot   Lot?             @relation("RelistedLots", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLots  Lot[]            @relation("RelistedLots")
  wins          UserWin[]
  reviews       Review[]
  questions     LotQuestion[]
  stagePrices   LotStagePrice[]
  maxBids       UserLotMaxBid[]

  @@index([auctionId])
  @@index([sellerId])
  @@index([winnerId])
  @@index([tenantId])
}

model MediaItem {
  id                BigInt      @id @default(autoincrement())
  fileName          String
  mimeType          String
  sizeBytes         Int
  urlOriginal       String
  urlThumbnail      String?
  storagePath       String?
  altText           String?
  title             String?
  caption           String?
  description       String?
  dataAiHint        String?
  uploadedBy        User?       @relation(fields: [uploadedByUserId], references: [id])
  uploadedByUserId  String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  judicialProcessId BigInt?
  assets            AssetMedia[]

  @@index([uploadedByUserId])
  @@index([judicialProcessId])
}

model AssetMedia {
  asset       Asset     @relation(fields: [assetId], references: [id])
  assetId     BigInt
  mediaItem   MediaItem @relation(fields: [mediaItemId], references: [id])
  mediaItemId BigInt
  displayOrder Int       @default(0)

  @@id([assetId, mediaItemId])
}

model User {
  id                  BigInt       @id @default(autoincrement())
  publicId            String     @unique @default(cuid())
  email               String     @unique
  password            String
  fullName            String?
  cpf                 String?    @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  avatarUrl           String?
  dataAiHint          String?
  accountType         AccountType @default(PHYSICAL)
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  razaoSocial         String?
  cnpj                String?    @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  optInMarketing      Boolean    @default(false)
  lastLogin           DateTime?
  bids                Bid[]
  lotsWon             UserWin[]  @relation("WonLots")
  maxBids             UserLotMaxBid[]
  reviews             Review[]
  questions           LotQuestion[]
  documents           UserDocument[]
  notifications       Notification[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  uploadedMedia       MediaItem[]
  roles               UsersOnRoles[]
  tenants             UsersOnTenants[]
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@index([email])
}
model User {
  id                  BigInt       @id @default(autoincrement())
  publicId            String     @unique @default(cuid())
  email               String     @unique
  password            String
  fullName            String?
  cpf                 String?    @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  avatarUrl           String?
  dataAiHint          String?
  accountType         AccountType @default(PHYSICAL)
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  razaoSocial         String?
  cnpj                String?    @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  optInMarketing      Boolean    @default(false)
  lastLogin           DateTime?
  bids                Bid[]
  lotsWon             UserWin[]  @relation("WonLots")
  maxBids             UserLotMaxBid[]
  reviews             Review[]
  questions           LotQuestion[]
  documents           UserDocument[]
  notifications       Notification[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  uploadedMedia       MediaItem[]
  roles               UsersOnRoles[]
  tenants             UsersOnTenants[]
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@index([email])
}
model Role {
  id             String         @id @default(cuid())
  name           String         @unique
  nameNormalized String         @unique
  description    String?
  permissions    Json
  users          UsersOnRoles[]
}

model User {
  id                  BigInt       @id @default(autoincrement())
  publicId            String     @unique @default(cuid())
  email               String     @unique
  password            String
  fullName            String?
  cpf                 String?    @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  avatarUrl           String?
  dataAiHint          String?
  accountType         AccountType @default(PHYSICAL)
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  razaoSocial         String?
  cnpj                String?    @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  optInMarketing      Boolean    @default(false)
  lastLogin           DateTime?
  bids                Bid[]
  lotsWon             UserWin[]  @relation("WonLots")
  maxBids             UserLotMaxBid[]
  reviews             Review[]
  questions           LotQuestion[]
  documents           UserDocument[]
  notifications       Notification[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  uploadedMedia       MediaItem[]
  roles               UsersOnRoles[]
  tenants             UsersOnTenants[]
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@index([email])
}
model State {
  id      BigInt    @id @default(autoincrement())
  name    String    @unique
  uf      String    @unique
  slug    String    @unique
  
  cities  City[]
  districts JudicialDistrict[]
  courts  Court[]
}

model User {
  id                  BigInt       @id @default(autoincrement())
  publicId            String     @unique @default(cuid())
  email               String     @unique
  password            String
  fullName            String?
  cpf                 String?    @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  avatarUrl           String?
  dataAiHint          String?
  accountType         AccountType @default(PHYSICAL)
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  razaoSocial         String?
  cnpj                String?    @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  optInMarketing      Boolean    @default(false)
  lastLogin           DateTime?
  bids                Bid[]
  lotsWon             UserWin[]  @relation("WonLots")
  maxBids             UserLotMaxBid[]
  reviews             Review[]
  questions           LotQuestion[]
  documents           UserDocument[]
  notifications       Notification[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  uploadedMedia       MediaItem[]
  roles               UsersOnRoles[]
  tenants             UsersOnTenants[]
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@index([email])
}
model User {
  id                  BigInt       @id @default(autoincrement())
  publicId            String     @unique @default(cuid())
  email               String     @unique
  password            String
  fullName            String?
  cpf                 String?    @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  avatarUrl           String?
  dataAiHint          String?
  accountType         AccountType @default(PHYSICAL)
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  razaoSocial         String?
  cnpj                String?    @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  optInMarketing      Boolean    @default(false)
  lastLogin           DateTime?
  bids                Bid[]
  lotsWon             UserWin[]  @relation("WonLots")
  maxBids             UserLotMaxBid[]
  reviews             Review[]
  questions           LotQuestion[]
  documents           UserDocument[]
  notifications       Notification[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  uploadedMedia       MediaItem[]
  roles               UsersOnRoles[]
  tenants             UsersOnTenants[]
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@index([email])
}
model UserDocument {
  id               BigInt      @id @default(autoincrement())
  userId           String
  documentTypeId   BigInt
  fileUrl          String
  fileName         String
  status           UserDocumentStatus @default(SUBMITTED)
  rejectionReason  String?
  
  uploadedAt       DateTime @default(now())
  verifiedAt       DateTime?
  
  user             User         @relation(fields: [userId], references: [id])
  documentType     DocumentType @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
  @@index([userId])
}

model User {
  id                  BigInt       @id @default(autoincrement())
  publicId            String     @unique @default(cuid())
  email               String     @unique
  password            String
  fullName            String?
  cpf                 String?    @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  avatarUrl           String?
  dataAiHint          String?
  accountType         AccountType @default(PHYSICAL)
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  razaoSocial         String?
  cnpj                String?    @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  optInMarketing      Boolean    @default(false)
  lastLogin           DateTime?
  bids                Bid[]
  lotsWon             UserWin[]  @relation("WonLots")
  maxBids             UserLotMaxBid[]
  reviews             Review[]
  questions           LotQuestion[]
  documents           UserDocument[]
  notifications       Notification[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  uploadedMedia       MediaItem[]
  roles               UsersOnRoles[]
  tenants             UsersOnTenants[]
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@index([email])
}
model User {
  id                  BigInt       @id @default(autoincrement())
  publicId            String     @unique @default(cuid())
  email               String     @unique
  password            String
  fullName            String?
  cpf                 String?    @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  avatarUrl           String?
  dataAiHint          String?
  accountType         AccountType @default(PHYSICAL)
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  razaoSocial         String?
  cnpj                String?    @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  optInMarketing      Boolean    @default(false)
  lastLogin           DateTime?
  bids                Bid[]
  lotsWon             UserWin[]  @relation("WonLots")
  maxBids             UserLotMaxBid[]
  reviews             Review[]
  questions           LotQuestion[]
  documents           UserDocument[]
  notifications       Notification[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  uploadedMedia       MediaItem[]
  roles               UsersOnRoles[]
  tenants             UsersOnTenants[]
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@index([email])
}

model User {
  id                  BigInt       @id @default(autoincrement())
  publicId            String     @unique @default(cuid())
  email               String     @unique
  password            String
  fullName            String?
  cpf                 String?    @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  avatarUrl           String?
  dataAiHint          String?
  accountType         AccountType @default(PHYSICAL)
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  razaoSocial         String?
  cnpj                String?    @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  optInMarketing      Boolean    @default(false)
  lastLogin           DateTime?
  bids                Bid[]
  lotsWon             UserWin[]  @relation("WonLots")
  maxBids             UserLotMaxBid[]
  reviews             Review[]
  questions           LotQuestion[]
  documents           UserDocument[]
  notifications       Notification[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  uploadedMedia       MediaItem[]
  roles               UsersOnRoles[]
  tenants             UsersOnTenants[]
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@index([email])
}

model User {
  id                  BigInt       @id @default(autoincrement())
  publicId            String     @unique @default(cuid())
  email               String     @unique
  password            String
  fullName            String?
  cpf                 String?    @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  avatarUrl           String?
  dataAiHint          String?
  accountType         AccountType @default(PHYSICAL)
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  razaoSocial         String?
  cnpj                String?    @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  optInMarketing      Boolean    @default(false)
  lastLogin           DateTime?
  bids                Bid[]
  lotsWon             UserWin[]  @relation("WonLots")
  maxBids             UserLotMaxBid[]
  reviews             Review[]
  questions           LotQuestion[]
  documents           UserDocument[]
  notifications       Notification[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  uploadedMedia       MediaItem[]
  roles               UsersOnRoles[]
  tenants             UsersOnTenants[]
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@index([email])
}
model User {
  id                  BigInt       @id @default(autoincrement())
  publicId            String     @unique @default(cuid())
  email               String     @unique
  password            String
  fullName            String?
  cpf                 String?    @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  avatarUrl           String?
  dataAiHint          String?
  accountType         AccountType @default(PHYSICAL)
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  razaoSocial         String?
  cnpj                String?    @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  optInMarketing      Boolean    @default(false)
  lastLogin           DateTime?
  bids                Bid[]
  lotsWon             UserWin[]  @relation("WonLots")
  maxBids             UserLotMaxBid[]
  reviews             Review[]
  questions           LotQuestion[]
  documents           UserDocument[]
  notifications       Notification[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  uploadedMedia       MediaItem[]
  roles               UsersOnRoles[]
  tenants             UsersOnTenants[]
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@index([email])
}
model User {
  id                  BigInt       @id @default(autoincrement())
  publicId            String     @unique @default(cuid())
  email               String     @unique
  password            String
  fullName            String?
  cpf                 String?    @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  avatarUrl           String?
  dataAiHint          String?
  accountType         AccountType @default(PHYSICAL)
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  razaoSocial         String?
  cnpj                String?    @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  optInMarketing      Boolean    @default(false)
  lastLogin           DateTime?
  bids                Bid[]
  lotsWon             UserWin[]  @relation("WonLots")
  maxBids             UserLotMaxBid[]
  reviews             Review[]
  questions           LotQuestion[]
  documents           UserDocument[]
  notifications       Notification[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  uploadedMedia       MediaItem[]
  roles               UsersOnRoles[]
  tenants             UsersOnTenants[]
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@index([email])
}