// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// ===================================
// Modelos de Usuário e Autenticação
// ===================================

model Usuario {
  id                  String    @id @default(cuid())
  email               String    @unique
  fullName            String?
  password            String?
  roleId              String?
  perfil              Perfil?   @relation(fields: [roleId], references: [id])
  habilitationStatus  UserHabilitationStatus @default(PENDENTE_DOCUMENTOS)
  cpf                 String?   @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  status              String?   @default("ATIVO")
  optInMarketing      Boolean   @default(false)
  avatarUrl           String?
  dataAiHint          String?
  sellerProfileId     String?   @unique
  auctioneerProfileId String?   @unique
  sellerProfile       Vendedor?
  auctioneerProfile   Leiloeiro?
  lances              Lance[]
  arremates           Arremate[]
  avaliacoes          Avaliacao[]
  perguntas           PerguntaLote[]
  respostas           PerguntaLote[]   @relation("RespostasAdmin")
  documentos          DocumentoUsuario[]
  notificacoes        Notificacao[]
  lancesMaximos       LanceMaximoUsuarioLote[]
  postagensBlog       PostagemBlog[]
  badges              Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Perfil {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  permissions     Permissao[]
  usuarios        Usuario[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Permissao {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  perfis      Perfil[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TipoDocumento {
  id             String    @id @default(cuid())
  name           String
  description    String?
  isRequired     Boolean   @default(true)
  appliesTo      String?   // ex: "PHYSICAL,LEGAL"
  allowedFormats String?   // ex: "pdf,jpg,png"
  displayOrder   Int       @default(0)
  documentos     DocumentoUsuario[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model DocumentoUsuario {
  id              String             @id @default(cuid())
  documentTypeId  String
  tipoDocumento   TipoDocumento      @relation(fields: [documentTypeId], references: [id])
  userId          String
  usuario         Usuario            @relation(fields: [userId], references: [id])
  fileUrl         String?
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  rejectionReason String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@unique([userId, documentTypeId])
}

// ===================================
// Modelos de Localização e Judiciais
// ===================================

model Estado {
  id        String    @id @default(cuid())
  name      String    @unique
  uf        String    @unique
  slug      String    @unique
  cidades   Cidade[]
  tribunais Tribunal[]
  comarcas  Comarca[]
  lotes     Lote[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Cidade {
  id        String   @id @default(cuid())
  name      String
  slug      String
  stateId   String
  estado    Estado   @relation(fields: [stateId], references: [id])
  stateUf   String
  ibgeCode  String?
  lotes     Lote[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tribunal {
  id        String     @id @default(cuid())
  name      String     @unique
  slug      String     @unique
  stateUf   String
  estado    Estado     @relation(fields: [stateUf], references: [uf])
  website   String?
  comarcas  Comarca[]
  processos ProcessoJudicial[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Comarca {
  id          String    @id @default(cuid())
  name        String
  slug        String
  courtId     String
  tribunal    Tribunal  @relation(fields: [courtId], references: [id])
  stateId     String
  estado      Estado    @relation(fields: [stateId], references: [id])
  zipCode     String?
  varas       Vara[]
  processos   ProcessoJudicial[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([name, stateId])
}

model Vara {
  id           String    @id @default(cuid())
  name         String
  slug         String
  districtId   String
  comarca      Comarca   @relation(fields: [districtId], references: [id])
  contactName  String?
  phone        String?
  email        String?
  vendedores   Vendedor[]
  processos    ProcessoJudicial[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  @@unique([name, districtId])
}

// ===================================
// Modelos de Entidades e Perfis
// ===================================

model Vendedor {
  id              String      @id @default(cuid())
  publicId        String      @unique @default(cuid())
  name            String      @unique
  slug            String      @unique
  contactName     String?
  email           String?
  phone           String?
  address         String?
  city            String?
  state           String?
  zipCode         String?
  website         String?
  logoUrl         String?
  logoMediaId     String?
  dataAiHintLogo  String?
  description     String?
  memberSince     DateTime?
  rating          Float?
  isJudicial      Boolean     @default(false)
  judicialBranchId String?    @unique
  varaJudicial    Vara?       @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId          String?     @unique
  usuario         Usuario?    @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  leiloes         Leilao[]
  bens            Bem[]
  vendasDiretas   VendaDireta[]
  processosJudiciais ProcessoJudicial[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Leiloeiro {
  id                 String    @id @default(cuid())
  publicId           String    @unique @default(cuid())
  name               String    @unique
  slug               String    @unique
  registrationNumber String?
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?
  memberSince        DateTime?
  rating             Float?
  userId             String?   @unique
  usuario            Usuario?  @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  leiloes            Leilao[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProcessoJudicial {
  id              String    @id @default(cuid())
  publicId        String    @unique @default(cuid())
  processNumber   String    @unique
  isElectronic    Boolean   @default(true)
  courtId         String?
  tribunal        Tribunal? @relation(fields: [courtId], references: [id])
  districtId      String?
  comarca         Comarca?  @relation(fields: [districtId], references: [id])
  branchId        String?
  vara            Vara?     @relation(fields: [branchId], references: [id])
  sellerId        String?
  vendedor        Vendedor? @relation(fields: [sellerId], references: [id])
  bens            Bem[]
  partes          ParteProcesso[]
  leiloes         Leilao[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ParteProcesso {
  id             String         @id @default(cuid())
  processId      String
  processo       ProcessoJudicial @relation(fields: [processId], references: [id])
  name           String
  documentNumber String?
  partyType      ProcessPartyType

  @@unique([processId, name, partyType])
}

model Bem {
  id             String      @id @default(cuid())
  publicId       String      @unique @default(cuid())
  title          String
  description    String?     @db.Text
  status         BemStatus   @default(DISPONIVEL)
  categoryId     String?
  category       CategoriaLote? @relation(fields: [categoryId], references: [id])
  subcategoryId  String?
  subcategory    Subcategoria?  @relation(fields: [subcategoryId], references: [id])
  judicialProcessId String?
  judicialProcess ProcessoJudicial? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  sellerId        String?
  seller          Vendedor?   @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  evaluationValue Float?
  imageUrl       String?
  imageMediaId   String?
  galleryImageUrls Json?
  mediaItemIds   Json?
  dataAiHint     String?
  locationCity   String?
  locationState  String?
  address        String?
  latitude       Float?
  longitude      Float?
  plate          String?
  make           String?
  model          String?
  version        String?
  year           Int?
  modelYear      Int?
  mileage        Int?
  color          String?
  fuelType       String?
  transmissionType String?
  bodyType       String?
  vin            String?
  renavam        String?
  enginePower    String?
  numberOfDoors  Int?
  vehicleOptions String?     @db.Text
  detranStatus   String?
  debts          String?     @db.Text
  runningCondition String?
  bodyCondition  String?
  tiresCondition String?
  hasKey         Boolean?
  propertyRegistrationNumber String?
  iptuNumber     String?
  isOccupied     Boolean?
  totalArea      Float?
  builtArea      Float?
  bedrooms       Int?
  suites         Int?
  bathrooms      Int?
  parkingSpaces  Int?
  constructionType String?
  finishes       String?     @db.Text
  infrastructure String?     @db.Text
  condoDetails   String?     @db.Text
  improvements   String?     @db.Text
  topography     String?
  liensAndEncumbrances String? @db.Text
  propertyDebts  String?     @db.Text
  unregisteredRecords String? @db.Text
  hasHabiteSe    Boolean?
  zoningRestrictions String?
  brand          String?
  serialNumber   String?
  itemCondition  String?
  specifications String?     @db.Text
  includedAccessories String? @db.Text
  batteryCondition String?
  hasInvoice     Boolean?
  hasWarranty    Boolean?
  repairHistory  String?     @db.Text
  applianceCapacity String?
  voltage        String?
  applianceType  String?
  additionalFunctions String?
  hoursUsed      Int?
  engineType     String?
  capacityOrPower String?
  maintenanceHistory String? @db.Text
  installationLocation String?
  compliesWithNR String?
  operatingLicenses String?
  breed          String?
  age            String?
  sex            String?
  weight         String?
  individualId   String?
  purpose        String?
  sanitaryCondition String?
  lineage        String?
  isPregnant     Boolean?
  specialSkills  String?     @db.Text
  gtaDocument    String?
  breedRegistryDocument String?
  furnitureType  String?
  material       String?
  style          String?
  dimensions     String?
  pieceCount     Int?
  jewelryType    String?
  metal          String?
  gemstones      String?     @db.Text
  totalWeight    String?
  jewelrySize    String?
  authenticityCertificate String?
  workType       String?
  artist         String?
  period         String?
  technique      String?
  provenance     String?     @db.Text
  boatType       String?
  boatLength     String?
  hullMaterial   String?
  onboardEquipment String? @db.Text
  productName    String?
  quantity       String?
  packagingType  String?
  expirationDate DateTime?
  storageConditions String?
  preciousMetalType String?
  purity         String?
  forestGoodsType String?
  volumeOrQuantity String?
  species        String?
  dofNumber      String?
  
  lotes Lot[] @relation("BemToLot")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([judicialProcessId])
  @@index([sellerId])
}

// ===================================
// Modelos de Leilão e Loteamento
// ===================================

model CategoriaLote {
  id                 String    @id @default(cuid())
  name               String    @unique
  slug               String    @unique
  description        String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  coverImageUrl      String?
  coverImageMediaId  String?
  dataAiHintCover    String?
  megaMenuImageUrl   String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu String?
  itemCount          Int       @default(0)
  hasSubcategories   Boolean   @default(false)
  subcategories      Subcategoria[]
  lotes              Lote[]
  leiloes            Leilao[]
  bens               Bem[]
  postagensBlog      PostagemBlog[]
  vendasDiretas      VendaDireta[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Subcategoria {
  id                String    @id @default(cuid())
  name              String
  slug              String    @unique
  description       String?
  parentCategoryId  String
  categoriaPrincipal CategoriaLote @relation(fields: [parentCategoryId], references: [id])
  displayOrder      Int       @default(0)
  iconUrl           String?
  iconMediaId       String?
  dataAiHintIcon    String?
  itemCount         Int       @default(0)
  lotes             Lote[]
  bens              Bem[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([parentCategoryId])
}

model Leilao {
  id                  String      @id @default(cuid())
  publicId            String      @unique @default(cuid())
  title               String
  fullTitle           String?
  description         String?     @db.Text
  status              AuctionStatus
  auctionType         AuctionType?
  auctionDate         DateTime
  endDate             DateTime?
  auctionStages       Json?
  city                String?
  state               String?
  imageUrl            String?
  imageMediaId        String?
  dataAiHint          String?
  documentsUrl        String?
  evaluationReportUrl String?
  auctionCertificateUrl String?
  totalLots           Int         @default(0)
  visits              Int         @default(0)
  initialOffer        Float?
  bidsCount           Int         @default(0)
  sellingBranch       String?
  vehicleLocation     String?
  automaticBiddingEnabled  Boolean?
  silentBiddingEnabled     Boolean?
  allowMultipleBidsPerUser Boolean?
  allowInstallmentBids     Boolean?
  softCloseEnabled         Boolean?
  softCloseMinutes         Int?
  estimatedRevenue         Float?
  achievedRevenue          Float?
  totalHabilitatedUsers    Int?
  isFeaturedOnMarketplace  Boolean?
  marketplaceAnnouncementTitle String?
  additionalTriggers       Json?
  decrementAmount          Float?
  decrementIntervalSeconds Int?
  floorPrice               Float?
  
  categoryId          String?
  categoria           CategoriaLote?   @relation(fields: [categoryId], references: [id])
  auctioneerId        String?
  leiloeiro           Leiloeiro? @relation(fields: [auctioneerId], references: [id])
  sellerId            String?
  vendedor            Vendedor?  @relation(fields: [sellerId], references: [id])
  judicialProcessId   String?
  processoJudicial    ProcessoJudicial? @relation(fields: [judicialProcessId], references: [id])
  
  lotes               Lote[]
  lances              Lance[]
  avaliacoes          Avaliacao[]
  perguntas           PerguntaLote[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([status, auctionDate])
  @@index([categoryId])
  @@index([auctioneerId])
  @@index([sellerId])
}

model Lote {
  id              String      @id @default(cuid())
  publicId        String      @unique @default(cuid())
  auctionId       String
  leilao          Leilao      @relation(fields: [auctionId], references: [id])
  number          String?
  title           String
  description     String?     @db.Text
  price           Float       @default(0)
  initialPrice    Float?
  secondInitialPrice Float?
  reservePrice    Float?
  evaluationValue Float?
  debtAmount      Float?
  itbiValue       Float?
  bidIncrementStep Float?
  status          LotStatus
  isFeatured      Boolean?
  isExclusive     Boolean?
  discountPercentage Float?
  additionalTriggers Json?
  
  categoryId      String?
  category        CategoriaLote? @relation(fields: [categoryId], references: [id])
  subcategoryId   String?
  subcategory     Subcategoria? @relation(fields: [subcategoryId], references: [id])
  stateId         String?
  estado          Estado?     @relation(fields: [stateId], references: [id])
  cityId          String?
  cidade          Cidade?     @relation(fields: [cityId], references: [id])
  
  bens            Bem[]       @relation("BemToLot")
  bemIds          Json?
  
  lances          Lance[]
  arremates       Arremate[]
  lancesMaximos   LanceMaximoUsuarioLote[]
  avaliacoes      Avaliacao[]
  perguntas       PerguntaLote[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([auctionId, status])
  @@index([categoryId])
}

model Lance {
  id            String   @id @default(cuid())
  lotId         String
  lote          Lote     @relation(fields: [lotId], references: [id])
  auctionId     String
  leilao        Leilao   @relation(fields: [auctionId], references: [id])
  bidderId      String
  licitante     Usuario  @relation(fields: [bidderId], references: [id])
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())

  @@index([lotId])
  @@index([bidderId])
}

model Arremate {
  id               String       @id @default(cuid())
  lotId            String       @unique
  lote             Lote         @relation(fields: [lotId], references: [id])
  userId           String
  usuario          Usuario      @relation(fields: [userId], references: [id])
  winningBidAmount Float
  winDate          DateTime
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?

  @@index([userId])
}

model LanceMaximoUsuarioLote {
  id        String   @id @default(cuid())
  userId    String
  usuario   Usuario  @relation(fields: [userId], references: [id])
  lotId     String
  lote      Lote     @relation(fields: [lotId], references: [id])
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lotId])
}

model VendaDireta {
  id                 String      @id @default(cuid())
  publicId           String      @unique @default(cuid())
  title              String
  description        String      @db.Text
  offerType          DirectSaleOfferType
  status             DirectSaleOfferStatus @default(PENDING_APPROVAL)
  price              Float?
  minimumOfferPrice  Float?
  categoryId         String
  categoria          CategoriaLote @relation(fields: [categoryId], references: [id])
  locationCity       String?
  locationState      String?
  sellerId           String
  vendedor           Vendedor    @relation(fields: [sellerId], references: [id])
  imageUrl           String?
  imageMediaId       String?
  dataAiHint         String?
  galleryImageUrls   Json?
  mediaItemIds       Json?
  expiresAt          DateTime?
  itemsIncluded      Json?
  tags               Json?
  latitude           Float?
  longitude          Float?
  mapAddress         String?
  mapEmbedUrl        String?
  mapStaticImageUrl  String?
  views              Int         @default(0)
  proposalsCount     Int         @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([status])
  @@index([sellerId])
}

// ===================================
// Modelos de Conteúdo e Interação
// ===================================

model Avaliacao {
  id               String   @id @default(cuid())
  lotId            String
  lote             Lote     @relation(fields: [lotId], references: [id])
  auctionId        String
  leilao           Leilao   @relation(fields: [auctionId], references: [id])
  userId           String
  usuario          Usuario  @relation(fields: [userId], references: [id])
  userDisplayName  String
  rating           Int
  comment          String?  @db.Text
  createdAt        DateTime @default(now())
}

model PerguntaLote {
  id                      String   @id @default(cuid())
  lotId                   String
  lote                    Lote     @relation(fields: [lotId], references: [id])
  auctionId               String
  leilao                  Leilao   @relation(fields: [auctionId], references: [id])
  userId                  String
  usuario                 Usuario  @relation("PerguntasUsuario", fields: [userId], references: [id])
  userDisplayName         String
  questionText            String   @db.Text
  answerText              String?  @db.Text
  answeredAt              DateTime?
  answeredByUserId        String?
  responsavelPelaResposta Usuario? @relation("RespostasAdmin", fields: [answeredByUserId], references: [id])
  answeredByUserDisplayName String?
  isPublic                Boolean  @default(true)
  createdAt               DateTime @default(now())
}

model ItemMidia {
  id            String    @id @default(cuid())
  fileName      String
  storagePath   String    @unique
  uploadedAt    DateTime  @default(now())
  uploadedBy    String?
  title         String?
  altText       String?
  caption       String?
  description   String?
  mimeType      String
  sizeBytes     Int
  dimensions    Json?
  urlOriginal   String?
  urlThumbnail  String?
  urlMedium     String?
  urlLarge      String?
  dataAiHint    String?
  
  usuario         Usuario[]
  vendedores      Vendedor[]
  leiloeiros      Leiloeiro[]
  categoriasLogo  CategoriaLote[] @relation("LogoCategoria")
  categoriasCapa  CategoriaLote[] @relation("CapaCategoria")
  categoriasMenu  CategoriaLote[] @relation("MenuCategoria")
  subcategoriasIcon Subcategoria[]
  leiloesImagem     Leilao[]
  bensImagem        Bem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notificacao {
  id        String   @id @default(cuid())
  userId    String
  usuario   Usuario  @relation(fields: [userId], references: [id])
  message   String
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())
}

model PostagemBlog {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  content         String   @db.Text
  authorId        String
  autor           Usuario  @relation(fields: [authorId], references: [id])
  categoryId      String?
  categoria       CategoriaLote? @relation(fields: [categoryId], references: [id])
  tags            Json?
  isPublished     Boolean  @default(false)
  publishedAt     DateTime?
  featuredImageUrl String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ConfiguracoesPlataforma {
  id              String @id @default("global")
  siteTitle       String?
  siteTagline     String?
  logoUrl         String?
  faviconUrl      String?
  galleryImageBasePath String?
  storageProvider      String?
  firebaseStorageBucket  String?
  activeThemeName      String?
  themes               Json?
  platformPublicIdMasks Json?
  homepageSections      Json?
  mentalTriggerSettings Json?
  sectionBadgeVisibility Json?
  mapSettings             Json?
  biddingSettings         Json?
  searchPaginationType    String?
  searchItemsPerPage      Int?
  searchLoadMoreCount     Int?
  showCountdownOnLotDetail Boolean?
  showCountdownOnCards     Boolean?
  showRelatedLotsOnLotDetail Boolean?
  relatedLotsCount         Int?
  variableIncrementTable   Json?
  defaultUrgencyTimerHours Int?
  defaultListItemsPerPage  Int?

  updatedAt DateTime @updatedAt
}

// ===================================
// ENUMS
// ===================================

enum UserHabilitationStatus {
  PENDENTE_DOCUMENTOS
  PENDENTE_ANALISE
  HABILITADO
  DOCUMENTOS_REJEITADOS
  BLOQUEADO
}

enum UserDocumentStatus {
  NAO_ENVIADO
  ENVIADO
  APROVADO
  REJEITADO
  EM_ANALISE
}

enum AccountType {
  PESSOA_FISICA
  PESSOA_JURIDICA
  COMITENTE_VENDA_DIRETA
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum DirectSaleOfferType {
  COMPRAR_JA
  ACEITA_PROPOSTAS
}

enum DirectSaleOfferStatus {
  ATIVA
  VENDIDA
  EXPIRADA
  PENDENTE_APROVACAO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum UserBidStatus {
  GANHANDO
  PERDENDO
  SUPERADO
  ARREMATADO
  NAO_ARREMATADO
}
```
