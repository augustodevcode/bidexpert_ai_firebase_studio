// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                        String                   @id @default(cuid())
  email                     String                   @unique
  password                  String
  fullName                  String?
  roleId                    String?
  role                      Role?                    @relation(fields: [roleId], references: [id])
  habilitationStatus        UserHabilitationStatus?  @default(PENDING_DOCUMENTS)
  cpf                       String?                  @unique
  rgNumber                  String?
  rgIssuer                  String?
  rgIssueDate               DateTime?
  rgState                   String?
  dateOfBirth               DateTime?
  cellPhone                 String?
  homePhone                 String?
  gender                    String?
  profession                String?
  nationality               String?
  maritalStatus             String?
  propertyRegime            String?
  spouseName                String?
  spouseCpf                 String?
  zipCode                   String?
  street                    String?
  number                    String?
  complement                String?
  neighborhood              String?
  city                      String?
  state                     String?
  status                    String?                  @default("ATIVO")
  optInMarketing            Boolean                  @default(false)
  badges                    Json                     @default("[]") // Storing as JSON string
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
  avatarUrl                 String?
  dataAiHint                String?
  activeBids                Int?                     @default(0)
  auctionsWon               Int?                     @default(0)
  itemsSold                 Int?                     @default(0)
  sellerId                  String?                  @unique // One user can have one seller profile
  sellerProfile             Seller?
  auctioneerId              String?                  @unique // One user can have one auctioneer profile
  auctioneerProfile         Auctioneer?
  documents                 UserDocument[]
  bids                      Bid[]
  wins                      UserWin[]
  notifications             Notification[]
  answeredQuestions         LotQuestion[]            @relation("AnsweredByUser")
  askedQuestions            LotQuestion[]            @relation("AskedByUser")
  uploadedMedia             MediaItem[]
  maxBids                   UserLotMaxBid[]

  @@index([roleId])
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

model DocumentType {
  id             String         @id @default(cuid())
  name           String         @unique
  description    String?
  isRequired     Boolean        @default(true)
  appliesTo      Json           @default("[\"PHYSICAL\", \"LEGAL\", \"DIRECT_SALE_CONSIGNOR\"]")
  allowedFormats Json           @default("[\"pdf\", \"jpg\", \"png\"]")
  displayOrder   Int            @default(0)
  userDocuments  UserDocument[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserDocument {
  id              String             @id @default(cuid())
  userId          String
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentTypeId  String
  documentType    DocumentType       @relation(fields: [documentTypeId], references: [id])
  fileUrl         String?
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  rejectionReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, documentTypeId])
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

// Access control models
model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  permissions     Permission[]
  users           User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id        String   @id @default(cuid())
  name      String   @unique
  roles     Role[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Auction-related models
enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

model Auction {
  id                             String        @id @default(cuid())
  publicId                       String        @unique
  title                          String        @db.VarChar(200)
  fullTitle                      String?       @db.VarChar(300)
  description                    String?       @db.Text
  status                         AuctionStatus @default(RASCUNHO)
  auctionType                    AuctionType?
  auctioneerId                   String
  sellerId                       String?
  judicialProcessId              String?
  categoryId                     String
  category                       LotCategory   @relation(fields: [categoryId], references: [id])
  auctioneer                     Auctioneer    @relation(fields: [auctioneerId], references: [id])
  seller                         Seller?       @relation(fields: [sellerId], references: [id])
  judicialProcess                JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  lots                           Lot[]
  bids                           Bid[]
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json          @default("[]")
  imageUrl                       String?
  imageMediaId                   String?       @unique
  image                          MediaItem?    @relation("AuctionImage", fields: [imageMediaId], references: [id])
  dataAiHint                     String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  totalLots                      Int?          @default(0)
  visits                         Int?          @default(0)
  initialOffer                   Float?
  isFavorite                     Boolean?      @default(false)
  currentBid                     Float?
  bidsCount                      Int?          @default(0)
  sellingBranch                  String?
  vehicleLocation                String?
  automaticBiddingEnabled        Boolean       @default(false)
  allowInstallmentBids           Boolean       @default(false)
  softCloseEnabled               Boolean       @default(false)
  softCloseMinutes               Int?
  estimatedRevenue               Float?
  achievedRevenue                Float?        @default(0)
  totalHabilitatedUsers          Int?          @default(0)
  isFeaturedOnMarketplace        Boolean       @default(false)
  marketplaceAnnouncementTitle   String?
  additionalTriggers             Json          @default("[]")
  decrementAmount                Float?
  decrementIntervalSeconds       Int?
  floorPrice                     Float?
  silentBiddingEnabled           Boolean       @default(false)
  allowMultipleBidsPerUser       Boolean       @default(true)
  city                           String?
  state                          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([auctionType])
  @@index([categoryId])
  @@index([auctioneerId])
  @@index([sellerId])
  @@index([judicialProcessId])
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

model Lot {
  id                             String        @id @default(cuid())
  publicId                       String        @unique
  title                          String
  number                         String?
  description                    String?       @db.Text
  status                         LotStatus     @default(EM_BREVE)
  price                          Float
  initialPrice                   Float?
  secondInitialPrice             Float?
  bidIncrementStep               Float?        @default(100.00)
  auctionId                      String
  auction                        Auction       @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  categoryId                     String
  category                       LotCategory   @relation(fields: [categoryId], references: [id])
  subcategoryId                  String?
  subcategory                    Subcategory?  @relation(fields: [subcategoryId], references: [id])
  stateId                        String?
  state                          StateInfo?    @relation(fields: [stateId], references: [id])
  cityId                         String?
  city                           CityInfo?     @relation(fields: [cityId], references: [id])
  sellerId                       String?
  seller                         Seller?       @relation(fields: [sellerId], references: [id])
  imageUrl                       String?
  imageMediaId                   String?       @unique
  image                          MediaItem?    @relation("LotImage", fields: [imageMediaId], references: [id])
  mediaItems                     MediaItem[]
  winningBidTermUrl              String?
  bids                           Bid[]
  wins                           UserWin[]
  maxBids                        UserLotMaxBid[]
  bens                           Bem[]
  views                          Int?          @default(0)
  bidsCount                      Int?          @default(0)
  isFeatured                     Boolean       @default(false)
  isExclusive                    Boolean       @default(false)
  discountPercentage             Float?
  additionalTriggers             Json          @default("[]")
  latitude                       Float?
  longitude                      Float?
  mapAddress                     String?
  mapEmbedUrl                    String?       @db.Text
  mapStaticImageUrl              String?       @db.Text
  judicialProcessNumber          String?
  courtDistrict                  String?
  courtName                      String?
  publicProcessUrl               String?
  propertyRegistrationNumber     String?
  propertyLiens                  String?       @db.Text
  knownDebts                     String?       @db.Text
  additionalDocumentsInfo        String?       @db.Text
  reservePrice                   Float?
  evaluationValue                Float?
  debtAmount                     Float?
  itbiValue                      Float?
  endDate                        DateTime?
  lotSpecificAuctionDate         DateTime?
  secondAuctionDate              DateTime?
  condition                      String?
  dataAiHint                     String?
  auctioneerId                   String?
  reviews                        Review[]
  questions                      LotQuestion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([auctionId])
  @@index([status])
  @@index([categoryId])
  @@index([sellerId])
}

// User & Entity Profiles
model Seller {
  id                         String            @id @default(cuid())
  publicId                   String            @unique
  name                       String            @unique
  slug                       String            @unique
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  logoUrl                    String?
  logoMediaId                String?           @unique
  logo                       MediaItem?        @relation("LogoSeller", fields: [logoMediaId], references: [id])
  dataAiHintLogo             String?
  description                String?           @db.Text
  isJudicial                 Boolean           @default(false)
  userId                     String?           @unique
  user                       User?             @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  judicialBranchId           String?           @unique
  judicialBranch             JudicialBranch?   @relation(fields: [judicialBranchId], references: [id])
  auctions                   Auction[]
  judicialProcesses          JudicialProcess[]
  bens                       Bem[]
  lots                       Lot[]
  directSaleOffers           DirectSaleOffer[]
  
  createdAt                  DateTime          @default(now())
  updatedAt                  DateTime          @updatedAt
}

model Auctioneer {
  id                   String     @id @default(cuid())
  publicId             String     @unique
  name                 String     @unique
  slug                 String     @unique
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?    @unique
  logo                 MediaItem? @relation("LogoAuctioneer", fields: [logoMediaId], references: [id])
  dataAiHintLogo       String?
  description          String?    @db.Text
  userId               String?    @unique
  user                 User?      @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  auctions             Auction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Judicial Entities
model Court {
  id        String             @id @default(cuid())
  name      String             @unique
  slug      String             @unique
  stateUf   String
  website   String?
  districts JudicialDistrict[]
  processes JudicialProcess[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JudicialDistrict {
  id        String           @id @default(cuid())
  name      String
  slug      String
  courtId   String
  court     Court            @relation(fields: [courtId], references: [id])
  stateId   String
  state     StateInfo        @relation(fields: [stateId], references: [id])
  zipCode   String?
  branches  JudicialBranch[]
  processes JudicialProcess[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, courtId])
  @@index([courtId])
  @@index([stateId])
}

model JudicialBranch {
  id                  String              @id @default(cuid())
  name                String
  slug                String
  districtId          String
  district            JudicialDistrict    @relation(fields: [districtId], references: [id])
  contactName         String?
  phone               String?
  email               String?
  processes           JudicialProcess[]
  sellerProfile       Seller?

  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  @@unique([name, districtId])
  @@index([districtId])
}

model JudicialProcess {
  id              String         @id @default(cuid())
  publicId        String         @unique
  processNumber   String         @unique
  isElectronic    Boolean        @default(true)
  courtId         String
  court           Court          @relation(fields: [courtId], references: [id])
  districtId      String
  district        JudicialDistrict @relation(fields: [districtId], references: [id])
  branchId        String
  branch          JudicialBranch @relation(fields: [branchId], references: [id])
  sellerId        String?
  seller          Seller?        @relation(fields: [sellerId], references: [id])
  parties         ProcessParty[]
  bens            Bem[]
  auctions        Auction[]

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
  @@index([sellerId])
}

model ProcessParty {
  id             String         @id @default(cuid())
  processId      String
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  name           String
  partyType      ProcessPartyType
  documentNumber String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([processId, name, partyType])
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}


// "Bem" is the asset before it's lotted
model Bem {
  id                             String        @id @default(cuid())
  publicId                       String        @unique
  title                          String
  description                    String?       @db.Text
  status                         BemStatus     @default(DISPONIVEL)
  categoryId                     String
  category                       LotCategory   @relation(fields: [categoryId], references: [id])
  subcategoryId                  String?
  subcategory                    Subcategory?  @relation(fields: [subcategoryId], references: [id])
  judicialProcessId              String?
  judicialProcess                JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  sellerId                       String?
  seller                         Seller?       @relation(fields: [sellerId], references: [id])
  lots                           Lot[]
  evaluationValue                Float?
  imageUrl                       String?
  imageMediaId                   String?       @unique
  image                          MediaItem?    @relation("BemImage", fields: [imageMediaId], references: [id])
  mediaItems                     MediaItem[]
  dataAiHint                     String?
  locationCity                   String?
  locationState                  String?
  address                        String?
  latitude                       Float?
  longitude                      Float?
  plate                          String?
  make                           String?
  model                          String?
  version                        String?
  year                           Int?
  modelYear                      Int?
  mileage                        Int?
  color                          String?
  fuelType                       String?
  transmissionType               String?
  bodyType                       String?
  vin                            String?       @unique
  renavam                        String?       @unique
  enginePower                    String?
  numberOfDoors                  Int?
  vehicleOptions                 String?       @db.Text
  detranStatus                   String?
  debts                          String?       @db.Text
  runningCondition               String?
  bodyCondition                  String?
  tiresCondition                 String?
  hasKey                         Boolean?      @default(false)
  propertyRegistrationNumber     String?
  iptuNumber                     String?
  isOccupied                     Boolean?      @default(false)
  area                           Float?
  builtArea                      Float?
  bedrooms                       Int?
  suites                         Int?
  bathrooms                      Int?
  parkingSpaces                  Int?
  propertyType                   String?
  constructionType               String?
  finishes                       String?       @db.Text
  infrastructure                 String?       @db.Text
  condoDetails                   String?       @db.Text
  improvements                   String?       @db.Text
  topography                     String?
  liensAndEncumbrances           String?       @db.Text
  propertyDebts                  String?       @db.Text
  unregisteredRecords            String?       @db.Text
  hasHabiteSe                    Boolean?      @default(false)
  zoningRestrictions             String?
  amenities                      Json          @default("[]")
  brand                          String?
  serialNumber                   String?
  itemCondition                  String?
  specifications                 String?       @db.Text
  includedAccessories            String?       @db.Text
  batteryCondition               String?
  hasInvoice                     Boolean?
  hasWarranty                    Boolean?
  repairHistory                  String?       @db.Text
  applianceCapacity              String?
  voltage                        String?
  applianceType                  String?
  additionalFunctions            String?       @db.Text
  hoursUsed                      Int?
  engineType                     String?
  capacityOrPower                String?
  maintenanceHistory             String?       @db.Text
  installationLocation           String?
  compliesWithNR                 String?
  operatingLicenses              String?
  breed                          String?
  age                            String?
  sex                            String?
  weight                         String?
  individualId                   String?
  purpose                        String?
  sanitaryCondition              String?
  lineage                        String?
  isPregnant                     Boolean?
  specialSkills                  String?
  gtaDocument                    String?
  breedRegistryDocument          String?
  furnitureType                  String?
  material                       String?
  style                          String?
  dimensions                     String?
  pieceCount                     Int?
  jewelryType                    String?
  metal                          String?
  gemstones                      String?
  totalWeight                    String?
  jewelrySize                    String?
  authenticityCertificate        String?
  workType                       String?
  artist                         String?
  period                         String?
  technique                      String?
  provenance                     String?       @db.Text
  boatType                       String?
  boatLength                     String?
  hullMaterial                   String?
  onboardEquipment               String?       @db.Text
  productName                    String?
  quantity                       String?
  packagingType                  String?
  expirationDate                 DateTime?
  storageConditions              String?
  preciousMetalType              String?
  purity                         String?
  forestGoodsType                String?
  volumeOrQuantity               String?
  species                        String?
  dofNumber                      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@index([judicialProcessId])
  @@index([sellerId])
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

// Geographic and Categorization models
model StateInfo {
  id        String             @id @default(cuid())
  name      String             @unique
  uf        String             @unique @db.VarChar(2)
  slug      String             @unique
  cities    CityInfo[]
  districts JudicialDistrict[]
  lots      Lot[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CityInfo {
  id      String   @id @default(cuid())
  name    String
  slug    String
  stateId String
  state   StateInfo @relation(fields: [stateId], references: [id])
  stateUf String
  ibgeCode String?
  lots    Lot[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([stateId])
}

model LotCategory {
  id                   String            @id @default(cuid())
  name                 String            @unique
  slug                 String            @unique
  description          String?           @db.Text
  logoUrl              String?
  logoMediaId          String?           @unique
  logo                 MediaItem?        @relation("LogoCategory", fields: [logoMediaId], references: [id])
  coverImageUrl        String?
  coverImageMediaId    String?           @unique
  coverImage           MediaItem?        @relation("CoverCategory", fields: [coverImageMediaId], references: [id])
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?           @unique
  megaMenuImage        MediaItem?        @relation("MegaMenuCategory", fields: [megaMenuImageMediaId], references: [id])
  dataAiHintLogo       String?
  dataAiHintCover      String?
  dataAiHintMegaMenu   String?
  itemCount            Int               @default(0)
  hasSubcategories     Boolean           @default(false)
  subcategories        Subcategory[]
  lots                 Lot[]
  bens                 Bem[]
  directSaleOffers     DirectSaleOffer[]
  auctions             Auction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subcategory {
  id                String       @id @default(cuid())
  name              String
  slug              String
  parentCategoryId  String
  parentCategory    LotCategory  @relation(fields: [parentCategoryId], references: [id])
  description       String?
  displayOrder      Int          @default(0)
  iconUrl           String?
  iconMediaId       String?      @unique
  icon              MediaItem?   @relation("IconSubcategory", fields: [iconMediaId], references: [id])
  dataAiHintIcon    String?
  itemCount         Int          @default(0)
  lots              Lot[]
  bens              Bem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, parentCategoryId])
  @@index([parentCategoryId])
}

// Models for other features
enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ACTIVE
  SOLD
  EXPIRED
  PENDING_APPROVAL
}

model DirectSaleOffer {
  id                     String                @id @default(cuid())
  publicId               String                @unique
  title                  String
  description            String                @db.Text
  offerType              DirectSaleOfferType
  status                 DirectSaleOfferStatus @default(ACTIVE)
  price                  Float?
  minimumOfferPrice      Float?
  categoryId             String
  category               LotCategory           @relation(fields: [categoryId], references: [id])
  sellerId               String
  seller                 Seller                @relation(fields: [sellerId], references: [id])
  locationCity           String?
  locationState          String?
  imageUrl               String
  imageMediaId           String?               @unique
  image                  MediaItem?            @relation("OfferImage", fields: [imageMediaId], references: [id])
  dataAiHint             String?
  dataAiHintSellerLogo   String?
  mediaItemIds           Json                  @default("[]")
  galleryImageUrls       Json                  @default("[]")
  itemsIncluded          Json                  @default("[]")
  tags                   Json                  @default("[]")
  views                  Int?                  @default(0)
  proposalsCount         Int?                  @default(0)
  latitude               Float?
  longitude              Float?
  mapAddress             String?
  mapEmbedUrl            String?               @db.Text
  mapStaticImageUrl      String?               @db.Text
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime?

  @@index([status])
  @@index([offerType])
  @@index([categoryId])
  @@index([sellerId])
}

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId     String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidderId      String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())

  @@index([lotId])
  @@index([bidderId])
}

enum PaymentStatus {
    PENDENTE
    PROCESSANDO
    PAGO
    FALHOU
    REEMBOLSADO
}

model UserWin {
    id                  String        @id @default(cuid())
    lotId               String
    lot                 Lot           @relation(fields: [lotId], references: [id])
    userId              String
    user                User          @relation(fields: [userId], references: [id])
    winningBidAmount    Float
    winDate             DateTime
    paymentStatus       PaymentStatus @default(PENDENTE)
    invoiceUrl          String?

    @@unique([lotId, userId]) // A lot can only be won by one user
    @@index([userId])
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  authorId    String
  authorName  String
  imageUrl    String?
  publishedAt DateTime?
  tags        Json     @default("[]")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ContactMessage {
  id         String   @id @default(cuid())
  name       String
  email      String
  subject    String
  message    String   @db.Text
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@index([isRead])
}

model Review {
    id                String   @id @default(cuid())
    lotId             String
    lot               Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
    auctionId         String
    userId            String
    userDisplayName   String
    rating            Int      @db.TinyInt
    comment           String?  @db.Text
    createdAt         DateTime @default(now())

    @@index([lotId])
}

model LotQuestion {
    id              String   @id @default(cuid())
    lotId           String
    lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
    auctionId       String
    userId          String
    user            User     @relation("AskedByUser", fields: [userId], references: [id])
    userDisplayName String
    questionText    String   @db.Text
    isPublic        Boolean  @default(true)
    createdAt       DateTime @default(now())

    answerText              String?   @db.Text
    answeredAt              DateTime?
    answeredByUserId        String?
    answeredByUser          User?     @relation("AnsweredByUser", fields: [answeredByUserId], references: [id])
    answeredByUserDisplayName String?

    @@index([lotId])
}

model UserLotMaxBid {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    lotId     String
    lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
    maxAmount Float
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, lotId])
}

model DocumentTemplate {
    id String @id @default(cuid())
    name String @unique
    type DocumentTemplateType
    content String @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum DocumentTemplateType {
    WINNING_BID_TERM
    EVALUATION_REPORT
    AUCTION_CERTIFICATE
}

model PlatformSettings {
    id                    String @id @default("global")
    siteTitle             String?
    siteTagline           String?
    galleryImageBasePath  String?
    storageProvider       String?
    firebaseStorageBucket String?
    activeThemeName       String?
    themes                Json @default("[]")
    platformPublicIdMasks Json?
    homepageSections      Json @default("[]")
    mentalTriggerSettings Json?
    sectionBadgeVisibility Json?
    mapSettings           Json?
    biddingSettings       Json?
    searchPaginationType  String?
    searchItemsPerPage    Int?
    searchLoadMoreCount   Int?
    showCountdownOnLotDetail Boolean?
    showCountdownOnCards  Boolean?
    showRelatedLotsOnLotDetail Boolean?
    relatedLotsCount      Int?
    variableIncrementTable Json @default("[]")
    defaultListItemsPerPage Int?
    updatedAt             DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())

  @@index([userId])
}
