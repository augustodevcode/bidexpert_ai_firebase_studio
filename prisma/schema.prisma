// prisma/schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// Modelo de Configurações da Plataforma
// =================================================================
model PlatformSettings {
  id                                String @id @default(uuid())
  siteTitle                         String @default("BidExpert")
  siteTagline                       String?
  logoUrl                           String?
  faviconUrl                        String?
  galleryImageBasePath              String  @default("/uploads/media/")
  storageProvider                   String  @default("local") // 'local' or 'firebase'
  firebaseStorageBucket             String?
  activeThemeName                   String?
  themes                            Json?
  platformPublicIdMasks             Json?
  homepageSections                  Json?
  mentalTriggerSettings             Json?
  sectionBadgeVisibility            Json?
  mapSettings                       Json?
  searchPaginationType              String @default("loadMore") // 'loadMore' or 'numberedPages'
  searchItemsPerPage                Int    @default(12)
  searchLoadMoreCount               Int    @default(12)
  showCountdownOnLotDetail          Boolean @default(true)
  showCountdownOnCards              Boolean @default(true)
  showRelatedLotsOnLotDetail        Boolean @default(true)
  relatedLotsCount                  Int    @default(5)
  defaultUrgencyTimerHours          Int?
  variableIncrementTable            Json?
  biddingSettings                   Json?
  defaultListItemsPerPage           Int    @default(10)
  updatedAt                         DateTime @updatedAt
}

// =================================================================
// Modelos de Entidades Principais (Leilões, Lotes, etc.)
// =================================================================
model Auction {
  id                             String        @id @default(uuid())
  publicId                       String        @unique @default(uuid())
  slug                           String        @unique
  title                          String
  description                    String?       @db.Text
  status                         String        @default("RASCUNHO")
  auctionDate                    DateTime
  endDate                        DateTime?
  totalLots                      Int           @default(0)
  auctioneerId                   String?
  sellerId                       String?
  categoryId                     String?
  auctionType                    String?
  imageUrl                       String?
  imageMediaId                   String?
  dataAiHint                     String?
  documentsUrl                   String?
  visits                         Int           @default(0)
  initialOffer                   Float?
  isFavorite                     Boolean       @default(false)
  isFeaturedOnMarketplace        Boolean       @default(false)
  marketplaceAnnouncementTitle   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  automaticBiddingEnabled        Boolean       @default(false)
  silentBiddingEnabled           Boolean       @default(false)
  allowMultipleBidsPerUser       Boolean       @default(true)
  allowInstallmentBids           Boolean       @default(false)
  softCloseEnabled               Boolean       @default(false)
  softCloseMinutes               Int           @default(2)
  estimatedRevenue               Float?
  achievedRevenue                Float?
  totalHabilitatedUsers          Int           @default(0)
  judicialProcessId              String?
  decrementAmount                Float?
  decrementIntervalSeconds       Int?
  floorPrice                     Float?
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt
  
  auctioneer            Auctioneer?    @relation(fields: [auctioneerId], references: [id])
  seller                Seller?        @relation(fields: [sellerId], references: [id])
  category              LotCategory?   @relation(fields: [categoryId], references: [id])
  lots                  Lot[]
  bids                  Bid[]
  auctionStages         Json?
  autoRelistSettings    Json?
  habilitations         AuctionHabilitation[]
}

model Lot {
  id                             String   @id @default(uuid())
  publicId                       String   @unique @default(uuid())
  auctionId                      String
  slug                           String?
  number                         String?
  title                          String
  description                    String?  @db.Text
  price                          Float
  initialPrice                   Float?
  secondInitialPrice             Float?
  bidIncrementStep               Float?
  status                         String   @default("EM_BREVE")
  bidsCount                      Int      @default(0)
  views                          Int      @default(0)
  isFeatured                     Boolean  @default(false)
  isExclusive                    Boolean  @default(false)
  discountPercentage             Int?
  additionalTriggers             Json?
  imageUrl                       String?
  imageMediaId                   String?
  dataAiHint                     String?
  galleryImageUrls               Json?
  mediaItemIds                   Json?
  type                           String?  // Legacy or simple type name
  categoryId                     String?
  subcategoryId                  String?
  auctionName                    String?
  sellerId                       String?
  sellerName                     String?
  auctioneerId                   String?
  cityId                         String?
  stateId                        String?
  cityName                       String?
  stateUf                        String?
  latitude                       Float?
  longitude                      Float?
  mapAddress                     String?
  mapEmbedUrl                    String?
  mapStaticImageUrl              String?
  endDate                        DateTime?
  auctionDate                    DateTime?
  lotSpecificAuctionDate         DateTime?
  secondAuctionDate              DateTime?
  condition                      String?
  winnerId                       String?
  winningBidTermUrl              String?
  allowInstallmentBids           Boolean @default(false)
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt

  auction          Auction?        @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category         LotCategory?    @relation(fields: [categoryId], references: [id])
  subcategory      Subcategory?    @relation(fields: [subcategoryId], references: [id])
  seller           Seller?         @relation(fields: [sellerId], references: [id])
  city             City?           @relation(fields: [cityId], references: [id])
  state            State?          @relation(fields: [stateId], references: [id])
  winner           User?           @relation("WonLots", fields: [winnerId], references: [id])
  bids             Bid[]
  bens             LotBens[]
  maxBids          UserLotMaxBid[]
}

model Bem {
  id                          String    @id @default(uuid())
  publicId                    String    @unique @default(uuid())
  title                       String
  description                 String?   @db.Text
  status                      String    @default("DISPONIVEL")
  categoryId                  String?
  subcategoryId               String?
  judicialProcessId           String?
  sellerId                    String?
  evaluationValue             Float?
  imageUrl                    String?
  imageMediaId                String?
  dataAiHint                  String?
  galleryImageUrls            Json?
  mediaItemIds                Json?
  locationCity                String?
  locationState               String?
  address                     String?
  latitude                    Float?
  longitude                   Float?
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt

  plate                      String?
  make                       String?
  model                      String?
  version                    String?
  year                       Int?
  modelYear                  Int?
  mileage                    Int?
  color                      String?
  fuelType                   String?
  transmissionType           String?
  bodyType                   String?
  vin                        String?
  renavam                    String?
  enginePower                String?
  numberOfDoors              Int?
  vehicleOptions             String?
  detranStatus               String?
  debts                      String?
  runningCondition           String?
  bodyCondition              String?
  tiresCondition             String?
  hasKey                     Boolean?

  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?
  infrastructure             String?
  condoDetails               String?
  improvements               String?
  topography                 String?
  liensAndEncumbrances       String?
  propertyDebts              String?
  unregisteredRecords        String?
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  amenities                  Json?
  
  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String?
  includedAccessories        String?
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String?
  
  applianceCapacity          String?
  voltage                    String?
  applianceType              String?
  additionalFunctions        String?
  
  hoursUsed                  Int?
  engineType                 String?
  capacityOrPower            String?
  maintenanceHistory         String?
  installationLocation       String?
  compliesWithNR             String?
  operatingLicenses          String?
  
  breed                      String?
  age                        String?
  sex                        String?
  weight                     String?
  individualId               String?
  purpose                    String?
  sanitaryCondition          String?
  lineage                    String?
  isPregnant                 Boolean?
  specialSkills              String?
  gtaDocument                String?
  breedRegistryDocument      String?

  category          LotCategory?       @relation(fields: [categoryId], references: [id])
  subcategory       Subcategory?       @relation(fields: [subcategoryId], references: [id])
  judicialProcess   JudicialProcess?   @relation(fields: [judicialProcessId], references: [id])
  seller            Seller?            @relation(fields: [sellerId], references: [id])
  lots              LotBens[]
}

model LotBens {
  lotId   String
  bemId   String
  lot     Lot    @relation(fields: [lotId], references: [id])
  bem     Bem    @relation(fields: [bemId], references: [id])

  @@id([lotId, bemId])
}


// =================================================================
// Modelos de Usuários e Perfis
// =================================================================
model User {
  id                 String          @id @default(uuid())
  email              String          @unique
  password           String?
  fullName           String?
  habilitationStatus String          @default("PENDING_DOCUMENTS")
  accountType        String          @default("PHYSICAL")
  avatarUrl          String?
  dataAiHint         String?
  badges             Json?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  
  // Detalhes PF
  cpf                String?         @unique
  rgNumber           String?
  rgIssuer           String?
  rgIssueDate        DateTime?
  rgState            String?
  dateOfBirth        DateTime?
  cellPhone          String?
  homePhone          String?
  gender             String?
  profession         String?
  nationality        String?
  maritalStatus      String?
  propertyRegime     String?
  spouseName         String?
  spouseCpf          String?
  
  // Detalhes PJ
  razaoSocial        String?
  cnpj               String?         @unique
  inscricaoEstadual  String?
  website            String?
  responsibleName    String?
  responsibleCpf     String?

  // Endereço
  zipCode            String?
  street             String?
  number             String?
  complement         String?
  neighborhood       String?
  city               String?
  state              String?
  
  optInMarketing     Boolean         @default(false)

  roles          UsersOnRoles[]
  seller         Seller?           @relation("SellerUser")
  auctioneer     Auctioneer?       @relation("AuctioneerUser")
  bids           Bid[]
  wins           Lot[]             @relation("WonLots")
  documents      UserDocument[]
  mediaItems     MediaItem[]
  maxBids        UserLotMaxBid[]
  habilitations  AuctionHabilitation[]
}

model Role {
  id             String         @id @default(uuid())
  name           String
  nameNormalized String         @unique
  description    String?
  permissions    Json
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  users          UsersOnRoles[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model AuctionHabilitation {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  auction    Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId  String
  createdAt  DateTime @default(now())

  @@id([userId, auctionId])
}

// =================================================================
// Modelos de Entidades de Negócio (Comitentes, Leiloeiros)
// =================================================================
model Seller {
  id                 String    @id @default(uuid())
  publicId           String    @unique @default(uuid())
  slug               String    @unique
  name               String    @unique
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?   @db.Text
  userId             String?   @unique
  isJudicial         Boolean   @default(false)
  judicialBranchId   String?   @unique
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  user               User?             @relation("SellerUser", fields: [userId], references: [id], onDelete: SetNull)
  judicialBranch     JudicialBranch?   @relation(fields: [judicialBranchId], references: [id])
  auctions           Auction[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
}

model Auctioneer {
  id                  String   @id @default(uuid())
  publicId            String   @unique @default(uuid())
  slug                String   @unique
  name                String
  registrationNumber  String?
  contactName         String?
  email               String?
  phone               String?
  address             String?
  city                String?
  state               String?
  zipCode             String?
  website             String?
  logoUrl             String?
  logoMediaId         String?
  dataAiHintLogo      String?
  description         String?  @db.Text
  userId              String?  @unique
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  user      User?       @relation("AuctioneerUser", fields: [userId], references: [id], onDelete: SetNull)
  auctions  Auction[]
}

// =================================================================
// Modelos de Categorias e Localidades
// =================================================================

model LotCategory {
  id                  String        @id @default(uuid())
  name                String
  slug                String        @unique
  description         String?
  hasSubcategories    Boolean       @default(false)
  logoUrl             String?
  logoMediaId         String?
  dataAiHintLogo      String?
  coverImageUrl       String?
  coverImageMediaId   String?
  dataAiHintCover     String?
  megaMenuImageUrl    String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu  String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  
  subcategories Subcategory[]
  auctions      Auction[]
  lots          Lot[]
  bens          Bem[]
}

model Subcategory {
  id                  String       @id @default(uuid())
  name                String
  slug                String?      @unique
  parentCategoryId    String
  description         String?
  displayOrder        Int          @default(0)
  iconUrl             String?
  iconMediaId         String?
  dataAiHintIcon      String?
  
  parentCategory LotCategory? @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots           Lot[]
  bens           Bem[]
}

model State {
  id        String   @id @default(uuid())
  name      String
  uf        String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  cities    City[]
  districts JudicialDistrict[]
}

model City {
  id       String   @id @default(uuid())
  name     String
  slug     String?
  stateId  String
  stateUf  String?
  ibgeCode String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  state State @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots  Lot[]
}

// =================================================================
// Modelos Judiciais
// =================================================================

model Court {
  id        String   @id @default(uuid())
  name      String
  slug      String?
  stateUf   String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  districts      JudicialDistrict[]
  judicialProcesses JudicialProcess[]
}

model JudicialDistrict {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  courtId   String?
  stateId   String?
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  court   Court?            @relation(fields: [courtId], references: [id])
  state   State?            @relation(fields: [stateId], references: [id])
  branches JudicialBranch[]
  judicialProcesses JudicialProcess[]
}

model JudicialBranch {
  id         String   @id @default(uuid())
  name       String
  slug       String   @unique
  districtId String?
  contactName String?
  phone      String?
  email      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  judicialProcesses JudicialProcess[]
  seller            Seller?
}

model JudicialProcess {
  id             String    @id @default(uuid())
  publicId       String    @unique @default(uuid())
  processNumber  String
  isElectronic   Boolean   @default(true)
  courtId        String?
  districtId     String?
  branchId       String?
  sellerId       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  court    Court?            @relation(fields: [courtId], references: [id])
  district JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch   JudicialBranch?   @relation(fields: [branchId], references: [id])
  seller   Seller?           @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties  JudicialParty[]
  bens     Bem[]
}

model JudicialParty {
  id             String @id @default(uuid())
  processId      String
  name           String
  documentNumber String?
  partyType      String
  
  process JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

// =================================================================
// Modelos de Transações e Documentos
// =================================================================

model Bid {
  id           String   @id @default(uuid())
  lotId        String
  auctionId    String
  bidderId     String
  bidderDisplay String?
  amount       Float
  timestamp    DateTime @default(now())
  
  lot     Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder  User @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String   @id @default(uuid())
  lotId            String   @unique
  userId           String
  winningBidAmount Float
  winDate          DateTime @default(now())
  paymentStatus    String
  invoiceUrl       String?
}

model DirectSaleOffer {
  id                   String   @id @default(uuid())
  publicId             String   @unique @default(uuid())
  title                String
  description          String?  @db.Text
  offerType            String?
  price                Float?
  minimumOfferPrice    Float?
  status               String   @default("ACTIVE")
  category             String?
  sellerId             String?
  sellerName           String?
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int      @default(0)
  expiresAt            DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  seller Seller? @relation(fields: [sellerId], references: [id])
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model MediaItem {
  id             String   @id @default(uuid())
  fileName       String
  storagePath    String
  title          String?
  altText        String?
  caption        String?
  description    String?  @db.Text
  mimeType       String
  sizeBytes      Int
  urlOriginal    String
  urlThumbnail   String?
  urlMedium      String?
  urlLarge       String?
  linkedLotIds   Json?
  dataAiHint     String?
  uploadedBy     String? // userId
  uploadedAt     DateTime @default(now())
  
  uploader User? @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)
}

model UserDocument {
  id              String        @id @default(uuid())
  userId          String
  documentTypeId  String
  status          String        @default("PENDING")
  fileUrl         String
  fileName        String?
  rejectionReason String?       @db.Text
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType  DocumentType  @relation(fields: [documentTypeId], references: [id])
  
  @@unique([userId, documentTypeId])
}

model DocumentType {
  id             String         @id @default(uuid())
  name           String
  description    String?
  isRequired     Boolean        @default(true)
  appliesTo      String?
  
  userDocuments  UserDocument[]
}


model DocumentTemplate {
  id        String   @id @default(uuid())
  name      String
  type      String
  content   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}
