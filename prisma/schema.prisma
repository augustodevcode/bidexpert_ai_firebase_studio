// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================================================================
// AUTHENTICATION & USERS
// =====================================================================
model User {
  id                   String                 @id @default(uuid())
  email                String                 @unique
  fullName             String
  password             String
  roleId               String?
  role                 Role?                  @relation(fields: [roleId], references: [id])
  sellerId             String?                @unique
  sellerProfile        Seller?                @relation(fields: [sellerId], references: [id])
  habilitationStatus   UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType          AccountType            @default(PHYSICAL)
  documents            UserDocument[]
  bids                 Bid[]
  wins                 UserWin[]
  reviews              Review[]
  questions            LotQuestion[]
  notifications        Notification[]
  maxBids              UserLotMaxBid[]
  badges               String[]               @default([])
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  
  // Pessoa Física Fields
  cpf                 String?   @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?

  // Pessoa Jurídica Fields
  razaoSocial         String?
  cnpj                String?   @unique
  inscricaoEstadual   String?
  
  // Comitente Fields
  website             String?

  // Contact Info
  cellPhone           String?
  homePhone           String?

  // Address
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  
  // Misc
  optInMarketing      Boolean?  @default(false)
  avatarUrl           String?
  dataAiHint          String?
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

model Role {
  id              String       @id @default(uuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  permissions     Permission[] @relation(fields: [permissionNames], references: [name])
  permissionNames String[]
  users           User[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Permission {
  name  String @id @unique
  roles Role[] @relation(fields: [roleNames], references: [name_normalized])
  roleNames String[]
}

model UserDocument {
  id              String             @id @default(uuid())
  userId          String
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentTypeId  String
  documentType    DocumentType       @relation(fields: [documentTypeId], references: [id])
  fileUrl         String?
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  rejectionReason String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@unique([userId, documentTypeId])
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

model DocumentType {
  id             String         @id @default(uuid())
  name           String         @unique
  description    String?
  isRequired     Boolean        @default(false)
  appliesTo      AccountType[]  @default([PHYSICAL, LEGAL, DIRECT_SALE_CONSIGNOR])
  allowedFormats String[]       @default(["pdf", "jpg", "png"])
  displayOrder   Int            @default(0)
  userDocuments  UserDocument[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

// =====================================================================
// AUCTION & LOTS
// =====================================================================

model Auction {
  id                String       @id @default(uuid())
  publicId          String       @unique
  title             String
  fullTitle         String?
  description       String?
  status            AuctionStatus @default(RASCUNHO)
  auctionType       AuctionType?
  categoryId        String
  category          LotCategory  @relation(fields: [categoryId], references: [id])
  auctioneerId      String
  auctioneer        Auctioneer   @relation(fields: [auctioneerId], references: [id])
  sellerId          String?
  seller            Seller?      @relation(fields: [sellerId], references: [id])
  judicialProcessId String?
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  auctionDate       DateTime
  endDate           DateTime?
  auctionStages     Json[]       @default([]) // Array of AuctionStage objects
  lots              Lot[]
  bids              Bid[]
  reviews           Review[]
  questions         LotQuestion[]
  visits            Int?         @default(0)
  totalLots         Int?         @default(0)
  initialOffer      Float?       @default(0)
  isFavorite        Boolean?     @default(false) // This would be user-specific, better handled on client
  currentBid        Float?
  bidsCount         Int?         @default(0)
  estimatedRevenue  Float?
  achievedRevenue   Float?
  totalHabilitatedUsers Int?
  
  // Marketing & Display
  imageUrl          String?
  imageMediaId      String?
  mediaItem         MediaItem?   @relation("AuctionCoverImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  dataAiHint        String?
  documentsUrl      String?
  evaluationReportUrl String?
  auctionCertificateUrl String?
  isFeaturedOnMarketplace Boolean? @default(false)
  marketplaceAnnouncementTitle String?
  
  // Settings & Configuration
  automaticBiddingEnabled Boolean? @default(false)
  silentBiddingEnabled    Boolean? @default(false)
  allowMultipleBidsPerUser Boolean? @default(true)
  allowInstallmentBids    Boolean? @default(false)
  softCloseEnabled        Boolean? @default(true)
  softCloseMinutes        Int?     @default(2)
  decrementAmount         Float?   // For Dutch auctions
  decrementIntervalSeconds Int?    // For Dutch auctions
  floorPrice              Float?   // For Dutch auctions
  autoRelistSettings      Json?    // AutoRelistSettings object
  
  // Location
  city              String?
  state             String?
  sellingBranch     String?
  vehicleLocation   String?
  
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

model Lot {
  id                         String      @id @default(uuid())
  publicId                   String      @unique
  number                     String?
  title                      String
  description                String?
  auctionId                  String
  auction                    Auction     @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  categoryId                 String
  category                   LotCategory @relation(fields: [categoryId], references: [id])
  subcategoryId              String?
  subcategory                Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  status                     LotStatus   @default(EM_BREVE)
  price                      Float       @default(0) // Current highest bid
  initialPrice               Float?      // 1st stage price
  secondInitialPrice         Float?      // 2nd stage price
  bidIncrementStep           Float?
  reservePrice               Float?      // Minimum price to sell
  evaluationValue            Float?      // Appraised value
  debtAmount                 Float?      // Known debts on the item
  itbiValue                  Float?
  endDate                    DateTime?   // Individual lot closing time
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  bids                       Bid[]
  wins                       UserWin[]
  reviews                    Review[]
  questions                  LotQuestion[]
  maxBids                    UserLotMaxBid[]
  bemIds                     String[]    @default([])
  bens                       Bem[]       @relation(fields: [bemIds], references: [id])

  // Display & Marketing
  imageUrl                   String?
  imageMediaId               String?
  mediaItem                  MediaItem?  @relation("LotCoverImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  galleryImageUrls           String[]    @default([])
  mediaItemIds               String[]    @default([])
  dataAiHint                 String?
  views                      Int?        @default(0)
  bidsCount                  Int?        @default(0)
  isFeatured                 Boolean?    @default(false)
  isExclusive                Boolean?    @default(false)
  discountPercentage         Float?
  additionalTriggers         String[]    @default([])

  // Location
  stateId                    String?
  cityId                     String?
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?

  // Legal & Documents
  judicialProcessNumber      String?
  courtDistrict              String?
  courtName                  String?
  publicProcessUrl           String?
  propertyRegistrationNumber String?
  propertyLiens              String?
  knownDebts                 String?
  additionalDocumentsInfo    String?
  winningBidTermUrl          String?

  // Vehicle Specific (Example)
  condition                  String?
  year                       Int?
  make                       String?
  model                      String?
  series                     String?
  stockNumber                String?
  sellingBranch              String?
  vin                        String?
  vinStatus                  String?
  lossType                   String?
  primaryDamage              String?
  titleInfo                  String?
  titleBrand                 String?
  startCode                  String?
  hasKey                     Boolean?
  odometer                   String?
  airbagsStatus              String?
  bodyStyle                  String?
  engineDetails              String?
  transmissionType           String?
  driveLineType              String?
  fuelType                   String?
  cylinders                  String?
  restraintSystem            String?
  exteriorInteriorColor      String?
  options                    String?
  manufacturedIn             String?
  vehicleClass               String?
  vehicleLocationInBranch    String?
  laneRunNumber              String?
  aisleStall                 String?
  actualCashValue            String?
  estimatedRepairCost        String?

  createdAt                  DateTime    @default(now())
  updatedAt                  DateTime    @updatedAt
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

model Bid {
  id            String   @id @default(uuid())
  lotId         String
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId     String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidderId      String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())
}

model UserWin {
  id                String        @id @default(uuid())
  userId            String
  user              User          @relation(fields: [userId], references: [id])
  lotId             String        @unique
  lot               Lot           @relation(fields: [lotId], references: [id])
  winningBidAmount  Float
  winDate           DateTime      @default(now())
  paymentStatus     PaymentStatus @default(PENDENTE)
  invoiceUrl        String?
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  lotId     String
  lot       Lot      @relation(fields: [lotId], references: [id])
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lotId])
}


// =====================================================================
// ENTITIES & PROFILES
// =====================================================================

model Seller {
  id              String       @id @default(uuid())
  publicId        String       @unique
  name            String       @unique
  slug            String       @unique
  contactName     String?
  email           String?
  phone           String?
  address         String?
  city            String?
  state           String?
  zipCode         String?
  website         String?
  logoUrl         String?
  logoMediaId     String?
  dataAiHintLogo  String?
  description     String?
  isJudicial      Boolean      @default(false)
  judicialBranchId String?
  judicialBranch  JudicialBranch? @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  user            User?
  auctions        Auction[]
  bens            Bem[]
  directSaleOffers DirectSaleOffer[]
  
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Auctioneer {
  id                     String    @id @default(uuid())
  publicId               String    @unique
  name                   String    @unique
  slug                   String    @unique
  registrationNumber     String?
  contactName            String?
  email                  String?
  phone                  String?
  address                String?
  city                   String?
  state                  String?
  zipCode                String?
  website                String?
  logoUrl                String?
  logoMediaId            String?
  dataAiHintLogo         String?
  description            String?
  userId                 String?   @unique
  auctions               Auction[]

  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
}

// =====================================================================
// JUDICIAL ENTITIES
// =====================================================================

model Court {
  id        String @id @default(uuid())
  name      String @unique
  slug      String @unique
  stateUf   String
  website   String?
  districts JudicialDistrict[]
  processes JudicialProcess[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JudicialDistrict {
  id        String @id @default(uuid())
  name      String
  slug      String
  courtId   String
  court     Court @relation(fields: [courtId], references: [id])
  stateId   String
  state     State @relation(fields: [stateId], references: [id])
  zipCode   String?
  branches  JudicialBranch[]
  processes JudicialProcess[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([name, courtId])
}

model JudicialBranch {
  id           String @id @default(uuid())
  name         String
  slug         String
  districtId   String
  district     JudicialDistrict @relation(fields: [districtId], references: [id])
  contactName  String?
  phone        String?
  email        String?
  sellers      Seller[]
  processes    JudicialProcess[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([name, districtId])
}

model JudicialProcess {
  id                String @id @default(uuid())
  publicId          String @unique
  processNumber     String @unique
  isElectronic      Boolean @default(true)
  courtId           String
  court             Court @relation(fields: [courtId], references: [id])
  districtId        String
  district          JudicialDistrict @relation(fields: [districtId], references: [id])
  branchId          String
  branch            JudicialBranch @relation(fields: [branchId], references: [id])
  sellerId          String?
  seller            Seller? @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties           ProcessParty[]
  bens              Bem[]
  auctions          Auction[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model ProcessParty {
  id              String @id @default(uuid())
  processId       String
  process         JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  name            String
  partyType       ProcessPartyType
  documentNumber  String?

  @@unique([processId, name, partyType])
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}


// =====================================================================
// BENS (ASSETS)
// =====================================================================

model Bem {
  id                         String   @id @default(uuid())
  publicId                   String   @unique
  title                      String
  description                String?
  status                     BemStatus @default(DISPONIVEL)
  categoryId                 String
  category                   LotCategory @relation(fields: [categoryId], references: [id])
  subcategoryId              String?
  subcategory                Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcessId          String?
  judicialProcess            JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  sellerId                   String?
  seller                     Seller? @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  evaluationValue            Float?
  lots                       Lot[]    @relation(fields: [lotIds], references: [id])
  lotIds                     String[]

  // Common Fields
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           String[] @default([])
  mediaItemIds               String[] @default([])
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  
  // Vehicle Specific
  plate                      String?
  make                       String?
  model                      String?
  version                    String?
  year                       Int?
  modelYear                  Int?
  mileage                    Int?
  color                      String?
  fuelType                   String?
  transmissionType           String?
  bodyType                   String?
  vin                        String?
  renavam                    String?
  enginePower                String?
  numberOfDoors              Int?
  vehicleOptions             String?
  detranStatus               String?
  debts                      String?
  runningCondition           String?
  bodyCondition              String?
  tiresCondition             String?
  hasKey                     Boolean?

  // Real Estate Specific
  propertyType               String?
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  area                       Float?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?
  infrastructure             String?
  condoDetails               String?
  improvements               String?
  topography                 String?
  liensAndEncumbrances       String?
  propertyDebts              String?
  unregisteredRecords        String?
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  amenities                  String[] @default([])

  // Electronics Specific
  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String?
  includedAccessories        String?
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String?

  // Appliances Specific
  applianceType              String?
  applianceCapacity          String?
  voltage                    String?
  additionalFunctions        String?

  // Machinery Specific
  hoursUsed                  Int?
  engineType                 String?
  capacityOrPower            String?
  maintenanceHistory         String?
  installationLocation       String?
  compliesWithNR             String?
  operatingLicenses          String?

  // Livestock Specific
  breed                      String?
  age                        String?
  sex                        String?
  weight                     String?
  individualId               String?
  purpose                    String?
  sanitaryCondition          String?
  vaccinationStatus          String?
  lineage                    String?
  isPregnant                 Boolean?
  specialSkills              String?
  gtaDocument                String?
  breedRegistryDocument      String?

  // Furniture
  furnitureType              String?
  material                   String?
  style                      String?
  dimensions                 String?
  pieceCount                 Int?

  // Jewelry
  jewelryType                String?
  metal                      String?
  gemstones                  String?
  totalWeight                String?
  jewelrySize                String?
  authenticityCertificate    String?

  // Art/Antiques
  workType                   String?
  artist                     String?
  period                     String?
  technique                  String?
  provenance                 String?

  // Boats
  boatType                   String?
  boatLength                 String?
  hullMaterial               String?
  onboardEquipment           String?

  // Food
  productName                String?
  quantity                   String?
  packagingType              String?
  expirationDate             DateTime?
  storageConditions          String?
  
  // Precious Metals
  preciousMetalType          String?
  purity                     String?

  // Forest Goods
  forestGoodsType            String?
  volumeOrQuantity           String?
  species                    String?
  dofNumber                  String?

  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

// =====================================================================
// CATEGORIES & GEOGRAPHICAL DATA
// =====================================================================

model LotCategory {
  id                 String   @id @default(uuid())
  name               String   @unique
  slug               String   @unique
  description        String?
  itemCount          Int      @default(0)
  hasSubcategories   Boolean  @default(false)
  logoUrl            String?
  coverImageUrl      String?
  megaMenuImageUrl   String?
  dataAiHintLogo     String?
  dataAiHintCover    String?
  dataAiHintMegaMenu String?
  auctions           Auction[]
  lots               Lot[]
  bens               Bem[]
  subcategories      Subcategory[] @relation("ParentCategory")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Subcategory {
  id                String       @id @default(uuid())
  name              String
  slug              String
  description       String?
  parentCategoryId  String
  parentCategory    LotCategory  @relation("ParentCategory", fields: [parentCategoryId], references: [id])
  itemCount         Int          @default(0)
  displayOrder      Int          @default(0)
  iconUrl           String?
  iconMediaId       String?
  dataAiHintIcon    String?
  lots              Lot[]
  bens              Bem[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@unique([parentCategoryId, name])
}

model State {
  id        String   @id @default(uuid())
  name      String   @unique
  uf        String   @unique
  slug      String   @unique
  cities    City[]
  districts JudicialDistrict[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id      String @id @default(uuid())
  name    String
  slug    String
  stateId String
  state   State  @relation(fields: [stateId], references: [id])
  stateUf String
  ibgeCode String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// =====================================================================
// MISCELLANEOUS & OTHER FEATURES
// =====================================================================

model MediaItem {
  id             String    @id @default(uuid())
  fileName       String
  storagePath    String    @unique
  urlOriginal    String    @unique
  urlThumbnail   String?
  urlMedium      String?
  urlLarge       String?
  mimeType       String
  sizeBytes      Int
  title          String?
  altText        String?
  caption        String?
  description    String?
  uploadedBy     String?
  dataAiHint     String?
  linkedLotIds   String[]  @default([])
  AuctionCoverImages Auction[] @relation("AuctionCoverImage")
  LotCoverImages     Lot[]     @relation("LotCoverImage")
  uploadedAt     DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model DirectSaleOffer {
  id                  String                @id @default(uuid())
  publicId            String                @unique
  title               String
  description         String
  offerType           DirectSaleOfferType
  status              DirectSaleOfferStatus
  price               Float?
  minimumOfferPrice   Float?
  categoryId          String
  category            LotCategory           @relation(fields: [categoryId], references: [id])
  sellerId            String
  seller              Seller                @relation(fields: [sellerId], references: [id])
  locationCity        String?
  locationState       String?
  imageUrl            String?
  imageMediaId        String?
  dataAiHint          String?
  galleryImageUrls    String[]              @default([])
  mediaItemIds        String[]              @default([])
  proposalsCount      Int?                  @default(0)
  views               Int?                  @default(0)
  expiresAt           DateTime?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  PENDING_APPROVAL
  ACTIVE
  SOLD
  EXPIRED
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  message   String
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())
}

model BlogPost {
  id        String   @id @default(uuid())
  title     String
  slug      String   @unique
  content   String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  tags      String[]
  isPublished Boolean @default(false)
  publishedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Review {
  id              String   @id @default(uuid())
  lotId           String
  lot             Lot      @relation(fields: [lotId], references: [id])
  auctionId       String
  auction         Auction  @relation(fields: [auctionId], references: [id])
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  userDisplayName String
  rating          Int
  comment         String
  createdAt       DateTime @default(now())
}

model LotQuestion {
  id                      String   @id @default(uuid())
  lotId                   String
  lot                     Lot      @relation(fields: [lotId], references: [id])
  auctionId               String
  auction                 Auction  @relation(fields: [auctionId], references: [id])
  userId                  String
  user                    User     @relation(fields: [userId], references: [id])
  userDisplayName         String
  questionText            String
  isPublic                Boolean  @default(true)
  answerText              String?
  answeredAt              DateTime?
  answeredByUserId        String?
  answeredByUserDisplayName String?
  createdAt               DateTime @default(now())
}

model DocumentTemplate {
    id        String   @id @default(uuid())
    name      String   @unique
    type      DocumentTemplateType
    content   String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

model PlatformSettings {
  id                      String   @id @default("global")
  siteTitle               String?
  siteTagline             String?
  galleryImageBasePath    String?
  storageProvider         String?  @default("local")
  firebaseStorageBucket   String?
  activeThemeName         String?
  themes                  Json[]   @default([])
  platformPublicIdMasks   Json?
  homepageSections        Json[]   @default([])
  mentalTriggerSettings   Json?
  sectionBadgeVisibility  Json?
  mapSettings             Json?
  biddingSettings         Json?
  searchPaginationType    String?  @default("loadMore")
  searchItemsPerPage      Int?     @default(12)
  searchLoadMoreCount     Int?     @default(12)
  showCountdownOnLotDetail Boolean? @default(true)
  showCountdownOnCards     Boolean? @default(true)
  showRelatedLotsOnLotDetail Boolean? @default(true)
  relatedLotsCount        Int?     @default(5)
  variableIncrementTable  Json[]   @default([])
  defaultListItemsPerPage Int?     @default(10)
  updatedAt               DateTime @updatedAt
}
