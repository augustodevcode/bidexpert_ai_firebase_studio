// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// =================================================================
// ENUMS
// =================================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}


// =================================================================
// BASE MODELS (FEWEST DEPENDENCIES)
// =================================================================

model Role {
  id             String  @id @default(uuid())
  name           String  @unique
  nameNormalized String  @unique
  description    String? @db.Text
  permissions    Json?
  users          UsersOnRoles[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model State {
  id              String             @id @default(uuid())
  name            String
  uf              String             @unique
  slug            String             @unique
  cities          City[]
  courts          Court[]
  judicialDistricts JudicialDistrict[]
  auctions        Auction[]
  lots            Lot[]
}

model City {
  id        String   @id @default(uuid())
  name      String
  slug      String
  state     State    @relation(fields: [stateId], references: [id])
  stateId   String
  stateUf   String
  ibgeCode  String?  @unique
  auctions  Auction[]
  lots      Lot[]
}

model LotCategory {
  id                 String          @id @default(uuid())
  name               String          @unique
  slug               String          @unique
  description        String?         @db.Text
  hasSubcategories   Boolean?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  coverImageUrl      String?
  coverImageMediaId  String?
  dataAiHintCover    String?
  megaMenuImageUrl   String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  subcategories      Subcategory[]
  auctions           Auction[]
  lots               Lot[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
}

model Subcategory {
  id                String      @id @default(uuid())
  name              String
  slug              String      @unique
  parentCategory    LotCategory @relation(fields: [parentCategoryId], references: [id])
  parentCategoryId  String
  description       String?     @db.Text
  displayOrder      Int         @default(0)
  iconUrl           String?
  iconMediaId       String?
  dataAiHintIcon    String?
  lots              Lot[]
  bens              Bem[]
}

model Court {
  id                String             @id @default(uuid())
  name              String
  slug              String             @unique
  state             State              @relation(fields: [stateId], references: [id])
  stateId           String
  stateUf           String
  website           String?
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
}

model DocumentType {
  id           String         @id @default(uuid())
  name         String
  description  String?
  isRequired   Boolean        @default(true)
  appliesTo    String // e.g., "PHYSICAL,LEGAL,ALL"
  userDocuments UserDocument[]
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentTemplate {
  id        String               @id @default(uuid())
  name      String
  type      DocumentTemplateType
  content   String?              @db.Text
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

// =================================================================
// INTERMEDIATE MODELS
// =================================================================

model User {
  id                  String                @id @default(uuid())
  email               String                @unique
  password            String?
  fullName            String?
  avatarUrl           String?
  dataAiHint          String?
  seller              Seller?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  roles               UsersOnRoles[]
  bids                Bid[]
  wins                UserWin[]
  maxBids             UserLotMaxBid[]
  documents           UserDocument[]
  notifications       Notification[]
  uploadedMedia       MediaItem[]
  accountType         AccountType           @default(PHYSICAL)
  cpf                 String?               @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  razaoSocial         String?
  cnpj                String?               @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  optInMarketing      Boolean?              @default(false)
  badges              Json?
  lotsWon             Lot[] @relation("LotWinner")
  habilitations       AuctionHabilitation[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  role       Role     @relation(fields: [roleId], references: [id])
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String // e.g., 'system', 'admin-user-id'
  @@id([userId, roleId])
}

model JudicialDistrict {
  id            String             @id @default(uuid())
  name          String
  slug          String             @unique
  court         Court              @relation(fields: [courtId], references: [id])
  courtId       String
  state         State              @relation(fields: [stateId], references: [id])
  stateId       String
  zipCode       String?
  branches      JudicialBranch[]
  judicialProcesses JudicialProcess[]
}

model JudicialBranch {
  id                String             @id @default(uuid())
  name              String
  slug              String             @unique
  district          JudicialDistrict   @relation(fields: [districtId], references: [id])
  districtId        String
  contactName       String?
  phone             String?
  email             String?
  sellers           Seller[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model Seller {
  id                   String           @id @default(uuid())
  publicId             String           @unique
  slug                 String           @unique
  name                 String           @unique
  contactName          String?
  email                String?          @unique
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?          @db.Text
  user                 User?            @relation(fields: [userId], references: [id])
  userId               String?          @unique
  isJudicial           Boolean          @default(false)
  judicialBranch       JudicialBranch?  @relation(fields: [judicialBranchId], references: [id])
  judicialBranchId     String?          @unique
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  auctions             Auction[]
  lots                 Lot[]
  directSaleOffers     DirectSaleOffer[]
  bens                 Bem[]
  judicialProcesses    JudicialProcess[]
}

model Auctioneer {
  id                   String     @id @default(uuid())
  publicId             String     @unique
  slug                 String     @unique
  name                 String
  registrationNumber   String?
  contactName          String?
  email                String?    @unique
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?    @db.Text
  user                 User?      @relation(fields: [userId], references: [id])
  userId               String?    @unique
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  auctions             Auction[]
  lots                 Lot[]
}

model Bem {
  id                String      @id @default(uuid())
  publicId          String      @unique
  title             String
  description       String?     @db.Text
  status            BemStatus   @default(DISPONIVEL)
  category          LotCategory @relation(fields: [categoryId], references: [id])
  categoryId        String
  subcategory       Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId     String?
  seller            Seller?     @relation(fields: [sellerId], references: [id])
  sellerId          String?
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId String?
  evaluationValue   Decimal?    @db.Decimal(15, 2)
  imageUrl          String?
  imageMediaId      String?
  galleryImageUrls  Json?
  mediaItemIds      Json?
  dataAiHint        String?
  locationCity      String?
  locationState     String?
  address           String?
  latitude          Decimal?    @db.Decimal(10, 8)
  longitude         Decimal?    @db.Decimal(11, 8)
  lots              LotBens[]   // Relation to the join table
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model JudicialProcess {
  id                String             @id @default(uuid())
  publicId          String             @unique
  processNumber     String
  isElectronic      Boolean            @default(true)
  court             Court              @relation(fields: [courtId], references: [id])
  courtId           String
  district          JudicialDistrict   @relation(fields: [districtId], references: [id])
  districtId        String
  branch            JudicialBranch     @relation(fields: [branchId], references: [id])
  branchId          String
  seller            Seller?            @relation(fields: [sellerId], references: [id])
  sellerId          String?
  parties           JudicialParty[]
  bens              Bem[]
  auctions          Auction[] // Add back-relation for Auction
  mediaItems        MediaItem[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

// =================================================================
// CORE TRANSACTIONAL MODELS
// =================================================================

model Auction {
  id                               String                 @id @default(uuid())
  publicId                         String                 @unique
  slug                             String                 @unique
  title                            String
  description                      String?                @db.Text
  status                           AuctionStatus          @default(RASCUNHO)
  auctionDate                      DateTime
  endDate                          DateTime?
  lots                             Lot[]
  auctioneer                       Auctioneer             @relation(fields: [auctioneerId], references: [id])
  auctioneerId                     String
  seller                           Seller                 @relation(fields: [sellerId], references: [id])
  sellerId                         String
  court                            Court?                 @relation(fields: [courtId], references: [id])
  courtId                          String?
  branch                           JudicialBranch?        @relation(fields: [branchId], references: [id])
  branchId                         String?
  city                             City?                  @relation(fields: [cityId], references: [id], onDelete: SetNull)
  cityId                           String?
  state                            State?                 @relation(fields: [stateId], references: [id])
  stateId                          String?
  judicialProcess                  JudicialProcess?       @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId                String?
  category                         LotCategory?           @relation(fields: [categoryId], references: [id])
  categoryId                       String?
  imageUrl                         String?
  imageMediaId                     String?
  documentsUrl                     String?
  visits                           Int?                   @default(0)
  isFeaturedOnMarketplace          Boolean                @default(false)
  marketplaceAnnouncementTitle     String?
  auctionType                      AuctionType?
  auctionMethod                    AuctionMethod?
  participation                    AuctionParticipation?
  onlineUrl                        String?
  address                          String?
  zipCode                          String?
  latitude                         Decimal?               @db.Decimal(10, 8)
  longitude                        Decimal?               @db.Decimal(11, 8)
  softCloseEnabled                 Boolean?               @default(false)
  softCloseMinutes                 Int?                   @default(2)
  allowInstallmentBids             Boolean?               @default(true)
  bids                             Bid[]
  habilitations                    AuctionHabilitation[]
  auctionStages                    AuctionStage[]
  createdAt                        DateTime               @default(now())
  updatedAt                        DateTime               @updatedAt
}

model AuctionStage {
  id               String                 @id @default(uuid())
  auction          Auction                @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId        String
  name             String
  startDate        DateTime
  endDate          DateTime
  /// Valor de avaliação específico para esta praça
  evaluationValue  Decimal?               @db.Decimal(15, 2)
  lotStageDetails  LotAuctionStageDetails[]
}

model Lot {
  id                           String                   @id @default(uuid())
  publicId                     String                   @unique
  auction                      Auction                  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                    String
  number                       String?
  title                        String
  description                  String?                  @db.Text
  price                        Decimal                  @db.Decimal(15, 2)
  status                       LotStatus                @default(EM_BREVE)
  bidsCount                    Int?                     @default(0)
  views                        Int?                     @default(0)
  isFeatured                   Boolean?                 @default(false)
  isExclusive                  Boolean?                 @default(false)
  imageUrl                     String?
  imageMediaId                 String?
  galleryImageUrls             Json?
  mediaItemIds                 Json?
  /// ID do Bem de onde as mídias são herdadas
  inheritedMediaFromBemId      String?
  type                         String
  category                     LotCategory?             @relation(fields: [categoryId], references: [id])
  categoryId                   String?
  subcategory                  Subcategory?             @relation(fields: [subcategoryId], references: [id])
  subcategoryId                String?
  auctionName                  String?
  seller                       Seller?                  @relation(fields: [sellerId], references: [id])
  sellerId                     String?
  sellerName                   String?
  auctioneer                   Auctioneer?              @relation(fields: [auctioneerId], references: [id])
  auctioneerId                 String?
  city                         City?                    @relation(fields: [cityId], references: [id])
  cityId                       String?
  state                        State?                   @relation(fields: [stateId], references: [id])
  stateId                      String?
  cityName                     String?
  stateUf                      String?
  latitude                     Decimal?                 @db.Decimal(10, 8)
  longitude                    Decimal?                 @db.Decimal(11, 8)
  mapAddress                   String?
  endDate                      DateTime?
  lotSpecificAuctionDate       DateTime?
  condition                    String?
  dataAiHint                   String?
  winner                       User?                    @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId                     String?
  winningBidTermUrl            String?
  allowInstallmentBids         Boolean?                 @default(false)
  bids                         Bid[]
  wins                         UserWin[]
  maxBids                      UserLotMaxBid[]
  bens                         LotBens[] // Relation to the join table
  stageDetails                 LotAuctionStageDetails[] // Relation to pricing details
  createdAt                    DateTime                 @default(now())
  updatedAt                    DateTime                 @updatedAt
}

model LotBens {
  lot     Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId   String
  bem     Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId   String
  @@id([lotId, bemId])
}

model LotAuctionStageDetails {
  lot              Lot           @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId            String
  auctionStage     AuctionStage  @relation(fields: [auctionStageId], references: [id], onDelete: Cascade)
  auctionStageId   String
  initialBid       Decimal?      @db.Decimal(15, 2)
  bidIncrement     Decimal?      @db.Decimal(10, 2)
  reservePrice     Decimal?      @db.Decimal(15, 2)
  @@id([lotId, auctionStageId])
}

// =================================================================
// SUPPORTING MODELS
// =================================================================

model Bid {
  id            String   @id @default(uuid())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId      String
  bidderDisplay String
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
}

model UserWin {
  id                String        @id @default(uuid())
  lot               Lot           @relation(fields: [lotId], references: [id])
  lotId             String        @unique
  user              User          @relation(fields: [userId], references: [id])
  userId            String
  winningBidAmount  Decimal       @db.Decimal(15, 2)
  winDate           DateTime
  paymentStatus     PaymentStatus
  invoiceUrl        String?
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  @@unique([userId, lotId])
}

model MediaItem {
  id                 String           @id @default(uuid())
  fileName           String           @unique
  storagePath        String
  title              String
  altText            String?
  caption            String?
  description        String?          @db.Text
  mimeType           String
  sizeBytes          Int
  urlOriginal        String
  urlThumbnail       String?
  urlMedium          String?
  urlLarge           String?
  linkedLotIds       Json?
  judicialProcessId  String?
  judicialProcess    JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  dataAiHint         String?
  uploadedByUser     User             @relation(fields: [uploadedByUserId], references: [id])
  uploadedByUserId   String
  uploadedAt         DateTime         @default(now())
}

model UserDocument {
  id               String              @id @default(uuid())
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  documentType     DocumentType        @relation(fields: [documentTypeId], references: [id])
  documentTypeId   String
  status           UserDocumentStatus  @default(PENDING_ANALYSIS)
  fileUrl          String
  fileName         String?
  rejectionReason  String?             @db.Text
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  @@unique([userId, documentTypeId])
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model JudicialParty {
  id              String          @id @default(uuid())
  process         JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId       String
  name            String
  documentNumber  String?
  partyType       ProcessPartyType
}

model AuctionHabilitation {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  auction   Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId String
  createdAt DateTime @default(now())
  @@unique([userId, auctionId])
}

model DirectSaleOffer {
  id                   String                @id @default(uuid())
  publicId             String                @unique
  title                String
  description          String?               @db.Text
  offerType            DirectSaleOfferType
  price                Decimal?              @db.Decimal(15, 2)
  minimumOfferPrice    Decimal?              @db.Decimal(15, 2)
  status               DirectSaleOfferStatus @default(ACTIVE)
  category             LotCategory           @relation(fields: [categoryId], references: [id])
  categoryId           String
  seller               Seller                @relation(fields: [sellerId], references: [id])
  sellerId             String
  sellerName           String
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int?                  @default(0)
  expiresAt            DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model VehicleMake {
  id     String         @id @default(uuid())
  name   String         @unique
  slug   String         @unique
  models VehicleModel[]
}

model VehicleModel {
  id     String      @id @default(uuid())
  name   String
  slug   String
  make   VehicleMake @relation(fields: [makeId], references: [id])
  makeId String
  @@unique([name, makeId])
}

model PlatformSettings {
  id                             String   @id @default("global")
  siteTitle                      String?
  siteTagline                    String?
  logoUrl                        String?
  faviconUrl                     String?
  galleryImageBasePath           String?
  storageProvider                String?
  firebaseStorageBucket          String?
  activeThemeName                String?
  themes                         Json?
  platformPublicIdMasks          Json?
  homepageSections               Json?
  mentalTriggerSettings          Json?
  sectionBadgeVisibility         Json?
  mapSettings                    Json?
  searchPaginationType           String?
  searchItemsPerPage             Int?
  searchLoadMoreCount            Int?
  showCountdownOnLotDetail       Boolean?
  showCountdownOnCards           Boolean?
  showRelatedLotsOnLotDetail     Boolean?
  relatedLotsCount               Int?
  defaultUrgencyTimerHours       Int?
  variableIncrementTable         Json?
  biddingSettings                Json?
  paymentGatewaySettings         Json?
  defaultListItemsPerPage        Int?
  updatedAt                      DateTime?
}
