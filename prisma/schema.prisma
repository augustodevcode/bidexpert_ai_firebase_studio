// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// ============================================================================
// Modelos de Usuários e Autenticação
// ============================================================================
model Usuario {
  id                  String                 @id @default(cuid())
  email               String                 @unique
  fullName            String
  password            String
  roleId              String?
  role                Papel?                 @relation(fields: [roleId], references: [id])
  habilitationStatus  UserHabilitationStatus @default(PENDENTE_DOCUMENTOS)
  cpf                 String?                @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  status              String?                @default("ATIVO")
  optInMarketing      Boolean?               @default(false)
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  
  // Relações
  vendedor            Vendedor?
  leiloeiro           Leiloeiro?
  documentos          DocumentoUsuario[]
  lances              Lance[]
  arremates           ArremateUsuario[]
  notificacoes        Notificacao[]
  avaliacoes          Avaliacao[]
  perguntas           PerguntaLote[]
  respostas           PerguntaLote[]         @relation("RespostasAdmin")
  lancesMaximos       LanceMaximoUsuario[]
  postsBlog           PostagemBlog[]
  mediaItems          ItemMidia[]            @relation("UploadedBy")
}

model Papel {
  id              String      @id @default(cuid())
  name            String      @unique
  name_normalized String      @unique
  description     String?
  permissions     Json // Alterado para Json para compatibilidade com MySQL
  usuarios        Usuario[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Permissao {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DocumentoUsuario {
  id                String             @id @default(cuid())
  userId            String
  usuario           Usuario            @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentTypeId    String
  tipoDocumento     TipoDocumento      @relation(fields: [documentTypeId], references: [id])
  fileUrl           String?
  fileName          String?
  status            StatusDocumento    @default(NAO_ENVIADO)
  uploadDate        DateTime?
  analysisDate      DateTime?
  analystId         String?
  rejectionReason   String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@unique([userId, documentTypeId])
}

model TipoDocumento {
  id             String             @id @default(cuid())
  name           String             @unique
  description    String?
  isRequired     Boolean            @default(true)
  appliesTo      String?            // Ex: "PHYSICAL,LEGAL"
  allowedFormats String?            // Ex: "pdf,jpg,png"
  displayOrder   Int                @default(0)
  documentos     DocumentoUsuario[]
}

// ============================================================================
// Modelos de Leilão
// ============================================================================
model Leilao {
  id                             String                 @id @default(cuid())
  publicId                       String                 @unique
  title                          String
  fullTitle                      String?
  description                    String?                @db.Text
  status                         StatusLeilao
  auctionType                    TipoLeilao?
  categoryId                     String
  categoria                      CategoriaLote          @relation(fields: [categoryId], references: [id])
  auctioneerId                   String
  leiloeiro                      Leiloeiro              @relation(fields: [auctioneerId], references: [id])
  sellerId                       String?
  vendedor                       Vendedor?              @relation(fields: [sellerId], references: [id])
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json?
  city                           String?
  state                          String?
  imageUrl                       String?
  imageMediaId                   String?
  dataAiHint                     String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  totalLots                      Int                    @default(0)
  visits                         Int                    @default(0)
  initialOffer                   Float?
  isFavorite                     Boolean?
  currentBid                     Float?
  bidsCount                      Int?
  sellingBranch                  String?
  vehicleLocation                String?
  automaticBiddingEnabled        Boolean                @default(true)
  allowInstallmentBids           Boolean                @default(false)
  softCloseEnabled               Boolean                @default(true)
  softCloseMinutes               Int?
  estimatedRevenue               Float?
  achievedRevenue                Float?
  totalHabilitatedUsers          Int?
  isFeaturedOnMarketplace        Boolean                @default(false)
  marketplaceAnnouncementTitle   String?
  additionalTriggers             String?
  judicialProcessId              String?
  processoJudicial               ProcessoJudicial?      @relation(fields: [judicialProcessId], references: [id])
  lotes                          Lote[]
  lances                         Lance[]
  arremates                      ArremateUsuario[]
  avaliacoes                     Avaliacao[]
  perguntas                      PerguntaLote[]
  createdAt                      DateTime               @default(now())
  updatedAt                      DateTime               @updatedAt
}

model Lote {
  id                         String             @id @default(cuid())
  publicId                   String             @unique
  auctionId                  String
  leilao                     Leilao             @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  number                     String?
  title                      String
  description                String?            @db.Text
  price                      Float
  initialPrice               Float?
  secondInitialPrice         Float?
  bidIncrementStep           Float?
  status                     StatusLote
  stateId                    String?
  cityId                     String?
  categoryId                 String
  categoria                  CategoriaLote      @relation(fields: [categoryId], references: [id])
  subcategoryId              String?
  views                      Int                @default(0)
  bidsCount                  Int                @default(0)
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  bemIds                     Json?
  winningBidTermUrl          String?
  isFeatured                 Boolean?           @default(false)
  isExclusive                Boolean?           @default(false)
  discountPercentage         Float?
  additionalTriggers         String?
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?
  judicialProcessNumber      String?
  courtDistrict              String?
  courtName                  String?
  publicProcessUrl           String?
  propertyRegistrationNumber String?
  propertyLiens              String?
  knownDebts                 String?
  additionalDocumentsInfo    String?            @db.Text
  reservePrice               Float?
  evaluationValue            Float?
  debtAmount                 Float?
  itbiValue                  Float?
  condition                  String?
  dataAiHint                 String?
  createdAt                  DateTime           @default(now())
  updatedAt                  DateTime           @updatedAt

  lances                     Lance[]
  arremate                   ArremateUsuario?
  lancesMaximos              LanceMaximoUsuario[]
  avaliacoes                 Avaliacao[]
  perguntas                  PerguntaLote[]
  estado                     Estado?            @relation(fields: [stateId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  cidade                     Cidade?            @relation(fields: [cityId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  subcategoria               Subcategoria?      @relation(fields: [subcategoryId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  bens                       Bem[]              @relation(fields: [bemIds], references: [id])
}

model Bem {
  id                         String             @id @default(cuid())
  publicId                   String             @unique
  title                      String
  description                String?            @db.Text
  status                     StatusBem
  judicialProcessId          String?
  processoJudicial           ProcessoJudicial?  @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  sellerId                   String?
  vendedor                   Vendedor?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  categoryId                 String
  categoria                  CategoriaLote      @relation(fields: [categoryId], references: [id])
  subcategoryId              String?
  subcategoria               Subcategoria?      @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  evaluationValue            Float?
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  createdAt                  DateTime           @default(now())
  updatedAt                  DateTime           @updatedAt
  lotes                      Lote[]             @relation(fields: [lotIds], references: [id])
  lotIds                     String[]
}

model Lance {
  id              String   @id @default(cuid())
  lotId           String
  lote            Lote     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId       String
  leilao          Leilao   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidderId        String
  licitante       Usuario  @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderDisplay   String
  amount          Float
  timestamp       DateTime @default(now())

  @@index([lotId, timestamp])
}

model ArremateUsuario {
  id                String       @id @default(cuid())
  lotId             String       @unique
  lote              Lote         @relation(fields: [lotId], references: [id], onDelete: Cascade)
  userId            String
  usuario           Usuario      @relation(fields: [userId], references: [id], onDelete: Cascade)
  auctionId         String
  leilao            Leilao       @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  winningBidAmount  Float
  winDate           DateTime     @default(now())
  paymentStatus     StatusPagamento @default(PENDENTE)
  invoiceUrl        String?
}

model LanceMaximoUsuario {
  id          String   @id @default(cuid())
  userId      String
  lotId       String
  maxAmount   Float
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  usuario     Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
  lote        Lote     @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model Avaliacao {
  id                String   @id @default(cuid())
  lotId             String
  lote              Lote     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId         String
  leilao            Leilao   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  userId            String
  usuario           Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userDisplayName   String
  rating            Int
  comment           String?  @db.Text
  createdAt         DateTime @default(now())
}

model PerguntaLote {
  id                        String   @id @default(cuid())
  lotId                     String
  lote                      Lote     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId                 String
  leilao                    Leilao   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  userId                    String
  usuario                   Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userDisplayName           String
  questionText              String
  answerText                String?
  answeredAt                DateTime?
  answeredByUserId          String?
  answeredByUserDisplayName String?
  isPublic                  Boolean  @default(true)
  createdAt                 DateTime @default(now())

  respondidoPor             Usuario? @relation("RespostasAdmin", fields: [answeredByUserId], references: [id], onDelete: SetNull)
}

// ============================================================================
// Modelos de Entidades
// ============================================================================
model Vendedor {
  id                       String             @id @default(cuid())
  publicId                 String             @unique
  name                     String             @unique
  slug                     String             @unique
  contactName              String?
  email                    String?
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  isJudicial               Boolean            @default(false)
  judicialBranchId         String?            @unique
  logoUrl                  String?
  logoMediaId              String?
  dataAiHintLogo           String?
  description              String?
  memberSince              DateTime?
  rating                   Float?
  activeLotsCount          Int?
  totalSalesValue          Float?
  auctionsFacilitatedCount Int?
  userId                   String?            @unique
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  
  usuario                  Usuario?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  leiloes                  Leilao[]
  bens                     Bem[]
  vendasDiretas            VendaDireta[]
  postsBlog                PostagemBlog[]
  varaJudicial             VaraJudicial?      @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  processosJudiciais       ProcessoJudicial[]
}

model Leiloeiro {
  id                       String    @id @default(cuid())
  publicId                 String    @unique
  name                     String    @unique
  slug                     String    @unique
  registrationNumber       String?
  contactName              String?
  email                    String?
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  logoUrl                  String?
  logoMediaId              String?
  dataAiHintLogo           String?
  description              String?   @db.Text
  memberSince              DateTime?
  rating                   Float?
  auctionsConductedCount   Int?
  totalValueSold           Float?
  userId                   String?   @unique
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  
  usuario                  Usuario?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  leiloes                  Leilao[]
}

model VendaDireta {
  id                   String            @id @default(cuid())
  publicId             String            @unique
  title                String
  description          String
  imageUrl             String
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  offerType            TipoVendaDireta
  status               StatusVendaDireta
  price                Float?
  minimumOfferPrice    Float?
  categoryId           String
  locationCity         String?
  locationState        String?
  sellerId             String
  vendedor             Vendedor          @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  itemsIncluded        Json?
  tags                 Json?
  views                Int?
  proposalsCount       Int?
  expiresAt            DateTime?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  categoria            CategoriaLote     @relation(fields: [categoryId], references: [id])
}

model CategoriaLote {
  id                  String             @id @default(cuid())
  name                String             @unique
  slug                String             @unique
  description         String?
  itemCount           Int?
  hasSubcategories    Boolean?           @default(false)
  logoUrl             String?
  logoMediaId         String?
  dataAiHintLogo      String?
  coverImageUrl       String?
  coverImageMediaId   String?
  dataAiHintCover     String?
  megaMenuImageUrl    String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu  String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  
  leiloes             Leilao[]
  lotes               Lote[]
  bens                Bem[]
  vendasDiretas       VendaDireta[]
  postsBlog           PostagemBlog[]
  subcategorias       Subcategoria[]
}

model Subcategoria {
  id                  String           @id @default(cuid())
  name                String
  slug                String           @unique
  description         String?
  itemCount           Int?
  parentCategoryId    String
  categoriaPrincipal  CategoriaLote    @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  iconUrl             String?
  iconMediaId         String?
  dataAiHintIcon      String?
  displayOrder        Int              @default(0)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  
  lotes               Lote[]
  bens                Bem[]
}

model Estado {
  id        String   @id @default(cuid())
  name      String   @unique
  uf        String   @unique
  slug      String   @unique
  cityCount Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  cidades   Cidade[]
  tribunais Tribunal[]
  comarcas  Comarca[]
  lotes     Lote[]
}

model Cidade {
  id        String   @id @default(cuid())
  name      String
  slug      String
  stateId   String
  estado    Estado   @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateUf   String
  ibgeCode  String?
  lotCount  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lotes     Lote[]
}

// ============================================================================
// Modelos de Mídia e Conteúdo
// ============================================================================
model ItemMidia {
  id              String   @id @default(cuid())
  fileName        String
  storagePath     String?
  uploadedAt      DateTime @default(now())
  uploadedBy      String?
  usuario         Usuario? @relation("UploadedBy", fields: [uploadedBy], references: [id], onDelete: SetNull, onUpdate: NoAction)
  title           String?
  altText         String?
  caption         String?
  description     String?  @db.Text
  mimeType        String
  sizeBytes       Int
  dimensions      Json?
  urlOriginal     String
  urlThumbnail    String?
  urlMedium       String?
  urlLarge        String?
  linkedLotIds    Json?
  dataAiHint      String?
  postagensBlog   PostagemBlog[]
}

model PostagemBlog {
  id               String       @id @default(cuid())
  title            String
  slug             String       @unique
  content          String       @db.Text
  authorId         String
  autor            Usuario      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  sellerId         String?
  vendedor         Vendedor?    @relation(fields: [sellerId], references: [id])
  categoryId       String
  categoria        CategoriaLote @relation(fields: [categoryId], references: [id])
  featuredImageId  String?
  imagemDestaque   ItemMidia?    @relation(fields: [featuredImageId], references: [id], onDelete: SetNull)
  status           String
  publishedAt      DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model MensagemContato {
    id        String      @id @default(cuid())
    name      String
    email     String
    subject   String
    message   String      @db.Text
    isRead    Boolean     @default(false)
    createdAt DateTime    @default(now())
}


// ============================================================================
// Modelos de Suporte e Notificação
// ============================================================================
model Notificacao {
  id        String   @id @default(cuid())
  userId    String
  usuario   Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())
}

model TemplateDocumento {
  id        String             @id @default(cuid())
  name      String             @unique
  type      TipoTemplate
  content   String             @db.Text
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}


// ============================================================================
// Modelos Judiciais
// ============================================================================
model Tribunal {
  id        String         @id @default(cuid())
  name      String         @unique
  slug      String         @unique
  stateUf   String
  estado    Estado         @relation(fields: [stateUf], references: [uf])
  website   String?
  comarcas  Comarca[]
  processos ProcessoJudicial[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Comarca {
  id         String         @id @default(cuid())
  name       String
  slug       String
  courtId    String
  tribunal   Tribunal       @relation(fields: [courtId], references: [id])
  stateId    String
  estado     Estado         @relation(fields: [stateId], references: [id])
  zipCode    String?
  varas      VaraJudicial[]
  processos  ProcessoJudicial[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@unique([name, stateId])
}

model VaraJudicial {
  id          String             @id @default(cuid())
  name        String
  slug        String
  districtId  String
  comarca     Comarca            @relation(fields: [districtId], references: [id])
  contactName String?
  phone       String?
  email       String?
  processos   ProcessoJudicial[]
  vendedor    Vendedor?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  
  @@unique([name, districtId])
}

model ProcessoJudicial {
  id             String         @id @default(cuid())
  publicId       String         @unique
  processNumber  String         @unique
  isElectronic   Boolean
  courtId        String
  tribunal       Tribunal       @relation(fields: [courtId], references: [id])
  districtId     String
  comarca        Comarca        @relation(fields: [districtId], references: [id])
  branchId       String
  vara           VaraJudicial   @relation(fields: [branchId], references: [id])
  sellerId       String?
  vendedor       Vendedor?      @relation(fields: [sellerId], references: [id])
  parties        ParteProcesso[]
  bens           Bem[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model ParteProcesso {
  id             String             @id @default(cuid())
  processId      String
  processo       ProcessoJudicial   @relation(fields: [processId], references: [id], onDelete: Cascade)
  name           String
  documentNumber String?
  partyType      TipoParteProcesso

  @@unique([processId, name, partyType])
}


// ============================================================================
// Modelos de Configuração
// ============================================================================

model PlatformSettings {
  id                            String    @id @default("global")
  siteTitle                     String?
  siteTagline                   String?
  galleryImageBasePath          String?
  storageProvider               String?
  firebaseStorageBucket         String?
  activeThemeName               String?
  themes                        Json?
  platformPublicIdMasks         Json?
  homepageSections              Json?
  mentalTriggerSettings         Json?
  sectionBadgeVisibility        Json?
  mapSettings                   Json?
  searchPaginationType          String?
  searchItemsPerPage            Int?
  searchLoadMoreCount           Int?
  showCountdownOnLotDetail      Boolean?
  showCountdownOnCards          Boolean?
  showRelatedLotsOnLotDetail    Boolean?
  relatedLotsCount              Int?
  variableIncrementTable        Json?
  biddingSettings               Json?
  defaultListItemsPerPage       Int?
  updatedAt                     DateTime  @updatedAt
}


// ============================================================================
// Enums
// ============================================================================
enum UserAccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum StatusLeilao {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum TipoLeilao {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum StatusLote {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum StatusBem {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum UserHabilitationStatus {
  PENDENTE_DOCUMENTOS
  PENDENTE_ANALISE
  HABILITADO
  DOCUMENTOS_REJEITADOS
  BLOQUEADO
}

enum StatusDocumento {
  NAO_ENVIADO
  ENVIADO
  APROVADO
  REJEITADO
  EM_ANALISE
}

enum StatusPagamento {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum TipoVendaDireta {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum StatusVendaDireta {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
}

enum TipoParteProcesso {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum TipoTemplate {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

```
- /home/user/studio/src/lib/database/mysql.adapter.ts
- /home/user/studio/src/lib/database/firestore.adapter.ts
- /home/user/studio/src/lib/database/postgres.adapter.ts
- /home/user/studio/src/lib/firebase/auth.ts
- /home/user/studio/src/lib/auth-guard.tsx
- /home/user/studio/src/lib/firestore.ts
- /home/user/studio/src/lib/actions.ts
- /home/user/studio/src/lib/database.ts
- /home/user/studio/src/lib/firebase/client.ts
- /home/user/studio/src/hooks/use-database-query.ts
- /home/user/studio/src/hooks/use-form-submission.ts
- /home/user/studio/src/lib/db-config.middleware.ts
- /home/user/studio/src/contexts/dev-config-context.tsx
- /home/user/studio/src/components/dev-config-modal.tsx
- /home/user/studio/src/components/dev-config-provider.tsx
- /home/user/studio/src/hooks/use-auth.ts
- /home/user/studio/src/lib/use-firestore-query.ts
- /home/user/studio/src/lib/hooks.ts
- /home/user/studio/src/api/set-config/route.ts
- /home/user/studio/src/api/route.ts
- /home/user/studio/scripts/init-db.js
- /home/user/studio/scripts/init-db.ts
- /home/user/studio/scripts/seed-firestore.js
- /home/user/studio/scripts/seed-firestore.ts
- /home/user/studio/scripts/setup-admin-user.js
- /home/user/studio/scripts/setup-admin-user.ts
- /home/user/studio/src/lib/storage/firebase.adapter.ts
- /home/user/studio/src/lib/storage/local.adapter.ts
- /home/user/studio/src/lib/storage/index.ts
- /home/user/studio/src/lib/database/index.ts
- /home/user/studio/src/app/admin/auctioneers/queries.ts
- /home/user/studio/src/app/admin/auctions/queries.ts
- /home/user/studio/src/app/admin/categories/queries.ts
- /home/user/studio/src/app/admin/cities/queries.ts
- /home/user/studio/src/app/admin/lots/queries.ts
- /home/user/studio/src/app/admin/roles/queries.ts
- /home/user/studio/src/app/admin/sellers/queries.ts
- /home/user/studio/src/app/admin/states/queries.ts
- /home/user/studio/src/app/admin/media/queries.ts
- /home/user/studio/src/app/admin/users/queries.ts
- /home/user/studio/src/app/auth/register/actions.ts
- /home/user/studio/src/lib/sample-data.ts