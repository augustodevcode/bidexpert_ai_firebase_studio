
// datasource db {
//   provider = "postgresql"
//   url      = env("POSTGRES_DATABASE_URL")
// }
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

// ==============================================================================
// ENUMS
// ==============================================================================
enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum AssetStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum DirectSaleOfferStatus {
  RASCUNHO
  PENDING_APPROVAL
  ACTIVE
  SOLD
  EXPIRED
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

// ==============================================================================
// MODELS
// ==============================================================================
model User {
  id                  String                  @id @default(cuid())
  publicId            String?                 @unique @default(uuid())
  fullName            String?
  email               String                  @unique
  password            String
  cpf                 String?                 @unique
  rgNumber            String?
  rgIssuer          String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  cellPhone           String?
  homePhone           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  avatarUrl           String?
  dataAiHint          String?
  habilitationStatus  UserHabilitationStatus  @default(PENDING_DOCUMENTS)
  accountType         AccountType             @default(PHYSICAL)
  razaoSocial         String?
  cnpj                String?                 @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  optInMarketing      Boolean                 @default(false)
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  roles               UsersOnRoles[]
  tenants             UsersOnTenants[]
  bids                Bid[]
  notifications       Notification[]
  habilitations       AuctionHabilitation[]
  wins                UserWin[]
  reviews             Review[]
  questions           LotQuestion[]
  documents           UserDocument[]
  lotsWon             Lot[]                   @relation("LotsWon")
  createdReports      Report[]
  maxBids             UserLotMaxBid[]
  uploadedMedia       MediaItem[]             @relation("UploadedBy")
}

model Role {
  id              String         @id @default(cuid())
  name            String         @unique
  nameNormalized  String         @unique
  description     String?
  permissions     Json?
  users           UsersOnRoles[]
}

model UsersOnRoles {
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  role        Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId      String
  assignedAt  DateTime @default(now())
  assignedBy  String

  @@id([userId, roleId])
}

model Session {
  id        String   @id @default(cuid())
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Tenant {
  id                  String                @id @default(cuid())
  name                String
  subdomain           String?               @unique
  domain              String?               @unique
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  users               UsersOnTenants[]
  auctions            Auction[]
  lots                Lot[]
  bids                Bid[]
  sellers             Seller[]
  auctioneers         Auctioneer[]
  assets              Asset[]
  judicialProcesses   JudicialProcess[]
  notifications       Notification[]
  reports             Report[]
  directSaleOffers    DirectSaleOffer[]
}

model UsersOnTenants {
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId    String
  assignedAt  DateTime @default(now())
  assignedBy  String

  @@id([userId, tenantId])
}

model Lot {
  id                   String            @id @default(cuid())
  publicId             String            @unique @default(uuid())
  number               String?
  title                String
  description          String?           @db.Text
  status               LotStatus         @default(EM_BREVE)
  price                Decimal           @default(0) @db.Decimal(12, 2)
  initialPrice         Decimal?          @db.Decimal(12, 2)
  secondInitialPrice   Decimal?          @db.Decimal(12, 2)
  evaluationValue      Decimal?          @db.Decimal(12, 2)
  bidIncrementStep     Decimal?          @db.Decimal(12, 2)
  imageUrl             String?
  imageMediaId         String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  stageDetails         Json?
  lotPrices            LotStagePrice[]
  dataAiHint           String?
  views                Int               @default(0)
  bidsCount            Int               @default(0)
  isFeatured           Boolean           @default(false)
  isExclusive          Boolean           @default(false)
  hasKey               Boolean           @default(true)
  locationCity         String?
  locationState        String?
  latitude             Decimal?          @db.Decimal(10, 8)
  longitude            Decimal?          @db.Decimal(11, 8)
  mapAddress           String?
  winningBidTermUrl    String?
  type                 String
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  auction              Auction           @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId            String
  winner               User?             @relation("LotsWon", fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId             String?
  originalLot          Lot?              @relation("RelistHistory", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  originalLotId        String?           @unique
  relistedLot          Lot?              @relation("RelistHistory")
  isRelisted           Boolean           @default(false)
  relistCount          Int               @default(0)
  endDate              DateTime?
  seller               Seller?           @relation(fields: [sellerId], references: [id])
  sellerId             String?
  auctioneer           Auctioneer?       @relation(fields: [auctioneerId], references: [id])
  auctioneerId         String?
  bids                 Bid[]
  wins                 UserWin[]
  reviews              Review[]
  questions            LotQuestion[]
  category             LotCategory?      @relation(fields: [categoryId], references: [id])
  categoryId           String?
  subcategory          Subcategory?      @relation(fields: [subcategoryId], references: [id])
  subcategoryId        String?
  city                 City?             @relation(fields: [cityId], references: [id])
  cityId               String?
  state                State?            @relation(fields: [stateId], references: [id])
  stateId              String?
  assets               AssetsOnLots[]
  maxBids              UserLotMaxBid[]
  notifications        Notification[]
  judicialProcess      JudicialProcess[]
  tenant               Tenant            @relation(fields: [tenantId], references: [id])
  tenantId             String
  inheritedMediaFromAssetId String?
  additionalTriggers   Json?
  
  @@index([auctionId])
  @@index([winnerId])
  @@index([originalLotId])
  @@index([status])
}

model Asset {
  id                  String         @id @default(cuid())
  publicId            String         @unique @default(uuid())
  title               String
  description         String?        @db.Text
  properties          String?        @db.Text
  status              AssetStatus
  evaluationValue     Decimal?       @db.Decimal(12, 2)
  imageUrl            String?
  imageMediaId        String?
  galleryImageUrls    Json?
  mediaItemIds        Json?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  dataAiHint          String?
  locationCity        String?
  locationState       String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  zipCode             String?
  latitude            Decimal?       @db.Decimal(10, 8)
  longitude           Decimal?       @db.Decimal(11, 8)
  mapAddress          String?
  category            LotCategory?   @relation(fields: [categoryId], references: [id])
  categoryId          String?
  subcategory         Subcategory?   @relation(fields: [subcategoryId], references: [id])
  subcategoryId       String?
  judicialProcess     JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId   String?
  seller              Seller         @relation(fields: [sellerId], references: [id])
  sellerId            String
  city                City?          @relation(fields: [cityId], references: [id])
  cityId              String?
  state               State?         @relation(fields: [stateId], references: [id])
  stateId             String?
  lots                AssetsOnLots[]
  tenant              Tenant         @relation(fields: [tenantId], references: [id])
  tenantId            String
  media               AssetMedia[]
}

model AssetsOnLots {
  asset       Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  assetId     String
  lot         Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId       String
  assignedAt  DateTime @default(now())

  @@id([assetId, lotId])
}

model Auction {
  id                          String                @id @default(cuid())
  publicId                    String                @unique @default(uuid())
  title                       String
  slug                        String                @unique
  description                 String?               @db.Text
  status                      AuctionStatus         @default(EM_BREVE)
  auctionType                 AuctionType           @default(EXTRAJUDICIAL)
  auctionMethod               AuctionMethod         @default(STANDARD)
  participation               AuctionParticipation  @default(ONLINE)
  auctionDate                 DateTime
  endDate                     DateTime?
  initialOffer                Decimal?              @db.Decimal(12, 2)
  estimatedRevenue            Decimal?              @db.Decimal(12, 2)
  achievedRevenue             Decimal?              @db.Decimal(12, 2)
  decrementAmount             Decimal?              @db.Decimal(12, 2)
  decrementIntervalSeconds    Int?
  floorPrice                  Decimal?              @db.Decimal(12, 2)
  softCloseMinutes            Int?                  @default(2)
  automaticBiddingEnabled     Boolean               @default(false)
  allowInstallmentBids        Boolean               @default(true)
  silentBiddingEnabled        Boolean               @default(false)
  allowMultipleBidsPerUser    Boolean               @default(true)
  softCloseEnabled            Boolean               @default(false)
  documentsUrl                String?
  evaluationReportUrl         String?
  auctionCertificateUrl       String?
  visits                      Int                   @default(0)
  isFeaturedOnMarketplace     Boolean               @default(false)
  marketplaceAnnouncementTitle String?
  sellingBranch               String?
  additionalTriggers          Json?
  createdAt                   DateTime              @default(now())
  updatedAt                   DateTime              @updatedAt
  dataAiHint                  String?
  imageUrl                    String?
  imageMediaId                String?
  lots                        Lot[]
  bids                        Bid[]
  notifications               Notification[]
  stages                      AuctionStage[]
  habilitations               AuctionHabilitation[]
  lotPrices                   LotStagePrice[]
  auctioneer                  Auctioneer            @relation(fields: [auctioneerId], references: [id])
  auctioneerId                String
  seller                      Seller                @relation(fields: [sellerId], references: [id])
  sellerId                    String
  tenant                      Tenant                @relation(fields: [tenantId], references: [id])
  tenantId                    String
  cityId                      String?
  stateId                     String?
  categoryId                  String?
  judicialProcessId           String?
  category                    LotCategory?          @relation(fields: [categoryId], references: [id])
  cityRef                     City?                 @relation("CityAuctions", fields: [cityId], references: [id])
  stateRef                    State?                @relation("StateAuctions", fields: [stateId], references: [id])
  judicialProcess             JudicialProcess?      @relation(fields: [judicialProcessId], references: [id])
  court                       Court?                @relation(fields: [courtId], references: [id])
  courtId                     String?
}

model AuctionStage {
  id           String    @id @default(cuid())
  name         String
  startDate    DateTime
  endDate      DateTime
  initialPrice Decimal?  @db.Decimal(12, 2)
  statusText   String?
  auction      Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId    String

  @@index([auctionId])
}

model Bid {
  id            String   @id @default(cuid())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  bidder        User     @relation(fields: [bidderId], references: [id])
  bidderId      String
  bidderDisplay String
  amount        Decimal  @db.Decimal(12, 2)
  timestamp     DateTime @default(now())
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  tenantId      String

  @@index([lotId])
  @@index([bidderId])
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Decimal  @db.Decimal(12, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lotId])
}

model JudicialProcess {
  id                  String             @id @default(cuid())
  publicId            String?            @unique @default(uuid())
  processNumber       String
  isElectronic        Boolean            @default(true)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  parties             JudicialParty[]
  lots                Lot[]
  assets              Asset[]
  auctions            Auction[]
  court               Court?             @relation(fields: [courtId], references: [id])
  courtId             String?
  district            JudicialDistrict?  @relation(fields: [districtId], references: [id])
  districtId          String?
  branch              JudicialBranch?    @relation(fields: [branchId], references: [id])
  branchId            String?
  seller              Seller?            @relation(fields: [sellerId], references: [id])
  sellerId            String?
  tenant              Tenant             @relation(fields: [tenantId], references: [id])
  tenantId            String
  mediaItems          MediaItem[]

  @@unique([processNumber, tenantId])
}

model JudicialParty {
  id             String           @id @default(cuid())
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  process        JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId      String
}

model LotCategory {
  id                  String            @id @default(cuid())
  publicId            String?           @unique @default(uuid())
  slug                String            @unique
  name                String            @unique
  description         String?
  hasSubcategories    Boolean           @default(false)
  iconName            String?
  logoUrl             String?
  logoMediaId         String?
  dataAiHintIcon      String?
  coverImageUrl       String?
  coverImageMediaId   String?
  dataAiHintCover     String?
  megaMenuImageUrl    String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu  String?
  subcategories       Subcategory[]
  lots                Lot[]
  assets              Asset[]
  auctions            Auction[]
  directSaleOffers    DirectSaleOffer[]
}

model Subcategory {
  id                 String       @id @default(cuid())
  publicId           String?      @unique @default(uuid())
  slug               String       @unique
  name               String
  description        String?
  displayOrder       Int          @default(0)
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  parentCategory     LotCategory  @relation(fields: [parentCategoryId], references: [id])
  parentCategoryId   String
  lots               Lot[]
  assets             Asset[]
}

model Court {
  id                String             @id @default(cuid())
  slug              String             @unique
  name              String
  stateUf           String
  website           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialDistrict {
  id                String             @id @default(cuid())
  slug              String             @unique
  name              String
  courtId           String
  stateId           String
  zipCode           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  court             Court              @relation(fields: [courtId], references: [id])
  state             State              @relation(fields: [stateId], references: [id])
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialBranch {
  id                String             @id @default(cuid())
  slug              String             @unique
  name              String
  districtId        String
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  district          JudicialDistrict   @relation(fields: [districtId], references: [id])
  sellers           Seller[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model AssetMedia {
  id          String    @id @default(cuid())
  asset       Asset     @relation(fields: [assetId], references: [id])
  assetId     String
  mediaItem   MediaItem @relation(fields: [mediaItemId], references: [id])
  mediaItemId String
  displayOrder Int      @default(0)

  @@unique([assetId, mediaItemId])
}

model UserWin {
  id                 String               @id @default(cuid())
  lot                Lot                  @relation(fields: [lotId], references: [id])
  lotId              String               @unique
  user               User                 @relation(fields: [userId], references: [id])
  userId             String
  winningBidAmount   Decimal              @db.Decimal(12, 2)
  winDate            DateTime             @default(now())
  paymentStatus      PaymentStatus        @default(PENDENTE)
  payments           InstallmentPayment[]
}

model State {
  id                String             @id @default(cuid())
  slug              String             @unique
  name              String
  uf                String             @unique
  cities            City[]
  judicialDistricts JudicialDistrict[]
  lots              Lot[]
  auctions          Auction[]
}

model City {
  id       String    @id @default(cuid())
  slug     String    @unique
  name     String
  stateId  String
  stateUf  String?
  ibgeCode String?   @unique
  latitude  Decimal? @db.Decimal(10, 8)
  longitude Decimal? @db.Decimal(11, 8)
  state    State     @relation(fields: [stateId], references: [id])
  lots     Lot[]
  auctions Auction[] @relation("CityAuctions")
  assets   Asset[]
  sellers  Seller[]

  @@unique([name, stateId])
}

model Seller {
  id                      String            @id @default(cuid())
  publicId                String?           @unique @default(uuid())
  slug                    String            @unique
  name                    String
  contactName             String?
  email                   String?
  phone                   String?
  website                 String?
  address                 String?
  logoUrl                 String?
  logoMediaId             String?
  dataAiHintLogo          String?
  description             String?           @db.Text
  isJudicial              Boolean           @default(false)
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  auctions                Auction[]
  lots                    Lot[]
  assets                  Asset[]
  judicialProcess         JudicialProcess[]
  tenant                  Tenant            @relation(fields: [tenantId], references: [id])
  tenantId                String
  user                    User?             @relation(fields: [userId], references: [id])
  userId                  String?           @unique
  city                    City?             @relation(fields: [cityId], references: [id])
  cityId                  String?
  state                   String?
  zipCode                 String?
  street                  String?
  number                  String?
  complement              String?
  neighborhood            String?
  latitude                Decimal?          @db.Decimal(10, 8)
  longitude               Decimal?          @db.Decimal(11, 8)
  judicialBranch          JudicialBranch?   @relation(fields: [judicialBranchId], references: [id])
  judicialBranchId        String?           @unique
  directSaleOffers        DirectSaleOffer[]

  @@index([tenantId])
}

model Auctioneer {
  id                      String    @id @default(cuid())
  publicId                String?   @unique @default(uuid())
  slug                    String    @unique
  name                    String
  registrationNumber      String?
  contactName             String?
  email                   String?
  phone                   String?
  website                 String?
  address                 String?
  logoUrl                 String?
  logoMediaId             String?
  dataAiHintLogo          String?
  description             String?   @db.Text
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  auctions                Auction[]
  lots                    Lot[]
  tenant                  Tenant    @relation(fields: [tenantId], references: [id])
  tenantId                String
  user                    User?     @relation(fields: [userId], references: [id])
  userId                  String?   @unique
  city                    String?
  state                   String?
  zipCode                 String?
  street                  String?
  number                  String?
  complement              String?
  neighborhood            String?
  latitude                Decimal?  @db.decimal(10, 8)
  longitude               Decimal?  @db.decimal(11, 8)
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  lot       Lot?     @relation(fields: [lotId], references: [id])
  lotId     String?
  auction   Auction? @relation(fields: [auctionId], references: [id])
  auctionId String?
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId  String
}

model AuctionHabilitation {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  auction   Auction  @relation(fields: [auctionId], references: [id])
  auctionId String
  status    String   @default("PENDING") // PENDING, HABILITADO, REJEITADO
  createdAt DateTime @default(now())

  @@unique([userId, auctionId])
}

model DirectSaleOffer {
  id                    String                @id @default(cuid())
  publicId              String?               @unique @default(uuid())
  title                 String
  description           String?               @db.Text
  status                DirectSaleOfferStatus
  offerType             DirectSaleOfferType
  price                 Decimal?              @db.Decimal(12, 2)
  minimumOfferPrice     Decimal?              @db.Decimal(12, 2)
  imageUrl              String?
  imageMediaId          String?
  galleryImageUrls      Json?
  mediaItemIds          Json?
  dataAiHint            String?
  views                 Int                   @default(0)
  locationCity          String?
  locationState         String?
  expiresAt             DateTime?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  category              LotCategory           @relation(fields: [categoryId], references: [id])
  categoryId            String
  seller                Seller                @relation(fields: [sellerId], references: [id])
  sellerId              String
  tenant                Tenant                @relation(fields: [tenantId], references: [id])
  tenantId              String
  itemsIncluded         Json?
}

model LotStagePrice {
  id             String       @id @default(cuid())
  lot            Lot          @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId          String
  auctionStage   AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)
  stageId        String
  auction        Auction      @relation(fields: [auctionId], references: [id])
  auctionId      String
  initialBid     Decimal?     @db.Decimal(12, 2)
  bidIncrement   Decimal?     @db.Decimal(12, 2)

  @@unique([lotId, stageId])
}

model DocumentTemplate {
  id        String               @id @default(cuid())
  name      String               @unique
  type      DocumentTemplateType
  content   String               @db.Text
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model MediaItem {
  id                String        @id @default(cuid())
  fileName          String
  storagePath       String        @unique
  urlOriginal       String        @unique
  urlThumbnail      String?
  altText           String?
  caption           String?
  description       String?
  mimeType          String
  sizeBytes         Int
  width             Int?
  height            Int?
  dataAiHint        String?
  uploadedAt        DateTime      @default(now())
  uploadedBy        User          @relation("UploadedBy", fields: [uploadedById], references: [id])
  uploadedById      String
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId String?
  assets            AssetMedia[]
}

model UserDocument {
  id                String             @id @default(cuid())
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  documentType      DocumentType       @relation(fields: [documentTypeId], references: [id])
  documentTypeId    String
  fileUrl           String
  fileName          String
  status            UserDocumentStatus @default(PENDING_ANALYSIS)
  rejectionReason   String?
  submittedAt       DateTime           @default(now())
  verifiedAt        DateTime?

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id          String         @id @default(cuid())
  name        String         @unique
  description String?
  isRequired  Boolean        @default(false)
  appliesTo   String // Comma-separated: PHYSICAL, LEGAL
  userDocs    UserDocument[]
}

model Subscriber {
  id          String    @id @default(cuid())
  email       String    @unique
  name        String?
  subscribedAt DateTime @default(now())
}

model DataSource {
  id        String @id @default(cuid())
  name      String
  modelName String @unique
  fields    Json

  @@index([modelName])
}

model Report {
  id           String   @id @default(cuid())
  name         String
  description  String?
  definition   Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdBy    User     @relation(fields: [createdById], references: [id])
  createdById  String
}

model InstallmentPayment {
  id                String        @id @default(cuid())
  userWin           UserWin       @relation(fields: [userWinId], references: [id])
  userWinId         String
  installmentNumber Int
  totalInstallments Int
  amount            Decimal       @db.Decimal(12, 2)
  dueDate           DateTime
  paymentDate       DateTime?
  status            PaymentStatus @default(PENDENTE)
}

model Review {
  id          String    @id @default(cuid())
  lot         Lot       @relation(fields: [lotId], references: [id])
  lotId       String
  auctionId   String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  authorName  String
  rating      Int
  comment     String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model LotQuestion {
  id                      String    @id @default(cuid())
  lot                     Lot       @relation(fields: [lotId], references: [id])
  lotId                   String
  auctionId               String
  user                    User      @relation(fields: [userId], references: [id])
  userId                  String
  authorName              String
  questionText            String    @db.Text
  answerText              String?   @db.Text
  answeredByUserId        String?
  answeredByUserDisplayName String?
  isPublic                Boolean   @default(true)
  createdAt               DateTime  @default(now())
  answeredAt              DateTime?
}
