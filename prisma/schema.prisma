// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// =================================================================
// 1. Modelos de Usuário, Autenticação e Permissões
// =================================================================

model Usuario {
  id                   String            @id @default(cuid())
  email                String            @unique
  fullName             String?
  password             String
  avatarUrl            String?
  dataAiHint           String?           @db.Text
  roleId               String?
  habilitationStatus   HabilitationStatus? @default(PENDENTE_DOCUMENTOS)
  accountType          AccountType?      @default(PHYSICAL)
  badges               String?           @db.Text // Store as comma-separated string
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  // Campos para Pessoa Jurídica
  razaoSocial       String?
  cnpj              String? @unique
  inscricaoEstadual String?
  website           String?

  // Campos para Pessoa Física
  cpf           String?      @unique
  dateOfBirth   DateTime?
  rgNumber      String?
  rgIssuer      String?
  rgIssueDate   DateTime?
  rgState       String?
  cellPhone     String?
  homePhone     String?
  gender        String?
  profession    String?
  nationality   String?
  maritalStatus String?
  propertyRegime String?
  spouseName    String?
  spouseCpf     String?
  
  // Endereço
  zipCode      String?
  street       String?
  number       String?
  complement   String?
  neighborhood String?
  city         String?
  state        String?

  // Relações
  role                   Role?               @relation(fields: [roleId], references: [id], onDelete: SetNull)
  sellerProfile          Vendedor?
  auctioneerProfile      Leiloeiro?
  documentos             DocumentoUsuario[]
  lances                 Lance[]
  arremates              ArremateUsuario[]
  avaliacoes             Avaliacao[]
  perguntas              PerguntaLote[]      @relation("QuestionAskedBy")
  respostas              PerguntaLote[]      @relation("QuestionAnsweredBy")
  notificacoes           Notificacao[]
  lancesMaximos          LanceMaximoLote[]
  postagensBlog          PostagemBlog[]
  midiaEnviada           ItemMidia[]         @relation("UploadedBy")

  @@index([email])
}

model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  usuarios        Usuario[]
  permissoes      Permissao[]  @relation("RolePermissions")
}

model Permissao {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  roles       Role[] @relation("RolePermissions")
}

// =================================================================
// 2. Modelos de Leilão, Loteamento e Itens
// =================================================================

model CategoriaLote {
  id                 String             @id @default(cuid())
  name               String             @unique
  slug               String             @unique
  description        String?
  logoUrl            String?
  dataAiHintLogo     String?
  coverImageUrl      String?
  dataAiHintCover    String?
  megaMenuImageUrl   String?
  dataAiHintMegaMenu String?
  hasSubcategories   Boolean?           @default(false)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  // Relações
  leiloes       Leilao[]
  lotes         Lote[]
  subcategorias Subcategoria[]
  bens          Bem[]
  vendasDiretas  OfertaVendaDireta[]
}

model Subcategoria {
  id               String       @id @default(cuid())
  name             String
  slug             String       @unique
  description      String?
  displayOrder     Int?         @default(0)
  iconUrl          String?
  dataAiHintIcon   String?
  parentCategoryId String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  // Relações
  categoriaPai CategoriaLote @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lotes        Lote[]
  bens         Bem[]
}

model Leilao {
  id                String    @id @default(cuid())
  publicId          String    @unique
  title             String    @db.VarChar(255)
  fullTitle         String?   @db.VarChar(500)
  description       String?   @db.Text
  status            StatusLeilao @default(RASCUNHO)
  tipoLeilao        TipoLeilao?
  auctionDate       DateTime
  endDate           DateTime?
  auctionStages     Json?
  city              String?
  state             String?
  imageUrl          String?
  imageMediaId      String?   @unique
  documentsUrl      String?
  isFeaturedOnMarketplace Boolean? @default(false)
  marketplaceAnnouncementTitle String?
  automaticBiddingEnabled Boolean? @default(false)
  allowInstallmentBids Boolean? @default(false)
  softCloseEnabled  Boolean? @default(false)
  softCloseMinutes  Int? @default(2)
  silentBiddingEnabled Boolean? @default(false)
  allowMultipleBidsPerUser Boolean? @default(true)
  evaluationReportUrl String?
  auctionCertificateUrl String?
  estimatedRevenue Decimal? @db.Decimal(12, 2)
  achievedRevenue  Decimal? @db.Decimal(12, 2)
  totalHabilitatedUsers Int? @default(0)
  visits           Int?     @default(0)
  totalLots        Int?     @default(0)
  sellingBranch    String?
  additionalTriggers String? @db.Text
  decrementAmount Decimal? @db.Decimal(12, 2)
  decrementIntervalSeconds Int?
  floorPrice Decimal? @db.Decimal(12, 2)
  autoRelistSettings Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Chaves Estrangeiras e Relações
  categoryId       String
  categoria        CategoriaLote @relation(fields: [categoryId], references: [id])
  leiloeiroId      String
  leiloeiro        Leiloeiro @relation(fields: [leiloeiroId], references: [id])
  vendedorId       String?
  vendedor         Vendedor? @relation(fields: [vendedorId], references: [id])
  judicialProcessId String? @unique
  processoJudicial  ProcessoJudicial? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)

  // Relações de volta
  lotes     Lote[]
  lances    Lance[]
  perguntas PerguntaLote[]
}

model Lote {
  id                String    @id @default(cuid())
  publicId          String    @unique
  number            String?
  title             String    @db.VarChar(255)
  description       String?   @db.Text
  price             Decimal   @db.Decimal(12, 2)
  initialPrice      Decimal?  @db.Decimal(12, 2)
  secondInitialPrice Decimal? @db.Decimal(12, 2)
  status            StatusLote
  isFeatured        Boolean?  @default(false)
  isExclusive       Boolean?  @default(false)
  discountPercentage Decimal? @db.Decimal(5, 2)
  additionalTriggers String?  @db.Text
  imageUrl          String?
  imageMediaId      String?   @unique
  galleryImageUrls  Json?
  mediaItemIds      Json?
  bemIds            Json?
  bidIncrementStep  Decimal? @db.Decimal(10, 2)
  winningBidTermUrl String?
  latitude          Float?
  longitude         Float?
  mapAddress        String?
  mapEmbedUrl       String?   @db.Text
  mapStaticImageUrl String?   @db.Text
  dataAiHint        String?
  views             Int?      @default(0)
  bidsCount         Int?      @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relações
  leilaoId      String
  leilao        Leilao         @relation(fields: [leilaoId], references: [id], onDelete: Cascade)
  categoriaId   String
  categoria     CategoriaLote  @relation(fields: [categoriaId], references: [id])
  subcategoriaId String?
  subcategoria  Subcategoria?  @relation(fields: [subcategoriaId], references: [id], onDelete: SetNull)
  estadoId      String?
  estado        Estado?        @relation(fields: [estadoId], references: [id], onDelete: SetNull)
  cidadeId      String?
  cidade        Cidade?        @relation(fields: [cidadeId], references: [id], onDelete: SetNull)
  bens          Bem[]          @relation("LotBens")

  // Relações de volta
  lances          Lance[]
  arremates       ArremateUsuario[]
  perguntas       PerguntaLote[]
  avaliacoes      Avaliacao[]
  lancesMaximos   LanceMaximoLote[]
}

model Bem {
  id                String    @id @default(cuid())
  publicId          String    @unique
  title             String
  description       String?   @db.Text
  status            StatusBem @default(DISPONIVEL)
  evaluationValue   Decimal?  @db.Decimal(12, 2)
  imageUrl          String?
  imageMediaId      String?   @unique
  galleryImageUrls  Json?
  mediaItemIds      Json?
  dataAiHint        String?
  locationCity      String?
  locationState     String?
  address           String?
  latitude          Float?
  longitude         Float?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Campos específicos de Veículo
  plate        String?
  make         String?
  model        String?
  version      String?
  year         Int?
  modelYear    Int?
  mileage      Int?
  color        String?
  fuelType     String?
  transmissionType String?
  bodyType     String?
  vin          String?
  renavam      String?
  enginePower  String?
  numberOfDoors Int?
  vehicleOptions String? @db.Text
  detranStatus String?
  debts        String? @db.Text
  runningCondition String?
  bodyCondition String?
  tiresCondition String?
  hasKey       Boolean?

  // Campos específicos de Imóvel
  propertyRegistrationNumber String?
  iptuNumber               String?
  isOccupied               Boolean?
  totalArea                Decimal? @db.Decimal(10, 2)
  builtArea                Decimal? @db.Decimal(10, 2)
  bedrooms                 Int?
  suites                   Int?
  bathrooms                Int?
  parkingSpaces            Int?
  propertyType             String?
  constructionType         String?
  finishes                 String? @db.Text
  infrastructure           String? @db.Text
  condoDetails             String? @db.Text
  improvements             String? @db.Text
  topography               String?
  liensAndEncumbrances     String? @db.Text
  propertyDebts            String? @db.Text
  unregisteredRecords      String? @db.Text
  hasHabiteSe              Boolean?
  zoningRestrictions       String?
  amenities                Json?

  // Campos de outros tipos
  serialNumber String?
  itemCondition String?
  specifications String? @db.Text
  includedAccessories String? @db.Text
  batteryCondition String?
  hasInvoice Boolean?
  hasWarranty Boolean?
  repairHistory String? @db.Text
  applianceCapacity String?
  voltage String?
  applianceType String?
  additionalFunctions String? @db.Text
  hoursUsed Int?
  engineType String?
  capacityOrPower String?
  maintenanceHistory String? @db.Text
  installationLocation String?
  compliesWithNR String?
  operatingLicenses String? @db.Text
  breed String?
  age String?
  sex String?
  weight String?
  individualId String?
  purpose String?
  sanitaryCondition String?
  lineage String?
  isPregnant Boolean?
  specialSkills String? @db.Text
  gtaDocument String?
  breedRegistryDocument String?
  furnitureType String?
  material String?
  style String?
  dimensions String?
  pieceCount Int?
  jewelryType String?
  metal String?
  gemstones String? @db.Text
  totalWeight String?
  jewelrySize String?
  authenticityCertificate String?
  workType String?
  artist String?
  period String?
  technique String?
  provenance String? @db.Text
  boatType String?
  boatLength String?
  hullMaterial String?
  onboardEquipment String? @db.Text
  productName String?
  quantity String?
  packagingType String?
  expirationDate DateTime?
  storageConditions String? @db.Text
  preciousMetalType String?
  purity String?
  forestGoodsType String?
  volumeOrQuantity String?
  species String?
  dofNumber String?

  // Relações
  lotes                Lote[]            @relation("LotBens")
  categoriaId          String?
  categoria            CategoriaLote?    @relation(fields: [categoriaId], references: [id], onDelete: SetNull)
  subcategoriaId       String?
  subcategoria         Subcategoria?     @relation(fields: [subcategoriaId], references: [id], onDelete: SetNull)
  judicialProcessId    String?
  processoJudicial     ProcessoJudicial? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  vendedorId           String?
  vendedor             Vendedor?         @relation(fields: [vendedorId], references: [id], onDelete: SetNull)
}

// =================================================================
// 3. Modelos de Entidades Externas (Vendedores, Leiloeiros)
// =================================================================

model Vendedor {
  id                   String      @id @default(cuid())
  publicId             String      @unique
  name                 String      @unique
  slug                 String      @unique
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  dataAiHintLogo       String?
  description          String?     @db.Text
  isJudicial           Boolean     @default(false)
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt

  // Relações
  usuarioId            String?            @unique
  usuario              Usuario?           @relation(fields: [usuarioId], references: [id], onDelete: SetNull)
  ramoJudicialId       String?            @unique
  ramoJudicial         RamoJudicial?      @relation(fields: [ramoJudicialId], references: [id], onDelete: SetNull)
  logoId               String?            @unique
  logo                 ItemMidia?         @relation("SellerLogo", fields: [logoId], references: [id], onDelete: SetNull)
  
  // Relações de volta
  leiloes              Leilao[]
  bens                 Bem[]
  vendasDiretas        OfertaVendaDireta[]
  processosJudiciais   ProcessoJudicial[]
  postagensBlog        PostagemBlog[]
}

model Leiloeiro {
  id                      String   @id @default(cuid())
  publicId                String   @unique
  name                    String   @unique
  slug                    String   @unique
  registrationNumber      String?
  contactName             String?
  email                   String?
  phone                   String?
  address                 String?
  city                    String?
  state                   String?
  zipCode                 String?
  website                 String?
  logoUrl                 String?
  dataAiHintLogo          String?
  description             String?  @db.Text
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  // Relações
  usuarioId               String?     @unique
  usuario                 Usuario?    @relation(fields: [usuarioId], references: [id], onDelete: SetNull)
  logoId                  String?     @unique
  logo                    ItemMidia?  @relation("AuctioneerLogo", fields: [logoId], references: [id], onDelete: SetNull)
  
  // Relações de volta
  leiloes                 Leilao[]
}

// =================================================================
// 4. Modelos de Entidades Judiciais
// =================================================================

model Tribunal {
  id          String             @id @default(cuid())
  name        String             @unique
  slug        String             @unique
  stateUf     String
  website     String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relações
  estado      Estado             @relation(fields: [stateUf], references: [uf])
  comarcas    Comarca[]
  processos   ProcessoJudicial[]
}

model Comarca {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  zipCode     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  tribunalId  String
  tribunal    Tribunal @relation(fields: [tribunalId], references: [id], onDelete: Cascade)
  estadoId    String
  estado      Estado   @relation(fields: [estadoId], references: [id], onDelete: Cascade)
  varas       RamoJudicial[]
  processos   ProcessoJudicial[]
  
  @@unique([name, estadoId])
}

model RamoJudicial {
  id             String      @id @default(cuid())
  name           String
  slug           String      @unique
  contactName    String?
  phone          String?
  email          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relações
  comarcaId      String
  comarca        Comarca     @relation(fields: [comarcaId], references: [id], onDelete: Cascade)
  vendedor       Vendedor?
  processos      ProcessoJudicial[]
  
  @@unique([name, comarcaId])
}

model ProcessoJudicial {
  id             String    @id @default(cuid())
  publicId       String    @unique
  processNumber  String    @unique
  isElectronic   Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Chaves Estrangeiras e Relações
  tribunalId      String
  tribunal        Tribunal    @relation(fields: [tribunalId], references: [id])
  comarcaId       String
  comarca         Comarca     @relation(fields: [comarcaId], references: [id])
  ramoId          String
  ramo            RamoJudicial @relation(fields: [ramoId], references: [id])
  vendedorId      String?
  vendedor        Vendedor?   @relation(fields: [vendedorId], references: [id])
  
  // Relações de volta
  partes ParteProcesso[]
  bens   Bem[]
  leilao Leilao?
}

model ParteProcesso {
  id             String         @id @default(cuid())
  name           String
  partyType      TipoParteProcesso
  documentNumber String?
  processoId     String
  processo       ProcessoJudicial @relation(fields: [processoId], references: [id], onDelete: Cascade)

  @@unique([processoId, name, partyType])
}

// =================================================================
// 5. Modelos Transacionais e de Interação
// =================================================================

model Lance {
  id            String   @id @default(cuid())
  amount        Decimal  @db.Decimal(12, 2)
  timestamp     DateTime @default(now())
  
  // Relações
  leilaoId      String
  leilao        Leilao   @relation(fields: [leilaoId], references: [id], onDelete: Cascade)
  loteId        String
  lote          Lote     @relation(fields: [loteId], references: [id], onDelete: Cascade)
  licitanteId   String
  licitante     Usuario  @relation(fields: [licitanteId], references: [id], onDelete: Cascade)
  bidderDisplay String
}

model ArremateUsuario {
  id               String           @id @default(cuid())
  winningBidAmount Decimal          @db.Decimal(12, 2)
  winDate          DateTime         @default(now())
  paymentStatus    StatusPagamento  @default(PENDENTE)
  invoiceUrl       String?

  // Relações
  loteId           String           @unique
  lote             Lote             @relation(fields: [loteId], references: [id], onDelete: Cascade)
  usuarioId        String
  usuario          Usuario          @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
}

model LanceMaximoLote {
  id        String   @id @default(cuid())
  maxAmount Decimal  @db.Decimal(12, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações
  loteId    String
  lote      Lote   @relation(fields: [loteId], references: [id], onDelete: Cascade)
  usuarioId String
  usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  
  @@unique([usuarioId, loteId])
}


model Avaliacao {
  id              String   @id @default(cuid())
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relações
  loteId          String
  lote            Lote     @relation(fields: [loteId], references: [id], onDelete: Cascade)
  leilaoId        String
  leilao          Leilao   @relation(fields: [leilaoId], references: [id], onDelete: Cascade)
  usuarioId       String
  usuario         Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  userDisplayName String?
  
  @@unique([loteId, usuarioId])
}

model PerguntaLote {
  id                      String   @id @default(cuid())
  questionText            String   @db.Text
  answerText              String?  @db.Text
  isPublic                Boolean  @default(true)
  createdAt               DateTime @default(now())
  answeredAt              DateTime?
  
  // Relações
  usuarioId               String
  usuario                 Usuario   @relation("QuestionAskedBy", fields: [usuarioId], references: [id], onDelete: Cascade)
  userDisplayName         String?
  answeredByUserId        String?
  answeredByUserDisplayName String?
  answeredByUser          Usuario?  @relation("QuestionAnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)
  loteId                  String
  lote                    Lote      @relation(fields: [loteId], references: [id], onDelete: Cascade)
  leilaoId                String
  leilao                  Leilao    @relation(fields: [leilaoId], references: [id], onDelete: Cascade)
}


// =================================================================
// 6. Modelos de Conteúdo e Configuração
// =================================================================

model ItemMidia {
  id              String   @id @default(cuid())
  fileName        String
  storagePath     String   @unique
  urlOriginal     String   @db.Text
  urlThumbnail    String?  @db.Text
  urlMedium       String?  @db.Text
  urlLarge        String?  @db.Text
  mimeType        String
  sizeBytes       Int
  title           String?
  altText         String?
  caption         String?
  description     String?  @db.Text
  dataAiHint      String?
  uploadedAt      DateTime @default(now())

  // Relações
  uploadedById    String?
  usuario         Usuario?   @relation("UploadedBy", fields: [uploadedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  // Relações de volta
  sellerLogo      Vendedor?     @relation("SellerLogo")
  auctioneerLogo  Leiloeiro?    @relation("AuctioneerLogo")
  blogPostImage   PostagemBlog? @relation("BlogPostImage")
}

model OfertaVendaDireta {
  id                   String        @id @default(cuid())
  publicId             String        @unique
  title                String
  description          String        @db.Text
  offerType            TipoOfertaVendaDireta
  status               StatusOfertaVendaDireta
  price                Decimal?      @db.Decimal(12, 2)
  minimumOfferPrice    Decimal?      @db.Decimal(12, 2)
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?       @unique
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  expiresAt            DateTime?
  views                Int?          @default(0)
  proposalsCount       Int?          @default(0)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  // Relações
  categoriaId          String
  categoria            CategoriaLote @relation(fields: [categoriaId], references: [id])
  vendedorId           String
  vendedor             Vendedor      @relation(fields: [vendedorId], references: [id], onDelete: Cascade)
}

model PostagemBlog {
  id             String    @id @default(cuid())
  title          String
  slug           String    @unique
  content        String    @db.Text
  excerpt        String?   @db.Text
  status         String    @default("draft") // draft, published, archived
  publishedAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relações
  autorId        String
  autor          Usuario   @relation(fields: [autorId], references: [id])
  vendedorId     String?
  vendedor       Vendedor? @relation(fields: [vendedorId], references: [id])
  imagemDestaqueId String?   @unique
  imagemDestaque ItemMidia? @relation("BlogPostImage", fields: [imagemDestaqueId], references: [id], onDelete: SetNull)
  tags           Tag[]     @relation("PostTags")
}

model Tag {
  id           String         @id @default(cuid())
  name         String         @unique
  slug         String         @unique
  postagensBlog PostagemBlog[] @relation("PostTags")
}


model DocumentoUsuario {
  id                String             @id @default(cuid())
  userId            String
  documentTypeId    String
  fileUrl           String?
  fileName          String?
  status            StatusDocumentoUsuario @default(NOT_SENT)
  uploadDate        DateTime?
  analysisDate      DateTime?
  analystId         String?
  rejectionReason   String?            @db.Text
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // Relações
  usuario           Usuario            @relation(fields: [userId], references: [id], onDelete: Cascade)
  tipoDocumento     TipoDocumento      @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)

  @@unique([userId, documentTypeId])
}

model TipoDocumento {
  id             String             @id @default(cuid())
  name           String             @unique
  description    String?
  isRequired     Boolean            @default(true)
  appliesTo      String? // Ex: "PHYSICAL,LEGAL"
  allowedFormats String?
  displayOrder   Int?               @default(0)
  
  // Relação de volta
  documentosUsuario DocumentoUsuario[]
}

model Notificacao {
  id        String   @id @default(cuid())
  message   String
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())
  
  // Relação
  usuarioId String
  usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
}

model MensagemContato {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}


model ConfiguracoesPlataforma {
  id                        String   @id @default("global")
  siteTitle                 String?
  siteTagline               String?
  galleryImageBasePath      String?
  storageProvider           String?  @default("local")
  firebaseStorageBucket     String?
  activeThemeName           String?
  themes                    Json?
  platformPublicIdMasks     Json?
  mapSettings               Json?
  biddingSettings           Json?
  searchPaginationType      String?  @default("loadMore")
  searchItemsPerPage        Int?     @default(12)
  searchLoadMoreCount       Int?     @default(12)
  defaultListItemsPerPage   Int?     @default(10)
  showCountdownOnLotDetail  Boolean? @default(true)
  showCountdownOnCards      Boolean? @default(true)
  showRelatedLotsOnLotDetail Boolean? @default(true)
  relatedLotsCount          Int?     @default(5)
  mentalTriggerSettings     Json?
  sectionBadgeVisibility    Json?
  variableIncrementTable    Json?
  updatedAt                 DateTime @updatedAt
}

// =================================================================
// 7. Modelos Geográficos
// =================================================================

model Estado {
  id          String             @id @default(cuid())
  name        String
  uf          String             @unique
  slug        String             @unique
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relações de volta
  lotes       Lote[]
  tribunais   Tribunal[]
  comarcas    Comarca[]
}

model Cidade {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  ibgeCode  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relações
  estadoId  String
  estado    Estado   @relation(fields: [estadoId], references: [id], onDelete: Cascade)
  lotes     Lote[]
}


// =================================================================
// ENUMS
// =================================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum TipoLeilao {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum StatusLeilao {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum StatusLote {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum StatusBem {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum TipoOfertaVendaDireta {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum StatusOfertaVendaDireta {
  ACTIVE
  SOLD
  EXPIRED
  PENDING_APPROVAL
}

enum StatusPagamento {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum TipoParteProcesso {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum HabilitationStatus {
  PENDENTE_DOCUMENTOS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum StatusDocumentoUsuario {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum TipoTemplateDocumento {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

```
- src/types/index.ts:
```ts
// src/types/index.ts
import type { 
    User, Role, UserDocument, DocumentType, Auction as PrismaAuction, Lot as PrismaLot, Bid, 
    UserWin, Seller, Auctioneer, DirectSaleOffer, MediaItem, LotCategory, 
    State as StateInfo, City as CityInfo, Subcategory,
    Court, JudicialDistrict, JudicialBranch, JudicialProcess, ProcessParty, Bem,
    Notification, BlogPost, ContactMessage,
    Review, LotQuestion, UserLotMaxBid,
    Prisma,
    Permission, // Import Permission
    Tag, // Import Tag
} from '@prisma/client';
import type { Timestamp as FirebaseAdminTimestamp, FieldValue as FirebaseAdminFieldValue } from 'firebase-admin/firestore';
import type { Timestamp as FirebaseClientTimestamp } from 'firebase/firestore'; // Client SDK Timestamp

// For server-side logic (Admin SDK)
export type { AdminFieldValue, ServerTimestamp };

// For client-side logic or data received from client
export type { ClientTimestamp };

// Generic type for properties that could be any of these, or a JS Date
export type AnyTimestamp = ServerTimestamp | ClientTimestamp | Date | string | null | undefined;

// --- Redefining Prisma types to include relations or computed fields ---

export type Auction = PrismaAuction & {
  lots?: Lot[];
  totalLots?: number;
  auctioneer?: string;
  seller?: string;
  category?: string;
  auctioneerName?: string;
  auctioneerLogoUrl?: string;
};

export type Lot = PrismaLot & {
    auctionName?: string;
    type?: string;
    subcategoryName?: string;
    cityName?: string;
    stateUf?: string;
    isFavorite?: boolean;
    bens?: Bem[];
};

export type Bem = Prisma.BemGetPayload<{
  include: {
    category: true;
    subcategory: true;
    judicialProcess: true;
    seller: true;
  }
}> & {
  categoryName?: string;
  subcategoryName?: string;
  judicialProcessNumber?: string;
  sellerName?: string;
};


// --- EXPORTING PRISMA GENERATED TYPES ---
// This makes it easy to use the exact shape of our database models throughout the app.
export type { 
    User as UserProfileData, Role, UserDocument, DocumentType, Bid as BidInfo, 
    UserWin, Seller as SellerProfileInfo, Auctioneer as AuctioneerProfileInfo, 
    DirectSaleOffer, MediaItem, LotCategory, StateInfo, CityInfo, Subcategory,
    Court, JudicialDistrict, JudicialBranch, JudicialProcess, ProcessParty, // Bem is now custom
    Notification, BlogPost, ContactMessage, 
    Review, LotQuestion, UserLotMaxBid, 
    Permission, // Exporting Permission
    Tag, // Exporting Tag
    Prisma
};


// --- CUSTOM & COMPOSITE TYPES ---

// Adds computed permissions array to the base User type
export type UserProfileWithPermissions = User & {
  permissions: string[];
};

// Represents the data coming from the user registration form
export type UserCreationData = Partial<Omit<User, 'id' | 'createdAt' | 'updatedAt' | 'roleId' | 'sellerId' | 'badges'>> & {
  email: string;
  password?: string | null;
  website?: string | null; // Adding website to match form
};

// Represents the fields that a user can edit on their own profile page
export type EditableUserProfileData = Partial<Omit<User, 'id' | 'email' | 'createdAt' | 'updatedAt' | 'roleId' | 'sellerId' | 'password' | 'badges'>>;

export type UserFormValues = Pick<User, 'fullName' | 'email' | 'cpf' | 'cellPhone' | 'dateOfBirth' | 'accountType' | 'razaoSocial' | 'cnpj' | 'inscricaoEstadual' | 'website' | 'zipCode' | 'street' | 'number' | 'complement' | 'neighborhood' | 'city' | 'state' | 'optInMarketing'> & {
  password?: string;
  roleId?: string | null; 
};


export interface UserBid {
    id: string;
    lotId: string;
    auctionId: string;
    lotTitle: string;
    lotImageUrl?: string | null;
    lotImageAiHint?: string | null;
    userBidAmount: number;
    currentLotPrice: number;
    bidStatus: 'GANHANDO' | 'PERDENDO' | 'SUPERADO_POR_OUTRO' | 'SUPERADO_PELO_PROPRIO_MAXIMO' | 'ARREMATADO' | 'NAO_ARREMATADO' | 'ENCERRADO' | 'CANCELADO';
    bidDate: AnyTimestamp;
    lotEndDate: AnyTimestamp;
    lot: Lot; // Include full lot for linking
}

// --- FORM DATA TYPES ---
// These types define the shape of data coming from forms, before it's processed for the database.

export type CategoryFormData = Omit<LotCategory, 'id' | 'slug' | 'createdAt' | 'updatedAt' | 'itemCount' | 'hasSubcategories'>;
export type SubcategoryFormData = Omit<Subcategory, 'id' | 'slug' | 'createdAt' | 'updatedAt' | 'itemCount' | 'iconMediaId'>;
export type StateFormData = Omit<StateInfo, 'id' | 'slug' | 'createdAt' | 'updatedAt' | 'cityCount'>;
export type CityFormData = Omit<CityInfo, 'id' | 'slug' | 'stateUf' | 'createdAt' | 'updatedAt' | 'lotCount'>;
export type AuctioneerFormData = Omit<Auctioneer, 'id' | 'publicId' | 'slug' | 'createdAt' | 'updatedAt' | 'logoId'>;
export type SellerFormData = Omit<Seller, 'id'| 'publicId' | 'slug' | 'createdAt' | 'updatedAt' | 'logoId'>;
export type RoleFormData = Omit<Role, 'id' | 'name_normalized'> & {
  permissions?: string[];
};
export type CourtFormData = Omit<Court, 'id' | 'slug' | 'createdAt' | 'updatedAt'>;
export type JudicialDistrictFormData = Omit<JudicialDistrict, 'id' | 'slug' | 'createdAt' | 'updatedAt' | 'stateUf'>;
export type JudicialBranchFormData = Omit<JudicialBranch, 'id' | 'slug' | 'createdAt' | 'updatedAt'>;
export type JudicialProcessFormData = Omit<JudicialProcess, 'id' | 'publicId' | 'createdAt' | 'updatedAt'> & {
  parties: Array<Partial<ProcessParty>>; 
};
export type DocumentTemplateFormData = Omit<DocumentTemplate, 'id' | 'createdAt' | 'updatedAt'>;

export type BemFormData = Omit<Prisma.BemUncheckedCreateInput, 'id' | 'publicId' | 'createdAt' | 'updatedAt' | 'galleryImageUrls' | 'mediaItemIds' | 'amenities'> & {
  galleryImageUrls?: string[];
  mediaItemIds?: string[];
  amenities?: { value: string }[];
};

export type AuctionFormData = Omit<Auction, 'id' | 'publicId' | 'createdAt' | 'updatedAt' | 'totalLots'> & {
  auctionDate: Date; 
  endDate?: Date | null; 
};

export type LotFormData = Omit<Prisma.LotUncheckedCreateInput, 'id'|'publicId'|'createdAt'|'updatedAt'|'auctionId'|'categoryId'|'number'|'isFavorite'|'views'|'bidsCount'|'status'|'isFeatured'| 'galleryImageUrls' | 'mediaItemIds' | 'bemIds' > & {
  auctionId: string;
  type: string; // From form, maps to categoryId
  auctionName?: string;
  bemIds?: string[];
  mediaItemIds?: string[];
  galleryImageUrls?: string[];
  isFeatured?: boolean;
  status: LotStatus;
};

export type LotDbData = Omit<LotFormData, 'type' | 'auctionName'> & {
  categoryId: string;
};


export type DirectSaleOfferFormData = Omit<DirectSaleOffer, 'id' | 'publicId' | 'createdAt' | 'updatedAt' | 'views' | 'proposalsCount' | 'galleryImageUrls' | 'sellerId' | 'sellerLogoUrl' | 'dataAiHintSellerLogo' | 'latitude' | 'longitude' | 'mapAddress' | 'mapEmbedUrl' | 'mapStaticImageUrl' | 'categoryId' | 'imageMediaId' | 'mediaItemIds'> & {
    expiresAt?: Date | null;
    mediaItemIds?: string[];
    galleryImageUrls?: string[];
    category: string; // The form sends the name, action will resolve ID
    sellerName: string; // Form sends name
    imageMediaId?: string | null;
};

// --- WIZARD SPECIFIC TYPES ---

export interface WizardData {
  auctionType?: 'JUDICIAL' | 'EXTRAJUDICIAL' | 'PARTICULAR' | 'TOMADA_DE_PRECOS';
  judicialProcess?: JudicialProcess;
  auctionDetails?: Partial<Auction> & {
    auctioneer?: string; // name
    seller?: string;     // name
  };
  selectedBens?: Bem[];
  createdLots?: Partial<Lot>[];
}


// --- GENERIC & UTILITY TYPES ---

// Used for API responses from CNJ
export interface CnjProcessSource {
  numeroProcesso: string;
  classe: { codigo: number; nome: string };
  sistema: { codigo: number; nome: string };
  formato: { codigo: number; nome: string };
  tribunal: string;
  dataHoraUltimaAtualizacao: string;
  grau: string;
  dataAjuizamento: string;
  movimentos: any[];
  id: string;
  nivelSigilo: number;
  orgaoJulgador: {
    codigoMunicipioIBGE: number;
    codigo: number;
    nome: string;
  };
  assuntos: { codigo: number; nome: string }[][];
}
export interface CnjHit {
  _index: string;
  _type: string;
  _id: string;
  _score: number | null;
  _source: CnjProcessSource;
  sort?: (string | number)[];
}
export interface CnjSearchResponse {
  took: number;
  timed_out: boolean;
  hits: {
    total: {
      value: number;
      relation: string;
    };
    max_score: number | null;
    hits: CnjHit[];
  };
}

export type ThemeColors = Record<string, string>;

export interface Theme {
  name: string;
  colors: ThemeColors;
}

export interface MentalTriggerSettings {
    showDiscountBadge?: boolean;
    showUrgencyTimer?: boolean;
    urgencyTimerThresholdDays?: number;
    urgencyTimerThresholdHours?: number;
    showPopularityBadge?: boolean;
    popularityViewThreshold?: number;
    showHotBidBadge?: boolean;
    hotBidThreshold?: number;
    showExclusiveBadge?: boolean;
}

export interface BadgeVisibilitySettings {
  showStatusBadge?: boolean;
  showDiscountBadge?: boolean;
  showUrgencyTimer?: boolean;
  showPopularityBadge?: boolean;
  showHotBidBadge?: boolean;
  showExclusiveBadge?: boolean;
}

export interface SectionBadgeConfig {
  featuredLots?: BadgeVisibilitySettings;
  searchGrid?: BadgeVisibilitySettings;
  searchList?: BadgeVisibilitySettings;
  lotDetail?: BadgeVisibilitySettings; 
}

export type HomepageSectionType = 'hero_carousel' | 'filter_links' | 'featured_lots' | 'active_auctions' | 'promo_banner_1' | 'categories_grid';

export interface PromoCardContent {
    title: string;
    subtitle?: string;
    link: string;
    imageUrl?: string;
    imageAlt?: string;
    dataAiHint?: string;
    bgColorClass?: string;
}

export interface HomepageSectionConfig {
  id: string;
  type: HomepageSectionType;
  title?: string;
  visible: boolean;
  order: number;
  itemCount?: number; 
  categorySlug?: string; 
  promoContent?: PromoCardContent;
}

export interface MapSettings {
  defaultProvider?: 'google' | 'openstreetmap' | 'staticImage';
  googleMapsApiKey?: string | null;
  staticImageMapZoom?: number;
  staticImageMapMarkerColor?: string;
}

export type SearchPaginationType = 'loadMore' | 'numberedPages';

export type StorageProviderType = 'local' | 'firebase';

export interface BiddingSettings {
  instantBiddingEnabled?: boolean;
  getBidInfoInstantly?: boolean;
  biddingInfoCheckIntervalSeconds?: number;
}

export type VariableIncrementRule = Prisma.JsonValue;

export type PlatformSettingsFormData = Omit<PlatformSettings, 'id' | 'updatedAt' | 'variableIncrementTable'> & {
    variableIncrementTable?: { from: number, to: number | null, increment: number }[];
};


export interface AdminReportData {
  users: number;
  auctions: number;
  lots: number;
  sellers: number;
  totalRevenue: number;
  newUsersLast30Days: number;
  activeAuctions: number;
  lotsSoldCount: number;
  salesData: { name: string; Sales: number }[];
  categoryData: { name: string; value: number }[];
  averageBidValue: number;
  averageLotsPerAuction: number;
  auctionSuccessRate: number;
}

export interface AdminDashboardStats {
    users: number;
    auctions: number;
    lots: number;
    sellers: number;
}

export interface ConsignorDashboardStats {
    totalLotsConsigned: number;
    activeLots: number;
    soldLots: number;
    totalSalesValue: number;
    salesRate: number;
    salesData: { name: string; sales: number }[];
}


export interface RecentlyViewedLotInfo {
  id: string;
  title: string;
  imageUrl?: string | null;
  auctionId: string;
  dataAiHint?: string | null;
}

export type AuctionStage = Omit<Prisma.JsonValue, 'endDate'> & {
  name: string;
  endDate: AnyTimestamp;
  statusText?: string;
  initialPrice?: number;
};


// Enums for Zod schemas
export const lotStatusValues: [Lot['status'], ...Lot['status'][]] = [
  'EM_BREVE',
  'ABERTO_PARA_LANCES',
  'ENCERRADO',
  'VENDIDO',
  'NAO_VENDIDO',
];

export const auctionStatusValues: [Auction['status'], ...Auction['status'][]] = [
  'RASCUNHO',
  'EM_PREPARACAO',
  'EM_BREVE',
  'ABERTO', 
  'ABERTO_PARA_LANCES',
  'ENCERRADO',
  'FINALIZADO', 
  'CANCELADO',
  'SUSPENSO'
];

export const bemStatusValues: [Bem['status'], ...Bem['status'][]] = [
  'CADASTRO', 'DISPONIVEL', 'LOTEADO', 'VENDIDO', 'REMOVIDO', 'INATIVADO'
];

export const documentTemplateTypeValues: [DocumentTemplate['type'], ...DocumentTemplate['type'][]] = [
  'WINNING_BID_TERM', 'EVALUATION_REPORT', 'AUCTION_CERTIFICATE'
];

// Re-export enums from Prisma client for use in Zod schemas
export {
  AccountType,
  TipoLeilao,
  StatusLeilao,
  StatusLote,
  StatusBem,
  TipoOfertaVendaDireta,
  StatusOfertaVendaDireta,
  StatusPagamento,
  TipoParteProcesso,
  HabilitationStatus,
  StatusDocumentoUsuario,
  TipoTemplateDocumento
} from '@prisma/client';

```
- yarn.lock:
```text
# This file is intentionally left empty. It will be re-generated on the next `yarn install` call.

```