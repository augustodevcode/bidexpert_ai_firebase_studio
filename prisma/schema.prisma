// prisma/schema.prisma
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ==============================================================================
// Enums
// ==============================================================================

enum UserAccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDENTE_DOCUMENTOS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ACTIVE
  SOLD
  EXPIRED
  PENDING_APPROVAL
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

// ==============================================================================
// Models
// ==============================================================================

model User {
  id                  String                 @id @default(cuid())
  email               String                 @unique
  fullName            String?
  password            String
  roleId              String?
  habilitationStatus  UserHabilitationStatus @default(PENDENTE_DOCUMENTOS)
  accountType         UserAccountType        @default(PHYSICAL)
  badges              Json?
  optInMarketing      Boolean                @default(false)
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt

  // Personal Info (PF)
  cpf               String? @unique
  rgNumber          String?
  rgIssuer          String?
  rgIssueDate       DateTime?
  rgState           String?
  dateOfBirth       DateTime?
  gender            String?
  profession        String?
  nationality       String?
  maritalStatus     String?
  propertyRegime    String?
  spouseName        String?
  spouseCpf         String?

  // Company Info (PJ)
  razaoSocial       String?
  cnpj              String? @unique
  inscricaoEstadual String?
  website           String?

  // Contact & Address
  cellPhone    String?
  homePhone    String?
  zipCode      String?
  street       String?
  number       String?
  complement   String?
  neighborhood String?
  city         String?
  state        String?

  // Relationships
  role                Role?                  @relation(fields: [roleId], references: [id], onDelete: SetNull, map: "User_roleId_fkey")
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  notifications       Notification[]
  reviews             Review[]
  questions           LotQuestion[]          @relation("AskedByUser")
  answers             LotQuestion[]          @relation("AnsweredByUser")
  maxBids             UserLotMaxBid[]
  uploadedMedia       MediaItem[]
}


model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  permissions     Json // Store as JSON array of strings
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  users           User[]
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]
}

model MediaItem {
  id            String   @id @default(cuid())
  fileName      String
  storagePath   String?  @unique
  title         String?
  altText       String?
  caption       String?
  description   String?
  mimeType      String
  sizeBytes     Int
  uploadedAt    DateTime @default(now())
  uploadedBy    String?
  dataAiHint    String?

  // Relationships
  userUploader        User?      @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)
  auctionImage        Auction?   @relation("AuctionImage")
  lotImage            Lot?       @relation("LotImage")
  bemImage            Bem?       @relation("BemImage")
  sellerLogo          Seller?    @relation("LogoSeller")
  auctioneerLogo      Auctioneer? @relation("LogoAuctioneer")
  categoryLogo        LotCategory? @relation("LogoCategory")
  categoryCover       LotCategory? @relation("CoverCategory")
  categoryMegaMenu    LotCategory? @relation("MegaMenuCategory")
  subcategoryIcon     Subcategory? @relation("IconSubcategory")
  offerImage          DirectSaleOffer? @relation("OfferImage")
  blogPostImage       BlogPost? @relation("BlogPostImage")
}

model Auction {
  id                             String        @id @default(cuid())
  publicId                       String        @unique
  title                          String
  description                    String?       @db.Text
  status                         AuctionStatus @default(EM_PREPARACAO)
  auctionType                    String? // e.g., JUDICIAL, EXTRAJUDICIAL
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json?
  totalLots                      Int           @default(0)
  visits                         Int           @default(0)
  initialOffer                   Float?
  isFavorite                     Boolean       @default(false)
  currentBid                     Float?
  bidsCount                      Int           @default(0)
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  vehicleLocation                String?
  automaticBiddingEnabled        Boolean       @default(false)
  silentBiddingEnabled           Boolean       @default(false)
  allowMultipleBidsPerUser       Boolean       @default(true)
  allowInstallmentBids           Boolean       @default(false)
  softCloseEnabled               Boolean       @default(false)
  softCloseMinutes               Int?          @default(2)
  estimatedRevenue               Float?
  achievedRevenue                Float?        @default(0)
  totalHabilitatedUsers          Int?          @default(0)
  isFeaturedOnMarketplace        Boolean?      @default(false)
  marketplaceAnnouncementTitle   String?
  additionalTriggers             String[]
  decrementAmount                Float? // For Dutch auctions
  decrementIntervalSeconds       Int? // For Dutch auctions
  floorPrice                     Float? // For Dutch auctions
  autoRelistSettings             Json?
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt
  dataAiHint                     String?

  // Relationships
  categoryId      String?
  category        LotCategory?     @relation(fields: [categoryId], references: [id])
  auctioneerId    String?
  auctioneer      Auctioneer?      @relation(fields: [auctioneerId], references: [id])
  sellerId        String?
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  judicialProcessId String?
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  lots            Lot[]
  bids            Bid[]
  questions       LotQuestion[]
  imageMediaId    String?          @unique
  image           MediaItem?       @relation("AuctionImage", fields: [imageMediaId], references: [id])
}

model Lot {
  id                String      @id @default(cuid())
  publicId          String      @unique
  number            String?
  title             String
  description       String?     @db.Text
  price             Float       @default(0) // Current bid or starting price
  initialPrice      Float?
  secondInitialPrice Float?
  bidIncrementStep  Float?
  status            LotStatus   @default(EM_BREVE)
  views             Int?        @default(0)
  bidsCount         Int?        @default(0)
  isFeatured        Boolean?    @default(false)
  isExclusive       Boolean?    @default(false)
  discountPercentage Float?
  additionalTriggers String[]
  latitude          Float?
  longitude         Float?
  mapAddress        String?
  mapEmbedUrl       String?
  mapStaticImageUrl String?
  judicialProcessNumber String?
  courtDistrict     String?
  courtName         String?
  publicProcessUrl  String?
  propertyRegistrationNumber String?
  propertyLiens     String? @db.Text
  knownDebts        String? @db.Text
  additionalDocumentsInfo String? @db.Text
  reservePrice      Float?
  evaluationValue   Float?
  debtAmount        Float?
  itbiValue         Float?
  condition         String?
  endDate           DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate DateTime?
  winningBidTermUrl String?
  dataAiHint        String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relationships
  auctionId     String
  auction       Auction      @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  categoryId    String?
  category      LotCategory? @relation(fields: [categoryId], references: [id])
  subcategoryId String?
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  sellerId      String?
  seller        Seller?      @relation(fields: [sellerId], references: [id])
  stateId       String?
  state         StateInfo?   @relation(fields: [stateId], references: [id])
  cityId        String?
  city          CityInfo?    @relation(fields: [cityId], references: [id])
  imageMediaId  String?      @unique
  image         MediaItem?   @relation("LotImage", fields: [imageMediaId], references: [id])
  bemIds        String[]
  bens          Bem[]        @relation(fields: [bemIds], references: [id])
  mediaItemIds  String[]
  mediaItems    MediaItem[]  @relation("LotGallery", fields: [mediaItemIds], references: [id])
  bids          Bid[]
  wins          UserWin[]
  reviews       Review[]
  questions     LotQuestion[]
  maxBids       UserLotMaxBid[]
}

model Seller {
  id                         String    @id @default(cuid())
  publicId                   String    @unique
  name                       String    @unique
  slug                       String    @unique
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  logoUrl                    String?
  dataAiHintLogo             String?
  description                String?   @db.Text
  isJudicial                 Boolean   @default(false)
  memberSince                DateTime?
  rating                     Float?
  activeLotsCount            Int?      @default(0)
  totalSalesValue            Float?    @default(0)
  auctionsFacilitatedCount   Int?      @default(0)
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
  
  // Relationships
  userId              String?          @unique
  user                User?            @relation("UserSeller", fields: [userId], references: [id])
  logoMediaId         String?          @unique
  logo                MediaItem?       @relation("LogoSeller", fields: [logoMediaId], references: [id])
  auctions            Auction[]
  lots                Lot[]
  judicialBranchId    String?          @unique
  judicialBranch      JudicialBranch?  @relation(fields: [judicialBranchId], references: [id])
  bens                Bem[]
  judicialProcesses   JudicialProcess[]
  directSaleOffers    DirectSaleOffer[]
}

model Auctioneer {
  id                   String     @id @default(cuid())
  publicId             String     @unique
  name                 String     @unique
  slug                 String     @unique
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  dataAiHintLogo       String?
  description          String?    @db.Text
  memberSince          DateTime?
  rating               Float?
  auctionsConductedCount Int?     @default(0)
  totalValueSold       Float?     @default(0)
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  
  // Relationships
  userId               String?    @unique
  user                 User?      @relation("UserAuctioneer", fields: [userId], references: [id])
  logoMediaId          String?    @unique
  logo                 MediaItem? @relation("LogoAuctioneer", fields: [logoMediaId], references: [id])
  auctions             Auction[]
}

model StateInfo {
  id        String   @id @default(cuid())
  name      String   @unique
  uf        String   @unique @db.VarChar(2)
  slug      String   @unique
  cityCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  cities    CityInfo[]
  lots      Lot[]
  courts    Court[]
  districts JudicialDistrict[]
}

model CityInfo {
  id        String   @id @default(cuid())
  name      String
  slug      String
  stateId   String
  stateUf   String   @db.VarChar(2)
  ibgeCode  String?
  lotCount  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  state StateInfo @relation(fields: [stateId], references: [id])
  lots  Lot[]
}

model Court {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  stateUf   String   @db.VarChar(2)
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  state     StateInfo          @relation(fields: [stateUf], references: [uf])
  districts JudicialDistrict[]
  processes JudicialProcess[]
}

model JudicialDistrict {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  courtId   String
  stateId   String
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  court     Court              @relation(fields: [courtId], references: [id])
  state     StateInfo          @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]
}

model JudicialBranch {
  id          String   @id @default(cuid())
  name        String
  slug        String
  districtId  String
  contactName String?
  phone       String?
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  district  JudicialDistrict @relation(fields: [districtId], references: [id])
  processes JudicialProcess[]
  sellers   Seller[]
}

model JudicialProcess {
  id              String   @id @default(cuid())
  publicId        String   @unique
  processNumber   String   @unique
  isElectronic    Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  courtId         String
  court           Court            @relation(fields: [courtId], references: [id])
  districtId      String
  district        JudicialDistrict @relation(fields: [districtId], references: [id])
  branchId        String
  branch          JudicialBranch   @relation(fields: [branchId], references: [id])
  sellerId        String?
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  parties         ProcessParty[]
  bens            Bem[]
  auctions        Auction[]
}

model ProcessParty {
  id             String           @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType

  // Relationships
  process JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model Bem {
  id                String  @id @default(cuid())
  publicId          String  @unique
  title             String
  description       String? @db.Text
  status            BemStatus
  evaluationValue   Float?
  imageUrl          String?
  dataAiHint        String?
  locationCity      String?
  locationState     String?
  address           String?
  latitude          Float?
  longitude         Float?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  categoryId        String?
  category          LotCategory? @relation(fields: [categoryId], references: [id])
  subcategoryId     String?
  subcategory       Subcategory? @relation(fields: [subcategoryId], references: [id])
  judicialProcessId String?
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  sellerId          String?
  seller            Seller? @relation(fields: [sellerId], references: [id])
  imageMediaId      String?      @unique
  image             MediaItem?   @relation("BemImage", fields: [imageMediaId], references: [id])
  mediaItemIds      String[]
  lots              Lot[] @relation(fields: [lotIds], references: [id])
  lotIds            String[]
  
  // Vehicle specific
  plate String?
  make String?
  model String?
  version String?
  year Int?
  modelYear Int?
  mileage Int?
  color String?
  fuelType String?
  transmissionType String?
  bodyType String?
  vin String? @unique
  renavam String? @unique
  enginePower String?
  numberOfDoors Int?
  vehicleOptions String?
  detranStatus String?
  debts String?
  runningCondition String?
  bodyCondition String?
  tiresCondition String?
  hasKey Boolean?

  // Real estate specific
  propertyType String?
  propertyRegistrationNumber String?
  iptuNumber String?
  isOccupied Boolean?
  area Float?
  bedrooms Int?
  bathrooms Int?
  parkingSpaces Int?
  amenities Json?

  // Machinery specific
  serialNumber String?
  hoursUsed Int?
  engineType String?
  
  // Livestock specific
  breed String?
  age String?
  sex String? // "Macho" or "Fêmea"
  vaccinationStatus String?
  
  // Jewelry specific
  jewelryType String?
  material String?
  gemstone String?
  weight String?
}

// ... other models
model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())

  // Relationships
  lot     Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder  User @relation(fields: [bidderId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([bidderId])
}

model UserWin {
  id               String   @id @default(cuid())
  userId           String
  lotId            String
  auctionId        String
  winningBidAmount Float
  winDate          DateTime @default(now())
  paymentStatus    String   @default("PENDENTE") // PENDENTE, PROCESSANDO, PAGO, FALHOU, REEMBOLSADO
  invoiceUrl       String?

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model DocumentType {
  id             String    @id @default(cuid())
  name           String    @unique
  description    String?
  isRequired     Boolean   @default(false)
  appliesTo      String // Comma-separated: PHYSICAL,LEGAL,DIRECT_SALE_CONSIGNOR
  allowedFormats String // Comma-separated: pdf,jpg,png
  displayOrder   Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relationships
  userDocuments UserDocument[]
}

model UserDocument {
  id                String             @id @default(cuid())
  userId            String
  documentTypeId    String
  fileUrl           String
  fileName          String?
  status            UserDocumentStatus @default(NOT_SENT)
  uploadDate        DateTime?
  analysisDate      DateTime?
  analystId         String?
  rejectionReason   String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // Relationships
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType DocumentType @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)

  @@unique([userId, documentTypeId])
}

model LotCategory {
  id                   String        @id @default(cuid())
  name                 String        @unique
  slug                 String        @unique
  description          String?
  itemCount            Int?          @default(0)
  hasSubcategories     Boolean       @default(false)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  // Relationships
  logoMediaId          String?           @unique
  logo                 MediaItem?        @relation("LogoCategory", fields: [logoMediaId], references: [id])
  coverImageMediaId    String?           @unique
  coverImage           MediaItem?        @relation("CoverCategory", fields: [coverImageMediaId], references: [id])
  megaMenuImageMediaId String?           @unique
  megaMenuImage        MediaItem?        @relation("MegaMenuCategory", fields: [megaMenuImageMediaId], references: [id])
  auctions             Auction[]
  lots                 Lot[]
  bens                 Bem[]
  subcategories        Subcategory[]
  directSaleOffers     DirectSaleOffer[]
}

model Subcategory {
  id               String      @id @default(cuid())
  name             String
  slug             String
  description      String?
  itemCount        Int?        @default(0)
  displayOrder     Int?        @default(0)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  
  // Relationships
  parentCategoryId String
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots             Lot[]
  bens             Bem[]
  iconMediaId      String?     @unique
  icon             MediaItem?  @relation("IconSubcategory", fields: [iconMediaId], references: [id])
}

model DirectSaleOffer {
  id                     String                @id @default(cuid())
  publicId               String                @unique
  title                  String
  description            String                @db.Text
  offerType              DirectSaleOfferType
  price                  Float?
  minimumOfferPrice      Float?
  locationCity           String?
  locationState          String?
  status                 DirectSaleOfferStatus
  itemsIncluded          Json?
  tags                   Json?
  views                  Int                   @default(0)
  proposalsCount         Int                   @default(0)
  expiresAt              DateTime?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  dataAiHint             String?
  dataAiHintSellerLogo   String?

  // Relationships
  categoryId             String?
  category               LotCategory?          @relation(fields: [categoryId], references: [id])
  sellerId               String
  seller                 Seller                @relation(fields: [sellerId], references: [id])
  imageMediaId           String?               @unique
  image                  MediaItem?            @relation("OfferImage", fields: [imageMediaId], references: [id])
}

model PlatformSettings {
    id                  String @id @default("global")
    siteTitle           String?
    siteTagline         String?
    galleryImageBasePath String?
    storageProvider      String? @default("local") // "local" or "firebase"
    firebaseStorageBucket String?
    activeThemeName     String?
    themes              Json?
    platformPublicIdMasks Json?
    homepageSections    Json?
    mentalTriggerSettings Json?
    sectionBadgeVisibility Json?
    mapSettings         Json?
    searchPaginationType String? @default("loadMore")
    searchItemsPerPage   Int? @default(12)
    searchLoadMoreCount  Int? @default(12)
    defaultListItemsPerPage Int? @default(10)
    showCountdownOnLotDetail Boolean? @default(true)
    showCountdownOnCards Boolean? @default(true)
    showRelatedLotsOnLotDetail Boolean? @default(true)
    relatedLotsCount     Int? @default(5)
    variableIncrementTable Json?
    biddingSettings      Json?
    updatedAt           DateTime @updatedAt
}

model BlogPost {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  content         String   @db.Text
  authorId        String
  authorName      String
  publishedAt     DateTime?
  status          String // DRAFT, PUBLISHED
  featuredImage   String?  @unique
  tags            String // Comma-separated
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  image           MediaItem? @relation("BlogPostImage", fields: [featuredImage], references: [id], onDelete: SetNull)
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int      @default(0) // 1 to 5
  comment         String   @db.Text
  createdAt       DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                      String   @id @default(cuid())
  lotId                   String
  auctionId               String
  userId                  String
  userDisplayName         String
  questionText            String   @db.Text
  isPublic                Boolean  @default(true)
  answerText              String?  @db.Text
  answeredByUserId        String?
  answeredByUserDisplayName String?
  answeredAt              DateTime?
  createdAt               DateTime @default(now())

  // Relationships
  lot             Lot   @relation(fields: [lotId], references: [id], onDelete: Cascade)
  questionAuthor  User  @relation("AskedByUser", fields: [userId], references: [id], onDelete: Cascade)
  answerAuthor    User? @relation("AnsweredByUser", fields: [answeredByUserId], references: [id], onDelete: SetNull)
}
