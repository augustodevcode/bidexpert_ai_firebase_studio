// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. TABELAS COM POUCAS OU NENHUMA DEPENDÃŠNCIA (TABELAS BASE)
// =================================================================

model PlatformSettings {
  id                                String @id @default(uuid())
  siteTitle                         String @default("BidExpert") @db.VarChar(100)
  siteTagline                       String? @db.VarChar(200)
  logoUrl                           String? @db.VarChar(255)
  faviconUrl                        String? @db.VarChar(255)
  galleryImageBasePath              String  @default("/uploads/media/")
  storageProvider                   String  @default("local") @db.VarChar(50)
  firebaseStorageBucket             String? @db.VarChar(200)
  activeThemeName                   String? @db.VarChar(100)
  themes                            Json?
  platformPublicIdMasks             Json?
  homepageSections                  Json?
  mentalTriggerSettings             Json?
  sectionBadgeVisibility            Json?
  mapSettings                       Json?
  searchPaginationType              String  @default("loadMore") @db.VarChar(50)
  searchItemsPerPage                Int     @default(12)
  searchLoadMoreCount               Int     @default(12)
  showCountdownOnLotDetail          Boolean @default(true)
  showCountdownOnCards              Boolean @default(true)
  showRelatedLotsOnLotDetail        Boolean @default(true)
  relatedLotsCount                  Int     @default(5)
  defaultUrgencyTimerHours          Int?
  variableIncrementTable            Json?
  biddingSettings                   Json?
  defaultListItemsPerPage           Int?    @default(10)
  updatedAt                         DateTime @updatedAt
}

model Role {
  id              String         @id @default(uuid())
  name            String         @unique @db.VarChar(50)
  nameNormalized  String         @unique @db.VarChar(50)
  description     String?        @db.VarChar(255)
  permissions     Json           @db.Json
  users           UsersOnRoles[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model State {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(100)
  uf        String   @unique @db.VarChar(2)
  slug      String   @unique @db.VarChar(100)
  cities    City[]
  districts JudicialDistrict[]
  lots      Lot[]
}

model LotCategory {
  id                  String        @id @default(uuid())
  name                String        @unique @db.VarChar(100)
  slug                String        @unique @db.VarChar(100)
  description         String?       @db.VarChar(500)
  hasSubcategories    Boolean       @default(false)
  itemCount           Int           @default(0)
  iconName            String?       @db.VarChar(50)
  logoUrl             String?       @db.VarChar(255)
  logoMediaId         String?       @db.VarChar(100)
  dataAiHintIcon      String?       @db.VarChar(100)
  coverImageUrl       String?       @db.VarChar(255)
  coverImageMediaId   String?       @db.VarChar(100)
  dataAiHintCover     String?       @db.VarChar(100)
  megaMenuImageUrl    String?       @db.VarChar(255)
  megaMenuImageMediaId String?       @db.VarChar(100)
  dataAiHintMegaMenu  String?       @db.VarChar(100)
  subcategories       Subcategory[]
  auctions            Auction[]
  lots                Lot[]
  bens                Bem[]
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model Lot {
  id                         String           @id @default(uuid())
  publicId                   String           @unique @default(uuid())
  auctionId                  String
  slug                       String?          @db.VarChar(255)
  number                     String?          @db.VarChar(20)
  title                      String           @db.VarChar(255)
  description                String?          @db.Text
  price                      Float            @default(0)
  initialPrice               Float?
  secondInitialPrice         Float?
  bidIncrementStep           Float?
  status                     String           @default("EM_BREVE") @db.VarChar(50)
  bidsCount                  Int?             @default(0)
  views                      Int?             @default(0)
  isFeatured                 Boolean          @default(false)
  isExclusive                Boolean          @default(false)
  discountPercentage         Int?
  additionalTriggers         Json?            @db.Json
  imageUrl                   String?          @db.VarChar(255)
  imageMediaId               String?          @db.VarChar(100)
  galleryImageUrls           Json?            @db.Json
  mediaItemIds               Json?            @db.Json
  type                       String           @db.VarChar(100)
  categoryId                 String?
  subcategoryId              String?
  auctionName                String?          @db.VarChar(255)
  sellerId                   String?
  sellerName                 String?          @db.VarChar(150)
  auctioneerId               String?
  cityId                     String?
  stateId                    String?
  cityName                   String?          @db.VarChar(100)
  stateUf                    String?          @db.VarChar(2)
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?          @db.VarChar(255)
  mapEmbedUrl                String?          @db.VarChar(500)
  mapStaticImageUrl          String?          @db.VarChar(255)
  endDate                    DateTime?
  auctionDate                DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?          @db.VarChar(100)
  dataAiHint                 String?          @db.VarChar(100)
  winnerId                   String?
  winningBidTermUrl          String?          @db.VarChar(255)
  allowInstallmentBids       Boolean          @default(false)
  auction                    Auction          @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                   LotCategory?     @relation(fields: [categoryId], references: [id])
  subcategory                Subcategory?     @relation(fields: [subcategoryId], references: [id])
  seller                     Seller?          @relation(fields: [sellerId], references: [id])
  city                       City?            @relation(fields: [cityId], references: [id])
  state                      State?           @relation(fields: [stateId], references: [id])
  winner                     User?            @relation("WonLots", fields: [winnerId], references: [id], onDelete: SetNull)
  maxBids                    UserLotMaxBid[]
  bens                       LotBens[]
  bids                       Bid[]
  win                        UserWin[]
  createdAt                  DateTime         @default(now())
  updatedAt                  DateTime         @updatedAt
}

model User {
  id                   String           @id @default(uuid())
  email                String           @unique @db.VarChar(150)
  password             String?          @db.VarChar(255)
  fullName             String?          @db.VarChar(150)
  roleId               String? // Deprecated
  sellerId             String?          @unique
  habilitationStatus   String           @default("PENDING_DOCUMENTS") @db.VarChar(50)
  accountType          String           @default("PHYSICAL") @db.VarChar(50)
  avatarUrl            String?          @db.VarChar(255)
  dataAiHint           String?          @db.VarChar(100)
  badges               Json?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  roles                UsersOnRoles[]
  seller               Seller?
  auctioneer           Auctioneer?
  bids                 Bid[]
  wins                 Lot[]            @relation("WonLots")
  documents            UserDocument[]
  mediaItems           MediaItem[]
  maxBids              UserLotMaxBid[]
  habilitations        AuctionHabilitation[]
}

model UsersOnRoles {
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  role        Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId      String
  assignedAt  DateTime @default(now())
  assignedBy  String

  @@id([userId, roleId])
}

model Seller {
  id                 String              @id @default(uuid())
  publicId           String              @unique @default(uuid())
  slug               String              @unique @db.VarChar(150)
  name               String              @unique @db.VarChar(150)
  contactName        String?             @db.VarChar(150)
  email              String?             @db.VarChar(150)
  phone              String?             @db.VarChar(20)
  address            String?             @db.VarChar(200)
  city               String?             @db.VarChar(100)
  state              String?             @db.VarChar(50)
  zipCode            String?             @db.VarChar(10)
  website            String?             @db.VarChar(255)
  logoUrl            String?             @db.VarChar(255)
  logoMediaId        String?             @db.VarChar(100)
  dataAiHintLogo     String?             @db.VarChar(100)
  description        String?             @db.Text
  userId             String?             @unique
  user               User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
  isJudicial         Boolean             @default(false)
  judicialBranchId   String?
  judicialBranch     JudicialBranch?     @relation(fields: [judicialBranchId], references: [id])
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  auctions           Auction[]
  lots               Lot[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
  judicialProcesses  JudicialProcess[]
}

model Auctioneer {
  id                   String    @id @default(uuid())
  publicId             String    @unique @default(uuid())
  slug                 String    @unique @db.VarChar(150)
  name                 String    @db.VarChar(150)
  registrationNumber   String?   @db.VarChar(50)
  contactName          String?   @db.VarChar(150)
  email                String?   @db.VarChar(150)
  phone                String?   @db.VarChar(20)
  address              String?   @db.VarChar(200)
  city                 String?   @db.VarChar(100)
  state                String?   @db.VarChar(50)
  zipCode              String?   @db.VarChar(10)
  website              String?   @db.VarChar(255)
  logoUrl              String?   @db.VarChar(255)
  logoMediaId          String?   @db.VarChar(100)
  dataAiHintLogo       String?   @db.VarChar(100)
  description          String?   @db.Text
  userId               String?   @unique
  user                 User?     @relation(fields: [userId], references: [id])
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  auctions             Auction[]
}

model Bem {
  id              String      @id @default(uuid())
  publicId        String      @unique @default(uuid())
  title           String      @db.VarChar(200)
  description     String?     @db.Text
  status          String      @default("DISPONIVEL") @db.VarChar(50)
  categoryId      String
  subcategoryId   String?
  judicialProcessId String?
  sellerId        String?
  evaluationValue Float?
  imageUrl        String?     @db.VarChar(255)
  imageMediaId    String?     @db.VarChar(100)
  galleryImageUrls Json?
  mediaItemIds    Json?
  dataAiHint      String?     @db.VarChar(100)
  locationCity    String?     @db.VarChar(100)
  locationState   String?     @db.VarChar(100)
  address         String?     @db.VarChar(255)
  latitude        Float?
  longitude       Float?
  category        LotCategory @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory? @relation(fields: [subcategoryId], references: [id])
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller          Seller?     @relation(fields: [sellerId], references: [id])
  lots            LotBens[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model City {
  id      String @id @default(uuid())
  name    String @db.VarChar(150)
  slug    String? @db.VarChar(150)
  stateId String
  stateUf String? @db.VarChar(2)
  ibgeCode String? @unique @db.VarChar(10)
  lotCount Int? @default(0)
  state   State @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots    Lot[]
}

model Subcategory {
  id               String       @id @default(uuid())
  name             String       @db.VarChar(100)
  slug             String?      @unique @db.VarChar(100)
  parentCategoryId String
  description      String?      @db.VarChar(500)
  displayOrder     Int?         @default(0)
  iconUrl          String?      @db.VarChar(255)
  iconMediaId      String?      @db.VarChar(100)
  dataAiHintIcon   String?      @db.VarChar(100)
  parentCategory   LotCategory  @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots             Lot[]
  bens             Bem[]
}

model Court {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(150)
  slug      String?  @unique @db.VarChar(150)
  stateUf   String?  @db.VarChar(2)
  website   String?  @db.VarChar(255)
  districts JudicialDistrict[]
  processes JudicialProcess[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JudicialDistrict {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(150)
  slug      String   @unique @db.VarChar(150)
  courtId   String
  stateId   String
  zipCode   String?  @db.VarChar(10)
  court     Court    @relation(fields: [courtId], references: [id])
  state     State    @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JudicialBranch {
  id         String   @id @default(uuid())
  name       String   @db.VarChar(150)
  slug       String   @unique @db.VarChar(150)
  districtId String
  contactName String?  @db.VarChar(150)
  phone     String?  @db.VarChar(20)
  email     String?  @db.VarChar(150)
  district   JudicialDistrict @relation(fields: [districtId], references: [id])
  processes  JudicialProcess[]
  Seller     Seller[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model JudicialProcess {
  id             String   @id @default(uuid())
  publicId       String   @unique @default(uuid())
  processNumber  String   @unique @db.VarChar(100)
  isElectronic   Boolean  @default(true)
  courtId        String
  districtId     String
  branchId       String
  sellerId       String?
  court          Court    @relation(fields: [courtId], references: [id])
  district       JudicialDistrict @relation(fields: [districtId], references: [id])
  branch         JudicialBranch @relation(fields: [branchId], references: [id])
  seller         Seller?  @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties        JudicialParty[]
  bens           Bem[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model JudicialParty {
  id             String   @id @default(uuid())
  processId      String
  name           String   @db.VarChar(255)
  documentNumber String?  @db.VarChar(50)
  partyType      String   @db.VarChar(50)
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model LotBens {
  lotId String
  bemId String
  lot   Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bem   Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)

  @@id([lotId, bemId])
}

model MediaItem {
  id             String   @id @default(uuid())
  fileName       String   @unique @db.VarChar(255)
  storagePath    String   @db.VarChar(255)
  title          String?  @db.VarChar(255)
  altText        String?  @db.VarChar(255)
  caption        String?  @db.VarChar(500)
  description    String?  @db.Text
  mimeType       String   @db.VarChar(100)
  sizeBytes      Int?
  urlOriginal    String   @db.VarChar(255)
  urlThumbnail   String?  @db.VarChar(255)
  urlMedium      String?  @db.VarChar(255)
  urlLarge       String?  @db.VarChar(255)
  linkedLotIds   Json?
  dataAiHint     String?  @db.VarChar(100)
  uploadedBy     String?
  user           User?    @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)
  uploadedAt     DateTime @default(now())
}

model UserDocument {
  id              String       @id @default(uuid())
  userId          String
  documentTypeId  String
  status          String       @default("PENDING") @db.VarChar(50)
  fileUrl         String       @db.VarChar(255)
  fileName        String?      @db.VarChar(255)
  rejectionReason String?      @db.Text
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType @relation(fields: [documentTypeId], references: [id])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id          String   @id @default(uuid())
  name        String   @unique @db.VarChar(150)
  description String?  @db.VarChar(255)
  isRequired  Boolean  @default(true)
  appliesTo   String?  @db.VarChar(50) // e.g., PHYSICAL,LEGAL,ALL
  userDocs    UserDocument[]
}

model Bid {
  id          String   @id @default(uuid())
  lotId       String
  auctionId   String
  bidderId    String
  bidderDisplay String?  @db.VarChar(150)
  amount      Float
  timestamp   DateTime @default(now())
  lot         Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction     Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder      User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String      @id @default(uuid())
  lotId            String      @unique
  userId           String?
  winningBidAmount Float
  winDate          DateTime
  paymentStatus    String
  invoiceUrl       String?
  lot              Lot         @relation(fields: [lotId], references: [id])
  user             User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model DirectSaleOffer {
  id                   String   @id @default(uuid())
  publicId             String   @unique @default(uuid())
  title                String   @db.VarChar(255)
  description          String?  @db.Text
  offerType            String?  @db.VarChar(50)
  price                Float?
  minimumOfferPrice    Float?
  status               String   @default("ACTIVE") @db.VarChar(50)
  category             String?  @db.VarChar(100)
  sellerId             String?
  sellerName           String?  @db.VarChar(150)
  sellerLogoUrl        String?  @db.VarChar(255)
  dataAiHintSellerLogo String?  @db.VarChar(100)
  locationCity         String?  @db.VarChar(100)
  locationState        String?  @db.VarChar(100)
  imageUrl             String?  @db.VarChar(255)
  imageMediaId         String?  @db.VarChar(100)
  dataAiHint           String?  @db.VarChar(100)
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int?     @default(0)
  expiresAt            DateTime?
  seller               Seller?  @relation(fields: [sellerId], references: [id])
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model DocumentTemplate {
  id        String   @id @default(uuid())
  name      String   @unique @db.VarChar(150)
  type      String   @db.VarChar(50)
  content   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(150)
  email     String   @db.VarChar(150)
  subject   String?  @db.VarChar(255)
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model AuctionHabilitation {
  userId     String
  auctionId  String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction    Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@id([userId, auctionId])
}

model Auction {
  id                             String                @id @default(uuid())
  publicId                       String                @unique @default(uuid())
  slug                           String                @unique @db.VarChar(255)
  title                          String                @db.VarChar(255)
  description                    String?               @db.Text
  status                         String                @default("RASCUNHO") @db.VarChar(50)
  auctionDate                    DateTime?
  endDate                        DateTime?
  totalLots                      Int                   @default(0)
  auctioneerId                   String?
  sellerId                       String?
  categoryId                     String?
  auctionType                    String?               @db.VarChar(50)
  imageUrl                       String?               @db.VarChar(255)
  imageMediaId                   String?               @db.VarChar(100)
  dataAiHint                     String?               @db.VarChar(100)
  documentsUrl                   String?               @db.VarChar(255)
  visits                         Int                   @default(0)
  initialOffer                   Float?
  isFavorite                     Boolean               @default(false)
  isFeaturedOnMarketplace        Boolean               @default(false)
  marketplaceAnnouncementTitle   String?               @db.VarChar(150)
  evaluationReportUrl            String?               @db.VarChar(255)
  auctionCertificateUrl          String?               @db.VarChar(255)
  sellingBranch                  String?               @db.VarChar(100)
  automaticBiddingEnabled        Boolean               @default(false)
  silentBiddingEnabled           Boolean               @default(false)
  allowMultipleBidsPerUser       Boolean               @default(true)
  allowInstallmentBids           Boolean               @default(false)
  softCloseEnabled               Boolean               @default(false)
  softCloseMinutes               Int                   @default(2)
  estimatedRevenue               Float?
  achievedRevenue                Float?
  totalHabilitatedUsers          Int?                  @default(0)
  judicialProcessId              String?
  decrementAmount                Float?
  decrementIntervalSeconds       Int?
  floorPrice                     Float?
  auctioneer                     Auctioneer?           @relation(fields: [auctioneerId], references: [id])
  seller                         Seller?               @relation(fields: [sellerId], references: [id])
  category                       LotCategory?          @relation(fields: [categoryId], references: [id])
  lots                           Lot[]
  bids                           Bid[]
  habilitatedUsers               AuctionHabilitation[]
  createdAt                      DateTime              @default(now())
  updatedAt                      DateTime              @updatedAt
  auctionStages                  Json?                 @db.Json
  autoRelistSettings             Json?                 @db.Json
}
