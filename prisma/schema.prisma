// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. ENUMS
// =================================================================

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}


// =================================================================
// 2. MODELS
// =================================================================

model User {
  id                  String                 @id @default(cuid())
  email               String                 @unique
  password            String?
  fullName            String?
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType            @default(PHYSICAL)
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt

  // Personal Info (PF)
  cpf                 String?                @unique
  rgNumber            String?
  rgIssuer          String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?

  // Company Info (PJ)
  razaoSocial         String?
  cnpj                String?                @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?

  // Address
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  
  // Marketing
  optInMarketing      Boolean?               @default(false)

  // Relações
  seller              Seller?
  auctioneer          Auctioneer?
  roles               UsersOnRoles[]
  documents           UserDocument[]
  notifications       Notification[]
  bids                Bid[]
  wins                UserWin[]              @relation("LotWinner")
  mediaItems          MediaItem[]
  maxBids             UserLotMaxBid[]
  habilitations       AuctionHabilitation[]
}

model Role {
  id              String         @id @default(cuid())
  name            String         @unique
  nameNormalized  String         @unique
  description     String?
  permissions     String[]
  users           UsersOnRoles[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String // Ex: 'system-signup', 'admin-panel'

  @@id([userId, roleId])
}

model StateInfo {
  id        String   @id @default(cuid())
  name      String
  uf        String   @unique
  slug      String   @unique
  cityCount Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cities    CityInfo[]
  courts    Court[]
  auctions  Auction[]
  lots      Lot[]
}

model CityInfo {
  id        String   @id @default(cuid())
  name      String
  slug      String
  stateId   String
  stateUf   String?
  ibgeCode  String?  @unique
  lotCount  Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state     StateInfo @relation(fields: [stateId], references: [id], onDelete: Cascade)
  auctions  Auction[]
  lots      Lot[]
}

model LotCategory {
  id                   String            @id @default(cuid())
  name                 String            @unique
  slug                 String            @unique
  description          String?           @db.VarChar(500)
  hasSubcategories     Boolean           @default(false)
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  bens                 Bem[]
  lots                 Lot[]
  auctions             Auction[]
  directSaleOffers     DirectSaleOffer[]
}

model Subcategory {
  id                 String      @id @default(cuid())
  name               String
  slug               String?
  parentCategoryId   String
  description        String?     @db.VarChar(500)
  displayOrder       Int         @default(0)
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  bens               Bem[]
  lots               Lot[]
}

model Court {
  id                String              @id @default(cuid())
  name              String              @unique
  slug              String?             @unique
  stateUf           String?
  state             StateInfo?          @relation(fields: [stateUf], references: [uf])
  website           String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialDistrict {
  id                String             @id @default(cuid())
  name              String
  slug              String?            @unique
  courtId           String?
  stateId           String?
  zipCode           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  court             Court?             @relation(fields: [courtId], references: [id])
  state             StateInfo?         @relation(fields: [stateId], references: [id])
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
}

model JudicialBranch {
  id                String              @id @default(cuid())
  name              String
  slug              String?             @unique
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  district          JudicialDistrict?   @relation(fields: [districtId], references: [id])
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
}

model Seller {
  id                 String            @id @default(cuid())
  publicId           String?           @unique
  slug               String?           @unique
  name               String            @unique
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?           @db.Text
  userId             String?           @unique
  isJudicial         Boolean           @default(false)
  judicialBranchId   String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  judicialBranch     JudicialBranch?   @relation(fields: [judicialBranchId], references: [id])
  auctions           Auction[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
  lots               Lot[]
  user               User?             @relation(fields: [userId], references: [id])
}

model Auctioneer {
  id                   String    @id @default(cuid())
  publicId             String?   @unique
  slug                 String?   @unique
  name                 String
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?   @db.Text
  userId               String?   @unique
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  auctions             Auction[]
  lots                 Lot[]
  user                 User?     @relation(fields: [userId], references: [id])
}

model JudicialProcess {
  id              String           @id @default(cuid())
  publicId        String?          @unique
  processNumber   String           @unique
  isElectronic    Boolean          @default(true)
  courtId         String?
  districtId      String?
  branchId        String?
  sellerId        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  court           Court?           @relation(fields: [courtId], references: [id])
  district        JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch          JudicialBranch?  @relation(fields: [branchId], references: [id])
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  parties         JudicialParty[]
  bens            Bem[]
  auctions        Auction[]
}

model JudicialParty {
  id             String          @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      String
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model Auction {
  id                             String               @id @default(cuid())
  publicId                     String?              @unique
  slug                           String?              @unique
  title                          String
  description                    String?              @db.Text
  status                         AuctionStatus        @default(RASCUNHO)
  auctionDate                    DateTime?
  endDate                        DateTime?
  auctioneerId                   String?
  sellerId                       String?
  categoryId                     String?
  auctionType                    AuctionType?
  auctionMethod                  AuctionMethod?
  participation                  AuctionParticipation?
  onlineUrl                      String?
  address                        String?
  cityId                         String?
  stateId                        String?
  zipCode                        String?
  latitude                       Float?
  longitude                      Float?
  imageUrl                       String?
  imageMediaId                   String?
  documentsUrl                   String?
  visits                         Int?                 @default(0)
  isFeaturedOnMarketplace        Boolean              @default(false)
  marketplaceAnnouncementTitle String?
  isFavorite                     Boolean              @default(false)
  dataAiHint                     String?
  createdAt                      DateTime             @default(now())
  updatedAt                      DateTime             @updatedAt
  lots                           Lot[]
  auctionStages                AuctionStage[]
  habilitations                  AuctionHabilitation[]
  judicialProcessId              String?
  bids                           Bid[]
  // Relações
  auctioneer                     Auctioneer?          @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  seller                         Seller?              @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  category                       LotCategory?         @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  judicialProcess              JudicialProcess?     @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  city                           CityInfo?            @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state                          StateInfo?           @relation(fields: [stateId], references: [id], onDelete: SetNull)

  // Campos não persistidos (apenas para exemplo, não funcionam no Prisma)
  // totalLots Int
  // initialOffer Decimal

  // Campos para automação e regras de negócio
  evaluationReportUrl          String?
  auctionCertificateUrl        String?
  sellingBranch                String?
  automaticBiddingEnabled      Boolean              @default(false)
  allowInstallmentBids         Boolean              @default(true)
  silentBiddingEnabled         Boolean              @default(false)
  allowMultipleBidsPerUser     Boolean              @default(true)
  softCloseEnabled             Boolean              @default(false)
  softCloseMinutes             Int                  @default(2)
  estimatedRevenue             Decimal?             @db.Decimal(15, 2)
  achievedRevenue              Decimal?             @db.Decimal(15, 2)
  totalHabilitatedUsers        Int?                 @default(0)
  additionalTriggers           Json?
  decrementAmount              Decimal?             @db.Decimal(15, 2)
  decrementIntervalSeconds     Int?
  floorPrice                   Decimal?             @db.Decimal(15, 2)
  court                          Court?               @relation(fields: [courtId], references: [id])
  courtId                        String?
}

model AuctionStage {
  id              String   @id @default(cuid())
  auctionId       String
  name            String
  startDate       DateTime
  endDate         DateTime
  evaluationValue Decimal? @db.Decimal(15, 2)
  initialPrice    Decimal? @db.Decimal(15, 2)
  status          String? // Ex: 'OPEN', 'CLOSED'
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}

model AuctionHabilitation {
  userId    String
  auctionId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@id([userId, auctionId])
}

model Lot {
  id                         String        @id @default(cuid())
  publicId                   String?       @unique
  auctionId                  String
  slug                       String?
  number                     String?
  title                      String
  description                String?       @db.Text
  price                      Decimal       @db.Decimal(15, 2)
  initialPrice               Decimal?      @db.Decimal(15, 2)
  secondInitialPrice         Decimal?      @db.Decimal(15, 2)
  bidIncrementStep           Decimal?      @db.Decimal(10, 2)
  status                     LotStatus     @default(EM_BREVE)
  bidsCount                  Int?          @default(0)
  views                      Int?          @default(0)
  isFeatured                 Boolean?      @default(false)
  isExclusive                Boolean?      @default(false)
  isRelisted                 Boolean       @default(false)
  relistCount                Int           @default(0)
  discountPercentage         Int?
  additionalTriggers         Json?
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  type                       String?
  categoryId                 String?
  subcategoryId              String?
  auctionName                String?
  sellerId                   String?
  sellerName                 String?
  auctioneerId               String?
  cityId                     String?
  stateId                    String?
  cityName                   String?
  stateUf                    String?
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?       @db.VarChar(500)
  mapStaticImageUrl          String?
  endDate                    DateTime?
  auctionDate                DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  dataAiHint                 String?
  winnerId                   String?
  winningBidTermUrl          String?
  allowInstallmentBids       Boolean?      @default(false)
  inheritedMediaFromBemId    String?
  originalLotId              String?       @unique
  createdAt                  DateTime      @default(now())
  updatedAt                  DateTime      @updatedAt
  auction                    Auction       @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                   LotCategory?  @relation(fields: [categoryId], references: [id])
  subcategory                Subcategory?  @relation(fields: [subcategoryId], references: [id])
  seller                     Seller?       @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  auctioneer                 Auctioneer?   @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  city                       CityInfo?     @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state                      StateInfo?    @relation(fields: [stateId], references: [id], onDelete: SetNull)
  originalLot                Lot?          @relation("RelistedLot", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot                Lot?          @relation("RelistedLot")
  winner                     User?         @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  bids                       Bid[]
  bens                       LotBens[]
  wins                       UserWin[]
  maxBids                    UserLotMaxBid[]
}

model Bem {
  id            String   @id @default(cuid())
  publicId      String?  @unique
  title         String
  description   String?  @db.Text
  status        String   @default("DISPONIVEL") // DISPONIVEL, LOTEADO, VENDIDO, REMOVIDO
  categoryId    String?
  subcategoryId String?
  evaluationValue Decimal? @db.Decimal(15, 2)
  imageUrl      String?
  imageMediaId  String?
  dataAiHint    String?
  galleryImageUrls Json?
  mediaItemIds  Json?
  address       String?
  locationCity  String?
  locationState String?
  latitude      Float?
  longitude     Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relações
  category          LotCategory?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory       Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  sellerId          String?
  seller            Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  judicialProcessId String?
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)

  // Veículos
  plate                 String?
  make                  String?
  model                 String?
  version               String?
  year                  Int?
  modelYear             Int?
  mileage               Int?
  color                 String?
  fuelType              String?
  transmissionType      String?
  bodyType              String?
  vin                   String?      @unique
  renavam               String?      @unique
  enginePower           String?
  numberOfDoors         Int?
  vehicleOptions        String?      @db.Text
  detranStatus          String?
  debts                 String?      @db.Text
  runningCondition      String?
  bodyCondition         String?
  tiresCondition        String?
  hasKey                Boolean?

  // Imóveis
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?      @db.Text
  infrastructure             String?      @db.Text
  condoDetails               String?      @db.Text
  improvements               String?      @db.Text
  topography                 String?
  liensAndEncumbrances       String?      @db.Text
  propertyDebts              String?      @db.Text
  unregisteredRecords        String?      @db.Text
  hasHabiteSe                Boolean?
  zoningRestrictions         String?

  // Eletrônicos
  brand                 String?
  serialNumber          String?
  itemCondition         String?
  specifications        String?      @db.Text
  includedAccessories   String?      @db.Text
  batteryCondition      String?
  hasInvoice            Boolean?
  hasWarranty           Boolean?
  repairHistory         String?      @db.Text

  // Eletrodomésticos
  applianceCapacity   String?
  voltage             String?
  applianceType       String?
  additionalFunctions String?      @db.Text

  // Máquinas e Equipamentos
  hoursUsed          Int?
  engineType         String?
  capacityOrPower    String?
  maintenanceHistory String?      @db.Text
  installationLocation String?
  compliesWithNR     String?
  operatingLicenses  String?

  // Semoventes (Gado)
  breed                 String?
  age                   String?
  sex                   String? // Macho, Fêmea
  weight                String?
  individualId          String? // RGN, Brinco
  purpose               String? // Corte, Leite, Reprodução
  sanitaryCondition     String?
  vaccinationStatus     String?
  lineage               String? // Pai, Mãe
  isPregnant            Boolean?
  specialSkills         String?
  gtaDocument           String?
  breedRegistryDocument String?

  // Outros
  furnitureType         String?
  material              String?
  style                 String?
  dimensions            String?
  pieceCount            Int?
  jewelryType           String?
  metal                 String?
  gemstones             String?
  totalWeight           String?
  jewelrySize           String?
  authenticityCertificate String?
  workType              String? // Pintura, Escultura
  artist                String?
  period                String? // Século, Ano
  technique             String?
  provenance            String?
  boatType              String?
  boatLength            String?
  hullMaterial          String?
  onboardEquipment      String? @db.Text
  productName           String?
  quantity              String?
  packagingType         String?
  expirationDate        DateTime?
  storageConditions     String?
  preciousMetalType     String?
  purity                String?
  forestGoodsType       String?
  volumeOrQuantity      String?
  species               String?
  dofNumber             String?

  lots LotBens[]
}

model LotBens {
  lotId   String
  bemId   String
  lot     Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bem     Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)

  @@id([lotId, bemId])
}

model MediaItem {
  id                   String           @id @default(cuid())
  fileName             String
  storagePath          String
  title                String?
  altText              String?
  caption              String?
  description          String?          @db.Text
  mimeType             String
  sizeBytes            Int?
  urlOriginal          String
  urlThumbnail         String?
  urlMedium            String?
  urlLarge             String?
  linkedLotIds         Json?
  dataAiHint           String?
  uploadedByUserId     String?
  uploadedBy           User?            @relation(fields: [uploadedByUserId], references: [id], onDelete: SetNull)
  uploadedAt           DateTime         @default(now())
  judicialProcessId    String?
}

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
  isMaxBid      Boolean  @default(false)
  isAiAssisted  Boolean  @default(false)
  isRetracted   Boolean  @default(false)
  retractionReason String?
  
  lot     Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder  User   @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model UserWin {
  id                 String               @id @default(cuid())
  lotId              String               @unique
  userId             String
  winningBidAmount   Decimal              @db.Decimal(15, 2)
  winDate            DateTime             @default(now())
  paymentStatus      PaymentStatus        @default(PENDENTE)
  invoiceUrl         String?
  installments       InstallmentPayment[]
  
  lot    Lot  @relation(fields: [lotId], references: [id])
  user   User @relation(fields: [userId], references: [id])
}

// Model para armazenar os detalhes de pagamento de cada parcela.
model InstallmentPayment {
  id                  String   @id @default(cuid())
  userWinId           String
  installmentNumber   Int
  amount              Decimal  @db.Decimal(15, 2)
  dueDate             DateTime
  status              PaymentStatus @default(PENDENTE)
  paymentDate         DateTime?
  paymentMethod       String?
  transactionId       String?
  
  userWin UserWin @relation(fields: [userWinId], references: [id], onDelete: Cascade)
}

model DirectSaleOffer {
  id                   String    @id @default(cuid())
  publicId             String?   @unique
  title                String
  description          String?   @db.Text
  offerType            String // BUY_NOW, ACCEPTS_PROPOSALS
  price                Decimal?  @db.Decimal(15, 2)
  minimumOfferPrice    Decimal?  @db.Decimal(15, 2)
  status               String    @default("ACTIVE") // ACTIVE, PENDING_APPROVAL, SOLD, EXPIRED
  category             String
  categoryId           String
  sellerId             String
  sellerName           String
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int?      @default(0)
  expiresAt            DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relações
  category             LotCategory @relation(fields: [categoryId], references: [id])
  seller               Seller      @relation(fields: [sellerId], references: [id])
}

model DocumentType {
  id          String         @id @default(cuid())
  name        String
  description String?
  isRequired  Boolean        @default(true)
  appliesTo   String?        // ex: "PHYSICAL,LEGAL,ALL"
  documents   UserDocument[]
}

model UserDocument {
  id                String             @id @default(cuid())
  userId            String
  documentTypeId    String
  status            UserDocumentStatus @default(PENDING_ANALYSIS)
  fileUrl           String
  fileName          String?
  rejectionReason   String?            @db.Text
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType  DocumentType @relation(fields: [documentTypeId], references: [id])
  
  @@unique([userId, documentTypeId])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  message     String
  link        String?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model PlatformSettings {
  id                           String    @id @default("global")
  siteTitle                    String?
  siteTagline                  String?
  logoUrl                      String?
  faviconUrl                   String?
  galleryImageBasePath         String?
  storageProvider              String?   @default("local")
  firebaseStorageBucket        String?
  activeThemeName              String?
  themes                       Json?
  platformPublicIdMasks        Json?
  homepageSections             Json?
  mentalTriggerSettings        Json?
  sectionBadgeVisibility       Json?
  mapSettings                  Json?
  searchPaginationType         String?   @default("loadMore")
  searchItemsPerPage           Int?      @default(12)
  searchLoadMoreCount          Int?      @default(12)
  showCountdownOnLotDetail     Boolean?  @default(true)
  showCountdownOnCards         Boolean?  @default(true)
  showRelatedLotsOnLotDetail   Boolean?  @default(true)
  relatedLotsCount             Int?      @default(5)
  defaultUrgencyTimerHours     Int?
  variableIncrementTable       Json?
  biddingSettings              Json?
  paymentGatewaySettings       Json?
  defaultListItemsPerPage      Int?      @default(10)
  updatedAt                    DateTime? @updatedAt
}

model VehicleMake {
  id     String         @id @default(cuid())
  name   String         @unique
  slug   String         @unique
  models VehicleModel[]
}

model VehicleModel {
  id     String      @id @default(cuid())
  name   String
  slug   String
  makeId String
  make   VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)

  @@unique([name, makeId])
}
