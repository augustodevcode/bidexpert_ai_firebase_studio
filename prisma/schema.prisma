// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // The following line is needed to instruct Prisma to generate a client that's compatible with the Studio environment.
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ==============================================================================
// 1. User and Access Control Models
// ==============================================================================

model User {
  id                  String   @id @default(uuid())
  email               String   @unique
  fullName            String?
  password            String
  avatarUrl           String?
  roleId              String?
  sellerId            String?    @unique
  auctioneerId        String?    @unique
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         UserAccountType? @default(PHYSICAL)
  badges              Json? // Using Json to store an array of strings
  optInMarketing      Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // -- Personal Info (PF)
  cpf              String? @unique
  rgNumber         String?
  rgIssuer         String?
  rgIssueDate      DateTime?
  rgState          String?
  dateOfBirth      DateTime?
  gender           String?
  profession       String?
  nationality      String?
  maritalStatus    String?
  propertyRegime   String?
  spouseName       String?
  spouseCpf        String?

  // -- Company Info (PJ)
  razaoSocial       String?
  cnpj              String? @unique
  inscricaoEstadual String?
  website           String?

  // -- Contact & Address
  cellPhone    String?
  homePhone    String?
  zipCode      String?
  street       String?
  number       String?
  complement   String?
  neighborhood String?
  city         String?
  state        String?
  
  // -- Relationships
  role                Role?                  @relation(fields: [roleId], references: [id], onDelete: SetNull, map: "User_roleId_fkey")
  sellerProfile       Seller?                @relation("UserToSeller", fields: [sellerId], references: [id], onDelete: SetNull)
  auctioneerProfile   Auctioneer?            @relation("UserToAuctioneer", fields: [auctioneerId], references: [id], onDelete: SetNull)
  documents           UserDocument[]
  notifications       Notification[]
  bids                Bid[]
  wins                UserWin[]
  reviews             Review[]
  questions           LotQuestion[]          @relation("UserQuestions")
  answeredQuestions   LotQuestion[]          @relation("AnsweredBy")
  mediaItems          MediaItem[]
}

model Role {
  id              String       @id @default(uuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  permissions     Json // Prisma maps String[] to JSON for MySQL
  users           User[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserDocument {
  id                String             @id @default(uuid())
  userId            String
  documentTypeId    String
  fileUrl           String?
  fileName          String?
  status            UserDocumentStatus @default(NOT_SENT)
  uploadDate        DateTime?
  analysisDate      DateTime?
  analystId         String?
  rejectionReason   String?

  // Relationships
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType   DocumentType  @relation(fields: [documentTypeId], references: [id])
  
  @@unique([userId, documentTypeId])
}

model DocumentType {
  id              String          @id @default(uuid())
  name            String          @unique
  description     String?
  isRequired      Boolean         @default(true)
  appliesTo       UserAccountType[]
  allowedFormats  Json?           // e.g., ["pdf", "jpg", "png"]
  displayOrder    Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  userDocuments   UserDocument[]
}

// ==============================================================================
// 2. Media Model
// ==============================================================================

model MediaItem {
  id                   String            @id @default(uuid())
  fileName             String
  storagePath          String?           @unique
  title                String?
  altText              String?
  caption              String?
  description          String?
  mimeType             String
  sizeBytes            Int
  dimensions           Json?             // { width: number, height: number }
  urlOriginal          String            @db.Text
  urlThumbnail         String?           @db.Text
  urlMedium            String?           @db.Text
  urlLarge             String?           @db.Text
  dataAiHint           String?
  uploadedBy           String?
  uploadedAt           DateTime          @default(now())

  // Relationships
  userUploader           User?             @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)
  auctionAsImage         Auction?          @relation("AuctionImage")
  lotAsImage             Lot?              @relation("LotImage")
  bemAsImage             Bem?              @relation("BemImage")
  sellerAsLogo           Seller?           @relation("SellerLogo")
  auctioneerAsLogo       Auctioneer?       @relation("AuctioneerLogo")
  blogPostAsFeatured     BlogPost?         @relation("BlogPostImage")
  directSaleAsImage      DirectSaleOffer?  @relation("DirectSaleOfferImage")
  categoryAsLogo         LotCategory?      @relation("CategoryLogo")
  categoryAsCover        LotCategory?      @relation("CategoryCover")
  categoryAsMegaMenu     LotCategory?      @relation("CategoryMegaMenu")
  subcategoryAsIcon      Subcategory?      @relation("SubcategoryIcon")
}


// ==============================================================================
// 3. Auction Core Models
// ==============================================================================

model Auction {
  id                  String        @id @default(uuid())
  publicId            String        @unique
  title               String        @db.VarChar(255)
  fullTitle           String?       @db.VarChar(500)
  description         String?       @db.Text
  status              AuctionStatus @default(RASCUNHO)
  auctionType         AuctionType?
  auctionDate         DateTime
  endDate             DateTime?
  auctionStages       Json          // Array of AuctionStage objects
  city                String?
  state               String?
  imageUrl            String?       @db.Text
  dataAiHint          String?
  documentsUrl        String?       @db.Text
  visits              Int?          @default(0)
  initialOffer        Float?
  isFavorite          Boolean?      @default(false)
  currentBid          Float?
  bidsCount           Int?          @default(0)
  sellingBranch       String?
  vehicleLocation     String?
  evaluationReportUrl String?       @db.Text
  auctionCertificateUrl String?     @db.Text

  // Marketplace & Bidding flags
  isFeaturedOnMarketplace      Boolean? @default(false)
  marketplaceAnnouncementTitle String?
  automaticBiddingEnabled      Boolean? @default(false)
  allowInstallmentBids         Boolean? @default(false)
  softCloseEnabled             Boolean? @default(false)
  softCloseMinutes             Int?
  silentBiddingEnabled         Boolean? @default(false)
  allowMultipleBidsPerUser     Boolean? @default(true)
  
  // Computed / Aggregated (optional, might be calculated on the fly)
  totalLots           Int?     @default(0)
  totalHabilitatedUsers Int?
  estimatedRevenue    Float?
  achievedRevenue     Float?
  
  // Dutch Auction specific fields
  decrementAmount          Float? 
  decrementIntervalSeconds Int?   
  floorPrice               Float? 
  
  autoRelistSettings Json?

  additionalTriggers  String? // Stored as comma-separated string
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  categoryId         String
  auctioneerId       String
  sellerId           String?
  judicialProcessId  String?
  imageMediaId       String?           @unique
  
  category           LotCategory       @relation(fields: [categoryId], references: [id])
  auctioneer         Auctioneer        @relation(fields: [auctioneerId], references: [id])
  seller             Seller?           @relation(fields: [sellerId], references: [id])
  judicialProcess    JudicialProcess?  @relation(fields: [judicialProcessId], references: [id])
  image              MediaItem?        @relation("AuctionImage", fields: [imageMediaId], references: [id])
  
  lots          Lot[]
  bids          Bid[]
  questions     LotQuestion[]
}


model Lot {
  id                   String    @id @default(uuid())
  publicId             String    @unique
  auctionId            String
  number               String?
  title                String    @db.VarChar(255)
  description          String?   @db.Text
  price                Float
  initialPrice         Float?
  secondInitialPrice   Float?
  bidIncrementStep     Float?
  status               LotStatus @default(EM_BREVE)
  
  // Location
  cityId    String?
  stateId   String?
  latitude  Float?
  longitude Float?
  mapAddress String?
  mapEmbedUrl String? @db.Text
  mapStaticImageUrl String? @db.Text

  // Category
  categoryId      String
  subcategoryId   String?
  
  // Metrics
  views            Int?      @default(0)
  bidsCount        Int?      @default(0)
  
  // Flags
  isFeatured      Boolean?  @default(false)
  isExclusive     Boolean?  @default(false)
  isFavorite      Boolean?  @default(false)
  
  // Special Fields
  discountPercentage  Float?
  additionalTriggers  String?
  condition           String?
  dataAiHint          String?
  
  // Legal & Document info
  winningBidTermUrl          String? @db.Text
  judicialProcessNumber      String?
  courtDistrict              String?
  courtName                  String?
  publicProcessUrl           String?
  propertyRegistrationNumber String?
  propertyLiens              String? @db.Text
  knownDebts                 String? @db.Text
  additionalDocumentsInfo    String? @db.Text

  // Financials
  reservePrice      Float?
  evaluationValue   Float?
  debtAmount        Float?
  itbiValue         Float?
  
  // Dates
  endDate                DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate      DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  imageMediaId    String?           @unique
  
  auction       Auction          @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category      LotCategory      @relation(fields: [categoryId], references: [id])
  subcategory   Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  city          CityInfo?        @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state         StateInfo?       @relation(fields: [stateId], references: [id], onDelete: SetNull)
  image         MediaItem?       @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)

  bids          Bid[]
  wins          UserWin[]
  reviews       Review[]
  questions     LotQuestion[]
  lotsOnBem     LotOnBem[]
}


model LotOnBem {
  lot   Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId String
  bem   Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId String

  @@id([lotId, bemId])
}


// ==============================================================================
// 4. Bidding & Post-Auction Models
// ==============================================================================

model Bid {
  id            String   @id @default(uuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())
  
  // Relationships
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder    User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String        @id @default(uuid())
  userId           String
  lotId            String        @unique
  auctionId        String
  winningBidAmount Float
  winDate          DateTime
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model UserLotMaxBid {
  id        String  @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean @default(true)
  
  @@unique([userId, lotId])
}

// ==============================================================================
// 5. Entity Profile Models
// ==============================================================================

model Auctioneer {
  id                     String    @id @default(uuid())
  publicId               String    @unique
  name                   String    @unique
  slug                   String    @unique
  registrationNumber     String?
  contactName            String?
  email                  String?
  phone                  String?
  address                String?
  city                   String?
  state                  String?
  zipCode                String?
  website                String?
  description            String?   @db.Text
  memberSince            DateTime?
  rating                 Float?
  auctionsConductedCount Int?      @default(0)
  totalValueSold         Float?    @default(0)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  
  // Relationships
  userId               String?    @unique
  user                 User?      @relation("UserToAuctioneer")
  logoMediaId          String?    @unique
  logo                 MediaItem? @relation("AuctioneerLogo", fields: [logoMediaId], references: [id])
  
  auctions Auction[]
}

model Seller {
  id                 String    @id @default(uuid())
  publicId           String    @unique
  name               String    @unique
  slug               String    @unique
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  description        String?   @db.Text
  memberSince        DateTime?
  rating             Float?
  activeLotsCount    Int?      @default(0)
  totalSalesValue    Float?    @default(0)
  auctionsFacilitatedCount Int? @default(0)
  isJudicial         Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  // Relationships
  userId           String?          @unique
  user             User?            @relation("UserToSeller")
  logoMediaId      String?          @unique
  logo             MediaItem?       @relation("SellerLogo", fields: [logoMediaId], references: [id])
  judicialBranchId String?          @unique
  judicialBranch   JudicialBranch?  @relation(fields: [judicialBranchId], references: [id])
  
  auctions           Auction[]
  judicialProcesses  JudicialProcess[]
  directSaleOffers   DirectSaleOffer[]
  bens               Bem[]
}


// ==============================================================================
// 6. Judicial Entity Models
// ==============================================================================

model Court {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String   @unique
  stateUf   String
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  districts      JudicialDistrict[]
  processes      JudicialProcess[]
}

model JudicialDistrict {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  courtId   String
  stateId   String
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  court     Court      @relation(fields: [courtId], references: [id])
  state     StateInfo  @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]
}

model JudicialBranch {
  id           String   @id @default(uuid())
  name         String
  slug         String   @unique
  districtId   String
  contactName  String?
  phone        String?
  email        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relationships
  district   JudicialDistrict  @relation(fields: [districtId], references: [id])
  processes  JudicialProcess[]
  seller     Seller?
}

model JudicialProcess {
  id              String   @id @default(uuid())
  publicId        String   @unique
  processNumber   String   @unique
  isElectronic    Boolean  @default(true)
  courtId         String
  districtId      String
  branchId        String
  sellerId        String?  @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  court          Court            @relation(fields: [courtId], references: [id])
  district       JudicialDistrict @relation(fields: [districtId], references: [id])
  branch         JudicialBranch   @relation(fields: [branchId], references: [id])
  seller         Seller?          @relation(fields: [sellerId], references: [id])
  
  parties        ProcessParty[]
  bens           Bem[]
}

model ProcessParty {
  id             String         @id @default(uuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  
  // Relationships
  process JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  
  @@unique([processId, name, partyType])
}

model Bem {
  id            String  @id @default(uuid())
  publicId      String  @unique
  title         String
  description   String? @db.Text
  status        BemStatus @default(DISPONIVEL)
  
  // Category & Origin
  categoryId        String
  subcategoryId     String?
  judicialProcessId String?
  sellerId          String?
  
  // Valuation
  evaluationValue Float?
  
  // Media
  imageUrl      String?     @db.Text
  imageMediaId  String?     @unique
  dataAiHint    String?
  
  // Location
  locationCity  String?
  locationState String?
  address       String?
  latitude      Float?
  longitude     Float?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  category        LotCategory?      @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory?      @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess JudicialProcess?  @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller          Seller?           @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  image           MediaItem?        @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  
  lotsOnBem       LotOnBem[]
  
  // Vehicle Details
  plate                   String?
  make                    String?
  model                   String?
  version                 String?
  year                    Int?
  modelYear               Int?
  mileage                 Int?
  color                   String?
  fuelType                String?
  transmissionType        String?
  bodyType                String?
  vin                     String?
  renavam                 String?
  enginePower             String?
  numberOfDoors           Int?
  vehicleOptions          String?
  detranStatus            String?
  debts                   String?
  runningCondition        String?
  bodyCondition           String?
  tiresCondition          String?
  hasKey                  Boolean?

  // Real Estate Details
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?
  infrastructure             String?
  condoDetails               String?
  improvements               String?
  topography                 String?
  liensAndEncumbrances       String?
  propertyDebts              String?
  unregisteredRecords        String?
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  
  // JSON field for amenities
  amenities                  Json? 

  // Electronics
  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String?
  includedAccessories        String?
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String?
  
  // Appliances
  applianceCapacity          String?
  voltage                    String?
  applianceType              String?
  additionalFunctions        String?
  
  // Machinery
  hoursUsed          Int?
  engineType         String?
  capacityOrPower    String?
  maintenanceHistory String?
  installationLocation String?
  compliesWithNR     String?
  operatingLicenses  String?
  
  // Livestock
  breed              String?
  age                String?
  sex                String?
  weight             String?
  individualId       String?
  purpose            String?
  sanitaryCondition  String?
  lineage            String?
  isPregnant         Boolean?
  specialSkills      String?
  gtaDocument        String?
  breedRegistryDocument String?

  // Furniture
  furnitureType      String?
  material           String?
  style              String?
  dimensions         String?
  pieceCount         Int?
  
  // Jewelry
  jewelryType              String?
  metal                    String?
  gemstones                String?
  totalWeight              String?
  jewelrySize              String?
  authenticityCertificate  String?
  
  // Art & Antiques
  workType       String?
  artist         String?
  period         String?
  technique      String?
  provenance     String?
  
  // Boats
  boatType          String?
  boatLength        String?
  hullMaterial      String?
  onboardEquipment  String?
  
  // Food
  productName         String?
  quantity            String?
  packagingType       String?
  expirationDate      DateTime?
  storageConditions   String?
  
  // Precious Metals & Stones
  preciousMetalType   String?
  purity              String?
  
  // Forestry Goods
  forestGoodsType    String?
  volumeOrQuantity   String?
  species            String?
  dofNumber          String?
}


// ==============================================================================
// 7. General Purpose / Platform Models
// ==============================================================================

model LotCategory {
  id                 String   @id @default(uuid())
  name               String   @unique
  slug               String   @unique
  description        String?
  itemCount          Int      @default(0)
  hasSubcategories   Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  // Relationships
  logoMediaId        String?    @unique
  logo               MediaItem? @relation("CategoryLogo", fields: [logoMediaId], references: [id])
  coverImageMediaId  String?    @unique
  coverImage         MediaItem? @relation("CategoryCover", fields: [coverImageMediaId], references: [id])
  megaMenuImageMediaId String?  @unique
  megaMenuImage      MediaItem? @relation("CategoryMegaMenu", fields: [megaMenuImageMediaId], references: [id])

  lots             Lot[]
  subcategories    Subcategory[]
  bens             Bem[]
  directSaleOffers DirectSaleOffer[]
}

model Subcategory {
  id              String    @id @default(uuid())
  name            String
  slug            String
  description     String?
  displayOrder    Int       @default(0)
  parentCategoryId String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relationships
  iconMediaId     String?    @unique
  icon            MediaItem? @relation("SubcategoryIcon", fields: [iconMediaId], references: [id])
  
  parentCategory  LotCategory @relation(fields: [parentCategoryId], references: [id])
  lots            Lot[]
  bens            Bem[]
  
  @@unique([parentCategoryId, slug])
}


model StateInfo {
  id        String   @id @default(uuid())
  name      String   @unique
  uf        String   @unique @db.Char(2)
  slug      String   @unique
  cityCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  cities CityInfo[]
  lots   Lot[]
}

model CityInfo {
  id        String   @id @default(uuid())
  name      String
  slug      String
  stateId   String
  stateUf   String
  ibgeCode  String?
  lotCount  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  state     StateInfo @relation(fields: [stateId], references: [id])
  lots      Lot[]
}

model PlatformSettings {
  id                        String      @id @default("global")
  siteTitle                 String?
  siteTagline               String?
  galleryImageBasePath      String?
  storageProvider           StorageProviderType? @default(local)
  firebaseStorageBucket     String?
  activeThemeName           String?
  themes                    Json? // Array of Theme objects
  platformPublicIdMasks     Json? // Object with masks for entities
  homepageSections          Json? // Array of HomepageSectionConfig
  mentalTriggerSettings     Json? // MentalTriggerSettings object
  sectionBadgeVisibility    Json? // SectionBadgeConfig object
  mapSettings               Json? // MapSettings object
  biddingSettings           Json? // BiddingSettings object
  searchPaginationType      SearchPaginationType? @default(loadMore)
  searchItemsPerPage        Int?
  searchLoadMoreCount       Int?
  showCountdownOnLotDetail  Boolean?
  showCountdownOnCards      Boolean?
  showRelatedLotsOnLotDetail Boolean?
  relatedLotsCount          Int?
  defaultListItemsPerPage   Int?
  variableIncrementTable    Json? // Array of VariableIncrementRule
  updatedAt                 DateTime @updatedAt
}


model BlogPost {
  id                String    @id @default(uuid())
  title             String
  slug              String    @unique
  content           String    @db.Text
  excerpt           String?
  status            String    // e.g., 'DRAFT', 'PUBLISHED', 'ARCHIVED'
  publishedAt       DateTime?
  authorId          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relationships
  featuredImageId String?    @unique
  image           MediaItem? @relation("BlogPostImage", fields: [featuredImageId], references: [id], onDelete: SetNull)
}

model DocumentTemplate {
  id        String                @id @default(uuid())
  name      String                @unique
  type      DocumentTemplateType
  content   String                @db.Text
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ContactMessage {
    id        String @id @default(uuid())
    name      String
    email     String
    subject   String
    message   String @db.Text
    isRead    Boolean @default(false)
    createdAt DateTime @default(now())
}

model Review {
    id              String @id @default(uuid())
    lotId           String
    auctionId       String
    userId          String
    userDisplayName String
    rating          Int // 1-5
    comment         String @db.Text
    createdAt       DateTime @default(now())
    
    // Relationships
    lot   Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
    user  User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LotQuestion {
    id                      String @id @default(uuid())
    lotId                   String
    auctionId               String
    userId                  String
    userDisplayName         String
    questionText            String @db.Text
    isPublic                Boolean @default(true)
    createdAt               DateTime @default(now())

    answerText              String? @db.Text
    answeredAt              DateTime?
    answeredByUserId        String?
    answeredByUserDisplayName String?
    
    // Relationships
    lot     Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
    auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
    user    User @relation("UserQuestions", fields: [userId], references: [id], onDelete: Cascade)
    answeredBy User? @relation("AnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)
}


model DirectSaleOffer {
  id                   String                @id @default(uuid())
  publicId             String                @unique
  title                String
  description          String                @db.Text
  offerType            DirectSaleOfferType
  status               DirectSaleOfferStatus
  price                Float?
  minimumOfferPrice    Float?
  locationCity         String?
  locationState        String?
  dataAiHint           String?
  dataAiHintSellerLogo String?
  tags                 String? // Stored as comma-separated string
  views                Int                   @default(0)
  proposalsCount       Int                   @default(0)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  expiresAt            DateTime?

  // Relationships
  categoryId           String
  category             LotCategory           @relation(fields: [categoryId], references: [id])
  sellerId             String
  seller               Seller                @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  imageMediaId         String?               @unique
  image                MediaItem?            @relation("DirectSaleOfferImage", fields: [imageMediaId], references: [id])
}



// ==============================================================================
// 8. Enums
// ==============================================================================

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserAccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum StorageProviderType {
  local
  firebase
}

enum SearchPaginationType {
    loadMore
    numberedPages
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}
