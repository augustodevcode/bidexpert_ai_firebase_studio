// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ===============================================
// AUTH & USERS
// ===============================================

model User {
  id                    String                 @id @default(cuid())
  email                 String                 @unique
  fullName              String?
  password              String
  roleId                String?
  role                  Role?                  @relation(fields: [roleId], references: [id], onDelete: SetNull)
  habilitationStatus    UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType           AccountType            @default(PHYSICAL)
  badges                Json?
  documents             UserDocument[]
  bids                  Bid[]
  wins                  UserWin[]
  notifications         Notification[]
  reviews               Review[]
  questions             LotQuestion[]
  maxBids               UserLotMaxBid[]
  sellerProfile         Seller?
  auctioneerProfile     Auctioneer?
  uploadedMedia         MediaItem[]            @relation("UploadedBy")
  // Legal Person Fields
  razaoSocial           String?
  cnpj                  String?                @unique
  inscricaoEstadual     String?
  // Physical Person Fields
  cpf                   String?                @unique
  dateOfBirth           DateTime?
  // Shared
  cellPhone             String?
  zipCode               String?
  street                String?
  number                String?
  complement            String?
  neighborhood          String?
  city                  String?
  state                 String?
  website               String?
  optInMarketing        Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  permissions     Permission[]
  users           User[]
}

model Permission {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  roles       Role[]
}

model UserDocument {
  id              String             @id @default(cuid())
  userId          String
  documentTypeId  String
  fileUrl         String
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  uploadDate      DateTime?          @default(now())
  analysisDate    DateTime?
  analystId       String?
  rejectionReason String?
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType       @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id             String         @id @default(cuid())
  name           String         @unique
  description    String?
  isRequired     Boolean        @default(true)
  appliesTo      String?        @default("PHYSICAL,LEGAL") // Comma-separated: PHYSICAL, LEGAL
  allowedFormats String?        @default("pdf,jpg,png")
  displayOrder   Int            @default(0)
  userDocuments  UserDocument[]
}

// ===============================================
// AUCTIONS & LOTS
// ===============================================

model Auction {
  id                             String                 @id @default(cuid())
  publicId                       String                 @unique @default(uuid())
  title                          String
  description                    String?                @db.Text
  status                         AuctionStatus          @default(RASCUNHO)
  auctionType                    AuctionType?
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json                   @default("[]")
  visits                         Int                    @default(0)
  initialOffer                   Float                  @default(0)
  bidsCount                      Int                    @default(0)
  totalLots                      Int                    @default(0)
  isFavorite                     Boolean                @default(false)
  isFeaturedOnMarketplace        Boolean?               @default(false)
  marketplaceAnnouncementTitle   String?
  automaticBiddingEnabled        Boolean?               @default(true)
  allowInstallmentBids           Boolean?               @default(false)
  softCloseEnabled               Boolean?               @default(true)
  softCloseMinutes               Int?                   @default(3)
  silentBiddingEnabled           Boolean?               @default(false)
  allowMultipleBidsPerUser       Boolean?               @default(true)
  estimatedRevenue               Float?
  achievedRevenue                Float?                 @default(0)
  totalHabilitatedUsers          Int?                   @default(0)
  dataAiHint                     String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  additionalTriggers             String?
  // Vehicle specific
  sellingBranch                  String?
  vehicleLocation                String?
  // Relationships
  categoryId                     String?
  auctioneerId                   String
  sellerId                       String?
  judicialProcessId              String?
  imageMediaId                   String?                @unique
  category                       LotCategory?           @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  auctioneer                     Auctioneer             @relation(fields: [auctioneerId], references: [id])
  seller                         Seller?                @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  judicialProcess                JudicialProcess?       @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  image                          MediaItem?             @relation("AuctionImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  lots                           Lot[]
  bids                           Bid[]
  reviews                        Review[]
  questions                      LotQuestion[]
  createdAt                      DateTime               @default(now())
  updatedAt                      DateTime               @updatedAt
}

model Lot {
  id                         String        @id @default(cuid())
  publicId                   String        @unique @default(uuid())
  number                     String?
  title                      String
  description                String?       @db.Text
  status                     LotStatus     @default(EM_BREVE)
  price                      Float         @default(0)
  initialPrice               Float?
  secondInitialPrice         Float?
  evaluationValue            Float?
  reservePrice               Float?
  debtAmount                 Float?
  itbiValue                  Float?
  bidIncrementStep           Float?        @default(100)
  views                      Int           @default(0)
  bidsCount                  Int           @default(0)
  isFeatured                 Boolean?      @default(false)
  isExclusive                Boolean?      @default(false)
  discountPercentage         Float?
  additionalTriggers         String?
  endDate                    DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  dataAiHint                 String?
  imageUrl                   String?
  galleryImageUrls           Json?         @default("[]")
  // Location
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?
  // Judicial Info
  judicialProcessNumber      String?
  courtDistrict              String?
  courtName                  String?
  publicProcessUrl           String?
  propertyRegistrationNumber String?
  propertyLiens              String?       @db.Text
  knownDebts                 String?       @db.Text
  additionalDocumentsInfo    String?       @db.Text
  winningBidTermUrl          String?
  // Relationships
  auctionId                  String
  categoryId                 String?
  subcategoryId              String?
  stateId                    String?
  cityId                     String?
  imageMediaId               String?       @unique
  sellerId                   String?
  auctioneerId               String?
  auction                    Auction       @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                   LotCategory?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory                Subcategory?  @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  state                      StateInfo?    @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city                       CityInfo?     @relation(fields: [cityId], references: [id], onDelete: SetNull)
  image                      MediaItem?    @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  bens                       Bem[]
  bids                       Bid[]
  reviews                    Review[]
  questions                  LotQuestion[]
  maxBids                    UserLotMaxBid[]
  wins                       UserWin[]
  bemIds                     Json?         @default("[]")
  mediaItemIds               Json?         @default("[]")
  createdAt                  DateTime      @default(now())
  updatedAt                  DateTime      @updatedAt
}

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())
  isProxyBid    Boolean  @default(false)
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String        @id @default(cuid())
  lotId            String        @unique
  userId           String
  winningBidAmount Float
  winDate          DateTime      @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?
  lot              Lot           @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Seller {
  id                         String             @id @default(cuid())
  publicId                   String             @unique @default(uuid())
  name                       String
  slug                       String             @unique
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  logoUrl                    String?
  dataAiHintLogo             String?
  description                String?            @db.Text
  isJudicial                 Boolean            @default(false)
  // Relationships
  userId                     String?            @unique
  logoMediaId                String?            @unique
  judicialBranchId           String?            @unique
  user                       User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  logo                       MediaItem?         @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  auctions                   Auction[]
  bens                       Bem[]
  directSaleOffers           DirectSaleOffer[]
  judicialBranch             JudicialBranch?    @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  judicialProcesses          JudicialProcess[]
  createdAt                  DateTime           @default(now())
  updatedAt                  DateTime           @updatedAt
}

model Auctioneer {
  id                   String     @id @default(cuid())
  publicId             String     @unique @default(uuid())
  name                 String
  slug                 String     @unique
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  dataAiHintLogo       String?
  description          String?    @db.Text
  // Relationships
  userId               String?    @unique
  logoMediaId          String?    @unique
  user                 User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  logo                 MediaItem? @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  auctions             Auction[]
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
}

model JudicialProcess {
  id                String            @id @default(cuid())
  publicId          String            @unique @default(uuid())
  processNumber     String            @unique
  isElectronic      Boolean           @default(true)
  // Relationships
  courtId           String
  districtId        String
  branchId          String
  sellerId          String?
  court             Court             @relation(fields: [courtId], references: [id])
  district          JudicialDistrict  @relation(fields: [districtId], references: [id])
  branch            JudicialBranch    @relation(fields: [branchId], references: [id])
  seller            Seller?           @relation(fields: [sellerId], references: [id])
  parties           ProcessParty[]
  bens              Bem[]
  auction           Auction?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model ProcessParty {
  id             String         @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  process        JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@unique([processId, name, partyType])
}

model Court {
  id        String             @id @default(cuid())
  name      String             @unique
  slug      String             @unique
  stateUf   String
  website   String?
  districts JudicialDistrict[]
  processes JudicialProcess[]
}

model JudicialDistrict {
  id        String           @id @default(cuid())
  name      String
  slug      String
  courtId   String
  stateId   String
  zipCode   String?
  court     Court            @relation(fields: [courtId], references: [id])
  state     StateInfo        @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]

  @@unique([name, courtId])
}

model JudicialBranch {
  id         String             @id @default(cuid())
  name       String
  slug       String
  districtId String
  contactName String?
  phone      String?
  email      String?
  district   JudicialDistrict   @relation(fields: [districtId], references: [id])
  processes  JudicialProcess[]
  seller     Seller?

  @@unique([name, districtId])
}

model LotCategory {
  id                 String            @id @default(cuid())
  name               String            @unique
  slug               String            @unique
  description        String?
  itemCount          Int               @default(0)
  hasSubcategories   Boolean           @default(false)
  logoUrl            String?
  coverImageUrl      String?
  megaMenuImageUrl   String?
  dataAiHintLogo     String?
  dataAiHintCover    String?
  dataAiHintMegaMenu String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  // Relationships
  logoMediaId        String?           @unique
  coverImageMediaId  String?           @unique
  megaMenuImageMediaId String?         @unique
  logo               MediaItem?        @relation("CategoryLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  coverImage         MediaItem?        @relation("CategoryCover", fields: [coverImageMediaId], references: [id], onDelete: SetNull)
  megaMenuImage      MediaItem?        @relation("CategoryMegaMenu", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull)
  lots               Lot[]
  subcategories      Subcategory[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
}

model Subcategory {
  id                String       @id @default(cuid())
  name              String
  slug              String       @unique
  description       String?
  parentCategoryId  String
  itemCount         Int          @default(0)
  displayOrder      Int          @default(0)
  iconUrl           String?
  iconMediaId       String?      @unique
  dataAiHintIcon    String?
  parentCategory    LotCategory  @relation(fields: [parentCategoryId], references: [id])
  lots              Lot[]
  bens              Bem[]
  icon              MediaItem?   @relation("SubcategoryIcon", fields: [iconMediaId], references: [id], onDelete: SetNull)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@unique([name, parentCategoryId])
}

model Bem {
  id              String        @id @default(cuid())
  publicId        String        @unique @default(uuid())
  title           String
  description     String?       @db.Text
  status          BemStatus     @default(DISPONIVEL)
  evaluationValue Float?
  imageUrl        String?
  galleryImageUrls Json?        @default("[]")
  dataAiHint      String?
  // Location
  locationCity    String?
  locationState   String?
  address         String?
  latitude        Float?
  longitude       Float?
  // Vehicle specific fields
  plate           String?
  make            String?
  model           String?
  version         String?
  year            Int?
  modelYear       Int?
  mileage         Int?
  color           String?
  fuelType        String?
  transmissionType String?
  bodyType        String?
  vin             String?
  renavam         String?
  enginePower     String?
  numberOfDoors   Int?
  vehicleOptions  String?
  detranStatus    String?
  debts           String?
  runningCondition String?
  bodyCondition   String?
  tiresCondition  String?
  hasKey          Boolean?
  // Real estate specific fields
  propertyRegistrationNumber String?
  iptuNumber                  String?
  isOccupied                  Boolean?
  totalArea                   Float?
  builtArea                   Float?
  bedrooms                    Int?
  suites                      Int?
  bathrooms                   Int?
  parkingSpaces               Int?
  constructionType            String?
  finishes                    String?
  infrastructure              String?
  condoDetails                String?
  improvements                String?
  topography                  String?
  liensAndEncumbrances        String?       @db.Text
  propertyDebts               String?       @db.Text
  unregisteredRecords         String?       @db.Text
  hasHabiteSe                 Boolean?
  zoningRestrictions          String?
  // Common for many types
  brand                       String?
  serialNumber                String?
  itemCondition               String?
  specifications              String?       @db.Text
  includedAccessories         String?
  // Electronics
  batteryCondition            String?
  hasInvoice                  Boolean?
  hasWarranty                 Boolean?
  repairHistory               String?
  // Appliances
  applianceCapacity           String?
  voltage                     String?
  applianceType               String?
  additionalFunctions         String?
  // Machinery
  hoursUsed                   Int?
  engineType                  String?
  capacityOrPower             String?
  maintenanceHistory          String?
  installationLocation        String?
  compliesWithNR              String?
  operatingLicenses           String?
  // Livestock
  breed                       String?
  age                         String?
  sex                         String?
  weight                      String?
  individualId                String?
  purpose                     String?
  sanitaryCondition           String?
  lineage                     String?
  isPregnant                  Boolean?
  specialSkills               String?
  gtaDocument                 String?
  breedRegistryDocument       String?
  // Furniture
  furnitureType               String?
  material                    String?
  style                       String?
  dimensions                  String?
  pieceCount                  Int?
  // Jewelry
  jewelryType                 String?
  metal                       String?
  gemstones                   String?
  totalWeight                 String?
  jewelrySize                 String?
  authenticityCertificate     String?
  // Art
  workType                    String?
  artist                      String?
  period                      String?
  technique                   String?
  provenance                  String?
  // Boats
  boatType                    String?
  boatLength                  String?
  hullMaterial                String?
  onboardEquipment            String?
  // Food
  productName                 String?
  quantity                    String?
  packagingType               String?
  expirationDate              DateTime?
  storageConditions           String?
  // Precious Metals
  preciousMetalType           String?
  purity                      String?
  // Forest Goods
  forestGoodsType             String?
  volumeOrQuantity            String?
  species                     String?
  dofNumber                   String?
  // Relationships
  categoryId                  String?
  subcategoryId               String?
  judicialProcessId           String?
  sellerId                    String?
  imageMediaId                String?          @unique
  category                    LotCategory?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory                 Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess             JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller                      Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  image                       MediaItem?       @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  lots                        Lot[]
  createdAt                   DateTime         @default(now())
  updatedAt                   DateTime         @updatedAt
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String   @db.Text
  createdAt       DateTime @default(now())
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                      String    @id @default(cuid())
  lotId                   String
  auctionId               String
  userId                  String
  userDisplayName         String
  questionText            String    @db.Text
  answerText              String?   @db.Text
  answeredAt              DateTime?
  answeredByUserId        String?
  answeredByUserDisplayName String?
  isPublic                Boolean   @default(true)
  createdAt               DateTime  @default(now())
  auction                 Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user                    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot                     Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model StateInfo {
  id        String             @id @default(cuid())
  name      String             @unique
  uf        String             @unique
  slug      String             @unique
  cityCount Int                @default(0)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  cities    CityInfo[]
  courts    Court[]
  districts JudicialDistrict[]
  lots      Lot[]
}

model CityInfo {
  id        String    @id @default(cuid())
  name      String
  slug      String
  stateId   String
  stateUf   String
  ibgeCode  String?
  lotCount  Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  state     StateInfo @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots      Lot[]
}

model BlogPost {
  id            String   @id @default(cuid())
  title         String
  slug          String   @unique
  content       String   @db.Text
  authorId      String
  authorName    String
  publishedAt   DateTime
  tags          String?
  coverImageUrl String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DirectSaleOffer {
  id                       String                @id @default(cuid())
  publicId                 String                @unique @default(uuid())
  title                    String
  description              String                @db.Text
  offerType                DirectSaleOfferType
  status                   DirectSaleOfferStatus @default(PENDING_APPROVAL)
  price                    Float?
  minimumOfferPrice        Float?
  locationCity             String?
  locationState            String?
  imageUrl                 String?
  dataAiHint               String?
  galleryImageUrls         Json?                 @default("[]")
  itemsIncluded            Json?                 @default("[]")
  tags                     Json?                 @default("[]")
  views                    Int                   @default(0)
  proposalsCount           Int                   @default(0)
  expiresAt                DateTime?
  // Relationships
  categoryId               String
  sellerId                 String
  imageMediaId             String?               @unique
  dataAiHintSellerLogo     String?
  sellerLogoUrl            String?
  category                 LotCategory           @relation(fields: [categoryId], references: [id])
  seller                   Seller                @relation(fields: [sellerId], references: [id])
  image                    MediaItem?            @relation("DirectSaleOfferImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt
}

model MediaItem {
  id                       String           @id @default(cuid())
  fileName                 String
  storagePath              String           @unique
  uploadedAt               DateTime         @default(now())
  uploadedBy               String?
  title                    String?
  altText                  String?
  caption                  String?
  description              String?          @db.Text
  mimeType                 String
  sizeBytes                Int
  dimensions               Json?
  urlOriginal              String           @unique
  urlThumbnail             String?
  urlMedium                String?
  urlLarge                 String?
  dataAiHint               String?
  // Relationships
  uploader                 User?            @relation("UploadedBy", fields: [uploadedBy], references: [id], onDelete: SetNull)
  auctionAsImage           Auction?         @relation("AuctionImage")
  lotAsImage               Lot?             @relation("LotImage")
  bemAsImage               Bem?             @relation("BemImage")
  sellerAsLogo             Seller?          @relation("SellerLogo")
  auctioneerAsLogo         Auctioneer?      @relation("AuctioneerLogo")
  categoryAsLogo           LotCategory?     @relation("CategoryLogo")
  categoryAsCover          LotCategory?     @relation("CategoryCover")
  categoryAsMegaMenu       LotCategory?     @relation("CategoryMegaMenu")
  subcategoryAsIcon        Subcategory?     @relation("SubcategoryIcon")
  directSaleOfferAsImage   DirectSaleOffer? @relation("DirectSaleOfferImage")
  linkedLotIds             Json?
}

model PlatformSettings {
  id                          String                @id @default("global")
  siteTitle                   String?
  siteTagline                 String?
  galleryImageBasePath        String?
  storageProvider             StorageProviderType?  @default(local)
  firebaseStorageBucket       String?
  activeThemeName             String?
  themes                      Json?
  platformPublicIdMasks       Json?
  homepageSections            Json?
  mentalTriggerSettings       Json?
  sectionBadgeVisibility      Json?
  mapSettings                 Json?
  biddingSettings             Json?
  searchPaginationType        SearchPaginationType? @default(loadMore)
  searchItemsPerPage          Int?                  @default(12)
  searchLoadMoreCount         Int?                  @default(12)
  showCountdownOnLotDetail    Boolean?              @default(true)
  showCountdownOnCards        Boolean?              @default(true)
  showRelatedLotsOnLotDetail  Boolean?              @default(true)
  relatedLotsCount            Int?                  @default(5)
  defaultListItemsPerPage     Int?                  @default(10)
  variableIncrementTable      Json?                 @default("[]")
  defaultUrgencyTimerHours    Int?
  updatedAt                   DateTime              @updatedAt
}

// ===============================================
// ENUMS
// ===============================================

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  PENDING_APPROVAL
  ACTIVE
  SOLD
  EXPIRED
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum StorageProviderType {
  local
  firebase
}

enum SearchPaginationType {
  loadMore
  numberedPages
}
