// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // The following setting is required for some Linux distributions, including the one used by Firebase Studio.
  // @see https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#binarytargets-options
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- Enums ---
enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum PartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

// --- Models ---

model User {
  id                  String                 @id @default(cuid())
  email               String                 @unique
  fullName            String
  password            String
  roleId              String?
  sellerId            String?                @unique
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  cpf                 String?
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  status              String?                @default("ATIVO")
  optInMarketing      Boolean                @default(false)
  badges              Json                   @default("[]")
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  avatarUrl           String?
  dataAiHint          String?
  accountType         AccountType            @default(PHYSICAL)
  razaoSocial         String?
  cnpj                String?                @unique
  inscricaoEstadual   String?
  website             String?

  role              Role?                  @relation(fields: [roleId], references: [id])
  sellerProfile     Seller?
  bids              Bid[]
  wins              UserWin[]
  questions         LotQuestion[]          @relation("AskedByUser")
  answeredQuestions LotQuestion[]          @relation("AnsweredByUser")
  notifications     Notification[]
  documents         UserDocument[]
  maxBids           UserLotMaxBid[]
}

model Role {
  id                  String       @id @default(cuid())
  name                String       @unique
  name_normalized     String       @unique
  description         String?
  permissions         Json         @default("[]")
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  users               User[]
  permissionRelations Permission[] @relation("RolePermissions")
}

model Permission {
  id    String @id @default(cuid())
  name  String @unique
  roles Role[] @relation("RolePermissions")
}

model DocumentType {
  id             String         @id @default(cuid())
  name           String         @unique
  description    String?
  isRequired     Boolean        @default(true)
  appliesTo      Json           @default("[\"PHYSICAL\", \"LEGAL\", \"DIRECT_SALE_CONSIGNOR\"]")
  allowedFormats Json           @default("[\"pdf\", \"jpg\", \"png\"]")
  displayOrder   Int            @default(0)
  userDocuments  UserDocument[]
}

model UserDocument {
  id              String             @id @default(cuid())
  userId          String
  documentTypeId  String
  fileUrl         String?
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  rejectionReason String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType DocumentType @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

model LotCategory {
  id                 String            @id @default(cuid())
  name               String            @unique
  slug               String            @unique
  description        String?
  logoUrl            String?
  dataAiHintLogo     String?
  coverImageUrl      String?
  dataAiHintCover    String?
  megaMenuImageUrl   String?
  dataAiHintMegaMenu String?
  hasSubcategories   Boolean           @default(false)
  itemCount          Int?              @default(0)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  lots             Lot[]
  auctions         Auction[]
  bens             Bem[]
  subcategories    Subcategory[]
  directSaleOffers DirectSaleOffer[]
}

model Subcategory {
  id               String      @id @default(cuid())
  name             String
  slug             String
  description      String?
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  displayOrder     Int         @default(0)
  itemCount        Int?        @default(0)
  parentCategoryId String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  parentCategory LotCategory @relation(fields: [parentCategoryId], references: [id])
  lots           Lot[]
  bens           Bem[]

  @@unique([parentCategoryId, slug])
}

model State {
  id        String            @id @default(cuid())
  name      String            @unique
  uf        String            @unique
  slug      String            @unique
  cityCount Int?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  cities    City[]
  courts    Court[]
  districts JudicialDistrict[]
  lots      Lot[]
}

model City {
  id        String   @id @default(cuid())
  name      String
  slug      String
  stateId   String
  stateUf   String
  ibgeCode  String?
  lotCount  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  state State @relation(fields: [stateId], references: [id])
  lots  Lot[]
}

model Court {
  id                String             @id @default(cuid())
  name              String             @unique
  slug              String             @unique
  stateUf           String
  website           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  state             State              @relation(fields: [stateUf], references: [uf])
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
}

model JudicialDistrict {
  id                String           @id @default(cuid())
  name              String
  slug              String
  courtId           String
  stateId           String
  zipCode           String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  court             Court            @relation(fields: [courtId], references: [id])
  state             State            @relation(fields: [stateId], references: [id])
  branches          JudicialBranch[]
  judicialProcesses JudicialProcess[]
}

model JudicialBranch {
  id                String            @id @default(cuid())
  name              String
  slug              String
  districtId        String
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  district          JudicialDistrict  @relation(fields: [districtId], references: [id])
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
}

model JudicialProcess {
  id                 String   @id @default(cuid())
  publicId           String   @unique
  processNumber      String   @unique
  isElectronic       Boolean
  courtId            String
  districtId         String
  branchId           String
  sellerId           String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  court    Court          @relation(fields: [courtId], references: [id])
  district JudicialDistrict @relation(fields: [districtId], references: [id])
  branch   JudicialBranch   @relation(fields: [branchId], references: [id])
  seller   Seller?        @relation(fields: [sellerId], references: [id])
  parties  ProcessParty[]
  bens     Bem[]
  auctions Auction[]
}

model ProcessParty {
  id             String        @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      PartyType
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@unique([processId, name, partyType])
}

model Bem {
  id                         String   @id @default(cuid())
  publicId                   String   @unique
  title                      String
  description                String?  @db.Text
  status                     BemStatus @default(DISPONIVEL)
  evaluationValue            Float?
  categoryId                 String?
  subcategoryId              String?
  judicialProcessId          String?
  sellerId                   String?
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json     @default("[]")
  mediaItemIds               Json     @default("[]")
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?

  // Veículos
  plate                      String?
  make                       String?
  model                      String?
  version                    String?
  year                       Int?
  modelYear                  Int?
  mileage                    Int?
  color                      String?
  fuelType                   String?
  transmissionType           String?
  bodyType                   String?
  vin                        String?
  renavam                    String?
  enginePower                String?
  numberOfDoors              Int?
  vehicleOptions             String?
  detranStatus               String?
  debts                      String?
  runningCondition           String?
  bodyCondition              String?
  tiresCondition             String?
  hasKey                     Boolean? @default(false)

  // Imóveis
  propertyRegistrationNumber String?
  propertyType               String?
  iptuNumber                 String?
  isOccupied                 Boolean? @default(false)
  area                       Float?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?
  infrastructure             String?
  condoDetails               String?
  improvements               String?
  topography                 String?
  liensAndEncumbrances       String?  @db.Text
  propertyDebts              String?
  unregisteredRecords        String?
  hasHabiteSe                Boolean? @default(false)
  zoningRestrictions         String?
  amenities                  Json     @default("[]")

  // ... outros campos de detalhes ...
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category        LotCategory?     @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory?     @relation(fields: [subcategoryId], references: [id])
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  lots            Lot[]            @relation("BensInLots")
}

model Auction {
  id                             String        @id @default(cuid())
  publicId                       String        @unique
  title                          String
  description                    String?       @db.Text
  status                         AuctionStatus @default(RASCUNHO)
  auctionType                    AuctionType?
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json
  imageUrl                       String?
  imageMediaId                   String?
  dataAiHint                     String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  vehicleLocation                String?
  automaticBiddingEnabled        Boolean       @default(false)
  silentBiddingEnabled           Boolean       @default(false)
  allowMultipleBidsPerUser       Boolean       @default(true)
  allowInstallmentBids           Boolean       @default(false)
  softCloseEnabled               Boolean       @default(false)
  softCloseMinutes               Int?          @default(2)
  estimatedRevenue               Float?
  achievedRevenue                Float?        @default(0)
  isFeaturedOnMarketplace        Boolean?      @default(false)
  marketplaceAnnouncementTitle   String?
  additionalTriggers             Json
  visits                         Int?          @default(0)
  totalLots                      Int?          @default(0)
  totalHabilitatedUsers          Int?          @default(0)
  city                           String?
  state                          String?
  initialOffer                   Float?
  isFavorite                     Boolean?
  currentBid                     Float?
  bidsCount                      Int?
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt
  categoryId                     String
  auctioneerId                   String
  sellerId                       String?
  judicialProcessId              String?

  category                       LotCategory      @relation(fields: [categoryId], references: [id])
  auctioneer                     Auctioneer       @relation(fields: [auctioneerId], references: [id])
  seller                         Seller?          @relation(fields: [sellerId], references: [id])
  judicialProcess                JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  lots                           Lot[]
  bids                           Bid[]
}

model Lot {
  id                         String    @id @default(cuid())
  publicId                   String    @unique
  title                      String
  number                     String?
  description                String?   @db.Text
  price                      Float
  initialPrice               Float?
  secondInitialPrice         Float?
  bidIncrementStep           Float?
  status                     LotStatus @default(EM_BREVE)
  imageUrl                   String?
  imageMediaId               String?
  winningBidTermUrl          String?
  galleryImageUrls           Json      @default("[]")
  mediaItemIds               Json      @default("[]")
  bemIds                     Json      @default("[]")
  isFeatured                 Boolean?  @default(false)
  isExclusive                Boolean?  @default(false)
  discountPercentage         Float?
  additionalTriggers         Json
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?   @db.Text
  mapStaticImageUrl          String?   @db.Text
  judicialProcessNumber      String?
  courtDistrict              String?
  courtName                  String?
  publicProcessUrl           String?
  propertyRegistrationNumber String?
  propertyLiens              String?   @db.Text
  knownDebts                 String?   @db.Text
  additionalDocumentsInfo    String?   @db.Text
  reservePrice               Float?
  evaluationValue            Float?
  debtAmount                 Float?
  itbiValue                  Float?
  endDate                    DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  dataAiHint                 String?
  views                      Int?      @default(0)
  bidsCount                  Int?      @default(0)
  auctionId                  String
  categoryId                 String?
  subcategoryId              String?
  stateId                    String?
  cityId                     String?
  sellerId                   String?   // Denormalized
  auctioneerId               String?   // Denormalized
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt

  auction          Auction        @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category         LotCategory?   @relation(fields: [categoryId], references: [id])
  subcategory      Subcategory?   @relation(fields: [subcategoryId], references: [id])
  state            State?         @relation(fields: [stateId], references: [id])
  city             City?          @relation(fields: [cityId], references: [id])
  bens             Bem[]          @relation("BensInLots")
  bids             Bid[]
  wins             UserWin[]
  reviews          Review[]
  questions        LotQuestion[]
  maxBids          UserLotMaxBid[]
}

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())

  lot     Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder  User    @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id                String        @id @default(cuid())
  userId            String
  lotId             String        @unique
  winningBidAmount  Float
  winDate           DateTime      @default(now())
  paymentStatus     PaymentStatus @default(PENDENTE)
  invoiceUrl        String?

  user User @relation(fields: [userId], references: [id])
  lot  Lot  @relation(fields: [lotId], references: [id])
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model Seller {
  id                         String            @id @default(cuid())
  publicId                   String            @unique
  name                       String            @unique
  slug                       String            @unique
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  logoUrl                    String?
  logoMediaId                String?
  dataAiHintLogo             String?
  description                String?
  memberSince                DateTime?
  rating                     Float?
  activeLotsCount            Int?
  totalSalesValue            Float?
  auctionsFacilitatedCount   Int?
  isJudicial                 Boolean           @default(false)
  userId                     String?           @unique
  judicialBranchId           String?
  createdAt                  DateTime          @default(now())
  updatedAt                  DateTime          @updatedAt

  user              User?             @relation(fields: [userId], references: [id])
  judicialBranch    JudicialBranch?   @relation(fields: [judicialBranchId], references: [id])
  auctions          Auction[]
  bens              Bem[]
  directSaleOffers  DirectSaleOffer[]
  judicialProcesses JudicialProcess[]
}

model Auctioneer {
  id                     String    @id @default(cuid())
  publicId               String    @unique
  name                   String    @unique
  slug                   String    @unique
  registrationNumber     String?
  contactName            String?
  email                  String?
  phone                  String?
  address                String?
  city                   String?
  state                  String?
  zipCode                String?
  website                String?
  logoUrl                String?
  logoMediaId            String?
  dataAiHintLogo         String?
  description            String?
  memberSince            DateTime?
  rating                 Float?
  auctionsConductedCount Int?
  totalValueSold         Float?
  userId                 String?   @unique
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  user     User?     @relation(fields: [userId], references: [id])
  auctions Auction[]
}

model DirectSaleOffer {
  id                   String                @id @default(cuid())
  publicId             String                @unique
  title                String
  description          String                @db.Text
  offerType            DirectSaleOfferType
  status               DirectSaleOfferStatus @default(PENDING_APPROVAL)
  price                Float?
  minimumOfferPrice    Float?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json                  @default("[]")
  mediaItemIds         Json                  @default("[]")
  itemsIncluded        Json                  @default("[]")
  tags                 Json                  @default("[]")
  views                Int?                  @default(0)
  proposalsCount       Int?                  @default(0)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  expiresAt            DateTime?
  categoryId           String
  sellerId             String

  category LotCategory @relation(fields: [categoryId], references: [id])
  seller   Seller      @relation(fields: [sellerId], references: [id])
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String   @db.Text
  createdAt       DateTime @default(now())

  lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                        String   @id @default(cuid())
  lotId                     String
  auctionId                 String
  userId                    String
  userDisplayName           String
  questionText              String   @db.Text
  isPublic                  Boolean  @default(true)
  createdAt                 DateTime @default(now())
  answerText                String?  @db.Text
  answeredAt                DateTime?
  answeredByUserId          String?
  answeredByUserDisplayName String?

  lot            Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user           User @relation(name: "AskedByUser", fields: [userId], references: [id])
  answeredByUser User? @relation(name: "AnsweredByUser", fields: [answeredByUserId], references: [id])
}

model MediaItem {
  id            String    @id @default(cuid())
  fileName      String
  storagePath   String?
  uploadedAt    DateTime  @default(now())
  uploadedBy    String?
  title         String?
  altText       String?
  caption       String?
  description   String?
  mimeType      String
  sizeBytes     Int
  urlOriginal   String    @db.Text
  urlThumbnail  String?   @db.Text
  urlMedium     String?   @db.Text
  urlLarge      String?   @db.Text
  linkedLotIds  Json
  dataAiHint    String?
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model BlogPost {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  content     String    @db.Text
  authorId    String
  authorName  String
  imageUrl    String?
  publishedAt DateTime?
  tags        Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model DocumentTemplate {
  id        String               @id @default(cuid())
  name      String               @unique
  type      DocumentTemplateType
  content   String               @db.Text
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model PlatformSettings {
  id                           String   @id @default("global")
  siteTitle                    String?
  siteTagline                  String?
  galleryImageBasePath         String?
  storageProvider              String?
  firebaseStorageBucket        String?
  activeThemeName              String?
  themes                       Json
  platformPublicIdMasks        Json?
  homepageSections             Json
  mentalTriggerSettings        Json?
  sectionBadgeVisibility       Json?
  mapSettings                  Json?
  biddingSettings              Json?
  searchPaginationType         String?
  searchItemsPerPage           Int?
  searchLoadMoreCount          Int?
  showCountdownOnLotDetail     Boolean?
  showCountdownOnCards         Boolean?
  showRelatedLotsOnLotDetail   Boolean?
  relatedLotsCount             Int?
  defaultUrgencyTimerHours     Int?
  variableIncrementTable       Json     @default("[]")
  defaultListItemsPerPage      Int?
  updatedAt                    DateTime @updatedAt
}

// Map from a table to another.
// Necessary for many-to-many relations in Prisma.
model _BensInLots {
  A String
  B String

  @@unique([A, B])
  @@index([B])

  bem Bem @relation(fields: [A], references: [id], onDelete: Cascade)
  lot Lot @relation(fields: [B], references: [id], onDelete: Cascade)
}

// Explicit many-to-many relation for Role and Permission
model _RolePermissions {
  A String
  B String

  @@unique([A, B])
  @@index([B])
  
  role       Role       @relation(fields: [A], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [B], references: [id], onDelete: Cascade)
}
