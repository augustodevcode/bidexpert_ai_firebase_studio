// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma" // Important for handling relations without strict foreign keys at the DB level
}

// ==============================================================================
// 1. AUTH & USER MODELS
// ==============================================================================
model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  fullName              String?
  password              String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  habilitationStatus    UserHabilitationStatus @default(PENDING_DOCUMENTS)
  badges                Json? // To store array of strings like ['FIRST_WIN', 'TOP_BIDDER']

  roleId                String?
  role                  Role?     @relation(fields: [roleId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  
  // Back-relations
  sellerProfile         Seller?          @relation("UserToSeller")
  auctioneerProfile     Auctioneer?      @relation("UserToAuctioneer")
  notifications         Notification[]
  wins                  UserWin[]
  bids                  Bid[]
  questions             LotQuestion[]    @relation("AskedByUser")
  answers               LotQuestion[]    @relation("AnsweredByUser")
  reviews               Review[]
  uploadedMedia         MediaItem[]
  documents             UserDocument[]
  
  // Fields for specific account types, nullable
  accountType           UserAccountType?
  cpf                   String?
  dateOfBirth           DateTime?
  razaoSocial           String?
  cnpj                  String?
  inscricaoEstadual     String?
  website               String?
  cellPhone             String?
  zipCode               String?
  street                String?
  number                String?
  complement            String?
  neighborhood          String?
  city                  String?
  state                 String?
  optInMarketing        Boolean?         @default(false)
  
  // More detailed personal/company info, all optional
  rgNumber              String?
  rgIssuer              String?
  rgIssueDate           DateTime?
  rgState               String?
  homePhone             String?
  gender                String?
  profession            String?
  nationality           String?
  maritalStatus         String?
  propertyRegime        String?
  spouseName            String?
  spouseCpf             String?
}


model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique // For system use, e.g., 'ADMINISTRATOR'
  description     String?
  users           User[]
  permissions     Permission[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., 'auctions:create', 'users:delete'
  description String?
  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserDocument {
  id              String             @id @default(cuid())
  userId          String
  documentTypeId  String
  fileUrl         String?
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  rejectionReason String?
  
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType   @relation(fields: [documentTypeId], references: [id])

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  @@unique([userId, documentTypeId])
}

model DocumentType {
  id             String          @id @default(cuid())
  name           String          @unique
  description    String?
  isRequired     Boolean         @default(false)
  appliesTo      UserAccountType[]
  allowedFormats String[]
  displayOrder   Int             @default(0)
  
  userDocuments  UserDocument[]

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}


// ==============================================================================
// 2. AUCTION & LOT MODELS
// ==============================================================================

model Auction {
  id                             String           @id @default(cuid())
  publicId                       String           @unique @default(cuid())
  title                          String
  fullTitle                      String?          @db.Text
  description                    String?          @db.Text
  status                         AuctionStatus    @default(RASCUNHO)
  auctionType                    AuctionType?
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json?            // JSON to store array of AuctionStage
  
  categoryId                     String
  category                       LotCategory      @relation(fields: [categoryId], references: [id])
  
  sellerId                       String?
  seller                         Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  auctioneerId                   String?
  auctioneer                     Auctioneer?      @relation(fields: [auctioneerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  
  judicialProcessId              String?
  judicialProcess                JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  city                           String?
  state                          String?
  imageUrl                       String?          @db.Text
  imageMediaId                   String?          @unique
  image                          MediaItem?       @relation("AuctionImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  
  sellingBranch                  String?
  automaticBiddingEnabled        Boolean?         @default(false)
  silentBiddingEnabled           Boolean?         @default(false)
  allowMultipleBidsPerUser       Boolean?         @default(true)
  allowInstallmentBids           Boolean?         @default(false)
  softCloseEnabled               Boolean?         @default(false)
  softCloseMinutes               Int?             @default(2)
  
  estimatedRevenue               Float?
  achievedRevenue                Float?
  totalHabilitatedUsers          Int?
  
  isFeaturedOnMarketplace        Boolean?         @default(false)
  marketplaceAnnouncementTitle   String?
  
  additionalTriggers             Json?            // Array of strings
  variableIncrementTable         Json?            // JSON for VariableIncrementRule[]

  decrementAmount                Float?
  decrementIntervalSeconds       Int?
  floorPrice                     Float?
  
  autoRelistSettings             Json?
  
  visits                         Int?             @default(0)
  totalLots                      Int?             @default(0)

  lots                           Lot[]
  bids                           Bid[]
  reviews                        Review[]
  questions                      LotQuestion[]
  
  createdAt                      DateTime         @default(now())
  updatedAt                      DateTime         @updatedAt
}

model Lot {
  id                 String    @id @default(cuid())
  publicId           String    @unique @default(cuid())
  number             String?
  title              String
  description        String?   @db.Text
  status             LotStatus
  price              Float
  initialPrice       Float?
  secondInitialPrice Float?
  
  auctionId          String
  auction            Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  
  categoryId         String
  category           LotCategory @relation(fields: [categoryId], references: [id])

  subcategoryId      String?
  subcategory        Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)

  sellerId           String?
  seller             Seller?   @relation(fields: [sellerId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  stateId            String?
  state              StateInfo? @relation(fields: [stateId], references: [id])
  
  cityId             String?
  city               CityInfo?  @relation(fields: [cityId], references: [id])
  
  imageUrl           String?   @db.Text
  imageMediaId       String?   @unique
  image              MediaItem? @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  winningBidTermUrl  String?
  
  views              Int?      @default(0)
  bidsCount          Int?      @default(0)
  
  isFeatured         Boolean?  @default(false)
  isExclusive        Boolean?  @default(false)
  discountPercentage Float?
  additionalTriggers Json? // Array of strings
  
  latitude           Float?
  longitude          Float?
  mapAddress         String?
  mapEmbedUrl        String?   @db.Text
  mapStaticImageUrl  String?   @db.Text
  
  condition          String?

  bens               Bem[]
  mediaItems         MediaItem[]

  bids               Bid[]
  wins               UserWin[]
  reviews            Review[]
  questions          LotQuestion[]
  maxBids            UserLotMaxBid[]

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

// ==============================================================================
// 3. BIDDING & POST-AUCTION MODELS
// ==============================================================================

model Bid {
  id             String   @id @default(cuid())
  lotId          String
  auctionId      String
  bidderId       String
  bidderDisplay  String
  amount         Float
  timestamp      DateTime @default(now())
  
  lot            Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction        Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder         User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  
  @@index([lotId])
  @@index([bidderId])
}

model UserWin {
  id               String        @id @default(cuid())
  userId           String
  lotId            String        @unique
  winningBidAmount Float
  winDate          DateTime      @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?
  
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot              Lot           @relation(fields: [lotId], references: [id], onDelete: Cascade)
  
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  
  @@index([userId])
}

// ==============================================================================
// 4. EXTERNAL ENTITY PROFILES
// ==============================================================================

model Seller {
  id                         String    @id @default(cuid())
  publicId                   String    @unique @default(cuid())
  name                       String
  slug                       String    @unique
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  logoUrl                    String?
  logoMediaId                String?   @unique
  logo                       MediaItem? @relation("LogoSeller", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  dataAiHintLogo             String?
  description                String?   @db.Text
  
  userId                     String?   @unique
  user                       User?     @relation("UserToSeller", fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  
  isJudicial                 Boolean?  @default(false)
  judicialBranchId           String?   @unique
  judicialBranch             JudicialBranch? @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  
  auctions                   Auction[]
  judicialProcesses          JudicialProcess[]
  bens                       Bem[]
  directSaleOffers           DirectSaleOffer[]
  lots                       Lot[] // Seller can be directly associated with a lot

  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
}

model Auctioneer {
  id                         String   @id @default(cuid())
  publicId                   String   @unique @default(cuid())
  name                       String
  slug                       String   @unique
  registrationNumber         String?
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  
  userId                     String?   @unique
  user                       User?     @relation("UserToAuctioneer", fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  
  logoUrl                    String?
  logoMediaId                String?   @unique
  logo                       MediaItem? @relation("LogoAuctioneer", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  dataAiHintLogo             String?
  description                String?   @db.Text
  
  auctions                   Auction[]

  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
}

// ==============================================================================
// 5. JUDICIAL MODELS
// ==============================================================================

model JudicialProcess {
  id              String   @id @default(cuid())
  publicId        String   @unique @default(cuid())
  processNumber   String   @unique
  isElectronic    Boolean
  
  courtId         String
  court           Court    @relation(fields: [courtId], references: [id])
  
  districtId      String
  district        JudicialDistrict @relation(fields: [districtId], references: [id])
  
  branchId        String
  branch          JudicialBranch @relation(fields: [branchId], references: [id])
  
  sellerId        String?
  seller          Seller?  @relation(fields: [sellerId], references: [id])
  
  parties         ProcessParty[]
  bens            Bem[]
  auctions        Auction[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model ProcessParty {
  id              String   @id @default(cuid())
  processId       String
  process         JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  name            String
  documentNumber  String?
  partyType       ProcessPartyType
  
  @@unique([processId, name, partyType])
}

model Court {
  id         String   @id @default(cuid())
  name       String   @unique
  slug       String   @unique
  stateUf    String
  state      StateInfo @relation(fields: [stateUf], references: [uf])
  website    String?
  districts  JudicialDistrict[]
  processes  JudicialProcess[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model JudicialDistrict {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  
  courtId   String
  court     Court    @relation(fields: [courtId], references: [id])

  stateId   String
  state     StateInfo @relation(fields: [stateId], references: [id])

  zipCode   String?
  branches  JudicialBranch[]
  processes JudicialProcess[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JudicialBranch {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  
  districtId  String
  district    JudicialDistrict @relation(fields: [districtId], references: [id])
  
  contactName String?
  phone       String?
  email       String?
  
  processes   JudicialProcess[]
  seller      Seller?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


// ==============================================================================
// 6. ASSET & MEDIA MODELS
// ==============================================================================

model Bem {
  id                         String    @id @default(cuid())
  publicId                   String    @unique @default(cuid())
  title                      String
  description                String?   @db.Text
  status                     BemStatus
  
  judicialProcessId          String?
  judicialProcess            JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  
  sellerId                   String?
  seller                     Seller?   @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  
  categoryId                 String
  category                   LotCategory @relation(fields: [categoryId], references: [id])
  
  subcategoryId              String?
  subcategory                Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  
  evaluationValue            Float?
  
  imageUrl                   String?
  imageMediaId               String?   @unique
  image                      MediaItem? @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  
  lots                       Lot[]
  mediaItems                 MediaItem[]

  // Vehicle specific fields
  plate                     String?
  make                      String?
  model                     String?
  version                   String?
  year                      Int?
  modelYear                 Int?
  mileage                   Int?
  color                     String?
  fuelType                  String?
  transmissionType          String?
  bodyType                  String?
  vin                       String?
  renavam                   String?
  enginePower               String?
  numberOfDoors             Int?
  vehicleOptions            String?
  detranStatus              String?
  debts                     String?
  runningCondition          String?
  bodyCondition             String?
  tiresCondition            String?
  hasKey                    Boolean?

  // Real estate specific fields
  propertyType              String?
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  area                       Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?
  infrastructure             String?
  condoDetails               String?
  improvements               String?
  topography                 String?
  liensAndEncumbrances       String?
  propertyDebts              String?
  unregisteredRecords        String?
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  
  // JSON fields for flexible properties
  amenities                  Json?     // Array of strings

  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
}

model MediaItem {
  id               String       @id @default(cuid())
  fileName         String
  storagePath      String?      @unique
  title            String?
  altText          String?
  caption          String?
  description      String?      @db.Text
  mimeType         String
  sizeBytes        Int
  
  urlOriginal      String       @db.Text
  urlThumbnail     String?      @db.Text
  urlMedium        String?      @db.Text
  urlLarge         String?      @db.Text

  uploadedById     String?
  uploadedByUser   User?        @relation(fields: [uploadedById], references: [id], onDelete: SetNull)

  auctionImage     Auction?     @relation("AuctionImage")
  lotImage         Lot?         @relation("LotImage")
  bemImage         Bem?         @relation("BemImage")
  logoSeller       Seller?      @relation("LogoSeller")
  logoAuctioneer   Auctioneer?  @relation("LogoAuctioneer")
  logoCategory     LotCategory? @relation("LogoCategory")
  coverCategory    LotCategory? @relation("CoverCategory")
  megaMenuCategory LotCategory? @relation("MegaMenuCategory")
  iconSubcategory  Subcategory? @relation("IconSubcategory")
  offerImage       DirectSaleOffer? @relation("OfferImage")
  
  lots             Lot[]
  bens             Bem[]
  
  dataAiHint       String?
  uploadedAt       DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

// ==============================================================================
// 7. CATEGORIZATION & GEOGRAPHIC MODELS
// ==============================================================================

model LotCategory {
  id                   String      @id @default(cuid())
  name                 String      @unique
  slug                 String      @unique
  description          String?
  hasSubcategories     Boolean?    @default(false)
  itemCount            Int?        @default(0)

  logoUrl              String?
  logoMediaId          String?     @unique
  logo                 MediaItem?  @relation("LogoCategory", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  dataAiHintLogo       String?
  
  coverImageUrl        String?
  coverImageMediaId    String?     @unique
  coverImage           MediaItem?  @relation("CoverCategory", fields: [coverImageMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  dataAiHintCover      String?

  megaMenuImageUrl     String?
  megaMenuImageMediaId String?     @unique
  megaMenuImage        MediaItem?  @relation("MegaMenuCategory", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  dataAiHintMegaMenu   String?

  auctions             Auction[]
  lots                 Lot[]
  bens                 Bem[]
  subcategories        Subcategory[]
  directSaleOffers     DirectSaleOffer[]
  
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
}

model Subcategory {
  id                   String       @id @default(cuid())
  name                 String
  slug                 String       @unique
  description          String?
  parentCategoryId     String
  parentCategory       LotCategory  @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  displayOrder         Int          @default(0)
  itemCount            Int?         @default(0)

  iconUrl              String?
  iconMediaId          String?      @unique
  icon                 MediaItem?   @relation("IconSubcategory", fields: [iconMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  dataAiHintIcon       String?

  lots                 Lot[]
  bens                 Bem[]
  
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  
  @@index([parentCategoryId])
}

model StateInfo {
  id         String   @id @default(cuid())
  name       String   @unique
  uf         String   @unique
  slug       String   @unique
  cityCount  Int?     @default(0)
  
  cities     CityInfo[]
  courts     Court[]
  districts  JudicialDistrict[]
  lots       Lot[]
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CityInfo {
  id         String    @id @default(cuid())
  name       String
  slug       String
  stateId    String
  state      StateInfo @relation(fields: [stateId], references: [id])
  stateUf    String
  ibgeCode   String?
  lotCount   Int?      @default(0)
  
  lots       Lot[]
  
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  @@unique([name, stateId])
}

// ==============================================================================
// 8. NOTIFICATIONS, REVIEWS, Q&A MODELS
// ==============================================================================

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String?  @db.Text
  
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([lotId])
}

model LotQuestion {
  id                        String   @id @default(cuid())
  lotId                     String
  auctionId                 String
  userId                    String
  userDisplayName           String
  questionText              String   @db.Text
  isPublic                  Boolean  @default(true)
  
  answerText                String?  @db.Text
  answeredAt                DateTime?
  answeredByUserId          String?
  answeredByUserDisplayName String?
  
  lot                       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction                   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user                      User     @relation("AskedByUser", fields: [userId], references: [id], onDelete: Cascade)
  answeredBy                User?    @relation("AnsweredByUser", fields: [answeredByUserId], references: [id], onDelete: SetNull)
  
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  
  @@index([lotId])
}

model UserLotMaxBid {
  userId     String
  lotId      String
  maxAmount  Float
  isActive   Boolean  @default(true)
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot        Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@id([userId, lotId])
}


// ==============================================================================
// 9. CONTENT & PLATFORM MODELS
// ==============================================================================

model BlogPost {
  id            String   @id @default(cuid())
  title         String
  slug          String   @unique
  content       String   @db.LongText
  authorId      String
  authorName    String
  publishedAt   DateTime?
  isPublished   Boolean  @default(false)
  featuredImage String?
  tags          String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DirectSaleOffer {
  id                     String    @id @default(cuid())
  publicId               String    @unique @default(cuid())
  title                  String
  description            String    @db.Text
  offerType              DirectSaleOfferType
  status                 DirectSaleOfferStatus
  price                  Float?
  minimumOfferPrice      Float?
  
  categoryId             String
  category               LotCategory @relation(fields: [categoryId], references: [id])
  
  sellerId               String
  seller                 Seller    @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  
  locationCity           String?
  locationState          String?
  
  imageUrl               String?
  imageMediaId           String?   @unique
  image                  MediaItem? @relation("OfferImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  dataAiHint             String?
  expiresAt              DateTime?
  
  views                  Int?      @default(0)
  proposalsCount         Int?      @default(0)
  
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
}

model PlatformSettings {
  id                           String @id @default("global")
  siteTitle                    String?
  siteTagline                  String?
  galleryImageBasePath         String?
  storageProvider              String?
  firebaseStorageBucket        String?
  activeThemeName              String?
  themes                       Json?
  platformPublicIdMasks        Json?
  homepageSections             Json?
  mentalTriggerSettings        Json?
  sectionBadgeVisibility       Json?
  mapSettings                  Json?
  searchPaginationType         String?
  searchItemsPerPage           Int?
  searchLoadMoreCount          Int?
  showCountdownOnLotDetail     Boolean?
  showCountdownOnCards         Boolean?
  showRelatedLotsOnLotDetail   Boolean?
  relatedLotsCount             Int?
  defaultUrgencyTimerHours     Int?
  variableIncrementTable       Json?
  biddingSettings              Json?
  defaultListItemsPerPage      Int?
  updatedAt                    DateTime @updatedAt
}

// ==============================================================================
// 10. ENUMS
// ==============================================================================

enum UserAccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  PENDING_APPROVAL
  ACTIVE
  SOLD
  EXPIRED
}

enum DocumentTemplateType {
  WINNING_BID_TERM      // Auto de Arrematação
  EVALUATION_REPORT     // Laudo de Avaliação
  AUCTION_CERTIFICATE   // Certificado de Leilão
}
