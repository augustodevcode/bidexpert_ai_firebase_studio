// prisma/schema.prisma

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

model Usuario {
  id                  String               @id @default(cuid())
  email               String               @unique
  fullName            String
  password            String
  roleId              String?
  habilitationStatus  String?              @default("PENDENTE_DOCUMENTOS") // PENDING_DOCUMENTS, PENDING_ANALYSIS, HABILITADO, REJECTED, BLOCKED
  accountType         String?              @default("PHYSICAL") // PHYSICAL, LEGAL
  cpf                 String?              @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  optInMarketing      Boolean?             @default(false)
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?
  sellerId            String?              @unique
  leiloeiroId         String?              @unique
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  
  perfil              Perfil?              @relation(fields: [roleId], references: [id])
  vendedor            Vendedor?            @relation(fields: [sellerId], references: [id])
  leiloeiro           Leiloeiro?           @relation(fields: [leiloeiroId], references: [id])

  lances              Lance[]
  arremates           Arremate[]
  documentos          DocumentoUsuario[]   @relation("UsuarioDocumentos")
  documentosAnalisados DocumentoUsuario[]  @relation("AnalistaDocumentos")
  notificacoes        Notificacao[]
  postsBlog           PostBlog[]
  avaliacoes          Avaliacao[]
  perguntas           PerguntaLote[]
  maxBids             UserLotMaxBid[]
  vendasDiretas       VendaDireta[]

  @@map("usuarios")
}


model Perfil {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  usuarios        Usuario[]
  permissoes      Permissao[]  @relation("PerfilPermissao")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("perfis")
}

model Permissao {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  perfis      Perfil[] @relation("PerfilPermissao")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("permissoes")
}

model DocumentoUsuario {
  id                String    @id @default(cuid())
  usuarioId         String
  tipoDocumentoId   String
  arquivoUrl        String?
  nomeArquivo       String?
  status            String    @default("NAO_ENVIADO") // NOT_SENT, SUBMITTED, PENDING_ANALYSIS, APPROVED, REJECTED
  dataEnvio         DateTime?
  dataAnalise       DateTime?
  analistaId        String?
  motivoRejeicao    String?
  
  usuario         Usuario       @relation("UsuarioDocumentos", fields: [usuarioId], references: [id])
  tipoDocumento   TipoDocumento   @relation(fields: [tipoDocumentoId], references: [id])
  analista        Usuario?      @relation("AnalistaDocumentos", fields: [analistaId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@unique([usuarioId, tipoDocumentoId])
  @@map("documentos_usuario")
}

model TipoDocumento {
  id             String             @id @default(cuid())
  name           String             @unique
  description    String?
  isRequired     Boolean            @default(true)
  appliesTo      String             @default("PHYSICAL,LEGAL") // Comma-separated: PHYSICAL, LEGAL
  allowedFormats String             @default("pdf,jpg,png")
  displayOrder   Int                @default(0)
  documentos     DocumentoUsuario[]

  @@map("tipos_documento")
}


model Leilao {
  id                             String    @id @default(cuid())
  publicId                       String    @unique
  title                          String
  fullTitle                      String?
  description                    String?
  status                         String
  auctionType                    String?
  auctionDate                    DateTime
  endDate                        DateTime?
  etapas                         Json?
  
  categoriaId                    String
  leiloeiroId                    String
  sellerId                       String?
  judicialProcessId              String?
  imageMediaId                   String?
  
  city                           String?
  state                          String?
  dataAiHint                     String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  visits                         Int?      @default(0)
  initialOffer                   Float?
  totalLots                      Int?      @default(0)
  sellingBranch                  String?
  
  automaticBiddingEnabled        Boolean?  @default(false)
  silentBiddingEnabled           Boolean?  @default(false)
  allowMultipleBidsPerUser       Boolean?  @default(true)
  allowInstallmentBids           Boolean?  @default(false)
  softCloseEnabled               Boolean?  @default(false)
  softCloseMinutes               Int?
  estimatedRevenue               Float?
  achievedRevenue                Float?    @default(0)
  totalHabilitatedUsers          Int?      @default(0)
  isFeaturedOnMarketplace        Boolean?  @default(false)
  marketplaceAnnouncementTitle   String?
  gatilhosMentais                String? // Comma-separated mental triggers
  
  categoria                      CategoriaLote         @relation(fields: [categoriaId], references: [id])
  leiloeiro                      Leiloeiro             @relation(fields: [leiloeiroId], references: [id])
  vendedor                       Vendedor?             @relation(fields: [sellerId], references: [id])
  processoJudicial               ProcessoJudicial?     @relation(fields: [judicialProcessId], references: [id])
  imagemCapa                     MediaItem?            @relation("LeilaoImagemCapa", fields: [imageMediaId], references: [id], onDelete: SetNull)

  lotes                          Lote[]
  lances                         Lance[]

  createdAt                      DateTime  @default(now())
  updatedAt                      DateTime  @updatedAt

  @@index([sellerId])
  @@index([leiloeiroId])
  @@index([status])
  @@map("leiloes")
}


model Lote {
  id                String    @id @default(cuid())
  publicId          String    @unique
  title             String
  number            String?
  description       String?
  price             Float     @default(0)
  initialPrice      Float?
  secondInitialPrice Float?
  bidIncrementStep  Float?
  status            String    
  
  auctionId         String
  categoryId        String
  subcategoryId     String?
  sellerId          String? // Denormalized for non-judicial lots
  stateId           String?
  cityId            String?

  imageUrl          String?
  imageMediaId      String?
  winningBidTermUrl String?
  
  dataAiHint        String?
  views             Int?      @default(0)
  bidsCount         Int?      @default(0)
  isFeatured        Boolean?  @default(false)
  isExclusive       Boolean?  @default(false)
  discountPercentage Float?
  additionalTriggers Json?     // Store array of strings as JSON
  
  latitude          Float?
  longitude         Float?
  mapAddress        String?
  mapEmbedUrl       String?
  mapStaticImageUrl String?

  judicialProcessNumber   String?
  courtDistrict           String?
  courtName               String?
  publicProcessUrl        String?
  propertyRegistrationNumber String?
  propertyLiens           String?
  knownDebts              String?
  additionalDocumentsInfo String?

  reservePrice      Float?
  evaluationValue   Float?
  debtAmount        Float?
  itbiValue         Float?
  
  endDate           DateTime?
  auctionDate       DateTime?
  secondAuctionDate DateTime?
  condition         String?
  
  leilao           Leilao            @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  categoria        CategoriaLote     @relation(fields: [categoryId], references: [id])
  subcategoria     Subcategoria?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  vendedor         Vendedor?         @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  estado           Estado?           @relation(fields: [stateId], references: [id], onDelete: SetNull)
  cidade           Cidade?           @relation(fields: [cityId], references: [id], onDelete: SetNull)
  imagemPrincipal  MediaItem?        @relation("LoteImagemPrincipal", fields: [imageMediaId], references: [id], onDelete: SetNull)

  bens            Bem[]          @relation("BemParaLote")
  mediaItems      MediaItem[]    @relation("LoteMediaItem")
  lances          Lance[]
  arremates       Arremate[]
  avaliacoes      Avaliacao[]
  perguntas       PerguntaLote[]
  maxBids         UserLotMaxBid[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([auctionId])
  @@index([categoryId])
  @@index([status])
  @@map("lotes")
}

model Bem {
  id                String    @id @default(cuid())
  publicId          String    @unique
  title             String
  description       String?
  status            String    @default("DISPONIVEL") // CADASTRO, DISPONIVEL, LOTEADO, VENDIDO, REMOVIDO, INATIVADO
  
  categoryId        String
  subcategoryId     String?
  judicialProcessId String?
  sellerId          String?

  evaluationValue   Float?
  imageUrl          String?
  imageMediaId      String?
  dataAiHint        String?
  locationCity      String?
  locationState     String?
  address           String?
  latitude          Float?
  longitude         Float?

  // Vehicle specific
  plate             String?
  make              String?
  model             String?
  version           String?
  year              Int?
  modelYear         Int?
  mileage           Int?
  color             String?
  fuelType          String?
  transmissionType  String?
  bodyType          String?
  vin               String?
  renavam           String?
  enginePower       String?
  numberOfDoors     Int?
  vehicleOptions    String?
  detranStatus      String?
  debts             String?
  runningCondition  String?
  bodyCondition     String?
  tiresCondition    String?
  hasKey            Boolean?

  // Real estate specific
  propertyType              String?
  propertyRegistrationNumber String?
  iptuNumber                String?
  isOccupied                Boolean?
  area                      Float?
  totalArea                 Float?
  builtArea                 Float?
  bedrooms                  Int?
  suites                    Int?
  bathrooms                 Int?
  parkingSpaces             Int?
  constructionType          String?
  finishes                  String?
  infrastructure            String?
  condoDetails              String?
  improvements              String?
  topography                String?
  liensAndEncumbrances      String?
  propertyDebts             String?
  unregisteredRecords       String?
  hasHabiteSe               Boolean?
  zoningRestrictions        String?
  amenities                 Json?

  // Electronics specific
  brand                 String?
  serialNumber          String?
  itemCondition         String?
  specifications        String?
  includedAccessories   String?
  batteryCondition      String?
  hasInvoice            Boolean?
  hasWarranty           Boolean?
  repairHistory         String?
  
  // Appliance specific
  applianceType       String?
  applianceCapacity   String?
  voltage             String?
  additionalFunctions String?
  
  // Machinery specific
  hoursUsed           Int?
  engineType          String?
  capacityOrPower     String?
  maintenanceHistory  String?
  installationLocation String?
  compliesWithNR      String?
  operatingLicenses   String?
  
  // Livestock specific
  breed                 String?
  age                   String?
  sex                   Sexo?
  weight                String?
  individualId          String?
  purpose               String?
  vaccinationStatus     String?
  sanitaryCondition     String?
  lineage               String?
  isPregnant            Boolean?
  specialSkills         String?
  gtaDocument           String?
  breedRegistryDocument String?

  // Furniture specific
  furnitureType String?
  material      String?
  style         String?
  dimensions    String?
  pieceCount    Int?

  // Jewelry specific
  jewelryType             String?
  metal                   String?
  gemstones               String?
  totalWeight             String?
  jewelrySize             String?
  authenticityCertificate String?
  
  // Art specific
  workType   String?
  artist     String?
  period     String?
  technique  String?
  provenance String?

  // Boats specific
  boatType         String?
  boatLength       String?
  hullMaterial     String?
  onboardEquipment String?
  
  // Food specific
  productName       String?
  quantity          String?
  packagingType     String?
  expirationDate    DateTime?
  storageConditions String?
  
  // Metals/Stones specific
  preciousMetalType String?
  purity            String?
  
  // Forest specific
  forestGoodsType  String?
  volumeOrQuantity String?
  species          String?
  dofNumber        String?

  categoria        CategoriaLote     @relation(fields: [categoryId], references: [id])
  subcategoria     Subcategoria?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  processoJudicial ProcessoJudicial? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  vendedor         Vendedor?         @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  imagem           MediaItem?        @relation(fields: [imageMediaId], references: [id], onDelete: SetNull)

  lotes            Lote[]            @relation("BemParaLote")
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([judicialProcessId])
  @@index([sellerId])
  @@map("bens")
}


model Vendedor {
  id                         String    @id @default(cuid())
  publicId                   String    @unique
  name                       String
  slug                       String    @unique
  isJudicial                 Boolean   @default(false)
  judicialBranchId           String?   @unique // A seller can only be linked to one judicial branch
  contactName                String?
  email                      String?   @unique
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  logoUrl                    String?
  logoMediaId                String?
  dataAiHintLogo             String?
  description                String?
  memberSince                DateTime?
  rating                     Float?
  activeLotsCount            Int?      @default(0)
  totalSalesValue            Float?    @default(0)
  auctionsFacilitatedCount   Int?      @default(0)
  userId                     String?   @unique

  usuario                    Usuario?
  judicialBranch             JudicialBranch? @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)

  leiloes                    Leilao[]
  lotes                      Lote[]
  bens                       Bem[]
  processosJudiciais         ProcessoJudicial[]
  vendasDiretas              VendaDireta[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("vendedores")
}

model Leiloeiro {
  id                   String    @id @default(cuid())
  publicId             String    @unique
  name                 String
  slug                 String    @unique
  registrationNumber   String?
  contactName          String?
  email                String?   @unique
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?
  memberSince          DateTime?
  rating               Float?
  auctionsConductedCount Int?      @default(0)
  totalValueSold       Float?    @default(0)
  userId               String?   @unique

  usuario              Usuario?
  leiloes              Leilao[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
  @@map("leiloeiros")
}


model CategoriaLote {
  id                  String         @id @default(cuid())
  name                String         @unique
  slug                String         @unique
  description         String?
  itemCount           Int?           @default(0)
  hasSubcategories    Boolean?       @default(false)
  logoUrl             String?
  logoMediaId         String?
  coverImageUrl       String?
  coverImageMediaId   String?
  megaMenuImageUrl    String?
  megaMenuImageMediaId String?
  dataAiHintLogo      String?
  dataAiHintCover     String?
  dataAiHintMegaMenu  String?
  
  leiloes             Leilao[]
  lotes               Lote[]
  bens                Bem[]
  subcategorias       Subcategoria[]
  vendasDiretas       VendaDireta[]
  postsBlog           PostBlog[]     @relation("BlogCategory")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categorias_lote")
}

model Subcategoria {
  id                String  @id @default(cuid())
  name              String
  slug              String  @unique
  description       String?
  parentCategoryId  String
  itemCount         Int?    @default(0)
  displayOrder      Int     @default(0)

  iconUrl           String?
  iconMediaId       String?
  dataAiHintIcon    String?

  categoriaPai CategoriaLote @relation(fields: [parentCategoryId], references: [id])
  lotes        Lote[]
  bens         Bem[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([parentCategoryId])
  @@map("subcategorias")
}

model ProcessoJudicial {
  id              String   @id @default(cuid())
  publicId        String   @unique
  processNumber   String   @unique
  isElectronic    Boolean  @default(true)
  courtId         String?
  districtId      String?
  branchId        String?
  sellerId        String?

  tribunal        Tribunal? @relation(fields: [courtId], references: [id])
  comarca         Comarca?  @relation(fields: [districtId], references: [id])
  vara            Vara?     @relation(fields: [branchId], references: [id])
  vendedor        Vendedor? @relation(fields: [sellerId], references: [id])
  
  bens            Bem[]
  leiloes         Leilao[]
  partes          ParteProcesso[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
  @@map("processos_judiciais")
}

model ParteProcesso {
  id            String  @id @default(cuid())
  processoJudicialId String
  name          String
  documentNumber String?
  partyType     String // AUTOR, REU, ADVOGADO, etc.

  processoJudicial ProcessoJudicial @relation(fields: [processoJudicialId], references: [id], onDelete: Cascade)
  
  @@unique([processoJudicialId, name, partyType])
  @@map("partes_processo")
}

model Tribunal {
  id       String   @id @default(cuid())
  name     String   @unique
  slug     String   @unique
  stateUf  String
  website  String?
  
  comarcas Comarca[]
  processos ProcessoJudicial[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tribunais")
}

model Comarca {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  courtId     String
  stateId     String
  zipCode     String?
  
  tribunal    Tribunal    @relation(fields: [courtId], references: [id])
  estado      Estado      @relation(fields: [stateId], references: [id])
  varas       Vara[]
  processos   ProcessoJudicial[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([courtId])
  @@index([stateId])
  @@map("comarcas")
}

model Vara {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  districtId  String
  contactName String?
  phone       String?
  email       String?
  
  comarca     Comarca            @relation(fields: [districtId], references: [id])
  processos   ProcessoJudicial[]
  vendedores  Vendedor[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([districtId])
  @@map("varas")
}

model Lance {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())
  
  lote          Lote     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  leilao        Leilao   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  licitante     Usuario  @relation(fields: [bidderId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([bidderId])
  @@map("lances")
}

model Arremate {
  id               String   @id @default(cuid())
  lotId            String   @unique
  userId           String
  winningBidAmount Float
  winDate          DateTime @default(now())
  paymentStatus    String   @default("PENDENTE") // PENDENTE, PROCESSANDO, PAGO, FALHOU, REEMBOLSADO
  invoiceUrl       String?

  lote    Lote    @relation(fields: [lotId], references: [id])
  usuario Usuario @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@map("arremates")
}

model UserLotMaxBid {
  userId     String
  lotId      String
  maxAmount  Float
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  usuario    Usuario @relation(fields: [userId], references: [id], onDelete: Cascade)
  lote       Lote    @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@id([userId, lotId])
  @@map("lances_maximos_usuario")
}

model VendaDireta {
  id                     String    @id @default(cuid())
  publicId               String    @unique
  title                  String
  description            String
  offerType              String    // BUY_NOW, ACCEPTS_PROPOSALS
  status                 String    @default("ACTIVE") // ACTIVE, SOLD, EXPIRED, PENDING_APPROVAL
  price                  Float?    // For BUY_NOW
  minimumOfferPrice      Float?    // For ACCEPTS_PROPOSALS
  locationCity           String?
  locationState          String?
  imageUrl               String?
  imageMediaId           String?
  dataAiHint             String?
  expiresAt              DateTime?
  
  categoriaId            String
  vendedorId             String
  
  categoria              CategoriaLote @relation(fields: [categoriaId], references: [id])
  vendedor               Vendedor      @relation(fields: [vendedorId], references: [id])
  imagemPrincipal        MediaItem?    @relation("VendaDiretaImagemPrincipal", fields: [imageMediaId], references: [id], onDelete: SetNull)
  
  galleryImageUrls       Json?
  itemsIncluded          Json?
  tags                   Json?
  proposalsCount         Int?      @default(0)
  views                  Int?      @default(0)
  
  latitude               Float?
  longitude              Float?
  mapAddress             String?
  mapEmbedUrl            String?
  mapStaticImageUrl      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([vendedorId])
  @@map("vendas_diretas")
}

model MediaItem {
  id                   String     @id @default(cuid())
  fileName             String
  storagePath          String     @unique
  title                String?
  altText              String?
  caption              String?
  description          String?
  mimeType             String
  sizeBytes            Int
  uploadedBy           String
  
  urlOriginal          String
  urlThumbnail         String?
  urlMedium            String?
  urlLarge             String?
  
  dataAiHint           String?
  
  leiloes              Leilao[]   @relation("LeilaoImagemCapa")
  lotes                Lote[]     @relation("LoteImagemPrincipal")
  lotesGaleria         Lote[]     @relation("LoteMediaItem")
  bens                 Bem[]
  vendasDiretas        VendaDireta[] @relation("VendaDiretaImagemPrincipal")

  uploadedAt           DateTime   @default(now())

  @@map("media_items")
}

model PostBlog {
  id                 String   @id @default(cuid())
  title              String
  slug               String   @unique
  content            String
  excerpt            String?
  imageUrl           String?
  imageMediaId       String?
  status             String   @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  authorId           String
  
  author             Usuario       @relation(fields: [authorId], references: [id])
  categoria          CategoriaLote @relation("BlogCategory", fields: [categoryId], references: [id])
  categoryId         String
  
  tags               String? // Comma-separated
  views              Int      @default(0)
  publishedAt        DateTime?

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  @@index([authorId])
  @@index([categoryId])
  @@map("blog_posts")
}

model Notificacao {
  id        String   @id @default(cuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  link      String?

  usuario   Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  
  @@index([userId])
  @@map("notificacoes")
}

model Contato {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("contatos")
}

model Avaliacao {
  id                String   @id @default(cuid())
  lotId             String
  auctionId         String
  userId            String
  userDisplayName   String
  rating            Int      @db.SmallInt
  comment           String
  
  lote              Lote     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  usuario           Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([lotId])
  @@index([userId])
  @@map("avaliacoes")
}

model PerguntaLote {
  id                      String   @id @default(cuid())
  lotId                   String
  auctionId               String
  userId                  String
  userDisplayName         String
  questionText            String
  answerText              String?
  answeredAt              DateTime?
  answeredByUserId        String?
  answeredByUserDisplayName String?
  isPublic                Boolean @default(true)
  
  lote    Lote    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  usuario Usuario @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([lotId])
  @@map("perguntas_lote")
}

model PlatformSettings {
  id                    String    @id @default("global")
  siteTitle             String
  siteTagline           String?
  galleryImageBasePath  String?
  storageProvider       String?   @default("local") // local or firebase
  firebaseStorageBucket String?
  activeThemeName       String?
  themes                Json?
  platformPublicIdMasks Json?
  homepageSections      Json?
  mentalTriggerSettings Json?
  sectionBadgeVisibility Json?
  mapSettings           Json?
  biddingSettings       Json?
  searchPaginationType  String?   @default("loadMore") // loadMore or numberedPages
  searchItemsPerPage    Int?      @default(12)
  searchLoadMoreCount   Int?      @default(12)
  showCountdownOnLotDetail Boolean? @default(true)
  showCountdownOnCards  Boolean?  @default(true)
  showRelatedLotsOnLotDetail Boolean? @default(true)
  relatedLotsCount      Int?      @default(5)
  variableIncrementTable Json?
  defaultListItemsPerPage Int?      @default(10)

  updatedAt DateTime @updatedAt

  @@map("configuracoes_plataforma")
}


model Estado {
  id         String   @id @default(cuid())
  name       String   @unique
  uf         String   @unique
  slug       String   @unique
  
  cidades    Cidade[]
  lotes      Lote[]
  comarcas   Comarca[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@map("estados")
}

model Cidade {
  id       String @id @default(cuid())
  name     String
  slug     String @unique
  stateId  String
  stateUf  String
  ibgeCode String?
  
  estado   Estado @relation(fields: [stateId], references: [id])
  lotes    Lote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([stateId])
  @@map("cidades")
}

enum Sexo {
  MACHO
  FEMEA
}