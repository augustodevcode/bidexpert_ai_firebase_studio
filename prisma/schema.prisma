// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// =================================================================
// ENUMS
// =================================================================

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

// =================================================================
// MODELS
// =================================================================

model PlatformSettings {
  id                               String    @id @default("global")
  siteTitle                        String?   @db.VarChar(100)
  siteTagline                      String?   @db.VarChar(200)
  logoUrl                          String?   @db.VarChar(255)
  faviconUrl                       String?   @db.VarChar(255)
  galleryImageBasePath             String?   @db.VarChar(200)
  storageProvider                  String?   @db.VarChar(50)
  firebaseStorageBucket            String?   @db.VarChar(200)
  activeThemeName                  String?   @db.VarChar(100)
  themes                           Json?
  platformPublicIdMasks            Json?
  homepageSections                 Json?
  mentalTriggerSettings            Json?
  sectionBadgeVisibility           Json?
  mapSettings                      Json?
  searchPaginationType             String?   @db.VarChar(50)
  searchItemsPerPage               Int?
  searchLoadMoreCount              Int?
  showCountdownOnLotDetail         Boolean?
  showCountdownOnCards             Boolean?
  showRelatedLotsOnLotDetail       Boolean?
  relatedLotsCount                 Int?
  defaultUrgencyTimerHours         Int?
  variableIncrementTable           Json?
  biddingSettings                  Json?
  paymentGatewaySettings           Json?
  defaultListItemsPerPage          Int?
  updatedAt                        DateTime? @updatedAt
}

model State {
  id              String             @id @default(uuid())
  name            String             @db.VarChar(100)
  uf              String             @unique @db.VarChar(2)
  slug            String             @unique @db.VarChar(100)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  cities          City[]
  courts          Court[]
  judicialDistricts JudicialDistrict[]
  auctions        Auction[]
  lots            Lot[]
}

model City {
  id        String    @id @default(uuid())
  name      String    @db.VarChar(150)
  slug      String    @db.VarChar(150)
  stateId   String
  state     State     @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateUf   String?   @db.VarChar(2)
  ibgeCode  String?   @unique @db.VarChar(10)
  lotCount  Int?      @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lots      Lot[]
  auctions  Auction[]
}

model Role {
  id             String         @id @default(uuid())
  name           String         @unique @db.VarChar(50)
  nameNormalized String         @unique @db.VarChar(50)
  description    String?        @db.Text
  permissions    Json?
  users          UsersOnRoles[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model User {
  id                   String                @id @default(uuid())
  email                String                @unique @db.VarChar(150)
  password             String?
  fullName             String?               @db.VarChar(150)
  roles                UsersOnRoles[]
  sellerId             String?               @unique
  seller               Seller?
  habilitationStatus   UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType          AccountType           @default(PHYSICAL)
  avatarUrl            String?
  dataAiHint           String?
  badges               Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  cpf                  String?
  dateOfBirth          DateTime?
  cellPhone            String?
  homePhone            String?
  rgNumber             String?
  rgIssuer             String?
  rgIssueDate          DateTime?
  rgState              String?
  gender               String?
  profession           String?
  nationality          String?
  maritalStatus        String?
  propertyRegime       String?
  spouseName           String?
  spouseCpf            String?
  zipCode              String?
  street               String?
  number               String?
  complement           String?
  neighborhood         String?
  city                 String?
  state                String?
  optInMarketing       Boolean?              @default(false)
  razaoSocial          String?
  cnpj                 String?
  inscricaoEstadual    String?
  website              String?
  responsibleName      String?
  responsibleCpf       String?
  documents            UserDocument[]
  bids                 Bid[]
  wins                 UserWin[]
  maxBids              UserLotMaxBid[]
  notifications        Notification[]
  mediaItems           MediaItem[]
  habilitations        AuctionHabilitation[]
}


model DocumentType {
  id          String         @id @default(uuid())
  name        String         @unique @db.VarChar(150)
  description String?        @db.Text
  isRequired  Boolean        @default(true)
  appliesTo   String         @default("ALL") // e.g., "ALL,PHYSICAL,LEGAL,PROCESS"
  userDocs    UserDocument[]
}

model UserDocument {
  id              String             @id @default(uuid())
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  documentType    DocumentType       @relation(fields: [documentTypeId], references: [id])
  documentTypeId  String
  status          UserDocumentStatus @default(PENDING_ANALYSIS)
  fileUrl         String
  fileName        String?
  rejectionReason String?            @db.Text
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@unique([userId, documentTypeId])
}

model Court {
  id                String             @id @default(uuid())
  name              String             @unique @db.VarChar(150)
  slug              String             @unique @db.VarChar(150)
  stateUf           String?            @db.VarChar(2)
  website           String?            @db.VarChar(255)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  stateId           String?
  state             State?             @relation(fields: [stateId], references: [id], onDelete: SetNull)
}

model JudicialDistrict {
  id                String             @id @default(uuid())
  name              String             @unique @db.VarChar(150)
  slug              String             @unique @db.VarChar(150)
  courtId           String?
  court             Court?             @relation(fields: [courtId], references: [id])
  stateId           String?
  zipCode           String?            @db.VarChar(10)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  state             State?             @relation(fields: [stateId], references: [id])
}

model JudicialBranch {
  id                String             @id @default(uuid())
  name              String             @unique @db.VarChar(150)
  slug              String             @unique @db.VarChar(150)
  districtId        String?
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  contactName       String?            @db.VarChar(150)
  phone             String?            @db.VarChar(20)
  email             String?            @db.VarChar(150)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  sellers           Seller[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model LotCategory {
  id                   String              @id @default(uuid())
  name                 String              @unique @db.VarChar(100)
  slug                 String              @unique @db.VarChar(100)
  description          String?             @db.Text
  hasSubcategories     Boolean?
  logoUrl              String?             @db.VarChar(255)
  logoMediaId          String?             @db.VarChar(100)
  dataAiHintIcon       String?             @db.VarChar(100)
  coverImageUrl        String?             @db.VarChar(255)
  coverImageMediaId    String?             @db.VarChar(100)
  dataAiHintCover      String?             @db.VarChar(100)
  megaMenuImageUrl     String?             @db.VarChar(255)
  megaMenuImageMediaId String?             @db.VarChar(100)
  dataAiHintMegaMenu   String?             @db.VarChar(100)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  lots                 Lot[]
  bens                 Bem[]
  subcategories        Subcategory[]
  auctions             Auction[]
  directSaleOffers     DirectSaleOffer[]
  iconName             String?
}

model Subcategory {
  id               String       @id @default(uuid())
  name             String       @db.VarChar(100)
  slug             String       @unique @db.VarChar(100)
  parentCategory   LotCategory  @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  parentCategoryId String
  description      String?      @db.Text
  displayOrder     Int          @default(0)
  iconUrl          String?      @db.VarChar(255)
  iconMediaId      String?      @db.VarChar(100)
  dataAiHintIcon   String?      @db.VarChar(100)
  lots             Lot[]
  bens             Bem[]

  @@unique([parentCategoryId, name])
  @@unique([parentCategoryId, slug])
}


model Seller {
  id                       String               @id @default(uuid())
  publicId                 String?              @unique @db.VarChar(100)
  slug                     String?              @unique @db.VarChar(150)
  name                     String               @unique @db.VarChar(150)
  contactName              String?              @db.VarChar(150)
  email                    String?              @db.VarChar(150)
  phone                    String?              @db.VarChar(20)
  address                  String?              @db.VarChar(200)
  city                     String?              @db.VarChar(100)
  state                    String?              @db.VarChar(50)
  zipCode                  String?              @db.VarChar(10)
  website                  String?              @db.VarChar(255)
  logoUrl                  String?              @db.VarChar(255)
  logoMediaId              String?              @db.VarChar(100)
  dataAiHintLogo           String?              @db.VarChar(100)
  description              String?              @db.Text
  user                     User?                @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId                   String?              @unique
  isJudicial               Boolean              @default(false)
  judicialBranchId         String?              @unique
  judicialBranch           JudicialBranch?      @relation(fields: [judicialBranchId], references: [id])
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  auctions                 Auction[]
  lots                     Lot[]
  bens                     Bem[]
  directSaleOffers         DirectSaleOffer[]
}

model Auctioneer {
  id                 String    @id @default(uuid())
  publicId           String?   @unique @db.VarChar(100)
  slug               String?   @unique @db.VarChar(150)
  name               String    @db.VarChar(150)
  registrationNumber String?   @db.VarChar(50)
  contactName        String?   @db.VarChar(150)
  email              String?   @db.VarChar(150)
  phone              String?   @db.VarChar(20)
  address            String?   @db.VarChar(200)
  city               String?   @db.VarChar(100)
  state              String?   @db.VarChar(50)
  zipCode            String?   @db.VarChar(10)
  website            String?   @db.VarChar(255)
  logoUrl            String?   @db.VarChar(255)
  logoMediaId        String?   @db.VarChar(100)
  dataAiHintLogo     String?   @db.VarChar(100)
  description        String?   @db.Text
  userId             String?   @unique
  user               User?     @relation(fields: [userId], references: [id])
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  auctions           Auction[]
  lots               Lot[]
}

model DirectSaleOffer {
  id                   String                @id @default(uuid())
  publicId             String?               @unique @db.VarChar(100)
  title                String                @db.VarChar(255)
  description          String?               @db.Text
  offerType            DirectSaleOfferType
  price                Decimal?              @db.Decimal(15, 2)
  minimumOfferPrice    Decimal?              @db.Decimal(15, 2)
  status               DirectSaleOfferStatus @default(ACTIVE)
  category             LotCategory           @relation(fields: [categoryId], references: [id])
  categoryId           String
  seller               Seller                @relation(fields: [sellerId], references: [id])
  sellerId             String
  sellerName           String?               @db.VarChar(150)
  sellerLogoUrl        String?               @db.VarChar(255)
  dataAiHintSellerLogo String?               @db.VarChar(100)
  locationCity         String?               @db.VarChar(100)
  locationState        String?               @db.VarChar(100)
  imageUrl             String?               @db.VarChar(255)
  imageMediaId         String?               @db.VarChar(100)
  dataAiHint           String?               @db.VarChar(100)
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int?                  @default(0)
  expiresAt            DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model JudicialProcess {
  id                  String             @id @default(uuid())
  publicId            String?            @unique @db.VarChar(100)
  processNumber       String             @unique @db.VarChar(100)
  isElectronic        Boolean            @default(true)
  courtId             String?
  court               Court?             @relation(fields: [courtId], references: [id])
  districtId          String?
  district            JudicialDistrict?  @relation(fields: [districtId], references: [id])
  branchId            String?
  branch              JudicialBranch?    @relation(fields: [branchId], references: [id])
  sellerId            String?
  seller              Seller?            @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties             JudicialParty[]
  bens                Bem[]
  auctions            Auction[]
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model JudicialParty {
  id             String          @id @default(uuid())
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId      String
  name           String          @db.VarChar(255)
  documentNumber String?         @db.VarChar(50)
  partyType      ProcessPartyType
}

model AuctionStage {
  id              String                   @id @default(uuid())
  auction         Auction                  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId       String
  name            String
  startDate       DateTime
  endDate         DateTime
  lots            LotAuctionStageDetails[]
  initialPrice    Decimal?                 @db.Decimal(15, 2)
  statusText      String?
}

model LotAuctionStageDetails {
  id              String       @id @default(uuid())
  lot             Lot          @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId           String
  auctionStage    AuctionStage @relation(fields: [auctionStageId], references: [id], onDelete: Cascade)
  auctionStageId  String
  initialBid      Decimal      @db.Decimal(15, 2)
  bidIncrement    Decimal?     @db.Decimal(10, 2)
  /// Valor de avaliação específico para esta praça
  evaluationValue Decimal?     @db.Decimal(15, 2)
  reservePrice    Decimal?     @db.Decimal(15, 2)

  @@unique([lotId, auctionStageId])
}

model Auction {
  id                               String                @id @default(uuid())
  publicId                         String?               @unique @db.VarChar(100)
  slug                             String?               @unique @db.VarChar(255)
  title                            String                @db.VarChar(255)
  description                      String?               @db.Text
  status                           AuctionStatus         @default(RASCUNHO)
  auctionDate                      DateTime              @default(now())
  endDate                          DateTime?
  totalLots                        Int?                  @default(0)
  visits                           Int?                  @default(0)
  initialOffer                     Decimal?              @db.Decimal(15, 2)
  isFavorite                       Boolean?              @default(false)
  dataAiHint                       String?               @db.VarChar(100)
  seller                           Seller?               @relation(fields: [sellerId], references: [id])
  sellerId                         String?
  auctioneer                       Auctioneer?           @relation(fields: [auctioneerId], references: [id])
  auctioneerId                     String?
  category                         LotCategory?          @relation(fields: [categoryId], references: [id])
  categoryId                       String?
  branch                           JudicialBranch?       @relation(fields: [branchId], references: [id])
  branchId                         String?
  district                         JudicialDistrict?     @relation(fields: [districtId], references: [id])
  districtId                       String?
  court                            Court?                @relation(fields: [courtId], references: [id])
  courtId                          String?
  city                             City?                 @relation(fields: [cityId], references: [id], onDelete: SetNull)
  cityId                           String?
  state                            State?                @relation(fields: [stateId], references: [id], onDelete: SetNull)
  stateId                          String?
  judicialProcess                  JudicialProcess?      @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId                String?
  documentsUrl                     String?               @db.VarChar(255)
  lots                             Lot[]
  auctionStages                    AuctionStage[]
  bids                             Bid[]
  habilitations                    AuctionHabilitation[]
  
  // Settings
  auctionType                      AuctionType?
  auctionMethod                    AuctionMethod?
  participation                    AuctionParticipation?
  // Location fields for presencial/hibrido
  address                          String?               @db.VarChar(255)
  zipCode                          String?               @db.VarChar(10)
  onlineUrl                        String?               @db.VarChar(255)
  
  // Features
  evaluationReportUrl              String?               @db.VarChar(255)
  auctionCertificateUrl            String?               @db.VarChar(255)
  sellingBranch                    String?               @db.VarChar(100)
  automaticBiddingEnabled          Boolean               @default(false)
  silentBiddingEnabled             Boolean               @default(false)
  allowMultipleBidsPerUser         Boolean               @default(true)
  allowInstallmentBids             Boolean               @default(true)
  softCloseEnabled                 Boolean               @default(false)
  softCloseMinutes                 Int                   @default(2)
  estimatedRevenue                 Decimal?              @db.Decimal(15, 2)
  achievedRevenue                  Decimal?              @db.Decimal(15, 2)
  totalHabilitatedUsers            Int?                  @default(0)
  isFeaturedOnMarketplace          Boolean               @default(false)
  marketplaceAnnouncementTitle     String?               @db.VarChar(150)
  additionalTriggers               Json?
  decrementAmount                  Decimal?              @db.Decimal(15, 2)
  decrementIntervalSeconds         Int?
  floorPrice                       Decimal?              @db.Decimal(15, 2)
  autoRelistSettings               Json?
  createdAt                        DateTime              @default(now())
  updatedAt                        DateTime              @updatedAt
}

model Lot {
  id                   String        @id @default(uuid())
  publicId             String?       @unique @db.VarChar(100)
  auction              Auction       @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId            String
  slug                 String?       @db.VarChar(255)
  number               String?       @db.VarChar(20)
  title                String        @db.VarChar(255)
  description          String?       @db.Text
  price                Decimal       @db.Decimal(15, 2)
  status               LotStatus     @default(EM_BREVE)
  bidsCount            Int?          @default(0)
  views                Int?          @default(0)
  isFeatured           Boolean?      @default(false)
  isExclusive          Boolean?      @default(false)
  discountPercentage   Int?
  additionalTriggers   Json?
  imageUrl             String?
  imageMediaId         String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  /// ID do Bem de onde as mídias são herdadas
  inheritedMediaFromBemId String?    
  type                 String
  category             LotCategory?  @relation(fields: [categoryId], references: [id])
  categoryId           String?
  subcategory          Subcategory?  @relation(fields: [subcategoryId], references: [id])
  subcategoryId        String?
  auctionName          String?
  seller               Seller?       @relation(fields: [sellerId], references: [id])
  sellerId             String?
  sellerName           String?
  auctioneer           Auctioneer?   @relation(fields: [auctioneerId], references: [id])
  auctioneerId         String?
  city                 City?         @relation(fields: [cityId], references: [id])
  cityId               String?
  state                State?        @relation(fields: [stateId], references: [id])
  stateId              String?
  cityName             String?
  stateUf              String?
  latitude             Decimal?      @db.Decimal(10, 8)
  longitude            Decimal?      @db.Decimal(11, 8)
  mapAddress           String?       @db.VarChar(255)
  mapEmbedUrl          String?       @db.VarChar(500)
  mapStaticImageUrl    String?       @db.VarChar(255)
  endDate              DateTime?
  auctionDate          DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate    DateTime?
  condition            String?
  dataAiHint           String?
  winner               User?         @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId             String?
  winningBidTermUrl    String?
  allowInstallmentBids Boolean?      @default(false)
  bens                 LotBens[]
  bids                 Bid[]
  userWins             UserWin?
  maxBids              UserLotMaxBid[]
  stageDetails         LotAuctionStageDetails[]
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  @@index([auctionId])
}

model LotBens {
  lot       Lot      @relation(fields: [lotId], references: [id])
  lotId     String
  bem       Bem      @relation(fields: [bemId], references: [id])
  bemId     String
  
  @@id([lotId, bemId])
}

model UserWin {
  id               String        @id @default(uuid())
  lot              Lot           @relation(fields: [lotId], references: [id])
  lotId            String        @unique
  user             User          @relation("UserWins", fields: [userId], references: [id])
  userId           String
  winningBidAmount Decimal       @db.Decimal(15, 2)
  winDate          DateTime      @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?
}

model Bid {
  id            String   @id @default(uuid())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId      String
  bidderDisplay String?  @db.VarChar(150)
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())

  @@index([lotId])
  @@index([bidderId])
}

model MediaItem {
  id                   String           @id @default(uuid())
  fileName             String           @unique
  storagePath          String
  title                String
  altText              String?
  caption              String?          @db.Text
  description          String?          @db.Text
  mimeType             String
  sizeBytes            Int?
  urlOriginal          String
  urlThumbnail         String?
  urlMedium            String?
  urlLarge             String?
  dataAiHint           String?
  uploadedByUser       User             @relation(fields: [uploadedByUserId], references: [id])
  uploadedByUserId     String
  judicialProcess      JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId    String?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
}


model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String   @db.Text
  link      String?  @db.VarChar(255)
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model AuctionHabilitation {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId String
  createdAt DateTime @default(now())

  @@unique([userId, auctionId])
}


model DocumentTemplate {
  id      String               @id @default(uuid())
  name    String               @unique @db.VarChar(150)
  type    DocumentTemplateType
  content String?              @db.Text
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model VehicleMake {
  id      String         @id @default(uuid())
  name    String         @unique @db.VarChar(100)
  slug    String         @unique @db.VarChar(100)
  models  VehicleModel[]
}

model VehicleModel {
  id     String      @id @default(uuid())
  name   String      @db.VarChar(100)
  slug   String      @db.VarChar(100)
  make   VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)
  makeId String

  @@unique([makeId, name])
}
