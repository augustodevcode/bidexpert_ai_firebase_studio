// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// ENUMS
// =================================================================

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}


// =================================================================
// MODELS
// =================================================================

model User {
  id                  String   @id @default(uuid())
  email               String   @unique
  password            String?
  fullName            String?
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType          @default(PHYSICAL)
  avatarUrl           String?
  dataAiHint          String?
  cpf                 String?
  cellPhone           String?
  homePhone           String?
  dateOfBirth         DateTime?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  optInMarketing      Boolean?             @default(false)
  razaoSocial         String?
  cnpj                String?
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  badges              Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  roles               UsersOnRoles[]
  uploadedMedia       MediaItem[]
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  maxBids             UserLotMaxBid[]
  notifications       Notification[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  habilitations      AuctionHabilitation[]
  wonLots             Lot[]                 @relation("LotWinner")
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}


model Role {
  id              String         @id @default(uuid())
  name            String
  nameNormalized  String         @unique
  description     String?
  permissions     String[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  users           UsersOnRoles[]
}

model LotCategory {
  id                   String            @id @default(uuid())
  name                 String
  slug                 String            @unique
  description          String?           @db.VarChar(500)
  hasSubcategories     Boolean?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  subcategories        Subcategory[]
  lots                 Lot[]
  bens                 Bem[]
  auctions             Auction[]
  directSaleOffers     DirectSaleOffer[]
}

model Subcategory {
  id                String       @id @default(uuid())
  name              String
  slug              String?      @unique
  parentCategoryId  String
  parentCategory    LotCategory  @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  description       String?      @db.VarChar(500)
  displayOrder      Int          @default(0)
  iconUrl           String?
  iconMediaId       String?
  dataAiHintIcon    String?
  lots              Lot[]
  bens              Bem[]
}

model State {
  id        String             @id @default(uuid())
  name      String
  uf        String             @unique
  slug      String?            @unique
  cityCount Int                @default(0)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  cities    City[]
  districts JudicialDistrict[]
  auctions  Auction[]
  lots      Lot[]
}

model City {
  id        String    @id @default(uuid())
  name      String
  slug      String?
  stateId   String
  state     State     @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateUf   String?
  ibgeCode  String?   @unique
  lotCount  Int       @default(0)
  latitude  Float?
  longitude Float?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  auctions  Auction[]
  lots      Lot[]
}

model Court {
  id                String             @id @default(uuid())
  name              String
  slug              String?            @unique
  stateUf           String?
  website           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialDistrict {
  id                String             @id @default(uuid())
  name              String
  slug              String?            @unique
  courtId           String?
  court             Court?             @relation(fields: [courtId], references: [id])
  stateId           String
  state             State              @relation(fields: [stateId], references: [id])
  zipCode           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialBranch {
  id                String            @id @default(uuid())
  name              String
  slug              String?           @unique
  districtId        String
  district          JudicialDistrict  @relation(fields: [districtId], references: [id])
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  sellers           Seller[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialProcess {
  id            String          @id @default(uuid())
  publicId      String          @unique
  processNumber String
  isElectronic  Boolean         @default(true)
  courtId       String?
  court         Court?          @relation(fields: [courtId], references: [id])
  districtId    String?
  district      JudicialDistrict? @relation(fields: [districtId], references: [id])
  branchId      String?
  branch        JudicialBranch? @relation(fields: [branchId], references: [id])
  sellerId      String?
  seller        Seller?         @relation(fields: [sellerId], references: [id])
  parties       JudicialParty[]
  bens          Bem[]
  auctions      Auction[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model JudicialParty {
  id             String          @id @default(uuid())
  processId      String
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  name           String
  documentNumber String?
  partyType      ProcessPartyType
}

model Seller {
  id                String            @id @default(uuid())
  publicId          String?           @unique
  slug              String?           @unique
  name              String            @unique
  contactName       String?
  email             String?
  phone             String?
  address           String?
  city              String?
  state             String?
  zipCode           String?
  website           String?
  logoUrl           String?
  logoMediaId       String?
  dataAiHintLogo    String?
  description       String?           @db.Text
  userId            String?           @unique
  user              User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  isJudicial        Boolean           @default(false)
  judicialBranchId  String?
  judicialBranch    JudicialBranch?   @relation(fields: [judicialBranchId], references: [id])
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  auctions          Auction[]
  lots              Lot[]
  bens              Bem[]
  directSaleOffers  DirectSaleOffer[]
  judicialProcesses JudicialProcess[]
}

model Auctioneer {
  id                   String    @id @default(uuid())
  publicId             String?   @unique
  slug                 String?   @unique
  name                 String
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?   @db.Text
  userId               String?   @unique
  user                 User?     @relation(fields: [userId], references: [id])
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  auctions             Auction[]
  lots                 Lot[]
}

model AuctionStage {
  id               String    @id @default(uuid())
  auctionId        String
  auction          Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  name             String
  startDate        DateTime
  endDate          DateTime
  evaluationValue  Decimal?  @db.Decimal(15, 2)
  status           String?

  @@index([auctionId])
}

model Auction {
  id                           String              @id @default(uuid())
  publicId                     String?             @unique
  slug                         String?             @unique
  title                        String
  description                  String?             @db.Text
  status                       AuctionStatus?      @default(RASCUNHO)
  auctionDate                  DateTime
  endDate                      DateTime?
  auctioneerId                 String
  auctioneer                   Auctioneer          @relation(fields: [auctioneerId], references: [id])
  sellerId                     String
  seller                       Seller              @relation(fields: [sellerId], references: [id])
  categoryId                   String?
  category                     LotCategory?        @relation(fields: [categoryId], references: [id])
  judicialProcessId            String?
  judicialProcess              JudicialProcess?    @relation(fields: [judicialProcessId], references: [id])
  auctionType                  AuctionType?
  auctionMethod                AuctionMethod?      @default(STANDARD)
  participation                AuctionParticipation? @default(ONLINE)
  imageUrl                     String?
  imageMediaId                 String?
  documentsUrl                 String?
  visits                       Int?                @default(0)
  totalLots                    Int?                @default(0)
  initialOffer                 Decimal?            @db.Decimal(15, 2)
  isFavorite                   Boolean?            @default(false)
  dataAiHint                   String?
  address                      String?
  cityId                       String?
  city                         City?                 @relation(fields: [cityId], references: [id])
  stateId                      String?
  state                        State?                @relation(fields: [stateId], references: [id])
  zipCode                      String?
  latitude                     Float?
  longitude                    Float?
  onlineUrl                    String?
  evaluationReportUrl          String?
  auctionCertificateUrl        String?
  sellingBranch                String?
  automaticBiddingEnabled      Boolean             @default(false)
  silentBiddingEnabled         Boolean             @default(false)
  allowMultipleBidsPerUser     Boolean             @default(true)
  allowInstallmentBids         Boolean             @default(true)
  softCloseEnabled             Boolean             @default(false)
  softCloseMinutes             Int?                @default(2)
  estimatedRevenue             Decimal?            @db.Decimal(15, 2)
  achievedRevenue              Decimal?            @db.Decimal(15, 2)
  totalHabilitatedUsers        Int?                @default(0)
  isFeaturedOnMarketplace      Boolean             @default(false)
  marketplaceAnnouncementTitle String?
  decrementAmount              Decimal?            @db.Decimal(15, 2)
  decrementIntervalSeconds     Int?
  floorPrice                   Decimal?            @db.Decimal(15, 2)
  autoRelistSettings           Json?
  createdAt                    DateTime            @default(now())
  updatedAt                    DateTime            @updatedAt
  courtId                      String?
  districtId                   String?
  branchId                     String?
  lots                         Lot[]
  auctionStages                AuctionStage[]
  habilitations                AuctionHabilitation[]
  court                        Court?              @relation(fields: [courtId], references: [id])
  district                     JudicialDistrict?   @relation(fields: [districtId], references: [id])
  branch                       JudicialBranch?     @relation(fields: [branchId], references: [id])
}

model AuctionHabilitation {
  id        String   @id @default(uuid())
  userId    String
  auctionId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, auctionId])
}

model Lot {
  id                           String          @id @default(uuid())
  publicId                     String?         @unique
  auctionId                    String
  auction                      Auction         @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  slug                         String?
  number                       String?
  title                        String
  description                  String?         @db.Text
  price                        Decimal         @db.Decimal(15, 2)
  initialPrice                 Decimal?        @db.Decimal(15, 2)
  secondInitialPrice           Decimal?        @db.Decimal(15, 2)
  bidIncrementStep             Decimal?        @db.Decimal(10, 2)
  status                       LotStatus       @default(EM_BREVE)
  bidsCount                    Int?            @default(0)
  views                        Int?            @default(0)
  isFeatured                   Boolean?        @default(false)
  isExclusive                  Boolean?        @default(false)
  discountPercentage           Int?
  additionalTriggers           Json?
  imageUrl                     String?
  imageMediaId                 String?
  galleryImageUrls             Json?
  mediaItemIds                 Json?
  type                         String
  categoryId                   String?
  category                     LotCategory?    @relation(fields: [categoryId], references: [id])
  subcategoryId                String?
  subcategory                  Subcategory?    @relation(fields: [subcategoryId], references: [id])
  sellerId                     String?
  seller                       Seller?         @relation(fields: [sellerId], references: [id])
  auctioneerId                 String?
  auctioneer                   Auctioneer?     @relation(fields: [auctioneerId], references: [id])
  cityId                       String?
  city                         City?           @relation(fields: [cityId], references: [id])
  stateId                      String?
  state                        State?          @relation(fields: [stateId], references: [id])
  cityName                     String?
  stateUf                      String?
  latitude                     Float?
  longitude                    Float?
  mapAddress                   String?
  mapEmbedUrl                  String?         @db.VarChar(500)
  mapStaticImageUrl            String?
  endDate                      DateTime?
  auctionDate                  DateTime?
  lotSpecificAuctionDate       DateTime?
  secondAuctionDate            DateTime?
  condition                    String?
  dataAiHint                   String?
  winnerId                     String?
  winner                       User?           @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  winningBidTermUrl            String?
  allowInstallmentBids         Boolean?        @default(false)
  isRelisted                   Boolean         @default(false)
  relistCount                  Int             @default(0)
  originalLotId                String?         @unique // This makes it a one-to-one
  originalLot                  Lot?            @relation("RelistedLot", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot                  Lot?            @relation("RelistedLot")
  evaluationValue              Decimal?        @db.Decimal(15, 2)
  bens                         LotBens[]
  bids                         Bid[]
  userWins                     UserWin[]
  maxBids                      UserLotMaxBid[]
  createdAt                    DateTime        @default(now())
  updatedAt                    DateTime        @updatedAt
  inheritedMediaFromBemId      String?
}

model LotBens {
  lot     Lot    @relation(fields: [lotId], references: [id])
  lotId   String
  bem     Bem    @relation(fields: [bemId], references: [id])
  bemId   String

  @@id([lotId, bemId])
}

model MediaItem {
  id                   String    @id @default(uuid())
  fileName             String    @unique
  storagePath          String
  title                String?
  altText              String?
  caption              String?   @db.VarChar(500)
  description          String?   @db.Text
  mimeType             String
  sizeBytes            Int?
  urlOriginal          String
  urlThumbnail         String?
  urlMedium            String?
  urlLarge             String?
  linkedLotIds         Json?
  dataAiHint           String?
  uploadedByUserId     String?
  uploadedBy           User?     @relation(fields: [uploadedByUserId], references: [id])
  uploadedAt           DateTime  @default(now())
  judicialProcessId    String?   // Campo para vincular ao processo
}

model UserDocument {
  id              String             @id @default(uuid())
  userId          String
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentTypeId  String
  documentType    DocumentType       @relation(fields: [documentTypeId], references: [id])
  status          UserDocumentStatus @default(PENDING_ANALYSIS)
  fileUrl         String
  fileName        String?
  rejectionReason String?            @db.Text
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id            String         @id @default(uuid())
  name          String         @unique
  description   String?
  isRequired    Boolean        @default(true)
  appliesTo     String?
  userDocuments UserDocument[]
}

model Bid {
  id            String   @id @default(uuid())
  lotId         String
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId     String
  bidderId      String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())

  @@index([lotId])
  @@index([bidderId])
}

model UserWin {
  id                String              @id @default(uuid())
  lotId             String              @unique
  lot               Lot                 @relation(fields: [lotId], references: [id])
  userId            String
  user              User                @relation(fields: [userId], references: [id])
  winningBidAmount  Decimal             @db.Decimal(15, 2)
  winDate           DateTime            @default(now())
  paymentStatus     PaymentStatus       @default(PENDENTE)
  invoiceUrl        String?
  installments      InstallmentPayment[]

  @@index([userId])
}

// Model para armazenar os detalhes de pagamento de cada parcela.
model InstallmentPayment {
  id                String        @id @default(uuid())
  userWinId         String
  userWin           UserWin       @relation(fields: [userWinId], references: [id], onDelete: Cascade)
  installmentNumber Int
  amount            Decimal       @db.Decimal(15, 2)
  dueDate           DateTime
  status            PaymentStatus @default(PENDENTE)
  paymentDate       DateTime?
  paymentMethod     String?
  transactionId     String?

  @@index([userWinId])
}

model DirectSaleOffer {
  id                   String              @id @default(uuid())
  publicId             String?             @unique
  title                String
  description          String?             @db.Text
  offerType            DirectSaleOfferType
  price                Decimal?            @db.Decimal(15, 2)
  minimumOfferPrice    Decimal?            @db.Decimal(15, 2)
  status               DirectSaleOfferStatus @default(ACTIVE)
  categoryId           String
  sellerId             String
  sellerName           String?
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int?                @default(0)
  expiresAt            DateTime?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  
  // Relações
  category             LotCategory @relation(fields: [categoryId], references: [id])
  seller               Seller      @relation(fields: [sellerId], references: [id])
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lotId     String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentTemplate {
  id      String               @id @default(uuid())
  name    String
  type    DocumentTemplateType
  content String?              @db.Text
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model PlatformSettings {
  id                           String    @id @default("global")
  siteTitle                    String?   @db.VarChar(100)
  siteTagline                  String?   @db.VarChar(200)
  galleryImageBasePath         String?   @db.VarChar(200)
  storageProvider              String?   @db.VarChar(50)
  firebaseStorageBucket        String?   @db.VarChar(200)
  activeThemeName              String?   @db.VarChar(100)
  themes                       Json?
  platformPublicIdMasks        Json?
  homepageSections             Json?
  mentalTriggerSettings        Json?
  sectionBadgeVisibility       Json?
  mapSettings                  Json?
  searchPaginationType         String?   @db.VarChar(50)
  searchItemsPerPage           Int?
  searchLoadMoreCount          Int?
  showCountdownOnLotDetail     Boolean?
  showCountdownOnCards         Boolean?
  showRelatedLotsOnLotDetail   Boolean?
  relatedLotsCount             Int?
  defaultUrgencyTimerHours     Int?
  variableIncrementTable       Json?
  biddingSettings              Json?
  paymentGatewaySettings       Json?
  defaultListItemsPerPage      Int?
  updatedAt                    DateTime? @updatedAt
}

model Bem {
  id                String  @id @default(uuid())
  publicId          String? @unique
  title             String  @db.VarChar(200)
  description       String? @db.Text
  status            String  @default("DISPONIVEL")
  categoryId        String?
  subcategoryId     String?
  judicialProcessId String?
  sellerId          String?
  evaluationValue   Decimal? @db.Decimal(15, 2)
  imageUrl          String?
  imageMediaId      String?
  galleryImageUrls  Json?
  mediaItemIds      Json?
  dataAiHint        String?
  locationCity      String?
  locationState     String?
  address           String?
  latitude          Float?
  longitude         Float?
  plate             String?
  make              String?
  model             String?
  version           String?
  year              Int?
  modelYear         Int?
  mileage           Int?
  color             String?
  fuelType          String?
  transmissionType  String?
  bodyType          String?
  vin               String?
  renavam           String?
  enginePower       String?
  numberOfDoors     Int?
  vehicleOptions    String?
  detranStatus      String?
  debts             String?
  runningCondition  String?
  bodyCondition     String?
  tiresCondition    String?
  hasKey            Boolean?
  propertyRegistrationNumber String?
  iptuNumber          String?
  isOccupied        Boolean?
  totalArea         Float?
  builtArea         Float?
  bedrooms          Int?
  suites            Int?
  bathrooms         Int?
  parkingSpaces     Int?
  constructionType  String?
  finishes          String?
  infrastructure    String?
  condoDetails      String?
  improvements      String?
  topography        String?
  liensAndEncumbrances String?
  propertyDebts     String?
  unregisteredRecords String?
  hasHabiteSe       Boolean?
  zoningRestrictions String?
  amenities         Json?
  brand             String?
  serialNumber      String?
  itemCondition     String?
  specifications    String?
  includedAccessories String?
  batteryCondition  String?
  hasInvoice        Boolean?
  hasWarranty       Boolean?
  repairHistory     String?
  applianceCapacity String?
  voltage           String?
  applianceType     String?
  additionalFunctions String?
  hoursUsed         Int?
  engineType        String?
  capacityOrPower   String?
  maintenanceHistory String?
  installationLocation String?
  compliesWithNR    String?
  operatingLicenses String?
  breed             String?
  age               String?
  sex               String?
  weight            String?
  individualId      String?
  purpose           String?
  sanitaryCondition String?
  lineage           String?
  isPregnant        Boolean?
  specialSkills     String?
  gtaDocument       String?
  breedRegistryDocument String?
  furnitureType     String?
  material          String?
  style             String?
  dimensions        String?
  pieceCount        Int?
  jewelryType       String?
  metal             String?
  gemstones         String?
  totalWeight       String?
  jewelrySize       String?
  authenticityCertificate String?
  workType          String?
  artist            String?
  period            String?
  technique         String?
  provenance        String?
  boatType          String?
  boatLength        String?
  hullMaterial      String?
  onboardEquipment  String?
  productName       String?
  quantity          String?
  packagingType     String?
  expirationDate    DateTime?
  storageConditions String?
  preciousMetalType String?
  purity            String?
  forestGoodsType   String?
  volumeOrQuantity  String?
  species           String?
  dofNumber         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  category        LotCategory?    @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory?    @relation(fields: [subcategoryId], references: [id])
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller          Seller?         @relation(fields: [sellerId], references: [id])
  lots            LotBens[]
}
```