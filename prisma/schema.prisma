// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// ENUMS
// =================================================================

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}


// =================================================================
// MODELS
// =================================================================
model PlatformSettings {
  id                            String @id @default(uuid())
  siteTitle                     String @default("BidExpert")
  siteTagline                   String?
  logoUrl                       String?
  faviconUrl                    String?
  galleryImageBasePath          String @default("/uploads/media/")
  storageProvider               String @default("local")
  firebaseStorageBucket         String?
  activeThemeName               String?
  themes                        Json?
  platformPublicIdMasks         Json?
  homepageSections              Json?
  mentalTriggerSettings         Json?
  sectionBadgeVisibility        Json?
  mapSettings                   Json?
  searchPaginationType          String   @default("loadMore")
  searchItemsPerPage            Int      @default(12)
  searchLoadMoreCount           Int      @default(12)
  showCountdownOnLotDetail      Boolean  @default(true)
  showCountdownOnCards          Boolean  @default(true)
  showRelatedLotsOnLotDetail    Boolean  @default(true)
  relatedLotsCount              Int      @default(5)
  defaultUrgencyTimerHours      Int?
  variableIncrementTable        Json?
  biddingSettings               Json?
  paymentGatewaySettings        Json?
  defaultListItemsPerPage       Int      @default(10)
  updatedAt                     DateTime @updatedAt
}

model Role {
  id              String         @id @default(uuid())
  name            String
  nameNormalized  String         @unique
  description     String?
  permissions     Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  users           UsersOnRoles[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  role       Role     @relation(fields: [roleId], references: [id])
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model State {
  id        String             @id @default(uuid())
  name      String
  uf        String             @unique
  slug      String             @unique
  cityCount Int                @default(0)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  cities    City[]
  auctions  Auction[]
  districts JudicialDistrict[]
  lots      Lot[]
}

model City {
  id        String    @id @default(uuid())
  name      String
  slug      String?
  stateId   String
  stateUf   String?
  ibgeCode  String?   @unique
  lotCount  Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  state     State     @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots      Lot[]
  auctions  Auction[]
}

model LotCategory {
  id                   String            @id @default(uuid())
  name                 String
  slug                 String            @unique
  description          String?           @db.VarChar(500)
  hasSubcategories     Boolean
  iconName             String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintIcon       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  subcategories        Subcategory[]
  lots                 Lot[]
  bens                 Bem[]
  auctions             Auction[]
  directSaleOffers     DirectSaleOffer[]
}

model Subcategory {
  id                String      @id @default(uuid())
  name              String
  slug              String?
  parentCategoryId  String
  description       String?     @db.VarChar(500)
  displayOrder      Int         @default(0)
  iconUrl           String?
  iconMediaId       String?
  dataAiHintIcon    String?
  lots              Lot[]
  bens              Bem[]
  parentCategory    LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)

  @@index([parentCategoryId])
}

model DocumentType {
  id          String         @id @default(uuid())
  name        String
  description String?
  isRequired  Boolean        @default(true)
  appliesTo   String?
  documents   UserDocument[]
}

model DocumentTemplate {
  id        String                 @id @default(uuid())
  name      String
  type      DocumentTemplateType
  content   String?                @db.Text
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
}

model Court {
  id                String             @id @default(uuid())
  name              String
  slug              String?
  stateUf           String?
  website           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]          @relation("AuctionCourt")
}

model JudicialDistrict {
  id                String             @id @default(uuid())
  name              String
  slug              String             @unique
  courtId           String?
  stateId           String?
  zipCode           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  court             Court?             @relation(fields: [courtId], references: [id])
  state             State?             @relation(fields: [stateId], references: [id])
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]          @relation("AuctionDistrict")

  @@index([courtId])
  @@index([stateId])
}

model JudicialBranch {
  id                String             @id @default(uuid())
  name              String
  slug              String             @unique
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
  auctions          Auction[]          @relation("AuctionBranch")

  @@index([districtId])
}

model LotBens {
  lot    Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId  String
  bem    Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId  String
  
  @@id([lotId, bemId])
  @@index([bemId])
}

model Bem {
  id                         String      @id @default(uuid())
  publicId                   String      @unique
  title                      String
  description                String?     @db.Text
  status                     String      @default("DISPONIVEL")
  categoryId                 String
  categoryName               String?
  subcategoryId              String?
  subcategoryName            String?
  judicialProcessId          String?
  judicialProcessNumber      String?
  sellerId                   String?
  sellerName                 String?
  evaluationValue            Decimal?    @db.Decimal(15, 2)
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  plate                      String?
  make                       String?
  model                      String?
  version                    String?
  year                       Int?
  modelYear                  Int?
  mileage                    Int?
  color                      String?
  fuelType                   String?
  transmissionType           String?
  bodyType                   String?
  vin                        String?     @db.VarChar(17)
  renavam                    String?     @db.VarChar(11)
  enginePower                String?
  numberOfDoors              Int?
  vehicleOptions             String?
  detranStatus               String?
  debts                      String?
  runningCondition           String?
  bodyCondition              String?
  tiresCondition             String?
  hasKey                     Boolean?
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  area                       Float?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?
  infrastructure             String?
  condoDetails               String?
  improvements               String?
  topography                 String?
  liensAndEncumbrances       String?
  propertyDebts              String?
  unregisteredRecords        String?
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  amenities                  Json?
  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String?
  includedAccessories        String?
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String?
  applianceCapacity          String?
  voltage                    String?
  applianceType              String?
  additionalFunctions        String?
  hoursUsed                  Int?
  engineType                 String?
  capacityOrPower            String?
  maintenanceHistory         String?
  installationLocation       String?
  compliesWithNR             String?
  operatingLicenses          String?
  breed                      String?
  age                        String?
  sex                        String?
  weight                     String?
  individualId               String?
  purpose                    String?
  sanitaryCondition          String?
  vaccinationStatus          String?
  lineage                    String?
  isPregnant                 Boolean?
  specialSkills              String?
  gtaDocument                String?
  breedRegistryDocument      String?
  furnitureType              String?
  material                   String?
  style                      String?
  dimensions                 String?
  pieceCount                 Int?
  jewelryType                String?
  metal                      String?
  gemstones                  String?
  totalWeight                String?
  jewelrySize                String?
  authenticityCertificate    String?
  workType                   String?
  artist                     String?
  period                     String?
  technique                  String?
  provenance                 String?
  boatType                   String?
  boatLength                 String?
  hullMaterial               String?
  onboardEquipment           String?
  productName                String?
  quantity                   String?
  packagingType              String?
  expirationDate             DateTime?
  storageConditions          String?
  preciousMetalType          String?
  purity                     String?
  forestGoodsType            String?
  volumeOrQuantity           String?
  species                    String?
  dofNumber                  String?
  createdAt                  DateTime    @default(now())
  updatedAt                  DateTime    @updatedAt
  category                   LotCategory @relation(fields: [categoryId], references: [id])
  subcategory                Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess            JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller                     Seller?     @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  lots                       LotBens[]

  @@index([categoryId])
  @@index([subcategoryId])
  @@index([judicialProcessId])
  @@index([sellerId])
}


model User {
  id                         String          @id @default(uuid())
  email                      String          @unique
  password                   String?
  fullName                   String?
  cpf                        String?
  cellPhone                  String?
  razaoSocial                String?
  cnpj                       String?
  dateOfBirth                DateTime?
  zipCode                    String?
  street                     String?
  number                     String?
  complement                 String?
  neighborhood               String?
  city                       String?
  state                      String?
  avatarUrl                  String?
  dataAiHint                 String?
  sellerId                   String?         @unique
  habilitationStatus         UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType                AccountType     @default(PHYSICAL)
  badges                     Json?
  optInMarketing             Boolean?        @default(false)
  createdAt                  DateTime        @default(now())
  updatedAt                  DateTime        @updatedAt
  rgNumber                   String?
  rgIssuer                   String?
  rgIssueDate                DateTime?
  rgState                    String?
  homePhone                  String?
  gender                     String?
  profession                 String?
  nationality                String?
  maritalStatus              String?
  propertyRegime             String?
  spouseName                 String?
  spouseCpf                  String?
  inscricaoEstadual          String?
  website                    String?
  responsibleName            String?
  responsibleCpf             String?
  roles                      UsersOnRoles[]
  bids                       Bid[]
  wins                       UserWin[]
  documents                  UserDocument[]
  notifications              Notification[]
  habilitations              AuctionHabilitation[]
  maxBids                    UserLotMaxBid[]
  uploadedMedia              MediaItem[]      @relation("UploadedBy")
  seller                     Seller?         @relation("SellerUser")
  auctioneer                 Auctioneer?
  wonLots                    Lot[]           @relation("WonLots")
}

model Auctioneer {
  id                   String    @id @default(uuid())
  publicId             String    @unique
  slug                 String    @unique
  name                 String
  registrationNumber   String?
  contactName          String?
  email                String?   @unique
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?   @db.Text
  userId               String?   @unique
  user                 User?     @relation(fields: [userId], references: [id])
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  auctions             Auction[]
  lots                 Lot[]
}

model Seller {
  id                 String             @id @default(uuid())
  publicId           String             @unique
  slug               String             @unique
  name               String             @unique
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?            @db.Text
  userId             String?            @unique
  isJudicial         Boolean            @default(false)
  judicialBranchId   String?            @unique
  user               User?              @relation("SellerUser", fields: [userId], references: [id], onDelete: SetNull)
  judicialBranch     JudicialBranch?    @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  auctions           Auction[]
  lots               Lot[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
  judicialProcesses  JudicialProcess[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model Lot {
  id                         String       @id @default(uuid())
  publicId                   String       @unique
  auctionId                  String
  number                     String?
  title                      String
  description                String?      @db.Text
  price                      Decimal      @db.Decimal(15, 2)
  initialPrice               Decimal?     @db.Decimal(15, 2)
  secondInitialPrice         Decimal?     @db.Decimal(15, 2)
  bidIncrementStep           Decimal?     @db.Decimal(10, 2)
  status                     LotStatus    @default(EM_BREVE)
  bidsCount                  Int          @default(0)
  views                      Int          @default(0)
  isFeatured                 Boolean      @default(false)
  isExclusive                Boolean      @default(false)
  discountPercentage         Int?
  additionalTriggers         Json?
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  inheritedMediaFromBemId    String?      // ID do Bem de onde herdar a mídia
  type                       String
  categoryId                 String?
  subcategoryId              String?
  auctionName                String?
  sellerId                   String?
  sellerName                 String?
  auctioneerId               String?
  cityId                     String?
  stateId                    String?
  cityName                   String?
  stateUf                    String?
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?
  endDate                    DateTime?
  auctionDate                DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  dataAiHint                 String?
  winnerId                   String?
  winningBidTermUrl          String?
  allowInstallmentBids       Boolean      @default(false)
  isRelisted                 Boolean      @default(false)
  relistCount                Int          @default(0)
  originalLotId              String?      @unique
  year                       Int?
  make                       String?
  model                      String?
  version                    String?
  odometer                   Int?
  hasKey                     Boolean?
  vin                        String?
  fuelType                   String?
  transmissionType           String?
  judicialProcessNumber      String?
  courtDistrict              String?
  courtName                  String?
  publicProcessUrl           String?
  propertyRegistrationNumber String?
  propertyLiens              String?
  knownDebts                 String?
  additionalDocumentsInfo    String?
  reservePrice               Decimal?     @db.Decimal(15, 2)
  itbiValue                  Decimal?     @db.Decimal(15, 2)
  debtAmount                 Decimal?     @db.Decimal(15, 2)
  createdAt                  DateTime     @default(now())
  updatedAt                  DateTime     @updatedAt
  bens                       LotBens[]
  bids                       Bid[]
  auction                    Auction      @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                   LotCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory                Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  seller                     Seller?      @relation(fields: [sellerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  auctioneer                 Auctioneer?  @relation(fields: [auctioneerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  city                       City?        @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state                      State?       @relation(fields: [stateId], references: [id], onDelete: SetNull)
  winner                     User?        @relation("WonLots", fields: [winnerId], references: [id], onDelete: SetNull)
  originalLot                Lot?         @relation("RelistHistory", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot                Lot[]        @relation("RelistHistory")
  wins                       UserWin[]
  maxBids                    UserLotMaxBid[]

  @@index([auctionId])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([sellerId])
  @@index([auctioneerId])
  @@index([cityId])
  @@index([stateId])
  @@index([winnerId])
}

model Auction {
  id                             String                @id @default(uuid())
  publicId                       String                @unique
  slug                           String                @unique
  title                          String
  description                    String?               @db.Text
  status                         AuctionStatus         @default(RASCUNHO)
  auctionDate                    DateTime?
  endDate                        DateTime?
  totalLots                      Int                   @default(0)
  categoryId                     String?
  auctioneerId                   String?
  sellerId                       String?
  imageUrl                       String?
  imageMediaId                   String?
  dataAiHint                     String?
  documentsUrl                   String?
  visits                         Int?
  initialOffer                   Decimal?              @db.Decimal(15, 2)
  isFavorite                     Boolean?              @default(false)
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  automaticBiddingEnabled        Boolean               @default(false)
  allowInstallmentBids           Boolean               @default(true)
  silentBiddingEnabled           Boolean               @default(false)
  allowMultipleBidsPerUser       Boolean               @default(true)
  softCloseEnabled               Boolean               @default(false)
  softCloseMinutes               Int                   @default(2)
  estimatedRevenue               Decimal?              @db.Decimal(15, 2)
  achievedRevenue                Decimal?              @db.Decimal(15, 2)
  totalHabilitatedUsers          Int?
  isFeaturedOnMarketplace        Boolean               @default(false)
  marketplaceAnnouncementTitle   String?
  decrementAmount                Decimal?              @db.Decimal(10, 2)
  decrementIntervalSeconds       Int?
  floorPrice                     Decimal?              @db.Decimal(15, 2)
  autoRelistSettings             Json?
  auctionType                    AuctionType?
  auctionMethod                  AuctionMethod?        @default(STANDARD)
  participation                  AuctionParticipation? @default(ONLINE)
  onlineUrl                      String?
  address                        String?
  zipCode                        String?
  latitude                       Float?
  longitude                      Float?
  judicialProcessId              String?
  courtId                        String?
  districtId                     String?
  branchId                       String?
  cityId                         String?
  stateId                        String?
  createdAt                      DateTime              @default(now())
  updatedAt                      DateTime              @updatedAt
  lots                           Lot[]
  auctionStages                  AuctionStage[]
  habilitations                  AuctionHabilitation[]
  bids                           Bid[]
  auctioneer                     Auctioneer?           @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  seller                         Seller?               @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  category                       LotCategory?          @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  judicialProcess                JudicialProcess?      @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  court                          Court?                @relation("AuctionCourt", fields: [courtId], references: [id])
  district                       JudicialDistrict?     @relation("AuctionDistrict", fields: [districtId], references: [id])
  branch                         JudicialBranch?       @relation("AuctionBranch", fields: [branchId], references: [id])
  city                           City?                 @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state                          State?                @relation(fields: [stateId], references: [id], onDelete: SetNull)

  @@index([auctioneerId])
  @@index([sellerId])
  @@index([categoryId])
  @@index([judicialProcessId])
  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
  @@index([cityId])
  @@index([stateId])
}


model DirectSaleOffer {
  id                      String                @id @default(uuid())
  publicId                String                @unique
  title                   String
  description             String?               @db.Text
  offerType               DirectSaleOfferType
  price                   Decimal?              @db.Decimal(15, 2)
  minimumOfferPrice       Decimal?              @db.Decimal(15, 2)
  status                  DirectSaleOfferStatus @default(ACTIVE)
  categoryId              String?
  sellerId                String?
  sellerName              String?
  sellerLogoUrl           String?
  dataAiHintSellerLogo    String?
  locationCity            String?
  locationState           String?
  imageUrl                String?
  imageMediaId            String?
  dataAiHint              String?
  galleryImageUrls        Json?
  mediaItemIds            Json?
  itemsIncluded           Json?
  views                   Int                   @default(0)
  expiresAt               DateTime?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  category                LotCategory?          @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  seller                  Seller?               @relation(fields: [sellerId], references: [id], onDelete: SetNull)

  @@index([sellerId])
  @@index([categoryId])
}

model JudicialProcess {
  id              String           @id @default(uuid())
  publicId        String           @unique
  processNumber   String
  isElectronic    Boolean          @default(true)
  courtId         String?
  districtId      String?
  branchId        String?
  sellerId        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  court           Court?           @relation(fields: [courtId], references: [id])
  district        JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch          JudicialBranch?  @relation(fields: [branchId], references: [id])
  parties         JudicialParty[]
  bens            Bem[]
  auctions        Auction[]
  seller          Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)

  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
  @@index([sellerId])
}

model JudicialParty {
  id             String          @id @default(uuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@index([processId])
}


model UserDocument {
  id              String             @id @default(uuid())
  userId          String
  documentTypeId  String
  status          UserDocumentStatus @default(PENDING_ANALYSIS)
  fileUrl         String
  fileName        String?
  rejectionReason String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType       @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
  @@index([userId])
  @@index([documentTypeId])
}


model AuctionStage {
  id              String   @id @default(uuid())
  auctionId       String
  name            String
  startDate       DateTime
  endDate         DateTime
  evaluationValue Decimal? @db.Decimal(15, 2)
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@index([auctionId])
}

model AuctionHabilitation {
  userId        String
  auctionId     String
  habilitatedAt DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@id([userId, auctionId])
  @@index([userId])
  @@index([auctionId])
}

model Bid {
  id            String   @id @default(uuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([bidderId])
  @@index([auctionId])
}

model UserWin {
  id               String       @id @default(uuid())
  lotId            String       @unique
  userId           String
  winningBidAmount Decimal      @db.Decimal(15, 2)
  winDate          DateTime     @default(now())
  paymentStatus    PaymentStatus
  invoiceUrl       String?
  lot              Lot          @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  installments     InstallmentPayment[]

  @@index([userId])
}

model InstallmentPayment {
  id                  String      @id @default(uuid())
  userWinId           String
  installmentNumber   Int
  amount              Decimal     @db.Decimal(15, 2)
  dueDate             DateTime
  status              PaymentStatus @default(PENDENTE)
  paymentDate         DateTime?
  paymentMethod       String?
  transactionId       String?
  userWin             UserWin    @relation(fields: [userWinId], references: [id], onDelete: Cascade)

  @@index([userWinId])
}


model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
  @@index([userId])
  @@index([lotId, isActive])
}

model MediaItem {
  id                String    @id @default(uuid())
  fileName          String
  storagePath       String
  title             String?
  altText           String?
  caption           String?
  description       String?   @db.Text
  mimeType          String
  sizeBytes         Int
  urlOriginal       String
  urlThumbnail      String?
  urlMedium         String?
  urlLarge          String?
  linkedLotIds      Json?
  judicialProcessId String?
  dataAiHint        String?
  uploadedByUserId  String
  uploadedBy        User      @relation("UploadedBy", fields: [uploadedByUserId], references: [id])
  uploadedAt        DateTime  @default(now())

  @@index([uploadedByUserId])
  @@index([judicialProcessId])
}

model VehicleMake {
  id String @id @default(uuid())
  name String @unique
  slug String @unique
  models VehicleModel[]
}

model VehicleModel {
  id String @id @default(uuid())
  name String
  slug String
  makeId String
  make VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)

  @@unique([name, makeId])
  @@index([makeId])
}
