// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// ===================================
// Modelos de Autenticação e Usuário
// ===================================
model Usuario {
  id                  String              @id @default(uuid())
  email               String              @unique
  nomeCompleto        String
  senha               String
  statusHabilitacao   StatusHabilitacao   @default(PENDENTE_DOCUMENTOS)
  tipoConta           TipoContaUsuario    @default(FISICA)
  cpf                 String?             @unique
  dataNascimento      DateTime?
  razaoSocial         String?
  cnpj                String?             @unique
  inscricaoEstadual   String?
  website             String?
  telefoneCelular     String?
  telefoneFixo        String?
  enderecoCep         String?
  enderecoRua         String?
  enderecoNumero      String?
  enderecoComplemento String?
  enderecoBairro      String?
  enderecoCidade      String?
  enderecoEstado      String?
  aceitouTermos       Boolean             @default(false)
  receberMarketing    Boolean             @default(false)
  avatarUrl           String?
  dicaIA              String?
  conquistas          String? // Storing as comma-separated string
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  perfilId            String?
  vendedorId          String?             @unique // Um usuário pode ser um vendedor

  perfil              Perfil?               @relation(fields: [perfilId], references: [id])
  lances              Lance[]
  arremates           Arremate[]
  documentos          DocumentoUsuario[]
  documentosAnalisados DocumentoUsuario[]   @relation("AnalisadorDocumentos")
  vendasDiretas       VendaDireta[]
  avaliacoesFeitas    Avaliacao[]
  perguntasFeitas     PerguntaLote[]
  respostasDadas      PerguntaLote[]        @relation("RespondidoPor")
  maxBids             UserLotMaxBid[]
  notificacoes        Notificacao[]
  postsBlog           PostBlog[]
  vendedor            Vendedor?

  @@index([perfilId])
}

model Perfil {
  id              String       @id @default(uuid())
  nome            String       @unique
  nomeNormalizado String       @unique
  descricao       String?      @db.Text
  usuarios        Usuario[]
  permissoes      Permissao[]

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Permissao {
  id          String   @id @default(uuid())
  nome        String   @unique
  descricao   String?  @db.Text
  perfis      Perfil[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TipoDocumento {
  id             String             @id @default(uuid())
  nome           String
  descricao      String?            @db.Text
  obrigatorio    Boolean            @default(true)
  aplicaA        String? // Storing as comma-separated string
  formatos       String? // Storing as comma-separated string
  ordemExibicao  Int                @default(0)
  documentos     DocumentoUsuario[]

  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model DocumentoUsuario {
  id                String            @id @default(uuid())
  usuarioId         String
  tipoDocumentoId   String
  urlArquivo        String
  nomeArquivo       String?
  status            StatusDocumento   @default(NAO_ENVIADO)
  dataEnvio         DateTime          @default(now())
  dataAnalise       DateTime?
  analistaId        String?
  motivoRejeicao    String?           @db.Text

  tipoDocumento     TipoDocumento     @relation(fields: [tipoDocumentoId], references: [id])
  usuario           Usuario           @relation(fields: [usuarioId], references: [id])
  analista          Usuario?          @relation("AnalisadorDocumentos", fields: [analistaId], references: [id])

  @@index([usuarioId])
  @@index([tipoDocumentoId])
  @@index([analistaId])
  @@unique([usuarioId, tipoDocumentoId])
}

// ===================================
// Modelos de Leilão
// ===================================

model Leilao {
  id                             String                @id @default(uuid())
  publicId                       String                @unique
  titulo                         String
  descricao                      String?               @db.Text
  status                         StatusLeilao
  modalidadeLeilao               ModalidadeLeilao?
  dataInicio                     DateTime
  dataFim                        DateTime?
  etapas                         Json? // Storing as JSON string
  cidade                         String?
  estado                         String?
  urlImagemCapa                  String?
  idMediaItemCapa                String?
  dicaIA                         String?
  urlDocumentos                  String?
  urlLaudoAvaliacao              String?
  urlCertificadoLeilao           String?
  visitas                        Int                   @default(0)
  lanceInicial                   Decimal?              @db.Decimal(12, 2)
  receitaEstimada                Decimal?              @db.Decimal(12, 2)
  receitaRealizada               Decimal?              @db.Decimal(12, 2)
  totalHabilitados               Int?                  @default(0)
  permiteLanceParcelado          Boolean?              @default(false)
  roboLancesAtivado              Boolean?              @default(true)
  softCloseAtivado               Boolean?              @default(true)
  softCloseMinutos               Int?                  @default(3)
  lancesSilenciososAtivados      Boolean?              @default(false)
  permitirMultiplosLances        Boolean?              @default(true)
  republicacaoAutomatica         Json?
  destaqueMarketplace            Boolean?              @default(false)
  tituloAnuncioMarketplace       String?
  gatilhosMentais                String? // Storing as comma-separated string
  
  categoriaId                    String
  leiloeiroId                    String
  vendedorId                     String?
  processoJudicialId             String?

  categoria                      CategoriaLote         @relation(fields: [categoriaId], references: [id])
  leiloeiro                      Leiloeiro             @relation(fields: [leiloeiroId], references: [id])
  vendedor                       Vendedor?             @relation(fields: [vendedorId], references: [id])
  processoJudicial               ProcessoJudicial?     @relation(fields: [processoJudicialId], references: [id])
  imagemCapa                     MediaItem?            @relation("LeilaoImagemCapa", fields: [idMediaItemCapa], references: [id], onDelete: SetNull)

  lotes                          Lote[]
  lances                         Lance[]
  arremates                      Arremate[]
  avaliacoes                     Avaliacao[]
  perguntas                      PerguntaLote[]

  createdAt                      DateTime              @default(now())
  updatedAt                      DateTime              @updatedAt
  
  @@index([categoriaId])
  @@index([leiloeiroId])
  @@index([vendedorId])
  @@index([processoJudicialId])
  @@index([idMediaItemCapa])
}

model Lote {
  id                   String            @id @default(uuid())
  publicId             String            @unique
  titulo               String
  numero               String?
  descricao            String?           @db.Text
  preco                Decimal           @db.Decimal(12, 2)
  lanceInicial         Decimal?          @db.Decimal(12, 2)
  lanceInicialSegunda  Decimal?          @db.Decimal(12, 2)
  incrementoLance      Decimal?          @db.Decimal(10, 2)
  status               StatusLote
  latitude             Float?
  longitude            Float?
  enderecoMapa         String?
  urlMapaEmbed         String?
  urlMapaEstatico      String?
  dataFim              DateTime?
  dataInicioEspecifica DateTime?
  dataSegundaPraca     DateTime?
  condicao             String?
  dicaIA               String?
  visitas              Int?              @default(0)
  contagemLances       Int?              @default(0)
  destaque             Boolean?          @default(false)
  exclusivo            Boolean?          @default(false)
  percentualDesconto   Float?
  gatilhosMentais      String? // Storing as comma-separated string
  urlTermoArrematacao  String?
  
  leilaoId             String
  categoriaId          String
  subcategoriaId       String?
  estadoId             String?
  cidadeId             String?
  vendedorId           String?
  leiloeiroId          String?
  idMediaItemCapa      String?

  leilao               Leilao            @relation(fields: [leilaoId], references: [id])
  categoria            CategoriaLote     @relation(fields: [categoriaId], references: [id])
  subcategoria         Subcategoria?     @relation(fields: [subcategoriaId], references: [id])
  estado               Estado?           @relation(fields: [estadoId], references: [id])
  cidade               Cidade?           @relation(fields: [cidadeId], references: [id])
  vendedor             Vendedor?         @relation(fields: [vendedorId], references: [id])
  leiloeiro            Leiloeiro?        @relation(fields: [leiloeiroId], references: [id])
  imagemCapa           MediaItem?        @relation("LoteImagemCapa", fields: [idMediaItemCapa], references: [id], onDelete: SetNull)
  
  lances               Lance[]
  arremates            Arremate[]
  avaliacoes           Avaliacao[]
  perguntas            PerguntaLote[]
  maxBids              UserLotMaxBid[]
  bens                 Bem[]

  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  @@index([leilaoId])
  @@index([categoriaId])
  @@index([subcategoriaId])
  @@index([estadoId])
  @@index([cidadeId])
  @@index([vendedorId])
  @@index([leiloeiroId])
  @@index([idMediaItemCapa])
}

model Bem {
  id                  String  @id @default(uuid())
  publicId            String  @unique
  titulo              String
  descricao           String? @db.Text
  status              StatusBem
  valorAvaliacao      Decimal? @db.Decimal(12, 2)
  urlImagem           String?
  idMediaItemCapa     String?
  dicaIA              String?
  cidade              String?
  estado              String?
  endereco            String?
  latitude            Float?
  longitude           Float?
  
  categoriaId         String
  subcategoriaId      String?
  processoJudicialId  String?
  vendedorId          String?

  categoria           CategoriaLote     @relation(fields: [categoriaId], references: [id])
  subcategoria        Subcategoria?     @relation(fields: [subcategoriaId], references: [id])
  processoJudicial    ProcessoJudicial? @relation(fields: [processoJudicialId], references: [id])
  vendedor            Vendedor?         @relation(fields: [vendedorId], references: [id])
  
  lotes               Lote[]

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Vehicle fields
  placa String?
  marca String?
  modelo String?
  versao String?
  anoFabricacao Int?
  anoModelo Int?
  quilometragem Int?
  cor String?
  combustivel String?
  transmissao String?
  carroceria String?
  chassi String?
  renavam String?
  potenciaMotor String?
  numPortas Int?
  opcionais String? @db.Text
  statusDetran String?
  dividasVeiculo String? @db.Text
  condicaoFuncionamento String?
  condicaoCarroceria String?
  condicaoPneus String?
  temChave Boolean?

  // Real Estate fields
  matriculaImovel String?
  inscricaoIptu String?
  ocupado Boolean?
  areaTotal Float?
  areaConstruida Float?
  quartos Int?
  suites Int?
  banheiros Int?
  vagasGaragem Int?
  tipoConstrucao String?
  acabamentos String? @db.Text
  infraestrutura String? @db.Text
  detalhesCondominio String? @db.Text
  benfeitorias String? @db.Text
  topografia String?
  onusGravames String? @db.Text
  dividasImovel String? @db.Text
  registrosNaoAverbados String? @db.Text
  temHabitese Boolean?
  restricoesZoneamento String?
  comodidades String? @db.Text
  
  // Other specific fields...
  marcaEletronico String?
  numeroSerie String?
  condicaoItem String?
  especificacoes String? @db.Text
  acessoriosInclusos String? @db.Text
  condicaoBateria String?
  temNotaFiscal Boolean?
  temGarantia Boolean?
  historicoReparo String? @db.Text

  capacidadeEletrodomestico String?
  voltagem String?
  tipoEletrodomestico String?
  funcoesAdicionais String? @db.Text
  
  horasUso Int?
  tipoMotor String?
  capacidadePotencia String?
  historicoManutencao String? @db.Text
  localInstalacao String?
  normasNR String?
  licencasOperacao String?
  
  raca String?
  idade String?
  sexo String?
  peso String?
  identificacaoIndividual String?
  proposito String?
  condicaoSanitaria String? @db.Text
  linhagem String? @db.Text
  prenha Boolean?
  habilidadesEspeciais String? @db.Text
  documentoGta String?
  documentoRegistroRaca String?

  tipoMovel String?
  material String?
  estilo String?
  dimensoes String?
  quantidadePecas Int?

  tipoJoia String?
  metal String?
  pedras String? @db.Text
  pesoTotal String?
  tamanhoJoia String?
  certificadoAutenticidade String?

  tipoObra String?
  artista String?
  periodo String?
  tecnica String?
  procedencia String? @db.Text

  tipoEmbarcacao String?
  comprimentoEmbarcacao String?
  materialCasco String?
  equipamentosBordo String? @db.Text

  nomeProduto String?
  quantidade String?
  tipoEmbalagem String?
  dataValidade DateTime?
  condicoesArmazenamento String?

  tipoMetalPrecioso String?
  pureza String?

  tipoBensFlorestais String?
  volumeQuantidade String?
  especies String?
  numeroDof String?

  @@index([categoriaId])
  @@index([subcategoriaId])
  @@index([processoJudicialId])
  @@index([vendedorId])
}


model CategoriaLote {
  id                  String         @id @default(uuid())
  nome                String         @unique
  slug                String         @unique
  descricao           String?        @db.Text
  temSubcategorias    Boolean?       @default(false)
  contagemItens       Int?           @default(0)
  urlLogo             String?
  idMediaItemLogo     String?
  dicaIALogo          String?
  urlImagemCapa       String?
  idMediaItemCapa     String?
  dicaIACapa          String?
  urlImagemMegaMenu   String?
  idMediaItemMegaMenu String?
  dicaIAMegaMenu      String?

  leiloes             Leilao[]
  lotes               Lote[]
  vendasDiretas       VendaDireta[]
  subcategorias       Subcategoria[]
  bens                Bem[]

  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
}

model Subcategoria {
  id                   String        @id @default(uuid())
  nome                 String
  slug                 String        @unique
  descricao            String?       @db.Text
  contagemItens        Int?          @default(0)
  ordemExibicao        Int?          @default(0)
  urlIcone             String?
  idMediaItemIcone     String?
  dicaIAIcone          String?

  categoriaPrincipalId String
  categoriaPrincipal   CategoriaLote @relation(fields: [categoriaPrincipalId], references: [id])
  
  lotes                Lote[]
  bens                 Bem[]

  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  @@index([categoriaPrincipalId])
}


model Lance {
  id             String    @id @default(uuid())
  loteId         String
  leilaoId       String
  licitanteId    String
  nomeLicitante  String
  valor          Decimal   @db.Decimal(12, 2)
  timestamp      DateTime  @default(now())

  lote           Lote      @relation(fields: [loteId], references: [id])
  leilao         Leilao    @relation(fields: [leilaoId], references: [id])
  licitante      Usuario   @relation(fields: [licitanteId], references: [id])

  @@index([loteId])
  @@index([leilaoId])
  @@index([licitanteId])
}

model Arremate {
  id               String       @id @default(uuid())
  loteId           String       @unique
  leilaoId         String
  usuarioId        String
  valorArremate    Decimal      @db.Decimal(12, 2)
  dataArremate     DateTime     @default(now())
  statusPagamento  StatusPagamento @default(PENDENTE)
  urlFatura        String?

  lote             Lote         @relation(fields: [loteId], references: [id])
  leilao           Leilao       @relation(fields: [leilaoId], references: [id])
  usuario          Usuario      @relation(fields: [usuarioId], references: [id])

  @@index([loteId])
  @@index([leilaoId])
  @@index([usuarioId])
}

model UserLotMaxBid {
  id          String    @id @default(uuid())
  usuarioId   String
  loteId      String
  maxAmount   Decimal   @db.Decimal(12, 2)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  usuario     Usuario   @relation(fields: [usuarioId], references: [id])
  lote        Lote      @relation(fields: [loteId], references: [id])

  @@unique([usuarioId, loteId])
}

model Avaliacao {
  id                String    @id @default(uuid())
  loteId            String
  leilaoId          String
  usuarioId         String
  nomeUsuario       String
  nota              Int
  comentario        String?   @db.Text
  
  lote              Lote      @relation(fields: [loteId], references: [id])
  leilao            Leilao    @relation(fields: [leilaoId], references: [id])
  usuario           Usuario   @relation(fields: [usuarioId], references: [id])

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([loteId])
  @@index([leilaoId])
  @@index([usuarioId])
}

model PerguntaLote {
  id                    String    @id @default(uuid())
  loteId                String
  leilaoId              String
  usuarioId             String
  nomeUsuario           String
  textoPergunta         String    @db.Text
  publica               Boolean   @default(true)
  textoResposta         String?   @db.Text
  idUsuarioResposta     String?
  nomeUsuarioResposta   String?
  dataResposta          DateTime?

  lote                  Lote      @relation(fields: [loteId], references: [id])
  leilao                Leilao    @relation(fields: [leilaoId], references: [id])
  usuario               Usuario   @relation(fields: [usuarioId], references: [id])
  respondidoPor         Usuario?  @relation("RespondidoPor", fields: [idUsuarioResposta], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([loteId])
  @@index([leilaoId])
  @@index([usuarioId])
  @@index([idUsuarioResposta])
}

// ===================================
// Modelos de Entidades
// ===================================

model Vendedor {
  id                        String             @id @default(uuid())
  publicId                  String             @unique
  nome                      String
  slug                      String             @unique
  nomeContato               String?
  email                     String?
  telefone                  String?
  endereco                  String?
  cidade                    String?
  estado                    String?
  cep                       String?
  website                   String?
  urlLogo                   String?
  idMediaItemLogo           String?
  dicaIALogo                String?
  descricao                 String?            @db.Text
  membroDesde               DateTime?
  rating                    Float?
  contagemLotesAtivos       Int?               @default(0)
  valorTotalVendido         Decimal?           @db.Decimal(15, 2)
  contagemLeiloes           Int?               @default(0)
  eJudicial                 Boolean            @default(false)
  
  usuarioId                 String?            @unique
  varaJudicialId            String?            @unique

  usuario                   Usuario?           @relation(fields: [usuarioId], references: [id])
  varaJudicial              Vara?              @relation(fields: [varaJudicialId], references: [id])
  
  leiloes                   Leilao[]
  lotes                     Lote[]
  processosJudiciais        ProcessoJudicial[]
  vendasDiretas             VendaDireta[]

  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
  
  @@index([varaJudicialId])
}

model Leiloeiro {
  id                        String      @id @default(uuid())
  publicId                  String      @unique
  nome                      String
  slug                      String      @unique
  numeroRegistro            String?
  nomeContato               String?
  email                     String?
  telefone                  String?
  endereco                  String?
  cidade                    String?
  estado                    String?
  cep                       String?
  website                   String?
  urlLogo                   String?
  idMediaItemLogo           String?
  dicaIALogo                String?
  descricao                 String?     @db.Text
  membroDesde               DateTime?
  rating                    Float?
  contagemLeiloes           Int?        @default(0)
  valorTotalVendido         Decimal?    @db.Decimal(15, 2)
  
  usuarioId                 String?     @unique
  usuario                   Usuario?    @relation(fields: [usuarioId], references: [id])
  leiloes                   Leilao[]
  lotes                     Lote[]

  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt
}


model VendaDireta {
  id                   String                 @id @default(uuid())
  publicId             String                 @unique
  titulo               String
  descricao            String                 @db.Text
  tipoOferta           TipoOfertaVendaDireta
  status               StatusOfertaVendaDireta @default(PENDENTE_APROVACAO)
  preco                Decimal?               @db.Decimal(12, 2)
  precoMinimoProposta  Decimal?               @db.Decimal(12, 2)
  cidade               String?
  estado               String?
  urlImagemCapa        String?
  idMediaItemCapa      String?
  dicaIA               String?
  dataExpiracao        DateTime?
  visitas              Int                    @default(0)
  contagemPropostas    Int                    @default(0)
  
  categoriaId          String
  vendedorId           String

  categoria            CategoriaLote          @relation(fields: [categoriaId], references: [id])
  vendedor             Vendedor               @relation(fields: [vendedorId], references: [id])
  comprador            Usuario?               @relation(fields: [compradorId], references: [id])
  compradorId          String?

  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt

  @@index([categoriaId])
  @@index([vendedorId])
  @@index([compradorId])
}

// ===================================
// Modelos de Entidades Judiciais
// ===================================

model Tribunal {
  id           String             @id @default(uuid())
  nome         String
  slug         String             @unique
  uf           String
  website      String?

  comarcas     Comarca[]
  processos    ProcessoJudicial[]

  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model Comarca {
  id           String             @id @default(uuid())
  nome         String
  slug         String             @unique
  cep          String?

  tribunalId   String
  estadoId     String

  tribunal     Tribunal           @relation(fields: [tribunalId], references: [id])
  estado       Estado             @relation(fields: [estadoId], references: [id])
  varas        Vara[]
  processos    ProcessoJudicial[]

  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  
  @@index([tribunalId])
  @@index([estadoId])
}

model Vara {
  id                String             @id @default(uuid())
  nome              String
  slug              String             @unique
  nomeContato       String?
  telefone          String?
  email             String?

  comarcaId         String
  comarca           Comarca            @relation(fields: [comarcaId], references: [id])
  processos         ProcessoJudicial[]
  comitenteJudicial Vendedor?

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@index([comarcaId])
}

model ProcessoJudicial {
  id              String      @id @default(uuid())
  publicId        String      @unique
  numeroProcesso  String      @unique
  eletronico      Boolean     @default(true)
  
  tribunalId      String
  comarcaId       String
  varaId          String
  vendedorId      String?
  
  tribunal        Tribunal    @relation(fields: [tribunalId], references: [id])
  comarca         Comarca     @relation(fields: [comarcaId], references: [id])
  vara            Vara        @relation(fields: [varaId], references: [id])
  vendedor        Vendedor?   @relation(fields: [vendedorId], references: [id])
  
  partes          ParteProcesso[]
  bens            Bem[]
  leiloes         Leilao[]

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@index([tribunalId])
  @@index([comarcaId])
  @@index([varaId])
  @@index([vendedorId])
}

model ParteProcesso {
  id              String         @id @default(uuid())
  nome            String
  numeroDocumento String?
  tipo            TipoParteProcesso
  
  processoId      String
  processo        ProcessoJudicial @relation(fields: [processoId], references: [id])

  @@index([processoId])
}

// ===================================
// Modelos de Conteúdo e Configurações
// ===================================

model PostBlog {
  id            String        @id @default(uuid())
  titulo        String
  conteudo      String        @db.Text
  publicadoEm   DateTime?
  status        String
  slug          String        @unique

  autorId       String
  autor         Usuario       @relation(fields: [autorId], references: [id])
  categoriaId   String?
  categoria     CategoriaLote? @relation(fields: [categoriaId], references: [id])

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@index([autorId])
  @@index([categoriaId])
}

model MediaItem {
  id              String   @id @default(uuid())
  nomeArquivo     String
  caminhoStorage  String
  titulo          String?
  textoAlternativo String?
  legenda         String?
  descricao       String?
  tipoMime        String
  tamanhoBytes    Int
  dimensoes       String?
  urlOriginal     String
  urlThumbnail    String?
  urlMedio        String?
  urlGrande       String?
  enviadoPor      String?
  dicaIA          String?

  leiloesCapa     Leilao[] @relation("LeilaoImagemCapa")
  lotesCapa       Lote[]   @relation("LoteImagemCapa")

  createdAt       DateTime @default(now())
}

model Estado {
  id        String    @id @default(uuid())
  nome      String
  uf        String    @unique
  slug      String    @unique

  cidades   Cidade[]
  lotes     Lote[]
  comarcas  Comarca[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Cidade {
  id          String   @id @default(uuid())
  nome        String
  slug        String   @unique
  ibgeCodigo  String?
  
  estadoId    String
  estado      Estado   @relation(fields: [estadoId], references: [id])
  
  lotes       Lote[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@index([estadoId])
}

model ConfiguracoesPlataforma {
  id                String  @id @default("global")
  tituloSite        String?
  taglineSite       String?
  caminhoBaseImagem String?
  provedorStorage   String? @default("local")
  bucketFirebase    String?
  temaAtivo         String?
  temas             Json? // Store as JSON string
  mascarasIdPublico Json? // Store as JSON string
  configuracoesMapa Json? // Store as JSON string
  paginacaoBusca    String? @default("loadMore")
  itensPorPagina    Int?    @default(12)
  contagemCarregarMais Int? @default(12)
  exibirCronometroDetalhe Boolean? @default(true)
  exibirCronometroCards Boolean? @default(true)
  exibirLotesRelacionados Boolean? @default(true)
  contagemLotesRelacionados Int? @default(5)
  tabelaIncrementoVariavel Json?
  configuracoesLances Json?
  itensPorPaginaPadrao Int? @default(10)
  configTriggersMentais Json?
  visibilidadeBadgesSecao Json?
  updatedAt         DateTime @updatedAt
}

model Notificacao {
  id          String    @id @default(uuid())
  usuarioId   String
  mensagem    String    @db.Text
  link        String?
  lida        Boolean   @default(false)
  
  usuario     Usuario   @relation(fields: [usuarioId], references: [id])

  createdAt   DateTime  @default(now())
  
  @@index([usuarioId])
}

model MensagemContato {
  id        String   @id @default(uuid())
  nome      String
  email     String
  assunto   String
  mensagem  String   @db.Text
  lida      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model TemplateDocumento {
  id            String          @id @default(uuid())
  nome          String          @unique
  tipo          TipoTemplateDocumento
  conteudo      String          @db.Text
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}


// ===================================
// ENUMS
// ===================================
enum StatusHabilitacao {
  PENDENTE_DOCUMENTOS
  PENDENTE_ANALISE
  HABILITADO
  DOCUMENTOS_REJEITADOS
  BLOQUEADO
}

enum TipoContaUsuario {
  FISICA
  JURIDICA
  COMITENTE_VENDA_DIRETA
}

enum StatusDocumento {
  NAO_ENVIADO
  ENVIADO
  APROVADO
  REJEITADO
  EM_ANALISE
}

enum StatusLeilao {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum ModalidadeLeilao {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum StatusLote {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum StatusBem {
    CADASTRO
    DISPONIVEL
    LOTEADO
    VENDIDO
    REMOVIDO
    INATIVADO
}


enum StatusPagamento {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum TipoParteProcesso {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum TipoOfertaVendaDireta {
    COMPRAR_JA
    ACEITA_PROPOSTAS
}

enum StatusOfertaVendaDireta {
    ATIVA
    VENDIDA
    EXPIRADA
    PENDENTE_APROVACAO
}

enum TipoTemplateDocumento {
    TERMO_ARREMATACAO
    LAUDO_AVALIACAO
    CERTIFICADO_LEILAO
}

