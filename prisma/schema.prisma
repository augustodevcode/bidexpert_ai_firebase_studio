// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// --- AUTH & USERS ---

model User {
  id                    String        @id @default(cuid())
  email                 String        @unique
  fullName              String?
  password              String
  avatarUrl             String?
  roleId                String?
  habilitationStatus    UserHabilitationStatus @default(PENDING_DOCUMENTS)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  
  // Custom user fields
  accountType           AccountType?
  cpf                   String?
  dateOfBirth           DateTime?
  razaoSocial           String?
  cnpj                  String?
  inscricaoEstadual     String?
  website               String?
  cellPhone             String?
  zipCode               String?
  street                String?
  number                String?
  complement            String?
  neighborhood          String?
  city                  String?
  state                 String?
  optInMarketing        Boolean?         @default(false)
  
  // New fields from previous fixes
  homePhone             String?
  gender                String?
  profession            String?
  nationality           String?
  maritalStatus         String?
  propertyRegime        String?
  spouseName            String?
  spouseCpf             String?
  rgNumber              String?
  rgIssuer              String?
  rgIssueDate           DateTime?
  rgState               String?
  activeBids            Int?             @default(0)
  itemsSold             Int?             @default(0)
  badges                Json?

  // Relationships
  role                Role?                  @relation(fields: [roleId], references: [id], onDelete: SetNull)
  sellerProfile       Seller?                
  auctioneerProfile   Auctioneer?              
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  reviews             Review[]
  questions           LotQuestion[]
  answers             LotQuestion[]          @relation("AnsweredBy")
  uploadedMedia       MediaItem[]
  notifications       Notification[]
  maxBids             UserLotMaxBid[]
}

model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  // Relationships
  users       User[]
  permissions Permission[] @relation(references: [id])
}

model Permission {
  id          String @id @default(cuid())
  name        String @unique // e.g., "auctions:create", "users:delete"
  description String?
  roles       Role[]   @relation(references: [id])
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

// --- DOCUMENT MANAGEMENT ---

model DocumentType {
  id             String         @id @default(cuid())
  name           String         @unique
  description    String?
  isRequired     Boolean        @default(true)
  appliesTo      String? // Comma-separated AccountType[]
  allowedFormats String? // Comma-separated string of extensions e.g. "pdf,jpg,png"
  displayOrder   Int            @default(0)
  
  // Relationships
  userDocuments UserDocument[]
}

model UserDocument {
  id              String             @id @default(cuid())
  userId          String
  documentTypeId  String
  fileUrl         String?
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  rejectionReason String?
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String? // Could be a User ID

  // Relationships
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType DocumentType @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}


// --- MEDIA LIBRARY ---

model MediaItem {
  id                   String   @id @default(cuid())
  fileName             String
  storagePath          String?  @unique
  title                String?
  altText              String?
  caption              String?
  description          String?
  mimeType             String
  sizeBytes            Int
  urlOriginal          String
  urlThumbnail         String?
  urlMedium            String?
  urlLarge             String?
  dataAiHint           String?
  uploadedBy           String?
  uploadedAt           DateTime @default(now())

  // Relationships for linking MediaItems to other models
  userUploader         User?            @relation(fields: [uploadedBy], references: [id], onDelete: SetNull, onUpdate: NoAction)
  
  // One-to-One relations where this MediaItem is the primary image
  auctionAsImage       Auction?         @relation("AuctionImage")
  lotAsImage           Lot?             @relation("LotImage")
  bemAsImage           Bem?             @relation("BemImage")
  sellerAsLogo         Seller?          @relation("SellerLogo")
  auctioneerAsLogo     Auctioneer?      @relation("AuctioneerLogo")
  categoryAsLogo       LotCategory?     @relation("CategoryLogo")
  categoryAsCover      LotCategory?     @relation("CategoryCoverImage")
  categoryAsMegaMenu   LotCategory?     @relation("CategoryMegaMenuImage")
  subcategoryAsIcon    Subcategory?     @relation("SubcategoryIcon")
  blogPostAsImage      BlogPost?        @relation("BlogPostImage")
  directSaleAsImage    DirectSaleOffer? @relation("DirectSaleOfferImage")
  
  // Many-to-Many relations (manual join table needed)
  lotsAsGallery Lot[] @relation("LotGallery")
}


// --- CORE AUCTION MODELS ---

model Auction {
  id                             String        @id @default(cuid())
  publicId                       String        @unique
  title                          String
  fullTitle                      String?
  description                    String?       @db.Text
  status                         AuctionStatus @default(RASCUNHO)
  auctionType                    String?
  auctionDate                    DateTime
  endDate                        DateTime?
  imageUrl                       String?
  imageMediaId                   String?       @unique
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  dataAiHint                     String?
  city                           String?
  state                          String?
  sellingBranch                  String?
  vehicleLocation                String?
  visits                         Int?          @default(0)
  totalLots                      Int?          @default(0)
  totalHabilitatedUsers          Int?          @default(0)
  initialOffer                   Float?
  estimatedRevenue               Float?
  achievedRevenue                Float?        @default(0)
  isFeaturedOnMarketplace        Boolean?      @default(false)
  marketplaceAnnouncementTitle   String?
  automaticBiddingEnabled        Boolean?      @default(false)
  allowInstallmentBids           Boolean?      @default(false)
  silentBiddingEnabled           Boolean?      @default(false)
  allowMultipleBidsPerUser       Boolean?      @default(true)
  softCloseEnabled               Boolean?      @default(false)
  softCloseMinutes               Int?          @default(2)
  decrementAmount                Float?
  decrementIntervalSeconds       Int?
  floorPrice                     Float?
  autoRelistSettings             Json?
  auctionStages                  Json
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt

  // Relationships
  categoryId    String
  category      LotCategory       @relation(fields: [categoryId], references: [id])
  auctioneerId  String
  auctioneer    Auctioneer        @relation(fields: [auctioneerId], references: [id])
  sellerId      String?
  seller        Seller?           @relation(fields: [sellerId], references: [id])
  judicialProcessId String?
  judicialProcess   JudicialProcess?  @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  image         MediaItem?        @relation("AuctionImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  lots          Lot[]
  bids          Bid[]
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO_PARA_LANCES
  ABERTO // Alias for open to bids
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

model Lot {
  id                             String    @id @default(cuid())
  publicId                       String    @unique
  number                         String?
  title                          String
  description                    String?   @db.Text
  status                         LotStatus @default(EM_BREVE)
  price                          Float
  initialPrice                   Float?
  secondInitialPrice             Float?
  bidIncrementStep               Float?
  endDate                        DateTime?
  lotSpecificAuctionDate         DateTime?
  secondAuctionDate              DateTime?
  imageUrl                       String?
  imageMediaId                   String?   @unique
  winningBidTermUrl              String?
  dataAiHint                     String?
  views                          Int?      @default(0)
  bidsCount                      Int?      @default(0)
  isFeatured                     Boolean?  @default(false)
  isExclusive                    Boolean?  @default(false)
  discountPercentage             Float?
  additionalTriggers             Json?
  condition                      String?
  latitude                       Float?
  longitude                      Float?
  mapAddress                     String?
  mapEmbedUrl                    String?
  mapStaticImageUrl              String?
  judicialProcessNumber          String?
  courtDistrict                  String?
  courtName                      String?
  publicProcessUrl               String?
  propertyRegistrationNumber     String?
  propertyLiens                  String?
  knownDebts                     String?
  additionalDocumentsInfo        String?
  reservePrice                   Float?
  evaluationValue                Float?
  debtAmount                     Float?
  itbiValue                      Float?
  createdAt                      DateTime  @default(now())
  updatedAt                      DateTime  @updatedAt

  // Relationships
  auctionId     String
  auction       Auction          @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  categoryId    String
  category      LotCategory      @relation(fields: [categoryId], references: [id])
  subcategoryId String?
  subcategory   Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  stateId       String?
  state         StateInfo?       @relation(fields: [stateId], references: [id], onDelete: SetNull)
  cityId        String?
  city          CityInfo?        @relation(fields: [cityId], references: [id], onDelete: SetNull)
  image         MediaItem?       @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  bids          Bid[]
  wins          UserWin[]
  reviews       Review[]
  questions     LotQuestion[]
  maxBids       UserLotMaxBid[]
  lotsOnBem     LotOnBem[]
  galleryImages MediaItem[]      @relation("LotGallery")
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}


// --- BEM (GOOD/ASSET) MODELS ---
// This represents the physical or digital asset before it becomes part of a Lot.

model Bem {
  id            String   @id @default(cuid())
  publicId      String   @unique
  title         String
  description   String?  @db.Text
  status        BemStatus @default(CADASTRO)
  evaluationValue Float?
  imageUrl      String?
  imageMediaId  String?  @unique
  dataAiHint    String?
  locationCity  String?
  locationState String?
  address       String?
  latitude      Float?
  longitude     Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Specific fields for different Bem types (using optional fields)
  // Vehicle
  plate               String?
  make                String?
  model               String?
  version             String?
  year                Int?
  modelYear           Int?
  mileage             Int?
  color               String?
  fuelType            String?
  transmissionType    String?
  bodyType            String?
  vin                 String?
  renavam             String?
  enginePower         String?
  numberOfDoors       Int?
  vehicleOptions      String?
  detranStatus        String?
  debts               String?
  runningCondition    String?
  bodyCondition       String?
  tiresCondition      String?
  hasKey              Boolean?

  // Real Estate
  propertyType              String? // e.g., 'Residential', 'Commercial'
  propertyRegistrationNumber String?
  iptuNumber                String?
  isOccupied                Boolean?
  area                      Float? // For land
  totalArea                 Float?
  builtArea                 Float?
  bedrooms                  Int?
  suites                    Int?
  bathrooms                 Int?
  parkingSpaces             Int?
  constructionType          String?
  finishes                  String?
  infrastructure            String?
  condoDetails              String?
  improvements              String?
  topography                String?
  liensAndEncumbrances      String? @db.Text
  propertyDebts             String? @db.Text
  unregisteredRecords       String? @db.Text
  hasHabiteSe               Boolean?
  zoningRestrictions        String?
  amenities                 Json?

  // Electronics
  brand               String?
  serialNumber        String?
  itemCondition       String?
  specifications      String? @db.Text
  includedAccessories String?
  batteryCondition    String?
  hasInvoice          Boolean?
  hasWarranty         Boolean?
  repairHistory       String?

  // Appliances
  applianceCapacity   String?
  voltage             String?
  applianceType       String?
  additionalFunctions String?
  
  // Machinery
  hoursUsed            Int?
  engineType           String?
  capacityOrPower      String?
  maintenanceHistory   String?  @db.Text
  installationLocation String?
  compliesWithNR       String?
  operatingLicenses    String?

  // Livestock
  breed                   String?
  age                     String?
  sex                     String?
  weight                  String?
  individualId            String?
  purpose                 String?
  sanitaryCondition       String?
  lineage                 String?
  isPregnant              Boolean?
  specialSkills           String?
  gtaDocument             String?
  breedRegistryDocument   String?
  vaccinationStatus       String?

  // Relationships
  categoryId      String
  category        LotCategory      @relation(fields: [categoryId], references: [id])
  subcategoryId String?
  subcategory     Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcessId String?
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  sellerId        String?
  seller          Seller?         @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  image           MediaItem?      @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  lotsOnBem       LotOnBem[]
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

// Join table for the many-to-many relationship between Bem and Lot
model LotOnBem {
  bem    Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId  String
  lot    Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId  String
  
  @@id([bemId, lotId])
}


// --- CATEGORIZATION & GEOGRAPHY ---

model LotCategory {
  id                   String            @id @default(cuid())
  name                 String            @unique
  slug                 String            @unique
  description          String?
  logoUrl              String?
  coverImageUrl        String?
  megaMenuImageUrl     String?
  dataAiHintLogo       String?
  dataAiHintCover      String?
  dataAiHintMegaMenu   String?
  itemCount            Int               @default(0)
  hasSubcategories     Boolean           @default(false)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  
  // Relationships
  logoMediaId          String?           @unique
  logo                 MediaItem?        @relation("CategoryLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  coverImageMediaId    String?           @unique
  coverImage           MediaItem?        @relation("CategoryCoverImage", fields: [coverImageMediaId], references: [id], onDelete: SetNull)
  megaMenuImageMediaId String?           @unique
  megaMenuImage        MediaItem?        @relation("CategoryMegaMenuImage", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull)
  auctions             Auction[]
  lots                 Lot[]
  bens                 Bem[]
  subcategories      Subcategory[]
  directSaleOffers     DirectSaleOffer[]
}

model Subcategory {
  id             String      @id @default(cuid())
  name           String
  slug           String      @unique
  description    String?
  iconUrl        String?
  iconMediaId    String?     @unique
  dataAiHintIcon String?
  displayOrder   Int         @default(0)
  itemCount      Int         @default(0)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  // Relationships
  parentCategoryId String
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id])
  icon             MediaItem?  @relation("SubcategoryIcon", fields: [iconMediaId], references: [id], onDelete: SetNull)
  lots             Lot[]
  bens             Bem[]
}

model StateInfo {
  id         String             @id @default(cuid())
  name       String             @unique
  uf         String             @unique
  slug       String             @unique
  cityCount  Int                @default(0)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  // Relationships
  lots       Lot[]
  courts     Court[]
  districts  JudicialDistrict[]
}

model CityInfo {
  id        String    @id @default(cuid())
  name      String
  slug      String
  stateId   String
  stateUf   String
  ibgeCode  String?
  lotCount  Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relationships
  state     StateInfo @relation(fields: [stateId], references: [id])
  lots      Lot[]
}


// --- LEGAL & JUDICIAL ENTITIES ---

model Court {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  website   String?
  stateUf   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  stateId   String
  state     StateInfo           @relation(fields: [stateId], references: [id])
  districts JudicialDistrict[]
}

model JudicialDistrict {
  id        String   @id @default(cuid())
  name      String
  slug      String
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  courtId   String
  court     Court      @relation(fields: [courtId], references: [id])
  stateId   String
  state     StateInfo  @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]
}

model JudicialBranch {
  id          String    @id @default(cuid())
  name        String
  slug        String
  contactName String?
  phone       String?
  email       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relationships
  districtId      String
  district        JudicialDistrict    @relation(fields: [districtId], references: [id])
  processes       JudicialProcess[]
  judicialSellers Seller[]
}

model JudicialProcess {
  id                String    @id @default(cuid())
  publicId          String    @unique
  processNumber     String    @unique
  isElectronic      Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relationships
  courtId     String
  court       Court            @relation(fields: [courtId], references: [id])
  districtId  String
  district    JudicialDistrict @relation(fields: [districtId], references: [id])
  branchId    String
  branch      JudicialBranch   @relation(fields: [branchId], references: [id])
  sellerId    String?          @unique
  seller      Seller?          @relation(fields: [sellerId], references: [id], onUpdate: NoAction, onDelete: SetNull)
  parties     ProcessParty[]
  bens        Bem[]
  auctions    Auction[]
}

model ProcessParty {
  id             String         @id @default(cuid())
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  
  // Relationships
  processId      String
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@unique([processId, name, partyType])
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}


// --- OTHER MODELS ---

model BlogPost {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  content         String   @db.Text
  authorId        String
  authorName      String
  publishedAt     DateTime?
  isPublished     Boolean  @default(false)
  tags            Json?    // Use JSON for simple string array
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  featuredImageId String?    @unique
  image           MediaItem? @relation("BlogPostImage", fields: [featuredImageId], references: [id], onDelete: SetNull)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}


model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String   @db.Text
  createdAt       DateTime @default(now())
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}


model LotQuestion {
  id             String    @id @default(cuid())
  lotId          String
  auctionId      String
  userId         String
  userDisplayName String
  questionText   String    @db.Text
  answerText     String?   @db.Text
  answeredAt     DateTime?
  answeredByUserId String?
  isPublic       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  
  // Relationships
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot      Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  answeredBy User?  @relation("AnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lotId])
}

// --- GLOBAL SETTINGS ---

model PlatformSettings {
  id                  String @id @default("global")
  siteTitle           String?
  siteTagline         String?
  galleryImageBasePath String?
  storageProvider     String?
  firebaseStorageBucket String?
  activeThemeName     String?
  themes              Json?
  platformPublicIdMasks Json?
  homepageSections      Json?
  mentalTriggerSettings Json?
  sectionBadgeVisibility Json?
  mapSettings             Json?
  searchPaginationType    String?
  searchItemsPerPage      Int?
  searchLoadMoreCount     Int?
  showCountdownOnLotDetail Boolean?
  showCountdownOnCards     Boolean?
  showRelatedLotsOnLotDetail Boolean?
  relatedLotsCount         Int?
  variableIncrementTable   Json?
  biddingSettings          Json?
  defaultListItemsPerPage  Int?
  updatedAt                DateTime @updatedAt
}

// --- ENUMS ---

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

model DocumentTemplate {
  id        String                @id @default(cuid())
  name      String                @unique
  type      DocumentTemplateType
  content   String                @db.Text
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
}
