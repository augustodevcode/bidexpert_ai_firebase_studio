// prisma/schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. Enum Definitions
// =================================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum DirectSaleOfferStatus {
  RASCUNHO
  PENDING_APPROVAL
  ACTIVE
  SOLD
  EXPIRED
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}


// =================================================================
// 2. Main Models
// =================================================================

model User {
  id                    String                   @id @default(uuid())
  email                 String                   @unique
  password              String
  fullName              String?
  roleId                String?
  habilitationStatus    UserHabilitationStatus   @default(PENDING_DOCUMENTS)
  accountType           AccountType              @default(PHYSICAL)
  avatarUrl             String?
  dataAiHint            String?                  @db.VarChar(100)
  badges                Json?
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  
  cpf                   String?                  @unique
  rgNumber              String?
  rgIssuer              String?
  rgIssueDate           DateTime?
  rgState               String?
  dateOfBirth           DateTime?
  cellPhone             String?
  homePhone             String?
  gender                String?
  profession            String?
  nationality           String?                  @default("Brasileiro(a)")
  maritalStatus         String?
  propertyRegime        String?
  spouseName            String?
  spouseCpf             String?
  zipCode               String?
  street                String?
  number                String?
  complement            String?
  neighborhood          String?
  city                  String?
  state                 String?
  optInMarketing        Boolean?                 @default(false)
  razaoSocial           String?
  cnpj                  String?                  @unique
  inscricaoEstadual     String?
  website               String?
  responsibleName       String?
  responsibleCpf        String?
  
  sellerId              String?                  @unique
  
  roles                 UsersOnRoles[]
  seller                Seller?                  @relation(fields: [sellerId], references: [id])
  documents             UserDocument[]
  bids                  Bid[]
  userLotMaxBids        UserLotMaxBid[]
  wins                  UserWin[]
  auctioneerProfile     Auctioneer?
}


model Role {
  id            String   @id @default(uuid())
  name          String
  nameNormalized String   @unique
  description   String?
  permissions   Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  users         UsersOnRoles[]
}

model UsersOnRoles {
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  role         Role     @relation(fields: [roleId], references: [id])
  roleId       String
  assignedAt   DateTime @default(now())
  assignedBy   String // e.g., 'system-signup', 'admin-panel'

  @@id([userId, roleId])
}

model LotCategory {
  id                   String        @id @default(uuid())
  name                 String        @unique
  slug                 String        @unique
  description          String?       @db.VarChar(500)
  hasSubcategories     Boolean?
  logoUrl              String?
  logoMediaId          String?       @db.VarChar(100)
  dataAiHintLogo       String?       @db.VarChar(100)
  coverImageUrl        String?
  coverImageMediaId    String?       @db.VarChar(100)
  dataAiHintCover      String?       @db.VarChar(100)
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?       @db.VarChar(100)
  dataAiHintMegaMenu   String?       @db.VarChar(100)
  
  lots                 Lot[]
  bens                 Bem[]
  auctions             Auction[]
  subcategories        Subcategory[]
  directSaleOffers     DirectSaleOffer[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subcategory {
  id                String       @id @default(uuid())
  name              String
  slug              String?
  parentCategoryId  String
  description       String?      @db.VarChar(500)
  displayOrder      Int?         @default(0)
  iconUrl           String?
  iconMediaId       String?      @db.VarChar(100)
  dataAiHintIcon    String?      @db.VarChar(100)

  parentCategory LotCategory @relation(fields: [parentCategoryId], references: [id])
  lots           Lot[]
  bens           Bem[]
}

model State {
  id      String   @id @default(uuid())
  name    String
  uf      String   @unique
  slug    String?  @unique
  
  cities  City[]
  districts JudicialDistrict[]
  lots    Lot[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id      String  @id @default(uuid())
  name    String
  slug    String?
  stateId String
  stateUf String?
  ibgeCode String? @unique
  
  state State @relation(fields: [stateId], references: [id])
  lots  Lot[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model UserWin {
    id String @id @default(uuid())
    userId String
    lotId String @unique
    winningBidAmount Float
    winDate DateTime @default(now())
    paymentStatus PaymentStatus @default(PENDENTE)
    invoiceUrl String?

    user User @relation(fields: [userId], references: [id])
    lot  Lot @relation(fields: [lotId], references: [id])
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  lot  Lot  @relation(fields: [lotId], references: [id])

  @@unique([userId, lotId])
}

model Auctioneer {
  id                  String     @id @default(uuid())
  publicId            String     @unique
  slug                String     @unique
  name                String
  registrationNumber  String?    @db.VarChar(50)
  contactName         String?    @db.VarChar(150)
  email               String?    @db.VarChar(150)
  phone               String?    @db.VarChar(20)
  address             String?    @db.VarChar(200)
  city                String?    @db.VarChar(100)
  state               String?    @db.VarChar(50)
  zipCode             String?    @db.VarChar(10)
  website             String?
  logoUrl             String?
  logoMediaId         String?    @db.VarChar(100)
  dataAiHintLogo      String?    @db.VarChar(100)
  description         String?    @db.Text
  userId              String?    @unique
  
  user                    User?     @relation(fields: [userId], references: [id])
  auctions                Auction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Seller {
  id                  String       @id @default(uuid())
  publicId            String       @unique
  slug                String       @unique
  name                String       @unique
  contactName         String?      @db.VarChar(150)
  email               String?      @db.VarChar(150)
  phone               String?      @db.VarChar(20)
  address             String?      @db.VarChar(200)
  city                String?      @db.VarChar(100)
  state               String?      @db.VarChar(50)
  zipCode             String?      @db.VarChar(10)
  website             String?
  logoUrl             String?
  logoMediaId         String?      @db.VarChar(100)
  dataAiHintLogo      String?      @db.VarChar(100)
  description         String?      @db.Text
  isJudicial          Boolean      @default(false)
  judicialBranchId    String?      @unique
  
  user                User?
  judicialBranch      JudicialBranch? @relation(fields: [judicialBranchId], references: [id])
  auctions            Auction[]
  lots                Lot[]
  bens                Bem[]
  directSaleOffers    DirectSaleOffer[]
  judicialProcesses   JudicialProcess[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Court {
  id      String   @id @default(uuid())
  name    String
  slug    String?
  stateUf String?
  website String?
  
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions            Auction[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JudicialDistrict {
  id      String   @id @default(uuid())
  name    String
  slug    String?  @unique
  courtId String?
  stateId String?
  zipCode String?  @db.VarChar(10)

  court   Court?  @relation(fields: [courtId], references: [id])
  state   State?  @relation(fields: [stateId], references: [id])
  branches JudicialBranch[]
  judicialProcesses JudicialProcess[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JudicialBranch {
  id         String   @id @default(uuid())
  name       String
  slug       String?  @unique
  districtId String?
  contactName String? @db.VarChar(150)
  phone      String?  @db.VarChar(20)
  email      String?  @db.VarChar(150)
  
  district   JudicialDistrict? @relation(fields: [districtId], references: [id])
  seller     Seller?
  judicialProcesses JudicialProcess[]
  auctions   Auction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model JudicialProcess {
  id             String    @id @default(uuid())
  publicId       String?   @unique
  processNumber  String
  isElectronic   Boolean   @default(true)
  courtId        String?
  districtId     String?
  branchId       String?
  sellerId       String?

  court        Court?             @relation(fields: [courtId], references: [id])
  district     JudicialDistrict?  @relation(fields: [districtId], references: [id])
  branch       JudicialBranch?    @relation(fields: [branchId], references: [id])
  seller       Seller?            @relation(fields: [sellerId], references: [id])
  parties      JudicialParty[]
  bens         Bem[]
  auctions     Auction[]
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}


model JudicialParty {
  id             String @id @default(uuid())
  processId      String
  name           String
  documentNumber String? @db.VarChar(50)
  partyType      ProcessPartyType

  process JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}


model Bem {
  id                  String   @id @default(uuid())
  publicId            String?  @unique
  title               String   @db.VarChar(200)
  description         String?  @db.Text
  status              String   @default("DISPONIVEL")
  categoryId          String?
  subcategoryId       String?
  judicialProcessId   String?
  sellerId            String?
  evaluationValue     Float?
  imageUrl            String?
  imageMediaId        String?  @db.VarChar(100)
  galleryImageUrls    Json?
  mediaItemIds        Json?
  dataAiHint          String?  @db.VarChar(100)
  locationCity        String?  @db.VarChar(100)
  locationState       String?  @db.VarChar(100)
  address             String?
  latitude            Float?
  longitude           Float?

  category          LotCategory?       @relation(fields: [categoryId], references: [id])
  subcategory       Subcategory?       @relation(fields: [subcategoryId], references: [id])
  judicialProcess   JudicialProcess?   @relation(fields: [judicialProcessId], references: [id])
  seller            Seller?            @relation(fields: [sellerId], references: [id])
  lots              LotBens[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model LotBens {
  lot      Lot    @relation(fields: [lotId], references: [id])
  lotId    String
  bem      Bem    @relation(fields: [bemId], references: [id])
  bemId    String
  
  @@id([lotId, bemId])
}


model Auction {
  id                              String        @id @default(uuid())
  publicId                        String?       @unique
  slug                            String?       @unique
  title                           String
  description                     String?       @db.Text
  status                          AuctionStatus @default(RASCUNHO)
  auctionDate                     DateTime?
  endDate                         DateTime?
  auctioneerId                    String?
  sellerId                        String?
  categoryId                      String?
  auctionType                     AuctionStatus? // Should be AuctionType
  imageUrl                        String?
  imageMediaId                    String?       @db.VarChar(100)
  documentsUrl                    String?
  visits                          Int?          @default(0)
  totalLots                       Int?          @default(0)
  initialOffer                    Float?
  isFavorite                      Boolean       @default(false)
  dataAiHint                      String?       @db.VarChar(100)
  estimatedRevenue                Float?
  achievedRevenue                 Float?
  totalHabilitatedUsers           Int?
  additionalTriggers              Json?
  softCloseEnabled                Boolean?
  softCloseMinutes                Int?
  automaticBiddingEnabled         Boolean?
  silentBiddingEnabled            Boolean?
  allowMultipleBidsPerUser        Boolean?
  allowInstallmentBids            Boolean?
  isFeaturedOnMarketplace         Boolean?
  marketplaceAnnouncementTitle    String?
  evaluationReportUrl             String?
  auctionCertificateUrl           String?
  sellingBranch                   String?
  auctionStages                   Json?
  decrementAmount                 Float?
  decrementIntervalSeconds        Int?
  floorPrice                      Float?
  autoRelistSettings              Json?
  
  judicialProcessId               String?
  courtId                         String?
  branchId                        String?

  auctioneer         Auctioneer?        @relation(fields: [auctioneerId], references: [id])
  seller             Seller?            @relation(fields: [sellerId], references: [id])
  category           LotCategory?       @relation(fields: [categoryId], references: [id])
  judicialProcess    JudicialProcess?   @relation(fields: [judicialProcessId], references: [id])
  court              Court?             @relation(fields: [courtId], references: [id])
  branch             JudicialBranch?    @relation(fields: [branchId], references: [id])
  
  lots               Lot[]
  bids               Bid[]
  auctionHabilitations AuctionHabilitation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuctionHabilitation {
  userId     String
  auctionId  String
  habilitatedAt DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])
  auction    Auction  @relation(fields: [auctionId], references: [id])

  @@id([userId, auctionId])
}


model Lot {
  id                   String       @id @default(uuid())
  publicId             String?      @unique
  auctionId            String
  slug                 String?
  number               String?      @db.VarChar(20)
  title                String
  description          String?      @db.Text
  price                Float
  initialPrice         Float?
  secondInitialPrice   Float?
  bidIncrementStep     Float?
  status               LotStatus    @default(EM_BREVE)
  bidsCount            Int?         @default(0)
  views                Int?         @default(0)
  isFeatured           Boolean?     @default(false)
  isExclusive          Boolean?     @default(false)
  discountPercentage   Int?
  additionalTriggers   Json?
  imageUrl             String?
  imageMediaId         String?      @db.VarChar(100)
  galleryImageUrls     Json?
  mediaItemIds         Json?
  type                 String?      @db.VarChar(100)
  categoryId           String?
  subcategoryId        String?
  sellerId             String?
  auctioneerId         String?
  cityId               String?
  stateId              String?
  cityName             String?      @db.VarChar(100)
  stateUf              String?      @db.VarChar(2)
  latitude             Float?
  longitude            Float?
  mapAddress           String?
  mapEmbedUrl          String?      @db.VarChar(500)
  mapStaticImageUrl    String?
  endDate              DateTime?
  auctionDate          DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate    DateTime?
  condition            String?      @db.VarChar(100)
  dataAiHint           String?      @db.VarChar(100)
  winnerId             String?
  winningBidTermUrl    String?
  allowInstallmentBids Boolean?     @default(false)
  
  bens                 LotBens[]
  auction              Auction      @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category             LotCategory? @relation(fields: [categoryId], references: [id])
  subcategory          Subcategory? @relation(fields: [subcategoryId], references: [id])
  seller               Seller?      @relation(fields: [sellerId], references: [id])
  city                 City?        @relation(fields: [cityId], references: [id])
  state                State?       @relation(fields: [stateId], references: [id])
  
  bids                 Bid[]
  userLotMaxBids       UserLotMaxBid[]
  wins                 UserWin[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bid {
  id            String   @id @default(uuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String?  @db.VarChar(150)
  amount        Float
  timestamp     DateTime @default(now())
  
  lot     Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder  User    @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}


model DirectSaleOffer {
  id                   String                 @id @default(uuid())
  publicId             String?                @unique
  title                String
  description          String?                @db.Text
  offerType            DirectSaleOfferType?
  price                Float?
  minimumOfferPrice    Float?
  status               DirectSaleOfferStatus? @default(PENDING_APPROVAL)
  categoryId           String?
  sellerId             String?
  imageUrl             String?
  imageMediaId         String?                @db.VarChar(100)
  dataAiHint           String?                @db.VarChar(100)
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int?                   @default(0)
  expiresAt            DateTime?

  category             LotCategory? @relation(fields: [categoryId], references: [id])
  seller               Seller?      @relation(fields: [sellerId], references: [id])

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}


model PlatformSettings {
  id                             String   @id @default(uuid())
  siteTitle                      String?  @db.VarChar(100)
  siteTagline                    String?  @db.VarChar(200)
  galleryImageBasePath           String?  @db.VarChar(200)
  storageProvider                String?  @db.VarChar(50)
  firebaseStorageBucket          String?  @db.VarChar(200)
  activeThemeName                String?  @db.VarChar(100)
  themes                         Json?
  platformPublicIdMasks          Json?
  homepageSections               Json?
  mentalTriggerSettings          Json?
  sectionBadgeVisibility         Json?
  mapSettings                    Json?
  searchPaginationType           String?  @db.VarChar(50)
  searchItemsPerPage             Int?
  searchLoadMoreCount            Int?
  showCountdownOnLotDetail       Boolean?
  showCountdownOnCards           Boolean?
  showRelatedLotsOnLotDetail     Boolean?
  relatedLotsCount               Int?
  defaultUrgencyTimerHours       Int?
  variableIncrementTable         Json?
  biddingSettings                Json?
  defaultListItemsPerPage        Int?
  
  updatedAt DateTime? @updatedAt
}

model MediaItem {
  id                String    @id @default(uuid())
  fileName          String
  storagePath       String
  title             String?
  altText           String?
  caption           String?   @db.VarChar(500)
  description       String?   @db.Text
  mimeType          String    @db.VarChar(100)
  sizeBytes         Int?
  urlOriginal       String
  urlThumbnail      String?
  urlMedium         String?
  urlLarge          String?
  linkedLotIds      Json?
  judicialProcessId String?
  dataAiHint        String?   @db.VarChar(100)
  uploadedBy        String? // userId or system identifier
  
  uploadedAt        DateTime @default(now())
}

model DocumentType {
    id String @id @default(uuid())
    name String @unique
    description String?
    isRequired Boolean @default(true)
    appliesTo String // Comma-separated: PHYSICAL,LEGAL,ALL,PROCESS
    
    userDocuments UserDocument[]
}

model UserDocument {
    id String @id @default(uuid())
    userId String
    documentTypeId String
    status UserDocumentStatus @default(PENDING_ANALYSIS)
    fileUrl String
    fileName String?
    rejectionReason String? @db.Text

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    documentType DocumentType @relation(fields: [documentTypeId], references: [id])
    
    @@unique([userId, documentTypeId])
}


model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentTemplate {
  id        String   @id @default(uuid())
  name      String
  type      DocumentTemplateType
  content   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
