// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// MODELOS DE ENTIDADES PRINCIPAIS
// =================================================================

model Auction {
  id                               String    @id @default(uuid())
  publicId                         String    @unique
  slug                             String    @unique
  title                            String
  description                      String?   @db.Text
  status                           String    @default("RASCUNHO")
  auctionDate                      DateTime
  endDate                          DateTime?
  visits                           Int       @default(0)
  totalLots                        Int       @default(0)
  initialOffer                     Float?
  isFavorite                       Boolean   @default(false)
  dataAiHint                       String?
  auctionType                      String?
  imageUrl                         String?
  imageMediaId                     String?
  documentsUrl                     String?
  evaluationReportUrl              String?
  auctionCertificateUrl            String?
  sellingBranch                    String?
  automaticBiddingEnabled          Boolean   @default(false)
  silentBiddingEnabled             Boolean   @default(false)
  allowMultipleBidsPerUser         Boolean   @default(true)
  allowInstallmentBids             Boolean   @default(false)
  softCloseEnabled                 Boolean   @default(false)
  softCloseMinutes                 Int       @default(2)
  estimatedRevenue                 Float?
  achievedRevenue                  Float?
  totalHabilitatedUsers            Int?
  isFeaturedOnMarketplace          Boolean   @default(false)
  marketplaceAnnouncementTitle     String?
  decrementAmount                  Float?
  decrementIntervalSeconds         Int?
  floorPrice                       Float?
  autoRelistSettings               Json?
  createdAt                        DateTime  @default(now())
  updatedAt                        DateTime  @updatedAt
  judicialProcessId                String?
  categoryId                       String?
  sellerId                         String?
  auctioneerId                     String?
  mapAddress                       String?

  lots                             Lot[]
  bids                             Bid[]
  auctioneer                       Auctioneer? @relation(fields: [auctioneerId], references: [id])
  seller                           Seller?     @relation(fields: [sellerId], references: [id])
  category                         LotCategory? @relation(fields: [categoryId], references: [id])
  auctionStages                    AuctionStage[]
  judicialProcess                  JudicialProcess? @relation(fields: [judicialProcessId], references: [id])

  @@index([sellerId])
  @@index([auctioneerId])
  @@index([categoryId])
  @@index([judicialProcessId])
}

model AuctionStage {
    id            String    @id @default(uuid())
    auctionId     String
    name          String
    startDate     DateTime
    endDate       DateTime
    initialPrice  Float?

    auction       Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)

    @@index([auctionId])
}

model Lot {
  id                       String   @id @default(uuid())
  publicId                 String   @unique
  auctionId                String
  number                   String?
  title                    String
  description              String?  @db.Text
  price                    Float
  initialPrice             Float?
  secondInitialPrice       Float?
  bidIncrementStep         Float?
  status                   String   @default("EM_BREVE")
  bidsCount                Int      @default(0)
  views                    Int      @default(0)
  isFeatured               Boolean  @default(false)
  isExclusive              Boolean  @default(false)
  discountPercentage       Int?
  additionalTriggers       Json?
  imageUrl                 String?
  imageMediaId             String?
  galleryImageUrls         Json?
  mediaItemIds             Json?
  type                     String
  condition                String?
  dataAiHint               String?
  winningBidTermUrl        String?
  allowInstallmentBids     Boolean  @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  mapAddress               String?
  mapEmbedUrl              String?  @db.Text
  mapStaticImageUrl        String?
  latitude                 Float?
  longitude                Float?
  endDate                  DateTime?
  lotSpecificAuctionDate   DateTime?
  secondAuctionDate        DateTime?
  auctionName              String?
  sellerName               String?
  subcategoryId            String?
  stateId                  String?
  cityId                   String?
  winnerId                 String?
  sellerId                 String?
  auctioneerId             String?
  categoryId               String?

  bens                     LotBens[]
  bids                     Bid[]
  reviews                  Review[]
  questions                LotQuestion[]
  maxBids                  UserLotMaxBid[]
  wins                     UserWin[]
  auction                  Auction           @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                 LotCategory?      @relation(fields: [categoryId], references: [id])
  subcategory              Subcategory?      @relation(fields: [subcategoryId], references: [id])
  seller                   Seller?           @relation(fields: [sellerId], references: [id])
  auctioneer               Auctioneer?       @relation(fields: [auctioneerId], references: [id])
  city                     City?             @relation(fields: [cityId], references: [id])
  state                    State?            @relation(fields: [stateId], references: [id])
  winner                   User?             @relation(fields: [winnerId], references: [id], name: "LotWinner")


  @@index([auctionId])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([sellerId])
  @@index([auctioneerId])
  @@index([winnerId])
  @@index([stateId])
  @@index([cityId])
}

model Bem {
    id                        String   @id @default(uuid())
    publicId                  String   @unique
    title                     String
    description               String?  @db.Text
    status                    String   @default("DISPONIVEL")
    evaluationValue           Float?
    imageUrl                  String?
    imageMediaId              String?
    galleryImageUrls          Json?
    mediaItemIds              Json?
    dataAiHint                String?
    locationCity              String?
    locationState             String?
    address                   String?
    latitude                  Float?
    longitude                 Float?
    createdAt                 DateTime @default(now())
    updatedAt                 DateTime @updatedAt
    judicialProcessId         String?
    sellerId                  String?
    categoryId                String?
    subcategoryId             String?

    lots                      LotBens[]
    judicialProcess           JudicialProcess?  @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
    seller                    Seller?           @relation(fields: [sellerId], references: [id], onDelete: SetNull)
    category                  LotCategory?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
    subcategory               Subcategory?      @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)

    plate                     String?
    make                      String?
    model                     String?
    version                   String?
    year                      Int?
    modelYear                 Int?
    mileage                   Int?
    color                     String?
    fuelType                  String?
    transmissionType          String?
    bodyType                  String?
    vin                       String?
    renavam                   String?
    enginePower               String?
    numberOfDoors             Int?
    vehicleOptions            String? @db.Text
    detranStatus              String?
    debts                     String? @db.Text
    runningCondition          String?
    bodyCondition             String?
    tiresCondition            String?
    hasKey                    Boolean?

    propertyRegistrationNumber String?
    iptuNumber                String?
    isOccupied                Boolean?
    totalArea                 Float?
    builtArea                 Float?
    bedrooms                  Int?
    suites                    Int?
    bathrooms                 Int?
    parkingSpaces             Int?
    constructionType          String?
    finishes                  String? @db.Text
    infrastructure            String? @db.Text
    condoDetails              String? @db.Text
    improvements              String? @db.Text
    topography                String?
    liensAndEncumbrances      String? @db.Text
    propertyDebts             String? @db.Text
    unregisteredRecords       String? @db.Text
    hasHabiteSe               Boolean?
    zoningRestrictions        String? @db.Text
    amenities                 Json?

    brand                     String?
    serialNumber              String?
    itemCondition             String?
    specifications            String? @db.Text
    includedAccessories       String? @db.Text
    batteryCondition          String?
    hasInvoice                Boolean?
    hasWarranty               Boolean?
    repairHistory             String? @db.Text
    
    applianceCapacity         String?
    voltage                   String?
    applianceType             String?
    additionalFunctions       String? @db.Text
    
    hoursUsed                 Int?
    engineType                String?
    capacityOrPower           String?
    maintenanceHistory        String? @db.Text
    installationLocation      String?
    compliesWithNR            String?
    operatingLicenses         String?
    
    breed                     String?
    age                       String?
    sex                       String?
    weight                    String?
    individualId              String?
    purpose                   String?
    sanitaryCondition         String? @db.Text
    lineage                   String? @db.Text
    isPregnant                Boolean?
    specialSkills             String? @db.Text
    gtaDocument               String?
    breedRegistryDocument     String?
    
    furnitureType             String?
    material                  String?
    style                     String?
    dimensions                String?
    pieceCount                Int?
    
    jewelryType               String?
    metal                     String?
    gemstones                 String? @db.Text
    totalWeight               String?
    jewelrySize               String?
    authenticityCertificate   String?
    
    workType                  String?
    artist                    String?
    period                    String?
    technique                 String?
    provenance                String? @db.Text
    
    boatType                  String?
    boatLength                String?
    hullMaterial              String?
    onboardEquipment          String? @db.Text
    
    productName               String?
    quantity                  String?
    packagingType             String?
    expirationDate            DateTime?
    storageConditions         String? @db.Text
    
    preciousMetalType         String?
    purity                    String?
    
    forestGoodsType           String?
    volumeOrQuantity          String?
    species                   String?
    dofNumber                 String?
    
    @@index([judicialProcessId])
    @@index([sellerId])
    @@index([categoryId])
}


model LotBens {
  lotId String
  bemId String
  lot   Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bem   Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)

  @@id([lotId, bemId])
  @@index([bemId])
}


// =================================================================
// MODELOS DE USUÁRIOS E PERMISSÕES
// =================================================================

model User {
  id                  String   @id @default(uuid())
  email               String   @unique
  password            String
  fullName            String?
  habilitationStatus  String   @default("PENDING_DOCUMENTS")
  accountType         String   @default("PHYSICAL")
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  cpf                 String?
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  optInMarketing      Boolean  @default(false)

  razaoSocial         String?
  cnpj                String?
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?

  bids                Bid[]
  reviews             Review[]
  questions           LotQuestion[]
  answers             LotQuestion[] @relation("QuestionAnsweredBy")
  maxBids             UserLotMaxBid[]
  wins                UserWin[]
  uploadedMedia       MediaItem[]
  documents           UserDocument[]
  notifications       Notification[]
  habilitations       AuctionHabilitation[]
  roles               UsersOnRoles[]
  auctioneerProfile   Auctioneer?
  sellerProfile       Seller?
  wonLots             Lot[]         @relation("LotWinner")

  @@index([email])
}


model Role {
  id              String   @id @default(uuid())
  name            String   @unique
  nameNormalized  String   @unique
  description     String?
  permissions     Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  users           UsersOnRoles[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
  @@index([roleId])
}


// =================================================================
// MODELOS DE APOIO E TRANSAÇÕES
// =================================================================
model LotCategory {
  id                   String            @id @default(uuid())
  name                 String            @unique
  slug                 String            @unique
  description          String?           @db.Text
  hasSubcategories     Boolean           @default(false)
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  
  auctions             Auction[]
  lots                 Lot[]
  bens                 Bem[]
  subcategories        Subcategory[]
  directSaleOffers     DirectSaleOffer[]
}

model Subcategory {
  id                 String      @id @default(uuid())
  name               String
  slug               String      @unique
  description        String?
  displayOrder       Int         @default(0)
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  parentCategoryId   String
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  
  lots               Lot[]
  bens               Bem[]

  @@index([parentCategoryId])
}

model Bid {
  id            String   @id @default(uuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())
  
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([bidderId])
  @@index([auctionId])
}

model UserWin {
    id                 String   @id @default(uuid())
    userId             String
    lotId              String   @unique // A lot can only be won by one user
    winningBidAmount   Float
    winDate            DateTime @default(now())
    paymentStatus      String   @default("PENDENTE")
    invoiceUrl         String?
    
    user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    lot                Lot      @relation(fields: [lotId], references: [id])

    @@index([userId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model AuctionHabilitation {
  id        String   @id @default(uuid())
  userId    String
  auctionId String
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@unique([userId, auctionId])
  @@index([auctionId])
}


// =================================================================
// MODELOS DE ENTIDADES DE COMITENTES/LEILOEIROS
// =================================================================

model Auctioneer {
  id                 String    @id @default(uuid())
  publicId           String    @unique
  slug               String    @unique
  name               String
  registrationNumber String?
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?   @db.Text
  userId             String?   @unique
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  user               User?     @relation(fields: [userId], references: [id])
  auctions           Auction[]
  lots               Lot[]
}

model Seller {
  id                String    @id @default(uuid())
  publicId          String    @unique
  slug              String    @unique
  name              String    @unique
  contactName       String?
  email             String?
  phone             String?
  address           String?
  city              String?
  state             String?
  zipCode           String?
  website           String?
  logoUrl           String?
  logoMediaId       String?
  dataAiHintLogo    String?
  description       String?   @db.Text
  userId            String?   @unique
  isJudicial        Boolean   @default(false)
  judicialBranchId  String?   @unique // A seller can only represent one judicial branch
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  user              User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  judicialBranch    JudicialBranch? @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  auctions          Auction[]
  lots              Lot[]
  bens              Bem[]
  judicialProcesses JudicialProcess[]
  directSaleOffers  DirectSaleOffer[]
}

// =================================================================
// MODELOS DE ENTIDADES JUDICIAIS
// =================================================================

model Court {
  id                String    @id @default(uuid())
  name              String
  slug              String    @unique
  stateUf           String
  website           String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  districts         JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialDistrict {
  id                String    @id @default(uuid())
  name              String
  slug              String    @unique
  zipCode           String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  courtId           String
  stateId           String
  
  court             Court     @relation(fields: [courtId], references: [id])
  state             State     @relation(fields: [stateId], references: [id])
  branches          JudicialBranch[]
  judicialProcesses JudicialProcess[]
  
  @@index([courtId])
  @@index([stateId])
}

model JudicialBranch {
  id                String    @id @default(uuid())
  name              String
  slug              String    @unique
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  districtId        String
  
  district          JudicialDistrict @relation(fields: [districtId], references: [id])
  judicialProcesses JudicialProcess[]
  seller            Seller?
  
  @@index([districtId])
}

model JudicialProcess {
  id                String    @id @default(uuid())
  publicId          String    @unique
  processNumber     String
  isElectronic      Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  courtId           String?
  districtId        String?
  branchId          String?
  sellerId          String?
  
  court             Court?    @relation(fields: [courtId], references: [id])
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch            JudicialBranch?   @relation(fields: [branchId], references: [id])
  seller            Seller?   @relation(fields: [sellerId], references: [id])
  parties           JudicialParty[]
  bens              Bem[]
  auctions          Auction[]

  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
  @@index([sellerId])
}

model JudicialParty {
  id             String @id @default(uuid())
  processId      String
  name           String
  documentNumber String?
  partyType      String
  
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@index([processId])
}


// =================================================================
// MODELOS DE CONTEÚDO E CONFIGURAÇÃO
// =================================================================

model State {
  id          String   @id @default(uuid())
  name        String
  uf          String   @unique
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  cities      City[]
  districts   JudicialDistrict[]
  lots        Lot[]
}

model City {
  id        String   @id @default(uuid())
  name      String
  slug      String
  stateUf   String
  ibgeCode  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stateId   String
  
  state     State    @relation(fields: [stateId], references: [id])
  lots      Lot[]

  @@index([stateId])
}

model MediaItem {
  id              String   @id @default(uuid())
  fileName        String
  storagePath     String
  title           String?
  altText         String?
  caption         String?
  description     String?
  mimeType        String
  sizeBytes       Int
  urlOriginal     String
  urlThumbnail    String?
  urlMedium       String?
  urlLarge        String?
  linkedLotIds    Json?
  dataAiHint      String?
  uploadedAt      DateTime @default(now())
  uploadedBy      String?
  uploadedByUserId String?

  user             User?    @relation(fields: [uploadedByUserId], references: [id], onDelete: SetNull)
  judicialProcessId String?
  
  @@index([uploadedByUserId])
  @@index([judicialProcessId])
}

model DocumentType {
    id          String   @id @default(uuid())
    name        String   @unique
    description String?
    isRequired  Boolean  @default(true)
    appliesTo   String   // e.g. "PHYSICAL,LEGAL,ALL"
    
    userDocuments UserDocument[]
}

model UserDocument {
    id              String        @id @default(uuid())
    userId          String
    documentTypeId  String
    status          String        @default("PENDING_ANALYSIS")
    fileUrl         String
    fileName        String?
    rejectionReason String?
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
    
    user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    documentType    DocumentType  @relation(fields: [documentTypeId], references: [id])
    
    @@unique([userId, documentTypeId])
    @@index([documentTypeId])
}

model Review {
  id              String   @id @default(uuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())
  
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([userId])
}

model LotQuestion {
  id                  String   @id @default(uuid())
  lotId               String
  auctionId           String
  userId              String
  userDisplayName     String
  questionText        String
  isPublic            Boolean  @default(true)
  answerText          String?
  answeredAt          DateTime?
  answeredByUserId    String?
  answeredByUserDisplayName String?
  createdAt           DateTime @default(now())

  lot                  Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answeredBy           User?    @relation("QuestionAnsweredBy", fields: [answeredByUserId], references: [id])

  @@index([lotId])
  @@index([userId])
  @@index([answeredByUserId])
}

model DirectSaleOffer {
    id                      String       @id @default(uuid())
    publicId                String       @unique
    title                   String
    description             String?      @db.Text
    offerType               String       
    price                   Float?
    minimumOfferPrice       Float?
    status                  String       @default("ACTIVE")
    itemsIncluded           Json?
    views                   Int          @default(0)
    expiresAt               DateTime?
    createdAt               DateTime     @default(now())
    updatedAt               DateTime     @updatedAt
    locationCity            String?
    locationState           String?
    imageUrl                String?
    imageMediaId            String?
    dataAiHint              String?
    dataAiHintSellerLogo    String?
    galleryImageUrls        Json?
    mediaItemIds            Json?
    categoryId              String
    category                LotCategory  @relation(fields: [categoryId], references: [id])
    sellerId                String
    seller                  Seller       @relation(fields: [sellerId], references: [id])
    sellerName              String?
    sellerLogoUrl           String?
    
    @@index([categoryId])
    @@index([sellerId])
}

model UserLotMaxBid {
  id         String   @id @default(uuid())
  userId     String
  lotId      String
  maxAmount  Float
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot        Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
  @@index([lotId])
}

model DocumentTemplate {
  id          String   @id @default(uuid())
  name        String   @unique
  type        String
  content     String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model PlatformSettings {
  id                           String    @id @default("global")
  siteTitle                    String?
  siteTagline                  String?
  logoUrl                      String?
  faviconUrl                   String?
  galleryImageBasePath         String    @default("/uploads/media/")
  storageProvider              String    @default("local")
  firebaseStorageBucket        String?
  activeThemeName              String?
  themes                       Json?
  platformPublicIdMasks        Json?
  homepageSections             Json?
  mentalTriggerSettings        Json?
  sectionBadgeVisibility       Json?
  mapSettings                  Json?
  searchPaginationType         String    @default("loadMore")
  searchItemsPerPage           Int       @default(12)
  searchLoadMoreCount          Int       @default(12)
  showCountdownOnLotDetail     Boolean   @default(true)
  showCountdownOnCards         Boolean   @default(true)
  showRelatedLotsOnLotDetail   Boolean   @default(true)
  relatedLotsCount             Int       @default(5)
  defaultUrgencyTimerHours     Int?
  variableIncrementTable       Json?
  biddingSettings              Json?
  defaultListItemsPerPage      Int?      @default(10)
  updatedAt                    DateTime  @updatedAt
}
