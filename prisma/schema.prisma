// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// ====================================================================
// ENUMS - Definem os valores possíveis para campos de status e tipo.
// ====================================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDENTE_DOCUMENTOS
  PENDENTE_ANALISE
  HABILITADO
  REJEITADO_DOCUMENTOS
  BLOQUEADO
}

enum UserDocumentStatus {
  NAO_ENVIADO
  SUBMETIDO
  PENDENTE_ANALISE
  APROVADO
  REJEITADO
}

enum TipoLeilao {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  HOLANDES
  SILENCIOSO
}

enum StatusLeilao {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum StatusLote {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
  SUSPENSO
}

enum StatusBem {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum StatusPagamento {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum TipoOfertaDireta {
  COMPRA_IMEDIATA
  ACEITA_PROPOSTAS
}

enum StatusOfertaDireta {
  ATIVA
  VENDIDA
  EXPIRADA
  PENDENTE_APROVACAO
}

enum TipoDocumentoTemplate {
  AUTO_ARREMATACAO
  LAUDO_AVALIACAO
  CERTIFICADO_LEILAO
}

enum TipoParteProcessual {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

// ====================================================================
// MODELOS DE USUÁRIOS E AUTENTICAÇÃO
// ====================================================================

model User {
  id                  String                   @id @default(cuid())
  email               String                   @unique
  fullName            String?
  password            String
  roleId              String?
  habilitationStatus  UserHabilitationStatus?  @default(PENDENTE_DOCUMENTOS)
  accountType         AccountType?             @default(PHYSICAL)
  badges              String?                  @db.Text
  avatarUrl           String?
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt

  cpf                 String?                  @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?

  optInMarketing      Boolean                  @default(false)

  // Relações
  role                Role?                    @relation(fields: [roleId], references: [id])
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  maxBids             UserLotMaxBid[]
  notifications       Notification[]
  uploadedMedia       MediaItem[]
  reviews             Review[]
  questions           LotQuestion[]
  answers             LotQuestion[]            @relation("AnsweredBy")
  blogPosts           BlogPost[]

  @@index([email])
}

model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  permissions     String[]     @db.Text
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  users           User[]
}

// ====================================================================
// MODELOS DE CONTEÚDO E CATEGORIZAÇÃO
// ====================================================================

model LotCategory {
  id                 String        @id @default(cuid())
  name               String        @unique
  slug               String        @unique
  description        String?       @db.Text
  hasSubcategories   Boolean       @default(false)
  
  logoUrl            String?
  coverImageUrl      String?
  megaMenuImageUrl   String?
  dataAiHintLogo     String?
  dataAiHintCover    String?
  dataAiHintMegaMenu String?
  
  auctions           Auction[]
  lots               Lot[]
  subcategories      Subcategory[]
  directSaleOffers   DirectSaleOffer[]

  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

model Subcategory {
  id               String      @id @default(cuid())
  name             String
  slug             String      @unique
  description      String?
  displayOrder     Int         @default(0)
  
  parentCategoryId String
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id])

  lots             Lot[]
  
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model MediaItem {
  id             String      @id @default(cuid())
  fileName       String
  storagePath    String      @unique
  title          String?
  altText        String?
  caption        String?
  description    String?     @db.Text
  mimeType       String
  sizeBytes      Int
  
  uploadedById   String?
  uploadedBy     User?       @relation(fields: [uploadedById], references: [id], onDelete: SetNull, onUpdate: Cascade)

  // Relações
  auctionLogos     Auctioneer[]  @relation("AuctioneerLogo")
  sellerLogos      Seller[]      @relation("SellerLogo")
  lots             Lot[]         @relation("LotGallery")
  bens             Bem[]         @relation("BemGallery")
  blogPosts        BlogPost[]    @relation("BlogPostFeaturedImage")

  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}


// ====================================================================
// MODELOS DE LEILÃO E ITENS
// ====================================================================

model Auction {
  id                             String       @id @default(cuid())
  publicId                       String       @unique
  title                          String       @db.VarChar(255)
  description                    String?      @db.Text
  status                         StatusLeilao @default(RASCUNHO)
  auctionType                    TipoLeilao?  @default(EXTRAJUDICIAL)
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json?
  
  categoryId                     String
  auctioneerId                   String
  sellerId                       String?
  judicialProcessId              String?
  
  city                           String?
  state                          String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  
  // Imagem
  imageUrl                       String?
  imageMediaId                   String?
  dataAiHint                     String?
  
  // Estatísticas e Configurações
  visits                         Int          @default(0)
  totalLots                      Int          @default(0)
  initialOffer                   Float?
  bidsCount                      Int          @default(0)
  estimatedRevenue               Float?
  achievedRevenue                Float?       @default(0)
  totalHabilitatedUsers          Int?
  
  automaticBiddingEnabled        Boolean?     @default(false)
  silentBiddingEnabled           Boolean?     @default(false)
  allowMultipleBidsPerUser       Boolean?     @default(true)
  allowInstallmentBids           Boolean?     @default(false)
  softCloseEnabled               Boolean?     @default(false)
  softCloseMinutes               Int?
  isFeaturedOnMarketplace        Boolean?     @default(false)
  marketplaceAnnouncementTitle   String?
  additionalTriggers             String?      @db.Text
  
  createdAt                      DateTime     @default(now())
  updatedAt                      DateTime     @updatedAt

  // Relações
  category                       LotCategory      @relation(fields: [categoryId], references: [id])
  auctioneer                     Auctioneer       @relation(fields: [auctioneerId], references: [id])
  seller                         Seller?          @relation(fields: [sellerId], references: [id])
  judicialProcess                JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  lots                           Lot[]
  bids                           Bid[]
  reviews                        Review[]
  questions                      LotQuestion[]
  
  @@index([status, auctionDate])
}

model Lot {
  id                   String     @id @default(cuid())
  publicId             String     @unique
  number               String?
  title                String     @db.VarChar(255)
  description          String?    @db.Text
  price                Float      @default(0)
  initialPrice         Float?
  secondInitialPrice   Float?
  bidIncrementStep     Float?
  status               StatusLote @default(EM_BREVE)
  
  auctionId            String
  categoryId           String
  subcategoryId        String?
  
  // Localização
  locationCity         String?
  locationState        String?
  address              String?
  latitude             Float?
  longitude            Float?
  mapAddress           String?
  mapEmbedUrl          String?    @db.Text
  mapStaticImageUrl    String?    @db.Text
  
  // Imagens
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     String?    @db.Text // JSON string
  
  // Documentos
  winningBidTermUrl        String?
  judicialProcessNumber    String?
  courtDistrict            String?
  courtName                String?
  publicProcessUrl         String?
  propertyRegistrationNumber String?
  propertyLiens            String?
  knownDebts               String?
  additionalDocumentsInfo  String? @db.Text
  
  // Valores e Condição
  reservePrice         Float?
  evaluationValue      Float?
  debtAmount           Float?
  itbiValue            Float?
  condition            String?
  
  // Estatísticas
  views                Int        @default(0)
  bidsCount            Int        @default(0)
  isFeatured           Boolean?   @default(false)
  isExclusive          Boolean?   @default(false)
  discountPercentage   Float?

  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  // Relações
  auction              Auction       @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category             LotCategory   @relation(fields: [categoryId], references: [id])
  subcategory          Subcategory?  @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  bens                 Bem[]         @relation("LotBens")
  mediaItems           MediaItem[]   @relation("LotGallery")
  bids                 Bid[]
  wins                 UserWin[]
  maxBids              UserLotMaxBid[]
  reviews              Review[]
  questions            LotQuestion[]
  
  @@index([auctionId])
  @@index([categoryId])
  @@index([status, endDate])
}

// Junction table for many-to-many relationship between Lot and Bem
model _LotBens {
  A String @map("A")
  B String @map("B")
  
  lot Lot @relation("LotBens", fields: [A], references: [id], onDelete: Cascade)
  bem Bem @relation(fields: [B], references: [id], onDelete: Cascade)
  
  @@unique([A, B])
  @@index([B])
  @@map("LotBens")
}

// ====================================================================
// MODELOS DE PERFIS E ENTIDADES
// ====================================================================

model Seller {
  id                             String       @id @default(cuid())
  publicId                       String       @unique
  name                           String       @unique
  slug                           String       @unique
  isJudicial                     Boolean      @default(false)
  
  contactName                    String?
  email                          String?
  phone                          String?
  address                        String?
  city                           String?
  state                          String?
  zipCode                        String?
  website                        String?
  description                    String?      @db.Text
  
  logoUrl                        String?
  logoMediaId                    String?
  dataAiHintLogo                 String?

  userId                         String?      @unique
  judicialBranchId               String?      @unique
  
  createdAt                      DateTime     @default(now())
  updatedAt                      DateTime     @updatedAt

  // Relações
  user                           User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  judicialBranch                 JudicialBranch? @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  logo                           MediaItem?   @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  auctions                       Auction[]
  directSaleOffers               DirectSaleOffer[]
  judicialProcesses              JudicialProcess[]
  bens                           Bem[]
}

model Auctioneer {
  id                             String       @id @default(cuid())
  publicId                       String       @unique
  name                           String       @unique
  slug                           String       @unique
  registrationNumber             String?
  
  contactName                    String?
  email                          String?
  phone                          String?
  address                        String?
  city                           String?
  state                          String?
  zipCode                        String?
  website                        String?
  description                    String?      @db.Text
  
  logoUrl                        String?
  logoMediaId                    String?
  dataAiHintLogo                 String?

  userId                         String?      @unique

  createdAt                      DateTime     @default(now())
  updatedAt                      DateTime     @updatedAt

  // Relações
  user                           User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  logo                           MediaItem?   @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  auctions                       Auction[]
}

// ====================================================================
// MODELOS DE TRANSAÇÕES E INTERAÇÕES
// ====================================================================

model Bid {
  id              String      @id @default(cuid())
  lotId           String
  auctionId       String
  bidderId        String
  bidderDisplay   String
  amount          Float
  timestamp       DateTime    @default(now())

  // Relações
  lot             Lot         @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction         Auction     @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder          User        @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  
  @@index([lotId, timestamp])
}

model UserWin {
  id               String        @id @default(cuid())
  lotId            String        @unique
  userId           String
  winningBidAmount Float
  winDate          DateTime      @default(now())
  paymentStatus    StatusPagamento @default(PENDENTE)
  invoiceUrl       String?

  // Relações
  lot              Lot           @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserLotMaxBid {
  id        String  @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model Review {
  id                String    @id @default(cuid())
  lotId             String
  auctionId         String
  userId            String
  userDisplayName   String
  rating            Int
  comment           String?   @db.Text
  
  createdAt         DateTime  @default(now())

  // Relações
  lot               Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction           Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                        String    @id @default(cuid())
  lotId                     String
  auctionId                 String
  userId                    String
  userDisplayName           String
  questionText              String    @db.Text
  isPublic                  Boolean   @default(true)
  
  answerText                String?   @db.Text
  answeredAt                DateTime?
  answeredByUserId          String?
  answeredByUserDisplayName String?
  
  createdAt                 DateTime  @default(now())
  
  // Relações
  lot                       Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction                   Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user                      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  answeredBy                User?     @relation("AnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)
}

// ====================================================================
// MODELOS JUDICIAIS E GEOGRÁFICOS
// ====================================================================

model State {
  id        String   @id @default(cuid())
  name      String   @unique
  uf        String   @unique @db.VarChar(2)
  slug      String   @unique
  
  cities    City[]
  courts    Court[]
  districts JudicialDistrict[]
}

model City {
  id        String   @id @default(cuid())
  name      String
  slug      String
  ibgeCode  String?
  
  stateId   String
  state     State    @relation(fields: [stateId], references: [id])
}

model Court {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  stateUf   String   @db.VarChar(2)
  website   String?

  state     State    @relation(fields: [stateUf], references: [uf])
  districts JudicialDistrict[]
}

model JudicialDistrict {
  id        String    @id @default(cuid())
  name      String
  slug      String
  zipCode   String?
  
  courtId   String
  stateId   String

  court     Court      @relation(fields: [courtId], references: [id])
  state     State      @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]
  
  @@unique([name, stateId])
}

model JudicialBranch {
  id           String    @id @default(cuid())
  name         String
  slug         String
  contactName  String?
  phone        String?
  email        String?
  
  districtId   String
  district     JudicialDistrict @relation(fields: [districtId], references: [id])
  
  processes    JudicialProcess[]
  seller       Seller?

  @@unique([name, districtId])
}

model JudicialProcess {
  id                String       @id @default(cuid())
  publicId          String       @unique
  processNumber     String       @unique
  isElectronic      Boolean      @default(true)

  courtId           String
  districtId        String
  branchId          String
  sellerId          String?
  
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relações
  court             Court             @relation(fields: [courtId], references: [id])
  district          JudicialDistrict  @relation(fields: [districtId], references: [id])
  branch            JudicialBranch    @relation(fields: [branchId], references: [id])
  seller            Seller?           @relation(fields: [sellerId], references: [id])
  parties           ProcessParty[]
  bens              Bem[]
  auctions          Auction[]
}

model ProcessParty {
  id              String             @id @default(cuid())
  name            String
  documentNumber  String?
  partyType       TipoParteProcessual

  processId       String
  process         JudicialProcess    @relation(fields: [processId], references: [id], onDelete: Cascade)
  
  @@unique([processId, name, partyType])
}

model Bem {
  id                         String   @id @default(cuid())
  publicId                   String   @unique
  title                      String   @db.VarChar(255)
  description                String?  @db.Text
  status                     StatusBem @default(DISPONIVEL)
  
  categoryId                 String?
  subcategoryId              String?
  judicialProcessId          String?
  sellerId                   String?
  
  evaluationValue            Float?
  
  imageUrl                   String?
  imageMediaId               String?
  dataAiHint                 String?
  
  // Localização
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?

  // Relações
  category                   LotCategory?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory                Subcategory?      @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess            JudicialProcess?  @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller                     Seller?           @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  lots                       Lot[]             @relation("LotBens")
  gallery                    MediaItem[]       @relation("BemGallery")
  
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  
  @@index([judicialProcessId])
  @@index([sellerId])
}

// ====================================================================
// MODELOS ADICIONAIS DA PLATAFORMA
// ====================================================================

model DirectSaleOffer {
  id                   String        @id @default(cuid())
  publicId             String        @unique
  title                String        @db.VarChar(255)
  description          String        @db.Text
  offerType            TipoOfertaDireta
  status               StatusOfertaDireta
  
  price                Float?
  minimumOfferPrice    Float?

  locationCity         String?
  locationState        String?

  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     String?       @db.Text // JSON string

  proposalsCount       Int           @default(0)
  views                Int           @default(0)
  
  expiresAt            DateTime?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  // Relações
  categoryId           String
  sellerId             String
  
  category             LotCategory   @relation(fields: [categoryId], references: [id])
  seller               Seller        @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model PlatformSettings {
  id                         String    @id @default("global")
  siteTitle                  String?
  siteTagline                String?
  galleryImageBasePath       String?
  storageProvider            String?
  firebaseStorageBucket      String?
  activeThemeName            String?
  themes                     Json?     // Store theme configuration as JSON
  platformPublicIdMasks      Json?     // Store masks as JSON
  mapSettings                Json?
  biddingSettings            Json?
  searchPaginationType       String?
  searchItemsPerPage         Int?
  searchLoadMoreCount        Int?
  showCountdownOnLotDetail   Boolean?
  showCountdownOnCards       Boolean?
  showRelatedLotsOnLotDetail Boolean?
  relatedLotsCount           Int?
  variableIncrementTable     Json?
  defaultListItemsPerPage    Int?
  mentalTriggerSettings      Json?
  sectionBadgeVisibility     Json?
  updatedAt                  DateTime  @updatedAt
}

model DocumentType {
  id             String    @id @default(cuid())
  name           String    @unique
  description    String?
  isRequired     Boolean   @default(false)
  appliesTo      String?   // e.g., "PHYSICAL,LEGAL"
  allowedFormats String?   // e.g., "pdf,jpg,png"
  displayOrder   Int       @default(0)
  
  userDocuments  UserDocument[]
}

model UserDocument {
  id                String    @id @default(cuid())
  userId            String
  documentTypeId    String
  
  fileUrl           String?
  fileName          String?
  status            UserDocumentStatus @default(NAO_ENVIADO)
  
  rejectionReason   String?
  uploadDate        DateTime?
  analysisDate      DateTime?
  analystId         String?
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relações
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType      DocumentType @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, documentTypeId])
}


model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentTemplate {
  id        String                  @id @default(cuid())
  name      String                  @unique
  type      TipoDocumentoTemplate
  content   String                  @db.Text
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt
}

model BlogPost {
  id              String      @id @default(cuid())
  title           String
  slug            String      @unique
  content         String      @db.Text
  excerpt         String?     @db.Text
  status          String      @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  publishedAt     DateTime?
  
  authorId        String
  featuredImageId String?

  author          User        @relation(fields: [authorId], references: [id])
  featuredImage   MediaItem?  @relation("BlogPostFeaturedImage", fields: [featuredImageId], references: [id], onDelete: SetNull)

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

