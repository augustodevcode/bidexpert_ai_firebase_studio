// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. MODELS WITHOUT FOREIGN KEY DEPENDENCIES (BASE TABLES)
// =================================================================

model PlatformSettings {
  id                         String  @id @default(uuid())
  siteTitle                  String? @db.VarChar(100)
  siteTagline                String? @db.VarChar(200)
  logoUrl                    String?
  faviconUrl                 String?
  galleryImageBasePath       String? @db.VarChar(200)
  storageProvider            String? @db.VarChar(50)
  firebaseStorageBucket      String? @db.VarChar(200)
  activeThemeName            String? @db.VarChar(100)
  themes                     Json?
  platformPublicIdMasks      Json?
  homepageSections           Json?
  mentalTriggerSettings      Json?
  sectionBadgeVisibility     Json?
  mapSettings                Json?
  searchPaginationType       String? @db.VarChar(50)
  searchItemsPerPage         Int?
  searchLoadMoreCount        Int?
  showCountdownOnLotDetail   Boolean?
  showCountdownOnCards       Boolean?
  showRelatedLotsOnLotDetail Boolean?
  relatedLotsCount           Int?
  defaultUrgencyTimerHours   Int?
  variableIncrementTable     Json?
  biddingSettings            Json?
  defaultListItemsPerPage    Int?
  updatedAt                  DateTime? @updatedAt
}

model Role {
  id            String         @id @default(uuid())
  name          String         @db.VarChar(50)
  nameNormalized String         @unique @db.VarChar(50)
  description   String?        @db.VarChar(255)
  permissions   String[]
  users         UsersOnRoles[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model State {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(100)
  uf        String   @unique @db.VarChar(2)
  slug      String   @unique @db.VarChar(100)
  cityCount Int      @default(0)
  cities    City[]
  districts JudicialDistrict[]
  lots      Lot[] // Added inverse relation
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LotCategory {
  id                   String        @id @default(uuid())
  name                 String        @db.VarChar(100)
  slug                 String        @unique @db.VarChar(100)
  description          String?       @db.VarChar(500)
  hasSubcategories     Boolean       @default(false)
  subcategories        Subcategory[]
  auctions             Auction[]
  lots                 Lot[]
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  iconName             String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
}

model DocumentTemplate {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(150)
  type      String   @db.VarChar(50)
  content   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(150)
  email     String   @db.VarChar(150)
  subject   String   @db.VarChar(255)
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentType {
  id          String         @id @default(uuid())
  name        String         @db.VarChar(150)
  description String?        @db.VarChar(255)
  isRequired  Boolean        @default(true)
  appliesTo   String?        @db.VarChar(50)
  userDocs    UserDocument[]
}


// =================================================================
// 2. TABLES WITH ONE LEVEL OF DEPENDENCY
// =================================================================
model Lot {
  id                       String          @id @default(uuid())
  publicId                 String?         @unique
  auctionId                String
  slug                     String?
  number                   String?         @db.VarChar(20)
  title                    String          @db.VarChar(255)
  description              String?         @db.Text
  price                    Float
  initialPrice             Float?
  secondInitialPrice       Float?
  bidIncrementStep         Float?
  status                   String          @default("EM_BREVE") @db.VarChar(50)
  bidsCount                Int             @default(0)
  views                    Int             @default(0)
  isFeatured               Boolean         @default(false)
  isExclusive              Boolean         @default(false)
  discountPercentage       Int?
  additionalTriggers       String[]
  imageUrl                 String?
  imageMediaId             String?
  galleryImageUrls         Json?
  mediaItemIds             Json?
  type                     String?         @db.VarChar(100)
  categoryId               String?
  subcategoryId            String?
  auctionName              String?         @db.VarChar(255)
  sellerId                 String?
  sellerName               String?         @db.VarChar(150)
  auctioneerId             String?
  cityId                   String?
  stateId                  String?
  cityName                 String?         @db.VarChar(100)
  stateUf                  String?         @db.VarChar(2)
  latitude                 Float?
  longitude                Float?
  mapAddress               String?         @db.VarChar(255)
  mapEmbedUrl              String?         @db.VarChar(500)
  mapStaticImageUrl        String?
  endDate                  DateTime?
  auctionDate              DateTime?
  lotSpecificAuctionDate   DateTime?
  secondAuctionDate        DateTime?
  condition                String?         @db.VarChar(100)
  dataAiHint               String?         @db.VarChar(100)
  winnerId                 String?
  winningBidTermUrl        String?
  allowInstallmentBids     Boolean         @default(false)
  bids                     Bid[]
  auction                  Auction         @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                 LotCategory?    @relation(fields: [categoryId], references: [id])
  subcategory              Subcategory?    @relation(fields: [subcategoryId], references: [id])
  seller                   Seller?         @relation(fields: [sellerId], references: [id])
  city                     City?           @relation(fields: [cityId], references: [id])
  state                    State?          @relation(fields: [stateId], references: [id])
  winner                   User?           @relation("WonLots", fields: [winnerId], references: [id])
  maxBids                  UserLotMaxBid[]
  bens                     LotBens[]
  win                      UserWin[] // Added inverse relation from UserWin
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
}

model City {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(150)
  slug      String?  @db.VarChar(150)
  stateId   String
  stateUf   String?  @db.VarChar(2)
  ibgeCode  String?  @unique @db.VarChar(10)
  lotCount  Int      @default(0)
  lots      Lot[]
  state     State    @relation(fields: [stateId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subcategory {
  id               String      @id @default(uuid())
  name             String      @db.VarChar(100)
  slug             String?
  parentCategoryId String
  description      String?     @db.VarChar(500)
  displayOrder     Int         @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots             Lot[]
  bens             Bem[]
}

model Court {
  id                 String               @id @default(uuid())
  name               String               @db.VarChar(150)
  slug               String?              @db.VarChar(150)
  stateUf            String?              @db.VarChar(2)
  website            String?
  judicialDistricts  JudicialDistrict[]
  judicialProcesses  JudicialProcess[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}


// =================================================================
// 3. TABLES WITH TWO OR MORE LEVELS OF DEPENDENCY
// =================================================================

model User {
  id                  String          @id @default(uuid())
  email               String          @unique @db.VarChar(150)
  password            String?
  fullName            String?         @db.VarChar(150)
  roleId              String? // This field seems legacy, roles are managed by UsersOnRoles now. Keep for now to avoid breaking changes.
  sellerId            String?         @unique
  habilitationStatus  String          @default("PENDING_DOCUMENTS") @db.VarChar(50)
  accountType         String          @default("PHYSICAL") @db.VarChar(50)
  avatarUrl           String?
  dataAiHint          String?         @db.VarChar(100)
  badges              Json?
  roles               UsersOnRoles[]
  seller              Seller?
  auctioneer          Auctioneer?
  bids                Bid[]
  wins                UserWin[]
  documents           UserDocument[]
  mediaItems          MediaItem[]
  maxBids             UserLotMaxBid[]
  habilitations       AuctionHabilitation[]
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  // Detalhes PF
  cpf                   String?
  rgNumber              String?
  rgIssuer              String?
  rgIssueDate           DateTime?
  rgState               String? @db.VarChar(2)
  dateOfBirth           DateTime?
  homePhone             String? @db.VarChar(20)
  cellPhone             String? @db.VarChar(20)
  gender                String? @db.VarChar(50)
  profession            String? @db.VarChar(100)
  nationality           String? @db.VarChar(100)
  maritalStatus         String? @db.VarChar(50)
  propertyRegime        String? @db.VarChar(100)
  spouseName            String? @db.VarChar(150)
  spouseCpf             String?
  
  // Detalhes PJ
  razaoSocial           String? @db.VarChar(150)
  cnpj                  String?
  inscricaoEstadual     String?
  website               String?

  // Endereço
  zipCode               String? @db.VarChar(10)
  street                String?
  number                String?
  complement            String?
  neighborhood          String?
  city                  String?
  state                 String? @db.VarChar(50)

  // Marketing
  optInMarketing        Boolean? @default(false)
}

model JudicialDistrict {
  id                String             @id @default(uuid())
  name              String             @db.VarChar(150)
  slug              String             @unique @db.VarChar(150)
  courtId           String
  stateId           String
  zipCode           String?            @db.VarChar(10)
  court             Court              @relation(fields: [courtId], references: [id])
  state             State              @relation(fields: [stateId], references: [id])
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model JudicialBranch {
  id                  String               @id @default(uuid())
  name                String               @db.VarChar(150)
  slug                String               @unique @db.VarChar(150)
  districtId          String
  contactName         String?              @db.VarChar(150)
  phone               String?              @db.VarChar(20)
  email               String?              @db.VarChar(150)
  district            JudicialDistrict     @relation(fields: [districtId], references: [id])
  sellers             Seller[]
  judicialProcesses   JudicialProcess[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model Seller {
  id                 String             @id @default(uuid())
  publicId           String             @unique @db.VarChar(100)
  slug               String             @unique @db.VarChar(150)
  name               String             @unique @db.VarChar(150)
  contactName        String?            @db.VarChar(150)
  email              String?            @db.VarChar(150)
  phone              String?            @db.VarChar(20)
  address            String?            @db.VarChar(200)
  city               String?            @db.VarChar(100)
  state              String?            @db.VarChar(50)
  zipCode            String?            @db.VarChar(10)
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?            @db.Text
  userId             String?
  user               User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  isJudicial         Boolean            @default(false)
  judicialBranchId   String?
  judicialBranch     JudicialBranch?    @relation(fields: [judicialBranchId], references: [id])
  auctions           Auction[]
  bens               Bem[]
  lots               Lot[]
  judicialProcesses  JudicialProcess[]
  directSaleOffers   DirectSaleOffer[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model Auctioneer {
  id                   String    @id @default(uuid())
  publicId             String    @unique @db.VarChar(100)
  slug                 String    @unique @db.VarChar(150)
  name                 String
  registrationNumber   String?   @db.VarChar(50)
  contactName          String?   @db.VarChar(150)
  email                String?   @db.VarChar(150)
  phone                String?   @db.VarChar(20)
  address              String?   @db.VarChar(200)
  city                 String?   @db.VarChar(100)
  state                String?   @db.VarChar(50)
  zipCode              String?   @db.VarChar(10)
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?   @db.Text
  userId               String?   @unique
  user                 User?     @relation(fields: [userId], references: [id])
  auctions             Auction[]
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model JudicialProcess {
  id             String           @id @default(uuid())
  publicId         String?          @unique
  processNumber  String
  isElectronic   Boolean          @default(true)
  courtId        String
  districtId     String
  branchId       String
  sellerId       String?
  court          Court            @relation(fields: [courtId], references: [id])
  district       JudicialDistrict @relation(fields: [districtId], references: [id])
  branch         JudicialBranch   @relation(fields: [branchId], references: [id])
  seller         Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties        JudicialParty[]
  bens           Bem[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model JudicialParty {
  id             String          @id @default(uuid())
  processId      String
  name           String
  documentNumber String?         @db.VarChar(50)
  partyType      String          @db.VarChar(50)
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model Bem {
  id             String          @id @default(uuid())
  publicId       String?         @unique
  title          String          @db.VarChar(200)
  description    String?         @db.Text
  status         String          @default("DISPONIVEL") @db.VarChar(50)
  categoryId     String
  subcategoryId  String?
  judicialProcessId String?
  sellerId       String?
  evaluationValue Float?
  imageUrl       String?
  imageMediaId   String?
  galleryImageUrls Json?
  mediaItemIds   Json?
  dataAiHint     String?         @db.VarChar(100)
  locationCity   String?         @db.VarChar(100)
  locationState  String?         @db.VarChar(100)
  address        String?
  latitude       Float?
  longitude      Float?
  category       LotCategory     @relation(fields: [categoryId], references: [id])
  subcategory    Subcategory?    @relation(fields: [subcategoryId], references: [id])
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller         Seller?         @relation(fields: [sellerId], references: [id])
  lots           LotBens[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  
  // Veículos
  plate                 String?   @db.VarChar(10)
  make                  String?   @db.VarChar(50)
  model                 String?   @db.VarChar(50)
  version               String?   @db.VarChar(100)
  year                  Int?
  modelYear             Int?
  mileage               Int?
  color                 String?   @db.VarChar(30)
  fuelType              String?   @db.VarChar(30)
  transmissionType      String?   @db.VarChar(30)
  bodyType              String?   @db.VarChar(50)
  vin                   String?   @db.VarChar(17)
  renavam               String?   @db.VarChar(11)
  enginePower           String?   @db.VarChar(50)
  numberOfDoors         Int?
  vehicleOptions        String?   @db.VarChar(500)
  detranStatus          String?   @db.VarChar(100)
  debts                 String?   @db.VarChar(500)
  runningCondition      String?   @db.VarChar(100)
  bodyCondition         String?   @db.VarChar(100)
  tiresCondition        String?   @db.VarChar(100)
  hasKey                Boolean?
  
  // Imóveis
  propertyRegistrationNumber String? @db.VarChar(50)
  iptuNumber                String?   @db.VarChar(50)
  isOccupied                Boolean?
  area                      Float?
  totalArea                 Float?
  builtArea                 Float?
  bedrooms                  Int?
  suites                    Int?
  bathrooms                 Int?
  parkingSpaces             Int?
  constructionType          String?   @db.VarChar(100)
  finishes                  String?   @db.VarChar(500)
  infrastructure            String?   @db.VarChar(500)
  condoDetails              String?   @db.VarChar(500)
  improvements              String?   @db.VarChar(500)
  topography                String?   @db.VarChar(100)
  liensAndEncumbrances      String?   @db.Text
  propertyDebts             String?   @db.Text
  unregisteredRecords       String?   @db.Text
  hasHabiteSe               Boolean?
  zoningRestrictions        String?   @db.VarChar(200)
}

model Auction {
  id                           String          @id @default(uuid())
  publicId                     String?         @unique
  slug                         String?         @unique
  title                        String
  description                  String?         @db.Text
  status                       String          @default("RASCUNHO") @db.VarChar(50)
  auctionDate                  DateTime        @default(now())
  endDate                      DateTime?
  totalLots                    Int             @default(0)
  auctioneerId                 String
  sellerId                     String
  categoryId                   String?
  auctionType                  String?         @db.VarChar(50)
  imageUrl                     String?
  imageMediaId                 String?
  dataAiHint                   String?
  documentsUrl                 String?
  visits                       Int             @default(0)
  initialOffer                 Float?
  isFavorite                   Boolean         @default(false)
  isFeaturedOnMarketplace      Boolean         @default(false)
  marketplaceAnnouncementTitle String?
  evaluationReportUrl          String?
  auctionCertificateUrl        String?
  sellingBranch                String?
  automaticBiddingEnabled      Boolean         @default(false)
  silentBiddingEnabled         Boolean         @default(false)
  allowMultipleBidsPerUser     Boolean         @default(true)
  allowInstallmentBids         Boolean         @default(false)
  softCloseEnabled             Boolean         @default(false)
  softCloseMinutes             Int             @default(2)
  estimatedRevenue             Float?
  achievedRevenue              Float?
  totalHabilitatedUsers        Int?
  judicialProcessId            String?
  decrementAmount              Float?
  decrementIntervalSeconds     Int?
  floorPrice                   Float?
  autoRelistSettings           Json?
  bids                         Bid[]
  auctioneer                   Auctioneer      @relation(fields: [auctioneerId], references: [id])
  seller                       Seller          @relation(fields: [sellerId], references: [id])
  category                     LotCategory?    @relation(fields: [categoryId], references: [id])
  lots                         Lot[]
  habilitations                AuctionHabilitation[]
  auctionStages                Json?
  createdAt                    DateTime        @default(now())
  updatedAt                    DateTime        @updatedAt
}

model LotBens {
  lot    Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId  String
  bem    Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId  String

  @@id([lotId, bemId])
}

model MediaItem {
  id           String   @id @default(uuid())
  fileName     String
  storagePath  String
  title        String?
  altText      String?
  caption      String?
  description  String?  @db.Text
  mimeType     String   @db.VarChar(100)
  sizeBytes    Int?
  urlOriginal  String
  urlThumbnail String?
  urlMedium    String?
  urlLarge     String?
  linkedLotIds Json?
  dataAiHint   String?  @db.VarChar(100)
  uploadedBy   String? // Changed to optional
  user         User?    @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)
  uploadedAt   DateTime @default(now())
}

model UserDocument {
  id              String       @id @default(uuid())
  userId          String
  documentTypeId  String
  status          String       @default("PENDING") @db.VarChar(50)
  fileUrl         String
  fileName        String?
  rejectionReason String?      @db.Text
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType @relation(fields: [documentTypeId], references: [id])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@unique([userId, documentTypeId])
}

model Bid {
  id            String   @id @default(uuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String?  @db.VarChar(150)
  amount        Float
  timestamp     DateTime @default(now())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String   @id @default(uuid())
  lotId            String   @unique // A lot can only be won once
  userId           String?
  winningBidAmount Float
  winDate          DateTime
  paymentStatus    String   @db.VarChar(50)
  invoiceUrl       String?
  lot              Lot      @relation(fields: [lotId], references: [id])
  user             User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model DirectSaleOffer {
  id                   String   @id @default(uuid())
  publicId             String?  @unique
  title                String
  description          String?  @db.Text
  offerType            String?  @db.VarChar(50)
  price                Float?
  minimumOfferPrice    Float?
  status               String   @default("ACTIVE") @db.VarChar(50)
  category             String?  @db.VarChar(100)
  sellerId             String?
  sellerName           String?  @db.VarChar(150)
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  locationCity         String?  @db.VarChar(100)
  locationState        String?  @db.VarChar(100)
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int      @default(0)
  expiresAt            DateTime?
  seller               Seller?  @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model AuctionHabilitation {
  userId    String
  auctionId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@id([userId, auctionId])
}
