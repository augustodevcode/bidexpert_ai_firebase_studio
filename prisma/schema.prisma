// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ========================================================
// ENUMS
// ========================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  PENDING_APPROVAL
  ACTIVE
  SOLD
  EXPIRED
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum StorageProviderType {
  local
  firebase
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

// ========================================================
// AUTH & USER MODELS
// ========================================================

model User {
  id                  String                   @id @default(uuid())
  email               String                   @unique
  fullName            String
  password            String
  roleId              String?
  sellerId            String?                  @unique
  accountType         AccountType?
  habilitationStatus  UserHabilitationStatus?  @default(PENDING_DOCUMENTS)
  cpf                 String?                  @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  optInMarketing      Boolean?                 @default(false)
  avatarUrl           String?
  badges              Json?
  dataAiHint          String?
  activeBids          Int?
  auctionsWon         Int?
  itemsSold           Int?
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt

  // Relationships
  role                Role?                    @relation(fields: [roleId], references: [id])
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  reviews             Review[]
  questionsAsked      LotQuestion[]            @relation("QuestionAskedBy")
  answersGiven        LotQuestion[]            @relation("AnsweredBy")
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  uploadedMedia       MediaItem[]
  blogPosts           BlogPost[]
  notifications       Notification[]
  maxBids             UserLotMaxBid[]
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Role {
  id              String       @id @default(uuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  permissions     Permission[]
  users           User[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

// ========================================================
// CORE AUCTION MODELS
// ========================================================

model LotCategory {
  id                 String              @id @default(uuid())
  name               String              @unique
  slug               String              @unique
  description        String?             @db.Text
  hasSubcategories   Boolean?            @default(false)
  itemCount          Int?                @default(0)
  logoUrl            String?
  dataAiHintLogo     String?
  coverImageUrl      String?
  dataAiHintCover    String?
  megaMenuImageUrl   String?
  dataAiHintMegaMenu String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  // Relationships
  subcategories      Subcategory[]
  auctions           Auction[]
  lots               Lot[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
}

model Subcategory {
  id                 String      @id @default(uuid())
  name               String
  slug               String      @unique
  description        String?
  itemCount          Int?        @default(0)
  displayOrder       Int?        @default(0)
  parentCategoryId   String
  iconUrl            String?
  iconMediaId        String?     @unique
  dataAiHintIcon     String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  // Relationships
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id])
  lots               Lot[]
  bens               Bem[]
  icon               MediaItem?  @relation("SubcategoryIcon", fields: [iconMediaId], references: [id], onDelete: SetNull)
}

model Auctioneer {
  id                     String    @id @default(uuid())
  publicId               String    @unique
  name                   String
  slug                   String    @unique
  registrationNumber     String?
  contactName            String?
  email                  String?
  phone                  String?
  address                String?
  city                   String?
  state                  String?
  zipCode                String?
  website                String?
  logoUrl                String?
  logoMediaId            String?   @unique
  dataAiHintLogo         String?
  description            String?   @db.Text
  memberSince            DateTime?
  rating                 Float?
  auctionsConductedCount Int?
  totalValueSold         Float?
  userId                 String?   @unique
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  // Relationships
  auctions               Auction[]
  user                   User?     @relation(fields: [userId], references: [id])
  logo                   MediaItem? @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
}

model Seller {
  id                         String            @id @default(uuid())
  publicId                   String            @unique
  name                       String
  slug                       String            @unique
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  logoUrl                    String?
  logoMediaId                String?           @unique
  dataAiHintLogo             String?
  description                String?           @db.Text
  memberSince                DateTime?
  rating                     Float?
  activeLotsCount            Int?
  totalSalesValue            Float?
  auctionsFacilitatedCount   Int?
  isJudicial                 Boolean           @default(false)
  judicialBranchId           String?           @unique
  userId                     String?           @unique
  createdAt                  DateTime          @default(now())
  updatedAt                  DateTime          @updatedAt

  // Relationships
  user                       User?             @relation(fields: [userId], references: [id])
  auctions                   Auction[]
  bens                       Bem[]
  directSaleOffers           DirectSaleOffer[]
  judicialBranch             JudicialBranch?   @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  judicialProcesses          JudicialProcess[]
  blogPosts                  BlogPost[]
  logo                       MediaItem?        @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
}

model Auction {
  id                             String        @id @default(uuid())
  publicId                       String        @unique
  title                          String
  fullTitle                      String?
  description                    String?       @db.Text
  status                         AuctionStatus @default(RASCUNHO)
  tipoLeilao                     AuctionType?
  categoryId                     String?
  auctioneerId                   String
  sellerId                       String?
  judicialProcessId              String?       @unique
  auctionDate                    DateTime
  endDate                        DateTime?
  city                           String?
  state                          String?
  imageUrl                       String?
  imageMediaId                   String?       @unique
  dataAiHint                     String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  visits                         Int?          @default(0)
  initialOffer                   Float?
  currentBid                     Float?
  bidsCount                      Int?          @default(0)
  isFavorite                     Boolean?      @default(false)
  isFeaturedOnMarketplace        Boolean?      @default(false)
  marketplaceAnnouncementTitle   String?
  automaticBiddingEnabled        Boolean?      @default(false)
  silentBiddingEnabled           Boolean?      @default(false)
  allowMultipleBidsPerUser       Boolean?      @default(true)
  allowInstallmentBids           Boolean?      @default(false)
  softCloseEnabled               Boolean?      @default(false)
  softCloseMinutes               Int?          @default(2)
  estimatedRevenue               Float?
  achievedRevenue                Float?        @default(0)
  totalHabilitatedUsers          Int?          @default(0)
  additionalTriggers             Json?
  auctionStages                  Json?
  autoRelistSettings             Json?
  decrementAmount                Float?
  decrementIntervalSeconds       Int?
  floorPrice                     Float?
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt

  // Relationships
  category                       LotCategory?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  auctioneer                     Auctioneer      @relation(fields: [auctioneerId], references: [id])
  seller                         Seller?         @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  judicialProcess                JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  image                          MediaItem?      @relation("AuctionImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  lots                           Lot[]
  bids                           Bid[]
  questions                      LotQuestion[]
}

model Lot {
  id                           String       @id @default(uuid())
  publicId                     String       @unique
  auctionId                    String
  number                       String?
  title                        String
  description                  String?      @db.Text
  price                        Float
  initialPrice                 Float?
  secondInitialPrice           Float?
  bidIncrementStep             Float?
  status                       LotStatus
  categoryId                   String?
  subcategoryId                String?
  stateId                      String?
  cityId                       String?
  imageUrl                     String?
  imageMediaId                 String?      @unique
  dataAiHint                   String?
  galleryImageUrls             Json?
  mediaItemIds                 Json?
  bemIds                       Json?
  endDate                      DateTime?
  lotSpecificAuctionDate       DateTime?
  secondAuctionDate            DateTime?
  views                        Int?         @default(0)
  bidsCount                    Int?         @default(0)
  isFeatured                   Boolean?     @default(false)
  isExclusive                  Boolean?     @default(false)
  discountPercentage           Float?
  additionalTriggers           Json?
  latitude                     Float?
  longitude                    Float?
  mapAddress                   String?
  mapEmbedUrl                  String?      @db.Text
  mapStaticImageUrl            String?
  judicialProcessNumber        String?
  courtDistrict                String?
  courtName                    String?
  publicProcessUrl             String?
  propertyRegistrationNumber   String?
  propertyLiens                String?      @db.Text
  knownDebts                   String?      @db.Text
  additionalDocumentsInfo      String?      @db.Text
  reservePrice                 Float?
  evaluationValue              Float?
  debtAmount                   Float?
  itbiValue                    Float?
  condition                    String?
  sellerId                     String?
  auctioneerId                 String?
  winningBidTermUrl            String?
  createdAt                    DateTime     @default(now())
  updatedAt                    DateTime     @updatedAt

  // Relationships
  auction                      Auction        @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                     LotCategory?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory                  Subcategory?   @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  state                        StateInfo?     @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city                         CityInfo?      @relation(fields: [cityId], references: [id], onDelete: SetNull)
  image                        MediaItem?     @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  bens                         Bem[]
  bids                         Bid[]
  wins                         UserWin[]
  reviews                      Review[]
  questions                    LotQuestion[]
  maxBids                      UserLotMaxBid[]
}

model Bem {
  id                         String    @id @default(uuid())
  publicId                   String    @unique
  title                      String
  description                String?   @db.Text
  status                     BemStatus @default(DISPONIVEL)
  categoryId                 String?
  subcategoryId              String?
  judicialProcessId          String?
  sellerId                   String?
  evaluationValue            Float?
  imageUrl                   String?
  imageMediaId               String?   @unique
  galleryImageUrls           Json?
  mediaItemIds               Json?
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  plate                      String?
  make                       String?
  model                      String?
  version                    String?
  year                       Int?
  modelYear                  Int?
  mileage                    Int?
  color                      String?
  fuelType                   String?
  transmissionType           String?
  bodyType                   String?
  vin                        String?
  renavam                    String?
  enginePower                String?
  numberOfDoors              Int?
  vehicleOptions             String?
  detranStatus               String?
  debts                      String?
  runningCondition           String?
  bodyCondition              String?
  tiresCondition             String?
  hasKey                     Boolean?
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?
  infrastructure             String?
  condoDetails               String?
  improvements               String?
  topography                 String?
  liensAndEncumbrances       String?
  propertyDebts              String?
  unregisteredRecords        String?
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  amenities                  Json?
  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String?
  includedAccessories        String?
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                String?
  repairHistory              String?
  applianceCapacity          String?
  voltage                    String?
  applianceType              String?
  hoursUsed                  Int?
  engineType                 String?
  capacityOrPower            String?
  maintenanceHistory         String?
  installationLocation       String?
  compliesWithNR             String?
  operatingLicenses          String?
  breed                      String?
  age                        String?
  sex                        String?
  weight                     String?
  individualId               String?
  purpose                    String?
  sanitaryCondition          String?
  lineage                    String?
  isPregnant                 Boolean?
  specialSkills              String?
  gtaDocument                String?
  breedRegistryDocument      String?
  furnitureType              String?
  material                   String?
  style                      String?
  dimensions                 String?
  pieceCount                 Int?
  jewelryType                String?
  metal                      String?
  gemstones                  String?
  totalWeight                String?
  jewelrySize                String?
  authenticityCertificate    String?
  workType                   String?
  artist                     String?
  period                     String?
  technique                  String?
  provenance                 String?
  boatType                   String?
  boatLength                 String?
  hullMaterial               String?
  onboardEquipment           String?
  productName                String?
  quantity                   String?
  packagingType              String?
  expirationDate             DateTime?
  storageConditions          String?
  preciousMetalType          String?
  purity                     String?
  forestGoodsType            String?
  volumeOrQuantity           String?
  species                    String?
  dofNumber                  String?
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt

  // Relationships
  category                   LotCategory?     @relation(fields: [categoryId], references: [id])
  subcategory                Subcategory?     @relation(fields: [subcategoryId], references: [id])
  judicialProcess            JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller                     Seller?          @relation(fields: [sellerId], references: [id])
  image                      MediaItem?       @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  lots                       Lot[]
}

model Bid {
  id              String   @id @default(uuid())
  lotId           String
  auctionId       String
  bidderId        String
  bidderDisplay   String
  amount          Float
  timestamp       DateTime @default(now())

  // Relationships
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id                 String        @id @default(uuid())
  lotId              String        @unique
  userId             String
  winningBidAmount   Float
  winDate            DateTime
  paymentStatus      PaymentStatus @default(PENDENTE)
  invoiceUrl         String?
  
  // Relationships
  lot                Lot           @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ========================================================
// JUDICIAL ENTITIES
// ========================================================

model Court {
  id                 String             @id @default(uuid())
  name               String             @unique
  slug               String             @unique
  stateUf            String
  website            String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  // Relationships
  districts          JudicialDistrict[]
  state              StateInfo          @relation(fields: [stateUf], references: [uf])
  processes          JudicialProcess[]
}

model JudicialDistrict {
  id                 String           @id @default(uuid())
  name               String
  slug               String           @unique
  courtId            String
  stateId            String
  stateUf            String
  zipCode            String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  // Relationships
  court              Court            @relation(fields: [courtId], references: [id])
  state              StateInfo        @relation(fields: [stateId], references: [id])
  branches           JudicialBranch[]
  processes          JudicialProcess[]
}

model JudicialBranch {
  id                 String             @id @default(uuid())
  name               String
  slug               String             @unique
  districtId         String
  contactName        String?
  phone              String?
  email              String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  // Relationships
  district           JudicialDistrict   @relation(fields: [districtId], references: [id])
  seller             Seller?
  processes          JudicialProcess[]
}

model JudicialProcess {
  id                 String           @id @default(uuid())
  publicId           String           @unique
  processNumber      String           @unique
  isElectronic       Boolean          @default(true)
  courtId            String
  districtId         String
  branchId           String
  sellerId           String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  // Relationships
  court              Court            @relation(fields: [courtId], references: [id])
  district           JudicialDistrict @relation(fields: [districtId], references: [id])
  branch             JudicialBranch   @relation(fields: [branchId], references: [id])
  seller             Seller?          @relation(fields: [sellerId], references: [id])
  parties            ProcessParty[]
  bens               Bem[]
  auction            Auction?
}

model ProcessParty {
  id                 String           @id @default(uuid())
  processId          String
  name               String
  documentNumber     String?
  partyType          ProcessPartyType
  
  // Relationships
  process            JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)
}


// ========================================================
// CONTENT & OTHER MODELS
// ========================================================

model DirectSaleOffer {
  id                     String                @id @default(uuid())
  publicId               String                @unique
  title                  String
  description            String                @db.Text
  offerType              DirectSaleOfferType
  status                 DirectSaleOfferStatus
  price                  Float?
  minimumOfferPrice      Float?
  categoryId             String
  sellerId               String
  locationCity           String?
  locationState          String?
  imageUrl               String?
  imageMediaId           String?               @unique
  dataAiHint             String?
  galleryImageUrls       Json?
  mediaItemIds           Json?
  expiresAt              DateTime?
  views                  Int?                  @default(0)
  proposalsCount         Int?                  @default(0)
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt

  // Relationships
  category               LotCategory           @relation(fields: [categoryId], references: [id])
  seller                 Seller                @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  image                  MediaItem?            @relation("DirectSaleOfferImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
}

model StateInfo {
  id                 String             @id @default(uuid())
  name               String             @unique
  uf                 String             @unique
  slug               String             @unique
  cityCount          Int?               @default(0)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  // Relationships
  lots               Lot[]
  cities             CityInfo[]
  courts             Court[]
  districts          JudicialDistrict[]
}

model CityInfo {
  id                 String   @id @default(uuid())
  name               String
  slug               String
  stateId            String
  stateUf            String
  ibgeCode           String?
  lotCount           Int?     @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relationships
  state              StateInfo @relation(fields: [stateId], references: [id])
  lots               Lot[]
}

model BlogPost {
  id             String    @id @default(uuid())
  title          String
  content        String    @db.Text
  slug           String    @unique
  authorId       String
  sellerId       String?
  publishedAt    DateTime?
  tags           Tag[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relationships
  author         User      @relation(fields: [authorId], references: [id])
  seller         Seller?   @relation(fields: [sellerId], references: [id])
}

model Tag {
    id          String      @id @default(uuid())
    name        String      @unique
    blogPosts   BlogPost[]
}

model UserDocument {
  id                String             @id @default(uuid())
  userId            String
  documentTypeId    String
  fileUrl           String?
  fileName          String?
  status            UserDocumentStatus @default(NOT_SENT)
  uploadDate        DateTime?
  analysisDate      DateTime?
  analystId         String?
  rejectionReason   String?
  
  // Relationships
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType      DocumentType       @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id                String         @id @default(uuid())
  name              String         @unique
  description       String?
  isRequired        Boolean
  appliesTo         String? // e.g., "PHYSICAL,LEGAL"
  allowedFormats    String?
  displayOrder      Int            @default(0)

  // Relationships
  userDocuments     UserDocument[]
}

model Review {
    id              String    @id @default(uuid())
    lotId           String
    auctionId       String
    userId          String
    userDisplayName String
    rating          Int
    comment         String    @db.Text
    createdAt       DateTime  @default(now())

    // Relationships
    lot             Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
    user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LotQuestion {
    id                       String    @id @default(uuid())
    lotId                    String
    auctionId                String
    userId                   String
    userDisplayName          String
    questionText             String    @db.Text
    answerText               String?   @db.Text
    answeredByUserId         String?
    answeredByUserDisplayName String?
    isPublic                 Boolean   @default(true)
    createdAt                DateTime  @default(now())
    answeredAt               DateTime?

    // Relationships
    user                     User      @relation("QuestionAskedBy", fields: [userId], references: [id], onDelete: Cascade)
    lot                      Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
    auction                  Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
    answeredByUser           User?     @relation("AnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)
}

model UserLotMaxBid {
    id          String    @id @default(uuid())
    userId      String
    lotId       String
    maxAmount   Float
    isActive    Boolean   @default(true)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    // Relationships
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    lot         Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)

    @@unique([userId, lotId])
}

model Notification {
  id                 String   @id @default(uuid())
  userId             String
  message            String
  link               String?
  isRead             Boolean  @default(false)
  createdAt          DateTime @default(now())

  // Relationships
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MediaItem {
  id                       String             @id @default(uuid())
  fileName                 String
  storagePath              String             @unique
  title                    String?
  altText                  String?
  caption                  String?
  description              String?
  mimeType                 String
  sizeBytes                Int
  dimensions               Json?
  urlOriginal              String             @db.Text
  urlThumbnail             String?            @db.Text
  urlMedium                String?            @db.Text
  urlLarge                 String?            @db.Text
  linkedLotIds             Json?
  dataAiHint               String?
  uploadedAt               DateTime           @default(now())
  uploadedBy               String?

  // Relationships
  uploader                 User?              @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)
  auctionAsImage           Auction?           @relation("AuctionImage")
  lotAsImage               Lot?               @relation("LotImage")
  bemAsImage               Bem?               @relation("BemImage")
  sellerAsLogo             Seller?            @relation("SellerLogo")
  auctioneerAsLogo         Auctioneer?        @relation("AuctioneerLogo")
  subcategoryAsIcon        Subcategory?       @relation("SubcategoryIcon")
  directSaleOfferAsImage   DirectSaleOffer?   @relation("DirectSaleOfferImage")
  lots                     Lot[]
}

model ContactMessage {
  id                 String   @id @default(uuid())
  name               String
  email              String
  subject            String
  message            String   @db.Text
  isRead             Boolean  @default(false)
  createdAt          DateTime @default(now())
}

model PlatformSettings {
  id                             String                @id @default("global")
  siteTitle                      String
  siteTagline                    String?
  galleryImageBasePath           String
  storageProvider                StorageProviderType   @default(local)
  firebaseStorageBucket          String?
  activeThemeName                String?
  themes                         Json?
  platformPublicIdMasks          Json?
  homepageSections               Json?
  mentalTriggerSettings          Json?
  sectionBadgeVisibility         Json?
  mapSettings                    Json?
  searchPaginationType           String?
  searchItemsPerPage             Int?
  searchLoadMoreCount            Int?
  showCountdownOnLotDetail       Boolean?
  showCountdownOnCards           Boolean?
  showRelatedLotsOnLotDetail     Boolean?
  relatedLotsCount               Int?
  biddingSettings                Json?
  variableIncrementTable         Json?
  defaultListItemsPerPage        Int?                  @default(10)
  updatedAt                      DateTime              @updatedAt
}
