// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// ==================================================
//                ENUMS
// ==================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum AssetStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

// ==================================================
//                MODELS
// ==================================================

model User {
  id                   String                 @id @default(cuid())
  publicId             String?                @unique
  fullName             String?
  email                String                 @unique
  password             String?
  cpf                  String?                @unique
  rgNumber             String?
  rgIssuer             String?
  rgIssueDate          DateTime?
  rgState              String?
  dateOfBirth          DateTime?
  cellPhone            String?
  homePhone            String?
  gender               String?
  profession           String?
  nationality          String?
  maritalStatus        String?
  propertyRegime       String?
  spouseName           String?
  spouseCpf            String?
  zipCode              String?
  street               String?
  number               String?
  complement           String?
  neighborhood         String?
  city                 String?
  state                String?
  avatarUrl            String?
  dataAiHint           String?
  optInMarketing       Boolean?               @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  habilitationStatus   UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType          AccountType            @default(PHYSICAL)
  razaoSocial          String?
  cnpj                 String?                @unique
  inscricaoEstadual    String?
  website              String?
  responsibleName      String?
  responsibleCpf       String?
  sellerId             String?                @unique
  seller               Seller?                @relation(fields: [sellerId], references: [id])
  auctioneerId         String?                @unique
  auctioneer           Auctioneer?            @relation(fields: [auctioneerId], references: [id])
  roles                UsersOnRoles[]
  bids                 Bid[]
  notifications        Notification[]
  habilitations        AuctionHabilitation[]
  wins                 UserWin[]
  reviews              Review[]
  questions            LotQuestion[]
  documents            UserDocument[]
  tenants              UsersOnTenants[]
  createdReports       Report[]
  createdMedia         MediaItem[]            @relation("UploadedBy")
  maxBids              UserLotMaxBid[]
  wonLots              Lot[]                  @relation("LotsWon")
}

model Role {
  id              String         @id @default(cuid())
  name            String         @unique
  nameNormalized  String         @unique
  description     String?
  permissions     Json           @default("[]")
  users           UsersOnRoles[]
}

model UsersOnRoles {
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  role        Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId      String
  assignedAt  DateTime @default(now())
  assignedBy  String

  @@id([userId, roleId])
  @@index([roleId])
}

model UsersOnTenants {
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId    String
  assignedAt  DateTime @default(now())
  assignedBy  String

  @@id([userId, tenantId])
  @@index([tenantId])
}

model Tenant {
  id                   String             @id @default(cuid())
  name                 String
  subdomain            String?            @unique
  domain               String?            @unique
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  users                UsersOnTenants[]
  auctions             Auction[]
  lots                 Lot[]
  bids                 Bid[]
  sellers              Seller[]
  auctioneers          Auctioneer[]
  assets               Asset[]
  judicialProcesses    JudicialProcess[]
  notifications        Notification[]
  directSaleOffers     DirectSaleOffer[]
  reports              Report[]
  settingsId           String?            @unique
  settings             PlatformSettings?  @relation(fields: [settingsId], references: [id])
}

model PlatformSettings {
  id                      String   @id @default(cuid())
  commissionRate          Decimal  @default(0.05) @db.Decimal(5, 4)
  tenant                  Tenant?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model Seller {
  id                  String            @id @default(cuid())
  user                User?
  name                String
  auctions            Auction[]
  lots                Lot[]
  assets              Asset[]
  directSaleOffers    DirectSaleOffer[]
  judicialProcesses   JudicialProcess[]
  judicialBranches    JudicialBranch[]
  tenantId            String
  tenant              Tenant            @relation(fields: [tenantId], references: [id])
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@index([tenantId])
}

model Auctioneer {
  id              String    @id @default(cuid())
  user            User?
  name            String
  registration    String?   @unique
  auctions        Auction[]
  lots            Lot[]
  tenantId        String
  tenant          Tenant    @relation(fields: [tenantId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([tenantId])
}

model Lot {
  id                       String                 @id @default(cuid())
  publicId                 String?                @unique
  number                   String?
  title                    String
  description              String?                @db.Text
  status                   LotStatus              @default(EM_BREVE)
  price                    Decimal                @default(0) @db.Decimal(10, 2)
  initialPrice             Decimal?               @db.Decimal(10, 2)
  secondInitialPrice       Decimal?               @db.Decimal(10, 2)
  bidIncrementStep         Decimal?               @db.Decimal(10, 2)
  evaluationValue          Decimal?               @db.Decimal(10, 2)
  reservePrice             Decimal?               @db.Decimal(10, 2)
  bidsCount                Int?                   @default(0)
  views                    Int?                   @default(0)
  isFeatured               Boolean?               @default(false)
  isExclusive              Boolean?               @default(false)
  hasKey                   Boolean?
  imageUrl                 String?
  imageMediaId             String?
  galleryImageUrls         Json?
  mediaItemIds             Json?
  stageDetails             Json?
  inheritedMediaFromAssetId String?
  latitude                 Float?
  longitude                Float?
  mapAddress               String?
  dataAiHint               String?
  properties               String?                @db.Text
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  auctionId                String
  auction                  Auction                @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  winnerId                 String?
  winner                   User?                  @relation("LotsWon", fields: [winnerId], references: [id], onDelete: SetNull)
  winningBidTermUrl        String?
  original_lot_id          String?                @unique
  originalLot              Lot?                   @relation("LotRelisting", fields: [original_lot_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot              Lot?                   @relation("LotRelisting")
  relistCount              Int?                   @default(0)
  isRelisted               Boolean?               @default(false)
  sellerId                 String?
  seller                   Seller?                @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  auctioneerId             String?
  auctioneer               Auctioneer?            @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  bids                     Bid[]
  wins                     UserWin[]
  reviews                  Review[]
  questions                LotQuestion[]
  maxBids                  UserLotMaxBid[]
  assets                   AssetsOnLots[]
  categoryId               String?
  category                 LotCategory?           @relation(fields: [categoryId], references: [id])
  subcategoryId            String?
  subcategory              Subcategory?           @relation(fields: [subcategoryId], references: [id])
  judicialProcessId        String?
  judicialProcess          JudicialProcess?       @relation(fields: [judicialProcessId], references: [id])
  cityId                   String?
  city                     City?                  @relation(fields: [cityId], references: [id])
  stateId                  String?
  state                    State?                 @relation(fields: [stateId], references: [id])
  stagePrices              LotStagePrice[]
  tenantId                 String
  tenant                   Tenant                 @relation(fields: [tenantId], references: [id])
  endDate                  DateTime?
  debtAmount               Decimal?               @db.Decimal(10, 2)
  itbiValue                Decimal?               @db.Decimal(10, 2)
  additionalTriggers       Json?
  auctionName              String?
  locationCity             String?
  locationState            String?
  type                     String

  @@index([auctionId])
  @@index([winnerId])
  @@index([sellerId])
  @@index([categoryId])
  @@index([stateId])
  @@index([tenantId])
  @@index([auctioneerId])
  @@index([subcategoryId])
  @@index([judicialProcessId])
  @@index([cityId])
}

model Asset {
  id                  String         @id @default(cuid())
  publicId            String?        @unique
  title               String
  description         String?        @db.Text
  properties          String?        @db.Text
  status              AssetStatus
  evaluationValue     Decimal?       @db.Decimal(10, 2)
  imageUrl            String?
  imageMediaId        String?
  galleryImageUrls    Json?
  mediaItemIds        Json?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  dataAiHint          String?
  categoryId          String?
  category            LotCategory?   @relation(fields: [categoryId], references: [id])
  subcategoryId       String?
  subcategory         Subcategory?   @relation(fields: [subcategoryId], references: [id])
  judicialProcessId   String?
  judicialProcess     JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  sellerId            String?
  seller              Seller?        @relation(fields: [sellerId], references: [id])
  cityId              String?
  city                City?          @relation(fields: [cityId], references: [id])
  stateId             String?
  state               State?         @relation(fields: [stateId], references: [id])
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  zipCode             String?
  latitude            Float?
  longitude           Float?
  lots                AssetsOnLots[]
  media               AssetMedia[]
  tenantId            String
  tenant              Tenant         @relation(fields: [tenantId], references: [id])

  @@index([categoryId])
  @@index([subcategoryId])
  @@index([judicialProcessId])
  @@index([sellerId])
  @@index([cityId])
  @@index([stateId])
  @@index([tenantId])
}

model AssetsOnLots {
  asset      Asset    @relation(fields: [assetId], references: [id])
  assetId    String
  lot        Lot      @relation(fields: [lotId], references: [id])
  lotId      String
  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([assetId, lotId])
  @@index([lotId])
}

model Auction {
  id                          String                  @id @default(cuid())
  publicId                    String?                 @unique
  slug                        String                  @unique
  title                       String
  description                 String?                 @db.Text
  status                      AuctionStatus           @default(EM_BREVE)
  auctionType                 AuctionType             @default(EXTRAJUDICIAL)
  auctionMethod               AuctionMethod           @default(STANDARD)
  participation               AuctionParticipation    @default(ONLINE)
  auctionDate                 DateTime
  endDate                     DateTime?
  initialOffer                Decimal?                @db.Decimal(10, 2)
  estimatedRevenue            Decimal?                @db.Decimal(10, 2)
  achievedRevenue             Decimal?                @db.Decimal(10, 2)
  decrementAmount             Decimal?                @db.Decimal(10, 2)
  decrementIntervalSeconds    Int?
  floorPrice                  Decimal?                @db.Decimal(10, 2)
  softCloseEnabled            Boolean?                @default(false)
  softCloseMinutes            Int?
  onlineUrl                   String?
  address                     String?
  city                        String?
  state                       String?
  zipCode                     String?
  latitude                    Float?
  longitude                   Float?
  imageUrl                    String?
  imageMediaId                String?
  documentsUrl                String?
  evaluationReportUrl         String?
  auctionCertificateUrl       String?
  visits                      Int?                    @default(0)
  totalHabilitatedUsers       Int?                    @default(0)
  isFeaturedOnMarketplace     Boolean?                @default(false)
  marketplaceAnnouncementTitle String?
  sellingBranch               String?
  additionalTriggers          Json?
  createdAt                   DateTime                @default(now())
  updatedAt                   DateTime                @updatedAt
  lots                        Lot[]
  bids                        Bid[]
  notifications               Notification[]
  stages                      AuctionStage[]
  habilitations               AuctionHabilitation[]
  auctioneerId                String?
  auctioneer                  Auctioneer?             @relation(fields: [auctioneerId], references: [id])
  sellerId                    String?
  seller                      Seller?                 @relation(fields: [sellerId], references: [id])
  categoryId                  String?
  category                    LotCategory?            @relation(fields: [categoryId], references: [id])
  cityId                      String?
  stateId                     String?
  cityRef                     City?                   @relation("CityAuctions", fields: [cityId], references: [id])
  stateRef                    State?                  @relation("StateAuctions", fields: [stateId], references: [id])
  judicialProcessId           String?
  judicialProcess             JudicialProcess?        @relation(fields: [judicialProcessId], references: [id])
  courtId                     String?
  court                       Court?                  @relation(fields: [courtId], references: [id])
  tenantId                    String
  tenant                      Tenant                  @relation(fields: [tenantId], references: [id])
  judicialDistrictId          String?
  judicialDistrict            JudicialDistrict?       @relation(fields: [judicialDistrictId], references: [id])
  judicialBranchId            String?
  judicialBranch              JudicialBranch?         @relation(fields: [judicialBranchId], references: [id])

  @@index([sellerId])
  @@index([auctioneerId])
  @@index([status])
  @@index([categoryId])
  @@index([cityId])
  @@index([stateId])
  @@index([judicialProcessId])
  @@index([courtId])
  @@index([tenantId])
  @@index([judicialDistrictId])
  @@index([judicialBranchId])
}

model JudicialProcess {
  id              String           @id @default(cuid())
  publicId        String?          @unique
  processNumber   String           @unique
  description     String?          @db.Text
  isElectronic    Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  court           Court?           @relation(fields: [courtId], references: [id])
  courtId         String?
  district        JudicialDistrict? @relation(fields: [districtId], references: [id])
  districtId      String?
  branch          JudicialBranch?  @relation(fields: [branchId], references: [id])
  branchId        String?
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  sellerId        String?
  parties         JudicialParty[]
  lots            Lot[]
  assets          Asset[]
  auctions        Auction[]
  mediaItems      MediaItem[]
  tenantId        String
  tenant          Tenant           @relation(fields: [tenantId], references: [id])

  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
  @@index([sellerId])
  @@index([tenantId])
}

model JudicialParty {
  id             String           @id @default(cuid())
  process        JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType

  @@index([processId])
}

model LotCategory {
  id                  String             @id @default(cuid())
  publicId            String?            @unique
  name                String             @unique
  slug                String             @unique
  description         String?
  iconName            String?
  logoUrl             String?
  logoMediaId         String?
  dataAiHintIcon      String?
  coverImageUrl       String?
  coverImageMediaId   String?
  dataAiHintCover     String?
  megaMenuImageUrl    String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu  String?
  displayOrder        Int                @default(0)
  hasSubcategories    Boolean            @default(false)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  subcategories       Subcategory[]
  lots                Lot[]
  assets              Asset[]
  auctions            Auction[]
  directSaleOffers    DirectSaleOffer[]
}

model Subcategory {
  id                  String       @id @default(cuid())
  publicId            String?      @unique
  name                String
  slug                String       @unique
  description         String?
  displayOrder        Int          @default(0)
  iconUrl             String?
  iconMediaId         String?
  dataAiHintIcon      String?
  parentCategory      LotCategory? @relation(fields: [parentCategoryId], references: [id])
  parentCategoryId    String?
  lots                Lot[]
  assets              Asset[]

  @@index([parentCategoryId])
}

model Court {
  id                String             @id @default(cuid())
  slug              String             @unique
  name              String
  stateUf           String
  website           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialDistrict {
  id                String            @id @default(cuid())
  slug              String            @unique
  name              String
  zipCode           String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  courtId           String?
  court             Court?            @relation(fields: [courtId], references: [id])
  stateId           String?
  state             State?            @relation(fields: [stateId], references: [id])
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]

  @@index([courtId])
  @@index([stateId])
}

model JudicialBranch {
  id                String            @id @default(cuid())
  slug              String            @unique
  name              String
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  districtId        String?
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  judicialProcesses JudicialProcess[]
  sellerId          String?
  sellers           Seller?           @relation(fields: [sellerId], references: [id])
  auctions          Auction[]

  @@index([districtId])
  @@index([sellerId])
}

model AssetMedia {
  asset      Asset    @relation(fields: [assetId], references: [id])
  assetId    String
  mediaItem  MediaItem @relation(fields: [mediaItemId], references: [id])
  mediaItemId String
  isPrimary  Boolean  @default(false)

  @@id([assetId, mediaItemId])
  @@index([mediaItemId])
}

model State {
  id                String             @id @default(cuid())
  slug              String             @unique
  name              String
  uf                String             @unique
  cities            City[]
  judicialDistricts JudicialDistrict[]
  lots              Lot[]
  auctions          Auction[]          @relation("StateAuctions")
  assets            Asset[]
}

model City {
  id         String   @id @default(cuid())
  slug       String   @unique
  name       String
  stateId    String
  state      State    @relation(fields: [stateId], references: [id])
  ibgeCode   String?  @unique
  latitude   Float?
  longitude  Float?
  auctions   Auction[] @relation("CityAuctions")
  lots       Lot[]
  assets     Asset[]

  @@index([stateId])
}

model UserWin {
  id                 String             @id @default(cuid())
  lotId              String             @unique
  lot                Lot                  @relation(fields: [lotId], references: [id])
  userId             String
  user               User                 @relation(fields: [userId], references: [id])
  winningBidAmount   Decimal              @db.Decimal(10, 2)
  winDate            DateTime             @default(now())
  paymentStatus      PaymentStatus        @default(PENDENTE)
  installments       InstallmentPayment[]

  @@index([userId])
}

model InstallmentPayment {
  id                String      @id @default(cuid())
  userWin           UserWin     @relation(fields: [userWinId], references: [id])
  userWinId         String
  installmentNumber Int
  totalInstallments Int
  amount            Decimal     @db.Decimal(10, 2)
  dueDate           DateTime
  paymentDate       DateTime?
  status            PaymentStatus

  @@index([userWinId])
}

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  lot           Lot      @relation(fields: [lotId], references: [id])
  auctionId     String
  auction       Auction  @relation(fields: [auctionId], references: [id])
  bidderId      String
  bidder        User     @relation(fields: [bidderId], references: [id])
  amount        Decimal  @db.Decimal(10, 2)
  timestamp     DateTime @default(now())
  bidderDisplay String?
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id])

  @@index([lotId, timestamp])
  @@index([auctionId])
  @@index([bidderId])
  @@index([tenantId])
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  message   String
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())
  link      String?
  auctionId String?
  auction   Auction?  @relation(fields: [auctionId], references: [id])
  lotId     String?
  tenantId  String
  tenant    Tenant    @relation(fields: [tenantId], references: [id])

  @@index([userId])
  @@index([auctionId])
  @@index([tenantId])
}

model Review {
  id          String   @id @default(cuid())
  lotId       String
  lot         Lot      @relation(fields: [lotId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  authorName  String
  rating      Int
  comment     String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([lotId])
  @@index([userId])
}

model LotQuestion {
  id                    String   @id @default(cuid())
  lotId                 String
  lot                   Lot      @relation(fields: [lotId], references: [id])
  userId                String
  user                  User     @relation(fields: [userId], references: [id])
  authorName            String
  questionText          String   @db.Text
  answerText            String?  @db.Text
  isPublic              Boolean  @default(true)
  createdAt             DateTime @default(now())
  answeredAt            DateTime?
  answeredByUserId      String?
  answeredByUserDisplayName String?

  @@index([lotId])
  @@index([userId])
}

model DirectSaleOffer {
  id                    String              @id @default(cuid())
  publicId              String?             @unique
  title                 String
  description           String?             @db.Text
  status                DirectSaleOfferStatus
  offerType             DirectSaleOfferType
  price                 Decimal?            @db.Decimal(10, 2)
  minimumOfferPrice     Decimal?            @db.Decimal(10, 2)
  imageUrl              String?
  imageMediaId          String?
  galleryImageUrls      Json?
  mediaItemIds          Json?
  views                 Int                 @default(0)
  locationCity          String?
  locationState         String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  expiresAt             DateTime?
  category              LotCategory         @relation(fields: [categoryId], references: [id])
  categoryId            String
  seller                Seller              @relation(fields: [sellerId], references: [id])
  sellerId              String
  tenant                Tenant              @relation(fields: [tenantId], references: [id])
  tenantId              String
  itemsIncluded         Json?
  dataAiHint            String?

  @@index([categoryId])
  @@index([sellerId])
  @@index([tenantId])
}

model Subscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
}

model DocumentType {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isRequired  Boolean  @default(false)
  appliesTo   String // e.g., "PHYSICAL,LEGAL"
  userDocs    UserDocument[]
}

model UserDocument {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  documentTypeId  String
  documentType    DocumentType     @relation(fields: [documentTypeId], references: [id])
  fileUrl         String
  fileName        String
  status          UserDocumentStatus @default(NOT_SENT)
  submittedAt     DateTime         @default(now())
  verifiedAt      DateTime?
  rejectionReason String?
  verifiedBy      String? // Could be linked to an admin User ID

  @@unique([userId, documentTypeId])
  @@index([documentTypeId])
}

model AuctionHabilitation {
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  auctionId String
  auction   Auction  @relation(fields: [auctionId], references: [id])
  createdAt DateTime @default(now())

  @@id([userId, auctionId])
  @@index([auctionId])
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  lotId     String
  lot       Lot      @relation(fields: [lotId], references: [id])
  maxAmount Decimal  @db.Decimal(10, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lotId])
  @@index([lotId])
}

model LotStagePrice {
  id           String      @id @default(cuid())
  lot          Lot         @relation(fields: [lotId], references: [id])
  lotId        String
  auctionStage AuctionStage @relation(fields: [stageId], references: [id])
  stageId      String
  initialBid   Decimal?    @db.Decimal(10, 2)
  bidIncrement Decimal?    @db.Decimal(10, 2)

  @@unique([lotId, stageId])
  @@index([stageId])
}

model AuctionStage {
  id              String          @id @default(cuid())
  name            String
  startDate       DateTime
  endDate         DateTime
  auction         Auction         @relation(fields: [auctionId], references: [id])
  auctionId       String
  lotPrices       LotStagePrice[]

  @@index([auctionId])
}

model Report {
  id           String   @id @default(cuid())
  name         String
  description  String?
  definition   Json
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  createdById  String
  createdBy    User     @relation(fields: [createdById], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([tenantId])
  @@index([createdById])
}

model DataSource {
  id        String @id @default(cuid())
  name      String
  modelName String @unique
  fields    Json
}

model MediaItem {
  id                  String             @id @default(cuid())
  fileName            String
  mimeType            String
  sizeBytes           Int
  storagePath         String
  urlOriginal         String             @unique
  urlThumbnail        String?
  title               String?
  altText             String?
  caption             String?
  description         String?
  dataAiHint          String?
  uploadedAt          DateTime           @default(now())
  uploadedBy          User               @relation("UploadedBy", fields: [uploadedById], references: [id])
  uploadedById        String
  assetGalleries      AssetMedia[]
  judicialProcess     JudicialProcess?   @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId   String?

  @@index([uploadedById])
  @@index([judicialProcessId])
}

model VehicleMake {
  id      String         @id @default(cuid())
  name    String         @unique
  slug    String         @unique
  models  VehicleModel[]
}

model VehicleModel {
  id     String      @id @default(cuid())
  name   String
  slug   String      @unique
  make   VehicleMake @relation(fields: [makeId], references: [id])
  makeId String

  @@unique([makeId, name])
}
