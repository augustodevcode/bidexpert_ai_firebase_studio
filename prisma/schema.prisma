// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// =================================================================
// MODELOS DE CONFIGURAÇÃO E DADOS GLOBAIS
// =================================================================

model PlatformSettings {
  id                                String                    @id @default("global")
  siteTitle                         String?
  siteTagline                       String?
  logoUrl                           String?
  faviconUrl                        String?
  galleryImageBasePath              String?
  storageProvider                   String?
  firebaseStorageBucket             String?
  activeThemeName                   String?
  platformPublicIdMasks             Json?
  homepageSections                  Json?
  mapSettings                       Json?
  searchPaginationType              String?                   @default("loadMore")
  searchItemsPerPage                Int?                      @default(12)
  searchLoadMoreCount               Int?                      @default(12)
  showCountdownOnLotDetail          Boolean?                  @default(true)
  showCountdownOnCards              Boolean?                  @default(true)
  showRelatedLotsOnLotDetail        Boolean?                  @default(true)
  relatedLotsCount                  Int?                      @default(5)
  defaultUrgencyTimerHours          Int?
  defaultListItemsPerPage           Int?                      @default(10)
  biddingSettings                   Json?
  mentalTriggerSettings             Json?
  variableIncrementTable            Json?
  paymentGatewaySettings            Json?
  updatedAt                         DateTime?                 @updatedAt
  sectionBadgeVisibility            Json?
  themes                            Json?
  autoRelistSettings                Json?
  lotDetailSectionVisibility        Json?
  lotCardMentalTriggersVisibility   Json?
  searchGridMentalTriggers          Json?
  searchListMentalTriggers          Json?
  lotDetailMentalTriggersVisibility Json?
}

model Role {
  id              String         @id @default(uuid())
  name            String         @unique
  nameNormalized  String         @unique
  description     String?
  permissions     Json?
  users           UsersOnRoles[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

// =================================================================
// MODELOS DE USUÁRIOS E AUTENTICAÇÃO
// =================================================================

model User {
  id                    String                @id @default(uuid())
  email                 String                @unique
  password              String?
  fullName              String?
  habilitationStatus    String                @default("PENDING_DOCUMENTS") // PENDING_DOCUMENTS, PENDING_ANALYSIS, HABILITADO, REJECTED
  accountType           String                @default("PHYSICAL") // PHYSICAL, LEGAL
  avatarUrl             String?
  dataAiHint            String?
  roles                 UsersOnRoles[]
  sellerProfile         Seller?
  auctioneerProfile     Auctioneer?
  bids                  Bid[]
  wins                  UserWin[]
  maxBids               UserLotMaxBid[]
  documents             UserDocument[]
  notifications         Notification[]
  uploadedMedia         MediaItem[]           @relation("UploadedBy")
  answeredQuestions     LotQuestion[]         @relation("AnsweredByUser")
  askedQuestions        LotQuestion[]         @relation("AskedByUser")
  reviews               Review[]
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  // Pessoa Física
  cpf                   String?
  rgNumber              String?
  rgIssuer              String?
  rgIssueDate           DateTime?
  rgState               String?
  dateOfBirth           DateTime?
  homePhone             String?
  cellPhone             String?
  gender                String?
  profession            String?
  nationality           String?
  maritalStatus         String?
  propertyRegime        String?
  spouseName            String?
  spouseCpf             String?
  // Pessoa Jurídica
  razaoSocial           String?
  cnpj                  String?
  inscricaoEstadual     String?
  website               String?
  responsibleName       String?
  responsibleCpf        String?
  // Endereço
  zipCode               String?
  street                String?
  number                String?
  complement            String?
  neighborhood          String?
  city                  String?
  state                 String?
  // Marketing
  optInMarketing        Boolean               @default(false)

  @@index([sellerId])
}

model UserDocument {
  id              String         @id @default(uuid())
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  documentType    DocumentType   @relation(fields: [documentTypeId], references: [id])
  documentTypeId  String
  status          String         @default("PENDING_ANALYSIS") // PENDING_ANALYSIS, APPROVED, REJECTED
  fileUrl         String
  fileName        String?
  rejectionReason String?        @db.Text
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id          String         @id @default(uuid())
  name        String
  description String?
  isRequired  Boolean        @default(true)
  appliesTo   String?        @default("ALL") // ALL, PHYSICAL, LEGAL
  userDocs    UserDocument[]
}

model Notification {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  link      String?
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())

  @@index([userId])
}

// =================================================================
// MODELOS DE ENTIDADES (COMITENTES, LEILOEIROS, ETC)
// =================================================================

model Seller {
  id               String            @id @default(uuid())
  publicId         String?           @unique
  slug             String?           @unique
  name             String            @unique
  contactName      String?
  email            String?
  phone            String?
  address          String?
  city             String?
  state            String?
  zipCode          String?
  website          String?
  logoUrl          String?
  logoMediaId      String?
  dataAiHintLogo   String?
  description      String?           @db.Text
  isJudicial       Boolean           @default(false)
  judicialBranchId String?           @unique
  judicialBranch   JudicialBranch?   @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  auctions         Auction[]
  lots             Lot[]
  bens             Bem[]
  directSaleOffers DirectSaleOffer[]
  user             User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId           String?           @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Auctioneer {
  id                 String    @id @default(uuid())
  publicId           String?   @unique
  slug               String?   @unique
  name               String
  registrationNumber String?
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?   @db.Text
  auctions           Auction[]
  user               User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId             String?   @unique
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

// =================================================================
// MODELOS DE CATEGORIAS
// =================================================================

model LotCategory {
  id                   String        @id @default(uuid())
  name                 String
  slug                 String        @unique
  description          String?       @db.Text
  hasSubcategories     Boolean       @default(false)
  itemCount            Int?          @default(0) // Denormalized count
  iconName             String?
  dataAiHintIcon       String?
  logoUrl              String?
  logoMediaId          String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  subcategories        Subcategory[]
  auctions             Auction[]
  lots                 Lot[]
  bens                 Bem[]
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
}

model Subcategory {
  id                 String      @id @default(uuid())
  name               String
  slug               String      @unique
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id])
  parentCategoryId   String
  description        String?     @db.Text
  itemCount          Int?        @default(0) // Denormalized count
  displayOrder       Int         @default(0)
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  lots               Lot[]
  bens               Bem[]

  @@index([parentCategoryId])
}

// =================================================================
// MODELOS JUDICIAIS
// =================================================================

model State {
  id                String             @id @default(uuid())
  name              String
  uf                String             @unique
  slug              String             @unique
  cityCount         Int?               @default(0)
  cities            City[]
  courts            Court[]
  judicialDistricts JudicialDistrict[]
  lots              Lot[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model City {
  id      String  @id @default(uuid())
  name    String
  slug    String?
  state   State   @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId String
  stateUf String?
  ibgeCode String? @unique
  lotCount Int?    @default(0)
  lots     Lot[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([stateId])
}

model Court {
  id                String             @id @default(uuid())
  name              String
  slug              String?            @unique
  stateUf           String?
  state             State?             @relation(fields: [stateId], references: [id])
  stateId           String?
  website           String?
  districts         JudicialDistrict[]
  processes         JudicialProcess[]
  auctions          Auction[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model JudicialDistrict {
  id          String            @id @default(uuid())
  name        String
  slug        String            @unique
  court       Court             @relation(fields: [courtId], references: [id])
  courtId     String
  state       State             @relation(fields: [stateId], references: [id])
  stateId     String
  zipCode     String?
  branches    JudicialBranch[]
  processes   JudicialProcess[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([courtId])
  @@index([stateId])
}

model JudicialBranch {
  id            String            @id @default(uuid())
  name          String
  slug          String            @unique
  district      JudicialDistrict  @relation(fields: [districtId], references: [id])
  districtId    String
  contactName   String?
  phone         String?
  email         String?
  processes     JudicialProcess[]
  auctions      Auction[]
  seller        Seller?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([districtId])
}

model JudicialProcess {
  id            String         @id @default(uuid())
  publicId      String?        @unique
  processNumber String
  isElectronic  Boolean        @default(true)
  court         Court          @relation(fields: [courtId], references: [id])
  courtId       String
  district      JudicialDistrict @relation(fields: [districtId], references: [id])
  districtId    String
  branch        JudicialBranch @relation(fields: [branchId], references: [id])
  branchId      String
  seller        Seller?        @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId      String?        @unique
  parties       JudicialParty[]
  bens          Bem[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
}

model JudicialParty {
  id             String          @id @default(uuid())
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId      String
  name           String
  documentNumber String?
  partyType      String

  @@index([processId])
}

// =================================================================
// MODELOS PRINCIPAIS (LEILÃO, LOTE, BEM)
// =================================================================

model Auction {
  id                              String         @id @default(uuid())
  publicId                        String?        @unique
  slug                            String?        @unique
  title                           String
  description                     String?        @db.Text
  status                          String?        @default("RASCUNHO")
  auctionDate                     DateTime?
  endDate                         DateTime?
  totalLots                       Int?           @default(0)
  initialOffer                    Float?
  auctionType                     String?
  auctionMethod                   String?        @default("STANDARD")
  participation                   String?        @default("ONLINE")
  onlineUrl                       String?
  address                         String?
  city                            City?          @relation(fields: [cityId], references: [id])
  cityId                          String?
  state                           State?         @relation(fields: [stateId], references: [id])
  stateId                         String?
  zipCode                         String?
  isFeaturedOnMarketplace         Boolean?       @default(false)
  marketplaceAnnouncementTitle    String?
  visits                          Int?           @default(0)
  totalHabilitatedUsers           Int?           @default(0)
  estimatedRevenue                Float?
  achievedRevenue                 Float?
  automaticBiddingEnabled         Boolean?       @default(false)
  silentBiddingEnabled            Boolean?       @default(false)
  allowMultipleBidsPerUser        Boolean?       @default(true)
  allowInstallmentBids            Boolean?       @default(true)
  softCloseEnabled                Boolean?       @default(false)
  softCloseMinutes                Int?           @default(2)
  documentsUrl                    String?
  imageUrl                        String?
  imageMediaId                    String?
  dataAiHint                      String?
  category                        LotCategory?   @relation(fields: [categoryId], references: [id])
  categoryId                      String?
  auctioneer                      Auctioneer?    @relation(fields: [auctioneerId], references: [id])
  auctioneerId                    String?
  seller                          Seller?        @relation(fields: [sellerId], references: [id])
  sellerId                        String?
  judicialProcess                 JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId               String?        @unique
  court                           Court?         @relation(fields: [courtId], references: [id])
  courtId                         String?
  district                        JudicialDistrict? @relation(fields: [districtId], references: [id])
  districtId                      String?
  branch                          JudicialBranch? @relation(fields: [branchId], references: [id])
  branchId                        String?
  lots                            Lot[]
  bids                            Bid[]
  auctionStages                   AuctionStage[]
  habilitations                   AuctionHabilitation[]
  createdAt                       DateTime       @default(now())
  updatedAt                       DateTime       @updatedAt

  @@index([categoryId])
  @@index([auctioneerId])
  @@index([sellerId])
  @@index([judicialProcessId])
  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
}

model AuctionStage {
  id             String    @id @default(uuid())
  auction        Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId      String
  name           String
  startDate      DateTime
  endDate        DateTime
  initialPrice   Float?
  statusText     String?
  lotStageDetails LotAuctionStageDetails[]

  @@index([auctionId])
}

model Lot {
  id                              String        @id @default(uuid())
  publicId                        String?       @unique
  auction                         Auction       @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                       String
  number                          String?
  title                           String
  description                     String?       @db.Text
  price                           Float         @default(0)
  status                          String        @default("EM_BREVE")
  bidsCount                       Int?          @default(0)
  views                           Int?          @default(0)
  isFeatured                      Boolean?      @default(false)
  isExclusive                     Boolean?      @default(false)
  discountPercentage              Int?
  additionalTriggers              Json?
  imageUrl                        String?
  imageMediaId                    String?
  galleryImageUrls                Json?
  mediaItemIds                    Json?
  inheritedMediaFromBemId         String?
  type                            String? // Denormalized category name
  categoryId                      String?
  category                        LotCategory?  @relation(fields: [categoryId], references: [id])
  subcategoryId                   String?
  subcategory                     Subcategory?  @relation(fields: [subcategoryId], references: [id])
  sellerId                        String?
  seller                          Seller?       @relation(fields: [sellerId], references: [id])
  auctioneerId                    String?
  auctioneer                      Auctioneer?   @relation(fields: [auctioneerId], references: [id])
  cityId                          String?
  city                            City?         @relation(fields: [cityId], references: [id])
  stateId                         String?
  state                           State?        @relation(fields: [stateId], references: [id])
  cityName                        String?
  stateUf                         String?
  latitude                        Float?
  longitude                       Float?
  mapAddress                      String?
  mapEmbedUrl                     String?
  mapStaticImageUrl               String?
  lotSpecificAuctionDate          DateTime?
  secondAuctionDate               DateTime?
  endDate                         DateTime?
  condition                       String?
  dataAiHint                      String?
  winnerId                        String?
  winner                          User?         @relation(fields: [winnerId], references: [id], onDelete: SetNull)
  winningBidTermUrl               String?
  bids                            Bid[]
  wins                            UserWin[]
  maxBids                         UserLotMaxBid[]
  questions                       LotQuestion[]
  reviews                         Review[]
  bens                            LotBens[]
  auctionStageDetails             LotAuctionStageDetails[]
  createdAt                       DateTime      @default(now())
  updatedAt                       DateTime      @updatedAt

  @@index([auctionId])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([sellerId])
  @@index([winnerId])
}

// Join table for Lots and Bems
model LotBens {
  lot     Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId   String
  bem     Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId   String
  @@id([lotId, bemId])
}

model LotAuctionStageDetails {
  id              String      @id @default(uuid())
  lot             Lot         @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId           String
  auctionStage    AuctionStage @relation(fields: [auctionStageId], references: [id], onDelete: Cascade)
  auctionStageId  String
  initialBid      Float?
  bidIncrement    Float?
  evaluationValue Float?
  debtAmount      Float?
  itbiValue       Float?
  
  @@unique([lotId, auctionStageId])
}

model Bem {
  id                              String        @id @default(uuid())
  publicId                        String?       @unique
  title                           String
  description                     String?       @db.Text
  status                          String        @default("DISPONIVEL")
  categoryId                      String?
  category                        LotCategory?  @relation(fields: [categoryId], references: [id])
  subcategoryId                   String?
  subcategory                     Subcategory?  @relation(fields: [subcategoryId], references: [id])
  judicialProcessId               String?
  judicialProcess                 JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  sellerId                        String?
  seller                          Seller?       @relation(fields: [sellerId], references: [id])
  imageUrl                        String?
  imageMediaId                    String?
  galleryImageUrls                Json?
  mediaItemIds                    Json?
  dataAiHint                      String?
  locationCity                    String?
  locationState                   String?
  address                         String?
  latitude                        Float?
  longitude                       Float?
  lots                            LotBens[]
  createdAt                       DateTime      @default(now())
  updatedAt                       DateTime      @updatedAt

  // Veículos
  plate                           String?
  make                            String?
  model                           String?
  version                         String?
  year                            Int?
  modelYear                       Int?
  mileage                         Int?
  color                           String?
  fuelType                        String?
  transmissionType                String?
  bodyType                        String?
  vin                             String?
  renavam                         String?
  enginePower                     String?
  numberOfDoors                   Int?
  vehicleOptions                  String?       @db.Text
  detranStatus                    String?
  debts                           String?       @db.Text
  runningCondition                String?
  bodyCondition                   String?
  tiresCondition                  String?
  hasKey                          Boolean?
  
  // Imóveis
  propertyRegistrationNumber      String?
  iptuNumber                      String?
  isOccupied                      Boolean?
  totalArea                       Float?
  builtArea                       Float?
  bedrooms                        Int?
  suites                          Int?
  bathrooms                       Int?
  parkingSpaces                   Int?
  constructionType                String?
  finishes                        String?       @db.Text
  infrastructure                  String?       @db.Text
  condoDetails                    String?       @db.Text
  improvements                    String?       @db.Text
  topography                      String?
  liensAndEncumbrances            String?       @db.Text
  propertyDebts                   String?       @db.Text
  unregisteredRecords             String?       @db.Text
  hasHabiteSe                     Boolean?
  zoningRestrictions              String?
  
  // Eletrônicos
  brand                           String?
  serialNumber                    String?
  itemCondition                   String?
  specifications                  String?       @db.Text
  includedAccessories             String?       @db.Text
  batteryCondition                String?
  hasInvoice                      Boolean?
  hasWarranty                     Boolean?
  repairHistory                   String?       @db.Text
  
  // Eletrodomésticos
  applianceCapacity               String?
  voltage                         String?
  applianceType                   String?
  additionalFunctions             String?

  // Máquinas e Equipamentos
  hoursUsed                       Int?
  engineType                      String?
  capacityOrPower                 String?
  maintenanceHistory              String?       @db.Text
  installationLocation            String?
  compliesWithNR                  String?
  operatingLicenses               String?

  // Semoventes (Livestock)
  breed                           String?
  age                             String?
  sex                             String?
  weight                          String?
  individualId                    String?       @unique
  purpose                         String?
  sanitaryCondition               String?
  vaccinationStatus               String?
  lineage                         String?
  isPregnant                      Boolean?
  specialSkills                   String?
  gtaDocument                     String?
  breedRegistryDocument           String?
}

// =================================================================
// MODELOS DE INTERAÇÃO (LANCES, ARREMATES, ETC)
// =================================================================

model Bid {
  id            String   @id @default(uuid())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId      String
  bidderDisplay String?
  amount        Float
  timestamp     DateTime @default(now())

  @@index([lotId])
  @@index([auctionId])
  @@index([bidderId])
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model UserWin {
  id                String    @id @default(uuid())
  lot               Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId             String    @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  winningBidAmount  Float
  winDate           DateTime  @default(now())
  paymentStatus     String
  invoiceUrl        String?
  shippingStatus    String?
  shippingCode      String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([userId])
}

model LotQuestion {
  id                      String   @id @default(uuid())
  lot                     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId                   String
  user                    User     @relation(name: "AskedByUser", fields: [userId], references: [id], onDelete: Cascade)
  userId                  String
  userDisplayName         String
  questionText            String   @db.Text
  answerText              String?  @db.Text
  isPublic                Boolean  @default(true)
  answeredAt              DateTime?
  answeredByUser          User?     @relation(name: "AnsweredByUser", fields: [answeredByUserId], references: [id], onDelete: SetNull)
  answeredByUserId        String?
  answeredByUserDisplayName String?
  createdAt               DateTime @default(now())
  
  @@index([lotId])
  @@index([userId])
  @@index([answeredByUserId])
}

model Review {
    id              String      @id @default(uuid())
    lot             Lot         @relation(fields: [lotId], references: [id], onDelete: Cascade)
    lotId           String
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId          String
    userDisplayName String
    rating          Int
    comment         String      @db.Text
    createdAt       DateTime    @default(now())

    @@index([lotId])
    @@index([userId])
}


// =================================================================
// MODELOS DE CONTEÚDO E MÍDIA
// =================================================================

model MediaItem {
  id                   String     @id @default(uuid())
  fileName             String
  storagePath          String
  title                String?
  altText              String?
  caption              String?
  description          String?    @db.Text
  mimeType             String
  sizeBytes            Int
  urlOriginal          String
  urlThumbnail         String?
  urlMedium            String?
  urlLarge             String?
  linkedLotIds         Json?
  dataAiHint           String?
  uploadedBy           User       @relation(name: "UploadedBy", fields: [uploadedByUserId], references: [id])
  uploadedByUserId     String
  judicialProcessId    String?
  uploadedAt           DateTime   @default(now())

  @@unique([storagePath])
  @@index([uploadedByUserId])
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentTemplate {
  id        String   @id @default(uuid())
  name      String
  type      String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// =================================================================
// MODELOS DE RELACIONAMENTOS ADICIONAIS
// =================================================================

model AuctionHabilitation {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  auction    Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId  String
  habilitatedAt DateTime @default(now())

  @@id([userId, auctionId])
}

model DirectSaleOffer {
    id                  String      @id @default(uuid())
    publicId            String?     @unique
    title               String
    description         String?     @db.Text
    offerType           String?     // BUY_NOW, ACCEPTS_PROPOSALS
    price               Float?
    minimumOfferPrice   Float?
    status              String      @default("ACTIVE") // ACTIVE, PENDING_APPROVAL, SOLD, EXPIRED
    category            String?
    seller              Seller      @relation(fields: [sellerId], references: [id])
    sellerId            String
    sellerName          String?
    sellerLogoUrl       String?
    dataAiHintSellerLogo String?
    locationCity        String?
    locationState       String?
    imageUrl            String?
    imageMediaId        String?
    dataAiHint          String?
    galleryImageUrls    Json?
    mediaItemIds        Json?
    itemsIncluded       Json?
    views               Int?        @default(0)
    expiresAt           DateTime?
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt
    
    @@index([sellerId])
}
