
// datasource db defines the database connection details.
// It's configured for MySQL, using the DATABASE_URL environment variable.
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma" // Enables relations even without foreign keys at the DB level.
}

// generator client specifies that Prisma Client should be generated for JavaScript/TypeScript.
generator client {
  provider = "prisma-client-js"
}

// ==============================================================================
// ENUMS - Define all enumerations at the top to prevent reference errors.
// ==============================================================================
enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}


// ==============================================================================
// MODELS - Organized by dependency level (base tables first).
// ==============================================================================

// --- Platform Configuration ---
model PlatformSettings {
  id                                String                      @id @default("global")
  siteTitle                         String?
  siteTagline                       String?
  logoUrl                           String?
  faviconUrl                        String?
  galleryImageBasePath              String
  storageProvider                   String                      @default("local")
  firebaseStorageBucket             String?
  activeThemeName                   String?
  themes                            Json? // Corrected to single Json
  platformPublicIdMasks             Json?
  homepageSections                  Json? // Corrected to single Json
  mentalTriggerSettings             Json?
  sectionBadgeVisibility            Json?
  mapSettings                       Json?
  searchPaginationType              String                      @default("loadMore")
  searchItemsPerPage                Int                         @default(12)
  searchLoadMoreCount               Int                         @default(12)
  showCountdownOnLotDetail          Boolean                     @default(true)
  showCountdownOnCards              Boolean                     @default(true)
  showRelatedLotsOnLotDetail        Boolean                     @default(true)
  relatedLotsCount                  Int                         @default(5)
  defaultUrgencyTimerHours          Int?
  variableIncrementTable            Json? // Corrected to single Json
  biddingSettings                   Json?
  paymentGatewaySettings            Json?
  defaultListItemsPerPage           Int                         @default(10)
  updatedAt                         DateTime?                   @updatedAt
}

// --- Roles and Permissions ---
model Role {
  id              String         @id @default(uuid())
  name            String         @unique
  nameNormalized  String         @unique
  description     String?
  permissions     Json?
  users           UsersOnRoles[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

// --- Geographic & Judicial Base Tables ---
model State {
  id        String             @id @default(uuid())
  name      String
  uf        String             @unique
  slug      String?            @unique
  cityCount Int                @default(0)
  cities    City[]
  districts JudicialDistrict[]
  courts    Court[]
  auctions  Auction[]          @relation("AuctionState")
  lots      Lot[]              @relation("LotState")
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model Court {
  id                String             @id @default(uuid())
  name              String
  slug              String?
  stateUf           String?
  website           String?
  districts         JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]          @relation("AuctionCourt")
  stateId           String?            @map("state_id")
  state             State?             @relation(fields: [stateId], references: [id])
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}


// --- Categories ---
model LotCategory {
  id                   String              @id @default(uuid())
  name                 String
  slug                 String              @unique
  description          String?             @db.Text
  hasSubcategories     Boolean
  iconName             String?
  dataAiHintIcon       String?
  logoUrl              String?
  logoMediaId          String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  subcategories        Subcategory[]
  auctions             Auction[]
  bens                 Bem[]
  lots                 Lot[]
  directSaleOffers     DirectSaleOffer[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model Subcategory {
  id                   String      @id @default(uuid())
  name                 String
  slug                 String?
  parentCategoryId     String
  description          String?     @db.Text
  displayOrder         Int         @default(0)
  iconUrl              String?
  iconMediaId          String?
  dataAiHintIcon       String?
  lots                 Lot[]
  bens                 Bem[]
  parentCategory       LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
}

// --- Users & Sellers & Auctioneers ---
model User {
  id                      String                 @id @default(uuid())
  email                   String                 @unique
  password                String?
  fullName                String?
  roleId                  String?
  sellerId                String?
  habilitationStatus      UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType             AccountType            @default(PHYSICAL)
  avatarUrl               String?
  dataAiHint              String?
  badges                  Json?
  cpf                     String?
  rgNumber                String?
  rgIssuer                String?
  rgIssueDate             DateTime?
  rgState                 String?
  dateOfBirth             DateTime?
  cellPhone               String?
  homePhone               String?
  gender                  String?
  profession              String?
  nationality             String?
  maritalStatus           String?
  propertyRegime          String?
  spouseName              String?
  spouseCpf               String?
  zipCode                 String?
  street                  String?
  number                  String?
  complement              String?
  neighborhood            String?
  city                    String?
  state                   String?
  razaoSocial             String?
  cnpj                    String?
  inscricaoEstadual       String?
  website                 String?
  responsibleName         String?
  responsibleCpf          String?
  optInMarketing          Boolean?               @default(false)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  roles                   UsersOnRoles[]
  seller                  Seller?
  auctioneer              Auctioneer?
  bids                    Bid[]
  wins                    UserWin[]
  documents               UserDocument[]
  notifications           Notification[]
  habilitations           AuctionHabilitation[]
  maxBids                 UserLotMaxBid[]
  uploadedMedia           MediaItem[]            @relation("UploadedBy")
  wonLots                 Lot[]                  @relation("WonLots")
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
  @@index([roleId])
}

model Auctioneer {
  id                   String    @id @default(uuid())
  publicId             String    @unique
  slug                 String?   @unique
  name                 String
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?   @db.Text
  userId               String?   @unique
  user                 User?     @relation(fields: [userId], references: [id])
  auctions             Auction[]
  lots                 Lot[]
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model Seller {
  id                   String              @id @default(uuid())
  publicId             String              @unique
  slug                 String?             @unique
  name                 String              @unique
  contactName          String?
  email                String?             @unique
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?             @db.Text
  userId               String?             @unique
  user                 User?               @relation("SellerUser", fields: [userId], references: [id], onDelete: SetNull)
  isJudicial           Boolean             @default(false)
  judicialBranchId     String?             @unique
  judicialBranch       JudicialBranch?     @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  auctions             Auction[]
  lots                 Lot[]
  bens                 Bem[]
  directSaleOffers     DirectSaleOffer[]
  judicialProcesses    JudicialProcess[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}


// --- Judicial Hierarchy ---

model JudicialDistrict {
  id          String           @id @default(uuid())
  name        String
  slug        String?          @unique
  courtId     String?
  stateId     String?
  zipCode     String?
  branches    JudicialBranch[]
  processes   JudicialProcess[]
  auctions    Auction[]        @relation("AuctionDistrict")
  court       Court?           @relation(fields: [courtId], references: [id])
  state       State?           @relation(fields: [stateId], references: [id])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([courtId])
  @@index([stateId])
}

model JudicialBranch {
  id          String             @id @default(uuid())
  name        String
  slug        String?            @unique
  districtId  String?
  contactName String?
  phone       String?
  email       String?
  district    JudicialDistrict?  @relation(fields: [districtId], references: [id])
  processes   JudicialProcess[]
  auctions    Auction[]          @relation("AuctionBranch")
  seller      Seller?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@index([districtId])
}

model JudicialProcess {
  id            String          @id @default(uuid())
  publicId      String          @unique
  processNumber String
  isElectronic  Boolean         @default(true)
  courtId       String?
  districtId    String?
  branchId      String?
  sellerId      String?
  bens          Bem[]
  auction       Auction?
  parties       JudicialParty[]
  court         Court?          @relation(fields: [courtId], references: [id])
  district      JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch        JudicialBranch? @relation(fields: [branchId], references: [id])
  seller        Seller?         @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
  @@index([sellerId])
}

model JudicialParty {
  id             String          @id @default(uuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

// --- Main Models: Auction, Lot, Bem ---

model Auction {
  id                             String                 @id @default(uuid())
  publicId                       String                 @unique
  slug                           String?                @unique
  title                          String
  description                    String?                @db.Text
  status                         AuctionStatus          @default(RASCUNHO)
  auctionDate                    DateTime?
  endDate                        DateTime?
  totalLots                      Int?                   @default(0)
  initialOffer                   Decimal?
  isFavorite                     Boolean?               @default(false)
  visits                         Int?                   @default(0)
  imageUrl                       String?
  imageMediaId                   String?
  dataAiHint                     String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  automaticBiddingEnabled        Boolean                @default(false)
  silentBiddingEnabled           Boolean                @default(false)
  allowMultipleBidsPerUser       Boolean                @default(true)
  allowInstallmentBids           Boolean                @default(true)
  softCloseEnabled               Boolean                @default(false)
  softCloseMinutes               Int?                   @default(2)
  estimatedRevenue               Decimal?
  achievedRevenue                Decimal?
  totalHabilitatedUsers          Int?                   @default(0)
  isFeaturedOnMarketplace        Boolean                @default(false)
  marketplaceAnnouncementTitle   String?
  auctionType                    AuctionType?
  auctionMethod                  AuctionMethod?         @default(STANDARD)
  participation                  AuctionParticipation?  @default(ONLINE)
  address                        String?
  zipCode                        String?
  latitude                       Float?
  longitude                      Float?
  onlineUrl                      String?
  decrementAmount                Decimal?
  decrementIntervalSeconds       Int?
  floorPrice                     Decimal?
  autoRelistSettings             Json?
  
  // Relations
  auctioneerId                   String?
  sellerId                       String?
  categoryId                     String?
  judicialProcessId              String?                @unique
  courtId                        String?
  districtId                     String?
  branchId                       String?
  cityId                         String?
  stateId                        String?

  auctioneer                     Auctioneer?            @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  seller                         Seller?                @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  category                       LotCategory?           @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  judicialProcess                JudicialProcess?       @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  court                          Court?                 @relation("AuctionCourt", fields: [courtId], references: [id])
  district                       JudicialDistrict?      @relation("AuctionDistrict", fields: [districtId], references: [id])
  branch                         JudicialBranch?        @relation("AuctionBranch", fields: [branchId], references: [id])
  city                           City?                  @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state                          State?                 @relation("AuctionState", fields: [stateId], references: [id], onDelete: SetNull)
  lots                           Lot[]
  auctionStages                  AuctionStage[]
  bids                           Bid[]
  habilitations                  AuctionHabilitation[]
  
  createdAt                      DateTime               @default(now())
  updatedAt                      DateTime               @updatedAt
  
  @@index([auctioneerId])
  @@index([sellerId])
  @@index([categoryId])
  @@index([judicialProcessId])
  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
  @@index([cityId])
  @@index([stateId])
}

model AuctionStage {
  id              String   @id @default(uuid())
  auctionId       String
  name            String
  startDate       DateTime
  endDate         DateTime
  evaluationValue Decimal?
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  lotDetails      LotAuctionStageDetails[]

  @@index([auctionId])
}


model Lot {
  id                             String                 @id @default(uuid())
  publicId                       String                 @unique
  auctionId                      String
  slug                           String?
  number                         String?
  title                          String
  description                    String?                @db.Text
  price                          Decimal
  initialPrice                   Decimal?
  secondInitialPrice             Decimal?
  bidIncrementStep               Decimal?
  status                         LotStatus              @default(EM_BREVE)
  bidsCount                      Int?                   @default(0)
  views                          Int?                   @default(0)
  isFeatured                     Boolean?               @default(false)
  isExclusive                    Boolean?               @default(false)
  discountPercentage             Int?
  additionalTriggers             Json?
  imageUrl                       String?
  imageMediaId                   String?
  galleryImageUrls               Json?
  mediaItemIds                   Json?
  inheritedMediaFromBemId        String?
  type                           String
  condition                      String?
  dataAiHint                     String?
  winningBidTermUrl              String?
  allowInstallmentBids           Boolean?               @default(false)
  latitude                       Float?
  longitude                      Float?
  mapAddress                     String?
  mapEmbedUrl                    String?
  mapStaticImageUrl              String?
  endDate                        DateTime?
  auctionDate                    DateTime?
  lotSpecificAuctionDate         DateTime?
  secondAuctionDate              DateTime?
  isRelisted                     Boolean                @default(false)
  relistCount                    Int                    @default(0)
  
  // Relational fields
  categoryId                     String?
  subcategoryId                  String?
  sellerId                       String?
  auctioneerId                   String?
  cityId                         String?
  stateId                        String?
  winnerId                       String?
  originalLotId                  String?                @unique
  
  auction                        Auction                @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                       LotCategory?           @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory                    Subcategory?           @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  seller                         Seller?                @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  auctioneer                     Auctioneer?            @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  city                           City?                  @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state                          State?                 @relation("LotState", fields: [stateId], references: [id], onDelete: SetNull)
  winner                         User?                  @relation("WonLots", fields: [winnerId], references: [id], onDelete: SetNull)
  originalLot                    Lot?                   @relation("RelistHistory", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLots                   Lot[]                  @relation("RelistHistory")

  bens                           LotBens[]
  bids                           Bid[]
  wins                           UserWin[]
  maxBids                        UserLotMaxBid[]
  stageDetails                   LotAuctionStageDetails[]

  createdAt                      DateTime               @default(now())
  updatedAt                      DateTime               @updatedAt

  @@index([auctionId])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([sellerId])
  @@index([auctioneerId])
  @@index([cityId])
  @@index([stateId])
  @@index([winnerId])
}

model LotAuctionStageDetails {
    lotId          String
    stageId        String
    initialBid     Decimal?
    bidIncrement   Decimal?

    lot            Lot           @relation(fields: [lotId], references: [id], onDelete: Cascade)
    stage          AuctionStage  @relation(fields: [stageId], references: [id], onDelete: Cascade)

    @@id([lotId, stageId])
}

model DirectSaleOffer {
  id                      String                @id @default(uuid())
  publicId                String                @unique
  title                   String
  description             String?               @db.Text
  offerType               DirectSaleOfferType
  price                   Decimal?
  minimumOfferPrice       Decimal?
  status                  DirectSaleOfferStatus @default(ACTIVE)
  categoryId              String?
  sellerId                String?
  sellerName              String?
  sellerLogoUrl           String?
  dataAiHintSellerLogo    String?
  locationCity            String?
  locationState           String?
  imageUrl                String?
  imageMediaId            String?
  dataAiHint              String?
  galleryImageUrls        Json?
  mediaItemIds            Json?
  itemsIncluded           Json?
  views                   Int?                  @default(0)
  expiresAt               DateTime?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  
  category                LotCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  seller                  Seller?   @relation(fields: [sellerId], references: [id], onDelete: SetNull)

  @@index([categoryId])
  @@index([sellerId])
}

// --- Supporting Models ---
model City {
  id       String    @id @default(uuid())
  name     String
  slug     String?
  stateId  String
  stateUf  String?
  ibgeCode String?   @unique
  lotCount Int       @default(0)
  state    State     @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots     Lot[]
  auctions Auction[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([stateId])
}

model Bid {
  id            String   @id @default(uuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([bidderId])
  @@index([auctionId])
}

model UserWin {
    id                 String   @id @default(uuid())
    lotId              String   @unique
    userId             String
    winningBidAmount   Decimal
    winDate            DateTime @default(now())
    paymentStatus      PaymentStatus
    invoiceUrl         String?
    lot                Lot      @relation(fields: [lotId], references: [id])
    user               User     @relation(fields: [userId], references: [id])
    installmentPayments InstallmentPayment[]

    @@index([userId])
}

model InstallmentPayment {
    id                 String @id @default(uuid())
    userWinId          String
    installmentNumber  Int
    amount             Decimal
    dueDate            DateTime
    status             PaymentStatus @default(PENDENTE)
    paymentDate        DateTime?
    paymentMethod      String?
    transactionId      String?
    userWin            UserWin @relation(fields: [userWinId], references: [id], onDelete: Cascade)

    @@index([userWinId])
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Decimal
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
  @@index([userId])
  @@index([lotId])
}


model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AuctionHabilitation {
    id            String @id @default(uuid())
    userId        String
    auctionId     String
    habilitatedAt DateTime @default(now())
    user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    auction       Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

    @@unique([userId, auctionId])
    @@index([auctionId])
}

model DocumentType {
    id          String @id @default(uuid())
    name        String @unique
    description String?
    isRequired  Boolean @default(true)
    appliesTo   String? // e.g., "PHYSICAL,LEGAL,ALL"
    userDocuments UserDocument[]
}

model UserDocument {
    id                String @id @default(uuid())
    userId            String
    documentTypeId    String
    status            UserDocumentStatus @default(PENDING_ANALYSIS)
    fileUrl           String
    fileName          String?
    rejectionReason   String? @db.Text
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    documentType      DocumentType @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)

    @@unique([userId, documentTypeId])
    @@index([documentTypeId])
}


model MediaItem {
    id                String   @id @default(uuid())
    fileName          String
    storagePath       String
    title             String
    altText           String?
    caption           String?
    description       String?  @db.Text
    mimeType          String
    sizeBytes         Int
    urlOriginal       String
    urlThumbnail      String?
    urlMedium         String?
    urlLarge          String?
    linkedLotIds      Json?
    judicialProcessId String?
    dataAiHint        String?
    uploadedByUserId  String   @map("uploadedBy")
    uploadedBy        User     @relation("UploadedBy", fields: [uploadedByUserId], references: [id])
    uploadedAt        DateTime @default(now())

    @@index([uploadedByUserId])
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}
