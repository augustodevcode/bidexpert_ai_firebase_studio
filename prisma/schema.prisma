// prisma/schema.prisma
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. TABELAS COM NENHUMA DEPENDÊNCIA DE CHAVE ESTRANGEIRA (BASE TABLES)
// =================================================================
model PlatformSettings {
  id                         String    @id @default(uuid())
  siteTitle                  String?   @db.VarChar(100)
  siteTagline                String?   @db.VarChar(200)
  logoUrl                    String?
  faviconUrl                 String?
  galleryImageBasePath       String
  storageProvider            String    @default("local")
  firebaseStorageBucket      String?
  activeThemeName            String?
  themes                     Json? // Armazenará um array de objetos de tema
  platformPublicIdMasks      Json?
  homepageSections           Json?
  mentalTriggerSettings      Json?
  sectionBadgeVisibility     Json?
  mapSettings                Json?
  searchPaginationType       String    @default("loadMore")
  searchItemsPerPage         Int       @default(12)
  searchLoadMoreCount        Int       @default(12)
  showCountdownOnLotDetail   Boolean   @default(true)
  showCountdownOnCards       Boolean   @default(true)
  showRelatedLotsOnLotDetail Boolean   @default(true)
  relatedLotsCount           Int       @default(5)
  defaultUrgencyTimerHours   Int?
  variableIncrementTable     Json?
  biddingSettings            Json?
  defaultListItemsPerPage    Int?      @default(10)
  updatedAt                  DateTime? @updatedAt
}

model Role {
  id              String         @id @default(uuid())
  name            String         @unique @db.VarChar(50)
  nameNormalized  String         @unique @db.VarChar(50)
  description     String?        @db.VarChar(255)
  permissions     Json?
  users           UsersOnRoles[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model State {
  id        String             @id @default(uuid())
  name      String
  uf        String             @unique @db.VarChar(2)
  slug      String             @unique
  cities    City[]
  districts JudicialDistrict[]
  lots      Lot[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model LotCategory {
  id                   String            @id @default(uuid())
  name                 String            @unique
  slug                 String            @unique
  description          String?           @db.VarChar(500)
  hasSubcategories     Boolean?
  iconName             String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintIcon       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  subcategories        Subcategory[]
  auctions             Auction[]
  lots                 Lot[]
  bens                 Bem[]
  directSaleOffers     DirectSaleOffer[]
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
}

model DocumentTemplate {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(150)
  type      String
  content   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(150)
  email     String   @db.VarChar(150)
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentType {
  id          String         @id @default(uuid())
  name        String         @db.VarChar(150)
  description String?
  isRequired  Boolean        @default(true)
  appliesTo   String? // e.g., "PHYSICAL,LEGAL"
  userDocs    UserDocument[]
}

// =================================================================
// 2. TABELAS COM UM NÍVEL DE DEPENDÊNCIA
// =================================================================

model User {
  id                  String               @id @default(uuid())
  email               String               @unique @db.VarChar(150)
  password            String?
  fullName            String?              @db.VarChar(150)
  roles               UsersOnRoles[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  habilitationStatus  String               @default("PENDING_DOCUMENTS") // UserHabilitationStatus
  accountType         String               @default("PHYSICAL") // AccountType
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  maxBids             UserLotMaxBid[]
  uploadedMedia       MediaItem[]
  auctionHabilitations AuctionHabilitation[]
  lotQuestions        LotQuestion[]        @relation("UserQuestions")
  answeredQuestions   LotQuestion[]        @relation("AnsweredBy")
  reviews             Review[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  cpf                 String?
  dateOfBirth         DateTime?
  razaoSocial         String?
  cnpj                String?
  inscricaoEstadual   String?
  website             String?
  cellPhone           String?
  homePhone           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  optInMarketing      Boolean?             @default(false)
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  responsibleName     String?
  responsibleCpf      String?
  wonLots             Lot[]                @relation("LotWinner")
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  role       Role     @relation(fields: [roleId], references: [id])
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model City {
  id        String   @id @default(uuid())
  name      String
  slug      String?
  state     State    @relation(fields: [stateId], references: [id])
  stateId   String
  stateUf   String?  @db.VarChar(2)
  ibgeCode  String?  @unique @db.VarChar(10)
  lotCount  Int?     @default(0)
  lots      Lot[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subcategory {
  id                 String      @id @default(uuid())
  name               String
  slug               String?
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id])
  parentCategoryId   String
  description        String?     @db.VarChar(500)
  displayOrder       Int?        @default(0)
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  lots               Lot[]
  bens               Bem[]
}

model Court {
  id                  String               @id @default(uuid())
  name                String               @unique
  slug                String?              @unique
  stateUf             String?              @db.VarChar(2)
  website             String?
  judicialDistricts   JudicialDistrict[]
  judicialProcesses   JudicialProcess[]
  auctions            Auction[] // Adicionando a relação inversa para leilões
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}


// =================================================================
// 3. TABELAS COM DOIS OU MAIS NÍVEIS DE DEPENDÊNCIA
// =================================================================
model JudicialDistrict {
  id                  String             @id @default(uuid())
  name                String
  slug                String?            @unique
  court               Court?             @relation(fields: [courtId], references: [id])
  courtId             String?
  state               State?             @relation(fields: [stateId], references: [id])
  stateId             String?
  zipCode             String?            @db.VarChar(10)
  judicialBranches    JudicialBranch[]
  judicialProcesses   JudicialProcess[]
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model JudicialBranch {
  id                  String             @id @default(uuid())
  name                String
  slug                String?            @unique
  district            JudicialDistrict?  @relation(fields: [districtId], references: [id])
  districtId          String?
  contactName         String?            @db.VarChar(150)
  phone               String?            @db.VarChar(20)
  email               String?            @db.VarChar(150)
  judicialProcesses   JudicialProcess[]
  sellers             Seller[]
  auctions            Auction[] // Adicionando a relação inversa para leilões
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model Seller {
  id               String          @id @default(uuid())
  publicId         String          @unique
  slug             String          @unique
  name             String          @unique @db.VarChar(150)
  contactName      String?         @db.VarChar(150)
  email            String?         @db.VarChar(150)
  phone            String?         @db.VarChar(20)
  address          String?         @db.VarChar(200)
  city             String?         @db.VarChar(100)
  state            String?         @db.VarChar(50)
  zipCode          String?         @db.VarChar(10)
  website          String?
  logoUrl          String?
  logoMediaId      String?
  dataAiHintLogo   String?
  description      String?         @db.Text
  user             User?           @relation(fields: [userId], references: [id])
  userId           String?         @unique
  isJudicial       Boolean         @default(false)
  judicialBranch   JudicialBranch? @relation(fields: [judicialBranchId], references: [id])
  judicialBranchId String?
  auctions         Auction[]
  lots             Lot[]
  bens             Bem[]
  directSaleOffers DirectSaleOffer[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model Auctioneer {
  id                  String    @id @default(uuid())
  publicId            String    @unique
  slug                String    @unique
  name                String    @db.VarChar(150)
  registrationNumber  String?   @db.VarChar(50)
  contactName         String?   @db.VarChar(150)
  email               String?   @db.VarChar(150)
  phone               String?   @db.VarChar(20)
  address             String?   @db.VarChar(200)
  city                String?   @db.VarChar(100)
  state               String?   @db.VarChar(50)
  zipCode             String?   @db.VarChar(10)
  website             String?
  logoUrl             String?
  logoMediaId         String?
  dataAiHintLogo      String?
  description         String?   @db.Text
  user                User?     @relation(fields: [userId], references: [id])
  userId              String?   @unique
  auctions            Auction[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model JudicialProcess {
  id            String           @id @default(uuid())
  publicId      String           @unique
  processNumber String           @unique @db.VarChar(100)
  isElectronic  Boolean          @default(true)
  court         Court?           @relation(fields: [courtId], references: [id])
  courtId       String?
  district      JudicialDistrict? @relation(fields: [districtId], references: [id])
  districtId    String?
  branch        JudicialBranch?  @relation(fields: [branchId], references: [id])
  branchId      String?
  seller        Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId      String?
  parties       JudicialParty[]
  bens          Bem[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model JudicialParty {
  id             String          @id @default(uuid())
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId      String
  name           String
  documentNumber String?         @db.VarChar(50)
  partyType      String          @db.VarChar(50)
}

model Bem {
  id                         String           @id @default(uuid())
  publicId                   String           @unique
  title                      String           @db.VarChar(200)
  description                String?          @db.Text
  status                     String           @default("DISPONIVEL")
  category                   LotCategory?     @relation(fields: [categoryId], references: [id])
  categoryId                 String?
  subcategory                Subcategory?     @relation(fields: [subcategoryId], references: [id])
  subcategoryId              String?
  judicialProcess            JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId          String?
  seller                     Seller?          @relation(fields: [sellerId], references: [id])
  sellerId                   String?
  evaluationValue            Float?
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  lots                       LotBens[]
  // Veículos
  plate                      String?          @db.VarChar(10)
  make                       String?          @db.VarChar(50)
  model                      String?          @db.VarChar(50)
  version                    String?          @db.VarChar(100)
  year                       Int?
  modelYear                  Int?
  mileage                    Int?
  color                      String?          @db.VarChar(30)
  fuelType                   String?          @db.VarChar(30)
  transmissionType           String?          @db.VarChar(30)
  bodyType                   String?          @db.VarChar(50)
  vin                        String?          @db.VarChar(17)
  renavam                    String?          @db.VarChar(11)
  enginePower                String?          @db.VarChar(50)
  numberOfDoors              Int?
  vehicleOptions             String?          @db.Text
  detranStatus               String?          @db.Text
  debts                      String?          @db.Text
  runningCondition           String?          @db.Text
  bodyCondition              String?          @db.Text
  tiresCondition             String?          @db.Text
  hasKey                     Boolean?
  // Imóveis
  propertyRegistrationNumber String?          @db.VarChar(50)
  iptuNumber                 String?          @db.VarChar(50)
  isOccupied                 Boolean?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?          @db.VarChar(100)
  finishes                   String?          @db.Text
  infrastructure             String?          @db.Text
  condoDetails               String?          @db.Text
  improvements               String?          @db.Text
  topography                 String?          @db.Text
  liensAndEncumbrances       String?          @db.Text
  propertyDebts              String?          @db.Text
  unregisteredRecords        String?          @db.Text
  hasHabiteSe                Boolean?
  zoningRestrictions         String?          @db.Text
  amenities                  Json?
  // Eletrônicos
  brand                      String?          @db.VarChar(50)
  serialNumber               String?          @db.VarChar(100)
  itemCondition              String?          @db.Text
  specifications             String?          @db.Text
  includedAccessories        String?          @db.Text
  batteryCondition           String?          @db.Text
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String?          @db.Text
  // Eletrodomésticos
  applianceCapacity          String?          @db.VarChar(50)
  voltage                    String?          @db.VarChar(20)
  applianceType              String?          @db.VarChar(50)
  additionalFunctions        String?          @db.Text
  // Máquinas e Equipamentos
  hoursUsed                  Int?
  engineType                 String?          @db.VarChar(50)
  capacityOrPower            String?          @db.VarChar(100)
  maintenanceHistory         String?          @db.Text
  installationLocation       String?          @db.VarChar(200)
  compliesWithNR             String?          @db.VarChar(100)
  operatingLicenses          String?          @db.VarChar(200)
  // Semoventes
  breed                      String?          @db.VarChar(50)
  age                        String?          @db.VarChar(30)
  sex                        String?          @db.VarChar(10)
  weight                     String?          @db.VarChar(30)
  individualId               String?          @db.VarChar(50)
  purpose                    String?          @db.VarChar(100)
  sanitaryCondition          String?          @db.Text
  lineage                    String?          @db.Text
  isPregnant                 Boolean?
  specialSkills              String?          @db.Text
  gtaDocument                String?          @db.VarChar(100)
  breedRegistryDocument      String?          @db.VarChar(100)
  // Móveis
  furnitureType              String?          @db.VarChar(100)
  material                   String?          @db.VarChar(100)
  style                      String?          @db.VarChar(50)
  dimensions                 String?          @db.VarChar(100)
  pieceCount                 Int?
  // Joias
  jewelryType                String?          @db.VarChar(100)
  metal                      String?          @db.VarChar(100)
  gemstones                  String?          @db.Text
  totalWeight                String?          @db.VarChar(50)
  jewelrySize                String?          @db.VarChar(50)
  authenticityCertificate    String?          @db.Text
  // Obras de Arte
  workType                   String?          @db.VarChar(100)
  artist                     String?          @db.VarChar(100)
  period                     String?          @db.VarChar(100)
  technique                  String?          @db.VarChar(100)
  provenance                 String?          @db.Text
  // Embarcações
  boatType                   String?          @db.VarChar(100)
  boatLength                 String?          @db.VarChar(50)
  hullMaterial               String?          @db.VarChar(50)
  onboardEquipment           String?          @db.Text
  // Alimentos
  productName                String?          @db.VarChar(100)
  quantity                   String?          @db.VarChar(50)
  packagingType              String?          @db.VarChar(50)
  expirationDate             DateTime?
  storageConditions          String?          @db.Text
  // Metais Preciosos
  preciousMetalType          String?          @db.VarChar(50)
  purity                     String?          @db.VarChar(50)
  // Bens Florestais
  forestGoodsType            String?          @db.VarChar(100)
  volumeOrQuantity           String?          @db.VarChar(100)
  species                    String?          @db.VarChar(100)
  dofNumber                  String?          @db.VarChar(100)
  createdAt                  DateTime         @default(now())
  updatedAt                  DateTime         @updatedAt
}

model Auction {
  id                           String                @id @default(uuid())
  publicId                     String                @unique
  slug                         String                @unique
  title                        String
  description                  String?               @db.Text
  status                       String                @default("RASCUNHO")
  auctionDate                  DateTime?
  endDate                      DateTime?
  auctioneer                   Auctioneer?           @relation(fields: [auctioneerId], references: [id])
  auctioneerId                 String?
  seller                       Seller?               @relation(fields: [sellerId], references: [id])
  sellerId                     String?
  category                     LotCategory?          @relation(fields: [categoryId], references: [id])
  categoryId                   String?
  auctionType                  String?
  imageUrl                     String?
  imageMediaId                 String?
  documentsUrl                 String?
  visits                       Int?                  @default(0)
  totalLots                    Int?                  @default(0)
  initialOffer                 Float?
  isFavorite                   Boolean?              @default(false)
  dataAiHint                   String?
  automaticBiddingEnabled      Boolean               @default(false)
  allowInstallmentBids         Boolean               @default(false)
  silentBiddingEnabled         Boolean               @default(false)
  allowMultipleBidsPerUser     Boolean               @default(true)
  isFeaturedOnMarketplace      Boolean               @default(false)
  marketplaceAnnouncementTitle String?
  estimatedRevenue             Float?
  achievedRevenue              Float?
  totalHabilitatedUsers        Int?                  @default(0)
  softCloseEnabled             Boolean?              @default(false)
  softCloseMinutes             Int?                  @default(2)
  additionalTriggers           Json?
  bids                         Bid[]
  lots                         Lot[]
  auctionHabilitations         AuctionHabilitation[]
  createdAt                    DateTime              @default(now())
  updatedAt                    DateTime              @updatedAt
  court                        Court?                @relation(fields: [courtId], references: [id])
  courtId                      String?
  branch                       JudicialBranch?       @relation(fields: [branchId], references: [id])
  branchId                     String?
  evaluationReportUrl          String?
  auctionCertificateUrl        String?
  sellingBranch                String?
  decrementAmount              Float?
  decrementIntervalSeconds     Int?
  floorPrice                   Float?
  autoRelistSettings           Json?
  auctionStages                AuctionStage[]
}

model AuctionStage {
  id           String  @id @default(uuid())
  auction      Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId    String
  name         String
  startDate    DateTime
  endDate      DateTime
  initialPrice Float?
}

model Lot {
  id                           String         @id @default(uuid())
  publicId                     String         @unique
  auction                      Auction        @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                    String
  slug                         String?
  number                       String?        @db.VarChar(20)
  title                        String
  description                  String?        @db.Text
  price                        Float
  initialPrice                 Float?
  secondInitialPrice           Float?
  bidIncrementStep             Float?
  status                       String         @default("EM_BREVE")
  bidsCount                    Int?           @default(0)
  views                        Int?           @default(0)
  isFeatured                   Boolean?       @default(false)
  isExclusive                  Boolean?       @default(false)
  discountPercentage           Int?
  additionalTriggers           Json?
  imageUrl                     String?
  imageMediaId                 String?
  galleryImageUrls             Json?
  mediaItemIds                 Json?
  type                         String         @db.VarChar(100)
  category                     LotCategory?   @relation(fields: [categoryId], references: [id])
  categoryId                   String?
  subcategory                  Subcategory?   @relation(fields: [subcategoryId], references: [id])
  subcategoryId                String?
  seller                       Seller?        @relation(fields: [sellerId], references: [id])
  sellerId                     String?
  city                         City?          @relation(fields: [cityId], references: [id])
  cityId                       String?
  state                        State?         @relation(fields: [stateId], references: [id])
  stateId                      String?
  latitude                     Float?
  longitude                    Float?
  mapAddress                   String?
  mapEmbedUrl                  String?
  mapStaticImageUrl            String?
  endDate                      DateTime?
  lotSpecificAuctionDate       DateTime?
  secondAuctionDate            DateTime?
  condition                    String?
  dataAiHint                   String?
  winner                       User?          @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId                     String?
  winningBidTermUrl            String?
  allowInstallmentBids         Boolean?       @default(false)
  bens                         LotBens[]
  bids                         Bid[]
  wins                         UserWin[]
  reviews                      Review[]
  questions                    LotQuestion[]
  maxBids                      UserLotMaxBid[]
  createdAt                    DateTime       @default(now())
  updatedAt                    DateTime       @updatedAt
}

model LotBens {
  lot     Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId   String
  bem     Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId   String

  @@id([lotId, bemId])
}

model MediaItem {
  id             String    @id @default(uuid())
  fileName       String
  storagePath    String
  title          String?
  altText        String?
  caption        String?
  description    String?   @db.Text
  mimeType       String
  sizeBytes      Int?
  urlOriginal    String
  urlThumbnail   String?
  urlMedium      String?
  urlLarge       String?
  linkedLotIds   Json?
  dataAiHint     String?
  uploadedByUser User?     @relation(fields: [uploadedByUserId], references: [id])
  uploadedByUserId String
  uploadedAt     DateTime  @default(now())
}

model UserDocument {
  id              String       @id @default(uuid())
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  documentType    DocumentType @relation(fields: [documentTypeId], references: [id])
  documentTypeId  String
  status          String       @default("PENDING")
  fileUrl         String
  fileName        String?
  rejectionReason String?      @db.Text
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@unique([userId, documentTypeId])
}

model Bid {
  id            String   @id @default(uuid())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId      String
  bidderDisplay String?
  amount        Float
  timestamp     DateTime @default(now())
}

model UserWin {
  id               String  @id @default(uuid())
  lot              Lot     @relation(fields: [lotId], references: [id])
  lotId            String  @unique // A lot can only be won once
  user             User    @relation(fields: [userId], references: [id])
  userId           String
  winningBidAmount Float
  winDate          DateTime @default(now())
  paymentStatus    String
  invoiceUrl       String?
}

model DirectSaleOffer {
  id                   String       @id @default(uuid())
  publicId             String       @unique
  title                String
  description          String?      @db.Text
  offerType            String?
  price                Float?
  minimumOfferPrice    Float?
  status               String       @default("ACTIVE")
  category             LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId           String?
  seller               Seller?      @relation(fields: [sellerId], references: [id])
  sellerId             String?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int?         @default(0)
  expiresAt            DateTime?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Review {
  id              String   @id @default(uuid())
  lot             Lot      @relation(fields: [lotId], references: [id])
  lotId           String
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  userDisplayName String?
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())
}

model LotQuestion {
  id                        String   @id @default(uuid())
  lot                       Lot      @relation(fields: [lotId], references: [id])
  lotId                     String
  user                      User     @relation("UserQuestions", fields: [userId], references: [id])
  userId                    String
  userDisplayName           String?
  questionText              String   @db.Text
  isPublic                  Boolean  @default(true)
  answerText                String?  @db.Text
  answeredAt                DateTime?
  answeredBy                User?    @relation("AnsweredBy", fields: [answeredByUserId], references: [id])
  answeredByUserId          String?
  answeredByUserDisplayName String?
  createdAt                 DateTime @default(now())
}

model AuctionHabilitation {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId String
  createdAt DateTime @default(now())

  @@id([userId, auctionId])
}

