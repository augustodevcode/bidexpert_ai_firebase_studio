// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// ENUMS
// =================================================================
enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}


// =================================================================
// MODELS
// =================================================================

model User {
  id                  String                 @id @default(cuid())
  email               String                 @unique
  password            String?
  fullName            String?
  roleId              String? // Campo obsoleto, a relação agora é via UsersOnRoles
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType            @default(PHYSICAL)
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt

  // Relações
  roles             UsersOnRoles[]
  sellerProfile     Seller?
  auctioneerProfile Auctioneer?
  documents         UserDocument[]
  notifications     Notification[]
  bids              Bid[]
  wins              UserWin[]          @relation("UserWins")
  maxBids           UserLotMaxBid[]
  mediaItems        MediaItem[]

  // Campos PF
  cpf                 String?                @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  homePhone           String?
  cellPhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?

  // Campos PJ
  razaoSocial         String?
  cnpj                String?                @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?

  // Campos de Endereço
  zipCode     String?
  street      String?
  number      String?
  complement  String?
  neighborhood String?
  city        String?
  state       String?

  // Marketing
  optInMarketing Boolean? @default(false)
}

model Role {
  id              String         @id @default(cuid())
  name            String         @unique
  nameNormalized  String         @unique
  description     String?
  permissions     Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  // Relação
  users           UsersOnRoles[]
}

// Tabela de Junção para relação N-M entre User e Role
model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model State {
  id        String   @id @default(cuid())
  name      String
  uf        String   @unique
  slug      String?  @unique
  cityCount Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  // Relações
  cities    City[]
  districts JudicialDistrict[]
  auctions  Auction[]
  lots      Lot[]
}

model City {
  id       String   @id @default(cuid())
  name     String
  slug     String?
  stateId  String
  stateUf  String?
  ibgeCode String?  @unique
  lotCount Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  // Relações
  state    State    @relation(fields: [stateId], references: [id], onDelete: Cascade)
  auctions Auction[]
  lots     Lot[]
}

model LotCategory {
  id                   String        @id @default(cuid())
  name                 String        @unique
  slug                 String        @unique
  description          String?       @db.Text
  hasSubcategories     Boolean?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt @default(now())

  // Relações
  auctions        Auction[]
  lots            Lot[]
  bens            Bem[]
  subcategories   Subcategory[]
  directSaleOffers DirectSaleOffer[]
}

model Subcategory {
  id                   String      @id @default(cuid())
  name                 String
  slug                 String?
  parentCategoryId     String
  description          String?     @db.Text
  displayOrder         Int?        @default(0)
  iconUrl              String?
  iconMediaId          String?
  dataAiHintIcon       String?

  // Relações
  parentCategory LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots           Lot[]
  bens           Bem[]
}

model Court {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String?  @unique
  stateUf   String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  // Relações
  judicialProcesses JudicialProcess[]
  districts         JudicialDistrict[]
  auctions          Auction[]
}

model JudicialDistrict {
  id        String   @id @default(cuid())
  name      String
  slug      String?  @unique
  courtId   String
  stateId   String?
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  // Relações
  court             Court?            @relation(fields: [courtId], references: [id])
  state             State?            @relation(fields: [stateId], references: [id])
  branches          JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialBranch {
  id           String   @id @default(cuid())
  name         String
  slug         String?  @unique
  districtId   String
  contactName  String?
  phone        String?
  email        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt @default(now())
  // Relações
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
  auctions          Auction[]
}

model Auctioneer {
  id                 String    @id @default(cuid())
  publicId           String    @unique
  slug               String    @unique
  name               String
  registrationNumber String?
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?   @db.Text
  userId             String?   @unique
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt @default(now())
  // Relações
  user               User?     @relation(fields: [userId], references: [id])
  auctions           Auction[]
  lots               Lot[]
}

model Seller {
  id                 String    @id @default(cuid())
  publicId           String    @unique
  slug               String    @unique
  name               String    @unique
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?   @db.Text
  userId             String?   @unique
  isJudicial         Boolean   @default(false)
  judicialBranchId   String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt @default(now())

  // Relações
  user              User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  judicialBranch    JudicialBranch?   @relation(fields: [judicialBranchId], references: [id])
  auctions          Auction[]
  lots              Lot[]
  bens              Bem[]
  directSaleOffers  DirectSaleOffer[]
}

model JudicialProcess {
  id                String          @id @default(cuid())
  publicId          String?         @unique
  processNumber     String          @unique
  isElectronic      Boolean         @default(true)
  courtId           String?
  districtId        String?
  branchId          String?
  sellerId          String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt @default(now())
  
  // Relações
  court             Court?          @relation(fields: [courtId], references: [id])
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch            JudicialBranch? @relation(fields: [branchId], references: [id])
  seller            Seller?         @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties           JudicialParty[]
  bens              Bem[]
  auctions          Auction[]
}

model JudicialParty {
  id              String           @id @default(cuid())
  processId       String
  name            String
  documentNumber  String?
  partyType       ProcessPartyType

  // Relações
  process         JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model Auction {
  id                               String      @id @default(cuid())
  publicId                         String?     @unique
  slug                             String?     @unique
  title                            String
  description                      String?     @db.Text
  status                           AuctionStatus @default(RASCUNHO)
  auctionDate                      DateTime?
  endDate                          DateTime?
  initialOffer                     Decimal?    @db.Decimal(15, 2)
  isFavorite                       Boolean?    @default(false)
  dataAiHint                       String?
  auctioneerId                     String?
  sellerId                         String?
  categoryId                       String?
  auctionType                      AuctionType?
  auctionMethod                    AuctionMethod?
  participation                    AuctionParticipation?
  cityId                           String?
  stateId                          String?
  courtId                          String?
  districtId                       String?
  branchId                         String?
  judicialProcessId                String?
  
  onlineUrl                        String?
  address                          String?
  zipCode                          String?
  latitude                         Float?
  longitude                        Float?
  
  imageUrl                         String?
  imageMediaId                     String?
  documentsUrl                     String?
  evaluationReportUrl              String?
  auctionCertificateUrl            String?
  
  sellingBranch                    String?
  automaticBiddingEnabled          Boolean?    @default(false)
  allowInstallmentBids             Boolean?    @default(true)
  silentBiddingEnabled             Boolean?    @default(false)
  allowMultipleBidsPerUser         Boolean?    @default(true)
  softCloseEnabled                 Boolean?    @default(false)
  softCloseMinutes                 Int?        @default(2)
  estimatedRevenue                 Decimal?    @db.Decimal(15, 2)
  achievedRevenue                  Decimal?    @db.Decimal(15, 2)
  totalHabilitatedUsers            Int?        @default(0)
  isFeaturedOnMarketplace          Boolean?    @default(false)
  marketplaceAnnouncementTitle     String?
  
  // Dutch Auction Specific
  decrementAmount                  Decimal?    @db.Decimal(15, 2)
  decrementIntervalSeconds         Int?
  floorPrice                       Decimal?    @db.Decimal(15, 2)
  autoRelistSettings               Json?

  visits                           Int?        @default(0)
  createdAt                        DateTime    @default(now())
  updatedAt                        DateTime    @updatedAt @default(now())
  
  // Relações
  auctioneer                       Auctioneer?       @relation(fields: [auctioneerId], references: [id])
  seller                           Seller?           @relation(fields: [sellerId], references: [id])
  category                         LotCategory?      @relation(fields: [categoryId], references: [id])
  city                             City?             @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state                            State?            @relation(fields: [stateId], references: [id])
  court                            Court?            @relation(fields: [courtId], references: [id])
  district                         JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch                           JudicialBranch?   @relation(fields: [branchId], references: [id])
  judicialProcess                  JudicialProcess?  @relation(fields: [judicialProcessId], references: [id])
  lots                             Lot[]
  auctionStages                    AuctionStage[]
  habilitatedUsers                 AuctionHabilitation[]
  bids                             Bid[]
}

model AuctionStage {
  id              String    @id @default(cuid())
  auctionId       String
  name            String
  startDate       DateTime
  endDate         DateTime
  evaluationValue Decimal?  @db.Decimal(15, 2)

  // Relações
  auction         Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  lotStageDetails LotAuctionStageDetails[]

  @@index([auctionId])
}

model Lot {
  id                           String       @id @default(cuid())
  publicId                     String?      @unique
  auctionId                    String
  slug                         String?
  number                       String?
  title                        String
  description                  String?      @db.Text
  price                        Decimal      @db.Decimal(15, 2)
  initialPrice                 Decimal?     @db.Decimal(15, 2)
  secondInitialPrice           Decimal?     @db.Decimal(15, 2)
  evaluationValue              Decimal?     @db.Decimal(15, 2)
  bidIncrementStep             Decimal?     @db.Decimal(10, 2)
  status                       LotStatus    @default(EM_BREVE)
  bidsCount                    Int?         @default(0)
  views                        Int?         @default(0)
  isFeatured                   Boolean?     @default(false)
  isExclusive                  Boolean?     @default(false)
  isRelisted                   Boolean      @default(false)
  relistCount                  Int          @default(0)
  discountPercentage           Int?
  additionalTriggers           Json?
  
  imageUrl                     String?
  imageMediaId                 String?
  galleryImageUrls             Json?
  mediaItemIds                 Json?
  inheritedMediaFromBemId      String?
  
  type                         String? // Denormalized category name for simplicity
  categoryId                   String?
  subcategoryId                String?
  sellerId                     String?
  auctioneerId                 String?
  cityId                       String?
  stateId                      String?
  
  // Denormalized fields for performance
  auctionName                  String?
  sellerName                   String?
  cityName                     String?
  stateUf                      String?
  
  latitude                     Float?
  longitude                    Float?
  mapAddress                   String?
  mapEmbedUrl                  String?
  mapStaticImageUrl            String?
  
  endDate                      DateTime?
  auctionDate                  DateTime?
  lotSpecificAuctionDate       DateTime?
  secondAuctionDate            DateTime?
  
  condition                    String?
  dataAiHint                   String?
  
  winnerId                     String?
  winningBidTermUrl            String?
  allowInstallmentBids         Boolean?     @default(false)
  originalLotId                String?      @unique
  
  createdAt                    DateTime     @default(now())
  updatedAt                    DateTime     @updatedAt

  // Relações
  auction                    Auction                @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                   LotCategory?           @relation(fields: [categoryId], references: [id])
  subcategory                Subcategory?           @relation(fields: [subcategoryId], references: [id])
  seller                     Seller?                @relation(fields: [sellerId], references: [id])
  auctioneer                 Auctioneer?            @relation(fields: [auctioneerId], references: [id])
  city                       City?                  @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state                      State?                 @relation(fields: [stateId], references: [id])
  originalLot                Lot?                   @relation("RelistedLot", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot                Lot?                   @relation("RelistedLot")
  winner                       User?                  @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  bids                       Bid[]
  questions                  LotQuestion[]
  reviews                    Review[]
  bens                       LotBens[]
  stageDetails               LotAuctionStageDetails[]
  userWins                   UserWin[]
  maxBids                    UserLotMaxBid[]
}

model LotAuctionStageDetails {
  id            String   @id @default(cuid())
  lotId         String
  stageId       String
  initialBid    Decimal? @db.Decimal(15, 2)
  bidIncrement  Decimal? @db.Decimal(10, 2)

  // Relações
  lot           Lot         @relation(fields: [lotId], references: [id], onDelete: Cascade)
  stage         AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)

  @@unique([lotId, stageId])
}


model Bem {
  id                    String   @id @default(cuid())
  publicId              String?  @unique
  title                 String
  description           String?  @db.Text
  status                BemStatus
  categoryId            String
  subcategoryId         String?
  judicialProcessId     String?
  sellerId              String?
  evaluationValue       Decimal? @db.Decimal(15, 2)
  imageUrl              String?
  imageMediaId          String?
  galleryImageUrls      Json?
  mediaItemIds          Json?
  dataAiHint            String?
  locationCity          String?
  locationState         String?
  address               String?
  latitude              Float?
  longitude             Float?

  // Vehicle Specific
  plate                 String?
  make                  String?
  model                 String?
  version               String?
  year                  Int?
  modelYear             Int?
  mileage               Int?
  color                 String?
  fuelType              String?
  transmissionType      String?
  bodyType              String?
  vin                   String?  @unique
  renavam               String?  @unique
  enginePower           String?
  numberOfDoors         Int?
  vehicleOptions        String?  @db.Text
  detranStatus          String?
  debts                 String?  @db.Text
  runningCondition      String?
  bodyCondition         String?
  tiresCondition        String?
  hasKey                Boolean?

  // Real Estate Specific
  propertyRegistrationNumber String? @unique
  iptuNumber                 String? @unique
  isOccupied                 Boolean?
  totalArea                  Decimal? @db.Decimal(15, 2)
  builtArea                  Decimal? @db.Decimal(15, 2)
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String? @db.Text
  infrastructure             String? @db.Text
  condoDetails               String? @db.Text
  improvements               String? @db.Text
  topography                 String?
  liensAndEncumbrances       String? @db.Text
  propertyDebts              String? @db.Text
  unregisteredRecords        String? @db.Text
  hasHabiteSe                Boolean?
  zoningRestrictions         String?

  // Other categories...
  brand                 String?
  serialNumber          String?
  itemCondition         String?
  specifications        String?  @db.Text
  includedAccessories   String?  @db.Text
  batteryCondition      String?
  hasInvoice            Boolean?
  hasWarranty           Boolean?
  repairHistory         String?  @db.Text
  applianceCapacity     String?
  voltage               String?
  applianceType         String?
  additionalFunctions   String?  @db.Text
  hoursUsed             Int?
  engineType            String?
  capacityOrPower       String?
  maintenanceHistory    String?  @db.Text
  installationLocation  String?
  compliesWithNR        String?
  operatingLicenses     String?
  breed                 String?
  age                   String?
  sex                   String?
  weight                String?
  individualId          String?
  purpose               String?
  sanitaryCondition     String?
  lineage               String?
  isPregnant            Boolean?
  specialSkills         String?
  gtaDocument           String?
  breedRegistryDocument String?
  furnitureType         String?
  material              String?
  style                 String?
  dimensions            String?
  pieceCount            Int?
  jewelryType           String?
  metal                 String?
  gemstones             String?  @db.Text
  totalWeight           String?
  jewelrySize           String?
  authenticityCertificate String?
  workType              String?
  artist                String?
  period                String?
  technique             String?
  provenance            String?  @db.Text
  boatType              String?
  boatLength            String?
  hullMaterial          String?
  onboardEquipment      String?  @db.Text
  productName           String?
  quantity              String?
  packagingType         String?
  expirationDate        DateTime?
  storageConditions     String?
  preciousMetalType     String?
  purity                String?
  forestGoodsType       String?
  volumeOrQuantity      String?
  species               String?
  dofNumber             String?

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relações
  category        LotCategory      @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory?     @relation(fields: [subcategoryId], references: [id])
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  lots            LotBens[]
}

// Tabela de Junção para relação N-M entre Lot e Bem
model LotBens {
  lotId String
  bemId String

  // Relações
  lot   Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bem   Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)

  @@id([lotId, bemId])
}


model UserWin {
  id                 String               @id @default(cuid())
  lotId              String               @unique
  lot                Lot                  @relation(fields: [lotId], references: [id])
  userId             String
  user               User                 @relation(fields: [userId], references: [id], name: "UserWins")
  winningBidAmount   Decimal              @db.Decimal(15, 2)
  winDate            DateTime             @default(now())
  paymentStatus      PaymentStatus        @default(PENDENTE)
  invoiceUrl         String?
  installments       InstallmentPayment[]
}

model InstallmentPayment {
  id                String        @id @default(cuid())
  userWinId         String
  userWin           UserWin       @relation(fields: [userWinId], references: [id], onDelete: Cascade)
  installmentNumber Int
  amount            Decimal       @db.Decimal(15, 2)
  dueDate           DateTime
  status            PaymentStatus @default(PENDENTE)
  paymentDate       DateTime?
  paymentMethod     String?
  transactionId     String?

  @@index([userWinId])
}


model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
  // Relações
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)

  @@index([lotId, timestamp])
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  // Relações
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())

  // Relações
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                        String   @id @default(cuid())
  lotId                     String
  auctionId                 String
  userId                    String
  userDisplayName           String
  questionText              String   @db.Text
  isPublic                  Boolean  @default(true)
  answerText                String?  @db.Text
  answeredByUserId          String?
  answeredByUserDisplayName String?
  answeredAt                DateTime?
  createdAt                 DateTime @default(now())

  // Relações
  lot                       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model DirectSaleOffer {
  id                 String                @id @default(cuid())
  publicId           String?               @unique
  title              String
  description        String?               @db.Text
  offerType          DirectSaleOfferType
  price              Decimal?              @db.Decimal(15, 2)
  minimumOfferPrice  Decimal?              @db.Decimal(15, 2)
  status             DirectSaleOfferStatus @default(ACTIVE)
  categoryId         String
  sellerId           String
  locationCity       String?
  locationState      String?
  imageUrl           String?
  imageMediaId       String?
  dataAiHint         String?
  galleryImageUrls   Json?
  mediaItemIds       Json?
  itemsIncluded      Json?
  views              Int?                  @default(0)
  expiresAt          DateTime?
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt

  // Relações
  category           LotCategory           @relation(fields: [categoryId], references: [id])
  seller             Seller                @relation(fields: [sellerId], references: [id])
}


model DocumentTemplate {
  id        String               @id @default(cuid())
  name      String
  type      DocumentTemplateType
  content   String?              @db.Text
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relações
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DocumentType {
  id              String         @id @default(cuid())
  name            String         @unique
  description     String?
  isRequired      Boolean        @default(true)
  appliesTo       String // Comma-separated: PHYSICAL,LEGAL,ALL,PROCESS

  // Relações
  userDocuments   UserDocument[]
}

model UserDocument {
  id              String             @id @default(cuid())
  userId          String
  documentTypeId  String
  status          UserDocumentStatus @default(PENDING_ANALYSIS)
  fileUrl         String
  fileName        String?
  rejectionReason String?            @db.Text
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  // Relações
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType       @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

model MediaItem {
  id                  String     @id @default(cuid())
  fileName            String     @unique
  storagePath         String
  title               String?
  altText             String?
  caption             String?    @db.Text
  description         String?    @db.Text
  mimeType            String
  sizeBytes           Int
  urlOriginal         String
  urlThumbnail        String?
  urlMedium           String?
  urlLarge            String?
  linkedLotIds        Json?
  dataAiHint          String?
  uploadedByUserId    String
  judicialProcessId   String?
  uploadedAt          DateTime   @default(now())
  
  // Relações
  uploadedBy          User             @relation(fields: [uploadedByUserId], references: [id])
  judicialProcess     JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model AuctionHabilitation {
  userId    String
  auctionId String
  createdAt DateTime @default(now())

  // Relações
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction   Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@id([userId, auctionId])
}

model VehicleMake {
  id      String         @id @default(cuid())
  name    String         @unique
  slug    String         @unique
  models  VehicleModel[]
}

model VehicleModel {
  id     String      @id @default(cuid())
  name   String
  slug   String
  makeId String
  
  // Relação
  make   VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)

  @@unique([name, makeId])
}

model PlatformSettings {
  id                               String    @id @default("global")
  siteTitle                        String?
  siteTagline                      String?
  logoUrl                          String?
  faviconUrl                       String?
  galleryImageBasePath             String?
  storageProvider                  String?
  firebaseStorageBucket            String?
  activeThemeName                  String?
  themes                           Json?
  platformPublicIdMasks            Json?
  homepageSections                 Json?
  mentalTriggerSettings            Json?
  sectionBadgeVisibility           Json?
  mapSettings                      Json?
  searchPaginationType             String?
  searchItemsPerPage               Int?
  searchLoadMoreCount              Int?
  showCountdownOnLotDetail         Boolean?
  showCountdownOnCards             Boolean?
  showRelatedLotsOnLotDetail       Boolean?
  relatedLotsCount                 Int?
  defaultUrgencyTimerHours         Int?
  variableIncrementTable           Json?
  biddingSettings                  Json?
  paymentGatewaySettings           Json?
  defaultListItemsPerPage          Int?      @default(10)
  updatedAt                        DateTime? @updatedAt
}

// Adicione aqui outros modelos que forem necessários...
