// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

// =================================================================
// ENUMERATIONS
// =================================================================
enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum Participation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum Sex {
  Macho
  Femea
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}


// =================================================================
// MODELS
// =================================================================

model User {
  id                      String                   @id @default(uuid())
  email                   String                   @unique
  password                String?
  fullName                String?
  habilitationStatus    UserHabilitationStatus   @default(PENDING_DOCUMENTS)
  accountType             AccountType              @default(PHYSICAL)
  avatarUrl               String?                  @db.VarChar(191)
  dataAiHint              String?                  @db.VarChar(191)
  badges                  Json?
  cpf                     String?                  @db.VarChar(191)
  rgNumber                String?                  @db.VarChar(191)
  rgIssuer                String?                  @db.VarChar(191)
  rgIssueDate             DateTime?                @db.DateTime(3)
  rgState                 String?                  @db.VarChar(191)
  dateOfBirth             DateTime?                @db.DateTime(3)
  cellPhone               String?                  @db.VarChar(191)
  homePhone               String?                  @db.VarChar(191)
  gender                  String?                  @db.VarChar(191)
  profession              String?                  @db.VarChar(191)
  nationality             String?                  @db.VarChar(191)
  maritalStatus           String?                  @db.VarChar(191)
  propertyRegime          String?                  @db.VarChar(191)
  spouseName              String?                  @db.VarChar(191)
  spouseCpf               String?                  @db.VarChar(191)
  zipCode                 String?                  @db.VarChar(191)
  street                  String?                  @db.VarChar(191)
  number                  String?                  @db.VarChar(191)
  complement              String?                  @db.VarChar(191)
  neighborhood            String?                  @db.VarChar(191)
  city                    String?                  @db.VarChar(191)
  state                   String?                  @db.VarChar(191)
  optInMarketing          Boolean?                 @default(false)
  razaoSocial             String?                  @db.VarChar(191)
  cnpj                    String?                  @db.VarChar(191)
  inscricaoEstadual       String?                  @db.VarChar(191)
  website                 String?                  @db.VarChar(191)
  responsibleName         String?                  @db.VarChar(191)
  responsibleCpf          String?                  @db.VarChar(191)
  createdAt               DateTime                 @default(now()) @db.DateTime(3)
  updatedAt               DateTime                 @updatedAt @db.DateTime(3)

  // Relations
  roles                  UsersOnRoles[]
  sellerProfile          Seller?
  auctioneerProfile      Auctioneer?
  documents              UserDocument[]
  bids                   Bid[]
  notifications          Notification[]
  wins                   UserWin[]
  maxBids                UserLotMaxBid[]
  uploadedMedia          MediaItem[]
  auctionHabilitations   AuctionHabilitation[]
}

model Role {
  id               String       @id @default(uuid())
  name             String       @unique @db.VarChar(50)
  nameNormalized   String       @unique @db.VarChar(50)
  description      String?      @db.VarChar(255)
  permissions      Json
  createdAt        DateTime     @default(now()) @db.DateTime(3)
  updatedAt        DateTime     @updatedAt @db.DateTime(3)
  users            UsersOnRoles[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now()) @db.DateTime(3)
  assignedBy String

  @@id([userId, roleId])
}


model Seller {
  id                 String           @id @default(uuid())
  publicId           String?          @unique @db.VarChar(191)
  slug               String?          @unique @db.VarChar(150)
  name               String           @unique @db.VarChar(150)
  contactName        String?          @db.VarChar(150)
  email              String?          @db.VarChar(150)
  phone              String?          @db.VarChar(20)
  address            String?          @db.VarChar(200)
  city               String?          @db.VarChar(100)
  state              String?          @db.VarChar(50)
  zipCode            String?          @db.VarChar(10)
  website            String?          @db.VarChar(191)
  logoUrl            String?          @db.VarChar(191)
  logoMediaId        String?          @db.VarChar(191)
  dataAiHintLogo     String?          @db.VarChar(191)
  description        String?          @db.Text
  isJudicial         Boolean          @default(false)
  judicialBranchId   String?          @unique
  createdAt          DateTime         @default(now()) @db.DateTime(3)
  updatedAt          DateTime         @updatedAt @db.DateTime(3)

  // Relations
  user               User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId             String?           @unique
  judicialBranch     JudicialBranch?   @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  auctions           Auction[]
  lots               Lot[]             @relation("LotSeller")
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
  judicialProcesses  JudicialProcess[]
}

model Auctioneer {
  id                 String    @id @default(uuid())
  publicId           String?   @unique @db.VarChar(191)
  slug               String?   @unique @db.VarChar(150)
  name               String    @db.VarChar(150)
  registrationNumber String?   @db.VarChar(50)
  contactName        String?   @db.VarChar(150)
  email              String?   @db.VarChar(150)
  phone              String?   @db.VarChar(20)
  address            String?   @db.VarChar(200)
  city               String?   @db.VarChar(100)
  state              String?   @db.VarChar(50)
  zipCode            String?   @db.VarChar(10)
  website            String?   @db.VarChar(191)
  logoUrl            String?   @db.VarChar(191)
  logoMediaId        String?   @db.VarChar(191)
  dataAiHintLogo     String?   @db.VarChar(191)
  description        String?   @db.Text
  createdAt          DateTime  @default(now()) @db.DateTime(3)
  updatedAt          DateTime  @updatedAt @db.DateTime(3)
  
  // Relations
  user               User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId             String?   @unique
  auctions           Auction[]
  lots               Lot[]
}

model State {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(100)
  uf        String   @unique @db.VarChar(2)
  slug      String   @unique @db.VarChar(100)

  // Relations
  cities    City[]
  courts    Court[]
  districts JudicialDistrict[]
  lots      Lot[]
  auctions  Auction[]
}

model City {
  id       String    @id @default(uuid())
  name     String    @db.VarChar(150)
  slug     String    @db.VarChar(150)
  stateId  String
  stateUf  String?
  ibgeCode String?   @unique @db.VarChar(10)
  lotCount Int?      @default(0)

  // Relations
  state    State   @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots     Lot[]
  auctions Auction[]
}

model Court {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(150)
  slug      String?  @db.VarChar(150)
  stateId   String?
  stateUf   String?  @db.VarChar(2)
  website   String?  @db.VarChar(191)
  createdAt DateTime @default(now()) @db.DateTime(3)
  updatedAt DateTime @updatedAt @db.DateTime(3)

  // Relations
  state     State?             @relation(fields: [stateId], references: [id], onDelete: SetNull)
  districts JudicialDistrict[]
  processes JudicialProcess[]
  auctions  Auction[]
}

model JudicialDistrict {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(150)
  slug      String   @unique @db.VarChar(150)
  courtId   String?
  stateId   String
  zipCode   String?  @db.VarChar(10)
  createdAt DateTime @default(now()) @db.DateTime(3)
  updatedAt DateTime @updatedAt @db.DateTime(3)

  // Relations
  court     Court?           @relation(fields: [courtId], references: [id], onDelete: SetNull)
  state     State            @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]
  auctions  Auction[]
}

model JudicialBranch {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(150)
  slug        String   @unique @db.VarChar(150)
  districtId  String?
  contactName String?  @db.VarChar(150)
  phone       String?  @db.VarChar(20)
  email       String?  @db.VarChar(150)
  createdAt   DateTime @default(now()) @db.DateTime(3)
  updatedAt   DateTime @updatedAt @db.DateTime(3)

  // Relations
  district          JudicialDistrict?   @relation(fields: [districtId], references: [id], onDelete: SetNull)
  seller            Seller?
  processes         JudicialProcess[]
  auctions          Auction[]           @relation("AuctionBranch")
}

model JudicialProcess {
  id              String          @id @default(uuid())
  publicId        String?         @unique @db.VarChar(191)
  processNumber   String          @db.VarChar(100)
  isElectronic    Boolean         @default(true)
  courtId         String?
  districtId      String?
  branchId        String?
  sellerId        String?
  createdAt       DateTime        @default(now()) @db.DateTime(3)
  updatedAt       DateTime        @updatedAt @db.DateTime(3)

  // Relations
  court     Court?            @relation(fields: [courtId], references: [id])
  district  JudicialDistrict?   @relation(fields: [districtId], references: [id])
  branch    JudicialBranch?     @relation(fields: [branchId], references: [id])
  seller    Seller?             @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties   JudicialParty[]
  bens      Bem[]
  auctions  Auction[]
}

model JudicialParty {
  id             String           @id @default(uuid())
  processId      String
  name           String           @db.VarChar(191)
  documentNumber String?          @db.VarChar(50)
  partyType      ProcessPartyType

  // Relations
  process JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model Auction {
  id                             String                 @id @default(uuid())
  publicId                       String?                @unique @db.VarChar(100)
  slug                           String?                @unique @db.VarChar(255)
  title                          String                 @db.VarChar(255)
  description                    String?                @db.Text
  status                         AuctionStatus          @default(RASCUNHO)
  auctionDate                    DateTime?              @db.DateTime(3)
  endDate                        DateTime?              @db.DateTime(3)
  auctioneerId                   String
  sellerId                       String
  categoryId                     String?
  auctionType                    AuctionType?
  auctionMethod                  AuctionMethod?         @default(STANDARD)
  participation                  Participation?         @default(ONLINE)
  imageUrl                       String?                @db.VarChar(191)
  imageMediaId                   String?                @db.VarChar(191)
  dataAiHint                     String?                @db.VarChar(100)
  documentsUrl                   String?                @db.VarChar(191)
  address                        String?                @db.VarChar(191)
  zipCode                        String?                @db.VarChar(191)
  latitude                       Float?                 @db.Double
  longitude                      Float?                 @db.Double
  visits                         Int?                   @default(0)
  totalLots                      Int?                   @default(0)
  initialOffer                   Decimal?               @db.Decimal(15, 2)
  isFavorite                     Boolean?               @default(false)
  evaluationReportUrl            String?                @db.VarChar(191)
  auctionCertificateUrl          String?                @db.VarChar(191)
  sellingBranch                  String?                @db.VarChar(100)
  automaticBiddingEnabled        Boolean                @default(false)
  allowInstallmentBids           Boolean                @default(true)
  silentBiddingEnabled           Boolean                @default(false)
  allowMultipleBidsPerUser       Boolean                @default(true)
  softCloseEnabled               Boolean                @default(false)
  softCloseMinutes               Int?                   @default(2)
  estimatedRevenue               Decimal?               @db.Decimal(15, 2)
  achievedRevenue                Decimal?               @db.Decimal(15, 2)
  totalHabilitatedUsers          Int?                   @default(0)
  isFeaturedOnMarketplace        Boolean                @default(false)
  marketplaceAnnouncementTitle   String?                @db.VarChar(150)
  decrementAmount                Decimal?               @db.Decimal(15, 2)
  decrementIntervalSeconds       Int?
  floorPrice                     Decimal?               @db.Decimal(15, 2)
  autoRelistSettings             Json?
  judicialProcessId              String?
  courtId                        String?
  districtId                     String?
  branchId                       String?
  cityId                         String?
  stateId                        String?
  createdAt                      DateTime               @default(now()) @db.DateTime(3)
  updatedAt                      DateTime               @updatedAt @db.DateTime(3)

  // Relations
  auctioneer         Auctioneer            @relation(fields: [auctioneerId], references: [id])
  seller             Seller                @relation(fields: [sellerId], references: [id])
  category           LotCategory?          @relation(fields: [categoryId], references: [id])
  judicialProcess    JudicialProcess?      @relation(fields: [judicialProcessId], references: [id])
  court              Court?                @relation(fields: [courtId], references: [id])
  district           JudicialDistrict?     @relation(fields: [districtId], references: [id])
  branch             JudicialBranch?       @relation("AuctionBranch", fields: [branchId], references: [id])
  city               City?                 @relation(fields: [cityId], references: [id])
  state              State?                @relation(fields: [stateId], references: [id])
  auctionStages      AuctionStage[]
  habilitations     AuctionHabilitation[]
  bids               Bid[]
  lots               Lot[]
}

model AuctionStage {
  id              String    @id @default(uuid())
  name            String
  startDate       DateTime  @db.DateTime(3)
  endDate         DateTime  @db.DateTime(3)
  evaluationValue Decimal?  @db.Decimal(15, 2)
  auctionId       String
  
  // Relations
  auction         Auction                   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  lotStageDetails LotAuctionStageDetails[]

  @@index([auctionId])
}

model LotCategory {
  id                 String   @id @default(uuid())
  name               String   @unique @db.VarChar(191)
  slug               String   @unique @db.VarChar(191)
  description        String?  @db.VarChar(500)
  hasSubcategories   Boolean?
  logoUrl            String?  @db.VarChar(191)
  logoMediaId        String?  @db.VarChar(191)
  dataAiHintLogo     String?  @db.VarChar(191)
  coverImageUrl      String?  @db.VarChar(191)
  coverImageMediaId  String?  @db.VarChar(191)
  dataAiHintCover    String?  @db.VarChar(191)
  megaMenuImageUrl   String?  @db.VarChar(191)
  megaMenuImageMediaId String?  @db.VarChar(191)
  dataAiHintMegaMenu String?  @db.VarChar(191)
  createdAt          DateTime @default(now()) @db.DateTime(3)
  updatedAt          DateTime @updatedAt @db.DateTime(3)

  // Relations
  subcategories      Subcategory[]
  lots               Lot[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
}

model Subcategory {
  id                 String   @id @default(uuid())
  name               String   @db.VarChar(191)
  slug               String   @db.VarChar(191)
  parentCategoryId   String
  description        String?  @db.VarChar(500)
  displayOrder       Int      @default(0)
  iconUrl            String?  @db.VarChar(191)
  iconMediaId        String?  @db.VarChar(191)
  dataAiHintIcon     String?  @db.VarChar(191)

  // Relations
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots               Lot[]
  bens               Bem[]
}

model Lot {
  id                           String                   @id @default(uuid())
  publicId                     String?                  @unique @db.VarChar(100)
  auctionId                    String
  slug                         String?                  @db.VarChar(255)
  number                       String?                  @db.VarChar(20)
  title                        String                   @db.VarChar(255)
  description                  String?                  @db.Text
  price                        Decimal                  @db.Decimal(15, 2)
  initialPrice                 Decimal?                 @db.Decimal(15, 2)
  secondInitialPrice           Decimal?                 @db.Decimal(15, 2)
  bidIncrementStep             Decimal?                 @db.Decimal(10, 2)
  status                       LotStatus                @default(EM_BREVE)
  bidsCount                    Int?                     @default(0)
  views                        Int?                     @default(0)
  isFeatured                   Boolean?                 @default(false)
  isExclusive                  Boolean?                 @default(false)
  discountPercentage           Int?
  additionalTriggers           Json?
  imageUrl                     String?                  @db.VarChar(191)
  imageMediaId                 String?                  @db.VarChar(191)
  galleryImageUrls             Json?
  mediaItemIds                 Json?
  type                         String                   @db.VarChar(100)
  categoryId                   String?
  subcategoryId                String?
  auctionName                  String?                  @db.VarChar(255)
  sellerId                     String?
  sellerName                   String?                  @db.VarChar(150)
  auctioneerId                 String?
  cityId                       String?
  stateId                      String?
  cityName                     String?                  @db.VarChar(100)
  stateUf                      String?                  @db.VarChar(2)
  latitude                     Decimal?                 @db.Decimal(10, 8)
  longitude                    Decimal?                 @db.Decimal(11, 8)
  mapAddress                   String?                  @db.VarChar(255)
  mapEmbedUrl                  String?                  @db.VarChar(500)
  mapStaticImageUrl            String?                  @db.VarChar(191)
  endDate                      DateTime?                @db.DateTime(3)
  auctionDate                  DateTime?                @db.DateTime(3)
  lotSpecificAuctionDate       DateTime?                @db.DateTime(3)
  secondAuctionDate            DateTime?                @db.DateTime(3)
  condition                    String?                  @db.VarChar(100)
  dataAiHint                   String?                  @db.VarChar(100)
  winnerId                     String?
  winningBidTermUrl            String?                  @db.VarChar(191)
  allowInstallmentBids         Boolean?                 @default(false)
  isRelisted                   Boolean                  @default(false)
  relistCount                  Int                      @default(0)
  originalLotId                String?                  @unique
  inheritedMediaFromBemId      String?                  @db.VarChar(191)
  createdAt                    DateTime                 @default(now()) @db.DateTime(3)
  updatedAt                    DateTime                 @updatedAt @db.DateTime(3)

  // Relations
  auction                      Auction                  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                     LotCategory?             @relation(fields: [categoryId], references: [id])
  subcategory                  Subcategory?             @relation(fields: [subcategoryId], references: [id])
  seller                       Seller?                  @relation("LotSeller", fields: [sellerId], references: [id])
  city                         City?                    @relation(fields: [cityId], references: [id])
  state                        State?                   @relation(fields: [stateId], references: [id])
  winner                       User?                    @relation("WonLots", fields: [winnerId], references: [id], onDelete: SetNull)
  originalLot                  Lot?                     @relation("RelistHistory", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot                  Lot?                     @relation("RelistHistory")
  bens                         LotBens[]
  bids                         Bid[]
  wins                         UserWin[]
  maxBids                      UserLotMaxBid[]
  auctioneers                  Auctioneer[]
  stageDetails                 LotAuctionStageDetails[]
}

model LotAuctionStageDetails {
  id           String    @id @default(uuid())
  lotId        String
  stageId      String
  initialBid   Decimal?  @db.Decimal(15, 2)
  bidIncrement Decimal?  @db.Decimal(10, 2)

  // Relations
  lot   Lot          @relation(fields: [lotId], references: [id], onDelete: Cascade)
  stage AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)

  @@unique([lotId, stageId])
}

model LotBens {
  lotId String
  bemId String

  // Relations
  lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bem Bem @relation(fields: [bemId], references: [id], onDelete: Cascade)

  @@id([lotId, bemId])
}

model Bid {
  id            String    @id @default(uuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String?   @db.VarChar(191)
  amount        Decimal   @db.Decimal(15, 2)
  timestamp     DateTime  @default(now()) @db.DateTime(3)

  // Relations
  lot     Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bidder  User    @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([bidderId])
}

model UserWin {
  id               String                 @id @default(uuid())
  lotId            String                 @unique
  userId           String
  winningBidAmount Decimal                @db.Decimal(15, 2)
  winDate          DateTime               @default(now()) @db.DateTime(3)
  paymentStatus    PaymentStatus          @default(PENDENTE)
  invoiceUrl       String?                @db.VarChar(191)

  // Relations
  lot          Lot                    @relation(fields: [lotId], references: [id])
  user         User                   @relation(fields: [userId], references: [id])
  installments InstallmentPayment[]

  @@index([userId])
}

model InstallmentPayment {
  id                String        @id @default(uuid())
  userWinId         String
  installmentNumber Int
  amount            Decimal       @db.Decimal(15, 2)
  dueDate           DateTime      @db.DateTime(3)
  status            PaymentStatus @default(PENDENTE)
  paymentDate       DateTime?     @db.DateTime(3)
  paymentMethod     String?
  transactionId     String?

  // Relations
  userWin UserWin @relation(fields: [userWinId], references: [id], onDelete: Cascade)

  @@index([userWinId])
}


model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @db.DateTime(3)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
  @@index([lotId])
}

model UserDocument {
  id              String             @id @default(uuid())
  userId          String
  documentTypeId  String
  status          UserDocumentStatus @default(PENDING_ANALYSIS)
  fileUrl         String
  fileName        String?
  rejectionReason String?            @db.Text

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType DocumentType @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id          String         @id @default(uuid())
  name        String         @db.VarChar(150)
  description String?        @db.VarChar(255)
  isRequired  Boolean        @default(true)
  appliesTo   String?        @db.VarChar(191)

  // Relations
  userDocuments UserDocument[]
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String   @db.VarChar(191)
  link      String?  @db.VarChar(191)
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now()) @db.DateTime(3)

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AuctionHabilitation {
  id        String   @id @default(uuid())
  userId    String
  auctionId String
  createdAt DateTime @default(now()) @db.DateTime(3)

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@unique([userId, auctionId])
}

model MediaItem {
  id                  String   @id @default(uuid())
  fileName            String   @db.VarChar(191)
  storagePath         String   @db.VarChar(191)
  title               String?  @db.VarChar(191)
  altText             String?  @db.VarChar(191)
  caption             String?  @db.VarChar(500)
  description         String?  @db.Text
  mimeType            String   @db.VarChar(100)
  sizeBytes           Int?
  urlOriginal         String   @db.VarChar(191)
  urlThumbnail        String?  @db.VarChar(191)
  urlMedium           String?  @db.VarChar(191)
  urlLarge            String?  @db.VarChar(191)
  linkedLotIds        Json?
  judicialProcessId   String?
  dataAiHint          String?  @db.VarChar(100)
  uploadedByUserId    String
  uploadedAt          DateTime @default(now()) @db.DateTime(3)

  // Relations
  uploadedBy      User            @relation(fields: [uploadedByUserId], references: [id])
  judicialProcess JudicialProcess?  @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)

  @@index([uploadedByUserId])
  @@index([judicialProcessId])
}

model DirectSaleOffer {
  id                   String                @id @default(uuid())
  publicId             String?               @unique @db.VarChar(100)
  title                String                @db.VarChar(255)
  description          String?               @db.Text
  offerType            DirectSaleOfferType
  price                Decimal?              @db.Decimal(15, 2)
  minimumOfferPrice    Decimal?              @db.Decimal(15, 2)
  status               DirectSaleOfferStatus @default(ACTIVE)
  categoryName         String?               @db.VarChar(100)
  categoryId           String
  sellerId             String
  sellerName           String?               @db.VarChar(150)
  sellerLogoUrl        String?               @db.VarChar(191)
  dataAiHintSellerLogo String?               @db.VarChar(100)
  locationCity         String?               @db.VarChar(100)
  locationState        String?               @db.VarChar(100)
  imageUrl             String?               @db.VarChar(191)
  imageMediaId         String?               @db.VarChar(191)
  dataAiHint           String?               @db.VarChar(100)
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int?                  @default(0)
  expiresAt            DateTime?             @db.DateTime(3)
  createdAt            DateTime              @default(now()) @db.DateTime(3)
  updatedAt            DateTime              @updatedAt @db.DateTime(3)

  // Relations
  category LotCategory @relation(fields: [categoryId], references: [id])
  seller   Seller      @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@index([categoryId])
  @@index([sellerId])
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(150)
  email     String   @db.VarChar(150)
  subject   String?  @db.VarChar(191)
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now()) @db.DateTime(3)
}

model DocumentTemplate {
  id        String               @id @default(uuid())
  name      String               @db.VarChar(150)
  type      DocumentTemplateType
  content   String?              @db.Text
  createdAt DateTime             @default(now()) @db.DateTime(3)
  updatedAt DateTime             @updatedAt @db.DateTime(3)
}

model VehicleMake {
  id      String         @id @default(uuid())
  name    String         @unique @db.VarChar(191)
  slug    String         @unique @db.VarChar(191)

  // Relations
  models  VehicleModel[]
}

model VehicleModel {
  id     String @id @default(uuid())
  name   String @db.VarChar(191)
  slug   String @db.VarChar(191)
  makeId String

  // Relations
  make   VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)

  @@unique([name, makeId])
}

model PlatformSettings {
  id                           String                 @id @default("global") @db.VarChar(191)
  siteTitle                    String?                @db.VarChar(191)
  siteTagline                  String?                @db.VarChar(191)
  galleryImageBasePath         String?                @db.VarChar(191)
  storageProvider              String?                @db.VarChar(191)
  firebaseStorageBucket        String?                @db.VarChar(191)
  activeThemeName              String?                @db.VarChar(191)
  themes                       Json?
  platformPublicIdMasks        Json?
  homepageSections             Json?
  mentalTriggerSettings        Json?
  sectionBadgeVisibility       Json?
  mapSettings                  Json?
  searchPaginationType         String?                @db.VarChar(191)
  searchItemsPerPage           Int?
  searchLoadMoreCount          Int?
  showCountdownOnLotDetail     Boolean?
  showCountdownOnCards         Boolean?
  showRelatedLotsOnLotDetail   Boolean?
  relatedLotsCount             Int?
  defaultUrgencyTimerHours     Int?
  variableIncrementTable       Json?
  biddingSettings              Json?
  paymentGatewaySettings       Json?
  defaultListItemsPerPage      Int?
  updatedAt                    DateTime?              @updatedAt @db.DateTime(3)
}
