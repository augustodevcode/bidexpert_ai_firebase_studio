// prisma/header.prisma
// Este é o cabeçalho do schema do Prisma.
// Ele contém as configurações do gerador e da fonte de dados.
// NÃO adicione modelos de dados aqui. Os modelos devem ser definidos
// em arquivos individuais no diretório `prisma/models`.

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

/// Status of an individual asset.
enum AssetStatus {
  /// The asset is being registered and is not ready to be used.
  CADASTRO
  /// The asset is available in the inventory to be added to a lot.
  DISPONIVEL
  /// The asset is already part of a lot.
  LOTEADO
  /// The asset has been sold (as part of a lot).
  VENDIDO
  /// The asset has been removed from the inventory (e.g., returned to the consignor).
  REMOVIDO
  /// The asset is no longer active, but the record is kept.
  INATIVADO
}
enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  VENDA_DIRETA
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}


model LotQuestion {
  id                      BigInt    @id @default(autoincrement())
  lot                     Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId                   BigInt
  auction                 Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId               BigInt
  user                    User      @relation(fields: [userId], references: [id])
  userId                  BigInt
  userDisplayName         String
  questionText            String    @db.Text
  answerText              String?   @db.Text
  answeredByUserId        String?
  answeredByUserDisplayName String?
  answeredAt              DateTime?
  isPublic                Boolean   @default(true)
  createdAt               DateTime  @default(now())

  @@index([lotId])
  @@index([userId])
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
  RETIRADO
}

model Notification {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  tenantId  BigInt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([userId])
}


/// @model
/// @description Armazena tokens temporários para redefinição de senha.
model PasswordResetToken {
  id        BigInt   @id @default(autoincrement())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

// Define as configurações globais da plataforma.
// Centraliza opções de tema, busca, e outras funcionalidades para serem gerenciadas pelo admin.
model PlatformSettings {
  id                      String                   @id @default("global")
  tenantId                String                   @unique
  tenant                  Tenant                   @relation(fields: [tenantId], references: [id])
  siteTitle               String                   @default("BidExpert")
  siteTagline             String?
  logoUrl                 String?
  faviconUrl              String?
  galleryImageBasePath    String                   @default("/uploads/media/")
  storageProvider         StorageProviderType      @default(local)
  firebaseStorageBucket   String?
  activeThemeName         String?
  searchPaginationType    SearchPaginationType     @default(loadMore)
  searchItemsPerPage      Int                      @default(12)
  searchLoadMoreCount     Int                      @default(12)
  showCountdownOnLotDetail Boolean                  @default(true)
  showCountdownOnCards    Boolean                  @default(true)
  showRelatedLotsOnLotDetail Boolean               @default(true)
  relatedLotsCount        Int                      @default(4)
  defaultListItemsPerPage Int                      @default(10)
  defaultUrgencyTimerHours Int?
  isSetupComplete         Boolean                  @default(false)
  crudFormMode            CrudFormMode             @default("modal")

  themes                  ThemeSettings[]
  platformPublicIdMasks   IdMasks[]
  mapSettings             MapSettings[]
  biddingSettings         BiddingSettings[]
  paymentGatewaySettings  PaymentGatewaySettings[]
  notificationSettings    NotificationSettings[]
  mentalTriggerSettings   MentalTriggerSettings[]
  sectionBadgeVisibility  SectionBadgeVisibility[]
  variableIncrementTable  VariableIncrementRule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ThemeSettings {
  id        String   @id @default(cuid())
  name      String   @unique
  isDefault Boolean  @default(false)
  settings  PlatformSettings? @relation(fields: [platformSettingsId], references: [id])
  platformSettingsId String?
  colorsId  String?
  colors    ThemeColors? @relation(fields: [colorsId], references: [id])
}

model ThemeColors {
  id      String   @id @default(cuid())
  light   Json?
  dark    Json?
  themes  ThemeSettings[]
}

model IdMasks {
  id String @id @default(cuid())
  settings PlatformSettings? @relation(fields: [platformSettingsId], references: [id])
  platformSettingsId String?
  auctionCodeMask      String?
  lotCodeMask          String?
  sellerCodeMask       String?
  auctioneerCodeMask   String?
  userCodeMask         String?
  assetCodeMask        String?
  categoryCodeMask     String?
  subcategoryCodeMask  String?
}

model MapSettings {
  id String @id @default(cuid())
  settings PlatformSettings? @relation(fields: [platformSettingsId], references: [id])
  platformSettingsId String?
  defaultProvider String   @default("openstreetmap") // openstreetmap, google, staticImage
  googleMapsApiKey String?
}

model BiddingSettings {
  id String @id @default(cuid())
  settings PlatformSettings? @relation(fields: [platformSettingsId], references: [id])
  platformSettingsId String?
  instantBiddingEnabled           Boolean  @default(true)
  getBidInfoInstantly             Boolean  @default(true)
  biddingInfoCheckIntervalSeconds Int      @default(1)
  defaultStageDurationDays        Int?     @default(7)
  defaultDaysBetweenStages        Int?     @default(1)
}

model PaymentGatewaySettings {
  id String @id @default(cuid())
  settings PlatformSettings? @relation(fields: [platformSettingsId], references: [id])
  platformSettingsId String?
  defaultGateway             String @default("Manual")
  platformCommissionPercentage Decimal @default(5.0)
  gatewayApiKey                String?
  gatewayEncryptionKey         String?
}

model NotificationSettings {
  id String @id @default(cuid())
  settings PlatformSettings? @relation(fields: [platformSettingsId], references: [id])
  platformSettingsId String?
  notifyOnNewAuction         Boolean @default(true)
  notifyOnFeaturedLot        Boolean @default(false)
  notifyOnAuctionEndingSoon  Boolean @default(true)
  notifyOnPromotions         Boolean @default(true)
}

model MentalTriggerSettings {
  id String @id @default(cuid())
  settings PlatformSettings? @relation(fields: [platformSettingsId], references: [id])
  platformSettingsId String?
  showDiscountBadge       Boolean @default(true)
  showPopularityBadge     Boolean @default(true)
  popularityViewThreshold Int     @default(500)
  showHotBidBadge         Boolean @default(true)
  hotBidThreshold         Int     @default(10)
  showExclusiveBadge      Boolean @default(true)
}

model SectionBadgeVisibility {
  id String @id @default(cuid())
  settings PlatformSettings? @relation(fields: [platformSettingsId], references: [id])
  platformSettingsId String?
  searchGrid Json?
  lotDetail  Json?
}

model VariableIncrementRule {
  id        String   @id @default(cuid())
  settings  PlatformSettings? @relation(fields: [platformSettingsId], references: [id])
  platformSettingsId String?
  from      Decimal
  to        Decimal?
  increment Decimal
}
enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum SearchPaginationType {
  loadMore
  numberedPages
}

model State {
  id                BigInt             @id @default(autoincrement())
  name              String
  uf                String             @unique
  slug              String?            @unique
  cityCount         Int?               @default(0)
  createdAt         DateTime?          @default(now())
  updatedAt         DateTime?          @updatedAt
  cities            City[]
  judicialDistricts JudicialDistrict[]
  auctions          Auction[]
  lots              Lot[]

  Asset Asset[]
}

// prisma/models/subscriber.prisma
/// @model Subscriber
/// @description Armazena informações de usuários que se inscreveram na newsletter ou para receber notificações.

model Subscriber {
  id        BigInt   @id @default(autoincrement())
  email     String   @unique
  name      String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isVerified Boolean  @default(false)
  
  // Preferências de notificação em formato JSON. Ex: { "notifyOnNewAuction": true, "categories": ["veiculos"] }
  preferences Json?
  
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId  BigInt
  
  @@index([tenantId])
}


enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  REJEITADO
  BLOCKED
}

model Asset {
  id                  BigInt   @id @default(autoincrement())
  publicId            String   @unique @default(cuid())
  codigo              String   @unique @default(cuid())
  title               String
  description         String?  @db.Text
  status              String   @default("DISPONIVEL")
  evaluationValue     Decimal? @db.Decimal(12, 2)
  imageUrl            String?
  imageMediaId        String?
  galleryImageUrls    Json?
  dataAiHint          String?
  properties          Json?
  locationCity        String?
  locationState       String?
  cityId              BigInt?
  city                City?    @relation(fields: [cityId], references: [id])
  latitude            Decimal? @db.Decimal(10, 8)
  longitude           Decimal? @db.Decimal(11, 8)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  lots                AssetsOnLots[]
  assetMedia          AssetMedia[]

  category            LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId          BigInt?
  subcategory         Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId       BigInt?
  judicialProcess     JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId   BigInt?
  seller              Seller?      @relation(fields: [sellerId], references: [id])
  sellerId            BigInt?

  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId BigInt

  stateId             BigInt?
  state               State?   @relation(fields: [stateId], references: [id])

  @@index([tenantId])
}
model AssetsOnLots {
  asset     Asset    @relation(fields: [assetId], references: [id])
  assetId   BigInt
  lot       Lot      @relation(fields: [lotId], references: [id])
  lotId     BigInt
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([assetId, lotId])
}

model AuctionHabilitation {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt
  auctionId BigInt
  status    String   @default("APPROVED") // APPROVED, PENDING, REJECTED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  auction Auction @relation(fields: [auctionId], references: [id])

  @@unique([userId, auctionId])
}

model AuctionStage {
  id           BigInt    @id @default(autoincrement())
  name         String
  startDate    DateTime
  endDate      DateTime
  auctionId    BigInt
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt

  auction      Auction          @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  lotPrices    LotStagePrice[]
  lotStageDetails LotStageDetails[]

  @@index([auctionId])
}

model Auction {
  id                        BigInt                  @id @default(autoincrement())
  publicId                  String                  @unique @default(cuid())
  codigo                    String                  @unique @default(cuid())
  title                     String
  description               String?                 @db.Text
  slug                      String                  @unique
  status                    AuctionStatus           @default(RASCUNHO)
  auctionDate               DateTime                @default(now())
  endDate                   DateTime?
  visits                    Int                     @default(0)
  totalHabilitatedUsers     Int                     @default(0)
  isFeaturedOnMarketplace   Boolean                 @default(false)
  additionalTriggers        Json?
  dataAiHint                String?
  imageUrl                  String?                 @db.VarChar(1024)
  imageMediaId              String?
  documentsUrl              String?                 @db.VarChar(1024)
  evaluationReportUrl       String?                 @db.VarChar(1024)
  auctionCertificateUrl     String?                 @db.VarChar(1024)
  auctionType               AuctionType             @default(EXTRAJUDICIAL)
  auctionMethod             AuctionMethod           @default(STANDARD)
  participation             AuctionParticipation    @default(ONLINE)
  onlineUrl                 String?                 @db.VarChar(1024)
  address                   String?
  city                      String?
  state                     String?
  zipCode                   String?                 @db.VarChar(20)
  latitude                  Decimal?                @db.Decimal(10, 8)
  longitude                 Decimal?                @db.Decimal(11, 8)
  initialOffer              Decimal?                @db.Decimal(12, 2)
  estimatedRevenue          Decimal?                @db.Decimal(12, 2)
  achievedRevenue           Decimal?                @db.Decimal(12, 2)
  softCloseEnabled          Boolean                 @default(false)
  softCloseMinutes          Int?
  automaticBiddingEnabled   Boolean                 @default(true)
  allowInstallmentBids      Boolean                 @default(false)
  silentBiddingEnabled      Boolean                 @default(false)
  allowMultipleBidsPerUser  Boolean                 @default(true)
  decrementAmount           Decimal?                @db.Decimal(12, 2)
  decrementIntervalSeconds  Int?
  floorPrice                Decimal?                @db.Decimal(12, 2)
  tenantId                  BigInt
  tenant                    Tenant                  @relation(fields: [tenantId], references: [id])
  auctioneerId              BigInt?
  auctioneer                Auctioneer?             @relation(fields: [auctioneerId], references: [id])
  sellerId                  BigInt?
  seller                    Seller?                 @relation(fields: [sellerId], references: [id])
  categoryId                BigInt?
  category                  LotCategory?            @relation(fields: [categoryId], references: [id])
  cityId                    BigInt?
  cityObject                City?                   @relation(fields: [cityId], references: [id])
  stateId                   BigInt?
  stateObject               State?                  @relation(fields: [stateId], references: [id])
  judicialProcessId         BigInt?
  judicialProcess           JudicialProcess?        @relation(fields: [judicialProcessId], references: [id])
  districtId                BigInt?
  judicialDistrict          JudicialDistrict?       @relation(fields: [districtId], references: [id])
  branchId                  BigInt?
  judicialBranch            JudicialBranch?         @relation(fields: [branchId], references: [id])
  courtId                   BigInt?
  court                     Court?                  @relation(fields: [courtId], references: [id])
  lots                      Lot[]
  bids                      Bid[]
  auctionHabilitations      AuctionHabilitation[]
  stages                    AuctionStage[]
  questions                 LotQuestion[]
  reviews                   Review[]
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @updatedAt
  autoRelistSettings        Json?
}

model Auctioneer {
  id                 BigInt   @id @default(autoincrement())
  publicId           String   @unique @default(cuid())
  codigo             String   @unique @default(cuid())
  slug               String   @unique
  name               String
  registrationNumber String?
  email              String?
  phone              String?
  website            String?
  logoUrl            String?
  logoMediaId        BigInt?
  dataAiHintLogo     String?
  description        String?  @db.Text
  address            String?
  city               String?
  state              String?
  zipCode            String?
  
  rating Decimal? @db.Decimal(3, 2)
  auctionsConductedCount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenantId BigInt
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  
  userId BigInt?      @unique
  user   User?        @relation(fields: [userId], references: [id])
  
  auctions Auction[]
  lots     Lot[]
}

model Bid {
  id              BigInt    @id @default(autoincrement())
  lotId           BigInt
  auctionId       BigInt
  bidderId        BigInt
  bidderDisplay   String
  amount          Decimal   @db.Decimal(12, 2)
  timestamp       DateTime  @default(now())
  isAutomatic     Boolean   @default(false)
  isWinning       Boolean   @default(false)
  lot             Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction         Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder          User      @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  tenantId        BigInt
  tenant          Tenant    @relation(fields: [tenantId], references: [id])
  @@index([lotId])
  @@index([auctionId])
  @@index([bidderId])
}

model LotCategory {
  id                  BigInt        @id @default(autoincrement())
  codigo              String        @unique @default(cuid())
  name                String      @unique
  slug                String      @unique
  description         String?
  itemCount           Int         @default(0)
  hasSubcategories    Boolean     @default(false)
  displayOrder        Int         @default(0)

  // Media
  iconName            String?
  logoUrl             String?
  logoMediaId         BigInt?
  dataAiHintIcon      String?
  coverImageUrl       String?
  coverImageMediaId   BigInt?
  dataAiHintCover     String?
  megaMenuImageUrl    String?
  megaMenuImageMediaId BigInt?
  dataAiHintMegaMenu  String?
  
  auctions      Auction[]
  lots          Lot[]
  assets        Asset[]
  subcategories Subcategory[]
  directSaleOffers DirectSaleOffer[]
}

model City {
  id        BigInt   @id @default(autoincrement())
  name      String
  slug      String?  @unique
  stateId   BigInt
  state     State    @relation(fields: [stateId], references: [id])
  ibgeCode  String?  @unique
  auctions  Auction[]
  lots      Lot[]
  sellers   Seller[]
  assets    Asset[]

  @@unique([name, stateId])
}

model ContactMessage {
  id      BigInt   @id @default(autoincrement())
  name    String
  email   String
  subject String?
  message String   @db.Text
  isRead  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Court {
  id                BigInt              @id @default(autoincrement())
  name              String
  slug              String?             @unique
  stateUf           String?
  website           String?
  createdAt         DateTime?           @default(now())
  updatedAt         DateTime?           @updatedAt
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]           @relation(map: "CourtAuctions")
}

/// @Model {label: "Fonte de Dados de Relatório", icon: "database"}
model DataSource {
  id        BigInt @id @default(autoincrement())
  name      String
  modelName String @unique
  fields    Json

  @@map("data_sources")
}

model DirectSaleOffer {
  id                BigInt     @id @default(autoincrement())
  publicId          String   @unique @default(cuid())
  title             String
  description       String?  @db.Text
  offerType         String   @default("BUY_NOW")
  status            String   @default("PENDING_APPROVAL")
  price             Decimal? @db.Decimal(12, 2)
  minimumOfferPrice Decimal? @db.Decimal(12, 2)
  
  locationCity      String?
  locationState     String?
  
  imageUrl          String?
  imageMediaId      BigInt?
  dataAiHint        String?
  galleryImageUrls  Json?
  mediaItemIds      Json?

  views             Int      @default(0)
  proposalsCount    Int      @default(0)
  
  expiresAt         DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  tenantId BigInt
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  
  categoryId BigInt
  category   LotCategory @relation(fields: [categoryId], references: [id])
  
  sellerId BigInt
  seller   Seller @relation(fields: [sellerId], references: [id])
}

model DocumentTemplate {
  id      BigInt   @id @default(autoincrement())
  name    String   @unique
  type    DocumentTemplateType
  content String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DocumentType {
  id              BigInt         @id @default(autoincrement())
  name            String   @unique
  description     String?
  isRequired      Boolean        @default(true)
  appliesTo       String // e.g., 'PHYSICAL,LEGAL'
  userDocuments   UserDocument[]
}

// Define todos os enums utilizados no schema do Prisma.
// Centralizar os enums aqui previne erros de definição duplicada e facilita
// a manutenção do modelo de dados.

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum AssetStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum DirectSaleOfferStatus {
  RASCUNHO
  PENDING_APPROVAL
  ACTIVE
  SOLD
  EXPIRED
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum StorageProviderType {
  local
  firebase
  aws_s3
}

enum SearchPaginationType {
  pagination
  loadMore
}

enum CrudFormMode {
  modal
  sheet
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}
model InstallmentPayment {
  id                BigInt   @id @default(autoincrement())
  userWinId         BigInt
  lotId             BigInt
  installmentNumber Int
  totalInstallments Int
  amount            Decimal  @db.Decimal(12, 2)
  dueDate           DateTime
  paymentDate       DateTime?
  status            String   @default("PENDENTE") // PENDING, PAID, OVERDUE

  userWin UserWin @relation(fields: [userWinId], references: [id])
  lot     Lot     @relation(fields: [lotId], references: [id])
}

model JudicialBranch {
  id                BigInt              @id @default(autoincrement())
  name              String            @unique
  slug              String?             @unique
  districtId        BigInt?
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime?           @default(now())
  updatedAt         DateTime?           @updatedAt
  district          JudicialDistrict?   @relation(fields: [districtId], references: [id])
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
  auctions          Auction[]           @relation(map: "BranchAuctions")
}

model JudicialDistrict {
  id                BigInt            @id @default(autoincrement())
  name              String            @unique
  slug              String?           @unique
  courtId           BigInt?
  stateId           BigInt?
  zipCode           String?
  createdAt         DateTime?         @default(now())
  updatedAt         DateTime?         @updatedAt
  court             Court?            @relation(fields: [courtId], references: [id])
  state             State?            @relation(fields: [stateId], references: [id])
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]         @relation(map: "DistrictAuctions")
}

model JudicialParty {
  id             BigInt   @id @default(autoincrement())
  name           String
  documentNumber String?
  partyType      String
  
  processId BigInt
  process   JudicialProcess @relation(fields: [processId], references: [id])
}

model JudicialProcess {
  id                BigInt  @id @default(autoincrement())
  publicId          String  @unique
  processNumber     String
  isElectronic      Boolean @default(true)
  courtId           BigInt?
  districtId        BigInt?
  branchId          BigInt?
  sellerId          BigInt?
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt
  tenantId          BigInt
  assets            Asset[]
  auctions          Auction[] @relation(map: "AuctionToJudicialProcess")

  // Relations
  court             Court?            @relation(fields: [courtId], references: [id])
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch            JudicialBranch?   @relation(fields: [branchId], references: [id])
  seller            Seller?           @relation(fields: [sellerId], references: [id])
  tenant            Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  parties           JudicialParty[] // Back-relation added here

  @@unique([processNumber, tenantId])

}

// prisma/models/lot-stage-details.prisma
model LotStageDetails {
  id            BigInt     @id @default(autoincrement())
  lot           Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         BigInt
  stage         AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)
  stageId       BigInt
  initialBid    Decimal? @db.Decimal(12, 2)
  bidIncrement  Decimal? @db.Decimal(12, 2)

  @@unique([lotId, stageId])
}

model LotStagePrice {
  id           BigInt   @id @default(autoincrement())
  lot          Lot      @relation(fields: [lotId], references: [id])
  lotId        BigInt
  auctionStage AuctionStage @relation(fields: [stageId], references: [id])
  stageId      BigInt
  initialBid   Decimal? @db.Decimal(12, 2)
  bidIncrement Decimal? @db.Decimal(12, 2)

  @@unique([lotId, stageId])
}


model Lot {
  id                           BigInt                  @id @default(autoincrement())
  publicId                     String                  @unique @default(cuid())
  codigo                       String                  @unique @default(cuid())
  number                       String?
  title                        String
  description                  String?                 @db.Text
  properties                   Json?
  status                       LotStatus               @default(EM_BREVE)
  price                        Decimal                 @db.Decimal(12, 2)
  initialPrice                 Decimal?                @db.Decimal(12, 2)
  secondInitialPrice           Decimal?                @db.Decimal(12, 2)
  bidIncrementStep             Decimal?                @db.Decimal(12, 2)
  evaluationValue              Decimal?                @db.Decimal(12, 2)
  discountPercentage           Float?
  startDate                    DateTime?
  endDate                      DateTime?
  views                        Int                     @default(0)
  isFeatured                   Boolean                 @default(false)
  isExclusive                  Boolean                 @default(false)
  slug                         String                  @unique
  hasKey                       Boolean                 @default(false)
  winningBidTermUrl            String?                 @db.VarChar(1024)
  bidsCount                    Int                     @default(0)
  dataAiHint                   String?
  mapAddress                   String?
  latitude                     Decimal?                @db.Decimal(10, 8)
  longitude                    Decimal?                @db.Decimal(11, 8)
  relistCount                  Int                     @default(0)
  isRelisted                   Boolean                 @default(false)
  tenantId                     BigInt
  tenant                       Tenant                  @relation(fields: [tenantId], references: [id])
  auctionId                    BigInt
  auction                      Auction                 @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  type                         String // Substituído de LotCategory para String
  categoryId                   BigInt?
  category                     LotCategory?            @relation(fields: [categoryId], references: [id])
  subcategoryId                BigInt?
  subcategory                  Subcategory?            @relation(fields: [subcategoryId], references: [id])
  sellerId                     BigInt?
  seller                       Seller?                 @relation(fields: [sellerId], references: [id])
  auctioneerId                 BigInt?
  auctioneer                   Auctioneer?             @relation(fields: [auctioneerId], references: [id])
  winnerId                     BigInt?
  winner                       User?                   @relation("LotsWon", fields: [winnerId], references: [id])
  cityId                       BigInt?
  city                         City?                   @relation(fields: [cityId], references: [id])
  stateId                      BigInt?
  state                        State?                  @relation(fields: [stateId], references: [id])
  originalLotId                BigInt?
  originalLot                  Lot?                    @relation("RelistedFrom", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLots                 Lot[]                   @relation("RelistedFrom")
  assets                       AssetsOnLots[]
  bids                         Bid[]
  userWins                     UserWin[]
  maxBids                      UserLotMaxBid[]
  reviews                      Review[]
  questions                    LotQuestion[]
  stagePrices                  LotStagePrice[]
  installmentPayments          InstallmentPayment[]
  lotStageDetails              LotStageDetails[]
  inheritedMediaFromBemId      BigInt?
  createdAt                    DateTime                @default(now())
  updatedAt                    DateTime                @updatedAt

  @@index([auctionId])
  @@index([winnerId])
  @@index([status])
  @@index([originalLotId])
}

model MediaItem {
  id           BigInt   @id @default(autoincrement())
  fileName     String
  mimeType     String
  sizeBytes    Int
  storagePath  String   @unique
  url          String   @db.VarChar(1024)
  urlThumbnail String?  @db.VarChar(1024)
  title        String?
  altText      String?
  caption      String?
  description  String?
  dataAiHint   String?
  
  uploadedById BigInt?
  uploadedBy   User?    @relation("UploadedBy", fields: [uploadedById], references: [id])
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  assetGallery AssetMedia[]
}

model AssetMedia {
  assetId   BigInt
  mediaId   BigInt
  displayOrder Int
  
  asset   Asset     @relation(fields: [assetId], references: [id])
  media   MediaItem @relation(fields: [mediaId], references: [id])
  
  @@id([assetId, mediaId])
}

model Report {
  id          BigInt   @id @default(autoincrement())
  name        String
  description String?
  definition  Json
  tenantId    BigInt
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("reports")
}

model Review {
  id              BigInt   @id @default(autoincrement())
  lotId           BigInt
  auctionId       BigInt
  userId          BigInt
  userDisplayName String?
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([lotId])
}

model Role {
  id              BigInt         @id @default(autoincrement())
  name            String         @unique
  nameNormalized  String         @unique
  description     String?
  permissions     Json?
  users           UsersOnRoles[]
}
model Seller {
  id                   BigInt              @id @default(autoincrement())
  publicId             String              @unique
  codigo               String              @unique @default(cuid())
  slug                 String              @unique
  name                 String              @unique
  contactName          String?             @db.Text
  email                String?             @db.Text
  phone                String?             @db.Text
  address              String?             @db.Text
  city                 String?             @db.Text
  cityId               BigInt?
  cityObject           City?               @relation(fields: [cityId], references: [id])
  state                String?             @db.Text
  zipCode              String?             @db.Text
  website              String?             @db.Text
  logoUrl              String?             @db.Text
  logoMediaId          BigInt?
  dataAiHintLogo       String?             @db.Text
  description          String?             @db.Text
  userId               BigInt?             @unique
  user                 User?               @relation("UserSeller", fields: [userId], references: [id], onDelete: SetNull)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  isJudicial           Boolean             @default(false)
  judicialBranchId     BigInt?             @unique
  judicialBranch       JudicialBranch?     @relation(fields: [judicialBranchId], references: [id])
  // Relacionamentos
  auctions             Auction[]
  lots                 Lot[]
  assets               Asset[]
  directSaleOffers     DirectSaleOffer[]
  judicialProcesses    JudicialProcess[]
  // Multi-Tenant
  tenant               Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId             BigInt
}

model Subcategory {
  id                 BigInt      @id @default(autoincrement())
  codigo             String      @unique @default(cuid())
  name               String
  slug               String
  parentCategoryId   BigInt
  description        String?
  displayOrder       Int         @default(0)
  iconUrl            String?
  iconMediaId        BigInt?
  dataAiHintIcon     String?
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots               Lot[]
  assets             Asset[]

  @@unique([name, parentCategoryId])
}

/// Define um Tenant (inquilino) na plataforma. Cada Tenant representa um leiloeiro ou cliente.
model Tenant {
  id        BigInt   @id @default(autoincrement())
  name      String
  subdomain String   @unique
  domain    String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações inversas
  users             UsersOnTenants[]
  auctions          Auction[]
  lots              Lot[]
  assets            Asset[]
  sellers           Seller[]
  auctioneers       Auctioneer[]
  judicialProcesses JudicialProcess[]
  directSaleOffers  DirectSaleOffer[]
  notifications     Notification[]
  bids              Bid[]
  reports           Report[]
  platformSettings  PlatformSettings?

  Subscriber Subscriber[]
}

model UserDocument {
  id               BigInt      @id @default(autoincrement())
  userId           BigInt
  documentTypeId   BigInt
  fileUrl          String
  fileName         String
  status           UserDocumentStatus @default(SUBMITTED)
  rejectionReason  String?
  
  uploadedAt       DateTime @default(now())
  verifiedAt       DateTime?
  
  user             User         @relation(fields: [userId], references: [id])
  documentType     DocumentType @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
  @@index([userId])
}

model UserLotMaxBid {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt
  lotId     BigInt
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
  @@index([lotId])
}

model UserWin {
  id                BigInt      @id @default(autoincrement())
  userId            BigInt
  lotId             BigInt
  winningBidAmount  Decimal     @db.Decimal(12, 2)
  winDate           DateTime
  paymentStatus     PaymentStatus @default(PENDENTE)
  retrievalStatus   String?
  user              User        @relation(fields: [userId], references: [id])
  lot               Lot         @relation(fields: [lotId], references: [id])
  installments      InstallmentPayment[]

  @@unique([userId, lotId])
}

model User {
  id                    BigInt                 @id @default(autoincrement())
  codigo                String                 @unique @default(cuid())
  email                 String                 @unique
  password              String
  fullName              String?
  cpf                   String?                @unique
  rgNumber              String?
  rgIssuer              String?
  rgIssueDate           DateTime?
  rgState               String?
  dateOfBirth           DateTime?
  gender                String?
  profession            String?
  nationality           String?
  maritalStatus         String?
  propertyRegime        String?
  spouseName            String?
  spouseCpf             String?
  cellPhone             String?
  homePhone             String?
  zipCode               String?
  street                String?
  number                String?
  complement            String?
  neighborhood          String?
  city                  String?
  state                 String?
  avatarUrl             String?                @db.VarChar(1024)
  dataAiHint            String?
  lastLogin             DateTime?
  bids                  Bid[]
  wins                  UserWin[]
  lotsWon               Lot[]                   @relation("LotsWon")
  maxBids               UserLotMaxBid[]
  questions             LotQuestion[]
  reviews               Review[]
  documents             UserDocument[]
  notifications         Notification[]
  auctionHabilitations  AuctionHabilitation[]
  uploadedMedia         MediaItem[]            @relation("UploadedBy")
  roles                 UsersOnRoles[]
  tenants               UsersOnTenants[]
  sellersAsUser         Seller[]                @relation("UserSeller")
  auctioneersAsUser     Auctioneer[]
  habilitationStatus    UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType           AccountType            @default(PHYSICAL)
  razaoSocial           String?
  cnpj                  String?                @unique
  inscricaoEstadual     String?
  website               String?
  responsibleName       String?
  responsibleCpf        String?
  badges                Json?
  optInMarketing        Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

model UsersOnRoles {
  userId     BigInt
  roleId     BigInt
  assignedAt DateTime @default(now())
  assignedBy String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([roleId])
}
model UsersOnTenants {
  userId     BigInt
  tenantId   BigInt
  assignedAt DateTime @default(now())
  assignedBy String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@id([userId, tenantId])
  @@index([tenantId])
}

model VehicleMake {
  id      BigInt     @id @default(autoincrement())
  name    String   @unique
  slug    String   @unique
  models  VehicleModel[]
}

model VehicleModel {
  id     BigInt     @id @default(autoincrement())
  name   String
  slug   String   @unique
  make   VehicleMake @relation(fields: [makeId], references: [id])
  makeId BigInt

  @@unique([makeId, name])
}
