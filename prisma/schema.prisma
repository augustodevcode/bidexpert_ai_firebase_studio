// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ======================================
// ENUMS - For status fields, etc.
// ======================================

enum UserAccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum PartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
  RETIRADO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  PENDING_APPROVAL
  ACTIVE
  SOLD
  EXPIRED
  CANCELLED
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

// ======================================
// MODELS
// ======================================

model User {
  id                    String                   @id @default(cuid())
  email                 String                   @unique
  fullName              String?
  password              String?
  roleId                String?
  habilitationStatus    UserHabilitationStatus   @default(PENDING_DOCUMENTS)
  badges                Json? // Changed from String[] to Json for compatibility
  // Personal Info (PF)
  cpf                   String?                  @unique
  rgNumber              String?
  rgIssuer              String?
  rgIssueDate           DateTime?
  rgState               String?
  dateOfBirth           DateTime?
  gender                String?
  profession            String?
  nationality           String?
  maritalStatus         String?
  propertyRegime        String?
  spouseName            String?
  spouseCpf             String?
  // Contact & Address
  cellPhone             String?
  homePhone             String?
  zipCode               String?
  street                String?
  number                String?
  complement            String?
  neighborhood          String?
  city                  String?
  state                 String?
  // Company Info (PJ)
  accountType           UserAccountType?
  razaoSocial           String?
  cnpj                  String?                  @unique
  inscricaoEstadual     String?
  website               String?
  // System Fields
  status                String?                  @default("ATIVO")
  optInMarketing        Boolean                  @default(false)
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  // Relationships
  role                  Role?                    @relation(fields: [roleId], references: [id], onDelete: SetNull)
  sellerProfile         Seller?
  auctioneerProfile     Auctioneer?
  documents             UserDocument[]
  bids                  Bid[]
  wins                  UserWin[]
  notifications         Notification[]
  reviews               Review[]
  askedQuestions        LotQuestion[]            @relation("AskedByUser")
  answeredQuestions     LotQuestion[]            @relation("AnsweredByAdmin")
  maxBids               UserLotMaxBid[]
}

model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  permissions     Permission[]
  users           User[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Permission {
  id    String @id @default(cuid())
  name  String @unique
  roles Role[]
}

model DocumentType {
  id             String           @id @default(cuid())
  name           String
  description    String?
  isRequired     Boolean          @default(false)
  // Changed from UserAccountType[] to String to support MySQL
  // This will store a comma-separated list of UserAccountType values
  appliesTo      String
  // Changed from String[] to String?
  allowedFormats String?
  displayOrder   Int              @default(0)
  userDocuments  UserDocument[]
}

model UserDocument {
  id               String             @id @default(cuid())
  userId           String
  documentTypeId   String
  fileUrl          String?
  fileName         String?
  status           UserDocumentStatus @default(NOT_SENT)
  uploadDate       DateTime?
  analysisDate     DateTime?
  analystId        String?
  rejectionReason  String?

  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType   DocumentType @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

model MediaItem {
  id             String     @id @default(cuid())
  fileName       String
  storagePath    String?
  uploadedAt     DateTime   @default(now())
  uploadedBy     String?
  title          String?
  altText        String?
  caption        String?
  description    String?
  mimeType       String
  sizeBytes      Int
  urlOriginal    String
  urlThumbnail   String?
  urlMedium      String?
  urlLarge       String?
  dataAiHint     String?
  userUploader   User?      @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)

  // Relationships
  lotImage      Lot?     @relation("LotImage")
  bemImage      Bem?     @relation("BemImage")
  offerImage    DirectSaleOffer? @relation("OfferImage")
  logoAuctioneer Auctioneer? @relation("LogoAuctioneer")
  logoSeller     Seller?    @relation("LogoSeller")
  logoCategory   LotCategory? @relation("LogoCategory")
  coverCategory  LotCategory? @relation("CoverCategory")
  megaMenuCategory LotCategory? @relation("MegaMenuCategory")
  iconSubcategory Subcategory? @relation("IconSubcategory")
  blogPostImage   BlogPost? @relation("BlogPostImage")

  lots        Lot[]
  bens        Bem[]
}


// ======================================
// AUCTION & LOTS
// ======================================

model Auction {
  id                             String           @id @default(cuid())
  publicId                       String           @unique
  title                          String
  fullTitle                      String?
  description                    String?          @db.Text
  status                         AuctionStatus    @default(RASCUNHO)
  auctionType                    String?
  categoryId                     String
  auctioneerId                   String
  sellerId                       String?
  judicialProcessId              String?
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json?
  city                           String?
  state                          String?
  imageMediaId                   String?          @unique
  imageUrl                       String?
  dataAiHint                     String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  totalLots                      Int?             @default(0)
  visits                         Int?             @default(0)
  initialOffer                   Float?
  isFeaturedOnMarketplace        Boolean?         @default(false)
  marketplaceAnnouncementTitle   String?
  automaticBiddingEnabled        Boolean?         @default(false)
  silentBiddingEnabled           Boolean?         @default(false)
  allowMultipleBidsPerUser       Boolean?         @default(true)
  allowInstallmentBids           Boolean?         @default(false)
  softCloseEnabled               Boolean?         @default(false)
  softCloseMinutes               Int?             @default(2)
  decrementAmount                Float?
  decrementIntervalSeconds       Int?
  floorPrice                     Float?
  autoRelistSettings             Json?
  additionalTriggers             Json?
  estimatedRevenue               Float?
  achievedRevenue                Float?
  totalHabilitatedUsers          Int?
  sellingBranch                  String?
  vehicleLocation                String?
  createdAt                      DateTime         @default(now())
  updatedAt                      DateTime         @updatedAt

  lots                           Lot[]
  bids                           Bid[]
  reviews                        Review[]
  questions                      LotQuestion[]

  // Relationships
  category                       LotCategory      @relation(fields: [categoryId], references: [id])
  auctioneer                     Auctioneer       @relation(fields: [auctioneerId], references: [id])
  seller                         Seller?          @relation(fields: [sellerId], references: [id])
  judicialProcess                JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  image                          MediaItem?       @relation("AuctionImage", fields: [imageMediaId], references: [id])

  @@index([status, auctionDate])
  @@index([categoryId])
  @@index([sellerId])
  @@index([auctioneerId])
  @@fulltext([title, description])
}

model Lot {
  id                   String           @id @default(cuid())
  publicId             String           @unique
  title                String
  number               String?
  description          String?          @db.Text
  status               LotStatus        @default(EM_BREVE)
  price                Float
  initialPrice         Float?
  secondInitialPrice   Float?
  reservePrice         Float?
  evaluationValue      Float?
  debtAmount           Float?
  itbiValue            Float?
  bidIncrementStep     Float?
  auctionDate          DateTime?
  secondAuctionDate    DateTime?
  lotSpecificAuctionDate DateTime?
  endDate              DateTime?
  condition            String?
  views                Int?             @default(0)
  bidsCount            Int?             @default(0)
  isFeatured           Boolean?         @default(false)
  isExclusive          Boolean?         @default(false)
  discountPercentage   Float?
  additionalTriggers   Json?
  
  // Location
  stateId                String?
  cityId                 String?
  latitude             Float?
  longitude            Float?
  mapAddress           String?
  mapEmbedUrl          String?
  mapStaticImageUrl    String?
  
  // Category
  categoryId           String
  subcategoryId        String?
  
  // IDs
  auctionId            String
  sellerId             String?
  imageMediaId         String?          @unique

  // Judicial Info
  judicialProcessNumber      String?
  courtDistrict              String?
  courtName                  String?
  publicProcessUrl           String?
  propertyRegistrationNumber String?
  propertyLiens              String?    @db.Text
  knownDebts                 String?    @db.Text
  additionalDocumentsInfo    String?    @db.Text
  winningBidTermUrl          String?
  
  dataAiHint             String?
  
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relationships
  category               LotCategory     @relation(fields: [categoryId], references: [id])
  subcategory            Subcategory?    @relation(fields: [subcategoryId], references: [id])
  state                  StateInfo?      @relation(fields: [stateId], references: [id])
  city                   CityInfo?       @relation(fields: [cityId], references: [id])
  seller                 Seller?         @relation(fields: [sellerId], references: [id])
  auction                Auction         @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  image                  MediaItem?      @relation("LotImage", fields: [imageMediaId], references: [id])
  
  bens                   Bem[]
  mediaItems             MediaItem[]
  bids                   Bid[]
  wins                   UserWin[]
  reviews                Review[]
  questions              LotQuestion[]
  maxBids                UserLotMaxBid[]

  @@index([auctionId, status])
  @@index([categoryId])
  @@index([stateId, cityId])
  @@fulltext([title, description])
}


// ======================================
// ACTORS
// ======================================

model Seller {
  id                         String             @id @default(cuid())
  publicId                   String             @unique
  name                       String             @unique
  slug                       String             @unique
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  logoMediaId                String?            @unique
  dataAiHintLogo             String?
  description                String?            @db.Text
  isJudicial                 Boolean            @default(false)
  judicialBranchId           String?            @unique
  userId                     String?            @unique
  rating                     Float?
  memberSince                DateTime?
  activeLotsCount            Int?
  totalSalesValue            Float?
  auctionsFacilitatedCount   Int?
  createdAt                  DateTime           @default(now())
  updatedAt                  DateTime           @updatedAt

  // Relationships
  user                       User?              @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  judicialBranch             JudicialBranch?    @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  logo                       MediaItem?         @relation("LogoSeller", fields: [logoMediaId], references: [id])
  
  auctions                   Auction[]
  judicialProcesses          JudicialProcess[]
  bens                       Bem[]
  lots                       Lot[]
  offers                     DirectSaleOffer[]
}

model Auctioneer {
  id                       String    @id @default(cuid())
  publicId                 String    @unique
  name                     String    @unique
  slug                     String    @unique
  registrationNumber       String?
  contactName              String?
  email                    String?
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  logoMediaId              String?   @unique
  dataAiHintLogo           String?
  description              String?   @db.Text
  userId                   String?   @unique
  rating                   Float?
  memberSince              DateTime?
  auctionsConductedCount   Int?
  totalValueSold           Float?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  
  // Relationships
  user                     User?     @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  logo                     MediaItem? @relation("LogoAuctioneer", fields: [logoMediaId], references: [id])
  
  auctions                 Auction[]
}


// ======================================
// JUDICIAL ENTITIES
// ======================================

model JudicialProcess {
  id              String           @id @default(cuid())
  publicId        String           @unique
  processNumber   String           @unique
  isElectronic    Boolean          @default(true)
  
  courtId         String
  districtId      String
  branchId        String
  sellerId        String?

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relationships
  court           Court            @relation(fields: [courtId], references: [id])
  district        JudicialDistrict @relation(fields: [districtId], references: [id])
  branch          JudicialBranch   @relation(fields: [branchId], references: [id])
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  
  bens            Bem[]
  parties         ProcessParty[]
  auctions        Auction[]
}

model Court {
  id        String             @id @default(cuid())
  name      String             @unique
  slug      String             @unique
  stateUf   String
  website   String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  districts JudicialDistrict[]
  state     StateInfo          @relation(fields: [stateUf], references: [uf])
}

model JudicialDistrict {
  id        String           @id @default(cuid())
  name      String
  slug      String
  courtId   String
  stateId   String
  zipCode   String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relationships
  court     Court            @relation(fields: [courtId], references: [id])
  state     StateInfo        @relation(fields: [stateId], references: [id])

  branches  JudicialBranch[]
  processes JudicialProcess[]
}

model JudicialBranch {
  id          String           @id @default(cuid())
  name        String
  slug        String
  districtId  String
  contactName String?
  phone       String?
  email       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relationships
  district  JudicialDistrict @relation(fields: [districtId], references: [id])
  
  processes JudicialProcess[]
  sellers   Seller[]
}

model ProcessParty {
  id             String    @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      PartyType

  // Relationships
  process JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@unique([processId, name, partyType])
}


model Bem {
  id                   String     @id @default(cuid())
  publicId             String     @unique
  title                String
  description          String?    @db.Text
  status               BemStatus  @default(CADASTRO)
  evaluationValue      Float?
  
  // Foreign Keys
  categoryId           String
  subcategoryId        String?
  judicialProcessId    String?
  sellerId             String?
  imageMediaId         String?    @unique
  
  // Specific Attributes (JSON)
  vehicleAttributes      Json?
  propertyAttributes     Json?
  machineryAttributes    Json?
  livestockAttributes    Json?
  electronicsAttributes  Json?
  otherAttributes        Json?

  // Location
  locationCity         String?
  locationState        String?
  address              String?
  latitude             Float?
  longitude            Float?

  dataAiHint           String?
  
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  
  // Relationships
  image                  MediaItem?        @relation("BemImage", fields: [imageMediaId], references: [id])
  category               LotCategory       @relation(fields: [categoryId], references: [id])
  subcategory            Subcategory?      @relation(fields: [subcategoryId], references: [id])
  judicialProcess        JudicialProcess?  @relation(fields: [judicialProcessId], references: [id])
  seller                 Seller?           @relation(fields: [sellerId], references: [id])
  
  lots                   Lot[]
  mediaItems             MediaItem[]
}


// ======================================
// GEOGRAPHICAL & CATEGORIES
// ======================================

model LotCategory {
  id                   String        @id @default(cuid())
  name                 String        @unique
  slug                 String        @unique
  description          String?
  itemCount            Int?
  hasSubcategories     Boolean       @default(false)
  logoMediaId          String?       @unique
  coverImageMediaId    String?       @unique
  megaMenuImageMediaId String?       @unique
  dataAiHintLogo       String?
  dataAiHintCover      String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  // Relationships
  logo                 MediaItem?    @relation("LogoCategory", fields: [logoMediaId], references: [id])
  coverImage           MediaItem?    @relation("CoverCategory", fields: [coverImageMediaId], references: [id])
  megaMenuImage        MediaItem?    @relation("MegaMenuCategory", fields: [megaMenuImageMediaId], references: [id])

  lots                 Lot[]
  subcategories        Subcategory[]
  bens                 Bem[]
  offers               DirectSaleOffer[]
  auctions             Auction[]
}

model Subcategory {
  id               String      @id @default(cuid())
  name             String
  slug             String      @unique
  description      String?
  parentCategoryId String
  displayOrder     Int         @default(0)
  itemCount        Int?
  iconMediaId      String?     @unique
  dataAiHintIcon   String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  
  // Relationships
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  icon             MediaItem?  @relation("IconSubcategory", fields: [iconMediaId], references: [id])

  lots             Lot[]
  bens             Bem[]
}

model StateInfo {
  id        String             @id @default(cuid())
  name      String             @unique
  uf        String             @unique
  slug      String             @unique
  cityCount Int?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  cities    CityInfo[]
  lots      Lot[]
  courts    Court[]
  districts JudicialDistrict[]
}

model CityInfo {
  id        String   @id @default(cuid())
  name      String
  slug      String
  stateId   String
  stateUf   String
  ibgeCode  String?
  lotCount  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  state     StateInfo @relation(fields: [stateId], references: [id])
  lots      Lot[]
}

// ======================================
// BIDDING & USER ACTIVITY
// ======================================

model Bid {
  id             String   @id @default(cuid())
  lotId          String
  auctionId      String
  bidderId       String
  bidderDisplay  String // Can be anonymized name
  amount         Float
  timestamp      DateTime @default(now())

  // Relationships
  user    User    @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  lot     Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@index([lotId, timestamp])
  @@index([bidderId])
}

model UserWin {
  id                String        @id @default(cuid())
  lotId             String        @unique // A lot can only be won once
  userId            String
  winningBidAmount  Float
  winDate           DateTime      @default(now())
  paymentStatus     PaymentStatus @default(PENDENTE)
  invoiceUrl        String?
  
  // Relationships
  user User @relation(fields: [userId], references: [id])
  lot  Lot  @relation(fields: [lotId], references: [id])
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}


// ======================================
// CONTENT & ENGAGEMENT
// ======================================

model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())

  // Relationships
  user User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                        String   @id @default(cuid())
  lotId                     String
  auctionId                 String
  userId                    String
  userDisplayName           String
  questionText              String   @db.Text
  isPublic                  Boolean  @default(true)
  answerText                String?  @db.Text
  answeredAt                DateTime?
  answeredByUserId          String?
  answeredByUserDisplayName String?
  createdAt                 DateTime @default(now())

  // Relationships
  user      User    @relation("AskedByUser", fields: [userId], references: [id], onDelete: Cascade)
  answeredBy User?  @relation("AnsweredByAdmin", fields: [answeredByUserId], references: [id], onDelete: SetNull)
  lot       Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction   Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
}

model BlogPost {
  id              String   @id @default(cuid())
  title           String
  content         String   @db.Text
  authorId        String
  authorName      String
  slug            String   @unique
  publishedAt     DateTime @default(now())
  featuredImage   String?
  // Changed from String[] to String?
  tags            String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  image           MediaItem? @relation("BlogPostImage", fields: [featuredImage], references: [id], onDelete: SetNull)
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([isRead, createdAt])
}

// ======================================
// DIRECT SALES & OTHER
// ======================================

model DirectSaleOffer {
  id                       String                @id @default(cuid())
  publicId                 String                @unique
  title                    String
  description              String                @db.Text
  offerType                DirectSaleOfferType
  status                   DirectSaleOfferStatus
  price                    Float?
  minimumOfferPrice        Float?
  locationCity             String?
  locationState            String?
  imageMediaId             String?               @unique
  imageUrl                 String?
  dataAiHint               String?
  expiresAt                DateTime?
  views                    Int?                  @default(0)
  proposalsCount           Int?                  @default(0)
  
  categoryId               String
  sellerId                 String
  
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt
  
  // Relationships
  category LotCategory @relation(fields: [categoryId], references: [id])
  seller   Seller      @relation(fields: [sellerId], references: [id])
  image    MediaItem?  @relation("OfferImage", fields: [imageMediaId], references: [id])
}

model PlatformSettings {
  id                           String       @id @default("global")
  siteTitle                    String?
  siteTagline                  String?
  galleryImageBasePath         String?
  storageProvider              String?
  firebaseStorageBucket        String?
  activeThemeName              String?
  themes                       Json?
  platformPublicIdMasks        Json?
  homepageSections             Json?
  mentalTriggerSettings        Json?
  sectionBadgeVisibility       Json?
  mapSettings                  Json?
  searchPaginationType         String?
  searchItemsPerPage           Int?
  searchLoadMoreCount          Int?
  showCountdownOnLotDetail     Boolean?
  showCountdownOnCards         Boolean?
  showRelatedLotsOnLotDetail   Boolean?
  relatedLotsCount             Int?
  defaultUrgencyTimerHours     Int?
  variableIncrementTable       Json?
  biddingSettings              Json?
  defaultListItemsPerPage      Int?
  updatedAt                    DateTime     @updatedAt
}

model DocumentTemplate {
  id        String               @id @default(cuid())
  name      String               @unique
  type      DocumentTemplateType
  content   String               @db.Text
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}
