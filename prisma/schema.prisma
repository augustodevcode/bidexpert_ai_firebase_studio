// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// =================================================================
// 1. TABELAS SEM DEPENDÊNCIAS DE CHAVE ESTRANGEIRA (TABELAS BASE)
// =================================================================

model PlatformSettings {
  id                            String   @id @default(uuid()) @map("_id")
  siteTitle                     String?
  siteTagline                   String?
  galleryImageBasePath          String?
  storageProvider               String?
  firebaseStorageBucket         String?
  activeThemeName               String?
  themes                        Json?
  platformPublicIdMasks         Json?
  homepageSections              Json?
  mentalTriggerSettings         Json?
  sectionBadgeVisibility        Json?
  mapSettings                   Json?
  searchPaginationType          String?
  searchItemsPerPage            Int?
  searchLoadMoreCount           Int?
  showCountdownOnLotDetail      Boolean?
  showCountdownOnCards          Boolean?
  showRelatedLotsOnLotDetail    Boolean?
  relatedLotsCount              Int?
  defaultUrgencyTimerHours      Int?
  variableIncrementTable        Json?
  biddingSettings               Json?
  defaultListItemsPerPage       Int?
  updatedAt                     DateTime? @updatedAt

  @@map("platformSettings")
}


model Role {
  id            String    @id @default(uuid()) @map("_id")
  name          String
  nameNormalized String   @unique
  description   String?
  permissions   String[]
  users         UsersOnRoles[]
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt

  @@map("roles")
}


model State {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  uf        String   @unique
  slug      String   @unique
  cityCount Int?     @default(0)
  cities    City[]
  districts JudicialDistrict[]
  lots Lot[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("states")
}

model LotCategory {
  id                   String   @id @default(uuid()) @map("_id")
  name                 String
  slug                 String   @unique
  description          String?
  hasSubcategories     Boolean?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  auctions             Auction[]
  lots                 Lot[]
  bens                 Bem[]
  subcategories        Subcategory[]
  createdAt            DateTime?     @default(now())
  updatedAt            DateTime?     @updatedAt

  @@map("lotCategories")
}


model DocumentTemplate {
  id      String   @id @default(uuid()) @map("_id")
  name    String
  type    String
  content String?  @db.Text
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("documentTemplates")
}

model ContactMessage {
  id      String   @id @default(uuid()) @map("_id")
  name    String
  email   String
  subject String
  message String   @db.Text
  isRead  Boolean? @default(false)
  createdAt DateTime? @default(now())

  @@map("contactMessages")
}

model DocumentType {
  id          String   @id @default(uuid()) @map("_id")
  name        String
  description String?
  isRequired  Boolean? @default(true)
  appliesTo   String? // e.g., 'PHYSICAL', 'LEGAL', 'ALL'
  userDocuments UserDocument[]

  @@map("documentTypes")
}


// =================================================================
// 2. TABELAS COM UM NÍVEL DE DEPENDÊNCIA
// =================================================================


model User {
  id                  String    @id @default(uuid()) @map("_id")
  email               String    @unique
  password            String?
  fullName            String?
  roles               UsersOnRoles[]
  sellerId            String?   @unique // One-to-one with Seller
  seller              Seller?   @relation(fields: [sellerId], references: [id])
  habilitationStatus  String?   @default("PENDING_DOCUMENTS")
  accountType         String?   @default("PHYSICAL")
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  maxBids             UserLotMaxBid[]
  mediaItems          MediaItem[] @relation("UploadedBy")
  auctioneer          Auctioneer?
  createdAt           DateTime? @default(now())
  updatedAt           DateTime? @updatedAt

  @@map("users")
}

model UsersOnRoles {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  role        Role      @relation(fields: [roleId], references: [id])
  roleId      String
  assignedAt  DateTime  @default(now())
  assignedBy  String

  @@id([userId, roleId])
  @@map("users_on_roles")
}


model City {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  slug      String?
  state     State    @relation(fields: [stateId], references: [id])
  stateId   String
  stateUf   String?
  ibgeCode  String?  @unique
  lotCount  Int?     @default(0)
  lots      Lot[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("cities")
}

model Subcategory {
  id                String      @id @default(uuid()) @map("_id")
  name              String
  slug              String?
  parentCategory    LotCategory @relation(fields: [parentCategoryId], references: [id])
  parentCategoryId  String
  description       String?
  displayOrder      Int?        @default(0)
  iconUrl           String?
  iconMediaId       String?
  dataAiHintIcon    String?
  lots              Lot[]
  bens              Bem[]

  @@map("subcategories")
}

model Court {
  id                  String   @id @default(uuid()) @map("_id")
  name                String
  slug                String?
  stateUf             String?
  website             String?
  judicialDistricts   JudicialDistrict[]
  judicialProcesses   JudicialProcess[]
  auctions Auction[]
  createdAt           DateTime? @default(now())
  updatedAt           DateTime? @updatedAt

  @@map("courts")
}


// =================================================================
// 3. TABELAS COM DOIS OU MAIS NÍVEIS DE DEPENDÊNCIA
// =================================================================


model JudicialDistrict {
  id          String    @id @default(uuid()) @map("_id")
  name        String
  slug        String    @unique
  court       Court?    @relation(fields: [courtId], references: [id])
  courtId     String?
  state       State?    @relation(fields: [stateId], references: [id])
  stateId     String?
  zipCode     String?
  branches    JudicialBranch[]
  processes   JudicialProcess[]
  auctions    Auction[]
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt

  @@map("judicialDistricts")
}


model JudicialBranch {
  id                  String   @id @default(uuid()) @map("_id")
  name                String
  slug                String   @unique
  district            JudicialDistrict? @relation(fields: [districtId], references: [id])
  districtId          String?
  contactName         String?
  phone               String?
  email               String?
  sellers             Seller[]
  processes           JudicialProcess[]
  auctions Auction[]
  createdAt           DateTime? @default(now())
  updatedAt           DateTime? @updatedAt

  @@map("judicialBranches")
}

model Seller {
  id               String       @id @default(uuid()) @map("_id")
  publicId         String       @unique @default(uuid())
  slug             String       @unique
  name             String       @unique
  contactName      String?
  email            String?
  phone            String?
  address          String?
  city             String?
  state            String?
  zipCode          String?
  website          String?
  logoUrl          String?
  logoMediaId      String?
  dataAiHintLogo   String?
  description      String?      @db.Text
  user             User?
  isJudicial       Boolean      @default(false)
  judicialBranch   JudicialBranch? @relation(fields: [judicialBranchId], references: [id])
  judicialBranchId String?
  auctions         Auction[]
  bens             Bem[]
  directSaleOffers DirectSaleOffer[]
  lots             Lot[]
  processes        JudicialProcess[]
  createdAt        DateTime?    @default(now())
  updatedAt        DateTime?    @updatedAt

  @@map("sellers")
}


model Auctioneer {
  id                 String   @id @default(uuid()) @map("_id")
  publicId           String   @unique @default(uuid())
  slug               String   @unique
  name               String
  registrationNumber String?
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?  @db.Text
  user               User?    @relation(fields: [userId], references: [id])
  userId             String?  @unique
  auctions           Auction[]
  lots               Lot[]
  createdAt          DateTime? @default(now())
  updatedAt          DateTime? @updatedAt

  @@map("auctioneers")
}


model JudicialProcess {
  id              String      @id @default(uuid()) @map("_id")
  publicId        String      @unique @default(uuid())
  processNumber   String
  isElectronic    Boolean     @default(true)
  court           Court?      @relation(fields: [courtId], references: [id])
  courtId         String?
  district        JudicialDistrict? @relation(fields: [districtId], references: [id])
  districtId      String?
  branch          JudicialBranch?   @relation(fields: [branchId], references: [id])
  branchId        String?
  seller          Seller?     @relation(fields: [sellerId], references: [id])
  sellerId        String?
  parties         JudicialParty[]
  bens            Bem[]
  createdAt       DateTime?   @default(now())
  updatedAt       DateTime?   @updatedAt

  @@map("judicialProcesses")
}


model JudicialParty {
  id              String          @id @default(uuid()) @map("_id")
  process         JudicialProcess @relation(fields: [processId], references: [id])
  processId       String
  name            String
  documentNumber  String?
  partyType       String

  @@map("judicialParties")
}


model Bem {
  id                String       @id @default(uuid()) @map("_id")
  publicId          String?      @unique @default(uuid())
  title             String
  description       String?      @db.Text
  status            String       @default("DISPONIVEL")
  category          LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId        String?
  subcategory       Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId     String?
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId String?
  seller            Seller?      @relation(fields: [sellerId], references: [id])
  sellerId          String?
  evaluationValue   Float?
  imageUrl          String?
  imageMediaId      String?
  galleryImageUrls  Json?
  mediaItemIds      Json?
  dataAiHint        String?
  locationCity      String?
  locationState     String?
  address           String?
  latitude          Float?
  longitude         Float?
  lots              LotBens[]
  createdAt         DateTime?    @default(now())
  updatedAt         DateTime?    @updatedAt

  @@map("bens")
}

model Auction {
  id            String   @id @default(uuid()) @map("_id")
  publicId      String   @unique @default(uuid())
  slug          String   @unique
  title         String
  description   String?  @db.Text
  status        String?  @default("RASCUNHO")
  auctionDate   DateTime
  endDate       DateTime?
  auctioneer    Auctioneer? @relation(fields: [auctioneerId], references: [id])
  auctioneerId  String?
  seller        Seller?     @relation(fields: [sellerId], references: [id])
  sellerId      String?
  category      LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId    String?
  auctionType   String?
  imageUrl      String?
  imageMediaId  String?
  documentsUrl  String?
  visits        Int?     @default(0)
  totalLots     Int?     @default(0)
  initialOffer  Float?
  isFavorite    Boolean? @default(false)
  dataAiHint    String?
  lots          Lot[]
  bids          Bid[]
  auctionHabilitations AuctionHabilitation[]
  court       Court?    @relation(fields: [courtId], references: [id])
  courtId     String?
  judicialDistrict JudicialDistrict? @relation(fields: [judicialDistrictId], references: [id])
  judicialDistrictId String?
  judicialBranch JudicialBranch? @relation(fields: [judicialBranchId], references: [id])
  judicialBranchId String?
  auctionStages Json?
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt

  @@map("auctions")
}

model AuctionHabilitation {
  id          String   @id @default(uuid()) @map("_id")
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  auction     Auction  @relation(fields: [auctionId], references: [id])
  auctionId   String
  status      String   @default("APPROVED")
  requestedAt DateTime @default(now())
  approvedAt  DateTime?

  @@unique([userId, auctionId])
  @@map("auctionHabilitations")
}


model Lot {
  id                      String       @id @default(uuid()) @map("_id")
  publicId                String       @unique @default(uuid())
  auction                 Auction      @relation(fields: [auctionId], references: [id])
  auctionId               String
  slug                    String?
  number                  String?
  title                   String
  description             String?      @db.Text
  price                   Float
  initialPrice            Float?
  secondInitialPrice      Float?
  bidIncrementStep        Float?
  status                  String       @default("EM_BREVE")
  bidsCount               Int?         @default(0)
  views                   Int?         @default(0)
  isFeatured              Boolean?     @default(false)
  isExclusive             Boolean?     @default(false)
  discountPercentage      Int?
  additionalTriggers      Json?
  imageUrl                String?
  imageMediaId            String?
  galleryImageUrls        Json?
  mediaItemIds            Json?
  bens                    LotBens[]
  type                    String
  category                LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId              String?
  subcategory             Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId           String?
  seller                  Seller?      @relation(fields: [sellerId], references: [id])
  sellerId                String?
  auctioneer              Auctioneer?  @relation(fields: [auctioneerId], references: [id])
  auctioneerId            String?
  city                    City?        @relation(fields: [cityId], references: [id])
  cityId                  String?
  state                   State?       @relation(fields: [stateId], references: [id])
  stateId                 String?
  cityName                String?
  stateUf                 String?
  latitude                Float?
  longitude               Float?
  mapAddress              String?
  mapEmbedUrl             String?
  mapStaticImageUrl       String?
  endDate                 DateTime?
  auctionDate             DateTime?
  lotSpecificAuctionDate  DateTime?
  secondAuctionDate       DateTime?
  condition               String?
  dataAiHint              String?
  winner                  User?        @relation(fields: [winnerId], references: [id])
  winnerId                String?
  winningBidTermUrl       String?
  allowInstallmentBids    Boolean?     @default(false)
  bids                    Bid[]
  userWins                UserWin[]
  userMaxBids             UserLotMaxBid[]
  createdAt               DateTime?    @default(now())
  updatedAt               DateTime?    @updatedAt

  @@map("lots")
}


model LotBens {
  lot     Lot     @relation(fields: [lotId], references: [id])
  lotId   String
  bem     Bem     @relation(fields: [bemId], references: [id])
  bemId   String

  @@id([lotId, bemId])
  @@map("lot_bens")
}


model MediaItem {
  id            String   @id @default(uuid()) @map("_id")
  fileName      String   @unique
  storagePath   String
  title         String?
  altText       String?
  caption       String?
  description   String?  @db.Text
  mimeType      String
  sizeBytes     Int?
  urlOriginal   String
  urlThumbnail  String?
  urlMedium     String?
  urlLarge      String?
  linkedLotIds  Json?
  dataAiHint    String?
  uploadedBy    User?    @relation("UploadedBy", fields: [uploadedByUserId], references: [id])
  uploadedByUserId String?
  uploadedAt    DateTime? @default(now())
  judicialProcessId String? // Added to link media to a process

  @@map("mediaItems")
}


model UserDocument {
  id              String   @id @default(uuid()) @map("_id")
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  documentType    DocumentType @relation(fields: [documentTypeId], references: [id])
  documentTypeId  String
  status          String   @default("PENDING")
  fileUrl         String
  fileName        String?
  rejectionReason String?  @db.Text
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
  
  @@unique([userId, documentTypeId])
  @@map("userDocuments")
}


model Bid {
  id              String   @id @default(uuid()) @map("_id")
  lot             Lot      @relation(fields: [lotId], references: [id])
  lotId           String
  auction         Auction  @relation(fields: [auctionId], references: [id])
  auctionId       String
  bidder          User     @relation(fields: [bidderId], references: [id])
  bidderId        String
  bidderDisplay   String?
  amount          Float
  timestamp       DateTime @default(now())

  @@map("bids")
}

model UserWin {
  id                String   @id @default(uuid()) @map("_id")
  lot               Lot      @relation(fields: [lotId], references: [id])
  lotId             String   @unique
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  winningBidAmount  Float
  winDate           DateTime @default(now())
  paymentStatus     String
  invoiceUrl        String?

  @@map("userWins")
}


model DirectSaleOffer {
  id                    String   @id @default(uuid()) @map("_id")
  publicId              String   @unique @default(uuid())
  title                 String
  description           String?  @db.Text
  offerType             String?
  price                 Float?
  minimumOfferPrice     Float?
  status                String?  @default("ACTIVE")
  category              LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId            String?
  seller                Seller?  @relation(fields: [sellerId], references: [id])
  sellerId              String?
  locationCity          String?
  locationState         String?
  imageUrl              String?
  imageMediaId          String?
  dataAiHint            String?
  galleryImageUrls      Json?
  mediaItemIds          Json?
  itemsIncluded         Json?
  views                 Int?     @default(0)
  expiresAt             DateTime?
  createdAt             DateTime? @default(now())
  updatedAt             DateTime? @updatedAt

  @@map("directSaleOffers")
}

model UserLotMaxBid {
  id        String   @id @default(uuid()) @map("_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id])
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime? @default(now())

  @@unique([userId, lotId])
  @@map("userLotMaxBids")
}
```