
// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. ENUMS (TIPOS PERSONALIZADOS)
// =================================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}


// =================================================================
// 2. MODELS (TABELAS)
// =================================================================

model User {
  id                String       @id @default(cuid())
  fullName          String?
  email             String       @unique
  password          String
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType          @default(PHYSICAL)
  avatarUrl         String?
  dataAiHint        String?
  badges            Json?
  
  cpf                         String?
  rgNumber                    String?
  rgIssuer                    String?
  rgIssueDate                 DateTime?
  rgState                     String?
  dateOfBirth                 DateTime?
  cellPhone                   String?
  homePhone                   String?
  gender                      String?
  profession                  String?
  nationality                 String?
  maritalStatus               String?
  propertyRegime              String?
  spouseName                  String?
  spouseCpf                   String?
  zipCode                     String?
  street                      String?
  number                      String?
  complement                  String?
  neighborhood                String?
  city                        String?
  state                       String?
  optInMarketing              Boolean? @default(false)
  
  razaoSocial                 String?
  cnpj                        String?
  inscricaoEstadual           String?
  website                     String?
  responsibleName             String?
  responsibleCpf              String?
  
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relações
  roles             UsersOnRoles[]
  seller            Seller?
  auctioneer        Auctioneer?
  documents         UserDocument[]
  bids              Bid[]
  wins              UserWin[]      @relation("UserWins")
  lotsWon           Lot[]          @relation("LotWinner")
  habilitations     AuctionHabilitation[]
  mediaItems        MediaItem[]    @relation("MediaUploader")
}

model UsersOnRoles {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model Role {
  id             String         @id @default(cuid())
  name           String         @unique
  nameNormalized String         @unique
  description    String?        @db.VarChar(255)
  permissions    String[]
  users          UsersOnRoles[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model State {
  id        String   @id @default(cuid())
  name      String
  uf        String   @unique
  slug      String   @unique
  lotCount  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações
  cities           City[]
  auctions         Auction[]
  lots             Lot[]
  judicialDistricts JudicialDistrict[]
  courts           Court[]
}

model City {
  id        String   @id @default(cuid())
  name      String
  slug      String?
  stateId   String
  stateUf   String?
  ibgeCode  String?  @unique
  lotCount  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relações
  state     State    @relation(fields: [stateId], references: [id])
  auctions  Auction[]
  lots      Lot[]
}

model Court {
  id                String             @id @default(cuid())
  name              String             @unique
  slug              String?            @unique
  stateUf           String?
  website           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Relações
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  state             State?             @relation(fields: [stateId], references: [id])
  stateId           String?
}

model JudicialDistrict {
  id        String    @id @default(cuid())
  name      String
  slug      String?   @unique
  courtId   String?
  stateId   String?
  zipCode   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relações
  court             Court?            @relation(fields: [courtId], references: [id])
  state             State?            @relation(fields: [stateId], references: [id])
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialBranch {
  id                String    @id @default(cuid())
  name              String
  slug              String?   @unique
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relações
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  sellers           Seller[]
}

model JudicialProcess {
  id            String    @id @default(cuid())
  publicId      String?   @unique
  processNumber String    @unique
  isElectronic  Boolean   @default(true)
  courtId       String?
  districtId    String?
  branchId      String?
  sellerId      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relações
  court         Court?          @relation(fields: [courtId], references: [id])
  district      JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch        JudicialBranch? @relation(fields: [branchId], references: [id])
  seller        Seller?         @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties       JudicialParty[]
  bens          Bem[]
  auctions      Auction[]
  mediaItems    MediaItem[]
}

model JudicialParty {
  id              String          @id @default(cuid())
  processId       String
  name            String
  documentNumber  String?
  partyType       ProcessPartyType
  
  // Relações
  process         JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model Auctioneer {
  id                 String     @id @default(cuid())
  publicId           String?    @unique
  slug               String?    @unique
  name               String
  registrationNumber String?
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?    @db.Text
  userId             String?    @unique
  user               User?      @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  
  // Relações
  auctions           Auction[]
  lots               Lot[]
}

model Seller {
  id                 String            @id @default(cuid())
  publicId           String?           @unique
  slug               String?           @unique
  name               String            @unique
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?           @db.Text
  userId             String?           @unique
  user               User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  isJudicial         Boolean           @default(false)
  judicialBranchId   String?           @unique
  judicialBranch     JudicialBranch?   @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  
  // Relações
  auctions           Auction[]
  lots               Lot[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
  judicialProcesses  JudicialProcess[]
}

model Auction {
  id                String       @id @default(cuid())
  publicId          String?      @unique
  slug              String?      @unique
  title             String
  description       String?      @db.Text
  status            AuctionStatus @default(RASCUNHO)
  auctionDate       DateTime     @default(now())
  endDate           DateTime?
  auctioneerId      String?
  sellerId          String?
  categoryId        String?
  cityId            String?
  stateId           String?
  judicialDistrictId String?
  judicialBranchId  String?
  judicialProcessId String?
  
  auctionType             AuctionType?
  auctionMethod           AuctionMethod?
  participation           AuctionParticipation?
  
  imageUrl                String?
  imageMediaId            String?
  documentsUrl            String?
  evaluationReportUrl     String?
  auctionCertificateUrl   String?

  // Location fields
  address String?
  zipCode String?
  latitude Decimal?
  longitude Decimal?
  onlineUrl String?
  
  // Marketplace & Selling
  sellingBranch                String?
  isFeaturedOnMarketplace      Boolean       @default(false)
  marketplaceAnnouncementTitle String?
  isFavorite                   Boolean       @default(false)

  // Bidding
  softCloseEnabled Boolean? @default(false)
  softCloseMinutes Int?
  automaticBiddingEnabled Boolean? @default(false)
  allowInstallmentBids Boolean? @default(true)
  silentBiddingEnabled Boolean? @default(false)
  allowMultipleBidsPerUser Boolean? @default(true)
  decrementAmount Decimal? @db.Decimal(10, 2)
  decrementIntervalSeconds Int?
  floorPrice Decimal? @db.Decimal(15, 2)

  // Auto-relist
  autoRelistSettings Json?

  // Counters / Stats
  visits              Int?         @default(0)
  totalLots           Int?         @default(0)
  estimatedRevenue    Decimal?     @db.Decimal(15, 2)
  achievedRevenue     Decimal?     @db.Decimal(15, 2)
  totalHabilitatedUsers Int?      @default(0)

  // AI-related
  dataAiHint          String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relações
  auctioneer          Auctioneer?           @relation(fields: [auctioneerId], references: [id])
  seller              Seller?               @relation(fields: [sellerId], references: [id])
  category            LotCategory?          @relation(fields: [categoryId], references: [id])
  judicialDistrict    JudicialDistrict?     @relation(fields: [judicialDistrictId], references: [id])
  judicialBranch      JudicialBranch?       @relation(fields: [judicialBranchId], references: [id])
  judicialProcess     JudicialProcess?      @relation(fields: [judicialProcessId], references: [id])
  city                City?                 @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state               State?                @relation(fields: [stateId], references: [id])
  lots                Lot[]                 @relation("AuctionLots")
  auctionStages       AuctionStage[]
  habilitations       AuctionHabilitation[]
}

model AuctionStage {
  id              String    @id @default(cuid())
  auctionId       String
  name            String
  startDate       DateTime
  endDate         DateTime
  evaluationValue Decimal?  @db.Decimal(15, 2)
  
  // Relações
  auction         Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  lotStageDetails LotAuctionStageDetails[]
}


model LotCategory {
  id                   String            @id @default(cuid())
  name                 String
  slug                 String            @unique
  description          String?
  hasSubcategories     Boolean           @default(false)
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  
  // Relações
  lots                 Lot[]
  subcategories        Subcategory[]
  bens                 Bem[]
  auctions             Auction[]
  directSaleOffers     DirectSaleOffer[]
}

model Subcategory {
  id                 String       @id @default(cuid())
  name               String
  slug               String?      @unique
  parentCategoryId   String
  description        String?
  displayOrder       Int          @default(0)
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  
  // Relações
  parentCategory     LotCategory  @relation(fields: [parentCategoryId], references: [id])
  lots               Lot[]
  bens               Bem[]
}


model Lot {
  id                String       @id @default(cuid())
  publicId          String?      @unique
  auctionId         String
  number            String?
  title             String
  description       String?      @db.Text
  price             Decimal      @db.Decimal(15, 2)
  initialPrice      Decimal?     @db.Decimal(15, 2)
  secondInitialPrice Decimal?     @db.Decimal(15, 2)
  bidIncrementStep  Decimal?     @db.Decimal(10, 2)
  status            LotStatus
  bidsCount         Int?         @default(0)
  views             Int?         @default(0)
  isFeatured        Boolean?     @default(false)
  isExclusive       Boolean?     @default(false)
  discountPercentage Int?
  additionalTriggers Json?
  imageUrl          String?
  imageMediaId      String?
  galleryImageUrls  Json?
  mediaItemIds      Json?
  inheritedMediaFromBemId String? // ID do Bem cuja mídia é herdada
  
  type              String? // Denormalized Category Name for some legacy uses
  categoryId        String?
  subcategoryId     String?
  
  sellerId          String?
  auctioneerId      String?
  cityId            String?
  stateId           String?
  cityName          String?
  stateUf           String?
  latitude          Decimal?     @db.Decimal(10, 8)
  longitude         Decimal?     @db.Decimal(11, 8)
  mapAddress        String?
  mapEmbedUrl       String?
  mapStaticImageUrl String?
  
  lotSpecificAuctionDate DateTime?
  endDate           DateTime?
  secondAuctionDate DateTime?
  condition         String?
  dataAiHint        String?
  
  winnerId          String?      @map("winner_id")
  winningBidTermUrl String?
  allowInstallmentBids Boolean?  @default(false)
  
  isRelisted        Boolean      @default(false)
  relistCount       Int          @default(0)
  originalLotId     String?      @unique

  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relações
  bens              LotBens[]
  category          LotCategory? @relation(fields: [categoryId], references: [id])
  subcategory       Subcategory? @relation(fields: [subcategoryId], references: [id])
  seller            Seller?      @relation(fields: [sellerId], references: [id])
  auctioneer        Auctioneer?  @relation(fields: [auctioneerId], references: [id])
  city              City?        @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state             State?       @relation(fields: [stateId], references: [id])
  originalLot       Lot?         @relation("RelistedLot", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot       Lot?         @relation("RelistedLot")
  winner            User?        @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  bids              Bid[]
  userWins          UserWin[]
  maxBids           UserLotMaxBid[]
  lotStageDetails   LotAuctionStageDetails[]

  auction           Auction      @relation("AuctionLots", fields: [auctionId], references: [id], onDelete: Cascade)
}

// Join table for many-to-many relationship between Lot and Bem
model LotBens {
  lotId     String
  bemId     String
  
  // Relações
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bem       Bem      @relation(fields: [bemId], references: [id], onDelete: Cascade)
  
  @@id([lotId, bemId])
}

model LotAuctionStageDetails {
  id              String    @id @default(cuid())
  lotId           String
  stageId         String
  initialBid      Decimal?  @db.Decimal(15, 2)
  bidIncrement    Decimal?  @db.Decimal(10, 2)

  // Relações
  lot             Lot        @relation(fields: [lotId], references: [id], onDelete: Cascade)
  stage           AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)

  @@unique([lotId, stageId])
}


model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
  
  // Relações
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id                String       @id @default(cuid())
  lotId             String       @unique
  userId            String
  winningBidAmount  Decimal      @db.Decimal(15, 2)
  winDate           DateTime     @default(now())
  paymentStatus     PaymentStatus @default(PENDENTE)
  invoiceUrl        String?
  
  // Relações
  lot                Lot          @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user               User         @relation("UserWins", fields: [userId], references: [id], onDelete: Cascade)
  installments      InstallmentPayment[]
}

model InstallmentPayment {
  id                 String        @id @default(cuid())
  userWinId          String
  installmentNumber  Int
  amount             Decimal       @db.Decimal(15, 2)
  dueDate            DateTime
  status             PaymentStatus @default(PENDENTE)
  paymentDate        DateTime?
  paymentMethod      String?
  transactionId      String?

  // Relações
  userWin            UserWin       @relation(fields: [userWinId], references: [id], onDelete: Cascade)
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  // Relações
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model DirectSaleOffer {
  id                     String    @id @default(cuid())
  publicId               String?   @unique
  title                  String
  description            String?   @db.Text
  offerType              DirectSaleOfferType
  price                  Decimal?  @db.Decimal(15, 2)
  minimumOfferPrice      Decimal?  @db.Decimal(15, 2)
  status                 DirectSaleOfferStatus @default(ACTIVE)
  category               String // Denormalized category name
  categoryId             String
  sellerId               String
  locationCity           String?
  locationState          String?
  imageUrl               String?
  imageMediaId           String?
  dataAiHint             String?
  galleryImageUrls       Json?
  mediaItemIds           Json?
  itemsIncluded          Json?
  views                  Int?      @default(0)
  expiresAt              DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  
  // Relações
  seller                 Seller      @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  categoryRel            LotCategory @relation(fields: [categoryId], references: [id])
}

model DocumentType {
  id            String   @id @default(cuid())
  name          String
  description   String?
  isRequired    Boolean  @default(true)
  appliesTo     String? // e.g., "PHYSICAL,LEGAL"
  
  // Relações
  userDocuments UserDocument[]
}

model UserDocument {
  id              String              @id @default(cuid())
  userId          String
  documentTypeId  String
  status          UserDocumentStatus @default(PENDING_ANALYSIS)
  fileUrl         String
  fileName        String?
  rejectionReason String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  // Relações
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType        @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}


model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relação
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MediaItem {
  id                String    @id @default(cuid())
  fileName          String
  storagePath       String    @unique
  title             String?
  altText           String?
  caption           String?
  description       String?   @db.Text
  mimeType          String
  sizeBytes         Int?
  urlOriginal       String
  urlThumbnail      String?
  urlMedium         String?
  urlLarge          String?
  linkedLotIds      Json?
  dataAiHint        String?
  uploadedByUserId  String
  judicialProcessId String?
  uploadedAt        DateTime  @default(now())
  
  // Relações
  uploadedBy        User              @relation("MediaUploader", fields: [uploadedByUserId], references: [id])
  judicialProcess   JudicialProcess?  @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
}

model AuctionHabilitation {
  id        String   @id @default(cuid())
  userId    String
  auctionId String
  createdAt DateTime @default(now())

  // Relações
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction   Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@unique([userId, auctionId])
}


model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model VehicleMake {
    id    String @id @default(cuid())
    name  String @unique
    slug  String @unique
    
    // Relações
    models VehicleModel[]
}

model VehicleModel {
    id      String @id @default(cuid())
    name    String
    slug    String
    makeId  String
    
    // Relações
    make    VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)

    @@unique([makeId, name])
    @@unique([makeId, slug])
}


model PlatformSettings {
  id                             String                 @id @default("global")
  siteTitle                      String?
  siteTagline                    String?
  logoUrl                        String?
  faviconUrl                     String?
  galleryImageBasePath           String?
  storageProvider                String?                @default("local")
  firebaseStorageBucket          String?
  activeThemeName                String?
  themes                         Json?
  platformPublicIdMasks          Json?
  homepageSections               Json?
  mentalTriggerSettings          Json?
  sectionBadgeVisibility         Json?
  mapSettings                    Json?
  searchPaginationType           String?                @default("loadMore")
  searchItemsPerPage             Int?                   @default(12)
  searchLoadMoreCount            Int?                   @default(12)
  showCountdownOnLotDetail       Boolean?               @default(true)
  showCountdownOnCards           Boolean?               @default(true)
  showRelatedLotsOnLotDetail     Boolean?               @default(true)
  relatedLotsCount               Int?                   @default(5)
  defaultUrgencyTimerHours       Int?
  variableIncrementTable         Json?
  biddingSettings                Json?
  paymentGatewaySettings         Json?
  defaultListItemsPerPage        Int?                   @default(10)
  updatedAt                      DateTime?              @updatedAt
}

model Bem {
  id                         String  @id @default(cuid())
  publicId                   String? @unique
  title                      String
  description                String? @db.Text
  status                     BemStatus
  categoryId                 String?
  subcategoryId              String?
  judicialProcessId          String?
  sellerId                   String?
  evaluationValue            Decimal? @db.Decimal(15, 2)
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Decimal? @db.Decimal(10, 8)
  longitude                  Decimal? @db.Decimal(11, 8)
  // Vehicle specific
  plate                      String?
  make                       String?
  model                      String?
  version                    String?
  year                       Int?
  modelYear                  Int?
  mileage                    Int?
  color                      String?
  fuelType                   String?
  transmissionType           String?
  bodyType                   String?
  vin                        String?
  renavam                    String?
  enginePower                String?
  numberOfDoors              Int?
  vehicleOptions             String?
  detranStatus               String?
  debts                      String?
  runningCondition           String?
  bodyCondition              String?
  tiresCondition             String?
  hasKey                     Boolean?
  // Imóveis
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  area                       Decimal? @db.Decimal(15, 2)
  totalArea                  Decimal? @db.Decimal(15, 2)
  builtArea                  Decimal? @db.Decimal(15, 2)
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?
  infrastructure             String?
  condoDetails               String?
  improvements               String?
  topography                 String?
  liensAndEncumbrances       String?
  propertyDebts              String?
  unregisteredRecords        String?
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  // Eletrônicos
  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String?
  includedAccessories        String?
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String?
  // Eletrodomésticos
  applianceCapacity          String?
  voltage                    String?
  applianceType              String?
  additionalFunctions        String?
  // Máquinas e Equipamentos
  hoursUsed                  Int?
  engineType                 String?
  capacityOrPower            String?
  maintenanceHistory         String?
  installationLocation       String?
  compliesWithNR             String?
  operatingLicenses          String?
  // Semoventes (Livestock)
  breed                      String?
  age                        String?
  sex                        String?
  weight                     String?
  individualId               String?
  purpose                    String?
  sanitaryCondition          String?
  vaccinationStatus          String?
  lineage                    String?
  isPregnant                 Boolean?
  specialSkills              String?
  gtaDocument                String?
  breedRegistryDocument      String?
  // Timestamps
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  
  // Relações
  lots               LotBens[]
  category           LotCategory? @relation(fields: [categoryId], references: [id])
  subcategory        Subcategory? @relation(fields: [subcategoryId], references: [id])
  judicialProcess    JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller             Seller?      @relation(fields: [sellerId], references: [id])
}
