// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ==============================================================================
// 1. User and Auth Models
// ==============================================================================

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  fullName            String
  password            String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  roleId              String?
  sellerId            String?              @unique
  auctioneerId        String?              @unique
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType          @default(PHYSICAL)
  badges              String? // Comma-separated list of badge keys

  // Personal Info (mostly for PHYSICAL)
  cpf                 String?              @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?

  // Address
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?

  // Company Info (mostly for LEGAL)
  razaoSocial         String?
  cnpj                String?              @unique
  inscricaoEstadual   String?
  website             String?

  // Preferences
  optInMarketing      Boolean              @default(false)

  // Relationships
  role                Role?                  @relation(fields: [roleId], references: [id], onDelete: SetNull, map: "User_roleId_fkey")
  sellerProfile       Seller?                @relation("UserToSeller", fields: [sellerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  auctioneerProfile   Auctioneer?            @relation("UserToAuctioneer", fields: [auctioneerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  documents           UserDocument[]
  notifications       Notification[]
  mediaItems          MediaItem[] // Media uploaded by this user
  bids                Bid[]
  wins                UserWin[]
  reviews             Review[]
  questions           LotQuestion[]
  maxBids             UserLotMaxBid[]
  answeredQuestions   LotQuestion[]          @relation("AnsweredBy")
}

model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  users           User[]
  permissions     Permission[]
}

model Permission {
  id    String @id @default(cuid())
  name  String @unique
  roles Role[]
}

// Document types required for user habilitation
model DocumentType {
  id             String         @id @default(cuid())
  name           String         @unique
  description    String?
  isRequired     Boolean        @default(true)
  appliesTo      String // Changed from AccountType[] to String
  allowedFormats String // Changed from String[] to String
  displayOrder   Int            @default(0)
  userDocuments  UserDocument[]
}

// A document submitted by a user for a specific document type
model UserDocument {
  id              String             @id @default(cuid())
  userId          String
  documentTypeId  String
  fileUrl         String?
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String? // Could be a User.id of an admin
  rejectionReason String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType DocumentType @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)

  @@unique([userId, documentTypeId])
}


// ==============================================================================
// 2. Core Auction Models
// ==============================================================================

model Auction {
  id                             String        @id @default(cuid())
  publicId                       String        @unique
  title                          String
  description                    String?       @db.Text
  status                         AuctionStatus @default(RASCUNHO)
  auctionType                    AuctionType?
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json? // Array of stages with name, endDate, initialPrice
  city                           String?
  state                          String?
  imageUrl                       String?
  imageMediaId                   String?       @unique
  dataAiHint                     String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  visits                         Int           @default(0)
  initialOffer                   Float?
  isFeaturedOnMarketplace        Boolean       @default(false)
  marketplaceAnnouncementTitle   String?
  softCloseEnabled               Boolean       @default(false)
  softCloseMinutes               Int?          @default(2)
  automaticBiddingEnabled        Boolean       @default(false)
  silentBiddingEnabled           Boolean       @default(false)
  allowMultipleBidsPerUser       Boolean       @default(true)
  allowInstallmentBids           Boolean       @default(false)
  estimatedRevenue               Float?
  achievedRevenue                Float?        @default(0)
  totalHabilitatedUsers          Int?          @default(0)
  additionalTriggers             String? // Comma-separated list
  decrementAmount                Float? // For Dutch auctions
  decrementIntervalSeconds       Int? // For Dutch auctions
  floorPrice                     Float? // For Dutch auctions
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt

  // Relationships
  categoryId      String
  auctioneerId    String
  sellerId        String?
  judicialProcessId String?
  
  category      LotCategory       @relation(fields: [categoryId], references: [id])
  auctioneer    Auctioneer        @relation(fields: [auctioneerId], references: [id])
  seller        Seller?           @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  image         MediaItem?        @relation("AuctionImage", fields: [imageMediaId], references: [id], onDelete: SetNull)

  lots          Lot[]
  bids          Bid[]
  reviews       Review[]
  questions     LotQuestion[]
}

model Lot {
  id                String  @id @default(cuid())
  publicId          String  @unique
  auctionId         String
  number            String?
  title             String
  description       String? @db.Text
  price             Float   @default(0)
  initialPrice      Float?
  secondInitialPrice Float?
  bidIncrementStep  Float?
  status            LotStatus
  views             Int     @default(0)
  bidsCount         Int     @default(0)
  isFeatured        Boolean @default(false)
  isExclusive       Boolean @default(false)
  discountPercentage Float?
  additionalTriggers String? // Comma-separated list
  latitude          Float?
  longitude         Float?
  mapAddress        String?
  mapEmbedUrl       String?
  mapStaticImageUrl String?

  judicialProcessNumber String?
  courtDistrict         String?
  courtName             String?
  publicProcessUrl      String?
  propertyRegistrationNumber String?
  propertyLiens         String? @db.Text
  knownDebts            String? @db.Text
  additionalDocumentsInfo String? @db.Text

  reservePrice      Float?
  evaluationValue   Float?
  debtAmount        Float?
  itbiValue         Float?
  endDate           DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate DateTime?
  condition         String?
  dataAiHint        String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  categoryId         String
  subcategoryId      String?
  stateId            String?
  cityId             String?
  imageMediaId       String?           @unique
  winningBidTermUrl  String?

  auction       Auction          @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category      LotCategory      @relation(fields: [categoryId], references: [id])
  subcategory   Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  state         StateInfo?       @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city          CityInfo?        @relation(fields: [cityId], references: [id], onDelete: SetNull)
  image         MediaItem?       @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)

  bids          Bid[]
  wins          UserWin[]
  reviews       Review[]
  questions     LotQuestion[]
  maxBids       UserLotMaxBid[]
  bensOnLot     LotOnBem[]
}

model LotOnBem {
  lotId String
  bemId String
  assignedAt DateTime @default(now())
  assignedBy String // User ID

  lot  Lot @relation(fields: [lotId], references: [id])
  bem  Bem @relation(fields: [bemId], references: [id])
  
  @@id([lotId, bemId])
}


// ==============================================================================
// 3. Profiles & Entities
// ==============================================================================

model Auctioneer {
  id                     String   @id @default(cuid())
  publicId               String   @unique
  name                   String   @unique
  slug                   String   @unique
  registrationNumber     String?
  contactName            String?
  email                  String?
  phone                  String?
  address                String?
  city                   String?
  state                  String?
  zipCode                String?
  website                String?
  logoUrl                String?
  dataAiHintLogo         String?
  description            String?  @db.Text
  memberSince            DateTime?
  rating                 Float?
  auctionsConductedCount Int?     @default(0)
  totalValueSold         Float?   @default(0)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relationships
  userId               String?    @unique
  user                 User?      @relation("UserToAuctioneer", fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  logoMediaId          String?    @unique
  logo                 MediaItem? @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  auctions             Auction[]
}

model Seller {
  id                       String   @id @default(cuid())
  publicId                 String   @unique
  name                     String   @unique
  slug                     String   @unique
  isJudicial               Boolean  @default(false)
  contactName              String?
  email                    String?
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  logoUrl                  String?
  dataAiHintLogo           String?
  description              String?  @db.Text
  memberSince              DateTime?
  rating                   Float?
  activeLotsCount          Int?     @default(0)
  totalSalesValue          Float?   @default(0)
  auctionsFacilitatedCount Int?     @default(0)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  // Relationships
  userId              String?          @unique
  user                User?            @relation("UserToSeller", fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  logoMediaId         String?          @unique
  logo                MediaItem?       @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  judicialBranchId    String?          @unique
  judicialBranch      JudicialBranch?  @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  
  auctions            Auction[]
  directSaleOffers    DirectSaleOffer[]
  bens                Bem[]
  judicialProcesses   JudicialProcess[]
}

// ==============================================================================
// 4. Judicial Information Models
// ==============================================================================

model Court {
  id       String    @id @default(cuid())
  name     String    @unique
  slug     String    @unique
  stateUf  String
  website  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  districts JudicialDistrict[]
  processes JudicialProcess[]
}

model JudicialDistrict {
  id      String    @id @default(cuid())
  name    String
  slug    String    @unique
  courtId String
  stateId String
  zipCode String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  court     Court      @relation(fields: [courtId], references: [id])
  state     StateInfo  @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]
}

model JudicialBranch {
  id         String   @id @default(cuid())
  name       String
  slug       String   @unique
  districtId String
  contactName String?
  phone      String?
  email      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  district  JudicialDistrict @relation(fields: [districtId], references: [id])
  processes JudicialProcess[]
  seller    Seller?
}

model JudicialProcess {
  id             String   @id @default(cuid())
  publicId       String   @unique
  processNumber  String   @unique
  isElectronic   Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relationships
  courtId    String
  districtId String
  branchId   String
  sellerId   String?          @unique

  court          Court            @relation(fields: [courtId], references: [id])
  district       JudicialDistrict @relation(fields: [districtId], references: [id])
  branch         JudicialBranch   @relation(fields: [branchId], references: [id])
  seller         Seller?          @relation(fields: [sellerId], references: [id])
  parties        ProcessParty[]
  bens           Bem[]
  auctions       Auction[]
}

model ProcessParty {
  id             String         @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  
  @@unique([processId, name, partyType])
}

// Represents an asset (bem) that can be part of a lot
model Bem {
  id                       String        @id @default(cuid())
  publicId                 String        @unique
  title                    String
  description              String?       @db.Text
  status                   BemStatus
  evaluationValue          Float?
  imageUrl                 String?
  dataAiHint               String?
  locationCity             String?
  locationState            String?
  address                  String?
  latitude                 Float?
  longitude                Float?
  
  // Vehicle Specific
  plate                    String?
  make                     String?
  model                    String?
  version                  String?
  year                     Int?
  modelYear                Int?
  mileage                  Int?
  color                    String?
  fuelType                 String?
  transmissionType         String?
  bodyType                 String?
  vin                      String?       @unique
  renavam                  String?       @unique
  enginePower              String?
  numberOfDoors            Int?
  vehicleOptions           String?
  detranStatus             String?
  debts                    String?
  runningCondition         String?
  bodyCondition            String?
  tiresCondition           String?
  hasKey                   Boolean?
  
  // Real Estate Specific
  propertyRegistrationNumber String? @unique
  iptuNumber               String?   @unique
  isOccupied               Boolean?
  propertyType             String?
  area                     Float?
  bedrooms                 Int?
  bathrooms                Int?
  parkingSpaces            Int?
  amenities                String? // Comma-separated
  
  // ... other category-specific fields as strings/JSON
  
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  
  // Relationships
  categoryId               String
  subcategoryId            String?
  judicialProcessId        String?
  sellerId                 String?
  imageMediaId             String?       @unique
  
  category        LotCategory      @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller          Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  image           MediaItem?       @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  
  lotsOnBem       LotOnBem[]
}


// ==============================================================================
// 5. User Activity & Interaction Models
// ==============================================================================

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())
  
  lot     Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user    User @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String   @id @default(cuid())
  userId           String
  lotId            String   @unique
  winningBidAmount Float
  winDate          DateTime @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MediaItem {
  id                   String            @id @default(cuid())
  fileName             String
  storagePath          String?           @unique // Path in the storage bucket
  title                String?
  altText              String?
  caption              String?
  description          String?           @db.Text
  mimeType             String
  sizeBytes            Int
  dimensions           String? // "widthxheight"
  urlOriginal          String?           @db.Text
  urlThumbnail         String?           @db.Text
  urlMedium            String?           @db.Text
  urlLarge             String?           @db.Text
  dataAiHint           String?
  uploadedAt           DateTime          @default(now())
  uploadedBy           String?

  // Relationships
  userUploader         User?            @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)
  auctionImage         Auction?         @relation("AuctionImage")
  bemImage             Bem?             @relation("BemImage")
  lotImage             Lot?             @relation("LotImage")
  sellerLogo           Seller?          @relation("SellerLogo")
  auctioneerLogo       Auctioneer?      @relation("AuctioneerLogo")
  blogPostImage        BlogPost?        @relation("BlogPostImage")
  directSaleOfferImage DirectSaleOffer? @relation("DirectSaleOfferImage")
  categoryCoverImage   LotCategory?     @relation("CategoryCoverImage")
  categoryLogoImage    LotCategory?     @relation("CategoryLogoImage")
  categoryMegaMenuImage LotCategory?    @relation("CategoryMegaMenuImage")
  subcategoryAsIcon    Subcategory?     @relation("SubcategoryIcon")
}


model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int // e.g., 1-5
  comment         String?  @db.Text
  createdAt       DateTime @default(now())
  
  lot     Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                      String   @id @default(cuid())
  lotId                   String
  auctionId               String
  userId                  String
  userDisplayName         String
  questionText            String   @db.Text
  answerText              String?  @db.Text
  answeredAt              DateTime?
  answeredByUserId        String?
  isPublic                Boolean  @default(true)
  createdAt               DateTime @default(now())
  
  lot     Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  answeredByUser User?   @relation("AnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)
}

model UserLotMaxBid {
  id       String @id @default(cuid())
  userId   String
  lotId    String
  maxAmount Float
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lotId])
}


// ==============================================================================
// 6. Content & General Purpose Models
// ==============================================================================

model BlogPost {
  id              String   @id @default(cuid())
  publicId        String   @unique
  title           String
  slug            String   @unique
  content         String   @db.Text
  author          String
  publishedAt     DateTime?
  status          String   @default("DRAFT") // DRAFT, PUBLISHED
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  featuredImageId String?    @unique
  image           MediaItem? @relation("BlogPostImage", fields: [featuredImageId], references: [id], onDelete: SetNull)
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentTemplate {
  id        String   @id @default(cuid())
  name      String   @unique
  type      DocumentTemplateType
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// ==============================================================================
// 7. Taxonomy & Location Models
// ==============================================================================

model LotCategory {
  id                   String   @id @default(cuid())
  name                 String   @unique
  slug                 String   @unique
  description          String?
  hasSubcategories     Boolean  @default(false)
  itemCount            Int      @default(0)
  displayOrder         Int      @default(0)
  
  // For visual representation
  logoUrl              String?
  coverImageUrl        String?
  megaMenuImageUrl     String?
  dataAiHintLogo       String?
  dataAiHintCover      String?
  dataAiHintMegaMenu   String?

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relationships
  logoMediaId             String?          @unique
  coverImageMediaId       String?          @unique
  megaMenuImageMediaId    String?          @unique

  logo                 MediaItem?       @relation("CategoryLogoImage", fields: [logoMediaId], references: [id], onDelete: SetNull)
  coverImage           MediaItem?       @relation("CategoryCoverImage", fields: [coverImageMediaId], references: [id], onDelete: SetNull)
  megaMenuImage        MediaItem?       @relation("CategoryMegaMenuImage", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull)
  
  subcategories      Subcategory[]
  auctions           Auction[]
  lots               Lot[]
  directSaleOffers   DirectSaleOffer[]
}

model Subcategory {
  id             String    @id @default(cuid())
  name           String
  slug           String    @unique
  description    String?
  parentCategoryId String
  itemCount      Int       @default(0)
  displayOrder   Int       @default(0)
  iconUrl        String?
  dataAiHintIcon String?
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relationships
  iconMediaId    String?    @unique
  icon           MediaItem? @relation("SubcategoryIcon", fields: [iconMediaId], references: [id], onDelete: SetNull)
  parentCategory LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots           Lot[]
}

model StateInfo {
  id      String   @id @default(cuid())
  name    String   @unique
  uf      String   @unique
  slug    String   @unique
  cityCount Int    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  lots    Lot[]
  cities  CityInfo[]
  judicialDistricts JudicialDistrict[]
}

model CityInfo {
  id      String   @id @default(cuid())
  name    String
  slug    String
  stateId String
  stateUf String
  ibgeCode String?
  lotCount Int     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  state   StateInfo @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots    Lot[]
}


// ==============================================================================
// 8. Platform Configuration
// ==============================================================================

model PlatformSettings {
  id                      String  @id @default("global")
  siteTitle               String?
  siteTagline             String?
  galleryImageBasePath    String?
  storageProvider         String? @default("local") // "local" or "firebase"
  firebaseStorageBucket   String?
  activeThemeName         String?
  themes                  Json? // Array of Theme objects
  platformPublicIdMasks   Json? // Object with masks for entities
  homepageSections        Json? // Array of HomepageSectionConfig objects
  mentalTriggerSettings   Json?
  sectionBadgeVisibility  Json?
  mapSettings             Json?
  biddingSettings         Json?
  searchPaginationType    String? @default("loadMore")
  searchItemsPerPage      Int?    @default(12)
  searchLoadMoreCount     Int?    @default(12)
  showCountdownOnLotDetail Boolean? @default(true)
  showCountdownOnCards    Boolean? @default(true)
  showRelatedLotsOnLotDetail Boolean? @default(true)
  relatedLotsCount        Int?    @default(5)
  defaultListItemsPerPage Int?    @default(10)
  variableIncrementTable  Json? // Array of VariableIncrementRule objects
  
  updatedAt               DateTime @updatedAt
}


// ==============================================================================
// 9. Direct Sales Models (for "Buy Now" or "Make Offer" functionality)
// ==============================================================================

model DirectSaleOffer {
  id                   String                @id @default(cuid())
  publicId             String                @unique
  title                String
  description          String                @db.Text
  offerType            DirectSaleOfferType
  status               DirectSaleOfferStatus
  price                Float?
  minimumOfferPrice    Float?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  dataAiHint           String?
  galleryImageUrls     String? // Comma-separated
  itemsIncluded        String? // Comma-separated
  tags                 String? // Comma-separated
  views                Int                   @default(0)
  proposalsCount       Int                   @default(0)
  expiresAt            DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  // Relationships
  categoryId           String
  category             LotCategory           @relation(fields: [categoryId], references: [id])
  sellerId             String
  seller               Seller                @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  imageMediaId         String?               @unique
  image                MediaItem?            @relation("DirectSaleOfferImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
}


// ==============================================================================
// Enums
// ==============================================================================
enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
  SUSPENSO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ACTIVE
  SOLD
  EXPIRED
  PENDING_APPROVAL
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}
