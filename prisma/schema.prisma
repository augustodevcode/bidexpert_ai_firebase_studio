// prisma/schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// ENUMS
// =================================================================
enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

// =================================================================
// MODELS
// =================================================================

model User {
  id                  String   @id @default(uuid())
  email               String   @unique
  password            String?
  fullName            String?
  habilitationStatus  String   @default("PENDING_DOCUMENTS")
  accountType         String   @default("PHYSICAL")
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  roles               UsersOnRoles[]
  documents           UserDocument[]
  bids                Bid[]
  wins                Lot[]           @relation("Winner")
  maxBids             UserLotMaxBid[]
  uploadedMedia       MediaItem[]     @relation("UploadedBy")
  answeredQuestions   LotQuestion[]   @relation("AnsweredByUser")
  questions           LotQuestion[]   @relation("AskedByUser")
  notifications       Notification[]
  habilitations       AuctionHabilitation[]

  seller              Seller?
}

model Role {
  id             String   @id @default(uuid())
  name           String   @unique
  nameNormalized String   @unique
  description    String?  @db.Text
  permissions    Json
  users          UsersOnRoles[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}


model State {
  id              String             @id @default(uuid())
  name            String
  uf              String             @unique
  slug            String?            @unique
  cityCount       Int?               @default(0)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  cities          City[]
  courts          Court[]
  judicialDistricts JudicialDistrict[]
  auctions        Auction[]
  lots            Lot[]
}

model City {
  id        String    @id @default(uuid())
  name      String
  slug      String?
  state     State     @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId   String
  stateUf   String?
  ibgeCode  String?   @unique
  lotCount  Int?      @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  auctions  Auction[]
  lots      Lot[]
}

model Court {
  id                String             @id @default(uuid())
  name              String
  slug              String?
  stateUf           String?
  website           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialDistrict {
  id                String             @id @default(uuid())
  name              String
  slug              String?            @unique
  court             Court?             @relation(fields: [courtId], references: [id])
  courtId           String?
  state             State?             @relation(fields: [stateId], references: [id])
  stateId           String?
  zipCode           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialBranch {
  id                String             @id @default(uuid())
  name              String
  slug              String?            @unique
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  sellers           Seller[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}


model Seller {
  id                String             @id @default(uuid())
  publicId          String             @unique
  slug              String             @unique
  name              String             @unique
  contactName       String?
  email             String?
  phone             String?
  address           String?
  city              String?
  state             String?
  zipCode           String?
  website           String?
  logoUrl           String?
  logoMediaId       String?
  dataAiHintLogo    String?
  description       String?            @db.Text
  isJudicial        Boolean            @default(false)
  user              User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId            String?            @unique
  judicialBranch    JudicialBranch?    @relation(fields: [judicialBranchId], references: [id])
  judicialBranchId  String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  auctions          Auction[]
  bens              Bem[]
  judicialProcesses JudicialProcess[]
  directSaleOffers  DirectSaleOffer[]
  lots              Lot[]
}

model Auctioneer {
  id                  String    @id @default(uuid())
  publicId            String    @unique
  slug                String    @unique
  name                String
  registrationNumber  String?
  contactName         String?
  email               String?
  phone               String?
  address             String?
  city                String?
  state               String?
  zipCode             String?
  website             String?
  logoUrl             String?
  logoMediaId         String?
  dataAiHintLogo      String?
  description         String?   @db.Text
  userId              String?   @unique
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  auctions            Auction[]
  lots                Lot[]
}

model JudicialProcess {
  id            String          @id @default(uuid())
  publicId      String?         @unique
  processNumber String
  isElectronic  Boolean         @default(true)
  court         Court?          @relation(fields: [courtId], references: [id])
  courtId       String?
  district      JudicialDistrict? @relation(fields: [districtId], references: [id])
  districtId    String?
  branch        JudicialBranch? @relation(fields: [branchId], references: [id])
  branchId      String?
  seller        Seller?         @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  parties       JudicialParty[]
  bens          Bem[]
  mediaItems    MediaItem[]
  auctions      Auction[]
}

model JudicialParty {
  id             String          @id @default(uuid())
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId      String
  name           String
  documentNumber String?
  partyType      String
}

model LotCategory {
  id                   String            @id @default(uuid())
  name                 String
  slug                 String            @unique
  description          String?           @db.Text
  hasSubcategories     Boolean           @default(false)
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  subcategories        Subcategory[]
  bens                 Bem[]
  lots                 Lot[]
  auctions             Auction[]
  directSaleOffers     DirectSaleOffer[]
}

model Subcategory {
  id               String      @id @default(uuid())
  name             String
  slug             String?
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  parentCategoryId String
  description      String?     @db.Text
  displayOrder     Int         @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  bens             Bem[]
  lots             Lot[]
}

model Bem {
  id              String   @id @default(uuid())
  publicId        String   @unique @default(uuid())
  title           String
  description     String?  @db.Text
  status          String   @default("DISPONIVEL")
  categoryId      String
  category        LotCategory @relation(fields: [categoryId], references: [id])
  subcategoryId   String?
  subcategory     Subcategory? @relation(fields: [subcategoryId], references: [id])
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId String?
  seller          Seller?  @relation(fields: [sellerId], references: [id])
  sellerId        String?
  imageUrl        String?
  imageMediaId    String?
  galleryImageUrls Json?
  mediaItemIds    Json?
  dataAiHint      String?
  locationCity    String?
  locationState   String?
  address         String?
  latitude        Decimal? @db.Decimal(10, 8)
  longitude       Decimal? @db.Decimal(11, 8)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lots            LotBens[]
  // Vehicle specific
  plate           String?
  make            String?
  model           String?
  version         String?
  year            Int?
  modelYear       Int?
  mileage         Int?
  color           String?
  fuelType        String?
  transmissionType String?
  bodyType        String?
  vin             String?
  renavam         String?
  enginePower     String?
  numberOfDoors   Int?
  vehicleOptions  String?
  detranStatus    String?
  debts           String?
  runningCondition String?
  bodyCondition   String?
  tiresCondition  String?
  hasKey          Boolean?

  // Imóveis
  propertyRegistrationNumber String?
  iptuNumber                  String?
  isOccupied                  Boolean?
  totalArea                   Decimal?
  builtArea                   Decimal?
  bedrooms                    Int?
  suites                      Int?
  bathrooms                   Int?
  parkingSpaces               Int?
  constructionType            String?
  finishes                    String?
  infrastructure              String?
  condoDetails                String?
  improvements                String?
  topography                  String?
  liensAndEncumbrances        String?
  propertyDebts               String?
  unregisteredRecords         String?
  hasHabiteSe                 Boolean?
  zoningRestrictions          String?
  amenities                   Json?

  // ... outros campos específicos da categoria
}

model DirectSaleOffer {
  id                   String      @id @default(uuid())
  publicId             String      @unique @default(uuid())
  title                String
  description          String?     @db.Text
  offerType            String?
  price                Decimal?
  minimumOfferPrice    Decimal?
  status               String      @default("ACTIVE")
  category             LotCategory @relation(fields: [categoryId], references: [id])
  categoryId           String
  seller               Seller      @relation(fields: [sellerId], references: [id])
  sellerId             String
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int         @default(0)
  expiresAt            DateTime?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
}

model LotBens {
  lot   Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId String
  bem   Bem  @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId String

  @@id([lotId, bemId])
}


model Auction {
  id                               String        @id @default(uuid())
  publicId                         String        @unique
  slug                             String        @unique
  title                            String
  description                      String?       @db.Text
  status                           String        @default("RASCUNHO")
  auctionDate                      DateTime?
  endDate                          DateTime?
  categoryId                       String?
  category                         LotCategory?  @relation(fields: [categoryId], references: [id])
  auctioneerId                     String?
  auctioneer                       Auctioneer?   @relation(fields: [auctioneerId], references: [id])
  sellerId                         String?
  seller                           Seller?       @relation(fields: [sellerId], references: [id])
  imageUrl                         String?
  imageMediaId                     String?
  documentsUrl                     String?
  visits                           Int           @default(0)
  initialOffer                     Decimal?
  isFavorite                       Boolean       @default(false)
  dataAiHint                       String?
  // Settings
  auctionType                      AuctionType?
  auctionMethod                    AuctionMethod?
  participation                    AuctionParticipation?
  onlineUrl                        String?
  address                          String?
  zipCode                          String?
  evaluationReportUrl              String?
  auctionCertificateUrl            String?
  sellingBranch                    String?
  automaticBiddingEnabled          Boolean       @default(false)
  silentBiddingEnabled             Boolean       @default(false)
  allowMultipleBidsPerUser         Boolean       @default(true)
  allowInstallmentBids             Boolean       @default(true)
  softCloseEnabled                 Boolean       @default(false)
  softCloseMinutes                 Int?          @default(2)
  estimatedRevenue                 Decimal?
  achievedRevenue                  Decimal?
  totalHabilitatedUsers            Int?
  isFeaturedOnMarketplace          Boolean       @default(false)
  marketplaceAnnouncementTitle     String?
  additionalTriggers               Json?
  decrementAmount                  Decimal?
  decrementIntervalSeconds         Int?
  floorPrice                       Decimal?
  autoRelistSettings               Json?
  // Foreign Keys
  judicialProcessId                String?
  judicialProcess                  JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  courtId                          String?
  court                            Court?           @relation(fields: [courtId], references: [id], onDelete: SetNull)
  districtId                       String?
  district                         JudicialDistrict? @relation(fields: [districtId], references: [id], onDelete: SetNull)
  branchId                         String?
  branch                           JudicialBranch?  @relation(fields: [branchId], references: [id], onDelete: SetNull)
  cityId                           String?
  city                             City?            @relation(fields: [cityId], references: [id])
  stateId                          String?
  state                            State?           @relation(fields: [stateId], references: [id])
  // Timestamps
  createdAt                        DateTime      @default(now())
  updatedAt                        DateTime      @updatedAt
  // Relations
  lots                             Lot[]
  bids                             Bid[]
  auctionStages                    AuctionStage[]
  habilitations                    AuctionHabilitation[]
  questions                        LotQuestion[]
}

model AuctionStage {
  id             String    @id @default(uuid())
  auction        Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId      String
  name           String
  startDate      DateTime
  endDate        DateTime
  initialPrice   Decimal?
  statusText     String?
  lotStageDetails LotAuctionStageDetails[]
}

model LotAuctionStageDetails {
  lot             Lot          @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId           String
  auctionStage    AuctionStage @relation(fields: [auctionStageId], references: [id], onDelete: Cascade)
  auctionStageId  String
  initialBid      Decimal?     @db.Decimal(15, 2) /// Valor do lance inicial do lote especificamente nesta praça
  bidIncrement    Decimal?     @db.Decimal(10, 2) /// Valor do incremento do lote especificamente nesta praça
  evaluationValue Decimal?     /// Valor de avaliação específico para esta praça
  reservePrice    Decimal?     /// Valor de reserva (mínimo para venda) específico para esta praça

  @@id([lotId, auctionStageId])
}


model Lot {
  id                   String        @id @default(uuid())
  publicId             String        @unique
  auction              Auction       @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId            String
  slug                 String?
  number               String?
  title                String
  description          String?       @db.Text
  price                Decimal       @db.Decimal(15, 2)
  bidIncrementStep     Decimal?      @db.Decimal(10, 2)
  status               String        @default("EM_BREVE")
  bidsCount            Int           @default(0)
  views                Int           @default(0)
  isFeatured           Boolean       @default(false)
  isExclusive          Boolean       @default(false)
  discountPercentage   Int?
  additionalTriggers   Json?
  imageUrl             String?
  imageMediaId         String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  inheritedMediaFromBemId String?
  type                 String
  categoryId           String?
  category             LotCategory?  @relation(fields: [categoryId], references: [id])
  subcategoryId        String?
  subcategory          Subcategory?  @relation(fields: [subcategoryId], references: [id])
  auctionName          String?
  seller               Seller?       @relation(fields: [sellerId], references: [id])
  sellerId             String?
  auctioneer           Auctioneer?   @relation(fields: [auctioneerId], references: [id])
  auctioneerId         String?
  city                 City?         @relation(fields: [cityId], references: [id])
  cityId               String?
  state                State?        @relation(fields: [stateId], references: [id])
  stateId              String?
  cityName             String?
  stateUf              String?
  latitude             Decimal?      @db.Decimal(10, 8)
  longitude            Decimal?      @db.Decimal(11, 8)
  mapAddress           String?
  mapEmbedUrl          String?
  mapStaticImageUrl    String?
  endDate              DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate    DateTime?
  condition            String?
  dataAiHint           String?
  winner               User?         @relation("Winner", fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId             String?
  winningBidTermUrl    String?
  allowInstallmentBids Boolean       @default(false)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  bens                 LotBens[]
  bids                 Bid[]
  maxBids              UserLotMaxBid[]
  wins                 UserWin[]
  reviews              Review[]
  questions            LotQuestion[]
  lotStageDetails      LotAuctionStageDetails[]
}

model MediaItem {
  id                String           @id @default(uuid())
  fileName          String
  storagePath       String
  title             String?
  altText           String?
  caption           String?
  description       String?          @db.Text
  mimeType          String
  sizeBytes         Int
  urlOriginal       String
  urlThumbnail      String?
  urlMedium         String?
  urlLarge          String?
  linkedLotIds      Json?
  dataAiHint        String?
  uploadedBy        User             @relation("UploadedBy", fields: [uploadedByUserId], references: [id])
  uploadedByUserId  String
  uploadedAt        DateTime         @default(now())
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId String?
}

model UserDocument {
  id              String       @id @default(uuid())
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  documentType    DocumentType @relation(fields: [documentTypeId], references: [id])
  documentTypeId  String
  status          String       @default("PENDING")
  fileUrl         String
  fileName        String?
  rejectionReason String?      @db.Text
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id          String         @id @default(uuid())
  name        String
  description String?
  isRequired  Boolean        @default(true)
  appliesTo   String?        /// Comma-separated: PHYSICAL,LEGAL,ALL,PROCESS
  userDocs    UserDocument[]
}


model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Bid {
  id            String   @id @default(uuid())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId      String
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
}

model UserWin {
  id               String   @id @default(uuid())
  lot              Lot      @relation(fields: [lotId], references: [id])
  lotId            String   @unique
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  winningBidAmount Decimal  @db.Decimal(15, 2)
  winDate          DateTime
  paymentStatus    String
  invoiceUrl       String?
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model Review {
  id              String   @id @default(uuid())
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId           String
  userDisplayName String
  userId          String
  rating          Int
  comment         String   @db.Text
  createdAt       DateTime @default(now())
}

model ContactMessage {
  id      String   @id @default(uuid())
  name    String
  email   String
  subject String?
  message String   @db.Text
  isRead  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentTemplate {
  id        String   @id @default(uuid())
  name      String
  type      String
  content   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlatformSettings {
  id                            String   @id @default("global")
  siteTitle                     String?
  siteTagline                   String?
  logoUrl                       String?
  faviconUrl                    String?
  galleryImageBasePath          String?
  storageProvider               String?  @default("local")
  firebaseStorageBucket         String?
  activeThemeName               String?
  themes                        Json?
  platformPublicIdMasks         Json?
  homepageSections              Json?
  mentalTriggerSettings         Json?
  sectionBadgeVisibility        Json?
  mapSettings                   Json?
  searchPaginationType          String?  @default("loadMore")
  searchItemsPerPage            Int?     @default(12)
  searchLoadMoreCount           Int?     @default(12)
  showCountdownOnLotDetail      Boolean? @default(true)
  showCountdownOnCards          Boolean? @default(true)
  showRelatedLotsOnLotDetail    Boolean? @default(true)
  relatedLotsCount              Int?     @default(5)
  defaultUrgencyTimerHours      Int?
  variableIncrementTable        Json?
  biddingSettings               Json?
  paymentGatewaySettings        Json?    // Adicionado
  defaultListItemsPerPage       Int?     @default(10)
  updatedAt                     DateTime @updatedAt
}

model AuctionHabilitation {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId String
  createdAt DateTime @default(now())

  @@id([userId, auctionId])
}

model LotQuestion {
  id                        String   @id @default(uuid())
  lot                       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId                     String
  auction                   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                 String
  user                      User     @relation("AskedByUser", fields: [userId], references: [id])
  userId                    String
  userDisplayName           String
  questionText              String   @db.Text
  answerText                String?  @db.Text
  answeredByUser            User?    @relation("AnsweredByUser", fields: [answeredByUserId], references: [id])
  answeredByUserId          String?
  answeredByUserDisplayName String?
  isPublic                  Boolean  @default(true)
  createdAt                 DateTime @default(now())
  answeredAt                DateTime?
}
