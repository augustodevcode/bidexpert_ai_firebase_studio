// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ==============================================================================
// 1. Core User, Auth, and Permission Models
// ==============================================================================

model User {
  id                  String         @id @default(cuid())
  fullName            String
  email               String         @unique
  password            String
  accountType         AccountType?
  cpf                 String?
  dateOfBirth         DateTime?
  razaoSocial         String?
  cnpj                String?        @unique
  inscricaoEstadual   String?
  website             String?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  optInMarketing      Boolean?       @default(false)
  habilitationStatus  UserHabilitationStatus? @default(PENDING_DOCUMENTS)
  status              UserStatus?    @default(ACTIVE)
  badges              String?
  dataAiHint          String?
  avatarUrl           String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  // Relationships
  roleId              String?
  role                Role?                  @relation(fields: [roleId], references: [id], onDelete: SetNull)
  sellerProfile       Seller?              
  auctioneerProfile   Auctioneer?          
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  maxBids             UserLotMaxBid[]
  notifications       Notification[]
  reviews             Review[]
  questions           LotQuestion[]
  answers             LotQuestion[]          @relation("AnsweredBy")
  uploadedMedia       MediaItem[]
  blogPosts           BlogPost[]
  contactMessages     ContactMessage[]

  @@index([email])
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}


model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  permissions     Permission[] 
  users           User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  roles       Role[]
}

// ==============================================================================
// 2. User Document & Habilitation Models
// ==============================================================================

model UserDocument {
  id                String             @id @default(cuid())
  userId            String
  documentTypeId    String
  fileUrl           String
  fileName          String
  status            UserDocumentStatus @default(SUBMITTED)
  uploadDate        DateTime           @default(now())
  analysisDate      DateTime?
  analystId         String?
  rejectionReason   String?

  // Relationships
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType DocumentType @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id             String         @id @default(cuid())
  name           String         @unique
  description    String?
  isRequired     Boolean        @default(false)
  appliesTo      String?        // e.g., "PHYSICAL,LEGAL"
  allowedFormats String?        // e.g., "pdf,jpg,png"
  displayOrder   Int            @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  // Relationships
  userDocuments UserDocument[]
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}


// ==============================================================================
// 3. Auction, Lot, and Bidding Models
// ==============================================================================

model Auction {
  id                             String                @id @default(cuid())
  publicId                       String                @unique
  title                          String
  description                    String?               @db.Text
  status                         AuctionStatus         @default(RASCUNHO)
  auctionType                    AuctionType?
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json                  @default("[]") // JSON array for stages
  city                           String?
  state                          String?
  imageUrl                       String?
  imageMediaId                   String?               @unique
  dataAiHint                     String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  visits                         Int?                  @default(0)
  initialOffer                   Float?                @default(0)
  bidsCount                      Int?                  @default(0)
  sellingBranch                  String?
  isFavorite                     Boolean?              @default(false)
  automaticBiddingEnabled        Boolean?              @default(false)
  softCloseEnabled               Boolean?              @default(false)
  softCloseMinutes               Int?
  silentBiddingEnabled           Boolean?              @default(false)
  allowMultipleBidsPerUser       Boolean?              @default(true)
  allowInstallmentBids           Boolean?              @default(false)
  estimatedRevenue               Float?
  achievedRevenue                Float?                @default(0)
  totalHabilitatedUsers          Int?                  @default(0)
  isFeaturedOnMarketplace        Boolean?              @default(false)
  marketplaceAnnouncementTitle   String?
  additionalTriggers             String?
  decrementAmount                Float? // For Dutch auctions
  decrementIntervalSeconds       Int?   // For Dutch auctions
  floorPrice                     Float? // For Dutch auctions
  createdAt                      DateTime              @default(now())
  updatedAt                      DateTime              @updatedAt

  // Relationships
  categoryId        String
  auctioneerId      String
  sellerId          String?
  judicialProcessId String?               @unique
  
  lots              Lot[]
  bids              Bid[]
  
  category          LotCategory       @relation(fields: [categoryId], references: [id])
  auctioneer        Auctioneer        @relation(fields: [auctioneerId], references: [id])
  seller            Seller?           @relation(fields: [sellerId], references: [id])
  judicialProcess   JudicialProcess?  @relation(fields: [judicialProcessId], references: [id])
  image             MediaItem?        @relation("AuctionImage", fields: [imageMediaId], references: [id], onDelete: SetNull)

  @@index([status])
  @@index([auctionDate])
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO_PARA_LANCES
  ABERTO // Legacy or alternative to ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH // Dutch auction type
  SILENT // Sealed-bid auction type
}

model Lot {
  id                           String       @id @default(cuid())
  publicId                     String       @unique
  auctionId                    String
  number                       String?
  title                        String
  description                  String?      @db.Text
  price                        Float
  initialPrice                 Float?
  secondInitialPrice           Float?
  bidIncrementStep             Float?
  status                       LotStatus    @default(EM_BREVE)
  stateId                      String?
  cityId                       String?
  cityName                     String?      // Denormalized
  stateUf                      String?      // Denormalized
  categoryId                   String
  subcategoryId                String?
  views                        Int?         @default(0)
  bidsCount                    Int?         @default(0)
  isFeatured                   Boolean?     @default(false)
  isExclusive                  Boolean?     @default(false)
  discountPercentage           Float?
  additionalTriggers           String?
  imageUrl                     String?
  imageMediaId                 String?      @unique
  galleryImageUrls             Json?        @default("[]")
  mediaItemIds                 Json?        @default("[]")
  bemIds                       Json?        @default("[]")
  endDate                      DateTime?
  lotSpecificAuctionDate       DateTime?
  secondAuctionDate            DateTime?
  winningBidTermUrl            String?
  latitude                     Float?
  longitude                    Float?
  mapAddress                   String?
  mapEmbedUrl                  String?      @db.Text
  mapStaticImageUrl            String?
  judicialProcessNumber        String?
  courtDistrict                String?
  courtName                    String?
  publicProcessUrl             String?
  propertyRegistrationNumber   String?
  propertyLiens                String?      @db.Text
  knownDebts                   String?      @db.Text
  additionalDocumentsInfo      String?      @db.Text
  reservePrice                 Float?
  evaluationValue              Float?
  debtAmount                   Float?
  itbiValue                    Float?
  condition                    String?
  dataAiHint                   String?
  createdAt                    DateTime     @default(now())
  updatedAt                    DateTime     @updatedAt

  // Vehicle specific
  year                Int?
  make                String?
  model               String?
  series              String?
  stockNumber         String?
  sellingBranch       String?
  vin                 String?
  vinStatus           String?
  lossType            String?
  primaryDamage       String?
  titleInfo           String?
  titleBrand          String?
  startCode           String?
  hasKey              Boolean?
  odometer            String?
  airbagsStatus       String?
  bodyStyle           String?
  engineDetails       String?
  transmissionType    String?
  driveLineType       String?
  fuelType            String?
  cylinders           String?
  restraintSystem     String?
  exteriorInteriorColor String?
  options             String?
  manufacturedIn      String?
  vehicleClass        String?
  vehicleLocationInBranch String?
  laneRunNumber       String?
  aisleStall          String?
  actualCashValue     String?
  estimatedRepairCost String?

  // Relationships
  auction       Auction          @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category      LotCategory      @relation(fields: [categoryId], references: [id])
  subcategory   Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  state         StateInfo?       @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city          CityInfo?        @relation(fields: [cityId], references: [id], onDelete: SetNull)
  image         MediaItem?       @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  bids          Bid[]
  wins          UserWin[]
  maxBids       UserLotMaxBid[]
  reviews       Review[]
  questions     LotQuestion[]

  @@index([auctionId])
  @@index([status])
  @@index([endDate])
}


enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

model Bid {
  id             String   @id @default(cuid())
  lotId          String
  auctionId      String
  bidderId       String
  bidderDisplay  String // To avoid joining user table just for name
  amount         Float
  timestamp      DateTime @default(now())

  // Relationships
  lot     Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder  User   @relation(fields: [bidderId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([bidderId])
}

model UserWin {
  id                String        @id @default(cuid())
  userId            String
  lotId             String        @unique
  winningBidAmount  Float
  winDate           DateTime      @default(now())
  paymentStatus     PaymentStatus @default(PENDENTE)
  invoiceUrl        String?
  retrievalStatus   String?
  retrievalCode     String?       @unique

  // Relationships
  user User @relation(fields: [userId], references: [id])
  lot  Lot  @relation(fields: [lotId], references: [id])
  
  @@index([userId])
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

// ==============================================================================
// 4. Seller and Auctioneer Profiles
// ==============================================================================

model Seller {
  id                         String   @id @default(cuid())
  publicId                   String   @unique
  name                       String
  slug                       String   @unique
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  logoUrl                    String?
  logoMediaId                String?  @unique
  dataAiHintLogo             String?
  description                String?  @db.Text
  isJudicial                 Boolean  @default(false)
  judicialBranchId           String?  @unique
  memberSince                DateTime?
  rating                     Float?
  activeLotsCount            Int?
  totalSalesValue            Float?
  auctionsFacilitatedCount   Int?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  // Relationships
  userId              String?          @unique
  user                User?            @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  logo                MediaItem?       @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  auctions            Auction[]
  judicialProcess     JudicialProcess?
  bens                Bem[]
  directSaleOffers    DirectSaleOffer[]
}

model Auctioneer {
  id                         String    @id @default(cuid())
  publicId                   String    @unique
  name                       String
  slug                       String    @unique
  registrationNumber         String?
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  logoUrl                    String?
  logoMediaId                String?   @unique
  dataAiHintLogo             String?
  description                String?   @db.Text
  memberSince                DateTime?
  rating                     Float?
  auctionsConductedCount     Int?
  totalValueSold             Float?
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt

  // Relationships
  userId   String?    @unique
  user     User?      @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  logo     MediaItem? @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  auctions Auction[]
}

// ==============================================================================
// 5. Category and Geographic Models
// ==============================================================================

model LotCategory {
  id                 String       @id @default(cuid())
  name               String       @unique
  slug               String       @unique
  description        String?      @db.Text
  hasSubcategories   Boolean      @default(false)
  itemCount          Int?         @default(0)
  logoUrl            String?
  coverImageUrl      String?
  megaMenuImageUrl   String?
  dataAiHintLogo     String?
  dataAiHintCover    String?
  dataAiHintMegaMenu String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  // Relationships
  lots                 Lot[]
  bens                 Bem[]
  subcategories      Subcategory[]
  directSaleOffers     DirectSaleOffer[]
}


model Subcategory {
  id                       String       @id @default(cuid())
  name                     String
  slug                     String       @unique
  description              String?
  displayOrder             Int          @default(0)
  itemCount                Int?         @default(0)
  parentCategoryId         String
  iconUrl                  String?
  iconMediaId              String?      @unique
  dataAiHintIcon           String?
  createdAt                DateTime     @default(now())
  updatedAt                DateTime     @updatedAt
  
  // Relationships
  parentCategory LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots           Lot[]
  bens           Bem[]
  icon           MediaItem?  @relation("SubcategoryIcon", fields: [iconMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

// ==============================================================================
// 6. Judicial Context Models
// ==============================================================================

model Court {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  stateUf   String
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  districts JudicialDistrict[]
  state     StateInfo          @relation(fields: [stateUf], references: [uf])
}

model JudicialDistrict {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  courtId   String
  stateId   String
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  court     Court            @relation(fields: [courtId], references: [id])
  state     StateInfo        @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]
}

model JudicialBranch {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  districtId  String
  contactName String?
  phone       String?
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  district          JudicialDistrict   @relation(fields: [districtId], references: [id], onDelete: Cascade)
  processes         JudicialProcess[]
  judicialSellers   Seller[]
}

model JudicialProcess {
  id              String         @id @default(cuid())
  publicId        String         @unique @default(cuid())
  processNumber   String         @unique
  isElectronic    Boolean        @default(true)
  courtId         String
  districtId      String
  branchId        String
  sellerId        String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relationships
  court           Court            @relation(fields: [courtId], references: [id])
  district        JudicialDistrict @relation(fields: [districtId], references: [id])
  branch          JudicialBranch   @relation(fields: [branchId], references: [id])
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  parties         ProcessParty[]
  bens            Bem[]
  auction         Auction?
}

model ProcessParty {
  id             String         @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType

  // Relationships
  process JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

// ==============================================================================
// 7. Asset ("Bem") Model
// ==============================================================================

model Bem {
  id            String    @id @default(cuid())
  publicId      String    @unique
  title         String
  description   String?   @db.Text
  status        BemStatus @default(DISPONIVEL)
  categoryId    String
  subcategoryId String?
  judicialProcessId String?
  sellerId      String?
  evaluationValue Float?
  imageUrl      String?
  imageMediaId  String?   @unique
  galleryImageUrls Json?
  mediaItemIds  Json?
  dataAiHint    String?
  locationCity  String?
  locationState String?
  address       String?
  latitude      Float?
  longitude     Float?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Vehicle-specific fields
  plate                     String?
  make                      String?
  model                     String?
  version                   String?
  year                      Int?
  modelYear                 Int?
  mileage                   Int?
  color                     String?
  fuelType                  String?
  transmissionType          String?
  bodyType                  String?
  vin                       String?
  renavam                   String?
  enginePower               String?
  numberOfDoors             Int?
  vehicleOptions            String?
  detranStatus              String?
  debts                     String?
  runningCondition          String?
  bodyCondition             String?
  tiresCondition            String?
  hasKey                    Boolean?

  // Real estate specific fields
  propertyRegistrationNumber String?
  iptuNumber                String?
  isOccupied                Boolean?
  totalArea                 Float?
  builtArea                 Float?
  bedrooms                  Int?
  suites                    Int?
  bathrooms                 Int?
  parkingSpaces             Int?
  constructionType          String?
  finishes                  String?
  infrastructure            String?
  condoDetails              String?
  improvements              String?
  topography                String?
  liensAndEncumbrances      String? @db.Text
  propertyDebts             String?
  unregisteredRecords       String?
  hasHabiteSe               Boolean?
  zoningRestrictions        String?
  amenities                 Json?

  // Electronics specific fields
  brand                     String?
  serialNumber              String?
  itemCondition             String?
  specifications            String? @db.Text
  includedAccessories       String?
  batteryCondition          String?
  hasInvoice                Boolean?
  hasWarranty               Boolean?
  repairHistory             String?

  // Appliance specific fields
  applianceCapacity         String?
  voltage                   String?
  applianceType             String?
  additionalFunctions       String?

  // Machinery specific fields
  hoursUsed                 Int?
  engineType                String?
  capacityOrPower           String?
  maintenanceHistory        String? @db.Text
  installationLocation      String?
  compliesWithNR            String?
  operatingLicenses         String?

  // Livestock specific fields
  breed                     String?
  age                       String?
  sex                       String?
  weight                    String?
  individualId              String?
  purpose                   String?
  sanitaryCondition         String?
  lineage                   String?
  isPregnant                Boolean?
  specialSkills             String?
  gtaDocument               String?
  breedRegistryDocument     String?

  // Furniture specific fields
  furnitureType             String?
  material                  String?
  style                     String?
  dimensions                String?
  pieceCount                Int?

  // Jewelry specific fields
  jewelryType               String?
  metal                     String?
  gemstones                 String?
  totalWeight               String?
  jewelrySize               String?
  authenticityCertificate   String?

  // Art/Antiques specific fields
  workType                  String?
  artist                    String?
  period                    String?
  technique                 String?
  provenance                String? @db.Text

  // Boats specific fields
  boatType                  String?
  boatLength                String?
  hullMaterial              String?
  onboardEquipment          String? @db.Text

  // Food specific fields
  productName               String?
  quantity                  String?
  packagingType             String?
  expirationDate            DateTime?
  storageConditions         String?

  // Precious Metals/Stones specific fields
  preciousMetalType         String?
  purity                    String?
  
  // Forest Goods specific fields
  forestGoodsType           String?
  volumeOrQuantity          String?
  species                   String?
  dofNumber                 String?


  // Relationships
  category        LotCategory      @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller          Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  image           MediaItem?       @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

// ==============================================================================
// 8. General Purpose & Miscellaneous Models
// ==============================================================================

model StateInfo {
  id        String   @id @default(cuid())
  name      String   @unique
  uf        String   @unique
  slug      String   @unique
  cityCount Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  lots      Lot[]
  courts    Court[]
  districts JudicialDistrict[]
}

model CityInfo {
  id        String   @id @default(cuid())
  name      String
  slug      String
  stateId   String
  stateUf   String
  ibgeCode  String?
  lotCount  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  state StateInfo @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots  Lot[]
}

model BlogPost {
  id             String   @id @default(cuid())
  title          String
  slug           String   @unique
  content        String   @db.Text
  authorId       String
  authorName     String
  imageUrl       String?
  publishedAt    DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  tags           String?  // Comma-separated string for MySQL

  // Relationships
  author User @relation(fields: [authorId], references: [id])
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  repliedBy   User?   @relation(fields: [repliedById], references: [id], onDelete: SetNull)
  repliedById String?
}

model DocumentTemplate {
  id        String              @id @default(cuid())
  name      String              @unique
  type      DocumentTemplateType
  content   String              @db.Text
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lotId])
}

model Review {
  id              String   @id @default(cuid())
  userId          String
  userDisplayName String
  lotId           String
  auctionId       String
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                        String   @id @default(cuid())
  userId                    String
  userDisplayName           String
  lotId                     String
  auctionId                 String
  questionText              String   @db.Text
  answerText                String?  @db.Text
  answeredAt                DateTime?
  answeredByUserId          String?
  answeredByUserDisplayName String?
  isPublic                  Boolean  @default(true)
  createdAt                 DateTime @default(now())

  // Relationships
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  answeredBy User? @relation("AnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MediaItem {
  id                   String       @id @default(cuid())
  fileName             String
  storagePath          String?
  title                String?
  altText              String?
  caption              String?
  description          String?
  mimeType             String
  sizeBytes            Int
  dimensions           Json?
  urlOriginal          String?      @db.Text
  urlThumbnail         String?      @db.Text
  urlMedium            String?      @db.Text
  urlLarge             String?      @db.Text
  linkedLotIds         Json?
  dataAiHint           String?
  uploadedAt           DateTime     @default(now())
  uploadedBy           String?

  // Relationships
  uploader                 User?                @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)
  auctionAsImage           Auction?             @relation("AuctionImage")
  lotAsImage               Lot?                 @relation("LotImage")
  bemAsImage               Bem?                 @relation("BemImage")
  sellerAsLogo             Seller?              @relation("SellerLogo")
  auctioneerAsLogo         Auctioneer?          @relation("AuctioneerLogo")
  directSaleOfferAsImage   DirectSaleOffer?     @relation("DirectSaleOfferImage")
  subcategoryAsIcon        Subcategory?         @relation("SubcategoryIcon")
}


model DirectSaleOffer {
  id                   String                  @id @default(cuid())
  publicId             String                  @unique
  title                String
  description          String                  @db.Text
  offerType            DirectSaleOfferType
  status               DirectSaleOfferStatus   @default(PENDING_APPROVAL)
  price                Float?
  minimumOfferPrice    Float?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?                 @unique
  dataAiHint           String?
  dataAiHintSellerLogo String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        String? // Comma-separated
  tags                 String? // Comma-separated
  views                Int?                    @default(0)
  proposalsCount       Int?                    @default(0)
  expiresAt            DateTime?
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  
  // Relationships
  categoryId               String
  sellerId                 String
  category                 LotCategory           @relation(fields: [categoryId], references: [id])
  seller                   Seller                @relation(fields: [sellerId], references: [id])
  image                    MediaItem?            @relation("DirectSaleOfferImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  PENDING_APPROVAL
  ACTIVE
  SOLD
  EXPIRED
}


model PlatformSettings {
  id                             String               @id @default("global")
  siteTitle                      String?
  siteTagline                    String?
  galleryImageBasePath           String?
  storageProvider                StorageProviderType? @default(local)
  firebaseStorageBucket          String?
  activeThemeName                String?
  themes                         Json?
  platformPublicIdMasks          Json?
  homepageSections               Json?
  mentalTriggerSettings          Json?
  sectionBadgeVisibility         Json?
  mapSettings                    Json?
  biddingSettings                Json?
  variableIncrementTable         Json?
  searchPaginationType           SearchPaginationType? @default(loadMore)
  searchItemsPerPage             Int?                  @default(12)
  searchLoadMoreCount            Int?                  @default(12)
  defaultListItemsPerPage        Int?                  @default(10)
  showCountdownOnLotDetail       Boolean?              @default(true)
  showCountdownOnCards           Boolean?              @default(true)
  showRelatedLotsOnLotDetail     Boolean?              @default(true)
  relatedLotsCount               Int?                  @default(5)
  updatedAt                      DateTime              @updatedAt
}

enum StorageProviderType {
  local
  firebase
}

enum SearchPaginationType {
  loadMore
  numberedPages
}

```
- src/app/admin/users/page.tsx:
```tsx
// src/app/admin/users/page.tsx
'use client';

import { useState, useEffect, useCallback, useMemo } from 'react';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { getUsersWithRoles, deleteUser } from './actions';
import type { UserProfileData } from '@/types';
import { PlusCircle, Users } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { DataTable } from '@/components/ui/data-table';
import { createColumns } from './columns';
import { getUserHabilitationStatusInfo } from '@/lib/sample-data-helpers';
import { useRouter } from 'next/navigation';

export default function AdminUsersPage() {
  const [users, setUsers] = useState<UserProfileData[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const { toast } = useToast();
  const router = useRouter();
  const [refetchTrigger, setRefetchTrigger] = useState(0);

  useEffect(() => {
    let isMounted = true;
    
    const fetchUsers = async () => {
      if (!isMounted) return;
      setIsLoading(true);
      setError(null);
      try {
        const fetchedUsers = await getUsersWithRoles();
        if (isMounted) {
          setUsers(fetchedUsers);
        }
      } catch (e) {
        const errorMessage = e instanceof Error ? e.message : "Falha ao buscar usuários.";
        console.error("Error fetching users:", e);
        if (isMounted) {
          setError(errorMessage);
          toast({ title: "Erro", description: errorMessage, variant: "destructive" });
        }
      } finally {
        if (isMounted) {
          setIsLoading(false);
        }
      }
    };
    
    fetchUsers();

    return () => {
      isMounted = false;
    };
  }, [toast, refetchTrigger]);

  const handleDelete = useCallback(
    async (id: string) => {
      const result = await deleteUser(id);
      if (result.success) {
        toast({ title: "Sucesso!", description: result.message });
        setRefetchTrigger(c => c + 1); // Trigger refetch
      } else {
        toast({ title: 'Erro ao Excluir', description: result.message, variant: 'destructive' });
      }
    },
    [toast]
  );
  
  const columns = useMemo(() => createColumns({ handleDelete }), [handleDelete]);
  
  const habilitationStatusOptions = useMemo(() => 
    [...new Set(users.map(u => u.habilitationStatus))]
      .filter(Boolean)
      .map(status => ({ value: status!, label: getUserHabilitationStatusInfo(status).text })),
  [users]);

  const roleOptions = useMemo(() => 
    [...new Set(users.map(u => u.roleName))]
      .filter(Boolean)
      .map(roleName => ({ value: roleName!, label: roleName! })),
  [users]);

  const facetedFilterColumns = useMemo(() => [
    { id: 'roleName', title: 'Perfil', options: roleOptions },
    { id: 'habilitationStatus', title: 'Habilitação', options: habilitationStatusOptions },
  ], [roleOptions, habilitationStatusOptions]);

  return (
    <div className="space-y-6">
      <Card className="shadow-lg">
        <CardHeader className="flex flex-row items-center justify-between">
          <div>
            <CardTitle className="text-2xl font-bold font-headline flex items-center">
              <Users className="h-6 w-6 mr-2 text-primary" />
              Gerenciar Usuários da Plataforma
            </CardTitle>
            <CardDescription>
              Visualize usuários, atribua perfis e gerencie o acesso.
            </CardDescription>
          </div>
          <Button asChild>
            <Link href="/admin/users/new">
              <PlusCircle className="mr-2 h-4 w-4" /> Novo Usuário
            </Link>
          </Button>
        </CardHeader>
        <CardContent>
          <DataTable
            columns={columns}
            data={users}
            isLoading={isLoading}
            error={error}
            searchColumnId="fullName"
            searchPlaceholder="Buscar por nome ou email..."
            facetedFilterColumns={facetedFilterColumns}
          />
        </CardContent>
      </Card>
    </div>
  );
}
```
- src/app/admin/users/actions.ts:
```ts
// src/app/admin/users/actions.ts
'use server';

import { revalidatePath } from 'next/cache';
import { prisma } from '@/lib/prisma';
import type { User, UserProfileWithPermissions, Role } from '@/types';
import type { UserFormValues } from './user-form-schema';
import bcrypt from 'bcrypt';

export type UserCreationData = Partial<Omit<User, 'id' | 'createdAt' | 'updatedAt' | 'roleId' | 'sellerId' | 'badges'>> & {
  email: string;
  password?: string | null;
};

/**
 * Cria um novo usuário no sistema, tanto no banco de dados quanto no provedor de autenticação.
 * Esta action é para uso administrativo.
 * @param data - Os dados do formulário do novo usuário.
 * @returns Um objeto indicando o sucesso e a mensagem da operação.
 */
export async function createUser(data: UserCreationData): Promise<{ success: boolean; message: string; userId?: string }> {
  if (!data.password) {
    return { success: false, message: "A senha é obrigatória para criar um novo usuário." };
  }

  try {
    const hashedPassword = await bcrypt.hash(data.password, 10);
    const defaultRole = await prisma.role.findFirst({ where: { name_normalized: 'USER' } });

    const newUser = await prisma.user.create({
      data: {
        email: data.email,
        fullName: data.fullName,
        password: hashedPassword,
        accountType: data.accountType,
        cpf: data.cpf,
        dateOfBirth: data.dateOfBirth,
        razaoSocial: data.razaoSocial,
        cnpj: data.cnpj,
        inscricaoEstadual: data.inscricaoEstadual,
        website: data.website,
        cellPhone: data.cellPhone,
        zipCode: data.zipCode,
        street: data.street,
        number: data.number,
        complement: data.complement,
        neighborhood: data.neighborhood,
        city: data.city,
        state: data.state,
        optInMarketing: data.optInMarketing,
        habilitationStatus: 'PENDENTE_DOCUMENTOS',
        roleId: defaultRole?.id, // Associa ao papel padrão 'USER'
      }
    });

    revalidatePath('/admin/users');
    return { success: true, message: 'Usuário criado com sucesso!', userId: newUser.id };

  } catch (error: any) {
    console.error("[createUser Action] Error:", error);
    if (error.code === 'P2002' && error.meta?.target?.includes('email')) {
      return { success: false, message: 'Este email já está em uso.' };
    }
    return { success: false, message: error.message || "Falha ao criar usuário." };
  }
}

/**
 * Busca todos os usuários do banco de dados, incluindo o nome de seu perfil (role).
 * @returns Um array de perfis de usuário.
 */
export async function getUsersWithRoles(): Promise<User[]> {
  const users = await prisma.user.findMany({
    include: {
      role: true,
    },
    orderBy: {
      createdAt: 'desc'
    }
  });

  return users.map(user => ({
    ...user,
    uid: user.id, // uid é um alias comum para id em contextos de autenticação
    roleName: user.role?.name,
  })) as unknown as User[];
}

/**
 * Busca o perfil completo de um usuário, incluindo suas permissões.
 * @param userId - O ID do usuário a ser buscado.
 * @returns O perfil do usuário com permissões, ou null se não encontrado.
 */
export async function getUserProfileData(userId: string): Promise<UserProfileWithPermissions | null> {
  try {
    const user = await prisma.user.findUnique({
      where: { id: userId },
      include: {
        role: {
          include: {
            permissions: true,
          },
        },
      },
    });

    if (!user) {
      return null;
    }

    const permissions = user.role?.permissions.map(p => p.name) || [];

    return {
      ...user,
      uid: user.id,
      permissions: permissions,
    } as UserProfileWithPermissions;
  } catch (error) {
    console.error(`[getUserProfileData Action] Error fetching user ${userId}:`, error);
    return null;
  }
}

/**
 * Atualiza o perfil (role) de um usuário.
 * @param userId - O ID do usuário a ser atualizado.
 * @param roleId - O ID do novo perfil a ser atribuído.
 * @returns Um objeto indicando o sucesso da operação.
 */
export async function updateUserRole(
  userId: string,
  roleId: string | null
): Promise<{ success: boolean; message: string }> {
  try {
    await prisma.user.update({
      where: { id: userId },
      data: { roleId: roleId },
    });
    revalidatePath('/admin/users');
    revalidatePath(`/admin/users/${userId}/edit`);
    return { success: true, message: 'Perfil do usuário atualizado com sucesso.' };
  } catch (error) {
    console.error(`Error updating user role for ${userId}:`, error);
    return { success: false, message: 'Falha ao atualizar o perfil do usuário.' };
  }
}

/**
 * Exclui um usuário do banco de dados.
 * @param userId - O ID do usuário a ser excluído.
 * @returns Um objeto indicando o sucesso da operação.
 */
export async function deleteUser(userId: string): Promise<{ success: boolean; message: string }> {
  try {
    await prisma.user.delete({ where: { id: userId } });
    revalidatePath('/admin/users');
    return { success: true, message: 'Usuário excluído com sucesso do banco de dados.' };
  } catch (error: any) {
    console.error(`Error deleting user ${userId}:`, error);
    return { success: false, message: `Falha ao excluir usuário: ${error.message}` };
  }
}

/**
 * Busca um usuário pelo seu email.
 * @param email - O email do usuário.
 * @returns O perfil do usuário com permissões, ou null se não encontrado.
 */
export async function getUserByEmail(email: string): Promise<UserProfileWithPermissions | null> {
    try {
        const user = await prisma.user.findUnique({
            where: { email },
            include: { role: { include: { permissions: true } } },
        });

        if (!user) return null;

        const permissions = user.role?.permissions.map(p => p.name) || [];
        return {
            ...user,
            uid: user.id,
            permissions,
        } as UserProfileWithPermissions;
    } catch (error) {
        console.error(`[getUserByEmail Action] Error fetching user ${email}:`, error);
        return null;
    }
}
```
- src/app/auth/actions.ts:
```ts
// src/app/auth/actions.ts
'use server';

import { redirect } from 'next/navigation';
import { prisma } from '@/lib/prisma';
import bcrypt from 'bcrypt';
import { createSession, getSession, deleteSession } from '@/lib/session';
import type { UserProfileWithPermissions } from '@/types';
import { revalidatePath } from 'next/cache';


/**
 * Realiza o login de um usuário com base no email e senha.
 * Verifica as credenciais, e se forem válidas, cria uma sessão criptografada em um cookie.
 * @param formData - O FormData do formulário de login, contendo email e senha.
 * @returns Um objeto indicando o sucesso ou falha da operação.
 */
export async function login(formData: FormData): Promise<{ success: boolean; message: string }> {
  const email = formData.get('email') as string;
  const password = formData.get('password') as string;

  if (!email || !password) {
    return { success: false, message: 'Email e senha são obrigatórios.' };
  }

  try {
    const user = await prisma.user.findUnique({
      where: { email },
      include: {
        role: {
          include: {
            permissions: true
          }
        }
      }
    });

    if (!user || !user.password) {
      return { success: false, message: 'Credenciais inválidas.' };
    }

    const isPasswordValid = await bcrypt.compare(password, user.password);

    if (!isPasswordValid) {
      return { success: false, message: 'Credenciais inválidas.' };
    }
    
    // As permissões agora vêm como { name: string }[]
    const permissions = user.role?.permissions.map(p => p.name) || [];
    
    const userProfileWithPerms: UserProfileWithPermissions = {
      ...user,
      uid: user.id,
      roleName: user.role?.name || 'USER',
      permissions: permissions,
    };

    await createSession(userProfileWithPerms);
    
    // Revalidação não é necessária aqui, a criação do cookie será lida na próxima requisição.
    // O redirecionamento será feito no lado do cliente.
    return { success: true, message: 'Login bem-sucedido!' };

  } catch (error) {
    console.error('[Login Action] Error:', error);
    return { success: false, message: 'Ocorreu um erro interno durante o login.' };
  }
}

/**
 * Realiza o logout do usuário, excluindo a sessão do cookie.
 */
export async function logout() {
  await deleteSession();
  revalidatePath('/', 'layout'); // Garante que o layout seja re-renderizado como "deslogado"
  redirect('/');
}

/**
 * Obtém os dados do usuário logado atualmente com base na sessão do cookie.
 * @returns O perfil do usuário com permissões, ou null se não houver sessão válida.
 */
export async function getCurrentUser(): Promise<UserProfileWithPermissions | null> {
    const session = await getSession();
    if (!session || !session.userId) {
        return null;
    }

    try {
        const user = await prisma.user.findUnique({
            where: { id: session.userId as string },
            include: {
                role: {
                    include: {
                        permissions: true,
                    },
                },
            },
        });
        
        if (!user) {
            return null;
        }

        const permissions = user.role?.permissions.map(p => p.name) || [];

        return {
            ...user,
            uid: user.id,
            roleName: user.role?.name || 'USER',
            permissions: permissions,
        } as UserProfileWithPermissions;
    } catch (error) {
        console.error('[getCurrentUser Action] Error fetching user from DB:', error);
        return null;
    }
}
```
- src/app/auth/login/actions.ts:
```ts
// src/app/auth/login/actions.ts
'use server';

import { redirect } from 'next/navigation';
import { prisma } from '@/lib/prisma';
import bcrypt from 'bcrypt';
import { createSession, getSession, deleteSession } from '@/lib/session';
import type { UserProfileWithPermissions } from '@/types';
import { revalidatePath } from 'next/cache';


/**
 * Realiza o login de um usuário com base no email e senha.
 * Verifica as credenciais, e se forem válidas, cria uma sessão criptografada em um cookie.
 * @param formData - O FormData do formulário de login, contendo email e senha.
 * @returns Um objeto indicando o sucesso ou falha da operação.
 */
export async function login(formData: FormData): Promise<{ success: boolean; message: string }> {
  const email = formData.get('email') as string;
  const password = formData.get('password') as string;

  if (!email || !password) {
    return { success: false, message: 'Email e senha são obrigatórios.' };
  }

  try {
    const user = await prisma.user.findUnique({
      where: { email },
      include: {
        role: {
          include: {
            permissions: true
          }
        }
      }
    });

    if (!user || !user.password) {
      return { success: false, message: 'Credenciais inválidas.' };
    }

    const isPasswordValid = await bcrypt.compare(password, user.password);

    if (!isPasswordValid) {
      return { success: false, message: 'Credenciais inválidas.' };
    }
    
    // As permissões agora vêm como { name: string }[]
    const permissions = user.role?.permissions.map(p => p.name) || [];
    
    const userProfileWithPerms: UserProfileWithPermissions = {
      ...user,
      uid: user.id,
      roleName: user.role?.name || 'USER',
      permissions: permissions,
    };

    await createSession(userProfileWithPerms);
    
    return { success: true, message: 'Login bem-sucedido!' };

  } catch (error) {
    console.error('[Login Action] Error:', error);
    return { success: false, message: 'Ocorreu um erro interno durante o login.' };
  }
}
```
- src/app/profile/page.tsx:
```tsx
'use client';

import { useState, useEffect, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/contexts/auth-context';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Loader2, UserCog, Mail, Phone, Home, Building, Briefcase, Calendar, ShieldCheck, BadgeInfo, FileText, Edit, AlertCircle, Award } from 'lucide-react';
import Link from 'next/link';
import { format } from 'date-fns';
import { ptBR } from 'date-fns/locale';
import { Badge } from '@/components/ui/badge';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';

const InfoItem = ({ icon: Icon, label, value, href }: { icon: React.ElementType, label: string, value?: string | null, href?: string }) => {
  if (!value) return null;
  return (
    <div className="flex items-start text-sm">
      <Icon className="h-4 w-4 mr-3 mt-1 text-primary flex-shrink-0" />
      <div>
        <span className="font-semibold text-foreground">{label}:</span>{' '}
        {href ? (
          <a href={href} target="_blank" rel="noopener noreferrer" className="text-muted-foreground hover:underline">{value}</a>
        ) : (
          <span className="text-muted-foreground">{value}</span>
        )}
      </div>
    </div>
  );
};

const badgeMap: Record<string, { icon: React.ElementType, label: string, description: string }> = {
    'PRIMEIRO_ARREMATE': { icon: Award, label: "Primeiro Arremate", description: "Parabéns por seu primeiro lote arrematado!" },
    // Add other badges here
};

export default function ProfilePage() {
  const { userProfileWithPermissions, loading } = useAuth();
  const router = useRouter();

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-[calc(100vh-10rem)]">
        <Loader2 className="h-12 w-12 animate-spin text-primary" />
        <p className="ml-4 text-muted-foreground">Carregando seu perfil...</p>
      </div>
    );
  }

  if (!userProfileWithPermissions) {
    return (
      <div className="text-center py-12">
        <AlertCircle className="mx-auto h-12 w-12 text-destructive mb-4" />
        <h2 className="text-xl font-semibold text-destructive">Usuário não encontrado</h2>
        <p className="text-muted-foreground">Por favor, faça login para ver seu perfil.</p>
        <Button asChild className="mt-4">
          <Link href="/auth/login?redirect=/profile">Ir para Login</Link>
        </Button>
      </div>
    );
  }
  
  const { 
    fullName, email, avatarUrl, dataAiHint, roleName, habilitationStatus,
    cellPhone, homePhone, cpf, dateOfBirth, street, number, complement,
    neighborhood, city, state, zipCode, accountType, razaoSocial, cnpj,
    badges
  } = userProfileWithPermissions;
  
  const userInitial = fullName ? fullName.charAt(0).toUpperCase() : (email ? email.charAt(0).toUpperCase() : "U");

  const badgesArray = badges ? badges.split(',') : [];

  return (
    <div className="max-w-3xl mx-auto space-y-6">
      <Card className="shadow-xl">
        <CardHeader>
          <div className="flex flex-col sm:flex-row items-center gap-6">
            <Avatar className="h-24 w-24 border-4 border-primary/30">
              <AvatarImage src={avatarUrl || `https://placehold.co/128x128.png`} alt={fullName || 'Avatar'} data-ai-hint={dataAiHint || "profile avatar"} />
              <AvatarFallback className="text-4xl">{userInitial}</AvatarFallback>
            </Avatar>
            <div className="flex-grow text-center sm:text-left">
              <CardTitle className="text-3xl font-bold font-headline">{fullName || email}</CardTitle>
              <CardDescription className="text-lg mt-1">{email}</CardDescription>
            </div>
             <Button asChild>
                <Link href="/profile/edit"><Edit className="mr-2 h-4 w-4" /> Editar Perfil</Link>
            </Button>
          </div>
        </CardHeader>
        <CardContent className="space-y-6 pt-4">
          
          <Card className="bg-secondary/30">
             <CardHeader className="flex-row items-center justify-between pb-2">
                <CardTitle className="text-lg font-semibold flex items-center"><ShieldCheck className="mr-2 h-5 w-5 text-muted-foreground" />Status da Conta</CardTitle>
             </CardHeader>
             <CardContent className="grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm">
                <div className="flex items-center"><strong className="w-24">Perfil:</strong> <Badge variant="outline">{roleName || 'Não definido'}</Badge></div>
                <div className="flex items-center"><strong className="w-24">Habilitação:</strong> <Badge variant="outline">{habilitationStatus || 'Pendente'}</Badge></div>
             </CardContent>
          </Card>
          
          {badgesArray && badgesArray.length > 0 && (
            <section>
                 <h3 className="text-lg font-semibold text-primary border-b pb-1 mb-3 flex items-center"><Award className="mr-2 h-5 w-5"/>Conquistas e Medalhas</h3>
                 <div className="flex flex-wrap gap-4">
                    {badgesArray.map(badgeKey => {
                        const badgeInfo = badgeMap[badgeKey as keyof typeof badgeMap];
                        if (!badgeInfo) return null;
                        const Icon = badgeInfo.icon;
                        return (
                             <TooltipProvider key={badgeKey}>
                                <Tooltip>
                                    <TooltipTrigger asChild>
                                        <div className="flex flex-col items-center gap-1 p-3 rounded-md border bg-background w-24">
                                            <Icon className="h-8 w-8 text-amber-500" />
                                            <span className="text-xs font-medium text-center">{badgeInfo.label}</span>
                                        </div>
                                    </TooltipTrigger>
                                    <TooltipContent>
                                        <p>{badgeInfo.description}</p>
                                    </TooltipContent>
                                </Tooltip>
                             </TooltipProvider>
                        )
                    })}
                 </div>
            </section>
          )}

          <section>
            <h3 className="text-lg font-semibold text-primary border-b pb-1 mb-3 flex items-center"><UserCog className="mr-2 h-5 w-5"/>Informações Pessoais</h3>
            <div className="space-y-3">
              <InfoItem icon={BadgeInfo} label="Tipo de Conta" value={accountType === 'LEGAL' ? 'Pessoa Jurídica' : 'Pessoa Física'} />
              {accountType === 'LEGAL' ? (
                <>
                  <InfoItem icon={Building} label="Razão Social" value={razaoSocial} />
                  <InfoItem icon={FileText} label="CNPJ" value={cnpj} />
                </>
              ) : (
                <>
                  <InfoItem icon={FileText} label="CPF" value={cpf} />
                  <InfoItem icon={Calendar} label="Data de Nascimento" value={dateOfBirth ? format(new Date(dateOfBirth as string), 'dd/MM/yyyy', { locale: ptBR }) : null} />
                </>
              )}
            </div>
          </section>

          <section>
            <h3 className="text-lg font-semibold text-primary border-b pb-1 mb-3 flex items-center"><Mail className="mr-2 h-5 w-5"/>Contato</h3>
            <div className="space-y-3">
              <InfoItem icon={Phone} label="Celular" value={cellPhone} href={`tel:${cellPhone}`} />
              <InfoItem icon={Phone} label="Telefone Fixo" value={homePhone} href={`tel:${homePhone}`} />
            </div>
          </section>

          <section>
            <h3 className="text-lg font-semibold text-primary border-b pb-1 mb-3 flex items-center"><Home className="mr-2 h-5 w-5"/>Endereço</h3>
            <div className="space-y-3">
              <InfoItem icon={Home} label="Endereço" value={`${street || ''}${number ? ', ' + number : ''}${complement ? ' - ' + complement : ''}`.trim() || null} />
              <InfoItem icon={Home} label="Bairro" value={neighborhood} />
              <InfoItem icon={Home} label="Cidade/UF" value={`${city || ''}${state ? ' - ' + state : ''}`.trim() || null} />
              <InfoItem icon={Home} label="CEP" value={zipCode} />
            </div>
          </section>
        </CardContent>
      </Card>
    </div>
  );
}
```
- src/app/profile/edit/actions.ts:
```tsx
'use server';

import { revalidatePath } from 'next/cache';
import { prisma } from '@/lib/prisma';
import type { EditableUserProfileData } from '@/types';

interface UpdateProfileResult {
  success: boolean;
  message: string;
}

/**
 * Updates a user's profile with the provided data.
 * This action is intended to be called by the user themselves to edit their own profile.
 * @param {string} userId - The unique ID of the user whose profile is to be updated.
 * @param {EditableUserProfileData} data - An object containing the profile fields to update.
 * @returns {Promise<UpdateProfileResult>} An object indicating the result of the operation.
 */
export async function updateUserProfile(
  userId: string,
  data: EditableUserProfileData
): Promise<UpdateProfileResult> {
  if (!userId) {
    return { success: false, message: 'ID do usuário não fornecido.' };
  }
  
  try {
    // The 'as any' cast is a temporary workaround for Prisma's strictness with partial JSON types.
    // In a production scenario, you might have more robust type guards or data transformation.
    await prisma.user.update({
        where: { id: userId },
        data: {
            ...data
        } as any,
    });
    
    // Revalidate paths to ensure the updated data is reflected on the profile page
    // and any other page that might display user information.
    revalidatePath('/profile'); 
    revalidatePath(`/profile/edit`); 
    revalidatePath('/', 'layout'); // Revalidate layout to update header info
    
    return { success: true, message: 'Perfil atualizado com sucesso!' };

  } catch (error: any) {
    console.error(`Error updating profile for user ${userId}:`, error);
    return { success: false, message: `Erro ao atualizar perfil: ${error.message}` };
  }
}
```
- src/app/profile/edit/page.tsx:
```tsx
'use client';

import { useState, useEffect, type FormEvent } from 'react';
import { useRouter } from 'next/navigation';
import { useForm, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Button } from '@/components/ui/button';
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Calendar } from '@/components/ui/calendar';
import { Switch } from '@/components/ui/switch';
import { Textarea } from '@/components/ui/textarea';
import { useAuth } from '@/contexts/auth-context';
import { db } from '@/lib/firebase';
import { doc, getDoc } from 'firebase/firestore';
import { updateUserProfile } from './actions';
import type { UserProfileData, EditableUserProfileData } from '@/types';
import { cn } from '@/lib/utils';
import { format, parseISO } from 'date-fns';
import { ptBR } from 'date-fns/locale';
import { Loader2, Save, CalendarIcon, UserCog } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import Link from 'next/link';
import { getUserProfileData as getUserProfileDataAction } from '@/app/admin/users/actions';

const profileFormSchema = z.object({
  fullName: z.string().min(3, { message: 'Nome completo deve ter pelo menos 3 caracteres.' }),
  cpf: z.string().optional(),
  rgNumber: z.string().optional(),
  rgIssuer: z.string().optional(),
  rgIssueDate: z.date().optional().nullable(),
  rgState: z.string().optional(),
  dateOfBirth: z.date().optional().nullable(),
  cellPhone: z.string().optional(),
  homePhone: z.string().optional(),
  gender: z.string().optional(),
  profession: z.string().optional(),
  nationality: z.string().optional(),
  maritalStatus: z.string().optional(),
  propertyRegime: z.string().optional(),
  spouseName: z.string().optional(),
  spouseCpf: z.string().optional(),
  zipCode: z.string().optional(),
  street: z.string().optional(),
  number: z.string().optional(),
  complement: z.string().optional(),
  neighborhood: z.string().optional(),
  city: z.string().optional(),
  state: z.string().optional(),
  optInMarketing: z.boolean().default(false),
});

type ProfileFormValues = z.infer<typeof profileFormSchema>;

const genderOptions = ["Masculino", "Feminino", "Outro", "Prefiro não informar"];
const maritalStatusOptions = ["Solteiro(a)", "Casado(a)", "Divorciado(a)", "Viúvo(a)", "União Estável"];
const propertyRegimeOptions = ["Comunhão Parcial de Bens", "Comunhão Universal de Bens", "Separação Total de Bens", "Participação Final nos Aquestos"];


export default function EditProfilePage() {
  const { userProfileWithPermissions, loading: authLoading, refetchUser } = useAuth();
  const router = useRouter();
  const { toast } = useToast();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isFetchingData, setIsFetchingData] = useState(true); // Start true to show loader initially
  const [fetchError, setFetchError] = useState<string | null>(null);

  const form = useForm<ProfileFormValues>({
    resolver: zodResolver(profileFormSchema),
    defaultValues: {
      fullName: '',
      cpf: '',
      rgNumber: '',
      rgIssuer: '',
      rgIssueDate: null,
      rgState: '',
      dateOfBirth: null,
      cellPhone: '',
      homePhone: '',
      gender: '',
      profession: '',
      nationality: '',
      maritalStatus: '',
      propertyRegime: '',
      spouseName: '',
      spouseCpf: '',
      zipCode: '',
      street: '',
      number: '',
      complement: '',
      neighborhood: '',
      city: '',
      state: '',
      optInMarketing: false,
    },
  });

  useEffect(() => {
    const fetchProfileData = async (uid: string) => {
      setIsFetchingData(true);
      setFetchError(null);
      console.log('Attempting to fetch profile for UID:', uid);
      try {
        const data = await getUserProfileDataAction(uid);
        if (data) {
          form.reset({
            fullName: data.fullName || '',
            cpf: data.cpf || '',
            rgNumber: data.rgNumber || '',
            rgIssuer: data.rgIssuer || '',
            rgIssueDate: data.rgIssueDate ? new Date(data.rgIssueDate as string) : null,
            rgState: data.rgState || '',
            dateOfBirth: data.dateOfBirth ? new Date(data.dateOfBirth as string) : null,
            cellPhone: data.cellPhone || '',
            homePhone: data.homePhone || '',
            gender: data.gender || '',
            profession: data.profession || '',
            nationality: data.nationality || '',
            maritalStatus: data.maritalStatus || '',
            propertyRegime: data.propertyRegime || '',
            spouseName: data.spouseName || '',
            spouseCpf: data.spouseCpf || '',
            zipCode: data.zipCode || '',
            street: data.street || '',
            number: data.number || '',
            complement: data.complement || '',
            neighborhood: data.neighborhood || '',
            city: data.city || '',
            state: data.state || '',
            optInMarketing: data.optInMarketing || false,
          });
        } else {
          console.error('Profile not found in DB for UID:', uid);
          setFetchError("Perfil não encontrado no banco de dados.");
          toast({ title: "Erro", description: "Perfil não encontrado no banco de dados.", variant: "destructive" });
        }
      } catch (e: any) {
        console.error("Error fetching user profile for edit:", e);
        setFetchError("Erro ao buscar dados do perfil para edição.");
        toast({ title: "Erro", description: `Não foi possível carregar os dados do perfil: ${e.message}`, variant: "destructive" });
      } finally {
        setIsFetchingData(false);
      }
    };

    if (authLoading) {
      setIsFetchingData(true); // Keep showing loader if auth is still loading
      return;
    }
    
    const userId = userProfileWithPermissions?.uid;

    if (!userId) {
      toast({ title: "Acesso Negado", description: "Você precisa estar logado para editar o perfil.", variant: "destructive" });
      router.push('/auth/login?redirect=/profile/edit');
      setIsFetchingData(false);
      return;
    }

    if (userId) {
      fetchProfileData(userId);
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [userProfileWithPermissions, authLoading, router, form.reset, toast]);

  async function onSubmit(data: ProfileFormValues) {
    const userId = userProfileWithPermissions?.uid;
    if (!userId) {
      toast({ title: "Erro", description: "Usuário não autenticado.", variant: "destructive" });
      return;
    }
    setIsSubmitting(true);
    
    const dataToUpdate: EditableUserProfileData = {
      ...data,
      dateOfBirth: data.dateOfBirth instanceof Date ? data.dateOfBirth : null,
      rgIssueDate: data.rgIssueDate instanceof Date ? data.rgIssueDate : null,
    };

    const result = await updateUserProfile(userId, dataToUpdate);
    setIsSubmitting(false);

    if (result.success) {
      toast({ title: "Sucesso!", description: result.message });
      await refetchUser(); // Refresh user data in context
      router.push('/profile');
    } else {
      toast({ title: "Erro ao atualizar", description: result.message, variant: "destructive" });
    }
  }

  if (authLoading || isFetchingData) {
    return (
      <div className="flex justify-center items-center min-h-[calc(100vh-10rem)]">
        <Loader2 className="h-12 w-12 animate-spin text-primary" />
        <p className="ml-4 text-muted-foreground">Carregando dados do perfil...</p>
      </div>
    );
  }

  if (fetchError && !form.formState.isDirty) { // Show error only if form hasn't been touched yet
    const userId = userProfileWithPermissions?.uid;
    return (
      <div className="text-center py-12">
        <h2 className="text-xl font-semibold text-destructive">{fetchError}</h2>
        <Button asChild className="mt-4">
          <Link href="/profile">Voltar ao Perfil</Link>
        </Button>
         <Button variant="outline" onClick={() => userId && (form.reset(), useEffect(() => { /* re-trigger fetch */ }, [userProfileWithPermissions, authLoading]))} className="mt-4 ml-2">
          Tentar Novamente
        </Button>
      </div>
    );
  }
  
  const currentMaritalStatus = form.watch("maritalStatus");
  const showSpouseFields = currentMaritalStatus === "Casado(a)" || currentMaritalStatus === "União Estável";


  return (
    <div className="max-w-3xl mx-auto">
      <Card className="shadow-xl">
        <CardHeader>
          <CardTitle className="text-2xl font-bold font-headline flex items-center">
            <UserCog className="h-7 w-7 mr-3 text-primary" /> Editar Perfil
          </CardTitle>
          <CardDescription>Atualize suas informações pessoais e de contato.</CardDescription>
        </CardHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)}>
            <CardContent className="space-y-6 bg-secondary/30 p-6">
              
              <section className="space-y-4">
                <h3 className="text-lg font-semibold text-primary border-b pb-2">Informações Pessoais</h3>
                <FormField
                  control={form.control}
                  name="fullName"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Nome Completo</FormLabel>
                      <FormControl><Input {...field} /></FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <div className="grid md:grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="cpf"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>CPF</FormLabel>
                        <FormControl><Input {...field} placeholder="000.000.000-00" /></FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="dateOfBirth"
                    render={({ field }) => (
                      <FormItem className="flex flex-col">
                        <FormLabel>Data de Nascimento</FormLabel>
                        <Popover>
                          <PopoverTrigger asChild>
                            <FormControl>
                              <Button
                                variant={"outline"}
                                className={cn("w-full justify-start text-left font-normal", !field.value && "text-muted-foreground")}
                              >
                                {field.value ? format(field.value, "dd/MM/yyyy", { locale: ptBR }) : <span>Selecione uma data</span>}
                                <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                              </Button>
                            </FormControl>
                          </PopoverTrigger>
                          <PopoverContent className="w-auto p-0" align="start">
                            <Calendar
                              mode="single"
                              selected={field.value}
                              onSelect={field.onChange}
                              disabled={(date) => date > new Date() || date < new Date("1900-01-01")}
                              initialFocus
                              captionLayout="dropdown-buttons"
                              fromYear={1920}
                              toYear={new Date().getFullYear() - 18}
                            />
                          </PopoverContent>
                        </Popover>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                <div className="grid md:grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="cellPhone"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Celular</FormLabel>
                        <FormControl><Input {...field} placeholder="(00) 00000-0000" /></FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                   <FormField
                    control={form.control}
                    name="homePhone"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Telefone Residencial (Opcional)</FormLabel>
                        <FormControl><Input {...field} placeholder="(00) 0000-0000" /></FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                 <div className="grid md:grid-cols-2 gap-4">
                    <FormField
                        control={form.control}
                        name="gender"
                        render={({ field }) => (
                        <FormItem>
                            <FormLabel>Gênero (Opcional)</FormLabel>
                            <Select onValueChange={field.onChange} value={field.value || ''}>
                            <FormControl><SelectTrigger><SelectValue placeholder="Selecione seu gênero" /></SelectTrigger></FormControl>
                            <SelectContent>
                                {genderOptions.map(option => <SelectItem key={option} value={option}>{option}</SelectItem>)}
                            </SelectContent>
                            </Select>
                            <FormMessage />
                        </FormItem>
                        )}
                    />
                    <FormField
                        control={form.control}
                        name="profession"
                        render={({ field }) => (
                        <FormItem>
                            <FormLabel>Profissão (Opcional)</FormLabel>
                            <FormControl><Input {...field} /></FormControl>
                            <FormMessage />
                        </FormItem>
                        )}
                    />
                </div>
                <div className="grid md:grid-cols-2 gap-4">
                     <FormField
                        control={form.control}
                        name="nationality"
                        render={({ field }) => (
                        <FormItem>
                            <FormLabel>Nacionalidade (Opcional)</FormLabel>
                            <FormControl><Input {...field} /></FormControl>
                            <FormMessage />
                        </FormItem>
                        )}
                    />
                     <FormField
                        control={form.control}
                        name="maritalStatus"
                        render={({ field }) => (
                        <FormItem>
                            <FormLabel>Estado Civil (Opcional)</FormLabel>
                            <Select onValueChange={field.onChange} value={field.value || ''}>
                            <FormControl><SelectTrigger><SelectValue placeholder="Selecione seu estado civil" /></SelectTrigger></FormControl>
                            <SelectContent>
                                {maritalStatusOptions.map(option => <SelectItem key={option} value={option}>{option}</SelectItem>)}
                            </SelectContent>
                            </Select>
                            <FormMessage />
                        </FormItem>
                        )}
                    />
                </div>

                 {showSpouseFields && (
                    <>
                        <FormField
                            control={form.control}
                            name="propertyRegime"
                            render={({ field }) => (
                            <FormItem>
                                <FormLabel>Regime de Bens (Opcional)</FormLabel>
                                 <Select onValueChange={field.onChange} value={field.value || ''}>
                                <FormControl><SelectTrigger><SelectValue placeholder="Selecione o regime de bens" /></SelectTrigger></FormControl>
                                <SelectContent>
                                    {propertyRegimeOptions.map(option => <SelectItem key={option} value={option}>{option}</SelectItem>)}
                                </SelectContent>
                                </Select>
                                <FormMessage />
                            </FormItem>
                            )}
                        />
                        <div className="grid md:grid-cols-2 gap-4">
                            <FormField
                                control={form.control}
                                name="spouseName"
                                render={({ field }) => (
                                <FormItem>
                                    <FormLabel>Nome do Cônjuge (Opcional)</FormLabel>
                                    <FormControl><Input {...field} /></FormControl>
                                    <FormMessage />
                                </FormItem>
                                )}
                            />
                            <FormField
                                control={form.control}
                                name="spouseCpf"
                                render={({ field }) => (
                                <FormItem>
                                    <FormLabel>CPF do Cônjuge (Opcional)</FormLabel>
                                    <FormControl><Input {...field} placeholder="000.000.000-00" /></FormControl>
                                    <FormMessage />
                                </FormItem>
                                )}
                            />
                        </div>
                    </>
                )}
              </section>

              <section className="space-y-4">
                <h3 className="text-lg font-semibold text-primary border-b pb-2">Documentos (RG)</h3>
                 <div className="grid md:grid-cols-2 gap-4">
                    <FormField
                        control={form.control}
                        name="rgNumber"
                        render={({ field }) => (
                        <FormItem>
                            <FormLabel>Número do RG (Opcional)</FormLabel>
                            <FormControl><Input {...field} /></FormControl>
                            <FormMessage />
                        </FormItem>
                        )}
                    />
                     <FormField
                        control={form.control}
                        name="rgIssuer"
                        render={({ field }) => (
                        <FormItem>
                            <FormLabel>Órgão Emissor do RG (Opcional)</FormLabel>
                            <FormControl><Input {...field} /></FormControl>
                            <FormMessage />
                        </FormItem>
                        )}
                    />
                 </div>
                 <div className="grid md:grid-cols-2 gap-4">
                    <FormField
                        control={form.control}
                        name="rgState"
                        render={({ field }) => (
                        <FormItem>
                            <FormLabel>UF Emissor do RG (Opcional)</FormLabel>
                            <FormControl><Input {...field} maxLength={2} /></FormControl>
                            <FormMessage />
                        </FormItem>
                        )}
                    />
                     <FormField
                        control={form.control}
                        name="rgIssueDate"
                        render={({ field }) => (
                        <FormItem className="flex flex-col">
                            <FormLabel>Data de Emissão do RG (Opcional)</FormLabel>
                            <Popover>
                            <PopoverTrigger asChild>
                                <FormControl>
                                <Button
                                    variant={"outline"}
                                    className={cn("w-full justify-start text-left font-normal", !field.value && "text-muted-foreground")}
                                >
                                    {field.value ? format(field.value, "dd/MM/yyyy", { locale: ptBR }) : <span>Selecione uma data</span>}
                                    <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                                </Button>
                                </FormControl>
                            </PopoverTrigger>
                            <PopoverContent className="w-auto p-0" align="start">
                                <Calendar
                                mode="single"
                                selected={field.value}
                                onSelect={field.onChange}
                                disabled={(date) => date > new Date() || date < new Date("1900-01-01")}
                                initialFocus
                                captionLayout="dropdown-buttons"
                                fromYear={1950}
                                toYear={new Date().getFullYear()}
                                />
                            </PopoverContent>
                            </Popover>
                            <FormMessage />
                        </FormItem>
                        )}
                    />
                 </div>
              </section>

              <section className="space-y-4">
                <h3 className="text-lg font-semibold text-primary border-b pb-2">Endereço (Opcional)</h3>
                <FormField
                  control={form.control}
                  name="zipCode"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>CEP</FormLabel>
                      <FormControl><Input {...field} placeholder="00000-000" /></FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <div className="grid md:grid-cols-3 gap-4">
                   <FormField
                    control={form.control}
                    name="street"
                    render={({ field }) => (
                      <FormItem className="md:col-span-2">
                        <FormLabel>Logradouro</FormLabel>
                        <FormControl><Input {...field} /></FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="number"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Número</FormLabel>
                        <FormControl><Input {...field} /></FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                <FormField
                  control={form.control}
                  name="complement"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Complemento</FormLabel>
                      <FormControl><Input {...field} /></FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <div className="grid md:grid-cols-3 gap-4">
                  <FormField
                    control={form.control}
                    name="neighborhood"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Bairro</FormLabel>
                        <FormControl><Input {...field} /></FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="city"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Cidade</FormLabel>
                        <FormControl><Input {...field} /></FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                   <FormField
                    control={form.control}
                    name="state"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Estado (UF)</FormLabel>
                        <FormControl><Input {...field} maxLength={2} /></FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
              </section>

              <section>
                 <h3 className="text-lg font-semibold text-primary border-b pb-2">Preferências</h3>
                <FormField
                  control={form.control}
                  name="optInMarketing"
                  render={({ field }) => (
                    <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4 shadow-sm mt-4">
                      <div className="space-y-0.5">
                        <FormLabel>Comunicações de Marketing</FormLabel>
                        <FormDescription>
                          Desejo receber e-mails sobre promoções e novidades do BidExpert.
                        </FormDescription>
                      </div>
                      <FormControl>
                        <Switch
                          checked={field.value}
                          onCheckedChange={field.onChange}
                        />
                      </FormControl>
                    </FormItem>
                  )}
                />
              </section>

            </CardContent>
            <CardFooter className="flex justify-between p-6 border-t">
              <Button type="button" variant="outline" asChild>
                  <Link href="/profile">Cancelar</Link>
                </Button>
              <Button type="submit" disabled={isSubmitting || isFetchingData || authLoading} className="w-full md:w-auto">
                {isSubmitting ? <Loader2 className="animate-spin" /> : <Save className="mr-2 h-4 w-4" />}
                Salvar Alterações
              </Button>
            </CardFooter>
          </form>
        </Form>
      </Card>
    </div>
  );
}

```
- yarn.lock:
```
# This file is intentionally left blank.
# The user's project uses yarn, but the lockfile content is not needed for this interaction.
```
- README.md:
```md
# BidExpert - Powered by Firebase Studio

This is a Next.js starter application built with Firebase Studio. It's designed to provide a robust foundation for an online auction platform, complete with an admin panel, user authentication, and a flexible data layer powered by Prisma.

To get started, take a look at `src/app/page.tsx`.

---

## Database Setup with Prisma

This project uses **Prisma** as its Object-Relational Mapper (ORM) to manage database interactions. It's configured to work with PostgreSQL, but can be adapted for other SQL databases like MySQL.

### 1. Create a `.env.local` File

In the root of your project, create a file named `.env.local`. This file will securely store your database connection string and should not be committed to version control.

### 2. Add Your Database Connection String

Add the `DATABASE_URL` environment variable to your `.env.local` file. You can get the connection string from your database provider's dashboard (e.g., Neon, Supabase, PlanetScale, AWS RDS) or construct it if you're running the database locally.

**Format for PostgreSQL:**
`postgresql://[USER]:[PASSWORD]@[HOST]:[PORT]/[DATABASE_NAME]`

**Example for a local PostgreSQL database:**
```
DATABASE_URL="postgresql://user:password@localhost:5432/bidexpert_db"
```

### 3. Initialize and Seed the Database

Once your connection string is set up, run the following commands in your terminal to prepare your database.

1.  **Apply Migrations:** This command reads your `prisma/schema.prisma` file and creates all the necessary tables in your database.
    ```bash
    npx prisma migrate dev --name init
    ```
    This will also automatically run `prisma generate` to create the Prisma Client based on your schema.

2.  **Seed the Database (Optional):** This command executes the `prisma/seed.ts` script to populate your database with essential data like default user roles, an admin account, and sample data to make development easier.
    ```bash
    npx prisma db seed
    ```

### 4. Start the Development Server

You're all set! Start the Next.js development server.
```bash
npm run dev
```

### Useful Prisma Commands

-   **`npx prisma studio`**: Opens a visual editor for your database in the browser.
-   **`npx prisma generate`**: Manually regenerates the Prisma Client after changes to `schema.prisma`.
-   **`npx prisma migrate dev --name <migration-name>`**: Creates a new migration file after you modify `schema.prisma`.
```
- .firebaserc:
```
{
  "projects": {
    "default": "bidexpert-630df"
  }
}
```
- .gitignore:
```
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
firebase-debug.log*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# env files
.env.local
.env.development.local
.env.test.local
.env.production.local

# firebase emulators
*.log
*.jar
```
- .studioignore:
```
.yarn
node_modules
.next
```
- .yarn/releases/yarn-4.9.2.cjs:
```
#!/usr/bin/env node
"use strict";var __defProp=Object.defineProperty,__defNormalProp=(e,r,t)=>r in e?__defProp(e,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[r]=t,__publicField=(e,r,t)=>__defNormalProp(e,"symbol"!=typeof r?r+"":r,t);!function(){let e=process.argv.slice(2),r=e.indexOf("--");-1!==r&&(process.versions.pnp&&e.splice(r,1),e=e.slice(0,r));let t;try{t=require("pnpapi")}catch{}let n;if(t){let i=e=>e.startsWith("-");for(let a=0,s=e.length;a<s;++a){let l=e[a];if(i(l)){if("--"===l)break;if(l.includes("="))continue}else{let c=t.resolveToUnqualified(l,process.cwd(),{considerBuiltins:!1});if(c!==l){e[a]=c;break}}}}let o={enableColors:!0,enableTimers:!0,enableCapture:!1};for(let i=0,a=e.length;i<a;++i){let s=e[i];"--log-capture"===s?o.enableCapture=!0:"--log-disable-colors"===s?o.enableColors=!1:"--log-disable-timers"===s?o.enableTimers=!1}let i=require("path"),a=require("fs"),s=require("util");function l(e){return a.existsSync(e)&&a.statSync(e).isDirectory()}let c={enable:!1};function u(e){let r,t,n=process.stderr.rows,i=process.stderr.columns;if(!i||!n){let[s,l]=process.env.TERM_PROGRAM==="Hyper"?[34,80]:[24,80];n=n||s,i=i||l}let o=e.split(`
`);for(let s of o)t=Math.max(t||0,Math.ceil(s.length/i));return r=Math.min(n-4,o.length),{width:i,height:r,extraLines:o.length-r,extraRows:t-1}}let f=!process.stdout.isTTY||"true"===process.env.CI;try{let e=i.dirname(t.resolveRequest("node-gyp",null));c={enable:!0,logs:new Set,staged:[],print:function(e,t,n){let i=c.logs;i.add(e),setTimeout(()=>{i.delete(e)},n||2e3);let o=Array.from(i).sort().map(e=>u(e));if(o.length>0){let e=o.reduce((e,r)=>{e.height+=r.height,e.extraLines+=r.extraLines,e.extraRows+=r.extraRows;let t=Math.max(e.width,r.width);return e.width=t,e},Object.assign({},o[0]));if(!f){let n=`\x1b[${e.height+e.extraRows}A`,o="";for(let i=0;i<e.height+e.extraRows;i++)o+="​".repeat(e.width)+`
`;process.stderr.write(o+n)}let i="";for(let[t,n]of o.entries()){t>0&&(i+=`
`),i+=n,i+=`
`.repeat(u(n).extraRows)}process.stderr.write(i+`
`)}}};for(let e of["node-gyp-build","node-pre-gyp"]){let r=i.dirname(t.resolveRequest(e,null)),n=i.join(r,"bin",e.js);a.writeFileSync(n,a.readFileSync(n,"utf8").replace("console.error","process.nextTick(console.error)"))}}catch(e){}let p=!t||process.env.FORCE_YARN_PATH?__filename:t.resolveRequest(process.versions.pnp,process.cwd(),{extensions:[".js",".cjs"]}),d;function g(e){return a.statSync(e).isFile()}if(d=function(){let e=p;for(;;){let r=i.dirname(e);if(r===e)return null;let t=i.join(r,".yarn/releases");if(l(t)){let n=a.readdirSync(t).filter(e=>e.endsWith(".cjs"));if(1===n.length)return i.join(t,n[0])}e=r}}(p),!d){let e=process.env.YARN_GLOBAL_FOLDER;if(null==e||"undefined"==e)if(process.platform==="win32"){let r=process.env.LOCALAPPDATA;null==r||"undefined"==r?e=i.join(process.env.APPDATA,"npm","etc"):e=i.join(r,"npm","etc")}else e="/etc";try{d=a.readFileSync(i.join(e,"yarnrc"),"utf8").match(/^yarn-path "?(.*)"?$/m)[1]}catch{}}d&&(f||!c.enable||(process.stderr.write=function(...e){return c.print(s.format(...e)),!0},process.on("beforeExit",()=>{for(let e of c.staged)e()})),require(d||p))}();
//# sourceMappingURL=yarn-4.9.2.cjs.map
```
- package-lock.json:
```
{
  "name": "nextn",
  "version": "0.1.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "nextn",
      "version": "0.1.0",
      "dependencies": {
        "dotenv": "^16.5.0",
        "react": "^18.3.1"
      }
    },
    "node_modules/dotenv": {
      "version": "16.5.0",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.5.0.tgz",
      "integrity": "sha512-V/3T4dD9K0s1o0H6jH1FkCmzV8qTzCnB8f7s2M4s1i5j2eGj1w5tKIt8+yhbQeZp0eL7DHRq0n1i4w==",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/motdotla/dotenv?sponsor=1"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "peer": true
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKA3S4bDGP/dG1uXspziweJbBHewAoiGuJLGieFl4+yAYzGnP2SMLVRGiMw==",
      "peer": true,
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/react": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react/-/react-18.3.1.tgz",
      "integrity": "sha512-wS+hAgJ0G1htOKI1d2mX0g Sabine testing some changes..an3KysbD0JdaIlNaLwgPLalwVOBP5k1S1JVsEKh0EXny8K9D/o684o1i3sQ3s1+2yBs1//zD3B5x38gTCi10g==",
      "peer": true,
      "dependencies": {
        "loose-envify": "^1.1.0",
        "ws": "^8.18.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ws": {
      "version": "8.18.0",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.18.0.tgz",
      "integrity": "sha512-8VbfWf+i9J3K5pYDBE26IdGlJ4iH0GE02Mb9sX3K32Sj0yS/uO2z+2dO+1k2mN35krpLh59vJDSsRTOcGP25g==",
      "peer": true,
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    }
  }
}
```
- postinstall.js:
```js
// This script is not part of the project.

```
- public/next.svg:
```
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 128 128"><path d="M64 1.25a62.75 62.75 0 1 1-62.75 62.75A62.75 62.75 0 0 1 64 1.25M64 0a64 64 0 1 0 64 64A64 64 0 0 0 64 0z" fill="#000"/><path d="M91.87 23.88H80.54V84.84c-11.49 0-23 0-34.42 0V44H34.63v40.83H23.3v10.45h68.57z" fill="#000"/><path d="M104.7 82.23V23.88H93.38v68.8h11.32z" fill="#000"/></svg>

```
- public/vercel.svg:
```
<svg width="283" height="64" viewBox="0 0 283 64" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M141.04 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.9 4.67-6.5 9.45-6.5 4.79 0 8.21 2.6 9.45 6.5h-18.9zM248.72 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.9 4.67-6.5 9.45-6.5 4.79 0 8.21 2.6 9.45 6.5h-18.9zM200.24 34c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.08 0-10 4-10 10zM282.47 18v18h-8.95V18h8.95zM263.82 2h-8.95v28h8.95V2zM159.97 32l-6-10.39-6 10.39h12zM182.22 2h-8.95v34h8.95V2z" fill="#000"/><path d="M96.5 2h-8.95v34h8.95V2z" fill="#000"/><path d="M49.38 2h-8.95v34h8.95V2z" fill="#000"/><path d="M72.88 32l6-10.39L84.88 32h-12z" fill="#000"/><path d="M38 32L17.74 2H30.5L44 26.7L57.5 2H70.26L50 32h-12z" fill="#000"/><path d="M125.22 32L104.96 2h12.76L131.2 26.7L144.64 2h12.76L137.44 32h-12.22z" fill="#000"/></svg>

```
- storage.rules:
```
rules_version = '2';

// Set up security rules for Firebase Storage
service firebase.storage {
  match /b/{bucket}/o {
    // Public read access for all files
    match /{allPaths=**} {
      allow read;
      allow write: if request.auth != null;
    }
  }
}
```
- .node-version:
```
20.10.0
```
- .npmrc:
```

```
- .yarn/sdks/typescript/lib/typescript.js:
```js
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for the original file, search for this string:
 * "webpack-internal:///"
 */
"use strict";
(self["webpackChunk_arcanist"] = self["webpackChunk_arcanist"] || []).push([["typescript"],{

/***/ "../../../../.yarn/cache/typescript-npm-5.5.3-2f2f70f610-10c0.zip/node_modules/typescript/lib/typescript.js":
/*!*****************************************************************************************************************!*\
  !*** ../../../../.yarn/cache/typescript-npm-5.5.3-2f2f70f610-10c0.zip/node_modules/typescript/lib/typescript.js ***!
  \*****************************************************************************************************************/
/***/ ((module) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for the original file, search for this string:\n * \"webpack-internal:///\"\n */\n\nmodule.exports = require(\"../../../../../../.yarn/unplugged/typescript-npm-5.5.3-2f2f70f610/node_modules/typescript/lib/typescript.js\");\n\n//# sourceURL=webpack-internal:///../../../../.yarn/cache/typescript-npm-5.5.3-2f2f70f610-10c0.zip/node_modules/typescript/lib/typescript.js");

/***/ })

}]);
```
- .yarn/sdks/typescript/lib/tsserver.js:
```js
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for the original file, search for this string:
 * "webpack-internal:///"
 */
"use strict";
(self["webpackChunk_arcanist"] = self["webpackChunk_arcanist"] || []).push([["tsserver"],{

/***/ "../../../../.yarn/cache/typescript-npm-5.5.3-2f2f70f610-10c0.zip/node_modules/typescript/lib/tsserver.js":
/*!***************************************************************************************************************!*\
  !*** ../../../../.yarn/cache/typescript-npm-5.5.3-2f2f70f610-10c0.zip/node_modules/typescript/lib/tsserver.js ***!
  \***************************************************************************************************************/
/***/ ((module) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for the original file, search for this string:\n * \"webpack-internal:///\"\n */\n\nmodule.exports = require(\"../../../../../../.yarn/unplugged/typescript-npm-5.5.3-2f2f70f610/node_modules/typescript/lib/tsserver.js\");\n\n//# sourceURL=webpack-internal:///../../../../.yarn/cache/typescript-npm-5.5.3-2f2f70f610-10c0.zip/node_modules/typescript/lib/tsserver.js");

/***/ })

}]);
```
- .yarn/sdks/eslint/lib/api.js:
```js
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for the original file, search for this string:
 * "webpack-internal:///"
 */
"use strict";
(self["webpackChunk_arcanist"] = self["webpackChunk_arcanist"] || []).push([["eslint/lib/api"],{

/***/ "../../../../.yarn/cache/eslint-npm-8.57.0-9759c381c0-10c0.zip/node_modules/eslint/lib/api.js":
/*!****************************************************************************************************!*\
  !*** ../../../../.yarn/cache/eslint-npm-8.57.0-9759c381c0-10c0.zip/node_modules/eslint/lib/api.js ***!
  \****************************************************************************************************/
/***/ ((module) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for the original file, search for this string:\n * \"webpack-internal:///\"\n */\n\nmodule.exports = require(\"../../../../../../.yarn/unplugged/eslint-npm-8.57.0-9759c381c0/node_modules/eslint/lib/api.js\");\n\n//# sourceURL=webpack-internal:///../../../../.yarn/cache/eslint-npm-8.57.0-9759c381c0-10c0.zip/node_modules/eslint/lib/api.js");

/***/ })

}]);
```
- .yarn/sdks/prettier/index.mjs:
```js
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for the original file, search for this string:
 * "webpack-internal:///"
 */
import { createRequire } from "module";
const require = createRequire(import.meta.url);

const pnpApi = require("pnpapi");

const resolveRequest = (request, issuer) => {
  return pnpApi.resolveRequest(request, issuer);
};

export async function resolve(request, { parentURL }) {
  if (request.startsWith("prettier/")) {
    const resolvedRequest = request.slice("prettier/".length);
    const resolved = resolveRequest(`./${resolvedRequest}`, `${pnpApi.getPackageInformation(pnpApi.topLevel).packageLocation}/`);
    return {
      url: `file://${resolved}`,
    };
  }

  return null;
}
```
- .yarn/sdks/prettier/index.js:
```js
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for the original file, search for this string:
 * "webpack-internal:///"
 */
"use strict";
(self["webpackChunk_arcanist"] = self["webpackChunk_arcanist"] || []).push([["prettier/index"],{

/***/ "../../../../.yarn/cache/prettier-npm-3.2.5-9e0996a147-10c0.zip/node_modules/prettier/index.mjs":
/*!*******************************************************************************************************!*\
  !*** ../../../../.yarn/cache/prettier-npm-3.2.5-9e0996a147-10c0.zip/node_modules/prettier/index.mjs ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport default from dynamic */ _yarn_unplugged_prettier_npm_3_2_5_9e0996a147_node_modules_prettier_index_mjs__WEBPACK_IMPORTED_MODULE_0___default.a)\n/* harmony export */ });\n/* harmony import */ var _yarn_unplugged_prettier_npm_3_2_5_9e0996a147_node_modules_prettier_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../.yarn/unplugged/prettier-npm-3.2.5-9e0996a147/node_modules/prettier/index.mjs */ \"../../../../.yarn/unplugged/prettier-npm-3.2.5-9e0996a147/node_modules/prettier/index.mjs\");\n/* harmony import */ var _yarn_unplugged_prettier_npm_3_2_5_9e0996a147_node_modules_prettier_index_mjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_yarn_unplugged_prettier_npm_3_2_5_9e0996a147_node_modules_prettier_index_mjs__WEBPACK_IMPORTED_MODULE_0__);\n\n\n//# sourceURL=webpack-internal:///../../../../.yarn/cache/prettier-npm-3.2.5-9e0996a147-10c0.zip/node_modules/prettier/index.mjs");

/***/ })

}]);
```
- .yarn/sdks/integrations.yml:
```yml
eslint:
  plugins:
    - '@yarnpkg/eslint-plugin'

prettier:
  plugins:
    - '@yarnpkg/prettier-plugin-manifest'

typescript:
  plugins:
    - '@yarnpkg/typescript-plugin'
```
- .yarn/plugins/@yarnpkg/plugin-typescript.cjs:
```js
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for the original file, search for this string:
 * "webpack-internal:///"
 */
"use strict";
(self["webpackChunk_arcanist"] = self["webpackChunk_arcanist"] || []).push([["plugin-typescript"],{

/***/ "../../../../.yarn/cache/@yarnpkg-plugin-typescript-npm-4.0.0-rc.56-591b6540fa-10c0.zip/node_modules/@yarnpkg/plugin-typescript/lib/index.js":
/*!**************************************************************************************************************************************************!*\
  !*** ../../../../.yarn/cache/@yarnpkg-plugin-typescript-npm-4.0.0-rc.56-591b6540fa-10c0.zip/node_modules/@yarnpkg/plugin-typescript/lib/index.js ***!
  \**************************************************************************************************************************************************/
/***/ ((module) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for the original file, search for this string:\n * \"webpack-internal:///\"\n */\n\nmodule.exports = require(\"../../../../../../.yarn/unplugged/@yarnpkg-plugin-typescript-npm-4.0.0-rc.56-591b6540fa/node_modules/@yarnpkg/plugin-typescript/lib/index.js\");\n\n//# sourceURL=webpack-internal:///../../../../.yarn/cache/@yarnpkg-plugin-typescript-npm-4.0.0-rc.56-591b6540fa-10c0.zip/node_modules/@yarnpkg/plugin-typescript/lib/index.js");

/***/ })

}]);
```
- .yarn/plugins/@yarnpkg/plugin-essentials.cjs:
```js
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for the original file, search for this string:
 * "webpack-internal:///"
 */
"use strict";
(self["webpackChunk_arcanist"] = self["webpackChunk_arcanist"] || []).push([["plugin-essentials"],{

/***/ "../../../../.yarn/cache/@yarnpkg-plugin-essentials-npm-4.0.0-rc.56-e1758c54c3-10c0.zip/node_modules/@yarnpkg/plugin-essentials/lib/index.js":
/*!**************************************************************************************************************************************************!*\
  !*** ../../../../.yarn/cache/@yarnpkg-plugin-essentials-npm-4.0.0-rc.56-e1758c54c3-10c0.zip/node_modules/@yarnpkg/plugin-essentials/lib/index.js ***!
  \**************************************************************************************************************************************************/
/***/ ((module) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for the original file, search for this string:\n * \"webpack-internal:///\"\n */\n\nmodule.exports = require(\"../../../../../../.yarn/unplugged/@yarnpkg-plugin-essentials-npm-4.0.0-rc.56-e1758c54c3/node_modules/@yarnpkg/plugin-essentials/lib/index.js\");\n\n//# sourceURL=webpack-internal:///../../../../.yarn/cache/@yarnpkg-plugin-essentials-npm-4.0.0-rc.56-e1758c54c3-10c0.zip/node_modules/@yarnpkg/plugin-essentials/lib/index.js");

/***/ })

}]);
```
- .yarn/plugins/@yarnpkg/plugin-compat.cjs:
```js
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for the original file, search for this string:
 * "webpack-internal:///"
 */
"use strict";
(self["webpackChunk_arcanist"] = self["webpackChunk_arcanist"] || []).push([["plugin-compat"],{

/***/ "../../../../.yarn/cache/@yarnpkg-plugin-compat-npm-4.0.0-rc.56-2e423d2050-10c0.zip/node_modules/@yarnpkg/plugin-compat/lib/index.js":
/*!******************************************************************************************************************************************!*\
  !*** ../../../../.yarn/cache/@yarnpkg-plugin-compat-npm-4.0.0-rc.56-2e423d2050-10c0.zip/node_modules/@yarnpkg/plugin-compat/lib/index.js ***!
  \******************************************************************************************************************************************/
/***/ ((module) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for the original file, search for this string:\n * \"webpack-internal:///\"\n */\n\nmodule.exports = require(\"../../../../../../.yarn/unplugged/@yarnpkg-plugin-compat-npm-4.0.0-rc.56-2e423d2050/node_modules/@yarnpkg/plugin-compat/lib/index.js\");\n\n//# sourceURL=webpack-internal:///../../../../.yarn/cache/@yarnpkg-plugin-compat-npm-4.0.0-rc.56-2e423d2050-10c0.zip/node_modules/@yarnpkg/plugin-compat/lib/index.js");

/***/ })

}]);
```
- .prettierignore:
```
# Ignore artifacts:
build
coverage
dist

# Ignore locally-run things:
.next
node_modules
out

# Ignore yarn files
.yarn/releases/
.yarn/plugins/
.pnp.*
```
- .prettierrc:
```
{
  "singleQuote": true,
  "trailingComma": "es5"
}

```
- .nvmrc:
```
lts/iron
```
- .eslintrc.js:
```js
module.exports = {
  extends: ['next/core-web-vitals', 'prettier'],
};

```
- .firebaserc:
```
{
  "projects": {
    "default": "bidexpert-630df"
  }
}
```
- .gitignore:
```
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
firebase-debug.log*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# env files
.env.local
.env.development.local
.env.test.local
.env.production.local

# firebase emulators
*.log
*.jar
```
- .studioignore:
```
.yarn
node_modules
.next
```
- .yarn/releases/yarn-4.9.2.cjs:
```
#!/usr/bin/env node
"use strict";var __defProp=Object.defineProperty,__defNormalProp=(e,r,t)=>r in e?__defProp(e,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[r]=t,__publicField=(e,r,t)=>__defNormalProp(e,"symbol"!=typeof r?r+"":r,t);!function(){let e=process.argv.slice(2),r=e.indexOf("--");-1!==r&&(process.versions.pnp&&e.splice(r,1),e=e.slice(0,r));let t;try{t=require("pnpapi")}catch{}let n;if(t){let i=e=>e.startsWith("-");for(let a=0,s=e.length;a<s;++a){let l=e[a];if(i(l)){if("--"===l)break;if(l.includes("="))continue}else{let c=t.resolveToUnqualified(l,process.cwd(),{considerBuiltins:!1});if(c!==l){e[a]=c;break}}}}let o={enableColors:!0,enableTimers:!0,enableCapture:!1};for(let i=0,a=e.length;i<a;++i){let s=e[i];"--log-capture"===s?o.enableCapture=!0:"--log-disable-colors"===s?o.enableColors=!1:"--log-disable-timers"===s?o.enableTimers=!1}let i=require("path"),a=require("fs"),s=require("util");function l(e){return a.existsSync(e)&&a.statSync(e).isDirectory()}let c={enable:!1};function u(e){let r,t,n=process.stderr.rows,i=process.stderr.columns;if(!i||!n){let[s,l]=process.env.TERM_PROGRAM==="Hyper"?[34,80]:[24,80];n=n||s,i=i||l}let o=e.split(`
`);for(let s of o)t=Math.max(t||0,Math.ceil(s.length/i));return r=Math.min(n-4,o.length),{width:i,height:r,extraLines:o.length-r,extraRows:t-1}}let f=!process.stdout.isTTY||"true"===process.env.CI;try{let e=i.dirname(t.resolveRequest("node-gyp",null));c={enable:!0,logs:new Set,staged:[],print:function(e,t,n){let i=c.logs;i.add(e),setTimeout(()=>{i.delete(e)},n||2e3);let o=Array.from(i).sort().map(e=>u(e));if(o.length>0){let e=o.reduce((e,r)=>{e.height+=r.height,e.extraLines+=r.extraLines,e.extraRows+=r.extraRows;let t=Math.max(e.width,r.width);return e.width=t,e},Object.assign({},o[0]));if(!f){let n=`\x1b[${e.height+e.extraRows}A`,o="";for(let i=0;i<e.height+e.extraRows;i++)o+="​".repeat(e.width)+`
`;process.stderr.write(o+n)}let i="";for(let[t,n]of o.entries()){t>0&&(i+=`
`),i+=n,i+=`
`.repeat(u(n).extraRows)}process.stderr.write(i+`
`)}}};for(let e of["node-gyp-build","node-pre-gyp"]){let r=i.dirname(t.resolveRequest(e,null)),n=i.join(r,"bin",e.js);a.writeFileSync(n,a.readFileSync(n,"utf8").replace("console.error","process.nextTick(console.error)"))}}catch(e){}let p=!t||process.env.FORCE_YARN_PATH?__filename:t.resolveRequest(process.versions.pnp,process.cwd(),{extensions:[".js",".cjs"]}),d;function g(e){return a.statSync(e).isFile()}if(d=function(){let e=p;for(;;){let r=i.dirname(e);if(r===e)return null;let t=i.join(r,".yarn/releases");if(l(t)){let n=a.readdirSync(t).filter(e=>e.endsWith(".cjs"));if(1===n.length)return i.join(t,n[0])}e=r}}(p),!d){let e=process.env.YARN_GLOBAL_FOLDER;if(null==e||"undefined"==e)if(process.platform==="win32"){let r=process.env.LOCALAPPDATA;null==r||"undefined"==r?e=i.join(process.env.APPDATA,"npm","etc"):e=i.join(r,"npm","etc")}else e="/etc";try{d=a.readFileSync(i.join(e,"yarnrc"),"utf8").match(/^yarn-path "?(.*)"?$/m)[1]}catch{}}d&&(f||!c.enable||(process.stderr.write=function(...e){return c.print(s.format(...e)),!0},process.on("beforeExit",()=>{for(let e of c.staged)e()})),require(d||p))}();
//# sourceMappingURL=yarn-4.9.2.cjs.map
```
- package-lock.json:
```
{
  "name": "nextn",
  "version": "0.1.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "nextn",
      "version": "0.1.0",
      "dependencies": {
        "dotenv": "^16.5.0",
        "react": "^18.3.1"
      }
    },
    "node_modules/dotenv": {
      "version": "16.5.0",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.5.0.tgz",
      "integrity": "sha512-V/3T4dD9K0s1o0H6jH1FkCmzV8qTzCnB8f7s2M4s1i5j2eGj1w5tKIt8+yhbQeZp0eL7DHRq0n1i4w==",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/motdotla/dotenv?sponsor=1"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "peer": true
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKA3S4bDGP/dG1uXspziweJbBHewAoiGuJLGieFl4+yAYzGnP2SMLVRGiMw==",
      "peer": true,
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/react": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react/-/react-18.3.1.tgz",
      "integrity": "sha512-wS+hAgJ0G1htOKI1d2mX0g Sabine testing some changes..an3KysbD0JdaIlNaLwgPLalwVOBP5k1S1JVsEKh0EXny8K9D/o684o1i3sQ3s1+2yBs1//zD3B5x38gTCi10g==",
      "peer": true,
      "dependencies": {
        "loose-envify": "^1.1.0",
        "ws": "^8.18.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ws": {
      "version": "8.18.0",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.18.0.tgz",
      "integrity": "sha512-8VbfWf+i9J3K5pYDBE26IdGlJ4iH0GE02Mb9sX3K32Sj0yS/uO2z+2dO+1k2mN35krpLh59vJDSsRTOcGP25g==",
      "peer": true,
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    }
  }
}
```
- postinstall.js:
```js
// This script is not part of the project.
```
- public/next.svg:
```
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 128 128"><path d="M64 1.25a62.75 62.75 0 1 1-62.75 62.75A62.75 62.75 0 0 1 64 1.25M64 0a64 64 0 1 0 64 64A64 64 0 0 0 64 0z" fill="#000"/><path d="M91.87 23.88H80.54V84.84c-11.49 0-23 0-34.42 0V44H34.63v40.83H23.3v10.45h68.57z" fill="#000"/><path d="M104.7 82.23V23.88H93.38v68.8h11.32z" fill="#000"/></svg>
```
- public/vercel.svg:
```
<svg width="283" height="64" viewBox="0 0 283 64" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M141.04 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.9 4.67-6.5 9.45-6.5 4.79 0 8.21 2.6 9.45 6.5h-18.9zM248.72 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.9 4.67-6.5 9.45-6.5 4.79 0 8.21 2.6 9.45 6.5h-18.9zM200.24 34c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.08 0-10 4-10 10zM282.47 18v18h-8.95V18h8.95zM263.82 2h-8.95v28h8.95V2zM159.97 32l-6-10.39-6 10.39h12zM182.22 2h-8.95v34h8.95V2z" fill="#000"/><path d="M96.5 2h-8.95v34h8.95V2z" fill="#000"/><path d="M49.38 2h-8.95v34h8.95V2z" fill="#000"/><path d="M72.88 32l6-10.39L84.88 32h-12z" fill="#000"/><path d="M38 32L17.74 2H30.5L44 26.7L57.5 2H70.26L50 32h-12z" fill="#000"/><path d="M125.22 32L104.96 2h12.76L131.2 26.7L144.64 2h12.76L137.44 32h-12.22z" fill="#000"/></svg>
```
- storage.rules:
```
rules_version = '2';

// Set up security rules for Firebase Storage
service firebase.storage {
  match /b/{bucket}/o {
    // Public read access for all files
    match /{allPaths=**} {
      allow read;
      allow write: if request.auth != null;
    }
  }
}
```
- .node-version:
```
20.10.0
```
- .npmrc:
```

```
- .yarn/sdks/typescript/lib/typescript.js:
```js
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for the original file, search for this string:
 * "webpack-internal:///"
 */
"use strict";
(self["webpackChunk_arcanist"] = self["webpackChunk_arcanist"] || []).push([["typescript"],{

/***/ "../../../../.yarn/cache/typescript-npm-5.5.3-2f2f70f610-10c0.zip/node_modules/typescript/lib/typescript.js":
/*!*****************************************************************************************************************!*\
  !*** ../../../../.yarn/cache/typescript-npm-5.5.3-2f2f70f610-10c0.zip/node_modules/typescript/lib/typescript.js ***!
  \*****************************************************************************************************************/
/***/ ((module) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for the original file, search for this string:\n * \"webpack-internal:///\"\n */\n\nmodule.exports = require(\"../../../../../../.yarn/unplugged/typescript-npm-5.5.3-2f2f70f610/node_modules/typescript/lib/typescript.js\");\n\n//# sourceURL=webpack-internal:///../../../../.yarn/cache/typescript-npm-5.5.3-2f2f70f610-10c0.zip/node_modules/typescript/lib/typescript.js");

/***/ })

}]);
```
- .yarn/sdks/typescript/lib/tsserver.js:
```js
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for the original file, search for this string:
 * "webpack-internal:///"
 */
"use strict";
(self["webpackChunk_arcanist"] = self["webpackChunk_arcanist"] || []).push([["tsserver"],{

/***/ "../../../../.yarn/cache/typescript-npm-5.5.3-2f2f70f610-10c0.zip/node_modules/typescript/lib/tsserver.js":
/*!***************************************************************************************************************!*\
  !*** ../../../../.yarn/cache/typescript-npm-5.5.3-2f2f70f610-10c0.zip/node_modules/typescript/lib/tsserver.js ***!
  \***************************************************************************************************************/
/***/ ((module) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for the original file, search for this string:\n * \"webpack-internal:///\"\n */\n\nmodule.exports = require(\"../../../../../../.yarn/unplugged/typescript-npm-5.5.3-2f2f70f610/node_modules/typescript/lib/tsserver.js\");\n\n//# sourceURL=webpack-internal:///../../../../.yarn/cache/typescript-npm-5.5.3-2f2f70f610-10c0.zip/node_modules/typescript/lib/tsserver.js");

/***/ })

}]);
```
- .yarn/sdks/eslint/lib/api.js:
```js
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for the original file, search for this string:
 * "webpack-internal:///"
 */
"use strict";
(self["webpackChunk_arcanist"] = self["webpackChunk_arcanist"] || []).push([["eslint/lib/api"],{

/***/ "../../../../.yarn/cache/eslint-npm-8.57.0-9759c381c0-10c0.zip/node_modules/eslint/lib/api.js":
/*!****************************************************************************************************!*\
  !*** ../../../../.yarn/cache/eslint-npm-8.57.0-9759c381c0-10c0.zip/node_modules/eslint/lib/api.js ***!
  \****************************************************************************************************/
/***/ ((module) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for the original file, search for this string:\n * \"webpack-internal:///\"\n */\n\nmodule.exports = require(\"../../../../../../.yarn/unplugged/eslint-npm-8.57.0-9759c381c0/node_modules/eslint/lib/api.js\");\n\n//# sourceURL=webpack-internal:///../../../../.yarn/cache/eslint-npm-8.57.0-9759c381c0-10c0.zip/node_modules/eslint/lib/api.js");

/***/ })

}]);
```
- .yarn/sdks/prettier/index.mjs:
```js
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for the original file, search for this string:
 * "webpack-internal:///"
 */
import { createRequire } from "module";
const require = createRequire(import.meta.url);

const pnpApi = require("pnpapi");

const resolveRequest = (request, issuer) => {
  return pnpApi.resolveRequest(request, issuer);
};

export async function resolve(request, { parentURL }) {
  if (request.startsWith("prettier/")) {
    const resolvedRequest = request.slice("prettier/".length);
    const resolved = resolveRequest(`./${resolvedRequest}`, `${pnpApi.getPackageInformation(pnpApi.topLevel).packageLocation}/`);
    return {
      url: `file://${resolved}`,
    };
  }

  return null;
}
```
- .yarn/sdks/prettier/index.js:
```js
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for the original file, search for this string:
 * "webpack-internal:///"
 */
"use strict";
(self["webpackChunk_arcanist"] = self["webpackChunk_arcanist"] || []).push([["prettier/index"],{

/***/ "../../../../.yarn/cache/prettier-npm-3.2.5-9e0996a147-10c0.zip/node_modules/prettier/index.mjs":
/*!*******************************************************************************************************!*\
  !*** ../../../../.yarn/cache/prettier-npm-3.2.5-9e0996a147-10c0.zip/node_modules/prettier/index.mjs ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport default from dynamic */ _yarn_unplugged_prettier_npm_3_2_5_9e0996a147_node_modules_prettier_index_mjs__WEBPACK_IMPORTED_MODULE_0___default.a)\n/* harmony export */ });\n/* harmony import */ var _yarn_unplugged_prettier_npm_3_2_5_9e0996a147_node_modules_prettier_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../.yarn/unplugged/prettier-npm-3.2.5-9e0996a147/node_modules/prettier/index.mjs */ \"../../../../.yarn/unplugged/prettier-npm-3.2.5-9e0996a147/node_modules/prettier/index.mjs\");\n/* harmony import */ var _yarn_unplugged_prettier_npm_3_2_5_9e0996a147_node_modules_prettier_index_mjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_yarn_unplugged_prettier_npm_3_2_5_9e0996a147_node_modules_prettier_index_mjs__WEBPACK_IMPORTED_MODULE_0__);\n\n\n//# sourceURL=webpack-internal:///../../../../.yarn/cache/prettier-npm-3.2.5-9e0996a147-10c0.zip/node_modules/prettier/index.mjs");

/***/ })

}]);
```
- .yarn/sdks/integrations.yml:
```yml
eslint:
  plugins:
    - '@yarnpkg/eslint-plugin'

prettier:
  plugins:
    - '@yarnpkg/prettier-plugin-manifest'

typescript:
  plugins:
    - '@yarnpkg/typescript-plugin'
```
- .yarn/plugins/@yarnpkg/plugin-typescript.cjs:
```js
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for the original file, search for this string:
 * "webpack-internal:///"
 */
"use strict";
(self["webpackChunk_arcanist"] = self["webpackChunk_arcanist"] || []).push([["plugin-typescript"],{

/***/ "../../../../.yarn/cache/@yarnpkg-plugin-typescript-npm-4.0.0-rc.56-591b6540fa-10c0.zip/node_modules/@yarnpkg/plugin-typescript/lib/index.js":
/*!**************************************************************************************************************************************************!*\
  !*** ../../../../.yarn/cache/@yarnpkg-plugin-typescript-npm-4.0.0-rc.56-591b6540fa-10c0.zip/node_modules/@yarnpkg/plugin-typescript/lib/index.js ***!
  \**************************************************************************************************************************************************/
/***/ ((module) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for the original file, search for this string:\n * \"webpack-internal:///\"\n */\n\nmodule.exports = require(\"../../../../../../.yarn/unplugged/@yarnpkg-plugin-typescript-npm-4.0.0-rc.56-591b6540fa/node_modules/@yarnpkg/plugin-typescript/lib/index.js\");\n\n//# sourceURL=webpack-internal:///../../../../.yarn/cache/@yarnpkg-plugin-typescript-npm-4.0.0-rc.56-591b6540fa-10c0.zip/node_modules/@yarnpkg/plugin-typescript/lib/index.js");

/***/ })

}]);
```
- .yarn/plugins/@yarnpkg/plugin-essentials.cjs:
```js
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for the original file, search for this string:
 * "webpack-internal:///"
 */
"use strict";
(self["webpackChunk_arcanist"] = self["webpackChunk_arcanist"] || []).push([["plugin-essentials"],{

/***/ "../../../../.yarn/cache/@yarnpkg-plugin-essentials-npm-4.0.0-rc.56-e1758c54c3-10c0.zip/node_modules/@yarnpkg/plugin-essentials/lib/index.js":
/*!**************************************************************************************************************************************************!*\
  !*** ../../../../.yarn/cache/@yarnpkg-plugin-essentials-npm-4.0.0-rc.56-e1758c54c3-10c0.zip/node_modules/@yarnpkg/plugin-essentials/lib/index.js ***!
  \**************************************************************************************************************************************************/
/***/ ((module) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for the original file, search for this string:\n * \"webpack-internal:///\"\n */\n\nmodule.exports = require(\"../../../../../../.yarn/unplugged/@yarnpkg-plugin-essentials-npm-4.0.0-rc.56-e1758c54c3/node_modules/@yarnpkg/plugin-essentials/lib/index.js\");\n\n//# sourceURL=webpack-internal:///../../../../.yarn/cache/@yarnpkg-plugin-essentials-npm-4.0.0-rc.56-e1758c54c3-10c0.zip/node_modules/@yarnpkg/plugin-essentials/lib/index.js");

/***/ })

}]);
```
- .yarn/plugins/@yarnpkg/plugin-compat.cjs:
```js
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for the original file, search for this string:
 * "webpack-internal:///"
 */
"use strict";
(self["webpackChunk_arcanist"] = self["webpackChunk_arcanist"] || []).push([["plugin-compat"],{

/***/ "../../../../.yarn/cache/@yarnpkg-plugin-compat-npm-4.0.0-rc.56-2e423d2050-10c0.zip/node_modules/@yarnpkg/plugin-compat/lib/index.js":
/*!******************************************************************************************************************************************!*\
  !*** ../../../../.yarn/cache/@yarnpkg-plugin-compat-npm-4.0.0-rc.56-2e423d2050-10c0.zip/node_modules/@yarnpkg/plugin-compat/lib/index.js ***!
  \******************************************************************************************************************************************/
/***/ ((module) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for the original file, search for this string:\n * \"webpack-internal:///\"\n */\n\nmodule.exports = require(\"../../../../../../.yarn/unplugged/@yarnpkg-plugin-compat-npm-4.0.0-rc.56-2e423d2050/node_modules/@yarnpkg/plugin-compat/lib/index.js\");\n\n//# sourceURL=webpack-internal:///../../../../.yarn/cache/@yarnpkg-plugin-compat-npm-4.0.0-rc.56-2e423d2050-10c0.zip/node_modules/@yarnpkg/plugin-compat/lib/index.js");

/***/ })

}]);
```
- .prettierignore:
```
# Ignore artifacts:
build
coverage
dist

# Ignore locally-run things:
.next
node_modules
out

# Ignore yarn files
.yarn/releases/
.yarn/plugins/
.pnp.*
```
- .prettierrc:
```
{
  "singleQuote": true,
  "trailingComma": "es5"
}
```
- .nvmrc:
```
lts/iron
```
- .eslintrc.js:
```js
module.exports = {
  extends: ['next/core-web-vitals', 'prettier'],
};
```
- .env:
```

```
- .vscode/extensions.json:
```json
{
    "recommendations": [
        "googlecloudtools.firebase-dataconnect-vscode",
        "anthropic.claude-code"
    ]
}
```
- .vscode/settings.json:
```json
{
    "IDX.aI.enableInlineCompletion": true,
    "IDX.aI.enableCodebaseIndexing": true
}
```
- .yarnrc.yml:
```yml
nodeLinker: node-modules

yarnPath: .yarn/releases/yarn-4.9.2.cjs
```
- README.md:
```md
# BidExpert - Powered by Firebase Studio

This is a Next.js starter application built with Firebase Studio. It's designed to provide a robust foundation for an online auction platform, complete with an admin panel, user authentication, and a flexible data layer powered by Prisma.

To get started, take a look at `src/app/page.tsx`.

---

## Database Setup with Prisma

This project uses **Prisma** as its Object-Relational Mapper (ORM) to manage database interactions. It's configured to work with PostgreSQL, but can be adapted for other SQL databases like MySQL.

### 1. Create a `.env.local` File

In the root of your project, create a file named `.env.local`. This file will securely store your database connection string and should not be committed to version control.

### 2. Add Your Database Connection String

Add the `DATABASE_URL` environment variable to your `.env.local` file. You can get the connection string from your database provider's dashboard (e.g., Neon, Supabase, PlanetScale, AWS RDS) or construct it if you're running the database locally.

**Format for PostgreSQL:**
`postgresql://[USER]:[PASSWORD]@[HOST]:[PORT]/[DATABASE_NAME]`

**Example for a local PostgreSQL database:**
```
DATABASE_URL="postgresql://user:password@localhost:5432/bidexpert_db"
```

### 3. Initialize and Seed the Database

Once your connection string is set up, run the following commands in your terminal to prepare your database.

1.  **Apply Migrations:** This command reads your `prisma/schema.prisma` file and creates all the necessary tables in your database.
    ```bash
    npx prisma migrate dev --name init
    ```
    This will also automatically run `prisma generate` to create the Prisma Client based on your schema.

2.  **Seed the Database (Optional):** This command executes the `prisma/seed.ts` script to populate your database with essential data like default user roles, an admin account, and sample data to make development easier.
    ```bash
    npx prisma db seed
    ```

### 4. Start the Development Server

You're all set! Start the Next.js development server.
```bash
npm run dev
```

### Useful Prisma Commands

-   **`npx prisma studio`**: Opens a visual editor for your database in the browser.
-   **`npx prisma generate`**: Manually regenerates the Prisma Client after changes to `schema.prisma`.
-   **`npx prisma migrate dev --name <migration-name>`**: Creates a new migration file after you modify `schema.prisma`.
```
- apphosting.yaml:
```yaml
# Settings to manage and configure a Firebase App Hosting backend.
# https://firebase.google.com/docs/app-hosting/configure

runConfig:
  # Increase this value if you'd like to automatically spin up
  # more instances in response to increased traffic.
  maxInstances: 1
```
- bidexpert-630df-firebase-adminsdk-fbsvc-a827189ca4.json:
```json
{
  "type": "service_account",
  "project_id": "bidexpert-630df",
  "private_key_id": "a827189ca470c6311b1ddfaa790ad7e7a39616b2",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDblAXgGhFU/R7x\n/KuwVYveh4jX89LWvo/jg2PpDElj3T2WJXWh7CwfDOHRLiafkdV5ZKSquynh4009\nBB2EkGo13a/sVBjNmjKE9xlhxmkXj1C+d4T97ft29IjFmGBJ+2UWz7DJ4kc2G7uS\nYMr9YaPQRKKUgAeyfBNlNOBRtBsEiTVeC2F60+aCCwyCvSaW8evtGU8vAdklGE0U\n9Yq/GgI33zIl6cbwyocgppN2Vf9ZyqGqJpX6rlxMwpCburuaNm6Jb6cUtQbdx4iv\nYgoPZLKIv+OARGIDyOOMy492DvRFWecqRH2wG18dohgvpdWHeOgm4dkhCprcc+EJ\n1Y6/zAklAgMBAAECggEAUW3jf+gq5Um5YCRDx3DyHeRFa1CQr/KbidQACTz1OoOh\ngz0BErty4VD1rY1f5W0/rXUVW/ts3MherHIKQE8OFEvSIeJOEHFOquC4GPprnsEX\nQIsyVrkauFKXJjAMBWOlaYA8H6I6pmZCeVZL8Qt0pJfPcyLHt/kreCzTw3j3TAal\n5+Z4JygrC+ywcrgSzSbQtCGtr7fVE3e1X/c2iUS+TB+h66IyAB1ExOPZu2iFBwSi\nZKTcMS54DDsrcIefMVr9AP72MNqkZOL+nnvFcK6VVwr46ovAwiL+PvxhkKRVMigx\nXHUnOtJCvp41xtLOf89hLV0rRTgXcHovPEhNhGoNQQKBgQD+m3YIrK7nixi3NsWa\nCcIt56qOXjeY4aSE9a+1Q4x7sWmwbhwoeSPLnCfZ+fjfpYOzqGkhxo/UQ4FkQhYC\nHeTVChNUg6UvOfO/MM6h4Vn7apCIG9wf/peCxhOqGujwdfr1hGY4ie+KoVdvSSs4\nkf4CrOU5oh31kk/KYVmdg3Q19wKBgQDcx4JNXr3Uyd36of8+TDNN1QnzspCQB1H7\ncY1kOV6YCx2Nu837IrgKMwDYgOPx3k7rjLPWuytpQCl/e1FN3iDpQWIlO8ak6rOP\ngP6NS1LzuuqYrgGr4Wyyfk5jnil+GIqOgI3Xb2H0VCvFqo9JVuny0yhZssv8VJKm\nArzkdj0CwwKBgQCafgzOULJE76NMsSCQSrGYF0Xn44XK78hboZU/4UAiYlHma7oM\nWQ1+ZD/ORZ9dXdqfrmY0x37I5zlhc7RVDnynRNjb5JHcKUcdUWlg0xQ9ubj/zh/x\nDhQzlyuhgXitSHnCdtdsIU7ICQS8E2L1jajbSLxDD3ssYt6lyBKPwI9ImwKBgQDH\n8mO+4FO5l8zShM4dxHMeRRdLPmeQGSEVQISVxSM3PbHZP8HPdGUKz6Avc6N81CHT\nT807Zq1tF6+9hZhflhFmTlGteNJxXyGZkHB41EPe+mQmPEjFOlXv3VXvADmBuoYZ\ngrFy76vd1DEERnCYMf+Ua8n6WmRFNO7PLGGX4sFkcwKBgByKZNOxVjqcwx1cQ0Lx\nU6LqN1+AXQygioSXQoZDFHk+IITrqZEbw6LAwvS4wRfeJf2NFWluh6qDnfLYGsmm\nzFhVG7WYdmz77H84p74dV6S0Lbp9c23mnr5HQtfo2t2c0JAOaZ6VGmVLGiJzClYh\nec3mKika62BlLb8TCqCNgQR7\n-----END PRIVATE KEY-----\n",
  "client_email": "firebase-adminsdk-fbsvc@bidexpert-630df.iam.gserviceaccount.com",
  "client_id": "109586758228480352128",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-fbsvc%40bidexpert-630df.iam.gserviceaccount.com",
  "universe_domain": "googleapis.com"
}
```
- components.json:
```json
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
```
- context/1st.md:
```md

Olá! Parece que estamos iniciando uma nova sessão ou continuando uma anterior.

Para que eu possa me atualizar sobre o estado atual do nosso projeto BidExpert e garantir que estamos alinhados, por favor, me dê um momento para revisar os arquivos de contexto que preparamos.

Estou lendo:
*   `context/PROJECT_CONTEXT_HISTORY.md` (para o histórico do projeto, funcionalidades implementadas e decisões tomadas)
*   `context/PROJECT_PROGRESS.MD` (para o progresso atual das tarefas e os próximos passos definidos)
*   `context/PROJECT_INSTRUCTIONS.md` (para me lembrar de como devemos utilizar este sistema de contexto)

Após revisar estes arquivos, confirmarei que estou pronto para continuarmos. Se houver alguma informação adicional ou um foco específico que você gostaria de me dar para esta sessão, por favor, me avise após minha confirmação.
```
- dataconnect/dataconnect.yaml:
```yaml
# This file is intentionally left empty to avoid conflicts with the root dataconnect.yaml.
```
- dataconnect.yaml:
```yaml
# Arquivo de configuração para Firebase Data Connect (opcional).
# Este arquivo existe para silenciar avisos do Firebase CLI.
schema: {}
```
- firebase.json:
```json
{
  "storage": {
    "rules": "storage.rules"
  }
}
```
- firestore.indexes.json:
```json
{
  "indexes": [],
  "fieldOverrides": []
}
```
- lib/database/firestore.adapter.ts:
```ts
// This file is now obsolete and will be deleted.
// The project now uses Prisma as its ORM.
```
- lib/database/index.ts:
```ts
// This file is now obsolete and will be deleted.
// The database adapter selection logic has been removed.
```
- lib/database/mysql.adapter.ts:
```ts
// This file is now obsolete and will be deleted.
// The project now uses Prisma as its ORM.
```
- lib/database/postgres.adapter.ts:
```ts
// This file is now obsolete and will be deleted.
// The project now uses Prisma as its ORM.
```
- next-env.d.ts:
```ts
/// <reference types="next" />
/// <reference types="next/image-types/global" />
/// <reference types="next/navigation-types/compat/navigation" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.
```
- next.config.ts:
```ts

import type {NextConfig} from 'next';

const nextConfig: NextConfig = {
  /* config options here */
  typescript: {
    ignoreBuildErrors: true,
  },
  eslint: {
    ignoreDuringBuilds: true,
  },
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'placehold.co',
        port: '',
        pathname: '/**',
      },
      {
        protocol: 'https',
        hostname: 'images.unsplash.com',
        port: '',
        pathname: '/**',
      },
    ],
  },
  experimental: {
    allowedDevOrigins: [
      "https://*.cluster-ve345ymguzcd6qqzuko2qbxtfe.cloudworkstations.dev"
    ],
  }
};

export default nextConfig;
```
- package.json:
```json
{
  "name": "nextn",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "dotenv -- npx prisma migrate dev && next dev",
    "genkit:dev": "genkit start -- tsx /home/user/studio/src/ai/dev.ts",
    "genkit:watch": "genkit start -- tsx --watch src/ai/dev.ts",
    "build": "prisma generate && next build",
    "start": "next start",
    "lint": "next lint",
    "typecheck": "tsc --noEmit",
    "db:generate": "prisma generate",
    "db:migrate": "prisma migrate dev",
    "db:studio": "prisma studio",
    "db:seed": "prisma db seed",
    "postinstall": "prisma generate"
  },
  "prisma": {
    "seed": "tsx prisma/seed.ts"
  },
  "dependencies": {
    "@genkit-ai/googleai": "^1.8.0",
    "@genkit-ai/next": "^1.8.0",
    "@hookform/resolvers": "^4.1.3",
    "@opentelemetry/exporter-jaeger": "^1.25.0",
    "@prisma/client": "^5.22.0",
    "@radix-ui/react-accordion": "^1.2.3",
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-menubar": "^1.1.6",
    "@radix-ui/react-navigation-menu": "^1.2.0",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-progress": "^1.1.2",
    "@radix-ui/react-radio-group": "^1.2.3",
    "@radix-ui/react-scroll-area": "^1.2.3",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slider": "^1.2.3",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-tabs": "^1.1.3",
    "@radix-ui/react-toast": "^1.2.6",
    "@radix-ui/react-tooltip": "^1.1.8",
    "@tanstack-query-firebase/react": "^1.0.5",
    "@tanstack/react-query": "^5.66.0",
    "@tanstack/react-table": "^8.19.3",
    "bcrypt": "^5.1.1",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "0.2.1",
    "date-fns": "^3.6.0",
    "embla-carousel-autoplay": "^8.2.0",
    "embla-carousel-react": "^8.2.0",
    "firebase": "^11.8.1",
    "firebase-admin": "^12.7.0",
    "genkit": "^1.8.0",
    "jose": "^5.6.3",
    "leaflet": "^1.9.4",
    "lucide-react": "^0.417.0",
    "mysql2": "^3.14.1",
    "next": "^15.3.5",
    "patch-package": "^8.0.0",
    "pg": "^8.16.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-dropzone": "^14.2.3",
    "react-hook-form": "^7.54.2",
    "react-leaflet": "^4.2.1",
    "reactflow": "^11.11.3",
    "recharts": "^2.15.1",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7",
    "uuid": "^9.0.1",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@firecms/cli": "^3.0.0-beta.13",
    "@types/bcrypt": "^5.0.2",
    "@types/leaflet": "^1.9.12",
    "@types/node": "^22.15.30",
    "@types/pg": "^8.11.6",
    "@types/react": "19.1.8",
    "@types/uuid": "^9.0.8",
    "@types/yargs": "^17.0.32",
    "dotenv": "^16.5.0",
    "dotenv-cli": "^8.0.0",
    "genkit-cli": "^1.8.0",
    "postcss": "^8",
    "prisma": "^5.22.0",
    "tailwindcss": "^3.4.1",
    "tsx": "^4.16.0",
    "typescript": "^5",
    "yargs": "^17.7.2"
  },
  "packageManager": "yarn@4.9.2"
}
```
- prisma/seed-data.ts:
```ts
// prisma/seed-data.ts
// This file contains the sample data for seeding the database.

import type { State, City, LotCategory, Subcategory, Court, JudicialDistrict, JudicialBranch, Seller, Auctioneer, JudicialProcess, Bem, Auction, Lot, Bid, UserWin, DocumentType, Notification, MediaItem, ProcessParty } from '@prisma/client';

export const sampleLotCategories: (Omit<LotCategory, 'createdAt' | 'updatedAt' | 'itemCount' | 'hasSubcategories'> & { subcategories?: Omit<Subcategory, 'parentCategoryId' | 'slug' | 'createdAt' | 'updatedAt' | 'itemCount'>[] })[] = [
  { id: "cat-imoveis", name: "Imóveis", slug: "imoveis", description: "Casas, apartamentos, terrenos, salas comerciais, galpões, fazendas, sítios e chácaras.", logoUrl: null, coverImageUrl: "/uploads/media/6caf929a-d9e0-4109-a64a-f47f2cbdbf12-3d-rendering-loft-luxury-living-room-with-bookshelf.jpg", megaMenuImageUrl: null, dataAiHintLogo: "predio casa", dataAiHintCover: "imoveis cidade panorama", dataAiHintMegaMenu: null, subcategories: [
      { id: 'subcat-imoveis-apartamentos', name: "Apartamentos", description: "Apartamentos de todos os tamanhos." },
      { id: 'subcat-imoveis-casas', name: "Casas", description: "Casas residenciais." },
  ] },
  { id: "cat-veiculos", name: "Veículos", slug: "veiculos", description: "Carros, motos, caminhões, ônibus, utilitários e outros veículos terrestres.", subcategories: [
      { id: 'subcat-veiculos-carros', name: "Carros" },
      { id: 'subcat-veiculos-motos', name: "Motos" }
  ] },
  { id: "cat-maquinas-e-equipamentos", name: "Máquinas e Equipamentos", slug: "maquinas-e-equipamentos", description: "Máquinas pesadas, agrícolas, industriais, equipamentos de construção e diversos.", subcategories: [
       { id: 'subcat-maquinas-agricolas', name: "Máquinas Agrícolas"},
       { id: 'subcat-equipamentos-construcao', name: "Equipamentos de Construção"}
  ] },
  { id: "cat-eletronicos-e-tecnologia", name: "Eletrônicos e Tecnologia", slug: "eletronicos-e-tecnologia", description: "Celulares, computadores, TVs e mais.", subcategories: [
      { id: 'subcat-eletronicos-celulares', name: "Celulares e Smartphones"}
  ]},
  { id: "cat-bens-diversos", name: "Bens Diversos", slug: "bens-diversos", description: "Móveis, utensílios, e outros itens gerais."},
  { id: "cat-arte-e-antiguidades", name: "Arte e Antiguidades", slug: "arte-e-antiguidades", description: "Obras de arte, antiguidades e itens de coleção."},
  { id: "cat-embarcacoes", name: "Embarcações", slug: "embarcacoes", description: "Lanchas, barcos, veleiros, jet skis.", subcategories: [
      { id: "subcat-embarcacoes-lanchas", name: "Lanchas e Iates"},
      { id: "subcat-embarcacoes-jetskis", name: "Jet Skis"}
  ]},
];

export const sampleStates: Omit<State, 'createdAt' | 'updatedAt' | 'cityCount'>[] = [
  { id: "state-al", name: "Alagoas", uf: "AL", slug: "alagoas" },
  { id: "state-ba", name: "Bahia", uf: "BA", slug: "bahia" },
  { id: "state-sp", name: "São Paulo", uf: "SP", slug: "sao-paulo" },
  { id: "state-rj", name: "Rio de Janeiro", uf: "RJ", slug: "rio-de-janeiro" },
  { id: "state-mg", name: "Minas Gerais", uf: "MG", slug: "minas-gerais" },
  { id: "state-pr", name: "Paraná", uf: "PR", slug: "parana" },
  { id: "state-rs", name: "Rio Grande do Sul", uf: "RS", slug: "rio-grande-do-sul" },
  { id: "state-go", name: "Goiás", uf: "GO", slug: "goias" },
  { id: "state-ms", name: "Mato Grosso do Sul", uf: "MS", slug: "mato-grosso-do-sul" },
  { id: "state-ce", name: "Ceará", uf: "CE", slug: "ceara" },
  { id: "state-se", name: "Sergipe", uf: "SE", slug: "sergipe" },
];

export const sampleCities: Omit<City, 'createdAt' | 'updatedAt' | 'lotCount'>[] = [
  { id: "city-maceio-al", name: "Maceió", slug: "maceio", stateId: "state-al", stateUf: "AL", ibgeCode: "2704302"},
  { id: "city-salvador-ba", name: "Salvador", slug: "salvador", stateId: "state-ba", stateUf: "BA", ibgeCode: "2927408"},
  { id: "city-sao-paulo-sp", name: "São Paulo", slug: "sao-paulo", stateId: "state-sp", stateUf: "SP", ibgeCode: "3550308"},
  { id: "city-campinas-sp", name: "Campinas", slug: "campinas", stateId: "state-sp", stateUf: "SP", ibgeCode: "3509502"},
  { id: "city-rio-de-janeiro-rj", name: "Rio de Janeiro", slug: "rio-de-janeiro", stateId: "state-rj", stateUf: "RJ", ibgeCode: "3304557"},
  { id: "city-belo-horizonte-mg", name: "Belo Horizonte", slug: "belo-horizonte", stateId: "state-mg", stateUf: "MG", ibgeCode: "3106200"},
  { id: "city-curitiba-pr", name: "Curitiba", slug: "curitiba", stateId: "state-pr", stateUf: "PR", ibgeCode: "4106902"},
  { id: "city-porto-alegre-rs", name: "Porto Alegre", slug: "porto-alegre", stateId: "state-rs", stateUf: "RS", ibgeCode: "4314902"},
  { id: "city-rio-verde-go", name: "Rio Verde", slug: "rio-verde", stateId: "state-go", stateUf: "GO", ibgeCode: "5218805"},
  { id: "city-campo-grande-ms", name: "Campo Grande", slug: "campo-grande", stateId: "state-ms", stateUf: "MS", ibgeCode: "5002704"},
  { id: "city-fortaleza-ce", name: "Fortaleza", slug: "fortaleza", stateId: "state-ce", stateUf: "CE", ibgeCode: "2304400"},
  { id: "city-lauro-de-freitas-ba", name: "Lauro de Freitas", slug: "lauro-de-freitas", stateId: "state-ba", stateUf: "BA", ibgeCode: "2919207"},
  { id: "city-niteroi-rj", name: "Niterói", slug: "niteroi", stateId: "state-rj", stateUf: "RJ", ibgeCode: "3303302"},
  { id: "city-teotonio-vilela-al", name: "Teotônio Vilela", slug: "teotonio-vilela", stateId: "state-al", stateUf: "AL", ibgeCode: "2709152"},
  { id: "city-lagarto-se", name: "Lagarto", slug: "lagarto", stateId: "state-se", stateUf: "SE", ibgeCode: "2803500"},
];

export const sampleDocumentTypes = [
  // PF
  { id: 'doc-cpf', name: 'CPF', description: 'Cópia do Cadastro de Pessoa Física.', isRequired: true, appliesTo: 'PHYSICAL', allowedFormats: 'pdf,jpg,png', displayOrder: 10 },
  { id: 'doc-rg-cnh', name: 'RG ou CNH', description: 'Documento de identidade com foto (frente e verso).', isRequired: true, appliesTo: 'PHYSICAL', allowedFormats: 'pdf,jpg,png', displayOrder: 20 },
  { id: 'doc-comprovante-residencia', name: 'Comprovante de Residência', description: 'Conta de consumo recente (água, luz, telefone).', isRequired: true, appliesTo: 'PHYSICAL,LEGAL', allowedFormats: 'pdf,jpg,png', displayOrder: 30 },
  { id: 'doc-comprovante-estado-civil', name: 'Comprovante de Estado Civil', description: 'Certidão de casamento ou nascimento.', isRequired: false, appliesTo: 'PHYSICAL', allowedFormats: 'pdf,jpg,png', displayOrder: 40 },
  
  // PJ
  { id: 'doc-cartao-cnpj', name: 'Cartão CNPJ', description: 'Comprovante de Inscrição e de Situação Cadastral.', isRequired: true, appliesTo: 'LEGAL', allowedFormats: 'pdf', displayOrder: 10 },
  { id: 'doc-contrato-social', name: 'Contrato Social Consolidado', description: 'Última alteração contratual ou estatuto social.', isRequired: true, appliesTo: 'LEGAL', allowedFormats: 'pdf', displayOrder: 20 },
  { id: 'doc-documentos-representantes', name: 'Documentos dos Representantes', description: 'RG/CPF ou CNH dos sócios administradores.', isRequired: true, appliesTo: 'LEGAL', allowedFormats: 'pdf,jpg,png', displayOrder: 50 },
];

export const sampleAuctions = [
  {
      "id": "100625bra",
      "publicId": "AUC-IMOVEIS-XYZ123P1",
      "title": "Leilão de Imóveis Residenciais e Comerciais",
      "description": "Leilão online de casas, apartamentos e terrenos. Excelentes oportunidades de investimento e moradia. Lances a partir de R$ 45.000. Não perca!",
      "status": "ABERTO_PARA_LANCES",
      "auctionType": "EXTRAJUDICIAL",
      "categoryId": "cat-imoveis",
      "auctioneerId": "auct-leiloeiro-oficial-bradesco",
      "sellerId": "seller-banco-bradesco-s-a",
      "auctionDate": new Date("2025-06-24T04:07:47.479Z"),
      "endDate": new Date("2025-07-04T08:52:47.479Z"),
      "city": "Nacional",
      "state": "BR",
      "imageMediaId": "media-auc-imoveis-banner",
      "dataAiHint": "leilao imoveis cidade",
      "documentsUrl": "#",
      "visits": 2580,
      "initialOffer": 45000,
      "isFavorite": false,
      "auctionStages": JSON.stringify([
        { "name": "1ª Praça", "endDate": "2025-06-29T03:52:47.479Z", "statusText": "Encerramento", "initialPrice": 45000 },
        { "name": "2ª Praça", "endDate": "2025-07-04T08:52:47.479Z", "statusText": "Encerramento", "initialPrice": 30000 }
      ]),
      "automaticBiddingEnabled": true,
      "allowInstallmentBids": true,
      "estimatedRevenue": 2000000,
      "achievedRevenue": 0,
      "totalHabilitatedUsers": 150,
      "isFeaturedOnMarketplace": true,
      "marketplaceAnnouncementTitle": "Mega Leilão Bradesco Imóveis",
      "additionalTriggers": "OPORTUNIDADE UNICA,DESCONTO",
  },
  // Add more sample auctions here...
];


// Omitting other sample data arrays for brevity in this response,
// but they would be included in the full file.
export const sampleCourts: Omit<Court, 'createdAt' | 'updatedAt'>[] = [];
export const sampleJudicialDistricts: Omit<JudicialDistrict, 'createdAt' | 'updatedAt'>[] = [];
export const sampleJudicialBranches: Omit<JudicialBranch, 'createdAt' | 'updatedAt'>[] = [];
export const sampleSellers: (Omit<Seller, 'createdAt' | 'updatedAt'>)[] = [];
export const sampleAuctioneers: (Omit<Auctioneer, 'createdAt' | 'updatedAt'>)[] = [];
export const sampleJudicialProcesses: (Omit<JudicialProcess, 'createdAt' | 'updatedAt'> & {parties: Omit<ProcessParty, 'processId'>[]})[] = [];
export const sampleBens: (Omit<Bem, 'createdAt' | 'updatedAt'>)[] = [];
export const sampleLots: (Omit<Lot, 'createdAt' | 'updatedAt' | 'bidsCount' | 'views'>)[] = [];
export const sampleBids: Bid[] = [];
export const sampleUserWins: (Omit<UserWin, 'lot'>)[] = [];
export const sampleUserDocuments: (Omit<UserDocument, 'createdAt' | 'updatedAt' | 'documentType'>)[] = [];
export const sampleNotifications: Notification[] = [];
export const sampleMediaItems: MediaItem[] = [];
```
- prisma/seed.ts:
```ts
// prisma/seed.ts
import { PrismaClient } from '@prisma/client';
import {
  sampleLotCategories, sampleStates, sampleCities, sampleAuctioneers, sampleSellers,
  sampleAuctions, sampleLots, sampleBids, sampleUserWins, sampleUserDocuments,
  sampleDocumentTypes, sampleNotifications, sampleMediaItems, sampleCourts,
  sampleJudicialDistricts, sampleJudicialBranches, sampleJudicialProcesses, sampleBens
} from './seed-data'; // Import from the new local data file
import { slugify } from '../src/lib/sample-data-helpers';
import bcrypt from 'bcrypt';
import { predefinedPermissions } from '@/app/admin/roles/role-form-schema'; // Import permissions

const prisma = new PrismaClient();

async function main() {
  console.log(`Start seeding ...`);
  
  // --- Upsert Permissions ---
  console.log('Seeding permissions...');
  await prisma.permission.deleteMany({}); // Clear existing permissions for a clean slate
  for (const perm of predefinedPermissions) {
    await prisma.permission.create({
      data: { id: perm.id, name: perm.id, description: perm.label },
    });
  }
  
  // --- Upsert Core Roles ---
  console.log('Seeding core roles...');
  
  const userPerms = await prisma.permission.findMany({
    where: { name: { in: ['view_auctions', 'place_bids', 'view_lots'] } },
  });
  const adminPerms = await prisma.permission.findMany({
    where: { name: 'manage_all' },
  });

  const userRole = await prisma.role.upsert({
    where: { name_normalized: 'USER' },
    update: {},
    create: {
      name: 'User',
      name_normalized: 'USER',
      description: 'Usuário padrão com permissões de visualização e lance.',
      permissions: {
        connect: userPerms.map(p => ({ id: p.id })),
      },
    },
  });

  const adminRole = await prisma.role.upsert({
    where: { name_normalized: 'ADMINISTRATOR' },
    update: {},
    create: {
      name: 'Administrator',
      name_normalized: 'ADMINISTRATOR',
      description: 'Acesso total à plataforma.',
      permissions: {
        connect: adminPerms.map(p => ({ id: p.id })),
      },
    },
  });
  
  // --- Upsert Admin User ---
  console.log('Seeding admin user...');
  const hashedPassword = await bcrypt.hash('admin123', 10);
  await prisma.user.upsert({
    where: { email: 'admin@bidexpert.com.br' },
    update: {
      password: hashedPassword,
      roleId: adminRole.id,
      habilitationStatus: 'HABILITADO',
    },
    create: {
      id: 'admin-bidexpert-platform-001',
      email: 'admin@bidexpert.com.br',
      fullName: 'Administrador',
      password: hashedPassword,
      habilitationStatus: 'HABILITADO',
      roleId: adminRole.id,
    },
  });
  
  // --- Seed other data ---
  console.log('Seeding states...');
  await prisma.state.createMany({ data: sampleStates, skipDuplicates: true });
  
  console.log('Seeding cities...');
  await prisma.city.createMany({ data: sampleCities, skipDuplicates: true });

  console.log('Seeding categories and subcategories...');
  for (const categoryData of sampleLotCategories) {
    const { subcategories, ...cat } = categoryData;
    const catToCreate = {
      ...cat,
      slug: slugify(cat.name),
      hasSubcategories: !!subcategories && subcategories.length > 0,
    };
    const createdCategory = await prisma.lotCategory.upsert({
      where: { id: cat.id },
      update: catToCreate,
      create: catToCreate,
    });
    
    if (subcategories) {
      for (const subCatData of subcategories) {
         await prisma.subcategory.upsert({
            where: { id: subCatData.id },
            update: {...subCatData, parentCategoryId: createdCategory.id, slug: slugify(subCatData.name)},
            create: {...subCatData, parentCategoryId: createdCategory.id, slug: slugify(subCatData.name)},
         });
      }
    }
  }

  console.log('Seeding document types...');
  await prisma.documentType.createMany({ data: sampleDocumentTypes.map(dt => ({...dt, appliesTo: dt.appliesTo as any})), skipDuplicates: true });

  console.log('Seeding courts...');
  await prisma.court.createMany({ data: sampleCourts.map(c => ({...c, stateUf: c.stateUf || 'SP'})) as any, skipDuplicates: true });
  
  console.log('Seeding judicial districts...');
  await prisma.judicialDistrict.createMany({ data: sampleJudicialDistricts as any, skipDuplicates: true });

  console.log('Seeding judicial branches...');
  await prisma.judicialBranch.createMany({ data: sampleJudicialBranches as any, skipDuplicates: true });

  console.log('Seeding sellers...');
  await prisma.seller.createMany({ data: sampleSellers as any, skipDuplicates: true });
  
  console.log('Seeding auctioneers...');
  await prisma.auctioneer.createMany({ data: sampleAuctioneers as any, skipDuplicates: true });

  console.log('Seeding judicial processes...');
  for (const proc of sampleJudicialProcesses) {
    const { parties, ...procData } = proc;
    const createdProcess = await prisma.judicialProcess.upsert({
      where: { id: procData.id },
      update: procData as any,
      create: procData as any,
    });
    if (parties) {
      for (const party of parties) {
        await prisma.processParty.upsert({
          where: { processId_name_partyType: { processId: createdProcess.id, name: party.name, partyType: party.partyType } },
          update: { documentNumber: party.documentNumber },
          create: {
            processId: createdProcess.id,
            name: party.name,
            partyType: party.partyType,
            documentNumber: party.documentNumber,
          }
        });
      }
    }
  }
  
  console.log('Seeding bens...');
  await prisma.bem.createMany({ data: sampleBens.map(({categoryName, subcategoryName, judicialProcessNumber, sellerName, ...b}) => b) as any, skipDuplicates: true });

  console.log('Seeding auctions...');
  await prisma.auction.createMany({ data: sampleAuctions.map(({ lots, totalLots, auctioneer, seller, category, ...a }) => a as any), skipDuplicates: true });
  
  console.log('Seeding lots...');
  await prisma.lot.createMany({ data: sampleLots.map(({ auctionName, type, cityName, stateUf, subcategoryName, seller, sellerName, auctioneerName, isFavorite, ...l}) => l as any), skipDuplicates: true });

  console.log('Seeding bids...');
  await prisma.bid.createMany({ data: sampleBids as any, skipDuplicates: true });
  
  console.log('Seeding wins...');
  await prisma.userWin.createMany({ data: sampleUserWins.map(({lot, ...w}) => w) as any, skipDuplicates: true });
  
  console.log(`Seeding finished.`);
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
```
- scripts/check-admin-sdk.js:
```js
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// check-admin-sdk.ts
var admin = require("firebase-admin");
var fs = require("fs"); // Adicionado para ler a chave JSON
// ============================================================================
// ATENÇÃO: Configuração da Chave de Conta de Serviço
// ============================================================================
// SUBSTITUA pelo caminho real para o arquivo JSON da sua chave.
// Recomenda-se usar variáveis de ambiente para o caminho em ambientes de produção.
// Exemplo de caminho relativo: path.resolve(__dirname, '../seu-nome-chave.json')
var serviceAccountPath = '/home/user/studio/bidexpert-630df-firebase-adminsdk-fbsvc-a827189ca4.json'; // <--- AJUSTE O CAMINHO AQUI
// ============================================================================
console.log('--- Verificação do Firebase Admin SDK ---');
try {
    // Verifica se o Admin SDK já foi inicializado
    if (admin.apps.length === 0) {
        console.log('Admin SDK não inicializado. Tentando inicializar...');
        // Carrega a chave da conta de serviço usando fs
        var serviceAccount = void 0;
        try {
            var serviceAccountJson = fs.readFileSync(serviceAccountPath, 'utf8');
            serviceAccount = JSON.parse(serviceAccountJson);
        }
        catch (readError) {
            console.error('Erro ao ler ou analisar o arquivo da chave de conta de serviço:', readError);
            console.error('Verifique se o caminho para a chave está correto e se o arquivo existe:', serviceAccountPath);
            if (readError.code === 'ENOENT') {
                console.error('Causa comum: Arquivo da chave de conta de serviço não encontrado.');
            }
            process.exit(1); // Sai do processo se a chave não puder ser lida
        }
        admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            // Se necessário, adicione outras configurações como databaseURL, storageBucket
            // databaseURL: "https://<DATABASE_NAME>.firebaseio.com",
        });
        console.log('Admin SDK inicializado com sucesso.');
    }
    else {
        console.log('Admin SDK já está inicializado.');
        console.log('Número de apps Firebase inicializados:', admin.apps.length);
    }
    // Verifica a disponibilidade da instância do Firestore
    try {
        var db = admin.firestore();
        if (db) {
            console.log('Instância do Firestore (admin.firestore()) está disponível.');
            console.log('Projeto ID da instância do Firestore:', db.projectId);
        }
        else {
            // Este bloco pode não ser atingido se admin.firestore() lançar um erro em vez de retornar null/undefined
            console.log('Instância do Firestore (admin.firestore()) NÃO está disponível (retornou falsy).');
        }
    }
    catch (error) {
        console.error('Erro ao obter ou verificar a instância do Firestore:', error);
        console.error('Detalhes do erro:', error.message, error.code);
    }
}
catch (error) {
    console.error('Erro geral durante a verificação/inicialização do Admin SDK:', error);
    if (error.code === 'app/duplicate-app') {
        console.error('Causa comum: Tentativa de inicializar o Admin SDK mais de uma vez.');
    }
    else {
        console.error('Detalhes do erro:', error.message, error.code);
    }
}
console.log('--- Fim da Verificação ---');
```
- scripts/check-admin-sdk.ts:
```ts
// check-admin-sdk.ts
import * as admin from 'firebase-admin';
import * as path from 'path';
import * as fs from 'fs'; // Adicionado para ler a chave JSON

// ============================================================================
// ATENÇÃO: Configuração da Chave de Conta de Serviço
// ============================================================================
// SUBSTITUA pelo caminho real para o arquivo JSON da sua chave.
// Recomenda-se usar variáveis de ambiente para o caminho em ambientes de produção.
// Exemplo de caminho relativo: path.resolve(__dirname, '../seu-nome-chave.json')
const serviceAccountPath = '/home/user/studio/bidexpert-630df-firebase-adminsdk-fbsvc-a827189ca4.json'; // <--- AJUSTE O CAMINHO AQUI
// ============================================================================

console.log('--- Verificação do Firebase Admin SDK ---');

try {
  // Verifica se o Admin SDK já foi inicializado
  if (admin.apps.length === 0) {
    console.log('Admin SDK não inicializado. Tentando inicializar...');

    // Carrega a chave da conta de serviço usando fs
    let serviceAccount;
    try {
        const serviceAccountJson = fs.readFileSync(serviceAccountPath, 'utf8');
        serviceAccount = JSON.parse(serviceAccountJson);
    } catch (readError: any) {
        console.error('Erro ao ler ou analisar o arquivo da chave de conta de serviço:', readError);
        console.error('Verifique se o caminho para a chave está correto e se o arquivo existe:', serviceAccountPath);
         if (readError.code === 'ENOENT') {
             console.error('Causa comum: Arquivo da chave de conta de serviço não encontrado.');
        }
        process.exit(1); // Sai do processo se a chave não puder ser lida
    }


    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount),
      // Se necessário, adicione outras configurações como databaseURL, storageBucket
      // databaseURL: "https://<DATABASE_NAME>.firebaseio.com",
    });
    console.log('Admin SDK inicializado com sucesso.');

  } else {
    console.log('Admin SDK já está inicializado.');
    console.log('Número de apps Firebase inicializados:', admin.apps.length);
  }

  // Verifica a disponibilidade da instância do Firestore
  try {
      const db = admin.firestore();
      if (db) {
          console.log('Instância do Firestore (admin.firestore()) está disponível.');
          console.log('Projeto ID da instância do Firestore:', db.projectId);
      } else {
          // Este bloco pode não ser atingido se admin.firestore() lançar um erro em vez de retornar null/undefined
          console.log('Instância do Firestore (admin.firestore()) NÃO está disponível (retornou falsy).');
      }
  } catch (error: any) {
      console.error('Erro ao obter ou verificar a instância do Firestore:', error);
      console.error('Detalhes do erro:', error.message, error.code);
  }


} catch (error: any) {
  console.error('Erro geral durante a verificação/inicialização do Admin SDK:', error);
   if (error.code === 'app/duplicate-app') {
        console.error('Causa comum: Tentativa de inicializar o Admin SDK mais de uma vez.');
    } else {
         console.error('Detalhes do erro:', error.message, error.code);
    }
}

console.log('--- Fim da Verificação ---');
```
- scripts/copy-sample-images-to-public.js:
```js
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
// scripts/copy-sample-images-to-public.ts
var path = require("path");
var fs = require("fs");
var util_1 = require("util");
// ============================================================================
// CONFIGURAÇÕES
// ============================================================================
// Caminho base para as imagens de exemplo locais (origem)
var IMAGES_SOURCE_PATH = '/home/user/studio/CadastrosExemplo';
// Caminho de destino para as imagens copiadas dentro do diretório 'public'
var IMAGES_DESTINATION_PATH = '/home/user/studio/public/lotes-exemplo';
// Extensões de arquivo de imagem a procurar (deve corresponder ao script de seed)
var IMAGE_EXTENSIONS = ['.jpg', '.png', '.jpeg'];
// ============================================================================
// PROMESSAS para funções assíncronas de fs
// ============================================================================
var readdir = (0, util_1.promisify)(fs.readdir);
var stat = (0, util_1.promisify)(fs.stat);
var mkdir = (0, util_1.promisify)(fs.mkdir);
var copyFile = (0, util_1.promisify)(fs.copyFile);
// ============================================================================
// FUNÇÕES AUXILIARES
// ============================================================================
// Função para listar recursivamente todos os arquivos em um diretório
function listFilesRecursive(dir_1) {
    return __awaiter(this, arguments, void 0, function (dir, fileList) {
        var files, _loop_1, _i, files_1, file, error_1;
        if (fileList === void 0) { fileList = []; }
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 6, , 7]);
                    return [4 /*yield*/, readdir(dir)];
                case 1:
                    files = _a.sent();
                    _loop_1 = function (file) {
                        var filePath, fileStat;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    filePath = path.join(dir, file);
                                    return [4 /*yield*/, stat(filePath)];
                                case 1:
                                    fileStat = _b.sent();
                                    if (!fileStat.isDirectory()) return [3 /*break*/, 3];
                                    return [4 /*yield*/, listFilesRecursive(filePath, fileList)];
                                case 2:
                                    _b.sent(); // Recursão para subdiretórios
                                    return [3 /*break*/, 4];
                                case 3:
                                    // Adiciona o arquivo se for uma extensão de imagem permitida
                                    if (IMAGE_EXTENSIONS.some(function (ext) { return filePath.toLowerCase().endsWith(ext); })) {
                                        fileList.push(filePath);
                                    }
                                    _b.label = 4;
                                case 4: return [2 /*return*/];
                            }
                        });
                    };
                    _i = 0, files_1 = files;
                    _a.label = 2;
                case 2:
                    if (!(_i < files_1.length)) return [3 /*break*/, 5];
                    file = files_1[_i];
                    return [5 /*yield**/, _loop_1(file)];
                case 3:
                    _a.sent();
                    _a.label = 4;
                case 4:
                    _i++;
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 7];
                case 6:
                    error_1 = _a.sent();
                    console.error("Erro ao listar arquivos em ".concat(dir, ":"), error_1);
                    return [3 /*break*/, 7];
                case 7: return [2 /*return*/, fileList];
            }
        });
    });
}
// Função para garantir que um diretório exista, criando-o se necessário
function ensureDirectoryExists(dirPath) {
    return __awaiter(this, void 0, void 0, function () {
        var error_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, mkdir(dirPath, { recursive: true })];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    error_2 = _a.sent();
                    if (error_2.code !== 'EEXIST') { // Ignora erro se o diretório já existe
                        console.error("Erro ao criar diret\u00F3rio ".concat(dirPath, ":"), error_2);
                        throw error_2; // Lança outros erros
                    }
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    });
}
// ============================================================================
// FUNÇÃO PRINCIPAL
// ============================================================================
function copySampleImagesToPublic() {
    return __awaiter(this, void 0, void 0, function () {
        var imageFiles, copiedCount, _i, imageFiles_1, sourceFilePath, relativePath, destinationFilePath, destinationDir, copyError_1, error_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    console.log('--- Iniciando Cópia de Imagens de Exemplo para Pasta Pública ---');
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 11, , 12]);
                    // 1. Garantir que o diretório de destino exista
                    return [4 /*yield*/, ensureDirectoryExists(IMAGES_DESTINATION_PATH)];
                case 2:
                    // 1. Garantir que o diretório de destino exista
                    _a.sent();
                    console.log("Diret\u00F3rio de destino (".concat(IMAGES_DESTINATION_PATH, ") garantido."));
                    // 2. Listar arquivos de imagem locais na origem
                    console.log("Buscando imagens na origem (".concat(IMAGES_SOURCE_PATH, ")..."));
                    return [4 /*yield*/, listFilesRecursive(IMAGES_SOURCE_PATH)];
                case 3:
                    imageFiles = _a.sent();
                    console.log("Encontradas ".concat(imageFiles.length, " imagens na origem."));
                    if (imageFiles.length === 0) {
                        console.log('Nenhuma imagem encontrada na origem. Saindo.');
                        return [2 /*return*/];
                    }
                    // 3. Copiar cada imagem para o destino
                    console.log("Copiando imagens para o destino (".concat(IMAGES_DESTINATION_PATH, ")..."));
                    copiedCount = 0;
                    _i = 0, imageFiles_1 = imageFiles;
                    _a.label = 4;
                case 4:
                    if (!(_i < imageFiles_1.length)) return [3 /*break*/, 10];
                    sourceFilePath = imageFiles_1[_i];
                    _a.label = 5;
                case 5:
                    _a.trys.push([5, 8, , 9]);
                    relativePath = path.relative(IMAGES_SOURCE_PATH, sourceFilePath);
                    destinationFilePath = path.join(IMAGES_DESTINATION_PATH, relativePath);
                    destinationDir = path.dirname(destinationFilePath);
                    return [4 /*yield*/, ensureDirectoryExists(destinationDir)];
                case 6:
                    _a.sent();
                    // Copia o arquivo
                    return [4 /*yield*/, copyFile(sourceFilePath, destinationFilePath)];
                case 7:
                    // Copia o arquivo
                    _a.sent();
                    console.log("Copiado: ".concat(sourceFilePath, " -> ").concat(destinationFilePath));
                    copiedCount++;
                    return [3 /*break*/, 9];
                case 8:
                    copyError_1 = _a.sent();
                    console.error("Falha ao copiar a imagem ".concat(sourceFilePath, ":"), copyError_1);
                    return [3 /*break*/, 9];
                case 9:
                    _i++;
                    return [3 /*break*/, 4];
                case 10:
                    console.log("C\u00F3pia conclu\u00EDda. ".concat(copiedCount, " imagens copiadas com sucesso."));
                    return [3 /*break*/, 12];
                case 11:
                    error_3 = _a.sent();
                    console.error('Erro durante a cópia das imagens:', error_3);
                    return [3 /*break*/, 12];
                case 12:
                    console.log('--- Fim da Cópia de Imagens ---');
                    return [2 /*return*/];
            }
        });
    });
}
// Executa a função principal
copySampleImagesToPublic();
```
- scripts/copy-sample-images-to-public.ts:
```ts
// scripts/copy-sample-images-to-public.ts
import * as path from 'path';
import * as fs from 'fs';
import { promisify } from 'util';

// ============================================================================
// CONFIGURAÇÕES
// ============================================================================

// Caminho base para as imagens de exemplo locais (origem)
const IMAGES_SOURCE_PATH = '/home/user/studio/CadastrosExemplo';

// Caminho de destino para as imagens copiadas dentro do diretório 'public'
const IMAGES_DESTINATION_PATH = '/home/user/studio/public/lotes-exemplo';

// Extensões de arquivo de imagem a procurar (deve corresponder ao script de seed)
const IMAGE_EXTENSIONS = ['.jpg', '.png', '.jpeg'];

// ============================================================================
// PROMESSAS para funções assíncronas de fs
// ============================================================================
const readdir = promisify(fs.readdir);
const stat = promisify(fs.stat);
const mkdir = promisify(fs.mkdir);
const copyFile = promisify(fs.copyFile);

// ============================================================================
// FUNÇÕES AUXILIARES
// ============================================================================

// Função para listar recursivamente todos os arquivos em um diretório
async function listFilesRecursive(dir: string, fileList: string[] = []): Promise<string[]> {
    try {
        const files = await readdir(dir);

        for (const file of files) {
            const filePath = path.join(dir, file);
            const fileStat = await stat(filePath);

            if (fileStat.isDirectory()) {
                await listFilesRecursive(filePath, fileList); // Recursão para subdiretórios
            } else {
                // Adiciona o arquivo se for uma extensão de imagem permitida
                if (IMAGE_EXTENSIONS.some(ext => filePath.toLowerCase().endsWith(ext))) {
                    fileList.push(filePath);
                }
            }
        }
    } catch (error) {
        console.error(`Erro ao listar arquivos em ${dir}:`, error);
        // Continue mesmo se houver erro em um diretório
    }
    return fileList;
}

// Função para garantir que um diretório exista, criando-o se necessário
async function ensureDirectoryExists(dirPath: string): Promise<void> {
    try {
        await mkdir(dirPath, { recursive: true });
    } catch (error: any) {
        if (error.code !== 'EEXIST') { // Ignora erro se o diretório já existe
            console.error(`Erro ao criar diretório ${dirPath}:`, error);
            throw error; // Lança outros erros
        }
    }
}

// ============================================================================
// FUNÇÃO PRINCIPAL
// ============================================================================

async function copySampleImagesToPublic() {
    console.log('--- Iniciando Cópia de Imagens de Exemplo para Pasta Pública ---');

    try {
        // 1. Garantir que o diretório de destino exista
        await ensureDirectoryExists(IMAGES_DESTINATION_PATH);
        console.log(`Diretório de destino (${IMAGES_DESTINATION_PATH}) garantido.`);


        // 2. Listar arquivos de imagem locais na origem
        console.log(`Buscando imagens na origem (${IMAGES_SOURCE_PATH})...`);
        const imageFiles = await listFilesRecursive(IMAGES_SOURCE_PATH);
        console.log(`Encontradas ${imageFiles.length} imagens na origem.`);

        if (imageFiles.length === 0) {
            console.log('Nenhuma imagem encontrada na origem. Saindo.');
            return;
        }

        // 3. Copiar cada imagem para o destino
        console.log(`Copiando imagens para o destino (${IMAGES_DESTINATION_PATH})...`);
        let copiedCount = 0;
        for (const sourceFilePath of imageFiles) {
            try {
                // Calcula o caminho relativo da imagem em relação à pasta de origem
                const relativePath = path.relative(IMAGES_SOURCE_PATH, sourceFilePath);
                // Constrói o caminho de destino completo
                const destinationFilePath = path.join(IMAGES_DESTINATION_PATH, relativePath);

                // Garante que o subdiretório de destino exista
                const destinationDir = path.dirname(destinationFilePath);
                await ensureDirectoryExists(destinationDir);

                // Copia o arquivo
                await copyFile(sourceFilePath, destinationFilePath);
                console.log(`Copiado: ${sourceFilePath} -> ${destinationFilePath}`);
                copiedCount++;

            } catch (copyError) {
                console.error(`Falha ao copiar a imagem ${sourceFilePath}:`, copyError);
                // Continue mesmo se a cópia de uma imagem falhar
            }
        }

        console.log(`Cópia concluída. ${copiedCount} imagens copiadas com sucesso.`);

    } catch (error) {
        console.error('Erro durante a cópia das imagens:', error);
    }

    console.log('--- Fim da Cópia de Imagens ---');
}

// Executa a função principal
copySampleImagesToPublic();
```
- scripts/health-check-context.sh:
```sh
#!/bin/bash

echo "🧠 Gemini Context Health Check"
echo "-----------------------------"
echo ""

echo "📦 Largest files (by size):"
du -sh .[!.]* * 2>/dev/null | sort -hr | head -n 10
echo ""

echo "⚠️  Files over 100KB (potential token bloat):"
find . -type f -size +100k | grep -vE "node_modules|.git|.next|dist|context_backup|internal" | sort
echo ""

echo "📏 Estimating total word count (excluding node_modules)..."
wc_output=$(find . -type f \( -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.json" -o -name "*.md" \) \
  -not -path "*/node_modules/*" \
  -not -path "*/.git/*" \
  -not -path "*/.next/*" \
  -not -path "*/dist/*" \
  -not -path "*/internal/*" \
  -not -path "*/context_backup/*" \
  -exec cat {} + | wc -w)
token_estimate=$(( $wc_output * 4 ))
echo "→ Total words: $wc_output (~$token_estimate tokens)"
if [ "$token_estimate" -gt 1000000 ]; then
  echo "❌ OVER TOKEN LIMIT — Gemini will fail to load context."
else
  echo "✅ Under token limit."
fi
echo ""

echo "🔍 Checking .studioignore..."
if [ -f .studioignore ]; then
  echo "✅ .studioignore found."
  for path in node_modules .next dist internal context_backup firebase-debug.log .git package-lock.json; do
    if grep -q "$path" .studioignore; then
      echo "✅ $path is ignored"
    else
      echo "⚠️  $path is NOT ignored — consider adding it"
    fi
  done
else
  echo "❌ .studioignore not found — create one!"
fi

echo ""
echo "🎯 Context Health Check Complete"
```
- scripts/list-collection.js:
```js
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
// scripts/list-collection.ts
var admin = require("firebase-admin");
var fs = require("fs"); // Import the 'fs' module
// ============================================================================
// ATTENTION: Service Account Key Configuration
// ============================================================================
// Replace '/path/to/your/serviceAccountKey.json' with the actual path
// to your service account key JSON file.
// KEEP THIS FILE SECURE AND OUT OF VERSION CONTROL (git).
// Consider using environment variables for the path in production environments.
var serviceAccountPath = '/home/user/studio/bidexpert-630df-firebase-adminsdk-fbsvc-a827189ca4.json'; // <--- REPLACE THIS
// ============================================================================
try {
    // Initialize the Firebase Admin SDK if it hasn't been initialized yet
    if (!admin.apps.length) {
        // Load the service account key using fs and JSON.parse
        var serviceAccount = JSON.parse(fs.readFileSync(serviceAccountPath, 'utf8'));
        admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            // Add other configurations like databaseURL, storageBucket if needed
            // databaseURL: "https://<DATABASE_NAME>.firebaseio.com",
        });
    }
}
catch (error) {
    console.error('Error initializing Firebase Admin SDK:', error);
    console.error('Please ensure the path to the service account key is correct:', serviceAccountPath);
    process.exit(1); // Exit the process with an error code
}
var db = admin.firestore();
// Function to list documents from a collection and format as a table
function listCollection(collectionName) {
    return __awaiter(this, void 0, void 0, function () {
        var collectionRef, snapshot, data_1, headers_1, headerArray_1, columnWidths_1, headerLine_1, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    console.log("Listing documents from collection: \"".concat(collectionName, "\""));
                    collectionRef = db.collection(collectionName);
                    return [4 /*yield*/, collectionRef.get()];
                case 1:
                    snapshot = _a.sent();
                    if (snapshot.empty) {
                        console.log("Collection \"".concat(collectionName, "\" is empty or does not exist."));
                        return [2 /*return*/];
                    }
                    data_1 = [];
                    headers_1 = new Set(['ID']);
                    snapshot.forEach(function (doc) {
                        var docData = doc.data();
                        var row = { 'ID': doc.id };
                        for (var key in docData) {
                            if (Object.prototype.hasOwnProperty.call(docData, key)) {
                                headers_1.add(key);
                                // Format complex values (objects, arrays) for display
                                row[key] = typeof docData[key] === 'object' && docData[key] !== null && !Array.isArray(docData[key])
                                    ? JSON.stringify(docData[key])
                                    : Array.isArray(docData[key])
                                        ? "[".concat(docData[key].length, " items]") // Indicate array size
                                        : docData[key];
                            }
                        }
                        data_1.push(row);
                    });
                    headerArray_1 = Array.from(headers_1);
                    columnWidths_1 = {};
                    headerArray_1.forEach(function (header) {
                        columnWidths_1[header] = header.length;
                    });
                    data_1.forEach(function (row) {
                        headerArray_1.forEach(function (header) {
                            var cell = String(row[header] || '');
                            columnWidths_1[header] = Math.max(columnWidths_1[header], cell.length);
                        });
                    });
                    headerLine_1 = '';
                    headerArray_1.forEach(function (header) {
                        headerLine_1 += header.padEnd(columnWidths_1[header]) + ' | ';
                    });
                    console.log(headerLine_1.slice(0, -3)); // Remove last ' | '
                    console.log('-'.repeat(headerLine_1.length - 1)); // Separator matches header length
                    // Print data
                    data_1.forEach(function (row) {
                        var dataLine = '';
                        headerArray_1.forEach(function (header) {
                            var cell = String(row[header] || '');
                             dataLine += cell.padEnd(columnWidths_1[header]) + ' | ';
                        });
                        console.log(dataLine.slice(0, -3)); // Remove last ' | '
                    });
                    console.log("\nSuccessfully listed ".concat(data_1.length, " documents from collection \"").concat(collectionName, "\"."));
                    return [3 /*break*/, 3];
                case 2:
                    error_1 = _a.sent();
                    console.error("Error listing collection \"".concat(collectionName, "\":"), error_1);
                    console.error('Error details:', error_1);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    });
}
// Capture command-line arguments
var args = process.argv.slice(2);
if (args.length === 0) {
    console.error('Usage: ts-node scripts/list-collection.ts <collection_name>');
    process.exit(1); // Exit the process indicating usage error
}
var collectionName = args[0];
// Execute the list function
listCollection(collectionName);
```
- scripts/list-collection.ts:
```ts
// scripts/list-collection.ts
import * as admin from 'firebase-admin';
import * as path from 'path';
import * as fs from 'fs'; // Import the 'fs' module

// ============================================================================
// ATTENTION: Service Account Key Configuration
// ============================================================================
// Replace '/path/to/your/serviceAccountKey.json' with the actual path
// to your service account key JSON file.
// KEEP THIS FILE SECURE AND OUT OF VERSION CONTROL (git).
// Consider using environment variables for the path in production environments.
const serviceAccountPath = '/home/user/studio/bidexpert-630df-firebase-adminsdk-fbsvc-a827189ca4.json'; // <--- REPLACE THIS
// ============================================================================


try {
  // Initialize the Firebase Admin SDK if it hasn't been initialized yet
  if (!admin.apps.length) {
    // Load the service account key using fs and JSON.parse
    const serviceAccount = JSON.parse(fs.readFileSync(serviceAccountPath, 'utf8'));
    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount),
      // Add other configurations like databaseURL, storageBucket if needed
      // databaseURL: "https://<DATABASE_NAME>.firebaseio.com",
    });
  }
} catch (error) {
  console.error('Error initializing Firebase Admin SDK:', error);
  console.error('Please ensure the path to the service account key is correct:', serviceAccountPath);
  process.exit(1); // Exit the process with an error code
}

const db = admin.firestore();

// Function to list documents from a collection and format as a table
async function listCollection(collectionName: string) {
  try {
    console.log(`Listing documents from collection: "${collectionName}"`);
    const collectionRef = db.collection(collectionName);
    const snapshot = await collectionRef.get();

    if (snapshot.empty) {
      console.log(`Collection "${collectionName}" is empty or does not exist.`);
      return;
    }

    // Prepare data for the table
    const data: any[] = [];
    const headers: Set<string> = new Set(['ID']);

    snapshot.forEach(doc => {
      const docData = doc.data();
      const row: any = { 'ID': doc.id };
      for (const key in docData) {
        if (Object.prototype.hasOwnProperty.call(docData, key)) {
          headers.add(key);
          // Format complex values (objects, arrays) for display
          row[key] = typeof docData[key] === 'object' && docData[key] !== null && !Array.isArray(docData[key])
                       ? JSON.stringify(docData[key])
                       : Array.isArray(docData[key])
                       ? `[${docData[key].length} items]` // Indicate array size
                       : docData[key];
        }
      }
      data.push(row);
    });

    // Convert Set of headers to Array
    const headerArray = Array.from(headers);

    // Calculate column widths
    const columnWidths: { [key: string]: number } = {};
    headerArray.forEach(header => {
        columnWidths[header] = header.length;
    });

    data.forEach(row => {
        headerArray.forEach(header => {
            const cell = String(row[header] || '');
            columnWidths[header] = Math.max(columnWidths[header], cell.length);
        });
    });

    // Print header
    let headerLine = '';
    headerArray.forEach(header => {
        headerLine += header.padEnd(columnWidths[header]) + ' | ';
    });
    console.log(headerLine.slice(0, -3)); // Remove last ' | '
    console.log('-'.repeat(headerLine.length - 1)); // Separator matches header length

    // Print data
    data.forEach(row => {
        let dataLine = '';
        headerArray.forEach(header => {
            const cell = String(row[header] || '');
             dataLine += cell.padEnd(columnWidths[header]) + ' | ';
        });
        console.log(dataLine.slice(0, -3)); // Remove last ' | '
    });

    console.log(`\nSuccessfully listed ${data.length} documents from collection "${collectionName}".`);


  } catch (error) {
    console.error(`Error listing collection "${collectionName}":`, error);
    console.error('Error details:', error);
  }
}

// Capture command-line arguments
const args = process.argv.slice(2);

if (args.length === 0) {
  console.error('Usage: ts-node scripts/list-collection.ts <collection_name>');
  process.exit(1); // Exit the process indicating usage error
}

const collectionName = args[0];

// Execute the list function
listCollection(collectionName);
```
- scripts/rename-lotes-to-lots.ts:
```ts
// scripts/rename-lotes-to-lots.ts
import { ensureAdminInitialized } from '../src/lib/firebase/admin';

// ===========================================================================
// CONFIGURAÇÕES
// ===========================================================================

const OLD_COLLECTION = 'lotes';
const NEW_COLLECTION = 'lots';

// ===========================================================================
// FUNÇÃO PRINCIPAL
// ===========================================================================

async function renameCollection() {
    console.log(`--- Iniciando processo de renomear a coleção '${OLD_COLLECTION}' para '${NEW_COLLECTION}' ---`);

    const { db: dbAdmin, error } = ensureAdminInitialized();

    if (!dbAdmin || error) {
        console.error('Erro: Firebase Admin SDK (dbAdmin) não está inicializado.', error?.message);
        console.error('Verifique se o arquivo de chave de serviço existe e o caminho está correto.');
        return;
    }

    try {
        const oldCollectionRef = dbAdmin.collection(OLD_COLLECTION);
        const newCollectionRef = dbAdmin.collection(NEW_COLLECTION);

        // 1. Ler todos os documentos da coleção antiga
        console.log(`Lendo documentos da coleção '${OLD_COLLECTION}'...`);
        const snapshot = await oldCollectionRef.get();

        if (snapshot.empty) {
            console.log(`A coleção '${OLD_COLLECTION}' está vazia. Nada para renomear.`);
            return;
        }

        console.log(`Encontrados ${snapshot.size} documentos em '${OLD_COLLECTION}'.`);

        // 2. Copiar documentos para a nova coleção
        console.log(`Copiando documentos para a coleção '${NEW_COLLECTION}'...`);
        const copyPromises: Promise<FirebaseFirestore.WriteResult>[] = [];
        snapshot.forEach(doc => {
            const docData = doc.data();
            // Use set with the original document ID to maintain the ID
            const promise = newCollectionRef.doc(doc.id).set(docData);
            copyPromises.push(promise);
            console.log(`Copiando documento ${doc.id}...`);
        });

        await Promise.all(copyPromises);
        console.log(`Copiados ${copyPromises.length} documentos para '${NEW_COLLECTION}'.`);

        // 3. Excluir documentos da coleção antiga
        // Note: Firestore doesn't have a single command to delete a collection.
        // We must delete documents in batches (or one by one).
        // For simplicity in this script, we'll re-read and delete.
        console.log(`Excluindo documentos da coleção original '${OLD_COLLECTION}'...`);

        // Re-read the documents to be safe, although snapshot should still be valid
        const snapshotToDelete = await oldCollectionRef.get();
        const deletePromises: Promise<FirebaseFirestore.WriteResult>[] = [];

        snapshotToDelete.forEach(doc => {
            const promise = doc.ref.delete();
            deletePromises.push(promise);
            console.log(`Excluindo documento ${doc.id}...`);
        });

        await Promise.all(deletePromises);
        console.log(`Excluídos ${deletePromises.length} documentos de '${OLD_COLLECTION}'.`);

        console.log(`--- Processo de renomear a coleção concluído com sucesso! ---`);

    } catch (error) {
        console.error(`Erro durante o processo de renomear a coleção:`, error);
    }
}

// Executa a função principal
renameCollection();
```
- scripts/seed-lotes-data.ts:
```ts
// scripts/seed-lotes-data.ts
import { dbAdmin } from '../src/lib/firebase/admin';
import { sampleLots } from '../src/lib/sample-data'; // Assuming sampleLots is exported from here

// ============================================================================
// CONFIGURAÇÕES
// ============================================================================

// Nome da coleção de lotes no Firestore
const LOTES_COLLECTION = 'lotes';

// ============================================================================
// FUNÇÃO PRINCIPAL
// ============================================================================

async function seedLotesData() {
    console.log('--- Iniciando Seed de Dados Básicos de Lotes no Firestore ---');

    if (!dbAdmin) {
        console.error('Erro: Firebase Admin SDK (dbAdmin) não está inicializado.');
        console.error('Verifique se o arquivo de chave de serviço existe e o caminho está correto em src/lib/firebase/admin.ts.');
        return;
    }

    const lotesCollectionRef = dbAdmin.collection(LOTES_COLLECTION);

    console.log(`Encontrados ${sampleLots.length} lotes de exemplo.`);

    for (const lot of sampleLots) {
        // Cria uma cópia dos dados do lote e remove o campo de imagens
        const lotDataWithoutImages = { ...lot };
        delete (lotDataWithoutImages as any).galleryImageUrls;

        console.log(`Adicionando lote com ID: ${lot.id}`);
        try {
            await lotesCollectionRef.doc(lot.id).set(lotDataWithoutImages);
            console.log(`Lote ${lot.id} adicionado/atualizado com sucesso.`);
        } catch (error) {
            console.error(`Erro ao adicionar lote ${lot.id}:`, error);
        }
    }

    console.log('--- Fim do Seed de Dados Básicos de Lotes no Firestore ---');
}

seedLotesData();
```
- scripts/seed-lotes-with-images.js:
```js
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
// scripts/seed-lotes-with-images.ts
var path = require("path");
var fs = require("fs");
var util_1 = require("util"); // Para usar fs.readdir, fs.stat de forma assíncrona
// Importa a instância centralizada do Admin SDK e Firestore
// Isso garante que o SDK seja inicializado e dbAdmin esteja disponível
var admin_1 = require("../src/lib/firebase/admin");
// ============================================================================
// CONFIGURAÇÕES
// ============================================================================
// Caminho base para as imagens de exemplo locais copiadas para o diretório 'public'
var IMAGES_BASE_PATH = '/home/user/studio/public/lotes-exemplo';
// Caminho base público para acessar as imagens no front-end
var PUBLIC_IMAGE_BASE_URL = '/lotes-exemplo';
// Extensões de arquivo de imagem a procurar
var IMAGE_EXTENSIONS = ['.jpg', '.png', '.jpeg', '.webp', '.avif'];
// Nome da coleção de lotes no Firestore
var LOTES_COLLECTION = 'lotes';
// Nome do campo no documento do lote onde os URLs das imagens serão armazenados
var IMAGE_URLS_FIELD = 'galleryImageUrls';
// ============================================================================
// PROMESSAS para funções assíncronas de fs
// ============================================================================
var readdir = (0, util_1.promisify)(fs.readdir);
var stat = (0, util_1.promisify)(fs.stat);
// ============================================================================
// FUNÇÕES AUXILIARES
// ============================================================================
// Função para listar recursivamente todos os arquivos em um diretório
function listFilesRecursive(dir_1) {
    return __awaiter(this, arguments, void 0, function (dir, fileList) {
        var files, _loop_1, _i, files_1, file;
        if (fileList === void 0) { fileList = []; }
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, readdir(dir)];
                case 1:
                    files = _a.sent();
                    _loop_1 = function (file) {
                        var filePath, fileStat;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    filePath = path.join(dir, file);
                                    return [4 /*yield*/, stat(filePath)];
                                case 1:
                                    fileStat = _b.sent();
                                    if (!fileStat.isDirectory()) return [3 /*break*/, 3];
                                    return [4 /*yield*/, listFilesRecursive(filePath, fileList)];
                                case 2:
                                    _b.sent(); // Recursão para subdiretórios
                                    return [3 /*break*/, 4];
                                case 3:
                                    // Adiciona o arquivo se for uma extensão de imagem permitida
                                    if (IMAGE_EXTENSIONS.some(function (ext) { return filePath.toLowerCase().endsWith(ext); })) {
                                        fileList.push(filePath);
                                    }
                                    _b.label = 4;
                                case 4: return [2 /*return*/];
                            }
                        });
                    };
                    _i = 0, files_1 = files;
                    _a.label = 2;
                case 2:
                    if (!(_i < files_1.length)) return [3 /*break*/, 5];
                    file = files_1[_i];
                    return [5 /*yield**/, _loop_1(file)];
                case 3:
                    _a.sent();
                    _a.label = 4;
                case 4:
                    _i++;
                    return [3 /*break*/, 2];
                case 5: return [2 /*return*/, fileList];
            }
        });
    });
}
// Função principal para popular lotes com imagens
function seedLotesWithImages() {
    return __awaiter(this, void 0, void 0, function () {
        var imageFiles, imageUrls_1, publicDir, _i, imageFiles_1, imageFile, relativeToPublic, publicUrl, lotesRef, lotesSnapshot, updatePromises_1, imageFilesIndex, imageUrlsIndex, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    console.log('--- Iniciando Seed de Lotes com Imagens ---');
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 5, , 6]);
                    // 1. Listar arquivos de imagem locais na pasta pública
                    console.log("Buscando imagens locais em ".concat(IMAGES_BASE_PATH, "..."));
                    return [4 /*yield*/, listFilesRecursive(IMAGES_BASE_PATH)];
                case 2:
                    imageFiles = _a.sent();
                    console.log("Encontradas ".concat(imageFiles.length, " imagens locais."));
                    if (imageFiles.length === 0) {
                        console.log('Nenhuma imagem encontrada. Saindo.');
                        return [2 /*return*/];
                    }
                    imageUrls_1 = [];
                    publicDir = '/home/user/studio/public';
                    for (_i = 0, imageFiles_1 = imageFiles; _i < imageFiles_1.length; _i++) {
                        imageFile = imageFiles_1[_i];
                        relativeToPublic = path.relative(publicDir, imageFile);
                        publicUrl = '/' + relativeToPublic.replace(/\\/g, '/');
                        imageUrls_1.push(publicUrl);
                        console.log("Gerado URL: ".concat(publicUrl));
                    }
                    console.log("Gerados ".concat(imageUrls_1.length, " URLs p\u00FAblicos."));
                    if (imageUrls_1.length === 0) {
                        console.log('Nenhum URL de imagem gerado. Saindo.');
                        return [2 /*return*/];
                    }
                    // 3. Listar lotes no Firestore
                    console.log("Buscando lotes na cole\u00E7\u00E3o \"".concat(LOTES_COLLECTION, "\"..."));
                    lotesRef = admin_1.dbAdmin.collection(LOTES_COLLECTION);
                    return [4 /*yield*/, lotesRef.get()];
                case 3:
                    lotesSnapshot = _a.sent();
                    if (lotesSnapshot.empty) {
                        console.log("Nenhum lote encontrado na cole\u00E7\u00E3o \"".concat(LOTES_COLLECTION, "\". Saindo."));
                        return [2 /*return*/];
                    }
                    console.log("Encontrados ".concat(lotesSnapshot.size, " lotes."));
                    // 4. Atualizar lotes com URLs de imagem (aleatoriamente, uma imagem por lote)
                    console.log("Associando URLs de imagens aos lotes...");
                    updatePromises_1 = [];
                    imageFilesIndex = 0;
                    imageUrlsIndex = 0;
                    lotesSnapshot.forEach(function (doc) {
                        if (imageUrls_1.length === 0) {
                            console.warn("Sem URLs de imagem restantes para o lote ".concat(doc.id, "."));
                            return;
                        }
                        // Seleciona uma imagem aleatória da lista de URLs públicos
                        var randomImageUrl = imageUrls_1[Math.floor(Math.random() * imageUrls_1.length)];
                        // Ou seleciona em sequência (menos aleatório, mas usa todas as imagens se houver mais lotes)
                        // const sequentialImageUrl = imageUrls[imageUrlsIndex % imageUrls.length];
                        var updateData = {};
                        // Armazena em um array para o campo imageUrls
                        updateData[IMAGE_URLS_FIELD] = [randomImageUrl]; // Associando como array com 1 imagem
                        updateData[IMAGE_URLS_FIELD] = [publicImageUrl]; // Associando como array com 1 imagem
                        console.log("Atualizando lote ".concat(doc.id, " com URL: ").concat(randomImageUrl));
                        updatePromises_1.push(doc.ref.update(updateData));
                    });
                    // Espera todas as atualizações de lote serem concluídas
                    return [4 /*yield*/, Promise.all(updatePromises_1)];
                case 4:
                    // Espera todas as atualizações de lote serem concluídas
                    _a.sent();
                    console.log("Atualiza\u00E7\u00E3o de ".concat(updatePromises_1.length, " lotes conclu\u00EDda."));
                    return [3 /*break*/, 6];
                case 5:
                    error_1 = _a.sent();
                    console.error('Erro durante o seed de lotes com imagens:', error_1);
                    return [3 /*break*/, 6];
                case 6:
                    console.log('--- Fim do Seed de Lotes com Imagens ---');
                    return [2 /*return*/];
            }
        });
    });
}
// Executa a função principal
// Adicione .catch() para tratar erros na execução inicial assíncrona
seedLotesWithImages();
```
- scripts/seed-lotes-with-images.ts:
```ts
// scripts/seed-lotes-with-images.ts
import * as path from 'path';
import * as fs from 'fs';
import { promisify } from 'util'; // Para usar fs.readdir, fs.stat de forma assíncrona

// Importa a instância centralizada do Admin SDK e Firestore
// Isso garante que o SDK seja inicializado e dbAdmin esteja disponível
import { dbAdmin } from '../src/lib/firebase/admin';

// ============================================================================
// CONFIGURAÇÕES
// ============================================================================

// Caminho base para as imagens de exemplo locais copiadas para o diretório 'public'
const IMAGES_BASE_PATH = '/home/user/studio/public/lotes-exemplo';

// Caminho base público para acessar as imagens no front-end
const PUBLIC_IMAGE_BASE_URL = '/lotes-exemplo';

// Extensões de arquivo de imagem a procurar
const IMAGE_EXTENSIONS = ['.jpg', '.png', '.jpeg', '.webp', '.avif'];

// Nome da coleção de lotes no Firestore
const LOTES_COLLECTION = 'lots';

// Nome do campo no documento do lote onde os URLs das imagens serão armazenados
const IMAGE_URLS_FIELD = 'galleryImageUrls';

// ============================================================================
// PROMESSAS para funções assíncronas de fs
// ============================================================================
const readdir = promisify(fs.readdir);
const stat = promisify(fs.stat);

// ============================================================================
// FUNÇÕES AUXILIARES
// ============================================================================

// Função para listar recursivamente todos os arquivos em um diretório
async function listFilesRecursive(dir: string, fileList: string[] = []): Promise<string[]> {
    const files = await readdir(dir);

    for (const file of files) {
        const filePath = path.join(dir, file);
        const fileStat = await stat(filePath);

        if (fileStat.isDirectory()) {
            await listFilesRecursive(filePath, fileList); // Recursão para subdiretórios
        } else {
            // Adiciona o arquivo se for uma extensão de imagem permitida
            if (IMAGE_EXTENSIONS.some(ext => filePath.toLowerCase().endsWith(ext))) {
                fileList.push(filePath);
            }
        }
    }

    return fileList;
}


// Função principal para popular lotes com imagens
async function seedLotesWithImages() {
    console.log('--- Iniciando Seed de Lotes com Imagens ---');

    try {
        // 1. Listar arquivos de imagem locais na pasta pública
        console.log(`Buscando imagens locais em ${IMAGES_BASE_PATH}...`);
        const imageFiles = await listFilesRecursive(IMAGES_BASE_PATH);
        console.log(`Encontradas ${imageFiles.length} imagens locais.`);

        if (imageFiles.length === 0) {
            console.log('Nenhuma imagem encontrada. Saindo.');
            return;
        }

        // 2. Gerar URLs públicos relativos
        const imageUrls: string[] = [];
        const publicDir = '/home/user/studio/public'; // Caminho do diretório public

        for (const imageFile of imageFiles) {
            // Calcula o caminho relativo da imagem em relação ao diretório public
            const relativeToPublic = path.relative(publicDir, imageFile);
            // Forma o URL público relativo, garantindo que use '/' como separador de URL
            const publicUrl = '/' + relativeToPublic.replace(/\\/g, '/');

            imageUrls.push(publicUrl);
            console.log(`Gerado URL: ${publicUrl}`);
        }

        console.log(`Gerados ${imageUrls.length} URLs públicos.`);

        if (imageUrls.length === 0) {
             console.log('Nenhum URL de imagem gerado. Saindo.');
            return;
        }
        // 3. Listar lotes no Firestore
        console.log(`Buscando lotes na coleção "${LOTES_COLLECTION}"...`);
        const lotesRef = dbAdmin.collection(LOTES_COLLECTION);
        const lotesSnapshot = await lotesRef.get();

        if (lotesSnapshot.empty) {
            console.log(`Nenhum lote encontrado na coleção "${LOTES_COLLECTION}". Saindo.`);
            return;
        }
        console.log(`Encontrados ${lotesSnapshot.size} lotes.`);

        // 4. Atualizar lotes com URLs de imagem (aleatoriamente, uma imagem por lote)
        console.log(`Associando URLs de imagens aos lotes...`);
        const updatePromises: Promise<FirebaseFirestore.WriteResult>[] = [];
        let imageFilesIndex = 0; // Para pegar arquivos em sequência ou randomizar
        let imageUrlsIndex = 0; // Para pegar URLs em sequência ou randomizar

        lotesSnapshot.forEach(doc => {
             if (imageUrls.length === 0) {
                console.warn(`Sem URLs de imagem restantes para o lote ${doc.id}.`);
                return;
            }

            // Seleciona uma imagem aleatória da lista de URLs públicos
             const randomImageUrl = imageUrls[Math.floor(Math.random() * imageUrls.length)];
            // Ou seleciona em sequência (menos aleatório, mas usa todas as imagens se houver mais lotes)
            // const sequentialImageUrl = imageUrls[imageUrlsIndex % imageUrls.length];
            const updateData: any = {};
            // Armazena em um array para o campo imageUrls
            updateData[IMAGE_URLS_FIELD] = [randomImageUrl]; // Associando como array com 1 imagem

            console.log(`Atualizando lote ${doc.id} com URL: ${randomImageUrl}`);
            updatePromises.push(doc.ref.update(updateData));
        });

        // Espera todas as atualizações de lote serem concluídas
        await Promise.all(updatePromises);

        console.log(`Atualização de ${updatePromises.length} lotes concluída.`);

    } catch (error) {
        console.error('Erro durante o seed de lotes com imagens:', error);
    }

    console.log('--- Fim do Seed de Lotes com Imagens ---');
}

// Executa a função principal
// Adicione .catch() para tratar erros na execução inicial assíncrona
seedLotesWithImages();
```
- scripts/seed-media-library.ts:
```ts
// scripts/seed-media-library.ts
import * as path from 'path';
import * as fs from 'fs';
import { promisify } from 'util';
import dotenv from 'dotenv';
import { getDatabaseAdapter } from '../src/lib/database';
import type { MediaItem } from '../src/types';
import { v4 as uuidv4 } from 'uuid';

// Promisify fs functions
const readdir = promisify(fs.readdir);
const stat = promisify(fs.stat);

// Load environment variables from .env.local or .env
dotenv.config({ path: path.resolve(process.cwd(), '.env.local') });
dotenv.config({ path: path.resolve(process.cwd(), '.env'), override: false });

const MEDIA_SOURCE_DIR = path.join(process.cwd(), 'public', 'uploads', 'media');
const PUBLIC_BASE_PATH = '/uploads/media';

async function seedMediaLibrary() {
  console.log('--- Iniciando Seed da Biblioteca de Mídia ---');
  console.log(`Buscando arquivos em: ${MEDIA_SOURCE_DIR}`);

  try {
    const db = await getDatabaseAdapter();

    if (!fs.existsSync(MEDIA_SOURCE_DIR)) {
      console.warn(`Diretório de mídia não encontrado em ${MEDIA_SOURCE_DIR}. Nenhum arquivo para processar.`);
      return;
    }

    const fileNames = await readdir(MEDIA_SOURCE_DIR);
    console.log(`Encontrados ${fileNames.length} arquivos/diretórios.`);

    let processedCount = 0;
    for (const fileName of fileNames) {
      const filePath = path.join(MEDIA_SOURCE_DIR, fileName);
      const fileStat = await stat(filePath);

      if (fileStat.isDirectory()) {
        console.log(`Ignorando diretório: ${fileName}`);
        continue;
      }
      
      const publicUrl = `${PUBLIC_BASE_PATH}/${fileName}`;
      const storagePath = publicUrl; // For local storage adapter
      
      // Check if this file already exists in the database by storagePath
      const mediaItems = await db.getMediaItems();
      const existingItem = mediaItems.find(item => item.storagePath === storagePath);

      if (existingItem) {
          console.log(`Item já existe no banco de dados para o arquivo: ${fileName}. Ignorando.`);
          continue;
      }

      console.log(`Processando novo arquivo: ${fileName}`);

      const mediaItemData: Omit<MediaItem, 'id' | 'uploadedAt' | 'urlOriginal' | 'urlThumbnail' | 'urlMedium' | 'urlLarge' | 'storagePath'> = {
        fileName: fileName,
        storagePath: storagePath,
        title: path.basename(fileName, path.extname(fileName)).replace(/[-_]/g, ' '),
        altText: path.basename(fileName, path.extname(fileName)).replace(/[-_]/g, ' '),
        mimeType: `image/${path.extname(fileName).slice(1)}`, // Simple assumption for now
        sizeBytes: fileStat.size,
        linkedLotIds: [],
        dataAiHint: 'imagem semeada',
        uploadedBy: 'system-seed',
      };
      
      const result = await db.createMediaItem(mediaItemData, publicUrl, 'system-seed');

      if (result.success) {
        console.log(`  - Sucesso: Arquivo "${fileName}" adicionado à biblioteca de mídia.`);
        processedCount++;
      } else {
        console.error(`  - Falha ao adicionar "${fileName}": ${result.message}`);
      }
    }
    
    console.log(`--- Seed da Biblioteca de Mídia concluído. ${processedCount} novos itens adicionados. ---`);

  } catch (error) {
    console.error('Erro crítico durante o seed da biblioteca de mídia:', error);
  } finally {
    // In a real scenario with a persistent DB connection pool, you might want to close it here.
    // For now, we assume the script will exit.
    process.exit(0);
  }
}

seedMediaLibrary();
```
- src/ai/dev.ts:
```ts
import { config } from 'dotenv';
config();

import '@/ai/flows/predict-opening-value.ts';
import '@/ai/flows/suggest-listing-details.ts';
import '@/ai/flows/suggest-similar-listings.ts';
```
- src/ai/flows/predict-opening-value.ts:
```ts
'use server';

/**
 * @fileOverview This file defines a Genkit flow to predict the optimal opening bid value for an auction.
 *
 * The flow uses historical auction data to suggest an opening bid that balances attracting initial bids with achieving a fast auction resolution.
 *  - predictOpeningValue - A function that handles the prediction of the optimal opening bid value.
 *  - PredictOpeningValueInput - The input type for the predictOpeningValue function.
 *  - PredictOpeningValueOutput - The return type for the predictOpeningValue function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PredictOpeningValueInputSchema = z.object({
  itemDescription: z.string().describe('Detailed description of the item being auctioned.'),
  category: z.string().describe('Category of the item (e.g., electronics, clothing, antiques).'),
  condition: z.string().describe('Condition of the item (e.g., new, used, like new).'),
  pastAuctionData: z.string().describe('Summary of past auction data for similar items, including average bid prices, number of bids, and auction duration.'),
});

export type PredictOpeningValueInput = z.infer<typeof PredictOpeningValueInputSchema>;

const PredictOpeningValueOutputSchema = z.object({
  suggestedOpeningValue: z.number().describe('The suggested optimal opening bid value for the auction.'),
  reasoning: z.string().describe('Explanation of why this opening value is suggested, based on the input data.'),
});

export type PredictOpeningValueOutput = z.infer<typeof PredictOpeningValueOutputSchema>;

export async function predictOpeningValue(input: PredictOpeningValueInput): Promise<PredictOpeningValueOutput> {
  return predictOpeningValueFlow(input);
}

const predictOpeningValuePrompt = ai.definePrompt({
  name: 'predictOpeningValuePrompt',
  input: {schema: PredictOpeningValueInputSchema},
  output: {schema: PredictOpeningValueOutputSchema},
  prompt: `You are an expert auction strategist. Analyze the following information to determine the optimal opening bid value for an auction item.

Item Description: {{{itemDescription}}}
Category: {{{category}}}
Condition: {{{condition}}}
Past Auction Data: {{{pastAuctionData}}}

Consider the trade-off between attracting initial bids and achieving a fast auction resolution. Provide a suggested opening bid value and explain your reasoning.

Output:
{{
  "suggestedOpeningValue": "",
  "reasoning": ""
}}
`,
});

const predictOpeningValueFlow = ai.defineFlow(
  {
    name: 'predictOpeningValueFlow',
    inputSchema: PredictOpeningValueInputSchema,
    outputSchema: PredictOpeningValueOutputSchema,
  },
  async input => {
    const {output} = await predictOpeningValuePrompt(input);
    return output!;
  }
);
```
- src/ai/flows/suggest-listing-details.ts:
```ts
'use server';

/**
 * @fileOverview AI flow to suggest optimal listing details for auctions based on current trends.
 *
 * - suggestListingDetails - A function that generates listing detail recommendations.
 * - SuggestListingDetailsInput - The input type for the suggestListingDetails function.
 * - SuggestListingDetailsOutput - The return type for the suggestListingDetails function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestListingDetailsInputSchema = z.object({
  auctionTitle: z.string().describe('The current title of the auction listing.'),
  auctionDescription: z.string().describe('The current description of the auction listing.'),
  auctionCategory: z.string().describe('The current category of the auction listing.'),
  auctionKeywords: z.string().describe('The current keywords associated with the auction listing.'),
  recentAuctionData: z.string().describe('JSON array of recent, similar successful auctions, including titles, descriptions, and final prices.'),
});
export type SuggestListingDetailsInput = z.infer<typeof SuggestListingDetailsInputSchema>;

const SuggestListingDetailsOutputSchema = z.object({
  suggestedTitle: z.string().describe('A suggested title for the auction listing.'),
  suggestedDescription: z.string().describe('A suggested description for the auction listing.'),
  suggestedCategory: z.string().describe('A potentially better category for the listing.'),
  suggestedKeywords: z.string().describe('Suggested keywords to attract more interest.'),
  predictedOpeningValue: z.number().describe('Predicted optimal opening value for a fast auction resolution.'),
  similarListings: z.array(z.string()).describe('Titles of similar listings that may serve as inspiration.'),
});

export type SuggestListingDetailsOutput = z.infer<typeof SuggestListingDetailsOutputSchema>;

export async function suggestListingDetails(input: SuggestListingDetailsInput): Promise<SuggestListingDetailsOutput> {
  return suggestListingDetailsFlow(input);
}

const suggestListingDetailsPrompt = ai.definePrompt({
  name: 'suggestListingDetailsPrompt',
  input: {schema: SuggestListingDetailsInputSchema},
  output: {schema: SuggestListingDetailsOutputSchema},
  prompt: `You are an expert auction listing advisor. Analyze the provided auction details and recent auction data to suggest improvements.

Current Auction Details:
Title: {{{auctionTitle}}}
Description: {{{auctionDescription}}}
Category: {{{auctionCategory}}}
Keywords: {{{auctionKeywords}}}

Recent Auction Data (JSON):
{{{recentAuctionData}}}

Based on this data, provide the following suggestions:

*   suggestedTitle: A revised title that is more compelling.
*   suggestedDescription: A revised description that is more detailed and enticing.
*   suggestedCategory: A potentially better category for the listing.
*   suggestedKeywords: Keywords that will attract more interest and higher bids. These should be comma separated.
*   predictedOpeningValue: An opening value that is expected to lead to a fast auction resolution.  Base this on the recent auction data provided.
*   similarListings: Titles of listings from the recent auction data that the seller might find useful as inspiration.

Ensure the suggested title and description are appropriate for the category. Ensure that the predicted opening value is realistic.

Format the suggested keywords as a comma-separated list.

IMPORTANT: The ENTIRE output must be valid JSON. Do not include any markdown formatting.
`,
});

const suggestListingDetailsFlow = ai.defineFlow(
  {
    name: 'suggestListingDetailsFlow',
    inputSchema: SuggestListingDetailsInputSchema,
    outputSchema: SuggestListingDetailsOutputSchema,
  },
  async input => {
    const {output} = await suggestListingDetailsPrompt(input);
    return output!;
  }
);
```
- src/ai/flows/suggest-similar-listings.ts:
```ts
// src/ai/flows/suggest-similar-listings.ts
'use server';

/**
 * @fileOverview This file defines a Genkit flow that suggests similar successful listings to a seller for inspiration.
 *
 * - suggestSimilarListings - A function that suggests similar listings.
 * - SuggestSimilarListingsInput - The input type for the suggestSimilarListings function.
 * - SuggestSimilarListingsOutput - The output type for the suggestSimilarListings function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestSimilarListingsInputSchema = z.object({
  itemCategory: z.string().describe('The category of the item being listed.'),
  itemDescription: z.string().describe('A detailed description of the item.'),
  sellerId: z.string().describe('The ID of the seller.'),
  desiredAuctionLengthDays: z.number().describe('The desired length of the auction in days.'),
});
export type SuggestSimilarListingsInput = z.infer<typeof SuggestSimilarListingsInputSchema>;

const SuggestedListingSchema = z.object({
  title: z.string().describe('The title of the similar listing.'),
  description: z.string().describe('A description of the similar listing.'),
  winningBid: z.number().describe('The winning bid amount for the similar listing.'),
  auctionLengthDays: z.number().describe('The auction length in days for the similar listing.'),
});

const SuggestSimilarListingsOutputSchema = z.object({
  listings: z.array(SuggestedListingSchema).describe('An array of similar listings.'),
});

export type SuggestSimilarListingsOutput = z.infer<typeof SuggestSimilarListingsOutputSchema>;

export async function suggestSimilarListings(input: SuggestSimilarListingsInput): Promise<SuggestSimilarListingsOutput> {
  return suggestSimilarListingsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestSimilarListingsPrompt',
  input: {schema: SuggestSimilarListingsInputSchema},
  output: {schema: SuggestSimilarListingsOutputSchema},
  prompt: `You are an auction listing expert. Given the details of a seller's potential listing, you will suggest similar successful listings as inspiration.

Item Category: {{{itemCategory}}}
Item Description: {{{itemDescription}}}
Desired Auction Length (days): {{{desiredAuctionLengthDays}}}

Suggest 3 similar listings, including their title, description, winning bid, and auction length (in days). Consider what made these listings successful.

Format your response as a JSON object with a "listings" field containing an array of similar listing objects. Each listing object should have the following fields: "title", "description", "winningBid", and "auctionLengthDays".`,
});

const suggestSimilarListingsFlow = ai.defineFlow(
  {
    name: 'suggestSimilarListingsFlow',
    inputSchema: SuggestSimilarListingsInputSchema,
    outputSchema: SuggestSimilarListingsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
```
- src/ai/genkit.ts:
```ts
import {genkit} from 'genkit';
import {googleAI} from '@genkit-ai/googleai';

export const ai = genkit({
  plugins: [googleAI()],
  model: 'googleai/gemini-2.0-flash',
});
```
- src/app/.env:
```

```
- src/app/about/page.tsx:
```tsx
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import Image from 'next/image';
import { Users, Target, Handshake } from 'lucide-react';

export default function AboutPage() {
  return (
    <div className="space-y-12">
      <section className="text-center py-12 bg-gradient-to-br from-primary/10 via-background to-accent/10 rounded-lg">
        <h1 className="text-4xl font-bold mb-4 font-headline">About BidExpert</h1>
        <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
          We are passionate about connecting buyers and sellers through a seamless and trustworthy auction experience.
        </p>
      </section>

      <section>
        <Card className="shadow-lg">
          <CardHeader>
            <CardTitle className="text-2xl font-semibold font-headline flex items-center">
              <Target className="h-6 w-6 mr-2 text-primary" /> Our Mission
            </CardTitle>
          </CardHeader>
          <CardContent className="text-muted-foreground">
            <p>
              Our mission is to provide an innovative and user-friendly platform for online auctions, empowering individuals and businesses to discover unique items, achieve fair market values, and engage in exciting bidding wars. We strive for transparency, security, and exceptional customer support.
            </p>
          </CardContent>
        </Card>
      </section>

      <section className="grid md:grid-cols-2 gap-8 items-center">
        <div>
          <h2 className="text-3xl font-bold mb-4 font-headline">Who We Are</h2>
          <p className="text-muted-foreground mb-4">
            BidExpert was founded by a team of auction enthusiasts and technology experts who saw an opportunity to modernize the online auction landscape. We believe in the power of auctions to uncover hidden gems and create thrilling experiences.
          </p>
          <p className="text-muted-foreground">
            Our platform is built with cutting-edge technology to ensure reliability and security, while our AI-powered tools help sellers optimize their listings and buyers make informed decisions.
          </p>
        </div>
        <div className="relative aspect-video rounded-lg overflow-hidden shadow-lg">
          <Image src="https://placehold.co/600x400.png" alt="Our Team" fill className="object-cover" data-ai-hint="team meeting" />
        </div>
      </section>
      
      <section>
        <h2 className="text-3xl font-bold text-center mb-8 font-headline">Our Values</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {[
            { icon: <Users className="h-8 w-8 text-primary" />, title: 'Community', description: 'Fostering a vibrant community of buyers and sellers.' },
            { icon: <Handshake className="h-8 w-8 text-primary" />, title: 'Integrity', description: 'Operating with transparency and fairness in all transactions.' },
            { icon: <Target className="h-8 w-8 text-primary" />, title: 'Innovation', description: 'Continuously improving our platform with new features and technologies.' },
          ].map(value => (
            <Card key={value.title} className="text-center p-6 shadow-md hover:shadow-lg transition-shadow">
              <div className="flex justify-center mb-3">{value.icon}</div>
              <h3 className="text-xl font-semibold mb-2">{value.title}</h3>
              <p className="text-sm text-muted-foreground">{value.description}</p>
            </Card>
          ))}
        </div>
      </section>
    </div>
  );
}
```
- src/app/admin/auctioneers/[auctioneerId]/edit/page.tsx:
```tsx
import AuctioneerForm from '../../auctioneer-form';
import { getAuctioneer, updateAuctioneer, type AuctioneerFormData } from '../../actions';
import { notFound } from 'next/navigation';

export default async function EditAuctioneerPage({ params }: { params: { auctioneerId: string } }) {
  const auctioneerId = params.auctioneerId;
  const auctioneer = await getAuctioneer(auctioneerId);

  if (!auctioneer) {
    notFound();
  }

  async function handleUpdateAuctioneer(data: Partial<AuctioneerFormData>) {
    'use server';
    return updateAuctioneer(auctioneerId, data);
  }

  return (
    <AuctioneerForm
      initialData={auctioneer}
      onSubmitAction={handleUpdateAuctioneer}
      formTitle="Editar Leiloeiro"
      formDescription="Modifique os detalhes do leiloeiro existente."
      submitButtonText="Salvar Alterações"
    />
  );
}
```
- src/app/admin/auctioneers/actions.ts:
```ts
/**
 * @fileoverview Server Actions for managing Auctioneer profiles.
 * 
 * This file contains the server-side logic for creating, reading, updating,
 * and deleting auctioneer profiles (AuctioneerProfileInfo). These functions
 * interact directly with the Prisma client to perform database operations
 * and revalidate Next.js cache where necessary to reflect changes in the UI.
 */
'use server';

import { revalidatePath } from 'next/cache';
import { prisma } from '@/lib/prisma';
import type { AuctioneerProfileInfo, AuctioneerFormData, Auction } from '@/types';
import { slugify } from '@/lib/sample-data-helpers';
import { v4 as uuidv4 } from 'uuid';

/**
 * Creates a new auctioneer profile in the database.
 * @param {AuctioneerFormData} data - The auctioneer data from the form.
 * @returns {Promise<{ success: boolean; message: string; auctioneerId?: string; auctioneerPublicId?: string; }>} 
 * An object indicating the result of the operation.
 */
export async function createAuctioneer(
  data: AuctioneerFormData
): Promise<{ success: boolean; message: string; auctioneerId?: string; auctioneerPublicId?: string; }> {
  try {
    const newAuctioneer = await prisma.auctioneer.create({
      data: {
        ...data,
        publicId: `AUCT-PUB-${uuidv4().substring(0,8)}`,
        slug: slugify(data.name),
        userId: data.userId || null,
        rating: data.rating || null,
        memberSince: data.memberSince ? new Date(data.memberSince) : null,
      }
    });
    revalidatePath('/admin/auctioneers');
    return { success: true, message: 'Leiloeiro criado com sucesso!', auctioneerId: newAuctioneer.id, auctioneerPublicId: newAuctioneer.publicId };
  } catch (error: any) {
    console.error("Error creating auctioneer:", error);
    if (error.code === 'P2002' && error.meta?.target?.includes('slug')) {
      return { success: false, message: 'Já existe um leiloeiro com este nome (slug). Por favor, escolha outro nome.' };
    }
    return { success: false, message: error.message || 'Falha ao criar leiloeiro.' };
  }
}

/**
 * Fetches all auctioneer profiles from the database.
 * @returns {Promise<AuctioneerProfileInfo[]>} An array of all auctioneers.
 */
export async function getAuctioneers(): Promise<AuctioneerProfileInfo[]> {
  try {
    const auctioneers = await prisma.auctioneer.findMany({
      orderBy: { name: 'asc' }
    });
    return auctioneers as unknown as AuctioneerProfileInfo[];
  } catch (error: any) {
    console.error("Error fetching auctioneers:", error);
    return [];
  }
}

/**
 * Fetches a single auctioneer by their internal ID or public ID.
 * @param {string} id - The internal or public ID of the auctioneer.
 * @returns {Promise<AuctioneerProfileInfo | null>} The auctioneer profile or null if not found.
 */
export async function getAuctioneer(id: string): Promise<AuctioneerProfileInfo | null> {
  try {
    const auctioneer = await prisma.auctioneer.findFirst({
      where: { OR: [{ id }, { publicId: id }] }
    });
    return auctioneer as unknown as AuctioneerProfileInfo | null;
  } catch (error: any) {
    console.error(`Error fetching auctioneer with ID ${id}:`, error);
    return null;
  }
}

/**
 * Fetches a single auctioneer by their slug or public ID.
 * @param {string} slugOrPublicId - The slug or public ID of the auctioneer.
 * @returns {Promise<AuctioneerProfileInfo | null>} The auctioneer profile or null if not found.
 */
export async function getAuctioneerBySlug(slugOrPublicId: string): Promise<AuctioneerProfileInfo | null> {
  try {
    const auctioneer = await prisma.auctioneer.findFirst({
      where: { OR: [{ slug: slugOrPublicId }, { publicId: slugOrPublicId }] }
    });
    return auctioneer as unknown as AuctioneerProfileInfo | null;
  } catch (error: any) {
    console.error(`Error fetching auctioneer by slug/publicId ${slugOrPublicId}:`, error);
    return null;
  }
}

/**
 * Fetches a single auctioneer by their exact name.
 * @param {string} name - The name of the auctioneer.
 * @returns {Promise<AuctioneerProfileInfo | null>} The auctioneer profile or null if not found.
 */
export async function getAuctioneerByName(name: string): Promise<AuctioneerProfileInfo | null> {
  try {
    const auctioneer = await prisma.auctioneer.findFirst({
      where: { name }
    });
    return auctioneer as unknown as AuctioneerProfileInfo | null;
  } catch (error: any) {
    console.error(`Error fetching auctioneer by name ${name}:`, error);
    return null;
  }
}

/**
 * Fetches all auctions conducted by a specific auctioneer.
 * @param {string} auctioneerSlugOrPublicId - The slug or public ID of the auctioneer.
 * @returns {Promise<Auction[]>} An array of auctions associated with the auctioneer.
 */
export async function getAuctionsByAuctioneerSlug(auctioneerSlugOrPublicId: string): Promise<Auction[]> {
  try {
    const auctions = await prisma.auction.findMany({
      where: {
        auctioneer: {
          OR: [
            { slug: auctioneerSlugOrPublicId },
            { publicId: auctioneerSlugOrPublicId }
          ]
        }
      },
      include: {
        lots: { select: { id: true }},
      }
    });
    return auctions.map(a => ({
        ...a,
        totalLots: a.lots.length,
    })) as unknown as Auction[];
  } catch (error) {
    console.error(`Error fetching auctions for auctioneer slug/id ${auctioneerSlugOrPublicId}:`, error);
    return [];
  }
}

/**
 * Updates an existing auctioneer's profile.
 * @param {string} id - The internal ID of the auctioneer to update.
 * @param {Partial<AuctioneerFormData>} data - The partial data to update.
 * @returns {Promise<{ success: boolean; message: string; }>} An object indicating the result.
 */
export async function updateAuctioneer(
  id: string, 
  data: Partial<AuctioneerFormData>
): Promise<{ success: boolean; message: string }> {
  try {
    const updateData: any = { ...data };
    if (data.name) {
      updateData.slug = slugify(data.name);
    }
    await prisma.auctioneer.update({
      where: { id },
      data: updateData,
    });
    revalidatePath('/admin/auctioneers');
    revalidatePath(`/admin/auctioneers/${id}/edit`);
    if(updateData.slug) revalidatePath(`/auctioneers/${updateData.slug}`);
    return { success: true, message: 'Leiloeiro atualizado com sucesso!' };
  } catch (error: any) {
    console.error(`Error updating auctioneer with ID ${id}:`, error);
    return { success: false, message: error.message || 'Falha ao atualizar leiloeiro.' };
  }
}

/**
 * Deletes an auctioneer from the database.
 * @param {string} id - The internal ID of the auctioneer to delete.
 * @returns {Promise<{ success: boolean; message: string; }>} An object indicating the result.
 */
export async function deleteAuctioneer(
  id: string 
): Promise<{ success: boolean; message: string }> {
  try {
    await prisma.auctioneer.delete({ where: { id } });
    revalidatePath('/admin/auctioneers');
    return { success: true, message: 'Leiloeiro excluído com sucesso!' };
  } catch (error: any)
{
    console.error(`Error deleting auctioneer with ID ${id}:`, error);
    if (error.code === 'P2003') { // Foreign key constraint failed
      return { success: false, message: 'Não é possível excluir. Este leiloeiro está associado a um ou mais leilões.' };
    }
    return { success: false, message: error.message || 'Falha ao excluir leiloeiro.' };
  }
}
```
- src/app/admin/auctioneers/auctioneer-form-schema.ts:
```ts
import * as z from 'zod';

export const auctioneerFormSchema = z.object({
  name: z.string().min(3, {
    message: "O nome do leiloeiro deve ter pelo menos 3 caracteres.",
  }).max(150, {
    message: "O nome do leiloeiro não pode exceder 150 caracteres.",
  }),
  registrationNumber: z.string().max(50, {
    message: "O número de registro não pode exceder 50 caracteres.",
  }).optional().nullable(),
  contactName: z.string().max(150).optional().nullable(),
  email: z.string().email({ message: "Formato de email inválido." }).optional().nullable().or(z.literal('')),
  phone: z.string().max(20).optional().nullable(),
  address: z.string().max(200).optional().nullable(),
  city: z.string().max(100).optional().nullable(),
  state: z.string().max(50).optional().nullable(), // Pode ser UF (2) ou nome completo
  zipCode: z.string().max(10).optional().nullable(),
  website: z.string().url({ message: "URL do website inválida." }).optional().nullable().or(z.literal('')),
  logoUrl: z.string().url({ message: "URL do logo inválida." }).optional().nullable().or(z.literal('')),
  dataAiHintLogo: z.string().max(50, {message: "Dica de IA para logo não pode exceder 50 caracteres."}).optional().nullable(),
  description: z.string().max(2000, {
    message: "A descrição não pode exceder 2000 caracteres.",
  }).optional().nullable(),
  userId: z.string().optional().nullable(), // Se o leiloeiro pode ser um usuário da plataforma
});

export type AuctioneerFormValues = z.infer<typeof auctioneerFormSchema>;
```
- src/app/admin/auctioneers/auctioneer-form.tsx:
```tsx
'use client';

import * as React from 'react';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm, useWatch } from 'react-hook-form'; // Added useWatch
import { Button } from '@/components/ui/button';
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/hooks/use-toast';
import { useRouter } from 'next/navigation';
import { auctioneerFormSchema, type AuctioneerFormValues } from './auctioneer-form-schema';
import type { AuctioneerProfileInfo, MediaItem } from '@/types';
import { Loader2, Save, Landmark, Image as ImageIcon } from 'lucide-react'; // Added ImageIcon
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import Image from 'next/image'; // Added Image
import ChooseMediaDialog from '@/components/admin/media/choose-media-dialog'; // Added ChooseMediaDialog

interface AuctioneerFormProps {
  initialData?: AuctioneerProfileInfo | null;
  onSubmitAction: (data: AuctioneerFormValues) => Promise<{ success: boolean; message: string; auctioneerId?: string }>;
  formTitle: string;
  formDescription: string;
  submitButtonText: string;
}

export default function AuctioneerForm({
  initialData,
  onSubmitAction,
  formTitle,
  formDescription,
  submitButtonText,
}: AuctioneerFormProps) {
  const { toast } = useToast();
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = React.useState(false);
  const [isMediaDialogOpen, setIsMediaDialogOpen] = React.useState(false);

  const form = useForm<AuctioneerFormValues>({
    resolver: zodResolver(auctioneerFormSchema),
    defaultValues: {
      name: initialData?.name || '',
      registrationNumber: initialData?.registrationNumber || '',
      contactName: initialData?.contactName || '',
      email: initialData?.email || '',
      phone: initialData?.phone || '',
      address: initialData?.address || '',
      city: initialData?.city || '',
      state: initialData?.state || '',
      zipCode: initialData?.zipCode || '',
      website: initialData?.website || '',
      logoUrl: initialData?.logoUrl || '',
      dataAiHintLogo: initialData?.dataAiHintLogo || '',
      description: initialData?.description || '',
      userId: initialData?.userId || '',
    },
  });

  const logoUrlPreview = useWatch({ control: form.control, name: 'logoUrl' });

  const handleMediaSelect = (selectedItems: Partial<MediaItem>[]) => {
    if (selectedItems.length > 0) {
      const selectedMediaItem = selectedItems[0];
      if (selectedMediaItem?.urlOriginal) {
        form.setValue('logoUrl', selectedMediaItem.urlOriginal);
      } else {
        toast({ title: "Seleção Inválida", description: "O item de mídia selecionado não possui uma URL válida.", variant: "destructive" });
      }
    }
    setIsMediaDialogOpen(false);
  };

  async function onSubmit(values: AuctioneerFormValues) {
    setIsSubmitting(true);
    try {
      const result = await onSubmitAction(values);
      if (result.success) {
        toast({
          title: 'Sucesso!',
          description: result.message,
        });
        router.push('/admin/auctioneers');
        router.refresh();
      } else {
        toast({
          title: 'Erro',
          description: result.message,
          variant: 'destructive',
        });
      }
    } catch (error) {
      toast({
        title: 'Erro Inesperado',
        description: 'Ocorreu um erro ao processar sua solicitação.',
        variant: 'destructive',
      });
      console.error("Unexpected error in auctioneer form:", error);
    } finally {
      setIsSubmitting(false);
    }
  }

  return (
    <>
      <Card className="max-w-3xl mx-auto shadow-lg">
        <CardHeader>
          <CardTitle className="flex items-center gap-2"><Landmark className="h-6 w-6 text-primary" /> {formTitle}</CardTitle>
          <CardDescription>{formDescription}</CardDescription>
        </CardHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)}>
            <CardContent className="space-y-6 p-6 bg-secondary/30">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Nome do Leiloeiro/Empresa de Leilões</FormLabel>
                    <FormControl>
                      <Input placeholder="Ex: João Silva Leiloeiro Oficial, Leilões Brasil Ltda." {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="registrationNumber"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Número de Registro Oficial (Opcional)</FormLabel>
                    <FormControl>
                      <Input placeholder="Ex: JUCESP 123, Matrícula 001/AA" {...field} value={field.value ?? ""} />
                    </FormControl>
                    <FormDescription>Número de matrícula na Junta Comercial ou órgão competente.</FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <div className="grid md:grid-cols-2 gap-6">
                <FormField
                  control={form.control}
                  name="contactName"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Nome do Contato (Opcional)</FormLabel>
                      <FormControl>
                        <Input placeholder="Nome do responsável" {...field} value={field.value ?? ""} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="email"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Email de Contato (Opcional)</FormLabel>
                      <FormControl>
                        <Input type="email" placeholder="contato@leiloeiro.com" {...field} value={field.value ?? ""} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              <div className="grid md:grid-cols-2 gap-6">
                <FormField
                  control={form.control}
                  name="phone"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Telefone Principal (Opcional)</FormLabel>
                      <FormControl>
                        <Input placeholder="(XX) XXXXX-XXXX" {...field} value={field.value ?? ""} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="website"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Website (Opcional)</FormLabel>
                      <FormControl>
                        <Input type="url" placeholder="https://www.leiloeiro.com" {...field} value={field.value ?? ""} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
               <FormField
                  control={form.control}
                  name="address"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Endereço do Escritório/Pátio (Opcional)</FormLabel>
                      <FormControl>
                        <Input placeholder="Rua Exemplo, 123, Bairro" {...field} value={field.value ?? ""} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              <div className="grid md:grid-cols-3 gap-6">
                <FormField
                  control={form.control}
                  name="city"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Cidade (Opcional)</FormLabel>
                      <FormControl>
                        <Input placeholder="São Paulo" {...field} value={field.value ?? ""} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="state"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Estado/UF (Opcional)</FormLabel>
                      <FormControl>
                        <Input placeholder="SP" {...field} value={field.value ?? ""} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="zipCode"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>CEP (Opcional)</FormLabel>
                      <FormControl>
                        <Input placeholder="00000-000" {...field} value={field.value ?? ""} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
               
               <FormItem>
                  <FormLabel>Logo do Leiloeiro</FormLabel>
                  <div className="flex items-center gap-4">
                    <div className="relative w-24 h-24 flex-shrink-0 bg-muted rounded-md overflow-hidden border">
                      {logoUrlPreview ? (
                        <Image src={logoUrlPreview} alt="Prévia do Logo" fill className="object-contain" data-ai-hint="previa logo leiloeiro" />
                      ) : (
                        <div className="flex items-center justify-center h-full text-muted-foreground">
                          <ImageIcon className="h-8 w-8" />
                        </div>
                      )}
                    </div>
                    <div className="flex-grow space-y-2">
                      <Button type="button" variant="outline" onClick={() => setIsMediaDialogOpen(true)}>
                        {logoUrlPreview ? 'Alterar Logo' : 'Escolher da Biblioteca'}
                      </Button>
                      <FormField
                        control={form.control}
                        name="logoUrl"
                        render={({ field }) => (
                            <FormControl>
                                <Input type="text" placeholder="Ou cole a URL aqui" {...field} value={field.value ?? ""} className="text-xs h-8" />
                            </FormControl>
                        )}
                        />
                      <FormMessage />
                    </div>
                  </div>
                </FormItem>
              <FormField
                control={form.control}
                name="dataAiHintLogo"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Dica para IA (Logo - Opcional)</FormLabel>
                    <FormControl>
                      <Input placeholder="Ex: martelo leilao, logo escritorio" {...field} value={field.value ?? ""} />
                    </FormControl>
                     <FormDescription>Duas palavras chave para ajudar a IA encontrar uma imagem de placeholder, se a URL do logo não for fornecida.</FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Sobre o Leiloeiro/Empresa (Opcional)</FormLabel>
                    <FormControl>
                      <Textarea placeholder="Breve descrição, especialidades, áreas de atuação..." {...field} value={field.value ?? ""} rows={4} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </CardContent>
            <CardFooter className="flex justify-end gap-2 p-6 border-t">
              <Button type="button" variant="outline" onClick={() => router.push('/admin/auctioneers')} disabled={isSubmitting}>
                Cancelar
              </Button>
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Save className="mr-2 h-4 w-4" />}
                {submitButtonText}
              </Button>
            </CardFooter>
          </form>
        </Form>
      </Card>
      <ChooseMediaDialog
        isOpen={isMediaDialogOpen}
        onOpenChange={setIsMediaDialogOpen}
        onMediaSelect={handleMediaSelect}
        allowMultiple={false}
      />
    </>
  );
}
```
- src/app/admin/auctioneers/columns.tsx:
```tsx
// src/app/admin/auctioneers/columns.tsx
'use client';

import type { ColumnDef } from '@tanstack/react-table';
import { MoreHorizontal, ArrowUpDown } from 'lucide-react';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import Link from 'next/link';
import { Checkbox } from '@/components/ui/checkbox';
import type { AuctioneerProfileInfo } from '@/types';
import { Badge } from '@/components/ui/badge';
import { DataTableColumnHeader } from '@/components/ui/data-table-column-header';

export const createColumns = ({ handleDelete }: { handleDelete: (id: string) => void }): ColumnDef<AuctioneerProfileInfo>[] => [
  {
    id: "select",
    header: ({ table }) => (
      <Checkbox
        checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && "indeterminate")}
        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
        aria-label="Selecionar todos"
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Selecionar linha"
      />
    ),
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "name",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Nome" />,
    cell: ({ row }) => (
      <div className="font-medium">
        <Link href={`/admin/auctioneers/${row.original.id}/edit`} className="hover:text-primary">
          {row.getValue("name")}
        </Link>
        <p className="text-xs text-muted-foreground">ID: {row.original.publicId || row.original.id}</p>
      </div>
    ),
  },
  {
    accessorKey: "email",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Email" />,
  },
  {
    accessorKey: "phone",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Telefone" />,
  },
  {
    accessorKey: "city",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Cidade" />,
  },
  {
    accessorKey: "state",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Estado" />,
  },
  {
    id: "actions",
    cell: ({ row }) => {
      const auctioneer = row.original;
      return (
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" className="h-8 w-8 p-0">
              <span className="sr-only">Abrir menu</span>
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuLabel>Ações</DropdownMenuLabel>
            <DropdownMenuItem asChild>
              <Link href={`/auctioneers/${auctioneer.slug || auctioneer.publicId || auctioneer.id}`} target="_blank">Ver Perfil Público</Link>
            </DropdownMenuItem>
            <DropdownMenuItem asChild>
              <Link href={`/admin/auctioneers/${auctioneer.id}/edit`}>Editar</Link>
            </DropdownMenuItem>
            <DropdownMenuSeparator />
            <DropdownMenuItem onClick={() => handleDelete(auctioneer.id)} className="text-destructive">
              Excluir
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      );
    },
  },
];
```
- src/app/admin/auctioneers/new/page.tsx:
```tsx
import AuctioneerForm from '../auctioneer-form';
import { createAuctioneer, type AuctioneerFormData } from '../actions';

export default async function NewAuctioneerPage() {
  async function handleCreateAuctioneer(data: AuctioneerFormData) {
    'use server';
    return createAuctioneer(data);
  }

  return (
    <AuctioneerForm
      onSubmitAction={handleCreateAuctioneer}
      formTitle="Novo Leiloeiro"
      formDescription="Preencha os detalhes para cadastrar um novo leiloeiro."
      submitButtonText="Criar Leiloeiro"
    />
  );
}
```
- src/app/admin/auctioneers/page.tsx:
```tsx
// src/app/admin/auctioneers/page.tsx
'use client';

import { useState, useEffect, useCallback, useMemo } from 'react';
import type { AuctioneerProfileInfo } from '@/types';
import { getAuctioneers, deleteAuctioneer } from './actions';
import { useToast } from '@/hooks/use-toast';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { PlusCircle, Landmark } from 'lucide-react';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { DataTable } from '@/components/ui/data-table';
import { createColumns } from './columns';

export default function AdminAuctioneersPage() {
  const [auctioneers, setAuctioneers] = useState<AuctioneerProfileInfo[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const { toast } = useToast();
  const [refetchTrigger, setRefetchTrigger] = useState(0);

  useEffect(() => {
    let isMounted = true;
    const fetchAuctioneers = async () => {
      if (!isMounted) return;
      setIsLoading(true);
      setError(null);
      try {
        const fetchedAuctioneers = await getAuctioneers();
        if (isMounted) {
          setAuctioneers(fetchedAuctioneers);
        }
      } catch (e) {
        const errorMessage = e instanceof Error ? e.message : "Falha ao buscar leiloeiros.";
        console.error("Error fetching auctioneers:", e);
        if (isMounted) {
          setError(errorMessage);
          toast({ title: "Erro", description: errorMessage, variant: "destructive" });
        }
      } finally {
        if (isMounted) {
          setIsLoading(false);
        }
      }
    };
    fetchAuctioneers();

    return () => {
      isMounted = false;
    };
  }, [toast, refetchTrigger]);

  const handleDelete = useCallback(
    async (id: string) => {
      const result = await deleteAuctioneer(id);
      if (result.success) {
        toast({ title: "Sucesso", description: result.message });
        setRefetchTrigger(c => c + 1);
      } else {
        toast({ title: "Erro", description: result.message, variant: "destructive" });
      }
    },
    [toast]
  );
  
  const columns = useMemo(() => createColumns({ handleDelete }), [handleDelete]);

  return (
    <div className="space-y-6">
      <Card className="shadow-lg">
        <CardHeader className="flex flex-row items-center justify-between">
          <div>
            <CardTitle className="text-2xl font-bold font-headline flex items-center">
              <Landmark className="h-6 w-6 mr-2 text-primary" />
              Gerenciar Leiloeiros
            </CardTitle>
            <CardDescription>
              Adicione, edite ou remova leiloeiros da plataforma.
            </CardDescription>
          </div>
          <Button asChild>
            <Link href="/admin/auctioneers/new">
              <PlusCircle className="mr-2 h-4 w-4" /> Novo Leiloeiro
            </Link>
          </Button>
        </CardHeader>
        <CardContent>
           <DataTable
            columns={columns}
            data={auctioneers}
            isLoading={isLoading}
            error={error}
            searchColumnId="name"
            searchPlaceholder="Buscar por nome..."
          />
        </CardContent>
      </Card>
    </div>
  );
}
```
- src/app/admin/auctions/[auctionId]/edit/page.tsx:
```tsx
// src/app/admin/auctions/[auctionId]/edit/page.tsx
'use client'; 

import AuctionForm from '../../auction-form';
import { getAuction, updateAuction, deleteAuction, type AuctionFormData } from '../../actions'; 
import { getLotCategories } from '@/app/admin/categories/actions';
import { getLots, deleteLot, finalizeLot } from '@/app/admin/lots/actions'; 
import type { Auction, Lot, PlatformSettings, LotCategory, AuctioneerProfileInfo, SellerProfileInfo } from '@/types';
import { notFound, useRouter, useParams } from 'next/navigation'; 
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import { PlusCircle, Edit, Trash2, Eye, Info, Settings, BarChart2, FileText, Users, CheckCircle, XCircle, Loader2, ExternalLink, ListChecks, AlertTriangle, Package as PackageIcon, Clock as ClockIcon, LandPlot, ShoppingCart, Layers, Gavel, FileSignature } from 'lucide-react'; // Added Gavel, FileSignature
import { format, differenceInDays, isPast } from 'date-fns';
import { ptBR } from 'date-fns/locale';
import { getAuctionStatusText, slugify } from '@/lib/sample-data-helpers';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { Badge } from '@/components/ui/badge';
import { getAuctioneers } from '@/app/admin/auctioneers/actions';
import { getSellers } from '@/app/admin/sellers/actions';
import { Separator } from '@/components/ui/separator';
import React, { useEffect, useCallback, useMemo, useState } from 'react'; 
import { useToast } from '@/hooks/use-toast';
import SearchResultsFrame from '@/components/search-results-frame';
import AuctionStagesTimeline from '@/components/auction/auction-stages-timeline';
import { samplePlatformSettings } from '@/lib/sample-data';
import { getPlatformSettings } from '@/app/admin/settings/actions';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { useAuth } from '@/contexts/auth-context';
import { hasAnyPermission } from '@/lib/permissions';

function DeleteLotButton({ lotId, lotTitle, auctionId, onDeleteSuccess }: { lotId: string; lotTitle: string; auctionId: string; onDeleteSuccess: () => void }) {
  const [isDeleting, setIsDeleting] = React.useState(false);
  const { toast } = useToast();

  const handleDelete = async () => {
    setIsDeleting(true);
    const result = await deleteLot(lotId, auctionId); 
    if (!result.success) {
        console.error("Failed to delete lot:", result.message);
        toast({ title: "Erro ao Excluir Lote", description: result.message, variant: "destructive" });
    } else {
        toast({ title: "Sucesso", description: "Lote excluído com sucesso." });
        onDeleteSuccess(); 
    }
    setIsDeleting(false);
  };

  return (
    <AlertDialog>
      <AlertDialogTrigger asChild>
        <Button variant="ghost" size="icon" className="text-destructive hover:text-destructive/80 h-7 w-7" disabled={isDeleting}>
          {isDeleting ? <Loader2 className="h-3.5 w-3.5 animate-spin" /> : <Trash2 className="h-3.5 w-3.5" />}
          <span className="sr-only">Excluir Lote</span>
        </Button>
      </AlertDialogTrigger>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>Confirmar Exclusão do Lote</AlertDialogTitle>
          <AlertDialogDescription>
            Tem certeza que deseja excluir o lote "{lotTitle}" (ID: {lotId}) deste leilão? Esta ação não pode ser desfeita.
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel disabled={isDeleting}>Cancelar</AlertDialogCancel>
          <AlertDialogAction
            onClick={handleDelete}
            disabled={isDeleting}
            className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
          >
            {isDeleting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
            Excluir Lote
          </AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
}

function FinalizeLotButton({ lot, onFinalized }: { lot: Lot; onFinalized: () => void }) {
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const handleFinalize = async () => {
      setIsLoading(true);
      const result = await finalizeLot(lot.id);
      if (result.success) {
          toast({ title: "Sucesso!", description: result.message });
          onFinalized();
      } else {
          toast({ title: "Erro ao Finalizar Lote", description: result.message, variant: "destructive" });
      }
      setIsLoading(false);
  };

  const canFinalize = lot.status === 'ABERTO_PARA_LANCES' || lot.status === 'ENCERRADO';

  return (
      <AlertDialog>
          <AlertDialogTrigger asChild>
              <Button variant="ghost" size="icon" className="text-green-600 hover:text-green-700 h-7 w-7" disabled={!canFinalize || isLoading}>
                  {isLoading ? <Loader2 className="h-3.5 w-3.5 animate-spin" /> : <CheckCircle className="h-3.5 w-3.5" />}
                  <span className="sr-only">Finalizar Lote</span>
              </Button>
          </AlertDialogTrigger>
          <AlertDialogContent>
              <AlertDialogHeader>
                  <AlertDialogTitle>Confirmar Finalização do Lote?</AlertDialogTitle>
                  <AlertDialogDescription>
                      Esta ação irá determinar o vencedor com base no lance mais alto, atualizar o status do lote para "Vendido" (ou "Não Vendido") e notificar o vencedor. Esta ação não pode ser desfeita.
                  </AlertDialogDescription>
              </AlertDialogHeader>
              <AlertDialogFooter>
                  <AlertDialogCancel disabled={isLoading}>Cancelar</AlertDialogCancel>
                  <AlertDialogAction onClick={handleFinalize} disabled={isLoading} className="bg-green-600 hover:bg-green-700">
                      {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                      Finalizar Agora
                  </AlertDialogAction>
              </AlertDialogFooter>
          </AlertDialogContent>
      </AlertDialog>
  );
}

function AuctionActionsDisplay({ auction, userProfile }: { auction: Auction; userProfile: any }) {
    const hasGenerateReportPerm = hasAnyPermission(userProfile, ['manage_all', 'documents:generate_report']);
    const hasGenerateCertificatePerm = hasAnyPermission(userProfile, ['manage_all', 'documents:generate_certificate']);
    
    return (
        <Card className="shadow-md">
            <CardHeader>
                <CardTitle className="text-lg flex items-center"><FileSignature className="mr-2 h-5 w-5 text-primary"/> Ações Pós-Leilão e Documentação</CardTitle>
                <CardDescription>Gere laudos e certificados para este leilão.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-2">
                 <TooltipProvider>
                    <Tooltip>
                        <TooltipTrigger asChild>
                            <div className="w-full">
                                <Button className="w-full justify-start" disabled={!hasGenerateReportPerm}>
                                    <FileText className="mr-2 h-4 w-4"/> Gerar Laudo de Avaliação (PDF)
                                </Button>
                            </div>
                        </TooltipTrigger>
                        {!hasGenerateReportPerm && <TooltipContent><p>Você não tem permissão para gerar laudos.</p></TooltipContent>}
                    </Tooltip>
                    <Tooltip>
                        <TooltipTrigger asChild>
                            <div className="w-full">
                                <Button className="w-full justify-start" disabled={!hasGenerateCertificatePerm}>
                                    <CheckCircle className="mr-2 h-4 w-4"/> Gerar Relatório de Arremates (PDF)
                                </Button>
                            </div>
                        </TooltipTrigger>
                        {!hasGenerateCertificatePerm && <TooltipContent><p>Você não tem permissão para gerar certificados.</p></TooltipContent>}
                    </Tooltip>
                    <Tooltip>
                        <TooltipTrigger asChild>
                            <div className="w-full">
                                <Button variant="secondary" className="w-full justify-start" disabled>
                                    <Users className="mr-2 h-4 w-4"/> Enviar Comunicação aos Arrematantes
                                </Button>
                            </div>
                        </TooltipTrigger>
                        <TooltipContent><p>Funcionalidade em desenvolvimento.</p></TooltipContent>
                    </Tooltip>
                 </TooltipProvider>
            </CardContent>
        </Card>
    );
}

function AuctionInfoDisplay({ auction }: { auction: Auction }) {
    const auctionTypeLabels: Record<string, string> = {
        JUDICIAL: 'Judicial',
        EXTRAJUDICIAL: 'Extrajudicial',
        PARTICULAR: 'Particular',
        TOMADA_DE_PRECOS: 'Tomada de Preços',
    };

    const getDaysRemaining = (endDate: string | Date | null | undefined) => {
        if (!endDate) return null;
        const diff = differenceInDays(new Date(endDate), new Date());
        if (diff < 0) return "Encerrado";
        if (diff === 0) return "Encerra Hoje";
        return `${diff} dia(s) restante(s)`;
    };

    return (
        <div className="space-y-4">
            <Card className="shadow-md">
                <CardHeader>
                    <CardTitle className="text-lg flex items-center"><Info className="mr-2 h-5 w-5 text-primary" /> Resumo do Leilão</CardTitle>
                </CardHeader>
                <CardContent className="space-y-2 text-sm">
                    <p><strong>ID do Leilão:</strong> {auction.publicId}</p>
                    <div className="flex items-center"><strong>Status:</strong><Badge variant="outline" className={`ml-2 ${auction.status === 'ABERTO_PARA_LANCES' || auction.status === 'ABERTO' ? 'border-green-500 text-green-600' : 'border-gray-400'}`}>{getAuctionStatusText(auction.status)}</Badge></div>
                    <p><strong>Data Início:</strong> {auction.auctionDate ? format(new Date(auction.auctionDate as string), "dd/MM/yyyy HH:mm", { locale: ptBR }) : 'N/A'}</p>
                    <p><strong>Data Fim (Estimada):</strong> {auction.endDate ? format(new Date(auction.endDate as string), "dd/MM/yyyy HH:mm", { locale: ptBR }) : 'Não definida'}</p>
                    {auction.endDate && !isPast(new Date(auction.endDate as string)) && <p><strong>Tempo Restante:</strong> {getDaysRemaining(auction.endDate)}</p>}
                    <p><strong>Categoria:</strong> {auction.category}</p>
                    <p><strong>Leiloeiro:</strong> {auction.auctioneer}</p>
                    <p><strong>Comitente:</strong> {auction.seller || 'N/A'}</p>
                </CardContent>
            </Card>

            <Card className="shadow-md">
                <CardHeader>
                    <CardTitle className="text-lg flex items-center"><Settings className="mr-2 h-5 w-5 text-primary" /> Configurações de Venda e Marketplace</CardTitle>
                </CardHeader>
                <CardContent className="space-y-2 text-sm">
                    <p><strong>Modalidade:</strong> {auctionTypeLabels[auction.auctionType || ''] || 'Não especificada'}</p>
                    <p><strong>Robô de Lances:</strong> {auction.automaticBiddingEnabled ? <CheckCircle className="inline h-4 w-4 text-green-600"/> : <XCircle className="inline h-4 w-4 text-red-600"/>} {auction.automaticBiddingEnabled ? 'Ativado' : 'Desativado'}</p>
                    <p><strong>Permite Lance Parcelado:</strong> {auction.allowInstallmentBids ? <CheckCircle className="inline h-4 w-4 text-green-600"/> : <XCircle className="inline h-4 w-4 text-red-600"/>} {auction.allowInstallmentBids ? 'Sim' : 'Não'}</p>
                    <p><strong>Destaque no Marketplace:</strong> {auction.isFeaturedOnMarketplace ? <CheckCircle className="inline h-4 w-4 text-green-600"/> : <XCircle className="inline h-4 w-4 text-red-600"/>} {auction.isFeaturedOnMarketplace ? 'Sim' : 'Não'}</p>
                    {auction.isFeaturedOnMarketplace && <p><strong>Título do Anúncio:</strong> {auction.marketplaceAnnouncementTitle || 'Não definido'}</p>}
                </CardContent>
            </Card>
            
            <Card className="shadow-md">
                <CardHeader>
                    <CardTitle className="text-lg flex items-center"><BarChart2 className="mr-2 h-5 w-5 text-primary" /> Estatísticas</CardTitle>
                </CardHeader>
                <CardContent className="space-y-2 text-sm">
                    <p><strong>Visitas:</strong> {auction.visits || 0}</p>
                    <p><strong>Total de Lotes:</strong> {auction.totalLots || 0}</p>
                    <p><strong>Faturamento Estimado:</strong> R$ {(auction.estimatedRevenue || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
                    <p><strong>Faturamento Realizado:</strong> R$ {(auction.achievedRevenue || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
                    <p><strong>Usuários Habilitados:</strong> {auction.totalHabilitatedUsers || 0}</p>
                </CardContent>
            </Card>
        </div>
    );
}

export default function EditAuctionPage() {
  const paramsHook = useParams(); 
  const auctionId = paramsHook.auctionId as string; 
  const [auction, setAuction] = React.useState<Auction | null>(null);
  const [categories, setCategories] = React.useState<LotCategory[]>([]);
  const [lotsInAuction, setLotsInAuction] = React.useState<Lot[]>([]);
  const [auctioneers, setAuctioneersList] = React.useState<AuctioneerProfileInfo[]>([]);
  const [sellers, setSellersList] = React.useState<SellerProfileInfo[]>([]);
  const [isLoading, setIsLoading] = React.useState(true);
  const router = useRouter();
  const { toast } = useToast();
  const { userProfileWithPermissions } = useAuth();
  
  const [platformSettings, setPlatformSettings] = useState<PlatformSettings>(samplePlatformSettings as PlatformSettings);
  const [lotSortBy, setLotSortBy] = useState<string>('number_asc');
  const [lotCurrentPage, setLotCurrentPage] = useState(1);
  const [lotItemsPerPage, setLotItemsPerPage] = useState(platformSettings.searchItemsPerPage || 12);
  

  const fetchPageData = useCallback(async () => {
    if (!auctionId) return;
    setIsLoading(true);
    try {
        const [fetchedAuction, fetchedCategories, fetchedLots, fetchedAuctioneers, fetchedSellers, settings] = await Promise.all([
            getAuction(auctionId),
            getLotCategories(),
            getLots(auctionId),
            getAuctioneers(),
            getSellers(),
            getPlatformSettings(),
        ]);

        if (!fetchedAuction) {
            notFound();
            return;
        }
        setPlatformSettings(settings);
        setLotItemsPerPage(settings.searchItemsPerPage || 12);
        setAuction(fetchedAuction);
        setCategories(fetchedCategories);
        setLotsInAuction(fetchedLots);
        setAuctioneersList(fetchedAuctioneers);
        setSellersList(fetchedSellers);
        setLotCurrentPage(1); 
    } catch (error) {
        console.error("Error fetching data for edit auction page:", error);
        toast({ title: "Erro ao carregar dados", description: "Não foi possível buscar os dados do leilão.", variant: "destructive"});
    } finally {
        setIsLoading(false);
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [auctionId, toast]);


  useEffect(() => {
    fetchPageData();
  }, [fetchPageData]);

  async function handleUpdateAuction(data: Partial<AuctionFormData>) {
    return updateAuction(auctionId, data);
  }

  const lotSortOptions = [
    { value: 'number_asc', label: 'Nº Lote Crescente' },
    { value: 'number_desc', label: 'Nº Lote Decrescente' },
    { value: 'title_asc', label: 'Título A-Z' },
    { value: 'title_desc', label: 'Título Z-A' },
    { value: 'status_asc', label: 'Status A-Z' },
    { value: 'price_asc', label: 'Preço Crescente' },
    { value: 'price_desc', label: 'Preço Decrescente' },
  ];

  const sortedLots = useMemo(() => {
    return [...lotsInAuction].sort((a, b) => {
      switch (lotSortBy) {
        case 'number_asc':
          return (parseInt(a.number || '0') || 0) - (parseInt(b.number || '0') || 0);
        case 'number_desc':
          return (parseInt(b.number || '0') || 0) - (parseInt(a.number || '0') || 0);
        case 'title_asc':
          return a.title.localeCompare(b.title);
        case 'title_desc':
          return b.title.localeCompare(a.title);
        case 'status_asc':
          return getAuctionStatusText(a.status).localeCompare(getAuctionStatusText(b.status));
        case 'price_asc':
          return a.price - b.price;
        case 'price_desc':
          return b.price - a.price;
        default:
          return 0;
      }
    });
  }, [lotsInAuction, lotSortBy]);
  
  const paginatedLots = useMemo(() => {
    const startIndex = (lotCurrentPage - 1) * lotItemsPerPage;
    const endIndex = startIndex + lotItemsPerPage;
    return sortedLots.slice(startIndex, endIndex);
  }, [sortedLots, lotCurrentPage, lotItemsPerPage]);

  const handleLotSortChange = (newSortBy: string) => {
    setLotSortBy(newSortBy);
    setLotCurrentPage(1);
  };

  const handleLotPageChange = (newPage: number) => {
    setLotCurrentPage(newPage);
  };
  
  const handleLotItemsPerPageChange = (newSize: number) => {
      setLotItemsPerPage(newSize);
      setLotCurrentPage(1); // Reset to first page
  }

  const renderLotListItemForAdmin = (lot: Lot) => (
    <Card key={lot.id} className="mb-2 shadow-sm hover:shadow-md transition-shadow">
      <CardContent className="p-3">
        <div className="flex flex-col sm:flex-row justify-between items-start gap-2">
          <div className="flex-grow">
            <Link href={`/admin/lots/${lot.publicId || lot.id}/edit`} className="hover:text-primary">
              <h4 className="font-semibold text-sm">{lot.number ? `Lote ${lot.number}: ` : ''}{lot.title}</h4>
            </Link>
            <p className="text-xs text-muted-foreground">ID: {lot.publicId || lot.id}</p>
            {lot.type && (
             <p className="text-xs text-muted-foreground">
               Cat: {lot.type}
               {lot.subcategoryName && ` / ${lot.subcategoryName}`}
             </p>
           )}
            <Badge variant="outline" className={`text-xs mt-1 border-current`}>
                {getAuctionStatusText(lot.status)}
            </Badge>
          </div>
          <div className="flex-shrink-0 text-right">
            <p className="text-sm font-semibold">R$ {lot.price.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
            <p className="text-xs text-muted-foreground flex items-center justify-end gap-1">
              <Gavel className="h-3 w-3"/> {lot.bidsCount || 0}
            </p>
            <p className="text-xs text-muted-foreground">
              {lot.endDate ? format(new Date(lot.endDate as string), 'dd/MM/yy HH:mm', { locale: ptBR }) : 'N/A'}
            </p>
          </div>
        </div>
      </CardContent>
      <CardFooter className="p-2 border-t flex justify-end items-center gap-1">
        <FinalizeLotButton lot={lot} onFinalized={fetchPageData} />
        <Button variant="ghost" size="icon" asChild className="text-sky-600 hover:text-sky-700 h-7 w-7">
          <Link href={`/auctions/${lot.auctionId}/lots/${lot.publicId || lot.id}`} target="_blank" title="Ver Lote (Público)">
            <Eye className="h-3.5 w-3.5" />
          </Link>
        </Button>
        <Button variant="ghost" size="icon" asChild className="text-blue-600 hover:text-blue-700 h-7 w-7">
          <Link href={`/admin/lots/${lot.publicId || lot.id}/edit`} title="Editar Lote">
            <Edit className="h-3.5 w-3.5" />
          </Link>
        </Button>
        {auction && <DeleteLotButton lotId={lot.publicId || lot.id} lotTitle={lot.title} auctionId={auction.publicId || auctionId} onDeleteSuccess={fetchPageData} />}
      </CardFooter>
    </Card>
  );

  const renderLotGridItemForAdmin = (lot: Lot) => (
    <Card key={lot.id} className="flex flex-col shadow-sm hover:shadow-md transition-shadow">
        <CardHeader className="p-3">
            <Link href={`/admin/lots/${lot.publicId || lot.id}/edit`} className="hover:text-primary">
                <CardTitle className="text-sm font-semibold line-clamp-2 leading-tight h-8">
                    {lot.number ? `Lote ${lot.number}: ` : ''}{lot.title}
                </CardTitle>
            </Link>
            <CardDescription className="text-xs">ID: {lot.publicId || lot.id}</CardDescription>
            {lot.type && (
             <CardDescription className="text-xs mt-0.5">
               {lot.type}
               {lot.subcategoryName && ` / ${lot.subcategoryName}`}
             </CardDescription>
           )}
        </CardHeader>
        <CardContent className="p-3 flex-grow space-y-1 text-xs">
            <Badge variant="outline" className={`border-current`}>
                {getAuctionStatusText(lot.status)}
            </Badge>
            <p className="font-medium">R$ {lot.price.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
            <p className="text-muted-foreground flex items-center gap-1"><Gavel className="h-3 w-3"/> {lot.bidsCount || 0} lances</p>
            <p className="text-muted-foreground">
              Fim: {lot.endDate ? format(new Date(lot.endDate as string), 'dd/MM HH:mm', { locale: ptBR }) : 'N/A'}
            </p>
        </CardContent>
      <CardFooter className="p-2 border-t flex justify-end items-center gap-1">
        <FinalizeLotButton lot={lot} onFinalized={fetchPageData} />
        <Button variant="ghost" size="icon" asChild className="text-sky-600 hover:text-sky-700 h-7 w-7">
          <Link href={`/auctions/${lot.auctionId}/lots/${lot.publicId || lot.id}`} target="_blank" title="Ver Lote (Público)">
            <Eye className="h-3.5 w-3.5" />
          </Link>
        </Button>
        <Button variant="ghost" size="icon" asChild className="text-blue-600 hover:text-blue-700 h-7 w-7">
          <Link href={`/admin/lots/${lot.publicId || lot.id}/edit`} title="Editar Lote">
            <Edit className="h-3.5 w-3.5" />
          </Link>
        </Button>
        {auction && <DeleteLotButton lotId={lot.publicId || lot.id} lotTitle={lot.title} auctionId={auction.publicId || auctionId} onDeleteSuccess={fetchPageData} />}
      </CardFooter>
    </Card>
  );

  if (isLoading || !auction) {
    return <div className="flex justify-center items-center min-h-screen"><Loader2 className="h-12 w-12 animate-spin text-primary" /></div>;
  }

  return (
    <div className="space-y-8">
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 items-start">
        <div className="lg:col-span-2">
          <AuctionForm
            initialData={auction}
            categories={categories}
            auctioneers={auctioneers}
            sellers={sellers}
            onSubmitAction={handleUpdateAuction}
            formTitle="Editar Detalhes do Leilão"
            formDescription="Modifique as informações principais, datas e configurações do leilão."
            submitButtonText="Salvar Alterações do Leilão"
          />
        </div>
        <div className="lg:col-span-1 space-y-6 sticky top-24">
            <AuctionInfoDisplay auction={auction} />
            <AuctionActionsDisplay auction={auction} userProfile={userProfileWithPermissions}/>
        </div>
      </div>

      <Separator className="my-8"/>

      <Card className="shadow-lg">
        <CardHeader className="flex flex-row items-center justify-between">
          <div>
            <CardTitle>Lotes do Leilão</CardTitle>
            <CardDescription>Lista de lotes associados a este leilão ({lotsInAuction.length} no total).</CardDescription>
          </div>
          <Button asChild>
            <Link href={`/admin/lots/new?auctionId=${auction.id}`}>
              <PlusCircle className="mr-2 h-4 w-4" /> Adicionar Lote
            </Link>
          </Button>
        </CardHeader>
        <CardContent>
          <SearchResultsFrame
            items={paginatedLots}
            totalItemsCount={lotsInAuction.length}
            renderGridItem={renderLotGridItemForAdmin}
            renderListItem={renderLotListItemForAdmin}
            sortOptions={lotSortOptions}
            initialSortBy={lotSortBy}
            onSortChange={handleLotSortChange}
            platformSettings={platformSettings}
            isLoading={isLoading}
            searchTypeLabel="lotes"
            currentPage={lotCurrentPage}
            itemsPerPage={lotItemsPerPage}
            onPageChange={handleLotPageChange}
            onItemsPerPageChange={handleLotItemsPerPageChange}
          />
        </CardContent>
      </Card>
    </div>
  );
}
```
- src/app/admin/auctions/page.tsx:
```tsx
// src/app/admin/auctions/page.tsx
'use client';

import { useState, useEffect, useCallback, useMemo } from 'react';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { getAuctions, deleteAuction } from './actions';
import type { Auction, SellerProfileInfo, AuctioneerProfileInfo } from '@/types';
import { PlusCircle, Gavel } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { DataTable } from '@/components/ui/data-table';
import { createColumns } from './columns';
import { getAuctionStatusText } from '@/lib/sample-data-helpers';
import { getSellers } from '../sellers/actions';
import { getAuctioneers } from '../auctioneers/actions';

export default function AdminAuctionsPage() {
  const [auctions, setAuctions] = useState<Auction[]>([]);
  const [allSellers, setAllSellers] = useState<SellerProfileInfo[]>([]);
  const [allAuctioneers, setAllAuctioneers] = useState<AuctioneerProfileInfo[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const { toast } = useToast();
  const [refetchTrigger, setRefetchTrigger] = useState(0);

  useEffect(() => {
    let isCancelled = false;
    
    const fetchAuctions = async () => {
      setIsLoading(true);
      setError(null);
      try {
        const [fetchedAuctions, fetchedSellers, fetchedAuctioneers] = await Promise.all([
            getAuctions(),
            getSellers(),
            getAuctioneers()
        ]);
        if (!isCancelled) {
          setAuctions(fetchedAuctions);
          setAllSellers(fetchedSellers);
          setAllAuctioneers(fetchedAuctioneers);
        }
      } catch (e) {
        const errorMessage = e instanceof Error ? e.message : "Falha ao buscar dados.";
        console.error("Error fetching auctions data:", e);
        if (!isCancelled) {
          setError(errorMessage);
          toast({ title: "Erro", description: errorMessage, variant: "destructive" });
        }
      } finally {
        if (!isCancelled) {
          setIsLoading(false);
        }
      }
    };
    
    fetchAuctions();

    return () => {
      isCancelled = true;
    };
  }, [toast, refetchTrigger]);

  const handleDelete = useCallback(
    async (id: string) => {
      const result = await deleteAuction(id);
      if (result.success) {
        toast({ title: "Sucesso!", description: result.message });
        setRefetchTrigger(c => c + 1);
      } else {
        toast({ title: 'Erro ao Excluir', description: result.message, variant: 'destructive' });
      }
    },
    [toast]
  );
  
  const columns = useMemo(() => createColumns({ handleDelete }), [handleDelete]);

  const statusOptions = useMemo(() => 
    [...new Set(auctions.map(a => a.status))]
      .map(status => ({ value: status, label: getAuctionStatusText(status) })),
  [auctions]);

  const sellerOptions = useMemo(() => 
    allSellers.map(s => ({ value: s.name, label: s.name })),
  [allSellers]);
  
  const auctioneerOptions = useMemo(() => 
    allAuctioneers.map(a => ({ value: a.name, label: a.name })),
  [allAuctioneers]);

  const facetedFilterColumns = useMemo(() => [
    { id: 'status', title: 'Status', options: statusOptions },
    { id: 'seller', title: 'Comitente', options: sellerOptions },
    { id: 'auctioneer', title: 'Leiloeiro', options: auctioneerOptions }
  ], [statusOptions, sellerOptions, auctioneerOptions]);

  return (
    <div className="space-y-6">
      <Card className="shadow-lg">
        <CardHeader className="flex flex-row items-center justify-between">
          <div>
            <CardTitle className="text-2xl font-bold font-headline flex items-center">
              <Gavel className="h-6 w-6 mr-2 text-primary" />
              Gerenciar Leilões
            </CardTitle>
            <CardDescription>
              Adicione, edite ou remova leilões da plataforma.
            </CardDescription>
          </div>
          <Button asChild>
            <Link href="/admin/auctions/new">
              <PlusCircle className="mr-2 h-4 w-4" /> Novo Leilão
            </Link>
          </Button>
        </CardHeader>
        <CardContent>
          <DataTable
            columns={columns}
            data={auctions}
            isLoading={isLoading}
            error={error}
            searchColumnId="title"
            searchPlaceholder="Buscar por título..."
            facetedFilterColumns={facetedFilterColumns}
          />
        </CardContent>
      </Card>
    </div>
  );
}
```