// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// ENUM DEFINITIONS
// =================================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
  RASCUNHO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

// =================================================================
// MODELS
// =================================================================

model User {
  id                   String                 @id @default(uuid())
  email                String                 @unique
  password             String?
  fullName             String?
  roleId               String?
  habilitationStatus   UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType          AccountType            @default(PHYSICAL)
  avatarUrl            String?
  dataAiHint           String?
  badges               Json?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  cpf                  String?
  cellPhone            String?
  homePhone            String?
  dateOfBirth          DateTime?
  razaoSocial          String?
  cnpj                 String?
  inscricaoEstadual    String?
  website              String?
  responsibleName      String?
  responsibleCpf       String?
  zipCode              String?
  street               String?
  number               String?
  complement           String?
  neighborhood         String?
  city                 String?
  state                String?
  optInMarketing       Boolean?               @default(false)
  rgNumber             String?
  rgIssuer             String?
  rgIssueDate          DateTime?
  rgState              String?
  gender               String?
  profession           String?
  nationality          String?
  maritalStatus        String?
  propertyRegime       String?
  spouseName           String?
  spouseCpf            String?

  roles                UsersOnRoles[]
  sellerProfile        Seller?                @relation("UserToSeller")
  auctioneerProfile    Auctioneer?            @relation("UserToAuctioneer")
  documents            UserDocument[]
  bids                 Bid[]
  userWins             UserWin[]
  maxBids              UserLotMaxBid[]
  uploadedMedia        MediaItem[]            @relation("UploadedBy")
  answeredQuestions    LotQuestion[]          @relation("AnsweredByUser")
  notifications        Notification[]
  habilitations        AuctionHabilitation[]

  @@index([email])
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

model Role {
  id               String         @id @default(uuid())
  name             String
  nameNormalized   String         @unique
  description      String?
  permissions      Json?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  users            UsersOnRoles[]

  @@index([nameNormalized])
}

model State {
  id        String   @id @default(uuid())
  name      String
  uf        String   @unique
  slug      String?  @unique
  cityCount Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cities    City[]
  courts    Court[]
  districts JudicialDistrict[]
  lots      Lot[]
  auctions  Auction[]
}

model City {
  id        String   @id @default(uuid())
  name      String
  slug      String?
  stateId   String
  state     State    @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateUf   String?
  ibgeCode  String?  @unique
  lotCount  Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lots      Lot[]
  auctions  Auction[]

  @@index([stateId])
}

model LotCategory {
  id                    String            @id @default(uuid())
  name                  String
  slug                  String            @unique
  description           String?           @db.Text
  hasSubcategories      Boolean           @default(false)
  itemCount             Int?              @default(0)
  iconName              String?
  logoUrl               String?
  logoMediaId           String?
  dataAiHintIcon        String?
  coverImageUrl         String?
  coverImageMediaId     String?
  dataAiHintCover       String?
  megaMenuImageUrl      String?
  megaMenuImageMediaId  String?
  dataAiHintMegaMenu    String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  subcategories         Subcategory[]
  lots                  Lot[]
  bens                  Bem[]
  auctions              Auction[]
  directSaleOffers      DirectSaleOffer[]
}

model Subcategory {
  id               String      @id @default(uuid())
  name             String
  slug             String
  parentCategoryId String
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  description      String?     @db.Text
  displayOrder     Int         @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  lots             Lot[]
  bens             Bem[]

  @@unique([slug, parentCategoryId])
  @@index([parentCategoryId])
}

model Court {
  id                String             @id @default(uuid())
  name              String
  slug              String?            @unique
  stateId           String?
  state             State?             @relation(fields: [stateId], references: [id])
  stateUf           String?
  website           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  districts         JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]

  @@index([stateId])
}

model JudicialDistrict {
  id                String             @id @default(uuid())
  name              String
  slug              String?            @unique
  courtId           String?
  court             Court?             @relation(fields: [courtId], references: [id])
  stateId           String?
  state             State?             @relation(fields: [stateId], references: [id])
  zipCode           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  branches          JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]

  @@index([courtId])
  @@index([stateId])
}

model JudicialBranch {
  id                String             @id @default(uuid())
  name              String
  slug              String?            @unique
  districtId        String?
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  sellers           Seller[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]

  @@index([districtId])
}

model JudicialProcess {
  id              String            @id @default(uuid())
  publicId        String?           @unique
  processNumber   String
  isElectronic    Boolean           @default(true)
  courtId         String?
  court           Court?            @relation(fields: [courtId], references: [id])
  districtId      String?
  district        JudicialDistrict? @relation(fields: [districtId], references: [id])
  branchId        String?
  branch          JudicialBranch?   @relation(fields: [branchId], references: [id])
  seller          Seller?           @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId        String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  parties         JudicialParty[]
  bens            Bem[]
  auctions        Auction[]

  @@index([sellerId])
  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
}

model JudicialParty {
  id             String          @id @default(uuid())
  processId      String
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  name           String
  documentNumber String?
  partyType      String

  @@index([processId])
}

model AuctionHabilitation {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  auction    Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId  String
  approvedAt DateTime @default(now())

  @@id([userId, auctionId])
  @@index([userId])
  @@index([auctionId])
}

model LotBens {
  lot    Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId  String
  bem    Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId  String

  @@id([lotId, bemId])
  @@index([lotId])
  @@index([bemId])
}

model Seller {
  id                String              @id @default(uuid())
  publicId          String?             @unique
  slug              String?             @unique
  name              String              @unique
  contactName       String?
  email             String?
  phone             String?
  address           String?
  city              String?
  state             String?
  zipCode           String?
  website           String?
  logoUrl           String?
  logoMediaId       String?
  dataAiHintLogo    String?
  description       String?             @db.Text
  isJudicial        Boolean             @default(false)
  userId            String?             @unique
  user              User?               @relation("UserToSeller", fields: [userId], references: [id], onDelete: SetNull)
  judicialBranchId  String?             @unique
  judicialBranch    JudicialBranch?     @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  lots              Lot[]
  bens              Bem[]
  auctions          Auction[]
  judicialProcesses JudicialProcess[]
  directSaleOffers  DirectSaleOffer[]
}

model Auctioneer {
  id                   String    @id @default(uuid())
  publicId             String?   @unique
  slug                 String?   @unique
  name                 String
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?   @db.Text
  userId               String?   @unique
  user                 User?     @relation("UserToAuctioneer", fields: [userId], references: [id], onDelete: SetNull)
  auctions             Auction[]
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model Auction {
  id                           String                 @id @default(uuid())
  publicId                     String?                @unique
  slug                         String?                @unique
  title                        String
  description                  String?                @db.Text
  status                       AuctionStatus          @default(RASCUNHO)
  auctionDate                  DateTime
  endDate                      DateTime?
  visits                       Int                    @default(0)
  initialOffer                 Decimal?
  isFavorite                   Boolean                @default(false)
  dataAiHint                   String?
  // Settings
  auctionType                  AuctionType?
  auctionMethod                AuctionMethod?
  participation                AuctionParticipation?
  // Location
  address                      String?
  city                         City?                  @relation(fields: [cityId], references: [id])
  cityId                       String?
  state                        State?                 @relation(fields: [stateId], references: [id])
  stateId                      String?
  zipCode                      String?
  onlineUrl                    String?
  // Relations
  auctioneer                   Auctioneer?            @relation(fields: [auctioneerId], references: [id])
  auctioneerId                 String?
  seller                       Seller?                @relation(fields: [sellerId], references: [id])
  sellerId                     String?
  category                     LotCategory?           @relation(fields: [categoryId], references: [id])
  categoryId                   String?
  court                        Court?                 @relation(fields: [courtId], references: [id])
  courtId                      String?
  district                     JudicialDistrict?      @relation(fields: [districtId], references: [id])
  districtId                   String?
  branch                       JudicialBranch?        @relation(fields: [branchId], references: [id])
  branchId                     String?
  judicialProcess              JudicialProcess?       @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId            String?
  // URLs and Media
  imageUrl                     String?
  imageMediaId                 String?
  documentsUrl                 String?
  evaluationReportUrl          String?
  auctionCertificateUrl        String?
  // Advanced Settings
  sellingBranch                String?
  automaticBiddingEnabled      Boolean                @default(false)
  allowInstallmentBids         Boolean                @default(true)
  silentBiddingEnabled         Boolean                @default(false)
  allowMultipleBidsPerUser     Boolean                @default(true)
  softCloseEnabled             Boolean                @default(false)
  softCloseMinutes             Int                    @default(2)
  isFeaturedOnMarketplace      Boolean                @default(false)
  marketplaceAnnouncementTitle String?
  additionalTriggers           Json?
  // Timestamps
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  // Related Models
  lots                         Lot[]
  auctionStages                AuctionStage[]
  bids                         Bid[]
  habilitations                AuctionHabilitation[]

  @@index([auctioneerId])
  @@index([sellerId])
  @@index([categoryId])
  @@index([status])
  @@index([cityId])
  @@index([stateId])
  @@index([judicialProcessId])
  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
}

model AuctionStage {
  id           String    @id @default(uuid())
  auctionId    String
  auction      Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  name         String
  startDate    DateTime
  endDate      DateTime
  initialPrice Decimal?
  statusText   String?

  @@index([auctionId])
}

model LotAuctionStageDetails {
  lotId              String
  lot                Lot              @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionStageId     String
  auctionStage       AuctionStage     @relation(fields: [auctionStageId], references: [id], onDelete: Cascade)
  initialBid         Decimal
  bidIncrement       Decimal?
  evaluationValue    Decimal?         @comment("Valor de avaliação específico para esta praça")
  reservePrice       Decimal?
  debtAmount         Decimal?
  itbiValue          Decimal?

  @@id([lotId, auctionStageId])
  @@index([lotId])
  @@index([auctionStageId])
}

model Lot {
  id                         String    @id @default(uuid())
  publicId                   String?   @unique
  auctionId                  String
  slug                       String?
  number                     String?
  title                      String
  description                String?   @db.Text
  price                      Decimal   @default(0.00)
  status                     LotStatus @default(EM_BREVE)
  bidsCount                  Int       @default(0)
  views                      Int       @default(0)
  isFeatured                 Boolean   @default(false)
  isExclusive                Boolean   @default(false)
  additionalTriggers         Json?
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  inheritedMediaFromBemId    String?
  type                       String?
  condition                  String?
  dataAiHint                 String?
  winningBidTermUrl          String?
  allowInstallmentBids       Boolean   @default(false)
  // Location
  cityName                   String?
  stateUf                    String?
  latitude                   Decimal?  @db.Decimal(10, 8)
  longitude                  Decimal?  @db.Decimal(11, 8)
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?
  // Relations
  auction                    Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                   LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId                 String?
  subcategory                Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId              String?
  seller                     Seller?   @relation(fields: [sellerId], references: [id])
  sellerId                   String?
  auctioneer                 Auctioneer? @relation(fields: [auctioneerId], references: [id])
  auctioneerId               String?
  city                       City?     @relation(fields: [cityId], references: [id])
  cityId                     String?
  state                      State?    @relation(fields: [stateId], references: [id])
  stateId                    String?
  winner                     User?     @relation("wonLots", fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId                   String?
  // Timestamps
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
  // Related Models
  bids                       Bid[]
  userWins                   UserWin[]
  maxBids                    UserLotMaxBid[]
  bens                       LotBens[]
  questions                  LotQuestion[]
  reviews                    Review[]
  stageDetails               LotAuctionStageDetails[]

  @@index([auctionId])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([sellerId])
  @@index([cityId])
  @@index([stateId])
  @@index([winnerId])
  @@index([status])
}

model Bem {
  id                   String    @id @default(uuid())
  publicId             String?   @unique
  title                String
  description          String?   @db.Text
  status               String    @default("DISPONIVEL")
  evaluationValue      Decimal?
  imageUrl             String?
  imageMediaId         String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  dataAiHint           String?
  locationCity         String?
  locationState        String?
  address              String?
  latitude             Decimal?  @db.Decimal(10, 8)
  longitude            Decimal?  @db.Decimal(11, 8)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  categoryId           String?
  category             LotCategory? @relation(fields: [categoryId], references: [id])
  subcategoryId        String?
  subcategory          Subcategory? @relation(fields: [subcategoryId], references: [id])
  judicialProcessId    String?
  judicialProcess      JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  sellerId             String?
  seller               Seller?   @relation(fields: [sellerId], references: [id])
  lots                 LotBens[]

  @@index([categoryId])
  @@index([subcategoryId])
  @@index([judicialProcessId])
  @@index([sellerId])
}

model DirectSaleOffer {
  id                   String    @id @default(uuid())
  publicId             String?   @unique
  title                String
  description          String?   @db.Text
  offerType            String?
  price                Decimal?
  minimumOfferPrice    Decimal?
  status               String    @default("ACTIVE")
  category             LotCategory @relation(fields: [categoryId], references: [id])
  categoryId           String
  sellerId             String?
  seller               Seller?   @relation(fields: [sellerId], references: [id])
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int       @default(0)
  expiresAt            DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@index([categoryId])
  @@index([sellerId])
}

model LotQuestion {
  id                        String    @id @default(uuid())
  lot                       Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId                     String
  auctionId                 String
  user                      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                    String
  userDisplayName           String
  questionText              String    @db.Text
  isPublic                  Boolean   @default(true)
  answerText                String?   @db.Text
  answeredByUserId          String?
  answeredByUser            User?     @relation("AnsweredByUser", fields: [answeredByUserId], references: [id], onDelete: SetNull)
  answeredByUserDisplayName String?
  answeredAt                DateTime?
  createdAt                 DateTime  @default(now())

  @@index([lotId])
  @@index([userId])
  @@index([answeredByUserId])
}

model Review {
  id              String   @id @default(uuid())
  lotId           String
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String   @db.Text
  createdAt       DateTime @default(now())

  @@index([lotId])
  @@index([userId])
}
// Outros modelos continuam aqui...

model MediaItem {
  id                String    @id @default(uuid())
  fileName          String    @unique
  storagePath       String
  title             String?
  altText           String?
  caption           String?
  description       String?   @db.Text
  mimeType          String
  sizeBytes         Int?
  urlOriginal       String
  urlThumbnail      String?
  urlMedium         String?
  urlLarge          String?
  linkedLotIds      Json?
  dataAiHint        String?
  uploadedByUserId  String?
  uploadedBy        User?     @relation("UploadedBy", fields: [uploadedByUserId], references: [id], onDelete: SetNull)
  judicialProcessId String?
  uploadedAt        DateTime  @default(now())

  @@index([uploadedByUserId])
}

model PlatformSettings {
  id                           String    @id @default("global")
  siteTitle                    String?
  siteTagline                  String?
  logoUrl                      String?
  faviconUrl                   String?
  galleryImageBasePath         String?
  storageProvider              String?
  firebaseStorageBucket        String?
  activeThemeName              String?
  themes                       Json?
  platformPublicIdMasks        Json?
  homepageSections             Json?
  mentalTriggerSettings        Json?
  sectionBadgeVisibility       Json?
  mapSettings                  Json?
  searchPaginationType         String?
  searchItemsPerPage           Int?
  searchLoadMoreCount          Int?
  showCountdownOnLotDetail     Boolean?
  showCountdownOnCards         Boolean?
  showRelatedLotsOnLotDetail   Boolean?
  relatedLotsCount             Int?
  defaultUrgencyTimerHours     Int?
  variableIncrementTable       Json?
  biddingSettings              Json?
  paymentGatewaySettings       Json?
  defaultListItemsPerPage      Int?
  updatedAt                    DateTime? @updatedAt
}

model DocumentTemplate {
  id      String   @id @default(uuid())
  name    String
  type    String
  content String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserDocument {
  id               String           @id @default(uuid())
  userId           String
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentTypeId   String
  documentType     DocumentType     @relation(fields: [documentTypeId], references: [id])
  status           UserDocumentStatus @default(SUBMITTED)
  fileUrl          String
  fileName         String?
  rejectionReason  String?          @db.Text
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@unique([userId, documentTypeId])
  @@index([userId])
  @@index([documentTypeId])
}

model DocumentType {
  id           String         @id @default(uuid())
  name         String
  description  String?
  isRequired   Boolean        @default(true)
  appliesTo    String?        @comment("Comma-separated: PHYSICAL,LEGAL,ALL,PROCESS")
  userDocs     UserDocument[]
}

model Bid {
  id            String   @id @default(uuid())
  lotId         String
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId     String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidderId      String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())

  @@index([lotId])
  @@index([auctionId])
  @@index([bidderId])
}

model UserWin {
  id               String        @id @default(uuid())
  lotId            String        @unique
  lot              Lot           @relation(fields: [lotId], references: [id])
  userId           String
  user             User          @relation(fields: [userId], references: [id])
  winningBidAmount Decimal       @db.Decimal(15, 2)
  winDate          DateTime      @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?

  @@index([userId])
}

model ContactMessage {
  id      String   @id @default(uuid())
  name    String
  email   String
  subject String
  message String   @db.Text
  isRead  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lotId     String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
  @@index([userId])
  @@index([lotId])
}

model VehicleMake {
  id      String         @id @default(uuid())
  name    String         @unique
  slug    String         @unique
  models  VehicleModel[]
}

model VehicleModel {
  id      String      @id @default(uuid())
  name    String
  slug    String
  makeId  String
  make    VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)

  @@unique([makeId, name]) // A model name should be unique within a make
  @@index([makeId])
}

