// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ==============================================================================
// ENUMS
// ==============================================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum UserBidStatus {
  GANHANDO
  PERDENDO
  SUPERADO_POR_OUTRO
  SUPERADO_PELO_PROPRIO_MAXIMO
  ARREMATADO
  NAO_ARREMATADO
  ENCERRADO
  CANCELADO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ACTIVE
  SOLD
  EXPIRED
  PENDING_APPROVAL
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

// ==============================================================================
// MODELS
// ==============================================================================

model User {
  id                  String                   @id @default(uuid())
  email               String                   @unique
  password            String
  fullName            String
  accountType         AccountType?
  cpf                 String?
  razaoSocial         String?
  cnpj                String?
  inscricaoEstadual   String?
  website             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  habilitationStatus  UserHabilitationStatus?
  optInMarketing      Boolean?                 @default(false)
  badges              String?
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  roleId              String?
  sellerId            String?                  @unique
  auctioneerId        String?                  @unique
  
  // Relationships
  role                Role?                    @relation(fields: [roleId], references: [id], onDelete: SetNull, map: "User_roleId_fkey")
  sellerProfile       Seller?                  @relation("UserToSeller")
  auctioneerProfile   Auctioneer?              @relation("UserToAuctioneer")
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  reviews             Review[]
  questions           LotQuestion[]            @relation("AskedBy")
  answeredQuestions   LotQuestion[]            @relation("AnsweredBy")
  maxBids             UserLotMaxBid[]
  notifications       Notification[]
  uploads             MediaItem[]              @relation("UserUploads")
  blogPosts           BlogPost[]
}


model DocumentType {
  id             String         @id @default(uuid())
  name           String         @unique
  description    String?        @db.Text
  isRequired     Boolean        @default(true)
  appliesTo      String?         // Comma-separated AccountType values
  allowedFormats String?         // Comma-separated file extensions
  displayOrder   Int            @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  userDocuments  UserDocument[]
}

model UserDocument {
  id              String             @id @default(uuid())
  userId          String
  documentTypeId  String
  fileUrl         String?
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  rejectionReason String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  // Relationships
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType DocumentType @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)

  @@unique([userId, documentTypeId])
}

model Role {
  id              String       @id @default(uuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  // Relationships
  permissions     Permission[] @relation("RoleToPermission")
  users           User[]
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  roles       Role[]   @relation("RoleToPermission")
}

model MediaItem {
  id                     String    @id @default(uuid())
  fileName               String
  storagePath            String?
  title                  String?
  altText                String?
  caption                String?
  description            String?
  mimeType               String
  sizeBytes              Int
  dimensions             Json?
  urlOriginal            String    @db.Text
  urlThumbnail           String?   @db.Text
  urlMedium              String?   @db.Text
  urlLarge               String?   @db.Text
  dataAiHint             String?
  uploadedAt             DateTime  @default(now())
  uploadedBy             String?
  
  // Relationships
  userUploader           User?            @relation("UserUploads", fields: [uploadedBy], references: [id], onDelete: SetNull)
  auctionAsImage         Auction?         @relation("AuctionImage")
  bemAsImage             Bem?             @relation("BemImage")
  lotAsImage             Lot?             @relation("LotImage")
  sellerAsLogo           Seller?          @relation("SellerLogo")
  auctioneerAsLogo       Auctioneer?      @relation("AuctioneerLogo")
  blogPostAsImage        BlogPost?        @relation("BlogPostImage")
  directSaleOfferAsImage DirectSaleOffer?   @relation("DirectSaleOfferImage")
  subcategoryAsIcon      Subcategory?     @relation("SubcategoryIcon")
  galleryForLot          Lot[]            @relation("LotGallery")
}


// --- AUCTION CORE ---
model Auction {
  id                           String       @id @default(uuid())
  publicId                     String       @unique
  title                        String
  fullTitle                    String?      @db.Text
  description                  String?      @db.Text
  status                       AuctionStatus @default(RASCUNHO)
  auctionType                  AuctionType?
  auctionDate                  DateTime
  endDate                      DateTime?
  auctionStages                Json         // Array of AuctionStage
  city                         String?
  state                        String?
  imageUrl                     String?      @db.Text
  dataAiHint                   String?
  documentsUrl                 String?      @db.Text
  totalLots                    Int?         @default(0)
  visits                       Int?         @default(0)
  initialOffer                 Float?
  isFavorite                   Boolean?
  currentBid                   Float?
  bidsCount                    Int?         @default(0)
  sellingBranch                String?
  vehicleLocation              String?
  automaticBiddingEnabled      Boolean?     @default(false)
  allowInstallmentBids         Boolean?     @default(false)
  softCloseEnabled             Boolean?     @default(false)
  softCloseMinutes             Int?
  estimatedRevenue             Float?
  achievedRevenue              Float?
  totalHabilitatedUsers        Int?
  isFeaturedOnMarketplace      Boolean?     @default(false)
  marketplaceAnnouncementTitle String?
  evaluationReportUrl          String?      @db.Text
  auctionCertificateUrl        String?      @db.Text
  silentBiddingEnabled         Boolean?     @default(false)
  allowMultipleBidsPerUser     Boolean?     @default(true)
  decrementAmount              Float?       // For Dutch auctions
  decrementIntervalSeconds     Int?
  floorPrice                   Float?
  autoRelistSettings           Json?
  createdAt                    DateTime     @default(now())
  updatedAt                    DateTime     @updatedAt
  
  // Foreign Keys
  categoryId                   String
  auctioneerId                 String
  sellerId                     String?
  judicialProcessId            String?
  imageMediaId                 String?      @unique

  // Relationships
  category      LotCategory       @relation(fields: [categoryId], references: [id])
  auctioneer    Auctioneer        @relation(fields: [auctioneerId], references: [id])
  seller        Seller?           @relation(fields: [sellerId], references: [id])
  judicialProcess JudicialProcess?  @relation(fields: [judicialProcessId], references: [id])
  image         MediaItem?        @relation("AuctionImage", fields: [imageMediaId], references: [id])
  lots          Lot[]
  bids          Bid[]
  reviews       Review[]
  questions     LotQuestion[]
}


model Lot {
  id                         String    @id @default(uuid())
  publicId                   String    @unique
  title                      String
  description                String?   @db.Text
  number                     String?
  price                      Float     @default(0)
  initialPrice               Float?
  secondInitialPrice         Float?
  discountPercentage         Float?
  status                     LotStatus @default(EM_BREVE)
  endDate                    DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  views                      Int?      @default(0)
  bidsCount                  Int?      @default(0)
  isFeatured                 Boolean?  @default(false)
  isExclusive                Boolean?  @default(false)
  additionalTriggers         String?
  imageUrl                   String?   @db.Text
  galleryImageUrls           String?
  dataAiHint                 String?
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?   @db.Text
  mapStaticImageUrl          String?   @db.Text
  condition                  String?
  judicialProcessNumber      String?
  courtName                  String?
  courtDistrict              String?
  publicProcessUrl           String?
  propertyRegistrationNumber String?
  propertyLiens              String?   @db.Text
  knownDebts                 String?   @db.Text
  additionalDocumentsInfo    String?   @db.Text
  winningBidTermUrl          String?
  reservePrice               Float?
  evaluationValue            Float?
  debtAmount                 Float?
  itbiValue                  Float?
  bidIncrementStep           Float?
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt

  // Foreign Keys
  auctionId                  String
  categoryId                 String
  subcategoryId              String?
  stateId                    String?
  cityId                     String?
  imageMediaId               String?   @unique
  
  // Relationships
  auction       Auction          @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category      LotCategory      @relation(fields: [categoryId], references: [id])
  subcategory   Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  state         StateInfo?       @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city          CityInfo?        @relation(fields: [cityId], references: [id], onDelete: SetNull)
  image         MediaItem?       @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  mediaItems    MediaItem[]      @relation("LotGallery")
  bids          Bid[]
  reviews       Review[]
  questions     LotQuestion[]
  wins          UserWin[]
  maxBids       UserLotMaxBid[]
  bensOnLot     LotOnBem[]
}


model Seller {
  id                         String    @id @default(uuid())
  publicId                   String    @unique
  name                       String
  slug                       String    @unique
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  dataAiHintLogo             String?
  description                String?
  isJudicial                 Boolean   @default(false)
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt

  // Foreign Keys
  userId                     String?   @unique
  logoMediaId                String?   @unique
  judicialBranchId           String?   @unique

  // Relationships
  user                 User?            @relation("UserToSeller", fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  logo                 MediaItem?       @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  judicialBranch       JudicialBranch?  @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  auctions             Auction[]
  directSaleOffers     DirectSaleOffer[]
  judicialProcesses    JudicialProcess[]
  bens                 Bem[]
}

model Auctioneer {
  id                     String    @id @default(uuid())
  publicId                 String    @unique
  name                     String
  slug                     String    @unique
  registrationNumber     String?
  contactName              String?
  email                    String?
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  dataAiHintLogo           String?
  description              String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  
  // Foreign Keys
  userId                   String?    @unique
  logoMediaId              String?    @unique

  // Relationships
  user                 User?      @relation("UserToAuctioneer", fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  logo                 MediaItem? @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  auctions             Auction[]
}


model LotCategory {
  id                   String    @id @default(uuid())
  name                 String    @unique
  slug                 String    @unique
  description          String?
  hasSubcategories     Boolean?  @default(false)
  itemCount            Int?      @default(0)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  
  // Foreign Keys for images
  logoMediaId          String?   @unique
  coverImageMediaId    String?   @unique
  megaMenuImageMediaId String?   @unique
  
  // Relationships
  logo                 MediaItem?        @relation("CategoryLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  coverImage           MediaItem?        @relation("CategoryCoverImage", fields: [coverImageMediaId], references: [id], onDelete: SetNull)
  megaMenuImage        MediaItem?        @relation("CategoryMegaMenuImage", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull)
  lots                 Lot[]
  subcategories        Subcategory[]
  bens                 Bem[]
  auctions             Auction[]
  directSaleOffers     DirectSaleOffer[]
}

model Subcategory {
  id            String      @id @default(uuid())
  name          String
  slug          String
  description   String?
  displayOrder  Int         @default(0)
  itemCount     Int?        @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Foreign Keys
  parentCategoryId String
  iconMediaId      String?     @unique

  // Relationships
  parentCategory LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  icon           MediaItem?  @relation("SubcategoryIcon", fields: [iconMediaId], references: [id], onDelete: SetNull)
  lots           Lot[]
  bens           Bem[]
  
  @@unique([parentCategoryId, slug])
}


model Bem {
  id                         String    @id @default(uuid())
  publicId                   String    @unique
  title                      String
  description                String?   @db.Text
  status                     BemStatus
  evaluationValue            Float?
  imageUrl                   String?
  galleryImageUrls           String?
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt

  // Vehicle-specific fields
  plate                String?
  make                 String?
  model                String?
  version              String?
  year                 Int?
  modelYear            Int?
  mileage              Int?
  color                String?
  fuelType             String?
  transmissionType     String?
  bodyType             String?
  vin                  String?
  renavam              String?
  enginePower          String?
  numberOfDoors        Int?
  vehicleOptions       String?
  detranStatus         String?
  debts                String?
  runningCondition     String?
  bodyCondition        String?
  tiresCondition       String?
  hasKey               Boolean?
  
  // Real Estate-specific fields
  propertyType               String?
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  area                       Float?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?   @db.Text
  infrastructure             String?   @db.Text
  condoDetails               String?   @db.Text
  improvements               String?   @db.Text
  topography                 String?
  liensAndEncumbrances       String?   @db.Text
  propertyDebts              String?   @db.Text
  unregisteredRecords        String?   @db.Text
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  amenities                  String? // Comma-separated list

  // Other types
  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String?   @db.Text
  includedAccessories        String?
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String?
  applianceCapacity          String?
  voltage                    String?
  applianceType              String?
  additionalFunctions        String?
  hoursUsed                  Int?
  engineType                 String?
  capacityOrPower            String?
  maintenanceHistory         String?   @db.Text
  installationLocation       String?
  compliesWithNR             String?
  operatingLicenses          String?
  breed                      String?
  age                        String?
  sex                        String?
  weight                     String?
  individualId               String?
  purpose                    String?
  sanitaryCondition          String?
  lineage                    String?
  isPregnant                 Boolean?
  specialSkills              String?
  gtaDocument                String?
  breedRegistryDocument      String?
  furnitureType              String?
  material                   String?
  style                      String?
  dimensions                 String?
  pieceCount                 Int?
  jewelryType                String?
  metal                      String?
  gemstones                  String?
  totalWeight                String?
  jewelrySize                String?
  authenticityCertificate    String?
  workType                   String?
  artist                     String?
  period                     String?
  technique                  String?
  provenance                 String?
  boatType                   String?
  boatLength                 String?
  hullMaterial               String?
  onboardEquipment           String?
  productName                String?
  quantity                   String?
  packagingType              String?
  expirationDate             DateTime?
  storageConditions          String?
  preciousMetalType          String?
  purity                     String?
  forestGoodsType            String?
  volumeOrQuantity           String?
  species                    String?
  dofNumber                  String?

  // Foreign Keys
  categoryId                 String
  subcategoryId              String?
  judicialProcessId          String?
  sellerId                   String?
  imageMediaId               String?   @unique

  // Relationships
  category        LotCategory      @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller          Seller?         @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  image           MediaItem?      @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  lotsOnBem       LotOnBem[]
}

model LotOnBem {
    lot      Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
    lotId    String
    bem      Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
    bemId    String
    assignedAt DateTime @default(now())

    @@id([lotId, bemId])
}


model Bid {
  id            String   @id @default(uuid())
  amount        Float
  timestamp     DateTime @default(now())
  
  // Foreign Keys
  lotId         String
  auctionId     String
  bidderId      String

  // Relationships
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderDisplay String
}

model UserWin {
    id                 String   @id @default(uuid())
    winningBidAmount   Float
    winDate            DateTime @default(now())
    paymentStatus      PaymentStatus @default(PENDENTE)
    invoiceUrl         String?

    // Foreign Keys
    userId             String
    lotId              String @unique

    // Relationships
    user               User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    lot                Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
}


model Notification {
  id        String   @id @default(uuid())
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Foreign Keys
  userId    String

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


// --- GEOGRAPHICAL & JUDICIAL ---
model StateInfo {
  id        String   @id @default(uuid())
  name      String   @unique
  uf        String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  cities    CityInfo[]
  districts JudicialDistrict[]
  lots      Lot[]
}

model CityInfo {
  id        String   @id @default(uuid())
  name      String
  slug      String
  ibgeCode  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Foreign Keys
  stateId   String

  // Relationships
  state     StateInfo @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots      Lot[]
}

model Court {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  stateUf     String
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  districts   JudicialDistrict[]
  processes   JudicialProcess[]
}

model JudicialDistrict {
  id        String   @id @default(uuid())
  name      String
  slug      String
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Foreign Keys
  courtId   String
  stateId   String

  // Relationships
  court     Court     @relation(fields: [courtId], references: [id])
  state     StateInfo @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]

  @@unique([courtId, name])
}

model JudicialBranch {
  id          String    @id @default(uuid())
  name        String
  slug        String
  contactName String?
  phone       String?
  email       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Foreign Keys
  districtId  String

  // Relationships
  district  JudicialDistrict @relation(fields: [districtId], references: [id], onDelete: Cascade)
  processes JudicialProcess[]
  seller    Seller?
  
  @@unique([districtId, name])
}


model JudicialProcess {
  id            String    @id @default(uuid())
  publicId      String    @unique
  processNumber String    @unique
  isElectronic  Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Foreign Keys
  courtId       String
  districtId    String
  branchId      String
  sellerId      String?   @unique

  // Relationships
  court     Court            @relation(fields: [courtId], references: [id])
  district  JudicialDistrict @relation(fields: [districtId], references: [id])
  branch    JudicialBranch   @relation(fields: [branchId], references: [id])
  seller    Seller?          @relation(fields: [sellerId], references: [id])
  parties   ProcessParty[]
  bens      Bem[]
  auctions  Auction[]
}


model ProcessParty {
  id             String           @id @default(uuid())
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  
  // Foreign Keys
  processId      String
  
  // Relationships
  process        JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)
  
  @@unique([processId, name, partyType])
}


// --- MISC & SETTINGS ---
model PlatformSettings {
  id                        String      @id @default("global")
  siteTitle                 String?
  siteTagline               String?
  galleryImageBasePath      String?
  storageProvider           String?
  firebaseStorageBucket     String?
  activeThemeName           String?
  themes                    Json?
  platformPublicIdMasks     Json?
  homepageSections          Json?
  mentalTriggerSettings     Json?
  sectionBadgeVisibility    Json?
  mapSettings               Json?
  biddingSettings           Json?
  searchPaginationType      String?
  searchItemsPerPage        Int?
  searchLoadMoreCount       Int?
  defaultListItemsPerPage   Int?
  showCountdownOnLotDetail  Boolean?
  showCountdownOnCards      Boolean?
  showRelatedLotsOnLotDetail Boolean?
  relatedLotsCount          Int?
  variableIncrementTable    Json?
  updatedAt                 DateTime    @updatedAt
}

model BlogPost {
  id              String    @id @default(uuid())
  title           String
  slug            String    @unique
  content         String    @db.Text
  authorId        String
  publishedAt     DateTime?
  tags            String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Foreign Keys
  featuredImageId String?   @unique

  // Relationships
  author          User       @relation(fields: [authorId], references: [id])
  image           MediaItem? @relation("BlogPostImage", fields: [featuredImageId], references: [id], onDelete: SetNull)
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id              String   @id @default(uuid())
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())

  // Foreign Keys
  userId          String
  lotId           String
  auctionId       String

  // Relationships
  user            User     @relation(fields: [userId], references: [id])
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lotId])
}

model LotQuestion {
  id                        String   @id @default(uuid())
  questionText              String   @db.Text
  answerText                String?  @db.Text
  isPublic                  Boolean  @default(false)
  createdAt                 DateTime @default(now())
  answeredAt                DateTime?

  // Foreign Keys
  userId                    String
  lotId                     String
  auctionId                 String
  answeredByUserId          String?

  // Relationships
  user                      User     @relation("AskedBy", fields: [userId], references: [id])
  answeredByUser            User?    @relation("AnsweredBy", fields: [answeredByUserId], references: [id])
  lot                       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction                   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign Keys
  userId    String
  lotId     String

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lotId])
}

model DirectSaleOffer {
  id                   String                @id @default(uuid())
  publicId             String                @unique
  title                String
  description          String                @db.Text
  offerType            DirectSaleOfferType
  status               DirectSaleOfferStatus
  price                Float?
  minimumOfferPrice    Float?
  locationCity         String?
  locationState        String?
  imageUrl             String?               @db.Text
  galleryImageUrls     String?               // Comma-separated
  dataAiHint           String?
  views                Int?                  @default(0)
  proposalsCount       Int?                  @default(0)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  expiresAt            DateTime?

  // Foreign Keys
  categoryId           String
  sellerId             String
  imageMediaId         String?               @unique
  
  // Relationships
  category             LotCategory           @relation(fields: [categoryId], references: [id])
  seller               Seller                @relation(fields: [sellerId], references: [id])
  image                MediaItem?            @relation("DirectSaleOfferImage", fields: [imageMediaId], references: [id])
}