// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// ENUMS
// =================================================================

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  ATRASADO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

// =================================================================
// MODELS
// =================================================================

model Lot {
  id                      String      @id @default(uuid())
  publicId                String      @unique
  auctionId               String
  slug                    String?
  number                  String?
  title                   String
  description             String?     @db.Text
  price                   Decimal     @db.Decimal(15, 2)
  initialPrice            Decimal?    @db.Decimal(15, 2)
  secondInitialPrice      Decimal?    @db.Decimal(15, 2)
  bidIncrementStep        Decimal?    @db.Decimal(10, 2)
  status                  LotStatus   @default(EM_BREVE)
  bidsCount               Int?        @default(0)
  views                   Int?        @default(0)
  isFeatured              Boolean?    @default(false)
  isExclusive             Boolean?    @default(false)
  discountPercentage      Int?
  additionalTriggers      Json?
  imageUrl                String?
  imageMediaId            String?
  galleryImageUrls        Json?
  mediaItemIds            Json?
  inheritedMediaFromBemId String?
  type                    String
  categoryId              String?
  subcategoryId           String?
  auctionName             String?
  sellerId                String?
  sellerName              String?
  auctioneerId            String?
  cityId                  String?
  stateId                 String?
  cityName                String?
  stateUf                 String?
  latitude                Float?
  longitude               Float?
  mapAddress              String?
  mapEmbedUrl             String?
  mapStaticImageUrl       String?
  endDate                 DateTime?
  auctionDate             DateTime?
  lotSpecificAuctionDate  DateTime?
  secondAuctionDate       DateTime?
  condition               String?
  dataAiHint              String?
  winnerId                String?
  winningBidTermUrl       String?
  allowInstallmentBids    Boolean?    @default(false)
  isRelisted              Boolean     @default(false)
  relistCount             Int         @default(0)
  originalLotId           String?     @unique
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt

  auction          Auction        @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category         LotCategory?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory      Subcategory?   @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  seller           Seller?        @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  auctioneer       Auctioneer?    @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  city             City?          @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state            State?         @relation(fields: [stateId], references: [id], onDelete: SetNull)
  winner           User?          @relation("WonLots", fields: [winnerId], references: [id], onDelete: SetNull)
  originalLot      Lot?           @relation("RelistHistory", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot      Lot[]          @relation("RelistHistory")
  bids             Bid[]
  wins             UserWin[]
  bens             LotBens[]
  maxBids          UserLotMaxBid[]
  stageDetails     LotAuctionStageDetails[]
  notifications    Notification[]

  @@index([auctionId])
  @@index([categoryId])
  @@index([sellerId])
  @@index([winnerId])
}

model LotBens {
  lotId String
  bemId String
  lot  Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bem  Bem @relation(fields: [bemId], references: [id], onDelete: Cascade)

  @@id([lotId, bemId])
  @@index([bemId])
}

model Auction {
  id                             String                 @id @default(uuid())
  publicId                       String                 @unique
  slug                           String                 @unique
  title                          String
  description                    String?                @db.Text
  status                         AuctionStatus          @default(RASCUNHO)
  auctionDate                    DateTime?
  endDate                        DateTime?
  auctioneerId                   String?
  sellerId                       String?
  categoryId                     String?
  auctionType                    AuctionType?
  participation                  AuctionParticipation?  @default(ONLINE)
  auctionMethod                  AuctionMethod?         @default(STANDARD)
  onlineUrl                      String?
  address                        String?
  cityId                         String?
  stateId                        String?
  zipCode                        String?
  latitude                       Float?
  longitude                      Float?
  imageUrl                       String?
  imageMediaId                   String?
  documentsUrl                   String?
  visits                         Int?                   @default(0)
  initialOffer                   Decimal?               @db.Decimal(15, 2)
  isFavorite                     Boolean?               @default(false)
  dataAiHint                     String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  automaticBiddingEnabled        Boolean?               @default(false)
  allowInstallmentBids           Boolean?               @default(true)
  silentBiddingEnabled           Boolean?               @default(false)
  allowMultipleBidsPerUser       Boolean?               @default(true)
  softCloseEnabled               Boolean?               @default(false)
  softCloseMinutes               Int?                   @default(2)
  estimatedRevenue               Decimal?               @db.Decimal(15, 2)
  achievedRevenue                Decimal?               @db.Decimal(15, 2)
  totalHabilitatedUsers          Int?                   @default(0)
  isFeaturedOnMarketplace        Boolean?               @default(false)
  marketplaceAnnouncementTitle   String?
  decrementAmount                Decimal?               @db.Decimal(10, 2)
  decrementIntervalSeconds       Int?
  floorPrice                     Decimal?               @db.Decimal(15, 2)
  autoRelistSettings             Json?
  judicialProcessId              String?
  courtId                        String?
  districtId                     String?
  branchId                       String?
  createdAt                      DateTime               @default(now())
  updatedAt                      DateTime               @updatedAt

  auctioneer      Auctioneer?            @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  seller          Seller?                @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  category        LotCategory?           @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  judicialProcess JudicialProcess?       @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  court           Court?                 @relation("CourtAuctions", fields: [courtId], references: [id], onDelete: SetNull)
  district        JudicialDistrict?      @relation("DistrictAuctions", fields: [districtId], references: [id], onDelete: SetNull)
  branch          JudicialBranch?        @relation("BranchAuctions", fields: [branchId], references: [id], onDelete: SetNull)
  city            City?                  @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state           State?                 @relation(fields: [stateId], references: [id], onDelete: SetNull)
  
  lots            Lot[]
  bids            Bid[]
  habilitations   AuctionHabilitation[]
  auctionStages   AuctionStage[]

  @@index([auctioneerId])
  @@index([sellerId])
  @@index([categoryId])
  @@index([judicialProcessId])
  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
}

model AuctionStage {
  id                String    @id @default(uuid())
  auctionId         String
  name              String
  startDate         DateTime
  endDate           DateTime
  evaluationValue   Decimal?  @db.Decimal(15, 2)
  
  auction           Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  lotDetails        LotAuctionStageDetails[]

  @@index([auctionId])
}

model LotAuctionStageDetails {
  lotId           String
  stageId         String
  initialBid      Decimal?  @db.Decimal(15, 2)
  bidIncrement    Decimal?  @db.Decimal(10, 2)
  
  lot             Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
  stage           AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)

  @@id([lotId, stageId])
  @@index([stageId])
}


model DirectSaleOffer {
  id                      String   @id @default(uuid())
  publicId                String   @unique
  title                   String
  description             String?  @db.Text
  offerType               DirectSaleOfferType?
  price                   Decimal? @db.Decimal(15, 2)
  minimumOfferPrice       Decimal? @db.Decimal(15, 2)
  status                  DirectSaleOfferStatus? @default(ACTIVE)
  sellerId                String?
  sellerName              String?
  sellerLogoUrl           String?
  dataAiHintSellerLogo    String?
  locationCity            String?
  locationState           String?
  imageUrl                String?
  imageMediaId            String?
  dataAiHint              String?
  galleryImageUrls        Json?
  mediaItemIds            Json?
  itemsIncluded           Json?
  views                   Int?     @default(0)
  expiresAt               DateTime?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  categoryId              String?
  
  category   LotCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  seller     Seller?      @relation(fields: [sellerId], references: [id], onDelete: SetNull)

  @@index([sellerId])
  @@index([categoryId])
}

model State {
  id        String   @id @default(uuid())
  name      String   @unique
  uf        String   @unique
  slug      String   @unique
  cityCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cities    City[]
  districts JudicialDistrict[]
  courts    Court[]
  auctions  Auction[]
  lots      Lot[]
}

model City {
  id       String   @id @default(uuid())
  name     String
  slug     String?
  stateId  String
  stateUf  String?
  ibgeCode String?  @unique
  lotCount Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  state State @relation(fields: [stateId], references: [id], onDelete: Cascade)
  auctions Auction[]
  lots Lot[]
  
  @@index([stateId])
}


model Bem {
  id                       String    @id @default(uuid())
  publicId                 String    @unique
  title                    String
  description              String?   @db.Text
  status                   String    @default("DISPONIVEL")
  categoryId               String?
  subcategoryId            String?
  judicialProcessId        String?
  sellerId                 String?
  evaluationValue          Decimal?  @db.Decimal(15, 2)
  imageUrl                 String?
  imageMediaId             String?
  galleryImageUrls         Json?
  mediaItemIds             Json?
  dataAiHint               String?
  locationCity             String?
  locationState            String?
  address                  String?
  latitude                 Float?
  longitude                Float?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  // Vehicle specific
  plate                   String?
  make                    String?
  model                   String?
  version                 String?
  year                    Int?
  modelYear               Int?
  mileage                 Int?
  color                   String?
  fuelType                String?
  transmissionType        String?
  bodyType                String?
  vin                     String?   @unique
  renavam                 String?   @unique
  enginePower             String?
  numberOfDoors           Int?
  vehicleOptions          String?   @db.Text
  detranStatus            String?
  debts                   String?   @db.Text
  runningCondition        String?
  bodyCondition           String?
  tiresCondition          String?
  hasKey                  Boolean?

  // Real Estate specific
  propertyRegistrationNumber String? @unique
  iptuNumber               String?   @unique
  isOccupied               Boolean?
  totalArea                Decimal?  @db.Decimal(10, 2)
  builtArea                Decimal?  @db.Decimal(10, 2)
  bedrooms                 Int?
  suites                   Int?
  bathrooms                Int?
  parkingSpaces            Int?
  constructionType         String?
  finishes                 String?   @db.Text
  infrastructure           String?   @db.Text
  condoDetails             String?   @db.Text
  improvements             String?   @db.Text
  topography               String?
  liensAndEncumbrances     String?   @db.Text
  propertyDebts            String?   @db.Text
  unregisteredRecords      String?   @db.Text
  hasHabiteSe              Boolean?
  zoningRestrictions       String?
  
  category        LotCategory?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory     Subcategory?      @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess JudicialProcess?  @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller          Seller?           @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  lots            LotBens[]

  @@index([categoryId])
  @@index([subcategoryId])
  @@index([judicialProcessId])
  @@index([sellerId])
}

model JudicialProcess {
  id             String    @id @default(uuid())
  publicId       String    @unique
  processNumber  String    @unique
  isElectronic   Boolean   @default(true)
  courtId        String?
  districtId     String?
  branchId       String?
  sellerId       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  court    Court?            @relation(fields: [courtId], references: [id])
  district JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch   JudicialBranch?   @relation(fields: [branchId], references: [id])
  seller   Seller?           @relation("JudicialProcesses", fields: [sellerId], references: [id], onDelete: SetNull)
  parties  JudicialParty[]
  bens     Bem[]
  auctions Auction[]

  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
  @@index([sellerId])
}

model LotCategory {
  id               String   @id @default(uuid())
  name             String   @unique
  slug             String   @unique
  description      String?
  hasSubcategories Boolean
  iconName         String?
  dataAiHintIcon   String?
  logoUrl          String?
  logoMediaId      String?
  dataAiHintLogo   String?
  coverImageUrl    String?
  coverImageMediaId String?
  dataAiHintCover  String?
  megaMenuImageUrl String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  auctions    Auction[]
  lots        Lot[]
  subcategories Subcategory[]
  bens        Bem[]
  directSaleOffers DirectSaleOffer[]
}

model Subcategory {
  id               String   @id @default(uuid())
  name             String
  slug             String?
  parentCategoryId String
  description      String?
  displayOrder     Int      @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?

  parentCategory LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots          Lot[]
  bens          Bem[]
  
  @@unique([name, parentCategoryId])
  @@index([parentCategoryId])
}

model User {
  id                      String    @id @default(uuid())
  email                   String    @unique
  password                String?
  fullName                String?
  habilitationStatus      UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType             AccountType @default(PHYSICAL)
  avatarUrl               String?
  dataAiHint              String?
  badges                  Json?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  
  cpf                     String?   @unique
  rgNumber                String?
  rgIssuer                String?
  rgIssueDate             DateTime?
  rgState                 String?
  dateOfBirth             DateTime?
  cellPhone               String?
  homePhone               String?
  gender                  String?
  profession              String?
  nationality             String?
  maritalStatus           String?
  propertyRegime          String?
  spouseName              String?
  spouseCpf               String?
  
  razaoSocial             String?
  cnpj                    String?   @unique
  inscricaoEstadual       String?
  website                 String?
  responsibleName         String?
  responsibleCpf          String?

  zipCode                 String?
  street                  String?
  number                  String?
  complement              String?
  neighborhood            String?
  city                    String?
  state                   String?
  optInMarketing          Boolean?  @default(false)
  
  roles             UsersOnRoles[]
  bids              Bid[]
  wins              UserWin[]
  documents         UserDocument[]
  notifications     Notification[]
  habilitations     AuctionHabilitation[]
  maxBids           UserLotMaxBid[]
  uploadedMedia     MediaItem[]      @relation("UploadedBy")
  wonLots           Lot[]            @relation("WonLots")
  sellerProfile     Seller?          @relation("SellerUser")
  auctioneerProfile Auctioneer?      @relation("AuctioneerUser")
}

model AuctionHabilitation {
  userId          String
  auctionId       String
  habilitatedAt   DateTime @default(now())

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@id([userId, auctionId])
  @@index([auctionId])
}

model Auctioneer {
  id                 String    @id @default(uuid())
  publicId           String    @unique
  slug               String    @unique
  name               String
  registrationNumber String?
  contactName        String?
  email              String?   @unique
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?   @db.Text
  userId             String?   @unique
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user               User?     @relation("AuctioneerUser", fields: [userId], references: [id])
  auctions           Auction[]
  lots               Lot[]
}

model Seller {
  id                 String   @id @default(uuid())
  publicId           String   @unique
  slug               String   @unique
  name               String   @unique
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?  @db.Text
  userId             String?  @unique
  isJudicial         Boolean  @default(false)
  judicialBranchId   String?  @unique
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  user               User?      @relation("SellerUser", fields: [userId], references: [id], onDelete: SetNull)
  judicialBranch     JudicialBranch? @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  auctions           Auction[]
  lots               Lot[]
  bens               Bem[]
  directSales        DirectSaleOffer[]
  judicialProcesses  JudicialProcess[] @relation("JudicialProcesses")
}

    