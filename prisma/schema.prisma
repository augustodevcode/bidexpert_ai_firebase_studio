// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// ======================================
// Modelos de Usuário, Autenticação e Permissões
// ======================================

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  fullName            String?
  password            String?
  roleId              String?
  habilitationStatus  UserHabilitationStatus @default(PENDENTE_DOCUMENTOS)
  accountType         UserAccountType?     @default(PHYSICAL)
  avatarUrl           String?
  badges              Json?
  
  // Dados Pessoa Física
  cpf                 String?              @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?

  // Dados Pessoa Jurídica
  razaoSocial         String?
  cnpj                String?              @unique
  inscricaoEstadual   String?
  website             String?

  // Contato e Endereço
  cellPhone           String?
  homePhone           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?

  optInMarketing      Boolean              @default(false)
  
  // Timestamps
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  // Relações
  role                Role?                @relation(fields: [roleId], references: [id], onDelete: SetNull)
  bids                Bid[]                @relation("UserBids")
  wins                UserWin[]            @relation("UserWins")
  documents           UserDocument[]
  notifications       Notification[]
  mediaItems          MediaItem[]
  reviews             Review[]
  questions           LotQuestion[]        @relation("UserQuestions")
  answers             LotQuestion[]        @relation("UserAnswers")
  maxBids             UserLotMaxBid[]      @relation("UserMaxBids")

  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  blogPosts           BlogPost[]

  @@index([email])
  @@index([roleId])
}


model Role {
  id              String        @id @default(cuid())
  name            String        @unique
  name_normalized String        @unique
  description     String?       @db.Text
  users           User[]
  permissions     Permission[]  @relation("PermissionToRole")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Permission {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  roles       Role[] @relation("PermissionToRole")
}

model DocumentType {
  id             String          @id @default(cuid())
  name           String          @unique
  description    String?
  isRequired     Boolean         @default(true)
  appliesTo      String?         // e.g., "PHYSICAL,LEGAL"
  allowedFormats String?
  displayOrder   Int             @default(0)
  userDocuments  UserDocument[]
}

model UserDocument {
  id              String             @id @default(cuid())
  userId          String
  documentTypeId  String
  fileUrl         String?
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  rejectionReason String?            @db.Text
  
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType  DocumentType  @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)

  @@unique([userId, documentTypeId])
}


// ======================================
// Modelos de Leilão
// ======================================

model Auction {
  id                             String           @id @default(cuid())
  publicId                       String           @unique
  title                          String
  fullTitle                      String?          @db.Text
  description                    String?          @db.Text
  status                         AuctionStatus    @default(RASCUNHO)
  auctionType                    AuctionType?
  
  categoryId                     String?
  auctioneerId                   String?
  sellerId                       String?
  judicialProcessId              String?

  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json             @default("[]") // Store as JSON string
  
  city                           String?
  state                          String?
  imageUrl                       String?
  imageMediaId                   String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  
  automaticBiddingEnabled        Boolean          @default(false)
  silentBiddingEnabled           Boolean          @default(false)
  allowMultipleBidsPerUser       Boolean          @default(true)
  allowInstallmentBids           Boolean          @default(false)
  softCloseEnabled               Boolean          @default(false)
  softCloseMinutes               Int?             @default(2)

  estimatedRevenue               Float?
  achievedRevenue                Float?           @default(0)
  totalHabilitatedUsers          Int?             @default(0)
  isFeaturedOnMarketplace        Boolean          @default(false)
  marketplaceAnnouncementTitle   String?
  additionalTriggers             String?          // Store as comma-separated string
  autoRelistSettings             Json?

  decrementAmount                Float?
  decrementIntervalSeconds       Int?
  floorPrice                     Float?
  
  visits                         Int              @default(0)
  totalLots                      Int              @default(0)

  createdAt                      DateTime         @default(now())
  updatedAt                      DateTime         @updatedAt
  
  // Relações
  category                       LotCategory?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  auctioneer                     Auctioneer?      @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  seller                         Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  processoJudicial               ProcessoJudicial? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)

  lots                           Lot[]
  bids                           Bid[]
  reviews                        Review[]         @relation("AuctionReviews")
  questions                      LotQuestion[]    @relation("AuctionQuestions")

  @@index([status, auctionDate, endDate])
  @@index([auctioneerId])
  @@index([sellerId])
}


model Lot {
  id                    String        @id @default(cuid())
  publicId              String        @unique
  auctionId             String
  number                String?
  title                 String
  description           String?       @db.Text
  
  price                 Float         @default(0)
  initialPrice          Float?
  secondInitialPrice    Float?
  bidIncrementStep      Float?        @default(100)
  reservePrice          Float?
  evaluationValue       Float?
  debtAmount            Float?
  itbiValue             Float?

  status                LotStatus     @default(EM_BREVE)
  
  categoryId            String?
  subcategoryId         String?

  // Localização
  stateId               String?
  cityId                String?
  latitude              Float?
  longitude             Float?
  mapAddress            String?
  mapEmbedUrl           String?
  mapStaticImageUrl     String?

  // Mídia
  imageUrl              String?
  imageMediaId          String?
  galleryImageUrls      Json?
  mediaItemIds          Json?         @default("[]")
  dataAiHint            String?

  // Dados Adicionais
  isFeatured            Boolean       @default(false)
  isExclusive           Boolean       @default(false)
  discountPercentage    Float?
  additionalTriggers    String?       // Store as comma-separated string
  condition             String?
  
  // Timestamps
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Relações
  auction               Auction       @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category              LotCategory?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory           Subcategory?  @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  state                 Estado?       @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city                  Cidade?       @relation(fields: [cityId], references: [id], onDelete: SetNull)
  bens                  Bem[]         @relation("BemToLot")
  
  bids                  Bid[]
  wins                  UserWin[]
  maxBids               UserLotMaxBid[] @relation("LotMaxBids")
  reviews               Review[]
  questions             LotQuestion[]

  @@index([auctionId])
  @@index([status])
  @@index([isFeatured])
}


model Bem {
  id                      String   @id @default(cuid())
  publicId                String   @unique
  title                   String
  description             String?  @db.Text
  status                  BemStatus @default(DISPONIVEL)

  judicialProcessId       String?
  sellerId                String?
  
  categoryId              String?
  subcategoryId           String?
  
  evaluationValue         Float?
  
  imageUrl                String?
  imageMediaId            String?
  galleryImageUrls        Json?
  mediaItemIds            Json?
  dataAiHint              String?
  
  // Localização
  locationCity            String?
  locationState           String?
  address                 String?
  latitude                Float?
  longitude               Float?
  
  // Campos específicos
  plate                   String?
  make                    String?
  model                   String?
  version                 String?
  year                    Int?
  modelYear               Int?
  mileage                 Int?
  color                   String?
  fuelType                String?
  transmissionType        String?
  bodyType                String?
  vin                     String?
  renavam                 String?
  enginePower             String?
  numberOfDoors           Int?
  vehicleOptions          String?
  detranStatus            String?
  debts                   String?
  runningCondition        String?
  bodyCondition           String?
  tiresCondition          String?
  hasKey                  Boolean?

  propertyRegistrationNumber String?
  propertyType            String?
  iptuNumber              String?
  isOccupied              Boolean?
  area                    Float?
  builtArea               Float?
  bedrooms                Int?
  suites                  Int?
  bathrooms               Int?
  parkingSpaces           Int?
  constructionType        String?
  finishes                String?
  infrastructure          String?
  condoDetails            String?
  improvements            String?
  topography              String?
  liensAndEncumbrances    String?
  propertyDebts           String?
  unregisteredRecords     String?
  hasHabiteSe             Boolean?
  zoningRestrictions      String?
  amenities               Json?

  brand                   String?
  serialNumber            String?
  itemCondition           String?
  specifications          String?
  includedAccessories     String?
  batteryCondition        String?
  hasInvoice              Boolean?
  hasWarranty             Boolean?
  repairHistory           String?
  
  applianceCapacity       String?
  voltage                 String?
  applianceType           String?
  additionalFunctions     String?
  
  hoursUsed               Int?
  engineType              String?
  capacityOrPower         String?
  maintenanceHistory      String?
  installationLocation    String?
  compliesWithNR          String?
  operatingLicenses       String?
  
  breed                   String?
  age                     String?
  sex                     String?
  weight                  String?
  vaccinationStatus       String?
  individualId            String?
  purpose                 String?
  sanitaryCondition       String?
  lineage                 String?
  isPregnant              Boolean?
  specialSkills           String?
  gtaDocument             String?
  breedRegistryDocument   String?

  furnitureType           String?
  material                String?
  style                   String?
  dimensions              String?
  pieceCount              Int?
  
  jewelryType             String?
  metal                   String?
  gemstones               String?
  totalWeight             String?
  jewelrySize             String?
  authenticityCertificate String?
  
  workType                String?
  artist                  String?
  period                  String?
  technique               String?
  provenance              String?
  
  boatType                String?
  boatLength              String?
  hullMaterial            String?
  onboardEquipment        String?
  
  productName             String?
  quantity                String?
  packagingType           String?
  expirationDate          DateTime?
  storageConditions       String?
  
  preciousMetalType       String?
  purity                  String?
  
  forestGoodsType         String?
  volumeOrQuantity        String?
  species                 String?
  dofNumber               String?
  
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  lots                    Lot[]    @relation("BemToLot")
  judicialProcess         ProcessoJudicial? @relation(fields: [judicialProcessId], references: [id])
  seller                  Seller?  @relation(fields: [sellerId], references: [id])
  category                LotCategory? @relation(fields: [categoryId], references: [id])
  subcategory             Subcategory? @relation(fields: [subcategoryId], references: [id])
}


// ======================================
// Modelos de Suporte e Relacionais
// ======================================

model Bid {
  id             String    @id @default(cuid())
  lotId          String
  auctionId      String
  bidderId       String
  bidderDisplay  String
  amount         Float
  timestamp      DateTime  @default(now())
  
  lot            Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction        Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user           User      @relation("UserBids", fields: [bidderId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([bidderId])
}

model UserWin {
  id                String       @id @default(cuid())
  lotId             String       @unique
  userId            String
  winningBidAmount  Float
  winDate           DateTime     @default(now())
  paymentStatus     PaymentStatus @default(PENDENTE)
  invoiceUrl        String?
  
  lot               Lot          @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user              User         @relation("UserWins", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserLotMaxBid {
  id         String  @id @default(cuid())
  userId     String
  lotId      String
  maxAmount  Float
  isActive   Boolean @default(true)
  
  user       User    @relation("UserMaxBids", fields: [userId], references: [id], onDelete: Cascade)
  lot        Lot     @relation("LotMaxBids", fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model Review {
  id                String  @id @default(cuid())
  lotId             String
  auctionId         String
  userId            String
  userDisplayName   String
  rating            Int
  comment           String  @db.Text
  
  lot               Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction           Auction @relation("AuctionReviews", fields: [auctionId], references: [id], onDelete: Cascade)
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt         DateTime @default(now())
  @@index([lotId])
}

model LotQuestion {
  id                      String   @id @default(cuid())
  lotId                   String
  auctionId               String
  userId                  String
  userDisplayName         String
  questionText            String   @db.Text
  
  answerText              String?  @db.Text
  answeredAt              DateTime?
  answeredByUserId        String?
  answeredByUserDisplayName String?
  
  isPublic                Boolean  @default(true)
  
  lot                     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction                 Auction  @relation("AuctionQuestions", fields: [auctionId], references: [id], onDelete: Cascade)
  user                    User     @relation("UserQuestions", fields: [userId], references: [id], onDelete: Cascade)
  answeredByUser          User?    @relation("UserAnswers", fields: [answeredByUserId], references: [id], onDelete: SetNull)

  createdAt               DateTime @default(now())
  @@index([lotId])
}

model MediaItem {
  id                String    @id @default(cuid())
  fileName          String
  storagePath       String
  uploadedBy        String?
  title             String?
  altText           String?
  caption           String?
  description       String?   @db.Text
  mimeType          String
  sizeBytes         Int
  
  urlOriginal       String
  urlThumbnail      String?
  urlMedium         String?
  urlLarge          String?
  
  dataAiHint        String?
  linkedLotIds      String[]
  
  uploadedByUser    User?     @relation(fields: [uploadedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  sellerLogo        Seller?
  auctioneerLogo    Auctioneer?
}

model DirectSaleOffer {
  id                String        @id @default(cuid())
  publicId          String        @unique
  title             String
  description       String        @db.Text
  offerType         DirectSaleOfferType
  status            DirectSaleOfferStatus
  
  price             Float?
  minimumOfferPrice Float?

  categoryId        String
  sellerId          String

  locationCity      String?
  locationState     String?
  
  imageUrl          String?
  imageMediaId      String?
  dataAiHint        String?
  
  galleryImageUrls  String[]
  mediaItemIds      String[]
  
  expiresAt         DateTime?
  views             Int           @default(0)
  proposalsCount    Int           @default(0)
  
  category          LotCategory   @relation(fields: [categoryId], references: [id])
  seller            Seller        @relation(fields: [sellerId], references: [id])

  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model ContactMessage {
    id        String @id @default(cuid())
    name      String
    email     String
    subject   String
    message   String @db.Text
    isRead    Boolean @default(false)
    createdAt DateTime @default(now())
}

model DocumentTemplate {
    id        String @id @default(cuid())
    name      String @unique
    type      DocumentTemplateType
    content   String @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model UserLotFavorite {
    userId String
    lotId  String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    lot    Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
    
    @@id([userId, lotId])
}

model UserAuctionFavorite {
    userId    String
    auctionId String
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    auction   Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

    @@id([userId, auctionId])
}

model BlogPost {
  id              String        @id @default(cuid())
  title           String
  slug            String        @unique
  content         String        @db.Text
  authorId        String
  categoryId      String?
  
  featuredImageId String?
  
  isPublished     Boolean       @default(false)
  publishedAt     DateTime?
  
  author          User          @relation(fields: [authorId], references: [id])
  category        LotCategory?  @relation(fields: [categoryId], references: [id])
  featuredImage   MediaItem?    @relation(fields: [featuredImageId], references: [id], onDelete: SetNull)

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// ======================================
// Modelos de Dados Mestres e Judiciais
// ======================================

model LotCategory {
  id                 String   @id @default(cuid())
  name               String   @unique
  slug               String   @unique
  description        String?
  hasSubcategories   Boolean  @default(false)
  itemCount          Int?     @default(0)

  logoUrl            String?
  dataAiHintLogo     String?
  coverImageUrl      String?
  dataAiHintCover    String?
  megaMenuImageUrl   String?
  dataAiHintMegaMenu String?

  auctions           Auction[]
  lots               Lot[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
  subcategories      Subcategory[]
  blogPosts          BlogPost[]
  
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Subcategory {
  id              String @id @default(cuid())
  name            String
  slug            String @unique
  description     String?
  displayOrder    Int    @default(0)

  parentCategoryId String
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  
  itemCount       Int?   @default(0)
  iconUrl         String?
  iconMediaId     String?
  dataAiHintIcon  String?

  lots            Lot[]
  bens            Bem[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([parentCategoryId])
}

model State {
  id        String   @id @default(cuid())
  name      String   @unique
  uf        String   @unique
  slug      String   @unique
  cityCount Int?     @default(0)
  cities    City[]
  lots      Lot[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id      String @id @default(cuid())
  name    String
  slug    String @unique
  ibgeCode String?
  stateId String
  stateUf String
  
  state   State @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots    Lot[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([stateId])
}

model Court {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  stateUf   String
  website   String?
  
  districts      JudicialDistrict[]
  judicialProcesses ProcessoJudicial[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JudicialDistrict {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  courtId   String
  stateId   String
  zipCode   String?
  
  court     Court    @relation(fields: [courtId], references: [id])
  state     State    @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  judicialProcesses ProcessoJudicial[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([name, stateId])
}

model JudicialBranch {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  districtId  String
  
  contactName String?
  phone       String?
  email       String?

  district          JudicialDistrict   @relation(fields: [districtId], references: [id])
  judicialProcesses ProcessoJudicial[]
  judicialSellers   Seller[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([name, districtId])
}

model ProcessoJudicial {
  id             String         @id @default(cuid())
  publicId       String         @unique
  processNumber  String         @unique
  isElectronic   Boolean        @default(true)
  
  courtId        String
  districtId     String
  branchId       String
  sellerId       String?        // Comitente (a vara, por exemplo)
  
  parties        ProcessParty[]
  bens           Bem[]
  auctions       Leilao[]       @relation("AuctionToJudicialProcess")
  
  court          Court            @relation(fields: [courtId], references: [id])
  district       JudicialDistrict @relation(fields: [districtId], references: [id])
  branch         JudicialBranch   @relation(fields: [branchId], references: [id])
  seller         Seller?          @relation(fields: [sellerId], references: [id])

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model ProcessParty {
  id             String  @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  
  process        ProcessoJudicial @relation(fields: [processId], references: [id], onDelete: Cascade)
  
  @@unique([processId, name, partyType])
}


// --- ENUMS ---

enum UserAccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDENTE_DOCUMENTOS
  PENDENTE_ANALISE
  HABILITADO
  REJEITADO_DOCUMENTOS
  BLOQUEADO
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}
```