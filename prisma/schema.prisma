
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  // The following line is needed to instruct Prisma to generate a client compatible with modern OpenSSL.
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

// ===================================================
// AUTHENTICATION & AUTHORIZATION
// ===================================================

model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  password            String
  fullName            String
  accountType         UserAccountType?     @default(PHYSICAL)
  habilitationStatus  UserHabilitationStatus? @default(PENDING_DOCUMENTS)

  // Personal Info (PF)
  cpf               String? @unique
  dateOfBirth       DateTime?
  
  // Company Info (PJ)
  razaoSocial       String?
  cnpj              String? @unique
  inscricaoEstadual String?
  website           String?

  // Contact & Address
  cellPhone         String?
  zipCode           String?
  street            String?
  number            String?
  complement        String?
  neighborhood      String?
  city              String?
  state             String?

  // Preferences & Timestamps
  optInMarketing      Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  
  // Relationships
  roleId              String?
  role                Role?                  @relation(fields: [roleId], references: [id], onDelete: SetNull)
  
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  maxBids             UserLotMaxBid[]
  uploadedMedia       MediaItem[]            @relation("UploadedBy")
  reviews             Review[]
  questions           LotQuestion[]
  answers             LotQuestion[]          @relation("AnsweredBy")
  blogPosts           BlogPost[]
  notifications       Notification[] // Added back-relation
  
  sellerProfileId     String?              @unique
  sellerProfile       Seller?

  auctioneerProfileId String?              @unique
  auctioneerProfile   Auctioneer?
}

model Role {
  id              String        @id @default(uuid())
  name            String        @unique
  name_normalized String        @unique
  description     String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  users           User[]
  permissions     Permission[]  @relation()
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  group       String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  roles       Role[]   @relation()
}

model UserDocument {
  id                String             @id @default(uuid())
  userId            String
  documentTypeId    String
  fileUrl           String
  fileName          String
  status            UserDocumentStatus
  rejectionReason   String?
  uploadDate        DateTime           @default(now())
  analysisDate      DateTime?
  
  // Relationships
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType      DocumentType       @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id             String           @id @default(uuid())
  name           String
  description    String?
  isRequired     Boolean          @default(false)
  appliesTo      String           // Stored as comma-separated string: "PHYSICAL,LEGAL"
  allowedFormats String           // Stored as comma-separated string: "pdf,jpg,png"
  displayOrder   Int              @default(0)
  
  userDocuments  UserDocument[]
}

// ===================================================
// MEDIA & CONTENT
// ===================================================

model MediaItem {
  id        String   @id @default(uuid())
  fileName  String
  storagePath String @unique
  title     String?
  altText   String?
  caption   String?
  description String?
  mimeType  String
  sizeBytes Int
  uploadedAt DateTime @default(now())

  // Foreign Keys
  uploadedBy String?

  // Relationships
  userUploader    User?            @relation("UploadedBy", fields: [uploadedBy], references: [id], onDelete: SetNull)
  auctionAsImage  Auction?         @relation("AuctionImage")
  lotAsImage      Lot?             @relation("LotImage")
  bemAsImage      Bem?             @relation("BemImage")
  sellerAsLogo    Seller?          @relation("SellerLogo")
  auctioneerAsLogo Auctioneer?     @relation("AuctioneerLogo")
  blogPostAsImage BlogPost?        @relation("BlogPostImage")
  directSaleOfferAsImage DirectSaleOffer? @relation("DirectSaleOfferImage")
  lotAsGallery    Lot[]            @relation("LotGallery")
}

// ===================================================
// AUCTIONS & LOTS
// ===================================================

model Auction {
  id                           String        @id @default(uuid())
  publicId                     String        @unique @default(uuid())
  title                        String
  fullTitle                    String?       @db.Text
  description                  String?       @db.Text
  status                       AuctionStatus @default(EM_BREVE)
  auctionType                  AuctionType?
  auctionDate                  DateTime
  endDate                      DateTime?
  city                         String?
  state                        String?
  imageUrl                     String?       @db.Text
  dataAiHint                   String?
  documentsUrl                 String?       @db.Text
  evaluationReportUrl          String?
  auctionCertificateUrl        String?
  sellingBranch                String?
  visits                       Int?          @default(0)
  isFeaturedOnMarketplace      Boolean?      @default(false)
  marketplaceAnnouncementTitle String?
  
  // Automation & Bidding Settings
  automaticBiddingEnabled    Boolean?   @default(false)
  silentBiddingEnabled       Boolean?   @default(false)
  allowMultipleBidsPerUser   Boolean?   @default(true)
  allowInstallmentBids       Boolean?   @default(false)
  softCloseEnabled           Boolean?   @default(false)
  softCloseMinutes           Int?       @default(2)
  estimatedRevenue           Float?
  achievedRevenue            Float?
  totalHabilitatedUsers      Int?       @default(0)
  additionalTriggers         String?    // Stored as comma-separated string
  
  // Dutch Auction Settings
  decrementAmount            Float?
  decrementIntervalSeconds   Int?
  floorPrice                 Float?
  
  // Auto-relist Settings
  autoRelistSettings         Json?      

  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Foreign Keys
  categoryId        String
  auctioneerId      String
  sellerId          String?
  judicialProcessId String?
  imageMediaId      String?           @unique
  
  // Relationships
  category          LotCategory       @relation(fields: [categoryId], references: [id])
  auctioneer        Auctioneer        @relation(fields: [auctioneerId], references: [id])
  seller            Seller?           @relation(fields: [sellerId], references: [id])
  judicialProcess   JudicialProcess?  @relation(fields: [judicialProcessId], references: [id])
  image             MediaItem?        @relation("AuctionImage", fields: [imageMediaId], references: [id])
  lots              Lot[]
  bids              Bid[]
  questions         LotQuestion[]
  auctionStages     Json?
}

model Lot {
  id                         String   @id @default(uuid())
  publicId                   String   @unique @default(uuid())
  title                      String
  number                     String?
  description                String?  @db.Text
  price                      Float
  initialPrice               Float?
  secondInitialPrice         Float?
  bidIncrementStep           Float?
  status                     LotStatus
  isFeatured                 Boolean? @default(false)
  isExclusive                Boolean? @default(false)
  discountPercentage         Float?
  additionalTriggers         String? // Stored as comma-separated string
  
  // Location
  latitude                 Float?
  longitude                Float?
  mapAddress                 String?
  mapEmbedUrl                String?  @db.Text
  mapStaticImageUrl          String?  @db.Text
  
  // Bidding & Dates
  bidsCount                  Int?       @default(0)
  views                      Int?       @default(0)
  endDate                    DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?

  // Timestamps
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  
  // Foreign Keys
  auctionId     String
  categoryId    String
  subcategoryId String?
  cityId        String?
  stateId       String?
  imageMediaId  String?    @unique
  
  // Relationships
  auction       Auction          @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category      LotCategory      @relation(fields: [categoryId], references: [id])
  subcategory   Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  city          CityInfo?        @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state         StateInfo?       @relation(fields: [stateId], references: [id], onDelete: SetNull)
  image         MediaItem?       @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  bids          Bid[]
  wins          UserWin[]
  reviews       Review[]
  questions     LotQuestion[]
  maxBids       UserLotMaxBid[]
  lotsOnBens    LotOnBem[]
  galleryImages MediaItem[]      @relation("LotGallery")
}

model LotOnBem {
  lot   Lot @relation(fields: [lotId], references: [id])
  lotId String
  bem   Bem @relation(fields: [bemId], references: [id])
  bemId String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([lotId, bemId])
}

// ===================================================
// ENTITIES
// ===================================================

model Seller {
  id                       String    @id @default(uuid())
  publicId                 String    @unique @default(uuid())
  name                     String
  slug                     String    @unique
  contactName              String?
  email                    String?
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  description              String?   @db.Text
  isJudicial               Boolean   @default(false)
  
  // Timestamps & Metrics
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  memberSince              DateTime?
  rating                   Float?
  activeLotsCount          Int?      @default(0)
  totalSalesValue          Float?    @default(0)
  auctionsFacilitatedCount Int?      @default(0)
  
  // Foreign Keys
  userId            String?  @unique
  logoMediaId       String?  @unique
  judicialBranchId  String?  @unique
  
  // Relationships
  user              User?             // one-to-one implicit relation
  logo              MediaItem?        @relation("SellerLogo", fields: [logoMediaId], references: [id])
  judicialBranch    JudicialBranch?   @relation(fields: [judicialBranchId], references: [id])
  auctions          Auction[]
  bens              Bem[]
  directSaleOffers  DirectSaleOffer[]
  processes         JudicialProcess[]
}

model Auctioneer {
  id                       String    @id @default(uuid())
  publicId                 String    @unique @default(uuid())
  name                     String
  slug                     String    @unique
  registrationNumber       String?
  contactName              String?
  email                    String?
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  description              String?   @db.Text
  
  // Timestamps & Metrics
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  memberSince              DateTime?
  rating                   Float?
  auctionsConductedCount   Int?      @default(0)
  totalValueSold           Float?    @default(0)
  
  // Foreign Keys
  userId               String?    @unique
  logoMediaId          String?    @unique
  
  // Relationships
  user                 User?      // one-to-one implicit relation
  logo                 MediaItem? @relation("AuctioneerLogo", fields: [logoMediaId], references: [id])
  auctions             Auction[]
}

// ===================================================
// JUDICIAL ENTITIES
// ===================================================

model Court {
  id          String             @id @default(uuid())
  name        String
  slug        String             @unique
  stateUf     String
  website     String?
  
  districts   JudicialDistrict[]
  processes   JudicialProcess[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model JudicialDistrict {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  courtId   String
  stateId   String
  zipCode   String?
  
  branches  JudicialBranch[]
  processes JudicialProcess[]
  
  court     Court    @relation(fields: [courtId], references: [id])
  state     StateInfo @relation(fields: [stateId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JudicialBranch {
  id         String   @id @default(uuid())
  name       String
  slug       String   @unique
  districtId String
  contactName String?
  phone      String?
  email      String?
  
  processes  JudicialProcess[]
  sellers    Seller[]
  
  district   JudicialDistrict @relation(fields: [districtId], references: [id])
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model JudicialProcess {
  id              String   @id @default(uuid())
  publicId        String   @unique @default(uuid())
  processNumber   String   @unique
  isElectronic    Boolean  @default(true)
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Foreign Keys
  courtId         String
  districtId      String
  branchId        String
  sellerId        String?          @unique

  // Relationships
  court           Court            @relation(fields: [courtId], references: [id])
  district        JudicialDistrict @relation(fields: [districtId], references: [id])
  branch          JudicialBranch   @relation(fields: [branchId], references: [id])
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  parties         ProcessParty[]
  bens            Bem[]
  auctions        Auction[]
}

model ProcessParty {
  id              String         @id @default(uuid())
  processId       String
  name            String
  documentNumber  String?
  partyType       ProcessPartyType
  
  process         JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@unique([processId, name, partyType])
}


model Bem {
  id                         String   @id @default(uuid())
  publicId                   String   @unique @default(uuid())
  title                      String
  description                String?  @db.Text
  status                     BemStatus @default(DISPONIVEL)
  evaluationValue            Float?
  
  // Location
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  
  // Image
  imageUrl                   String?  @db.Text
  dataAiHint                 String?
  
  // Timestamps
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  
  // Foreign Keys
  categoryId        String
  subcategoryId     String?
  judicialProcessId String?
  sellerId          String?
  imageMediaId      String?    @unique
  
  // Relationships
  category          LotCategory      @relation(fields: [categoryId], references: [id])
  subcategory       Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller            Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  image             MediaItem?       @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  lotsOnBens        LotOnBem[]
  
  // Vehicle Specific Fields
  plate               String?
  make                String?
  model               String?
  version             String?
  year                Int?
  modelYear           Int?
  mileage             Int?
  color               String?
  fuelType            String?
  transmissionType    String?
  bodyType            String?
  vin                 String?
  renavam             String?
  enginePower         String?
  numberOfDoors       Int?
  vehicleOptions      String?
  detranStatus        String?
  debts               String?
  runningCondition    String?
  bodyCondition       String?
  tiresCondition      String?
  hasKey              Boolean?

  // Real Estate Specific Fields
  propertyType              String?
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  area                       Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  condoFee                   Float?
  propertyTax                Float?
  zoning                     String?
  topography                 String?
  amenities                  String? // Comma-separated
  constructionType           String?
  finishes                   String? @db.Text
  infrastructure             String? @db.Text
  condoDetails               String? @db.Text
  improvements               String? @db.Text
  liensAndEncumbrances       String? @db.Text
  propertyDebts              String? @db.Text
  unregisteredRecords        String? @db.Text
  hasHabiteSe                Boolean?
  zoningRestrictions         String?

  // Machinery Specific Fields
  serialNumber        String?
  hoursUsed           Int?
  engineType          String?
  capacityOrPower     String?
  maintenanceHistory  String? @db.Text
  installationLocation String?
  compliesWithNR      String?
  operatingLicenses   String?

  // Livestock Specific Fields
  breed               String?
  age                 String?
  sex                 LivestockSex?
  weight              String?
  individualId        String?
  purpose             String?
  vaccinationStatus   String?
  sanitaryCondition   String?
  lineage             String?
  isPregnant          Boolean?
  specialSkills       String?
  gtaDocument         String?
  breedRegistryDocument String?

  // Other specific fields...
  brand             String?
  itemCondition     String?
  specifications    String? @db.Text
  includedAccessories String? @db.Text
  batteryCondition  String?
  hasInvoice        Boolean?
  hasWarranty       Boolean?
  repairHistory     String? @db.Text
  applianceCapacity String?
  voltage           String?
  applianceType     String?
  additionalFunctions String? @db.Text
  furnitureType     String?
  material          String?
  style             String?
  dimensions        String?
  pieceCount        Int?
  jewelryType       String?
  metal             String?
  gemstones         String? @db.Text
  totalWeight       String?
  jewelrySize       String?
  authenticityCertificate String?
  workType          String?
  artist            String?
  period            String?
  technique         String?
  provenance        String? @db.Text
  boatType          String?
  boatLength        String?
  hullMaterial      String?
  onboardEquipment  String? @db.Text
  productName       String?
  quantity          String?
  packagingType     String?
  expirationDate    DateTime?
  storageConditions String?
  preciousMetalType String?
  purity            String?
  forestGoodsType   String?
  volumeOrQuantity  String?
  species           String?
  dofNumber         String?
}


// ===================================================
// SUPPORTING MODELS
// ===================================================

model Bid {
  id            String   @id @default(uuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())
  isProxyBid    Boolean  @default(false)
  
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id                String   @id @default(uuid())
  lotId             String   @unique // A lot can only be won once
  userId            String
  winningBidAmount  Float
  winDate           DateTime @default(now())
  paymentStatus     PaymentStatus @default(PENDENTE)
  invoiceUrl        String?
  
  lot               Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserLotMaxBid {
  id       String @id @default(uuid())
  userId   String
  lotId    String
  maxAmount Float
  isActive Boolean @default(true)
  
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot      Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model Review {
  id                String   @id @default(uuid())
  lotId             String
  auctionId         String
  userId            String
  userDisplayName   String
  rating            Int
  comment           String   @db.Text
  createdAt         DateTime @default(now())
  
  lot               Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                      String   @id @default(uuid())
  lotId                   String
  auctionId               String
  userId                  String
  userDisplayName         String
  questionText            String   @db.Text
  answerText              String?  @db.Text
  answeredAt              DateTime?
  answeredByUserId        String?
  isPublic                Boolean  @default(true)
  createdAt               DateTime @default(now())

  // Relationships
  lot                     Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction                 Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  questioner              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  answeredByUser          User?     @relation("AnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)
}

model StateInfo {
  id          String             @id @default(uuid())
  name        String             @unique
  uf          String             @unique
  slug        String             @unique
  
  cities      JudicialDistrict[]
  lots        Lot[]
  
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model CityInfo {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  stateId   String
  stateUf   String
  ibgeCode  String?
  
  state     StateInfo @relation(fields: [stateId], references: [id])
  lots      Lot[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LotCategory {
  id                  String  @id @default(uuid())
  name                String  @unique
  slug                String  @unique
  description         String?
  hasSubcategories    Boolean @default(false)
  itemCount           Int?    @default(0)
  
  logoMediaId         String? @unique
  coverImageMediaId   String? @unique
  megaMenuImageMediaId String? @unique
  
  dataAiHintLogo      String?
  dataAiHintCover     String?
  dataAiHintMegaMenu  String?
  
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  
  subcategories       Subcategory[]
  auctions            Auction[]
  lots                Lot[]
  bens                Bem[]
  directSaleOffers    DirectSaleOffer[]
}

model Subcategory {
  id               String      @id @default(uuid())
  name             String
  slug             String      @unique
  description      String?
  displayOrder     Int         @default(0)
  itemCount        Int?        @default(0)
  
  // Foreign Keys
  parentCategoryId String
  iconMediaId      String?     @unique
  
  // Relationships
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id])
  lots             Lot[]
  bens             Bem[]
  
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}


model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BlogPost {
  id              String   @id @default(uuid())
  title           String
  slug            String   @unique
  content         String   @db.Text
  authorId        String
  publishedAt     DateTime @default(now())
  
  // Foreign Keys
  featuredImageId String?  @unique
  
  // Relationships
  author          User      @relation(fields: [authorId], references: [id])
  image           MediaItem? @relation("BlogPostImage", fields: [featuredImageId], references: [id], onDelete: SetNull)
}

model DirectSaleOffer {
  id                   String                  @id @default(uuid())
  publicId             String                  @unique
  title                String
  description          String                  @db.Text
  offerType            DirectSaleOfferType
  status               DirectSaleOfferStatus
  price                Float?
  minimumOfferPrice    Float?
  
  // Location
  locationCity         String?
  locationState        String?
  
  // Timestamps
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  expiresAt            DateTime?

  // Metrics
  views                Int?      @default(0)
  proposalsCount       Int?      @default(0)
  
  // Foreign Keys
  categoryId           String
  sellerId             String
  imageMediaId         String?               @unique
  
  // Relationships
  category             LotCategory           @relation(fields: [categoryId], references: [id])
  seller               Seller                @relation(fields: [sellerId], references: [id])
  image                MediaItem?            @relation("DirectSaleOfferImage", fields: [imageMediaId], references: [id])
}

model ContactMessage {
  id         String   @id @default(uuid())
  name       String
  email      String
  subject    String
  message    String   @db.Text
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model PlatformSettings {
  id                    String @id @default("global")
  siteTitle             String?
  siteTagline           String?
  galleryImageBasePath  String?
  storageProvider       String? @default("local") // 'local' or 'firebase'
  firebaseStorageBucket String?
  activeThemeName       String?
  themes                Json?  // Array of Theme objects
  platformPublicIdMasks Json?  // Object with masks for entities
  homepageSections      Json?  // Array of HomepageSectionConfig
  mentalTriggerSettings Json?  // MentalTriggerSettings object
  sectionBadgeVisibility Json? // SectionBadgeConfig object
  mapSettings           Json?  // MapSettings object
  biddingSettings       Json?  // BiddingSettings object
  searchPaginationType  String? @default("loadMore") // 'loadMore' or 'numberedPages'
  searchItemsPerPage    Int?    @default(12)
  searchLoadMoreCount   Int?    @default(12)
  defaultListItemsPerPage Int? @default(10)
  showCountdownOnLotDetail  Boolean? @default(true)
  showCountdownOnCards      Boolean? @default(true)
  showRelatedLotsOnLotDetail Boolean? @default(true)
  relatedLotsCount          Int?     @default(5)
  variableIncrementTable    Json?    // Array of VariableIncrementRule
  updatedAt                 DateTime @updatedAt
}


// ===================================================
// ENUMS
// ===================================================

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO_PARA_LANCES
  ABERTO // Legacy or alias for ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  SOLD
  EXPIRED
  PENDING_APPROVAL
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum UserAccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH // Holandês Reverso
  SILENT // Lance Fechado
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum LivestockSex {
  Macho
  Femea
}
