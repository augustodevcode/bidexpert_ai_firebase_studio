// prisma/schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ==============================================================================
// === ENUMS
// ==============================================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

// ==============================================================================
// === MODELS (ORDERED BY DEPENDENCY)
// ==============================================================================

model User {
  id                  String                   @id @default(uuid())
  email               String                   @unique
  fullName            String?
  password            String
  roleId              String?
  sellerId            String?                  @unique
  habilitationStatus  UserHabilitationStatus?  @default(PENDING_DOCUMENTS)
  accountType         AccountType?             @default(PHYSICAL)
  badges              Json? // Can store an array of strings like ['FIRST_WIN']
  cpf                 String?
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  optInMarketing      Boolean                  @default(false)
  avatarUrl           String?
  dataAiHint          String?
  razaoSocial         String?
  cnpj                String?                  @unique
  inscricaoEstadual   String?
  website             String?
  activeBids          Int?
  auctionsWon         Int?
  itemsSold           Int?
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt

  // Relationships
  role                Role?                    @relation(fields: [roleId], references: [id], onDelete: SetNull)
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  reviews             Review[]
  questions           LotQuestion[]            @relation("QuestionAskedBy")
  answeredQuestions   LotQuestion[]            @relation("QuestionAnsweredBy")
  maxBids             UserLotMaxBid[]
  notifications       Notification[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  blogPosts           BlogPost[]
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Role {
  id              String       @id @default(uuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  permissions     Permission[]
  users           User[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model LotCategory {
  id                 String              @id @default(uuid())
  name               String              @unique
  slug               String              @unique
  description        String?             @db.Text
  logoUrl            String?
  coverImageUrl      String?
  megaMenuImageUrl   String?
  logoMediaId        String?             @unique
  coverImageMediaId  String?             @unique
  megaMenuImageMediaId String?           @unique
  itemCount          Int                 @default(0)
  hasSubcategories   Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  
  // Relationships
  auctions           Auction[]
  lots               Lot[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
  subcategories      Subcategory[]
  logo               MediaItem?          @relation("CategoryLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  coverImage         MediaItem?          @relation("CategoryCover", fields: [coverImageMediaId], references: [id], onDelete: SetNull)
  megaMenuImage      MediaItem?          @relation("CategoryMegaMenu", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull)
}

model Subcategory {
  id                 String       @id @default(uuid())
  name               String
  slug               String       @unique
  description        String?
  parentCategoryId   String
  itemCount          Int          @default(0)
  displayOrder       Int          @default(0)
  iconUrl            String?
  iconMediaId        String?      @unique
  dataAiHintIcon     String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  // Relationships
  parentCategory     LotCategory  @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots               Lot[]
  bens               Bem[]
  icon               MediaItem?   @relation("SubcategoryIcon", fields: [iconMediaId], references: [id], onDelete: SetNull)
}

model StateInfo {
  id          String             @id @default(uuid())
  name        String             @unique
  uf          String             @unique
  slug        String             @unique
  cityCount   Int                @default(0)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relationships
  cities      CityInfo[]
  lots        Lot[]
  courts      Court[]
  districts   JudicialDistrict[]
}

model CityInfo {
  id        String    @id @default(uuid())
  name      String
  slug      String    @unique
  stateId   String
  stateUf   String
  ibgeCode  String?
  lotCount  Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relationships
  state     StateInfo @relation(fields: [stateId], references: [id])
  lots      Lot[]
}

model MediaItem {
  id                       String       @id @default(uuid())
  fileName                 String
  storagePath              String       @unique
  title                    String?
  altText                  String?
  caption                  String?
  description              String?      @db.Text
  mimeType                 String
  sizeBytes                Int
  dimensions               Json?
  urlOriginal              String       @db.Text
  urlThumbnail             String?      @db.Text
  urlMedium                String?      @db.Text
  urlLarge                 String?      @db.Text
  uploadedBy               String?
  dataAiHint               String?
  uploadedAt               DateTime     @default(now())
  
  // Relationships
  auctionAsImage           Auction?           @relation("AuctionImage")
  lotAsImage               Lot?               @relation("LotImage")
  bemAsImage               Bem?               @relation("BemImage")
  categoryAsLogo           LotCategory?       @relation("CategoryLogo")
  categoryAsCover          LotCategory?       @relation("CategoryCover")
  categoryAsMegaMenu       LotCategory?       @relation("CategoryMegaMenu")
  subcategoryAsIcon        Subcategory?       @relation("SubcategoryIcon")
  directSaleOfferAsImage   DirectSaleOffer?   @relation("DirectSaleOfferImage")
  sellerAsLogo             Seller?            @relation("SellerLogo")
  auctioneerAsLogo         Auctioneer?        @relation("AuctioneerLogo")
  
  lots                     Lot[]              // For many-to-many galleries
}

model Auctioneer {
  id                       String    @id @default(uuid())
  publicId                 String    @unique
  name                     String    @unique
  slug                     String    @unique
  registrationNumber       String?
  contactName              String?
  email                    String?
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  logoUrl                  String?
  dataAiHintLogo           String?
  description              String?   @db.Text
  memberSince              DateTime?
  rating                   Float?
  auctionsConductedCount   Int?
  totalValueSold           Float?
  userId                   String?   @unique
  logoMediaId              String?   @unique
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  // Relationships
  auctions                 Auction[]
  user                     User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  logo                     MediaItem? @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
}

model Seller {
  id                         String            @id @default(uuid())
  publicId                   String            @unique
  name                       String            @unique
  slug                       String            @unique
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  logoUrl                    String?
  dataAiHintLogo             String?
  description                String?           @db.Text
  memberSince                DateTime?
  rating                     Float?
  activeLotsCount            Int?
  totalSalesValue            Float?
  auctionsFacilitatedCount   Int?
  userId                     String?           @unique
  logoMediaId                String?           @unique
  isJudicial                 Boolean           @default(false)
  judicialBranchId           String?           @unique // A branch is represented by ONE seller
  createdAt                  DateTime          @default(now())
  updatedAt                  DateTime          @updatedAt

  // Relationships
  user                       User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  logo                       MediaItem?        @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  auctions                   Auction[]
  directSaleOffers           DirectSaleOffer[]
  judicialProcesses          JudicialProcess[]
  judicialBranch             JudicialBranch?   @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
}

model Court {
  id                  String             @id @default(uuid())
  name                String             @unique
  slug                String             @unique
  stateUf             String
  website             String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  // Relationships
  districts           JudicialDistrict[]
  processes           JudicialProcess[]
  state               StateInfo          @relation(fields: [stateUf], references: [uf])
}

model JudicialDistrict {
  id          String             @id @default(uuid())
  name        String
  slug        String             @unique
  courtId     String
  stateId     String
  zipCode     String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relationships
  court       Court              @relation(fields: [courtId], references: [id])
  state       StateInfo          @relation(fields: [stateId], references: [id])
  branches    JudicialBranch[]
  processes   JudicialProcess[]
}

model JudicialBranch {
  id           String             @id @default(uuid())
  name         String
  slug         String             @unique
  districtId   String
  contactName  String?
  phone        String?
  email        String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  // Relationships
  district     JudicialDistrict   @relation(fields: [districtId], references: [id])
  processes    JudicialProcess[]
  seller       Seller?
}

model JudicialProcess {
  id              String           @id @default(uuid())
  publicId        String           @unique
  processNumber   String           @unique
  isElectronic    Boolean          @default(true)
  courtId         String
  districtId      String
  branchId        String
  sellerId        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relationships
  court          Court            @relation(fields: [courtId], references: [id])
  district       JudicialDistrict @relation(fields: [districtId], references: [id])
  branch         JudicialBranch   @relation(fields: [branchId], references: [id])
  seller         Seller?          @relation(fields: [sellerId], references: [id])
  parties        ProcessParty[]
  bens           Bem[]
  auction        Auction?
}

model ProcessParty {
  id             String           @id @default(uuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType

  // Relationships
  process        JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@unique([processId, name, partyType])
}

model DocumentType {
    id              String @id @default(uuid())
    name            String @unique
    description     String?
    isRequired      Boolean
    appliesTo       String? // e.g., "PHYSICAL,LEGAL"
    allowedFormats  String? // e.g., "pdf,jpg"
    displayOrder    Int @default(0)
    userDocuments   UserDocument[]
}

model UserDocument {
    id              String @id @default(uuid())
    userId          String
    documentTypeId  String
    fileUrl         String? @db.Text
    fileName        String?
    status          UserDocumentStatus @default(NOT_SENT)
    uploadDate      DateTime?
    analysisDate    DateTime?
    analystId       String?
    rejectionReason String?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    // Relationships
    user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
    documentType    DocumentType @relation(fields: [documentTypeId], references: [id])

    @@unique([userId, documentTypeId])
}

model BlogPost {
  id            String @id @default(uuid())
  title         String
  slug          String @unique
  content       String @db.Text
  authorId      String
  publishedAt   DateTime?
  isPublished   Boolean @default(false)
  tags          Tag[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  author        User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Tag {
    id          String @id @default(uuid())
    name        String @unique
    blogPosts   BlogPost[]
}

model DirectSaleOffer {
  id                       String                @id @default(uuid())
  publicId                 String                @unique
  title                    String
  description              String                @db.Text
  offerType                DirectSaleOfferType
  status                   DirectSaleOfferStatus
  price                    Float?
  minimumOfferPrice        Float?
  categoryId               String
  sellerId                 String
  locationCity             String?
  locationState            String?
  imageUrl                 String?
  imageMediaId             String?               @unique
  dataAiHint               String?
  galleryImageUrls         Json?
  itemsIncluded            Json?
  tags                     Json?
  views                    Int                   @default(0)
  proposalsCount           Int                   @default(0)
  expiresAt                DateTime?
  latitude                 Float?
  longitude                Float?
  mapAddress               String?
  mapEmbedUrl              String?               @db.Text
  mapStaticImageUrl        String?               @db.Text
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt

  // Relationships
  category                 LotCategory           @relation(fields: [categoryId], references: [id])
  seller                   Seller                @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  image                    MediaItem?            @relation("DirectSaleOfferImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
}

model Notification {
  id          String   @id @default(uuid())
  userId      String
  message     String
  link        String?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relationships
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id              String   @id @default(uuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())

  // Relationships
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                        String   @id @default(uuid())
  lotId                     String
  auctionId                 String
  userId                    String
  userDisplayName           String
  questionText              String   @db.Text
  answerText                String?  @db.Text
  answeredAt                DateTime?
  answeredByUserId          String?
  answeredByUserDisplayName String?
  isPublic                  Boolean  @default(true)
  createdAt                 DateTime @default(now())

  // Relationships
  user                      User     @relation("QuestionAskedBy", fields: [userId], references: [id], onDelete: Cascade)
  answeredBy                User?    @relation("QuestionAnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)
  lot                       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model PlatformSettings {
  id                          String                @id @default("global")
  siteTitle                   String?
  siteTagline                 String?
  galleryImageBasePath        String?
  storageProvider             String?               @default("local") // local or firebase
  firebaseStorageBucket       String?
  activeThemeName             String?
  themes                      Json? // Array of Theme objects
  platformPublicIdMasks       Json? // Object with masks for entities
  homepageSections            Json? // Array of HomepageSectionConfig objects
  mentalTriggerSettings       Json? // MentalTriggerSettings object
  sectionBadgeVisibility      Json? // SectionBadgeConfig object
  mapSettings                 Json? // MapSettings object
  biddingSettings             Json? // BiddingSettings object
  searchPaginationType        String?               @default("loadMore") // 'loadMore' | 'numberedPages'
  searchItemsPerPage          Int?                  @default(12)
  searchLoadMoreCount         Int?                  @default(12)
  showCountdownOnLotDetail    Boolean?              @default(true)
  showCountdownOnCards        Boolean?              @default(true)
  showRelatedLotsOnLotDetail  Boolean?              @default(true)
  relatedLotsCount            Int?                  @default(5)
  defaultUrgencyTimerHours    Int?
  variableIncrementTable      Json? // Array of VariableIncrementRule objects
  defaultListItemsPerPage     Int?                  @default(10)
  updatedAt                   DateTime              @updatedAt
}
