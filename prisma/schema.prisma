// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ==============================================================================
// 1. Core User & Authentication Models
// ==============================================================================
model User {
  id                  String                 @id @default(cuid())
  email               String                 @unique
  fullName            String?
  password            String
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType            @default(PHYSICAL)
  badges              String? // Storing as a comma-separated string
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt

  // Personal Info (PF)
  cpf               String?
  rgNumber          String?
  rgIssuer          String?
  rgIssueDate       DateTime?
  rgState           String?
  dateOfBirth       DateTime?
  gender            String?
  profession        String?
  nationality     String?
  maritalStatus     String?
  propertyRegime    String?
  spouseName        String?
  spouseCpf         String?

  // Company Info (PJ)
  razaoSocial       String?
  cnpj              String?
  inscricaoEstadual String?
  website           String?

  // Contact & Address
  cellPhone    String?
  homePhone    String?
  zipCode      String?
  street       String?
  number       String?
  complement   String?
  neighborhood String?
  city         String?
  state        String?
  optInMarketing    Boolean       @default(false)

  // Relationships
  roleId              String?
  role                Role?                  @relation(fields: [roleId], references: [id], onDelete: SetNull)
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  notifications       Notification[]
  mediaItems          MediaItem[]            @relation("UploadedBy")
  reviews             Review[]
  questions           LotQuestion[]
  maxBids             UserLotMaxBid[]
  answeredQuestions   LotQuestion[]          @relation("AnsweredBy")
}

model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  permissions     Permission[]
  users           User[]
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  roles       Role[]
}


// ==============================================================================
// 2. User Document & Habilitation Models
// ==============================================================================
model UserDocument {
  id              String             @id @default(cuid())
  userId          String
  documentTypeId  String
  fileUrl         String
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  uploadDate      DateTime           @default(now())
  analysisDate    DateTime?
  analystId       String?
  rejectionReason String?            @db.Text

  // Relationships
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType DocumentType @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id             String         @id @default(cuid())
  name           String         @unique
  description    String?        @db.Text
  isRequired     Boolean        @default(true)
  appliesTo      String?        // e.g., "PHYSICAL,LEGAL"
  allowedFormats String?        // e.g., "pdf,jpg,png"
  displayOrder   Int            @default(0)
  userDocuments  UserDocument[]
}

// ==============================================================================
// 3. Core Auction & Lot Models
// ==============================================================================
model Auction {
  id          String    @id @default(cuid())
  publicId    String    @unique @default(cuid())
  title       String    @db.VarChar(255)
  fullTitle   String?   @db.Text
  description String?   @db.Text
  status      AuctionStatus
  auctionType AuctionType?

  auctionDate         DateTime
  endDate             DateTime?
  auctionStages       Json? // e.g., [{ name: "1ª Praça", endDate: "...", initialPrice: 10000 }, { ... }]
  
  city    String?
  state   String?
  
  imageUrl         String?   @db.Text
  imageMediaId     String?
  dataAiHint       String?
  documentsUrl     String?   @db.Text
  evaluationReportUrl  String? @db.Text
  auctionCertificateUrl String? @db.Text
  
  sellingBranch      String?
  vehicleLocation    String?
  visits             Int       @default(0)
  initialOffer       Float?
  bidsCount          Int       @default(0)
  
  // Settings & Triggers
  automaticBiddingEnabled    Boolean?  @default(false)
  silentBiddingEnabled       Boolean?  @default(false)
  allowMultipleBidsPerUser   Boolean?  @default(true)
  allowInstallmentBids       Boolean?  @default(false)
  softCloseEnabled           Boolean?  @default(false)
  softCloseMinutes           Int?      @default(2)
  isFeaturedOnMarketplace    Boolean?  @default(false)
  marketplaceAnnouncementTitle   String?
  additionalTriggers             String?

  // Financial
  estimatedRevenue Float?
  achievedRevenue  Float? @default(0)
  
  // User Engagement
  totalHabilitatedUsers Int? @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  categoryId        String
  auctioneerId      String
  sellerId          String?
  judicialProcessId String?           @unique
  
  category    LotCategory       @relation(fields: [categoryId], references: [id])
  auctioneer  Auctioneer        @relation(fields: [auctioneerId], references: [id])
  seller      Seller?           @relation(fields: [sellerId], references: [id])
  judicialProcess   JudicialProcess?  @relation(fields: [judicialProcessId], references: [id])
  image       MediaItem?        @relation("AuctionImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  lots        Lot[]
  bids        Bid[]
}


model Lot {
  id          String    @id @default(cuid())
  publicId    String    @unique @default(cuid())
  title       String    @db.VarChar(255)
  number      String?
  description String?   @db.Text
  
  // Pricing
  price             Float     @default(0) // Current bid price
  initialPrice      Float?    // Starting bid for the first stage
  secondInitialPrice Float?   // Starting bid for the second stage
  bidIncrementStep  Float?
  reservePrice      Float?
  evaluationValue   Float?
  debtAmount        Float?
  itbiValue         Float?
  
  // Status & Dates (derived from Auction)
  status      LotStatus
  endDate     DateTime?
  auctionDate DateTime? // Denormalized from auction for performance
  lotSpecificAuctionDate DateTime?
  secondAuctionDate      DateTime?
  
  // Location
  cityName        String?
  stateUf         String?
  latitude        Float?
  longitude       Float?
  mapAddress      String?   @db.Text
  mapEmbedUrl     String?   @db.Text
  mapStaticImageUrl String? @db.Text
  
  // Media
  imageUrl         String?    @db.Text
  imageMediaId     String?
  galleryImageUrls Json?      // Array of strings
  mediaItemIds     Json?      // Array of strings
  dataAiHint       String?
  
  // Metadata & Stats
  condition   String?
  views       Int        @default(0)
  bidsCount   Int        @default(0)
  isFeatured  Boolean    @default(false)
  isExclusive Boolean    @default(false)
  discountPercentage Float?
  additionalTriggers   String?

  // Relationships
  auctionId       String
  categoryId      String
  subcategoryId   String?
  stateId         String?
  cityId          String?
  sellerId        String?
  auctioneerId    String?
  bemIds          Json? // Array of Bem IDs

  auction     Auction     @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category    LotCategory @relation(fields: [categoryId], references: [id])
  subcategory Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  state       StateInfo?   @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city        CityInfo?    @relation(fields: [cityId], references: [id], onDelete: SetNull)
  image       MediaItem?   @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  bids        Bid[]
  wins        UserWin[]
  reviews     Review[]
  questions   LotQuestion[]
  maxBids     UserLotMaxBid[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bid {
  id          String   @id @default(cuid())
  lotId       String
  auctionId   String
  bidderId    String
  bidderDisplay String
  amount      Float
  timestamp   DateTime @default(now())

  // Relationships
  lot     Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String        @id @default(cuid())
  userId           String
  lotId            String        @unique
  winningBidAmount Float
  winDate          DateTime      @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model UserLotMaxBid {
    id        String @id @default(cuid())
    userId    String
    lotId     String
    maxAmount Float
    isActive  Boolean @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)

    @@unique([userId, lotId])
}


// ==============================================================================
// 4. Seller & Auctioneer Profiles
// ==============================================================================
model Seller {
  id          String  @id @default(cuid())
  publicId    String  @unique @default(cuid())
  name        String  @unique
  slug        String  @unique
  contactName String?
  email       String?
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  website     String?
  logoUrl     String? @db.Text
  logoMediaId String? @unique
  dataAiHintLogo String?
  description String? @db.Text
  isJudicial  Boolean @default(false)
  
  // Denormalized/Calculated fields
  memberSince             DateTime?
  rating                  Float?
  activeLotsCount         Int?      @default(0)
  totalSalesValue         Float?    @default(0)
  auctionsFacilitatedCount Int?     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId           String?          @unique
  judicialBranchId String?          @unique
  
  user                       User?              @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  logo                       MediaItem?         @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  judicialBranch             JudicialBranch?    @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  auctions                   Auction[]
  bens                       Bem[]
  judicialProcesses          JudicialProcess[]
  directSaleOffers           DirectSaleOffer[]
}

model Auctioneer {
  id          String  @id @default(cuid())
  publicId    String  @unique @default(cuid())
  name        String  @unique
  slug        String  @unique
  registrationNumber String?
  contactName String?
  email       String?
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  website     String?
  logoUrl     String? @db.Text
  logoMediaId String? @unique
  dataAiHintLogo String?
  description String? @db.Text

  // Denormalized/Calculated fields
  memberSince          DateTime?
  rating               Float?
  auctionsConductedCount Int?      @default(0)
  totalValueSold       Float?    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId   String?    @unique
  
  user     User?      @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  logo     MediaItem? @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  auctions Auction[]
}


// ==============================================================================
// 5. Category & Geo Models
// ==============================================================================
model LotCategory {
  id               String        @id @default(cuid())
  name             String        @unique
  slug             String        @unique
  description      String?       @db.Text
  itemCount        Int?          @default(0)
  hasSubcategories Boolean?      @default(false)
  
  // Image fields
  logoUrl            String?
  coverImageUrl      String?
  megaMenuImageUrl   String?
  dataAiHintLogo     String?
  dataAiHintCover    String?
  dataAiHintMegaMenu String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  auctions          Auction[]
  lots              Lot[]
  subcategories     Subcategory[]
  bens              Bem[]
  directSaleOffers  DirectSaleOffer[]
}

model Subcategory {
  id                 String       @id @default(cuid())
  name               String
  slug               String       @unique
  parentCategoryId   String
  description        String?      @db.Text
  itemCount          Int?         @default(0)
  displayOrder       Int?         @default(0)
  
  // Icon
  iconUrl            String?
  iconMediaId        String?      @unique
  dataAiHintIcon     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  parentCategory LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots           Lot[]
  bens           Bem[]
  icon           MediaItem?  @relation("SubcategoryIcon", fields: [iconMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@unique([name, parentCategoryId])
}

model StateInfo {
  id        String   @id @default(cuid())
  name      String   @unique
  uf        String   @unique @db.VarChar(2)
  slug      String   @unique
  cityCount Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  lots      Lot[]
  cities    CityInfo[]
  courts    Court[]
  districts JudicialDistrict[]
}

model CityInfo {
  id        String   @id @default(cuid())
  name      String
  slug      String
  stateId   String
  stateUf   String   @db.VarChar(2)
  ibgeCode  String?
  lotCount  Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  state StateInfo @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots  Lot[]
}


// ==============================================================================
// 6. Judicial Entity Models
// ==============================================================================
model Court {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  stateUf     String   @db.VarChar(2)
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  state       StateInfo          @relation(fields: [stateUf], references: [uf])
  districts   JudicialDistrict[]
  processes   JudicialProcess[]
}

model JudicialDistrict {
  id        String   @id @default(cuid())
  name      String
  slug      String
  courtId   String
  stateId   String
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  court     Court            @relation(fields: [courtId], references: [id])
  state     StateInfo        @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]
}

model JudicialBranch {
  id          String   @id @default(cuid())
  name        String
  slug        String
  districtId  String
  contactName String?
  phone       String?
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  district  JudicialDistrict  @relation(fields: [districtId], references: [id], onDelete: Cascade)
  processes JudicialProcess[]
  seller    Seller?
}

model JudicialProcess {
  id              String  @id @default(cuid())
  publicId        String  @unique @default(cuid())
  processNumber   String  @unique
  isElectronic    Boolean @default(true)
  
  courtId     String
  districtId  String
  branchId    String
  sellerId    String? @unique
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  court           Court            @relation(fields: [courtId], references: [id])
  district        JudicialDistrict @relation(fields: [districtId], references: [id])
  branch          JudicialBranch   @relation(fields: [branchId], references: [id])
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  parties         ProcessParty[]
  bens            Bem[]
  auction         Auction?
}

model ProcessParty {
  id            String          @id @default(cuid())
  processId     String
  name          String
  documentNumber String?
  partyType     ProcessPartyType
  
  // Relationships
  process JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@unique([processId, name, partyType])
}

model Bem {
  id              String   @id @default(cuid())
  publicId        String   @unique @default(cuid())
  title           String
  description     String?  @db.Text
  status          BemStatus @default(DISPONIVEL)
  
  // Identifiers
  categoryId        String
  subcategoryId     String?
  judicialProcessId String?
  sellerId          String?

  // Values
  evaluationValue Float?
  
  // Media
  imageUrl         String?   @db.Text
  imageMediaId     String?   @unique
  galleryImageUrls Json?
  mediaItemIds     Json?
  dataAiHint       String?
  
  // Location
  locationCity  String?
  locationState String?
  address       String?
  latitude      Float?
  longitude     Float?
  
  // --- Vehicle Specific Fields ---
  plate                String?
  make                 String?
  model                String?
  version              String?
  year                 Int?
  modelYear            Int?
  mileage              Int?
  color                String?
  fuelType             String?
  transmissionType     String?
  bodyType             String?
  vin                  String? @unique
  renavam              String? @unique
  enginePower          String?
  numberOfDoors        Int?
  vehicleOptions       String?
  detranStatus         String?
  debts                String? @db.Text
  runningCondition     String?
  bodyCondition        String?
  tiresCondition       String?
  hasKey               Boolean?

  // --- Real Estate Specific Fields ---
  propertyRegistrationNumber String? @unique
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String? @db.Text
  infrastructure             String? @db.Text
  condoDetails               String? @db.Text
  improvements               String? @db.Text
  topography                 String?
  liensAndEncumbrances       String? @db.Text
  propertyDebts              String? @db.Text
  unregisteredRecords        String? @db.Text
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  amenities                  Json?
  
  // --- Electronics Specific Fields ---
  brand                  String?
  serialNumber           String?
  itemCondition          String?
  specifications         String? @db.Text
  includedAccessories    String? @db.Text
  batteryCondition       String?
  hasInvoice             Boolean?
  hasWarranty            Boolean?
  repairHistory          String? @db.Text

  // --- Appliance Specific Fields ---
  applianceCapacity    String?
  voltage              String?
  applianceType          String?
  additionalFunctions    String?

  // --- Machinery Specific Fields ---
  hoursUsed          Int?
  engineType         String?
  capacityOrPower    String?
  maintenanceHistory String? @db.Text
  installationLocation String?
  compliesWithNR     String?
  operatingLicenses  String?
  
  // --- Livestock Specific Fields ---
  breed                  String?
  age                    String?
  sex                    Sex?
  weight                 String?
  individualId           String?
  purpose                String?
  sanitaryCondition      String?
  lineage                String?
  isPregnant             Boolean?
  specialSkills          String?
  gtaDocument            String?
  breedRegistryDocument  String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  category        LotCategory      @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller          Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  image           MediaItem?       @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  lotId           String?
  lot             Lot?             @relation(fields: [lotId], references: [id])
}

// ==============================================================================
// 7. Platform Content & Settings
// ==============================================================================
model PlatformSettings {
  id String @id @default("global")

  // Site Identity
  siteTitle                String?
  siteTagline              String?
  logoUrl                  String?
  faviconUrl               String?

  // Media & Storage
  galleryImageBasePath        String?
  storageProvider             StorageProviderType?  @default(local)
  firebaseStorageBucket       String?

  // Appearance
  activeThemeName          String?
  themes                   Json?
  showCountdownOnLotDetail Boolean?
  showCountdownOnCards     Boolean?

  // Display & Search
  homepageSections         Json?
  platformPublicIdMasks    Json?
  searchPaginationType     SearchPaginationType? @default(loadMore)
  searchItemsPerPage       Int?
  searchLoadMoreCount      Int?
  defaultListItemsPerPage  Int?

  // Bidding & Automation
  biddingSettings        Json?
  mentalTriggerSettings  Json?
  sectionBadgeVisibility Json?
  variableIncrementTable Json?
  autoRelistSettings     Json?
  
  // Integrations
  mapSettings               Json?
  
  updatedAt DateTime @updatedAt
}

model Notification {
  id         String   @id @default(cuid())
  userId     String
  message    String   @db.Text
  isRead     Boolean  @default(false)
  link       String?
  createdAt  DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model BlogPost {
  id           String   @id @default(cuid())
  title        String
  slug         String   @unique
  content      String   @db.Text
  authorId     String
  authorName   String
  published    Boolean  @default(false)
  publishedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tags         String?  // Comma-separated string
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String   @db.Text
  createdAt       DateTime @default(now())
  isApproved      Boolean  @default(true)

  // Relationships
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                        String   @id @default(cuid())
  lotId                     String
  auctionId                 String
  userId                    String
  userDisplayName           String
  questionText              String   @db.Text
  answerText                String?  @db.Text
  isPublic                  Boolean  @default(true)
  createdAt                 DateTime @default(now())
  answeredAt                DateTime?
  answeredByUserId          String?
  answeredByUserDisplayName String?

  // Relationships
  lot        Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user       User @relation("Questions", fields: [userId], references: [id], onDelete: Cascade)
  answeredBy User? @relation("AnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
}


// ==============================================================================
// 8. Media & File Management
// ==============================================================================
model MediaItem {
  id             String        @id @default(cuid())
  fileName       String
  storagePath    String        @unique // Path in the storage provider
  urlOriginal    String        @db.Text
  urlThumbnail   String?       @db.Text
  urlMedium      String?       @db.Text
  urlLarge       String?       @db.Text
  
  title          String?
  altText        String?
  caption        String?
  description    String?       @db.Text
  
  mimeType       String
  sizeBytes      Int
  dimensions     Json?         // { width: number, height: number }
  
  uploadedBy     String?       // User ID
  uploadedAt     DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  // Relationships
  uploader             User?                @relation("UploadedBy", fields: [uploadedBy], references: [id], onDelete: SetNull)
  auctionImage         Auction?             @relation("AuctionImage")
  lotImage             Lot?                 @relation("LotImage")
  bemImage             Bem?                 @relation("BemImage")
  sellerLogo           Seller?              @relation("SellerLogo")
  auctioneerLogo       Auctioneer?          @relation("AuctioneerLogo")
  subcategoryAsIcon    Subcategory?         @relation("SubcategoryIcon")
  directSaleOfferImage DirectSaleOffer?     @relation("DirectSaleOfferImage")
}

// ==============================================================================
// 9. Direct Sale Models
// ==============================================================================
model DirectSaleOffer {
  id String @id @default(cuid())
  publicId String @unique @default(cuid())
  title String
  description String @db.Text
  offerType DirectSaleOfferType
  status    DirectSaleOfferStatus @default(PENDING_APPROVAL)
  
  price              Float?
  minimumOfferPrice  Float?
  
  locationCity  String?
  locationState String?

  imageUrl       String? @db.Text
  imageMediaId   String? @unique
  dataAiHint     String?

  galleryImageUrls  Json? 
  mediaItemIds      Json?
  
  itemsIncluded String? // Comma-separated
  tags          String? // Comma-separated

  views         Int @default(0)
  proposalsCount Int @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?
  
  // Relationships
  categoryId String
  sellerId   String

  category                 LotCategory           @relation(fields: [categoryId], references: [id])
  image                    MediaItem?            @relation("DirectSaleOfferImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  seller                   Seller                @relation(fields: [sellerId], references: [id])
}

model DocumentTemplate {
  id        String              @id @default(cuid())
  name      String              @unique
  type      DocumentTemplateType
  content   String              @db.Text
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

// ==============================================================================
// Enums
// ==============================================================================
enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum UserBidStatus {
  GANHANDO
  PERDENDO
  SUPERADO_POR_OUTRO
  SUPERADO_PELO_PROPRIO_MAXIMO
  ARREMATADO
  NAO_ARREMATADO
  ENCERRADO
  CANCELADO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum StorageProviderType {
  local
  firebase
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum SearchPaginationType {
  loadMore
  numberedPages
}

enum Sex {
  Macho
  Femea
}

```
- src/app/admin/wizard/wizard-context.tsx:
```tsx

'use client';

import { createContext, useContext, useState, ReactNode } from 'react';
import type { Auction, Bem, JudicialProcess, Lot } from '@/types';

type AuctionType = 'JUDICIAL' | 'EXTRAJUDICIAL' | 'PARTICULAR' | 'TOMADA_DE_PRECOS';

export interface WizardData {
  auctionType?: AuctionType;
  judicialProcess?: JudicialProcess;
  auctionDetails?: Partial<Auction>;
  selectedBens?: Bem[];
  createdLots?: Partial<Lot>[];
}

interface WizardContextType {
  currentStep: number;
  wizardData: WizardData;
  setWizardData: React.Dispatch<React.SetStateAction<WizardData>>;
  nextStep: () => void;
  prevStep: () => void;
  goToStep: (step: number) => void;
  resetWizard: () => void;
}

const WizardContext = createContext<WizardContextType | undefined>(undefined);

export function WizardProvider({ children }: { children: ReactNode }) {
  const [currentStep, setCurrentStep] = useState(0);
  const [wizardData, setWizardData] = useState<WizardData>({ createdLots: [] });

  const nextStep = () => setCurrentStep(prev => prev + 1);
  const prevStep = () => setCurrentStep(prev => (prev > 0 ? prev - 1 : 0));
  const goToStep = (step: number) => setCurrentStep(step);
  const resetWizard = () => {
    setCurrentStep(0);
    setWizardData({ createdLots: [] });
  };

  return (
    <WizardContext.Provider value={{ currentStep, wizardData, setWizardData, nextStep, prevStep, goToStep, resetWizard }}>
      {children}
    </WizardContext.Provider>
  );
}

export function useWizard() {
  const context = useContext(WizardContext);
  if (context === undefined) {
    throw new Error('useWizard must be used within a WizardProvider');
  }
  return context;
}
```
- src/app/admin/wizard/actions.ts:
```tsx

'use server';

import { getCourts } from '../courts/actions';
import { getJudicialDistricts } from '../judicial-districts/actions';
import { getJudicialBranches } from '../judicial-branches/actions';
import { getJudicialProcesses } from '../judicial-processes/actions';
import { getAuctioneers } from '../auctioneers/actions';
import { getSellers } from '../sellers/actions';
import { getBens } from '../bens/actions';
import { getLotCategories } from '../categories/actions';
import type { WizardData } from '@/components/admin/wizard/wizard-context';
import { revalidatePath } from 'next/cache';
import { prisma } from '@/lib/prisma';
import { v4 as uuidv4 } from 'uuid';

/**
 * @fileoverview Server Actions para o assistente de criação de leilões (Wizard).
 * Agrega dados de diversas fontes e cria o leilão e seus lotes de forma transacional.
 */


/**
 * Busca todos os dados iniciais necessários para popular os seletores e opções do wizard.
 * Isso inclui dados sobre entidades judiciais, leiloeiros, comitentes, bens e categorias.
 * @returns {Promise<{success: boolean, data?: object, message?: string}>} Um objeto com os dados ou uma mensagem de erro.
 */
export async function getWizardInitialData() {
  try {
    const [
      courts,
      districts,
      branches,
      judicialProcesses,
      auctioneers,
      sellers,
      availableBens,
      categories
    ] = await Promise.all([
      getCourts(),
      getJudicialDistricts(),
      getJudicialBranches(),
      getJudicialProcesses(),
      getAuctioneers(),
      getSellers(),
      getBens(),
      getLotCategories(),
    ]);

    return {
      success: true,
      data: {
        courts,
        districts,
        branches,
        judicialProcesses,
        auctioneers,
        sellers,
        availableBens,
        categories,
      },
    };
  } catch (error: any) {
    console.error("Error fetching wizard initial data:", error);
    return { success: false, message: error.message };
  }
}

/**
 * Cria um novo leilão e seus lotes associados a partir dos dados coletados no wizard.
 * Utiliza uma transação Prisma para garantir a atomicidade da operação (ou tudo é criado, ou nada é).
 * @param {WizardData} wizardData - O objeto de estado contendo todos os dados do assistente.
 * @returns {Promise<{success: boolean, message: string, auctionId?: string}>} O resultado da operação.
 */
export async function createAuctionFromWizard(wizardData: WizardData): Promise<{success: boolean; message: string; auctionId?: string;}> {
  if (!wizardData.auctionDetails || !wizardData.auctionDetails.title || !wizardData.auctionDetails.auctioneerId || !wizardData.auctionDetails.categoryId) {
    return { success: false, message: "Detalhes do leilão incompletos." };
  }

  try {
    const result = await prisma.$transaction(async (tx) => {
      // 1. Create the Auction
      const newAuction = await tx.auction.create({
        data: {
          publicId: `AUC-PUB-${uuidv4().substring(0, 8)}`,
          title: wizardData.auctionDetails!.title!,
          description: wizardData.auctionDetails?.description,
          status: 'RASCUNHO', // Or another default status
          auctionType: wizardData.auctionType,
          auctionDate: wizardData.auctionDetails!.auctionDate!,
          endDate: wizardData.auctionDetails?.endDate,
          auctionStages: wizardData.auctionDetails?.auctionStages || [],
          categoryId: wizardData.auctionDetails!.categoryId!,
          auctioneerId: wizardData.auctionDetails!.auctioneerId!,
          sellerId: wizardData.auctionDetails?.sellerId,
          judicialProcessId: wizardData.judicialProcess?.id,
        },
      });

      // 2. Create the Lots
      if (wizardData.createdLots && wizardData.createdLots.length > 0) {
        const lotsToCreate = wizardData.createdLots.map(lot => ({
          ...lot,
          id: undefined, // Let Prisma generate ID
          publicId: `LOT-PUB-${uuidv4().substring(0, 8)}`,
          auctionId: newAuction.id,
          status: 'EM_BREVE',
          createdAt: undefined,
          updatedAt: undefined,
          bens: undefined, // Don't try to nest create bens
        }));
        
        for (const lotData of lotsToCreate) {
          // Prisma doesn't support createMany with nested creates or specific data types like JSON
          // We must create them one by one if they have complex types.
          // Since our Lot model has JSON fields (bemIds, etc), we loop.
          await tx.lot.create({
            data: lotData as any, // Use 'as any' to bypass strict type check for the loop
          });
        }

        // 3. Update the status of the 'Bens'
        const allBemIds = wizardData.createdLots.flatMap(lot => lot?.bemIds || []);
        if (allBemIds.length > 0) {
          await tx.bem.updateMany({
            where: { id: { in: allBemIds as string[] } },
            data: { status: 'LOTEADO' },
          });
        }
      }
      
      // 4. Update auction lot count
      const lotCount = wizardData.createdLots?.length || 0;
      await tx.auction.update({
        where: { id: newAuction.id },
        data: { totalLots: lotCount }
      });

      return { success: true, message: 'Leilão e lotes criados com sucesso!', auctionId: newAuction.id };
    });
    
    revalidatePath('/admin/auctions');
    revalidatePath('/admin/lots');
    revalidatePath('/admin/bens');
    return result;

  } catch (error: any) {
      console.error("Error in createAuctionFromWizard action:", error);
      return { success: false, message: error.message };
  }
}
```