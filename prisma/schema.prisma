// prisma/schema.prisma

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

// ============================================================
//                       ENUMS
// ============================================================
enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum HabilitationStatus {
  PENDENTE_DOCUMENTOS
  PENDING_ANALYSIS
  REJECTED_DOCUMENTS
  HABILITADO
  BLOCKED
}

enum DocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RETIRADO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  PENDING_APPROVAL
  ACTIVE
  SOLD
  EXPIRED
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

// ============================================================
//                    CORE MODELS
// ============================================================

model Usuario {
  id                      String                @id @default(cuid())
  email                   String                @unique
  fullName                String?
  password                String
  accountType             AccountType?
  cpf                     String?               @unique
  dateOfBirth             DateTime?
  razaoSocial             String?
  cnpj                    String?               @unique
  inscricaoEstadual       String?
  website                 String?
  cellPhone               String?
  zipCode                 String?
  street                  String?
  number                  String?
  complement              String?
  neighborhood            String?
  city                    String?
  state                   String?
  optInMarketing          Boolean?              @default(false)
  avatarUrl               String?
  dataAiHint              String?
  habilitationStatus      HabilitationStatus?   @default(PENDENTE_DOCUMENTOS)
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  roleId                  String?
  sellerId                String?               @unique
  leiloeiroId             String?               @unique
  vendedor                Vendedor?
  leiloeiro               Leiloeiro?
  perfil                  Perfil?               @relation(fields: [roleId], references: [id])
  documentos              DocumentoUsuario[]
  lances                  Lance[]
  arremates               Arremate[]
  vendasDiretas           VendaDireta[]
  notificacoes            Notificacao[]
  perguntasLote           PerguntaLote[]
  respostasLote           PerguntaLote[]        @relation("RespostasLote")
  avaliacoes              Avaliacao[]
  lancesMaximos           LanceMaximoUsuario[]
  directSaleProposals     PropostaVendaDireta[]
  favoriteLots            Lote[]                @relation("LotesFavoritosUsuario")
  viewedLots              Lote[]                @relation("LotesVisualizadosUsuario")
  badges                  String[]              @default([])
  rgNumber                String?
  rgIssuer                String?
  rgIssueDate             DateTime?
  rgState                 String?
  homePhone               String?
  gender                  String?
  profession              String?
  nationality             String?
  maritalStatus           String?
  propertyRegime          String?
  spouseName              String?
  spouseCpf               String?
}

model Perfil {
  id              String      @id @default(cuid())
  name            String      @unique
  name_normalized String      @unique
  description     String?
  permissions     String[]
  usuarios        Usuario[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Leilao {
  id                             String                @id @default(cuid())
  publicId                       String?               @unique
  title                          String
  description                    String?
  status                         AuctionStatus         @default(RASCUNHO)
  auctionType                    String?
  auctionDate                    DateTime
  endDate                        DateTime?
  city                           String?
  state                          String?
  imageUrl                       String?
  imageMediaId                   String?
  dataAiHint                     String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  visits                         Int?                  @default(0)
  initialOffer                   Float?
  isFavorite                     Boolean?              @default(false)
  sellingBranch                  String?
  automaticBiddingEnabled        Boolean?              @default(false)
  silentBiddingEnabled           Boolean?              @default(false)
  allowMultipleBidsPerUser       Boolean?              @default(true)
  allowInstallmentBids           Boolean?              @default(false)
  softCloseEnabled               Boolean?              @default(false)
  softCloseMinutes               Int?
  estimatedRevenue               Float?
  achievedRevenue                Float?                @default(0)
  totalHabilitatedUsers          Int?                  @default(0)
  isFeaturedOnMarketplace        Boolean?              @default(false)
  marketplaceAnnouncementTitle   String?
  additionalTriggers             String?
  etapas                         Json[]                @default([])
  decrementAmount                Float?
  decrementIntervalSeconds       Int?
  floorPrice                     Float?
  autoRelistSettings             Json?
  createdAt                      DateTime              @default(now())
  updatedAt                      DateTime              @updatedAt
  categoriaId                    String
  leiloeiroId                    String
  vendedorId                     String?
  processoJudicialId             String?
  categoria                      CategoriaLote         @relation(fields: [categoriaId], references: [id])
  leiloeiro                      Leiloeiro             @relation(fields: [leiloeiroId], references: [id])
  vendedor                       Vendedor?             @relation(fields: [vendedorId], references: [id])
  processoJudicial               ProcessoJudicial?     @relation(fields: [processoJudicialId], references: [id])
  lotes                          Lote[]
  lances                         Lance[]
  arremates                      Arremate[]
}

model Lote {
  id                             String                @id @default(cuid())
  publicId                       String?               @unique
  title                          String
  number                         String?
  description                    String?
  price                          Float
  initialPrice                   Float?
  secondInitialPrice             Float?
  bidIncrementStep               Float?
  status                         LotStatus
  isFeatured                     Boolean?              @default(false)
  isExclusive                    Boolean?              @default(false)
  discountPercentage             Float?
  additionalTriggers             String[]              @default([])
  latitude                       Float?
  longitude                      Float?
  mapAddress                     String?
  mapEmbedUrl                    String?
  mapStaticImageUrl              String?
  judicialProcessNumber          String?
  courtDistrict                  String?
  courtName                      String?
  publicProcessUrl               String?
  propertyRegistrationNumber     String?
  propertyLiens                  String?
  knownDebts                     String?
  additionalDocumentsInfo        String?
  reservePrice                   Float?
  evaluationValue                Float?
  debtAmount                     Float?
  itbiValue                      Float?
  endDate                        DateTime?
  lotSpecificAuctionDate         DateTime?
  secondAuctionDate              DateTime?
  condition                      String?
  dataAiHint                     String?
  sellerId                       String?
  auctioneerId                   String?
  views                          Int                   @default(0)
  bidsCount                      Int                   @default(0)
  winningBidTermUrl              String?
  createdAt                      DateTime              @default(now())
  updatedAt                      DateTime              @updatedAt
  leilaoId                       String
  categoriaId                    String
  subcategoriaId                 String?
  estadoId                       String?
  cidadeId                       String?
  leilao                         Leilao                @relation(fields: [leilaoId], references: [id])
  categoria                      CategoriaLote         @relation(fields: [categoriaId], references: [id])
  subcategoria                   Subcategoria?         @relation(fields: [subcategoriaId], references: [id])
  lances                         Lance[]
  arremates                      Arremate[]
  perguntas                      PerguntaLote[]
  avaliacoes                     Avaliacao[]
  lancesMaximos                  LanceMaximoUsuario[]
  favoritadoPor                  Usuario[]             @relation("LotesFavoritosUsuario")
  visualizadoPor                 Usuario[]             @relation("LotesVisualizadosUsuario")
  estado                         Estado?               @relation(fields: [estadoId], references: [id])
  cidade                         Cidade?               @relation(fields: [cidadeId], references: [id])
  bens                           Bem[]                 @relation("BemParaLote")
  mediaItems                     MediaItem[]           @relation("LoteMediaItem")
}

model CategoriaLote {
  id                  String         @id @default(cuid())
  name                String         @unique
  slug                String         @unique
  description         String?
  logoUrl             String?
  coverImageUrl       String?
  megaMenuImageUrl    String?
  dataAiHintLogo      String?
  dataAiHintCover     String?
  dataAiHintMegaMenu  String?
  itemCount           Int            @default(0)
  hasSubcategories    Boolean        @default(false)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  subcategorias       Subcategoria[]
  lotes               Lote[]
  leiloes             Leilao[]
  bens                Bem[]
}

model Subcategoria {
  id                 String        @id @default(cuid())
  name               String
  slug               String        @unique
  description        String?
  displayOrder       Int           @default(0)
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  itemCount          Int           @default(0)
  parentCategoryId   String
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  categoriaPrincipal CategoriaLote @relation(fields: [parentCategoryId], references: [id])
  lotes              Lote[]
  bens               Bem[]

  @@unique([parentCategoryId, name])
}

model Leiloeiro {
  id                        String    @id @default(cuid())
  publicId                  String?   @unique
  name                      String
  slug                      String    @unique
  registrationNumber        String?
  contactName               String?
  email                     String?
  phone                     String?
  address                   String?
  city                      String?
  state                     String?
  zipCode                   String?
  website                   String?
  logoUrl                   String?
  logoMediaId               String?
  dataAiHintLogo            String?
  description               String?
  rating                    Float?
  auctionsConductedCount    Int?
  totalValueSold            Float?
  memberSince               DateTime?
  userId                    String?   @unique
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  leiloes                   Leilao[]
  usuario                   Usuario?  @relation(fields: [userId], references: [id])
}

model Vendedor {
  id                        String             @id @default(cuid())
  publicId                  String?            @unique
  name                      String
  slug                      String             @unique
  contactName               String?
  email                     String?
  phone                     String?
  address                   String?
  city                      String?
  state                     String?
  zipCode                   String?
  website                   String?
  logoUrl                   String?
  logoMediaId               String?
  dataAiHintLogo            String?
  description               String?
  rating                    Float?
  activeLotsCount           Int?
  totalSalesValue           Float?
  auctionsFacilitatedCount  Int?
  memberSince               DateTime?
  isJudicial                Boolean?           @default(false)
  userId                    String?            @unique
  judicialBranchId          String?            @unique
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
  leiloes                   Leilao[]
  vendasDiretas             VendaDireta[]
  bens                      Bem[]
  usuario                   Usuario?           @relation(fields: [userId], references: [id])
  processosJudiciais        ProcessoJudicial[]
  varaJudicial              Vara?              @relation(fields: [judicialBranchId], references: [id])
}

model Lance {
  id            String   @id @default(cuid())
  amount        Float
  timestamp     DateTime @default(now())
  isMaxBid      Boolean  @default(false)
  bidderDisplay String
  bidderId      String
  loteId        String
  leilaoId      String
  licitante     Usuario  @relation(fields: [bidderId], references: [id])
  lote          Lote     @relation(fields: [loteId], references: [id])
  leilao        Leilao   @relation(fields: [leilaoId], references: [id])

  @@index([loteId])
}

model Arremate {
  id                 String        @id @default(cuid())
  winningBidAmount   Float
  winDate            DateTime
  paymentStatus      PaymentStatus @default(PENDENTE)
  invoiceUrl         String?
  retrievalDeadline  DateTime?
  userId             String
  lotId              String        @unique
  leilaoId           String
  vencedor           Usuario       @relation(fields: [userId], references: [id])
  lote               Lote          @relation(fields: [lotId], references: [id])
  leilao             Leilao        @relation(fields: [leilaoId], references: [id])
}

// ============================================================
//                    JUDICIAL MODELS
// ============================================================

model ProcessoJudicial {
  id              String         @id @default(cuid())
  publicId        String?        @unique
  processNumber   String         @unique
  isElectronic    Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  courtId         String
  districtId      String
  branchId        String
  sellerId        String?
  tribunal        Tribunal       @relation(fields: [courtId], references: [id])
  comarca         Comarca        @relation(fields: [districtId], references: [id])
  vara            Vara           @relation(fields: [branchId], references: [id])
  partes          ParteProcesso[]
  bens            Bem[]
  leiloes         Leilao[]
  vendedor        Vendedor?      @relation(fields: [sellerId], references: [id])
}

model Tribunal {
  id          String             @id @default(cuid())
  name        String
  slug        String             @unique
  stateUf     String
  website     String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  comarcas    Comarca[]
  processos   ProcessoJudicial[]
  estado      Estado             @relation(fields: [stateUf], references: [uf])
}

model Comarca {
  id        String             @id @default(cuid())
  name      String
  slug      String             @unique
  zipCode   String?
  courtId   String
  stateId   String
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  tribunal  Tribunal           @relation(fields: [courtId], references: [id])
  varas     Vara[]
  processos ProcessoJudicial[]
  estado    Estado             @relation(fields: [stateId], references: [id])
}

model Vara {
  id          String             @id @default(cuid())
  name        String
  slug        String             @unique
  contactName String?
  phone       String?
  email       String?
  districtId  String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  comarca     Comarca            @relation(fields: [districtId], references: [id])
  processos   ProcessoJudicial[]
  vendedores  Vendedor[]
}

model ParteProcesso {
  id             String           @id @default(cuid())
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  processoJudicialId  String
  processo       ProcessoJudicial @relation(fields: [processoJudicialId], references: [id], onDelete: Cascade)

  @@unique([processoJudicialId, name, partyType])
}

model Bem {
  id                         String      @id @default(cuid())
  publicId                   String?     @unique
  title                      String
  description                String?
  status                     String
  evaluationValue            Float?
  imageUrl                   String?
  imageMediaId               String?
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  judicialProcessId          String?
  sellerId                   String?
  categoryId                 String?
  subcategoryId              String?
  createdAt                  DateTime    @default(now())
  updatedAt                  DateTime    @updatedAt
  processoJudicial           ProcessoJudicial? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  vendedor                   Vendedor?   @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  categoria                  CategoriaLote? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategoria               Subcategoria?  @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  lotes                      Lote[]      @relation("BemParaLote")
  plate                      String?
  make                       String?
  model                      String?
  version                    String?
  year                       Int?
  modelYear                  Int?
  mileage                    Int?
  color                      String?
  fuelType                   String?
  transmissionType           String?
  bodyType                   String?
  vin                        String?
  renavam                    String?
  enginePower                String?
  numberOfDoors              Int?
  vehicleOptions             String?
  detranStatus               String?
  debts                      String?
  runningCondition           String?
  bodyCondition              String?
  tiresCondition             String?
  hasKey                     Boolean?
  propertyType               String?
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  area                       Float?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?
  infrastructure             String?
  condoDetails               String?
  improvements               String?
  topography                 String?
  liensAndEncumbrances       String?
  propertyDebts              String?
  unregisteredRecords        String?
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  amenities                  Json?
  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String?
  includedAccessories        String?
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String?
  applianceCapacity          String?
  voltage                    String?
  applianceType              String?
  additionalFunctions        String?
  hoursUsed                  Int?
  engineType                 String?
  capacityOrPower            String?
  maintenanceHistory         String?
  installationLocation       String?
  compliesWithNR             String?
  operatingLicenses          String?
  breed                      String?
  age                        String?
  sex                        String?
  weight                     String?
  individualId               String?
  purpose                    String?
  sanitaryCondition          String?
  vaccinationStatus          String?
  lineage                    String?
  isPregnant                 Boolean?
  specialSkills              String?
  gtaDocument                String?
  breedRegistryDocument      String?
  furnitureType              String?
  material                   String?
  style                      String?
  dimensions                 String?
  pieceCount                 Int?
  jewelryType                String?
  metal                      String?
  gemstones                  String?
  totalWeight                String?
  jewelrySize                String?
  authenticityCertificate    String?
  workType                   String?
  artist                     String?
  period                     String?
  technique                  String?
  provenance                 String?
  boatType                   String?
  boatLength                 String?
  hullMaterial               String?
  onboardEquipment           String?
  productName                String?
  quantity                   String?
  packagingType              String?
  expirationDate             DateTime?
  storageConditions          String?
  preciousMetalType          String?
  purity                     String?
  forestGoodsType            String?
  volumeOrQuantity           String?
  species                    String?
  dofNumber                  String?
  series                     String?
  odometer                   Int?
  engineDetails              String?
  lossType                   String?
  primaryDamage              String?
  vinStatus                  String?
  titleInfo                  String?
  titleBrand                 String?
  startCode                  String?
  airbagsStatus              String?
  driveLineType              String?
  cylinders                  String?
  restraintSystem            String?
  exteriorInteriorColor      String?
  options                    String?
  manufacturedIn             String?
  vehicleClass               String?
  vehicleLocationInBranch    String?
  aisleStall                 String?
  laneRunNumber              String?
  actualCashValue            Float?
  estimatedRepairCost        Float?
}

// ============================================================
//                  SUPPORTING MODELS
// ============================================================

model VendaDireta {
  id                   String                @id @default(cuid())
  publicId             String?               @unique
  title                String
  description          String?
  offerType            DirectSaleOfferType
  status               DirectSaleOfferStatus @default(PENDING_APPROVAL)
  price                Float?
  minimumOfferPrice    Float?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?               @unique
  dataAiHint           String?
  dataAiHintSellerLogo String?
  galleryImageUrls     String[]              @default([])
  itemsIncluded        String[]              @default([])
  tags                 String[]              @default([])
  views                Int                   @default(0)
  proposalsCount       Int                   @default(0)
  expiresAt            DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  categoriaId          String
  vendedorId           String
  usuarioId            String?
  categoria            CategoriaLote         @relation(fields: [categoriaId], references: [id])
  vendedor             Vendedor              @relation(fields: [vendedorId], references: [id])
  imagemPrincipal      MediaItem?            @relation("VendaDiretaImagemPrincipal", fields: [imageMediaId], references: [id], onDelete: SetNull)
  usuario              Usuario?              @relation(fields: [usuarioId], references: [id])
}

model PropostaVendaDireta {
  id              String      @id @default(cuid())
  offerId         String
  userId          String
  proposalAmount  Float
  message         String?
  status          String // PENDENTE, ACEITA, RECUSADA
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  oferta          VendaDireta @relation(fields: [offerId], references: [id])
  usuario         Usuario     @relation(fields: [userId], references: [id])
}

model TipoDocumento {
  id           String             @id @default(cuid())
  name         String             @unique
  description  String?
  isRequired   Boolean            @default(false)
  aplicaA      String // CSV like PHYSICAL,LEGAL
  formatos     String // CSV like pdf,jpg,png
  displayOrder Int                @default(0)
  documentos   DocumentoUsuario[]
}

model DocumentoUsuario {
  id                String         @id @default(cuid())
  userId            String
  documentTypeId    String
  fileUrl           String
  fileName          String
  status            DocumentStatus @default(NOT_SENT)
  rejectionReason   String?
  uploadDate        DateTime       @default(now())
  analysisDate      DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  usuario           Usuario        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tipoDocumento     TipoDocumento  @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

model Notificacao {
  id        String   @id @default(cuid())
  message   String
  isRead    Boolean  @default(false)
  link      String?
  userId    String
  createdAt DateTime @default(now())
  usuario   Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MediaItem {
  id              String        @id @default(cuid())
  fileName        String
  storagePath     String        @unique
  urlOriginal     String
  urlThumbnail    String?
  urlMedium       String?
  urlLarge        String?
  title           String?
  altText         String?
  caption         String?
  description     String?
  mimeType        String
  sizeBytes       Int
  uploadedAt      DateTime      @default(now())
  uploadedBy      String
  dataAiHint      String?
  linkedLotIds    String[]      @default([])
  lotes           Lote[]        @relation("LoteMediaItem")
  ofertasVendaDireta MediaItem[] @relation("VendaDiretaImagemPrincipal")
  vendaDiretaImagem VendaDireta?  
}

model BlogPost {
  id        String   @id @default(cuid())
  title     String
  content   String
  slug      String   @unique
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contato {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Avaliacao {
  id                String   @id @default(cuid())
  rating            Int
  comment           String?
  userId            String
  userDisplayName   String
  lotId             String
  leilaoId          String
  createdAt         DateTime @default(now())
  usuario           Usuario  @relation(fields: [userId], references: [id])
  lote              Lote     @relation(fields: [lotId], references: [id])
  leilao            Leilao   @relation(fields: [leilaoId], references: [id])
}

model PerguntaLote {
  id                      String   @id @default(cuid())
  questionText            String
  answerText              String?
  isPublic                Boolean  @default(false)
  createdAt               DateTime @default(now())
  answeredAt              DateTime?
  userId                  String
  userDisplayName         String
  answeredByUserId        String?
  answeredByUserDisplayName String?
  lotId                   String
  leilaoId                String
  perguntaFeitaPor        Usuario  @relation(fields: [userId], references: [id])
  respostaDadaPor         Usuario? @relation("RespostasLote", fields: [answeredByUserId], references: [id])
  lote                    Lote     @relation(fields: [lotId], references: [id])
  leilao                  Leilao   @relation(fields: [leilaoId], references: [id])
}

model LanceMaximoUsuario {
  id        String   @id @default(cuid())
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  lotId     String
  usuario   Usuario  @relation(fields: [userId], references: [id])
  lote      Lote     @relation(fields: [lotId], references: [id])

  @@unique([userId, lotId])
}

model Estado {
  id          String             @id @default(cuid())
  name        String
  uf          String             @unique
  slug        String             @unique
  cityCount   Int                @default(0)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  cidades     Cidade[]
  comarcas    Comarca[]
  lotes       Lote[]
  tribunais   Tribunal[]
}

model Cidade {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  ibgeCode  String?
  stateId   String
  stateUf   String
  lotCount  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  estado    Estado   @relation(fields: [stateId], references: [id])
  lotes     Lote[]
}
```
- src/components/layout/admin-sidebar.tsx:
```tsx
// src/components/layout/admin-sidebar.tsx
'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { ListChecks, Package, Landmark, Users, Settings, LayoutDashboard, Gavel, Map, Building2, Library, ShieldCheck, Layers, Tv, ShoppingCart, Scale, FileText, Boxes, Rocket, FileUp, BarChart, BookOpen, UserCheck, MessageSquare, Files } from 'lucide-react';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';

const topLevelNavItems = [
  { title: 'Dashboard', href: '/admin/dashboard', icon: LayoutDashboard },
  { title: 'Auditório Virtual', href: '/live-dashboard', icon: Tv },
  { title: 'Wizard de Leilões', href: '/admin/wizard', icon: Rocket },
  { title: 'Importação CNJ', href: '/admin/import/cnj', icon: FileUp },
];

const auctionManagementItems = [
  { title: 'Leilões', href: '/admin/auctions', icon: Gavel },
  { title: 'Loteamento', href: '/admin/lotting', icon: Boxes },
  { title: 'Lotes', href: '/admin/lots', icon: Package },
  { title: 'Bens', href: '/admin/bens', icon: Package },
  { title: 'Venda Direta', href: '/admin/direct-sales', icon: ShoppingCart },
  { title: 'Categorias de Lotes', href: '/admin/categories', icon: ListChecks },
  { title: 'Subcategorias', href: '/admin/subcategories', icon: Layers },
];

const contentManagementItems = [
    { title: 'Blog', href: '/admin/blog', icon: BookOpen, disabled: true },
    { title: 'Biblioteca de Mídia', href: '/admin/media', icon: Library },
]

const judicialManagementItems = [
    { title: 'Tribunais', href: '/admin/courts', icon: Scale },
    { title: 'Comarcas', href: '/admin/judicial-districts', icon: Map },
    { title: 'Varas', href: '/admin/judicial-branches', icon: Building2 },
    { title: 'Processos', href: '/admin/judicial-processes', icon: FileText },
]

const platformManagementItems = [
  { title: 'Comitentes', href: '/admin/sellers', icon: Users },
  { title: 'Leiloeiros', href: '/admin/auctioneers', icon: Landmark },
  { title: 'Estados', href: '/admin/states', icon: Map },
  { title: 'Cidades', href: '/admin/cities', icon: Building2 },
  { title: 'Usuários', href: '/admin/users', icon: Users },
  { title: 'Habilitações', href: '/admin/habilitations', icon: UserCheck },
  { title: 'Templates de Documentos', href: '/admin/document-templates', icon: Files },
  { title: 'Mensagens de Contato', href: '/admin/contact-messages', icon: MessageSquare },
  { title: 'Perfis (Roles)', href: '/admin/roles', icon: ShieldCheck },
  { title: 'Relatórios', href: '/admin/reports', icon: BarChart },
  { title: 'Configurações', href: '/admin/settings', icon: Settings },
];

const NavButton = ({ item, pathname, onLinkClick }: { item: { href: string; title: string; icon: React.ElementType; disabled?: boolean }; pathname: string; onLinkClick?: () => void; }) => (
  <Button
    key={item.href}
    variant={pathname === item.href || (item.href !== '/admin/dashboard' && pathname.startsWith(item.href) && !item.disabled) ? 'secondary' : 'ghost'}
    className={cn(
      'w-full justify-start',
      (pathname === item.href || (item.href !== '/admin/dashboard' && pathname.startsWith(item.href)) && !item.disabled) && 'font-semibold text-primary hover:text-primary'
    )}
    asChild
    disabled={item.disabled}
    onClick={onLinkClick}
  >
    <Link href={item.disabled ? '#' : item.href}>
      <item.icon className="mr-2 h-4 w-4" />
      {item.title}
    </Link>
  </Button>
);

export default function AdminSidebar() {
  const pathname = usePathname();

  return (
    <aside className="sticky top-0 h-screen w-64 bg-background border-r flex flex-col">
      <div className="p-4 border-b">
        <Link href="/admin/dashboard" className="flex items-center space-x-2">
          <LayoutDashboard className="h-7 w-7 text-primary" />
          <span className="font-bold text-xl text-primary">BidExpert Admin</span>
        </Link>
      </div>
      <ScrollArea className="flex-1">
        <nav className="p-2 space-y-1">
          {topLevelNavItems.map((item) => <NavButton key={item.href} item={item} pathname={pathname} />)}
          
          <Accordion type="multiple" className="w-full" defaultValue={['auction-management', 'judicial-management', 'platform-management', 'content-management']}>
              <AccordionItem value="auction-management" className="border-b-0">
                  <AccordionTrigger className="text-xs font-semibold uppercase text-muted-foreground hover:no-underline rounded-md px-3 hover:bg-accent/50">Gestão de Leilões</AccordionTrigger>
                  <AccordionContent className="pt-1 space-y-1">
                      {auctionManagementItems.map((item) => <NavButton key={item.href} item={item} pathname={pathname} />)}
                  </AccordionContent>
              </AccordionItem>
               <AccordionItem value="content-management" className="border-b-0">
                  <AccordionTrigger className="text-xs font-semibold uppercase text-muted-foreground hover:no-underline rounded-md px-3 hover:bg-accent/50">Conteúdo e Mídia</AccordionTrigger>
                  <AccordionContent className="pt-1 space-y-1">
                      {contentManagementItems.map((item) => <NavButton key={item.href} item={item} pathname={pathname} />)}
                  </AccordionContent>
              </AccordionItem>
              <AccordionItem value="judicial-management" className="border-b-0">
                  <AccordionTrigger className="text-xs font-semibold uppercase text-muted-foreground hover:no-underline rounded-md px-3 hover:bg-accent/50">Gestão Judicial</AccordionTrigger>
                  <AccordionContent className="pt-1 space-y-1">
                      {judicialManagementItems.map((item) => <NavButton key={item.href} item={item} pathname={pathname} />)}
                  </AccordionContent>
              </AccordionItem>
              <AccordionItem value="platform-management" className="border-b-0">
                  <AccordionTrigger className="text-xs font-semibold uppercase text-muted-foreground hover:no-underline rounded-md px-3 hover:bg-accent/50">Gestão da Plataforma</AccordionTrigger>
                  <AccordionContent className="pt-1 space-y-1">
                      {platformManagementItems.map((item) => <NavButton key={item.href} item={item} pathname={pathname} />)}
                  </AccordionContent>
              </AccordionItem>
          </Accordion>
        </nav>
      </ScrollArea>
      <div className="p-4 border-t">
        <Button variant="outline" className="w-full" asChild>
            <Link href="/">Voltar ao Site</Link>
        </Button>
      </div>
    </aside>
  );
}

```
- src/app/admin/sellers/seller.actions.ts:
```ts
// src/app/admin/sellers/seller.actions.ts
'use server';

import { deleteSeller } from './actions';

export async function handleDeleteSeller(id: string) {
  const result = await deleteSeller(id);
  if (!result.success) {
      console.error("Failed to delete seller:", result.message);
  }
  // Optionally, revalidate path or handle UI updates as needed
}
```
- src/app/dashboard/actions.ts:
```ts
// This file is now obsolete and will be deleted.
// All dashboard-related actions are in their specific sub-directory actions.ts files.

```
- src/app/dashboard/queries.ts:
```ts
// This file is now obsolete and will be deleted.
// Data fetching is now handled by server components and server actions.

```
- src/components/layout/admin-sidebar.tsx:
```tsx
// src/components/layout/admin-sidebar.tsx
'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { ListChecks, Package, Landmark, Users, Settings, LayoutDashboard, Gavel, Map, Building2, Library, ShieldCheck, Layers, Tv, ShoppingCart, Scale, FileText, Boxes, Rocket, FileUp, BarChart, BookOpen, UserCheck, MessageSquare, Files } from 'lucide-react';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';

const topLevelNavItems = [
  { title: 'Dashboard', href: '/admin/dashboard', icon: LayoutDashboard },
  { title: 'Auditório Virtual', href: '/live-dashboard', icon: Tv },
  { title: 'Wizard de Leilões', href: '/admin/wizard', icon: Rocket },
  { title: 'Importação CNJ', href: '/admin/import/cnj', icon: FileUp },
];

const auctionManagementItems = [
  { title: 'Leilões', href: '/admin/auctions', icon: Gavel },
  { title: 'Loteamento', href: '/admin/lotting', icon: Boxes },
  { title: 'Lotes', href: '/admin/lots', icon: Package },
  { title: 'Bens', href: '/admin/bens', icon: Package },
  { title: 'Venda Direta', href: '/admin/direct-sales', icon: ShoppingCart },
  { title: 'Categorias de Lotes', href: '/admin/categories', icon: ListChecks },
  { title: 'Subcategorias', href: '/admin/subcategories', icon: Layers },
];

const contentManagementItems = [
    { title: 'Blog', href: '/admin/blog', icon: BookOpen, disabled: true },
    { title: 'Biblioteca de Mídia', href: '/admin/media', icon: Library },
]

const judicialManagementItems = [
    { title: 'Tribunais', href: '/admin/courts', icon: Scale },
    { title: 'Comarcas', href: '/admin/judicial-districts', icon: Map },
    { title: 'Varas', href: '/admin/judicial-branches', icon: Building2 },
    { title: 'Processos', href: '/admin/judicial-processes', icon: FileText },
]

const platformManagementItems = [
  { title: 'Comitentes', href: '/admin/sellers', icon: Users },
  { title: 'Leiloeiros', href: '/admin/auctioneers', icon: Landmark },
  { title: 'Estados', href: '/admin/states', icon: Map },
  { title: 'Cidades', href: '/admin/cities', icon: Building2 },
  { title: 'Usuários', href: '/admin/users', icon: Users },
  { title: 'Habilitações', href: '/admin/habilitations', icon: UserCheck },
  { title: 'Templates de Documentos', href: '/admin/document-templates', icon: Files },
  { title: 'Mensagens de Contato', href: '/admin/contact-messages', icon: MessageSquare },
  { title: 'Perfis (Roles)', href: '/admin/roles', icon: ShieldCheck },
  { title: 'Relatórios', href: '/admin/reports', icon: BarChart },
  { title: 'Configurações', href: '/admin/settings', icon: Settings },
];

const NavButton = ({ item, pathname, onLinkClick }: { item: { href: string; title: string; icon: React.ElementType; disabled?: boolean }; pathname: string; onLinkClick?: () => void; }) => (
  <Button
    key={item.href}
    variant={pathname === item.href || (item.href !== '/admin/dashboard' && pathname.startsWith(item.href) && !item.disabled) ? 'secondary' : 'ghost'}
    className={cn(
      'w-full justify-start',
      (pathname === item.href || (item.href !== '/admin/dashboard' && pathname.startsWith(item.href)) && !item.disabled) && 'font-semibold text-primary hover:text-primary'
    )}
    asChild
    disabled={item.disabled}
    onClick={onLinkClick}
  >
    <Link href={item.disabled ? '#' : item.href}>
      <item.icon className="mr-2 h-4 w-4" />
      {item.title}
    </Link>
  </Button>
);

export default function AdminSidebar() {
  const pathname = usePathname();

  return (
    <aside className="sticky top-0 h-screen w-64 bg-background border-r flex flex-col">
      <div className="p-4 border-b">
        <Link href="/admin/dashboard" className="flex items-center space-x-2">
          <LayoutDashboard className="h-7 w-7 text-primary" />
          <span className="font-bold text-xl text-primary">BidExpert Admin</span>
        </Link>
      </div>
      <ScrollArea className="flex-1">
        <nav className="p-2 space-y-1">
          {topLevelNavItems.map((item) => <NavButton key={item.href} item={item} pathname={pathname} />)}
          
          <Accordion type="multiple" className="w-full" defaultValue={['auction-management', 'judicial-management', 'platform-management', 'content-management']}>
              <AccordionItem value="auction-management" className="border-b-0">
                  <AccordionTrigger className="text-xs font-semibold uppercase text-muted-foreground hover:no-underline rounded-md px-3 hover:bg-accent/50">Gestão de Leilões</AccordionTrigger>
                  <AccordionContent className="pt-1 space-y-1">
                      {auctionManagementItems.map((item) => <NavButton key={item.href} item={item} pathname={pathname} />)}
                  </AccordionContent>
              </AccordionItem>
               <AccordionItem value="content-management" className="border-b-0">
                  <AccordionTrigger className="text-xs font-semibold uppercase text-muted-foreground hover:no-underline rounded-md px-3 hover:bg-accent/50">Conteúdo e Mídia</AccordionTrigger>
                  <AccordionContent className="pt-1 space-y-1">
                      {contentManagementItems.map((item) => <NavButton key={item.href} item={item} pathname={pathname} />)}
                  </AccordionContent>
              </AccordionItem>
              <AccordionItem value="judicial-management" className="border-b-0">
                  <AccordionTrigger className="text-xs font-semibold uppercase text-muted-foreground hover:no-underline rounded-md px-3 hover:bg-accent/50">Gestão Judicial</AccordionTrigger>
                  <AccordionContent className="pt-1 space-y-1">
                      {judicialManagementItems.map((item) => <NavButton key={item.href} item={item} pathname={pathname} />)}
                  </AccordionContent>
              </AccordionItem>
              <AccordionItem value="platform-management" className="border-b-0">
                  <AccordionTrigger className="text-xs font-semibold uppercase text-muted-foreground hover:no-underline rounded-md px-3 hover:bg-accent/50">Gestão da Plataforma</AccordionTrigger>
                  <AccordionContent className="pt-1 space-y-1">
                      {platformManagementItems.map((item) => <NavButton key={item.href} item={item} pathname={pathname} />)}
                  </AccordionContent>
              </AccordionItem>
          </Accordion>
        </nav>
      </ScrollArea>
      <div className="p-4 border-t">
        <Button variant="outline" className="w-full" asChild>
            <Link href="/">Voltar ao Site</Link>
        </Button>
      </div>
    </aside>
  );
}

```
- src/app/admin/sellers/seller-form.tsx:
```tsx
// src/app/admin/sellers/seller-form.tsx
'use client';

import * as React from 'react';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm, useWatch } from 'react-hook-form';
import { Button } from '@/components/ui/button';
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/hooks/use-toast';
import { useRouter } from 'next/navigation';
import { sellerFormSchema, type SellerFormValues } from './seller-form-schema';
import type { SellerProfileInfo, MediaItem, JudicialBranch } from '@/types';
import { Loader2, Save, Users, Image as ImageIcon, Scale } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import Image from 'next/image';
import ChooseMediaDialog from '@/components/admin/media/choose-media-dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';

interface SellerFormProps {
  initialData?: SellerProfileInfo | null;
  judicialBranches: JudicialBranch[];
  onSubmitAction: (data: SellerFormValues) => Promise<{ success: boolean; message: string; sellerId?: string }>;
  formTitle: string;
  formDescription: string;
  submitButtonText: string;
  /** If provided, this will be the redirect path instead of the admin page. */
  successRedirectPath?: string;
}

export default function SellerForm({
  initialData,
  judicialBranches,
  onSubmitAction,
  formTitle,
  formDescription,
  submitButtonText,
  successRedirectPath
}: SellerFormProps) {
  const { toast } = useToast();
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = React.useState(false);
  const [isMediaDialogOpen, setIsMediaDialogOpen] = React.useState(false);

  const form = useForm<SellerFormValues>({
    resolver: zodResolver(sellerFormSchema),
    defaultValues: {
      name: initialData?.name || '',
      contactName: initialData?.contactName || '',
      email: initialData?.email || '',
      phone: initialData?.phone || '',
      address: initialData?.address || '',
      city: initialData?.city || '',
      state: initialData?.state || '',
      zipCode: initialData?.zipCode || '',
      website: initialData?.website || '',
      logoUrl: initialData?.logoUrl || '',
      dataAiHintLogo: initialData?.dataAiHintLogo || '',
      description: initialData?.description || '',
      judicialBranchId: initialData?.judicialBranchId || null,
      isJudicial: initialData?.isJudicial || false,
    },
  });

  const logoUrlPreview = useWatch({ control: form.control, name: 'logoUrl' });
  const isJudicial = useWatch({ control: form.control, name: 'isJudicial' });

  const handleMediaSelect = (selectedItems: Partial<MediaItem>[]) => {
    if (selectedItems.length > 0) {
      const selectedMediaItem = selectedItems[0];
      if (selectedMediaItem?.urlOriginal) {
        form.setValue('logoUrl', selectedMediaItem.urlOriginal);
      } else {
        toast({ title: "Seleção Inválida", description: "O item de mídia selecionado não possui uma URL válida.", variant: "destructive" });
      }
    }
    setIsMediaDialogOpen(false);
  };

  async function onSubmit(values: SellerFormValues) {
    setIsSubmitting(true);
    try {
      const result = await onSubmitAction(values);
      if (result.success) {
        toast({
          title: 'Sucesso!',
          description: result.message,
        });
        router.push(successRedirectPath || '/admin/sellers');
        router.refresh();
      } else {
        toast({
          title: 'Erro',
          description: result.message,
          variant: 'destructive',
        });
      }
    } catch (error) {
      toast({
        title: 'Erro Inesperado',
        description: 'Ocorreu um erro ao processar sua solicitação.',
        variant: 'destructive',
      });
      console.error("Unexpected error in seller form:", error);
    } finally {
      setIsSubmitting(false);
    }
  }

  return (
    <>
    <Card className="max-w-3xl mx-auto shadow-lg">
      <CardHeader>
        <CardTitle className="flex items-center gap-2"><Users className="h-6 w-6 text-primary" /> {formTitle}</CardTitle>
        <CardDescription>{formDescription}</CardDescription>
      </CardHeader>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)}>
          <CardContent className="space-y-6 bg-secondary/30 p-6">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Nome do Comitente/Empresa</FormLabel>
                  <FormControl>
                    <Input placeholder="Ex: Banco XYZ S.A., 1ª Vara Cível de Lagarto" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="isJudicial"
              render={({ field }) => (
                <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm bg-background">
                  <div className="space-y-0.5">
                    <FormLabel>É Comitente Judicial?</FormLabel>
                    <FormDescription>
                      Marque se este comitente é uma entidade judicial (Vara, Tribunal, etc).
                    </FormDescription>
                  </div>
                  <FormControl>
                    <Switch
                      checked={field.value}
                      onCheckedChange={field.onChange}
                    />
                  </FormControl>
                </FormItem>
              )}
            />
            {isJudicial && (
                <FormField
                    control={form.control}
                    name="judicialBranchId"
                    render={({ field }) => (
                    <FormItem>
                        <FormLabel className="flex items-center gap-2"><Scale className="h-4 w-4"/>Vara Judicial Vinculada (Opcional)</FormLabel>
                        <Select onValueChange={(value) => field.onChange(value === 'none' ? null : value)} value={field.value ?? 'none'}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Nenhuma vara judicial vinculada" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="none">Nenhuma</SelectItem>
                             {judicialBranches.map(branch => (
                                <SelectItem key={branch.id} value={branch.id}>{branch.name} - {branch.districtName}</SelectItem>
                              ))}
                          </SelectContent>
                        </Select>
                        <FormDescription>Se este comitente representa uma entidade judicial, vincule-a aqui.</FormDescription>
                        <FormMessage />
                    </FormItem>
                    )}
                />
            )}
            <div className="grid md:grid-cols-2 gap-6">
              <FormField
                control={form.control}
                name="contactName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Nome do Contato (Opcional)</FormLabel>
                    <FormControl>
                      <Input placeholder="Nome do responsável" {...field} value={field.value ?? ''}/>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email (Opcional)</FormLabel>
                    <FormControl>
                      <Input type="email" placeholder="contato@comitente.com" {...field} value={field.value ?? ''} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            <div className="grid md:grid-cols-2 gap-6">
              <FormField
                control={form.control}
                name="phone"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Telefone (Opcional)</FormLabel>
                    <FormControl>
                      <Input placeholder="(XX) XXXXX-XXXX" {...field} value={field.value ?? ''} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="website"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Website (Opcional)</FormLabel>
                    <FormControl>
                      <Input type="url" placeholder="https://www.comitente.com" {...field} value={field.value ?? ''} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
             <FormField
                control={form.control}
                name="address"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Endereço (Opcional)</FormLabel>
                    <FormControl>
                      <Input placeholder="Rua Exemplo, 123, Bairro" {...field} value={field.value ?? ''} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            <div className="grid md:grid-cols-3 gap-6">
              <FormField
                control={form.control}
                name="city"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Cidade (Opcional)</FormLabel>
                    <FormControl>
                      <Input placeholder="São Paulo" {...field} value={field.value ?? ''} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="state"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Estado/UF (Opcional)</FormLabel>
                    <FormControl>
                      <Input placeholder="SP" {...field} value={field.value ?? ''} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="zipCode"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>CEP (Opcional)</FormLabel>
                    <FormControl>
                      <Input placeholder="00000-000" {...field} value={field.value ?? ''} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            
            <FormItem>
              <FormLabel>Logo do Comitente</FormLabel>
              <div className="flex items-center gap-4">
                <div className="relative w-24 h-24 flex-shrink-0 bg-muted rounded-md overflow-hidden border">
                  {logoUrlPreview ? (
                    <Image src={logoUrlPreview} alt="Prévia do Logo" fill className="object-contain" data-ai-hint="previa logo comitente" />
                  ) : (
                    <div className="flex items-center justify-center h-full text-muted-foreground">
                      <ImageIcon className="h-8 w-8" />
                    </div>
                  )}
                </div>
                <div className="flex-grow space-y-2">
                  <Button type="button" variant="outline" onClick={() => setIsMediaDialogOpen(true)}>
                    {logoUrlPreview ? 'Alterar Logo' : 'Escolher da Biblioteca'}
                  </Button>
                  <FormField
                    control={form.control}
                    name="logoUrl"
                    render={({ field }) => (
                        <FormControl>
                            <Input type="url" placeholder="Ou cole a URL aqui" {...field} value={field.value ?? ""} className="text-xs h-8" />
                        </FormControl>
                    )}
                    />
                  <FormMessage />
                </div>
              </div>
            </FormItem>

            <FormField
              control={form.control}
              name="dataAiHintLogo"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Dica para IA (Logo - Opcional)</FormLabel>
                  <FormControl>
                    <Input placeholder="Ex: banco logo, empresa tecnologia" {...field} value={field.value ?? ''} />
                  </FormControl>
                   <FormDescription>Duas palavras chave para ajudar a IA encontrar uma imagem de placeholder, se a URL do logo não for fornecida.</FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Descrição/Observações (Opcional)</FormLabel>
                  <FormControl>
                    <Textarea placeholder="Detalhes adicionais sobre o comitente..." {...field} value={field.value ?? ''} rows={4} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </CardContent>
          <CardFooter className="flex justify-end gap-2 p-6 border-t">
            <Button type="button" variant="outline" onClick={() => router.push(successRedirectPath || '/admin/sellers')} disabled={isSubmitting}>
              Cancelar
            </Button>
            <Button type="submit" disabled={isSubmitting}>
              {isSubmitting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Save className="mr-2 h-4 w-4" />}
              {submitButtonText}
            </Button>
          </CardFooter>
        </form>
      </Form>
    </Card>
     <ChooseMediaDialog
        isOpen={isMediaDialogOpen}
        onOpenChange={setIsMediaDialogOpen}
        onMediaSelect={handleMediaSelect}
        allowMultiple={false}
      />
    </>
  );
}

```
- src/app/admin/sellers/seller.actions.ts:
```ts
// src/app/admin/sellers/seller.actions.ts
'use server';

import { deleteSeller } from './actions';

export async function handleDeleteSeller(id: string) {
  const result = await deleteSeller(id);
  if (!result.success) {
      console.error("Failed to delete seller:", result.message);
  }
  // Optionally, revalidate path or handle UI updates as needed
}
```
- src/app/dashboard/actions.ts:
```ts
// This file is now obsolete and will be deleted.
// All dashboard-related actions are in their specific sub-directory actions.ts files.

```
- src/app/dashboard/queries.ts:
```ts
// This file is now obsolete and will be deleted.
// Data fetching is now handled by server components and server actions.

```
- src/components/layout/admin-sidebar.tsx:
```tsx
// src/components/layout/admin-sidebar.tsx
'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { ListChecks, Package, Landmark, Users, Settings, LayoutDashboard, Gavel, Map, Building2, Library, ShieldCheck, Layers, Tv, ShoppingCart, Scale, FileText, Boxes, Rocket, FileUp, BarChart, BookOpen, UserCheck, MessageSquare, Files } from 'lucide-react';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';

const topLevelNavItems = [
  { title: 'Dashboard', href: '/admin/dashboard', icon: LayoutDashboard },
  { title: 'Auditório Virtual', href: '/live-dashboard', icon: Tv },
  { title: 'Wizard de Leilões', href: '/admin/wizard', icon: Rocket },
  { title: 'Importação CNJ', href: '/admin/import/cnj', icon: FileUp },
];

const auctionManagementItems = [
  { title: 'Leilões', href: '/admin/auctions', icon: Gavel },
  { title: 'Loteamento', href: '/admin/lotting', icon: Boxes },
  { title: 'Lotes', href: '/admin/lots', icon: Package },
  { title: 'Bens', href: '/admin/bens', icon: Package },
  { title: 'Venda Direta', href: '/admin/direct-sales', icon: ShoppingCart },
  { title: 'Categorias de Lotes', href: '/admin/categories', icon: ListChecks },
  { title: 'Subcategorias', href: '/admin/subcategories', icon: Layers },
];

const contentManagementItems = [
    { title: 'Blog', href: '/admin/blog', icon: BookOpen, disabled: true },
    { title: 'Biblioteca de Mídia', href: '/admin/media', icon: Library },
]

const judicialManagementItems = [
    { title: 'Tribunais', href: '/admin/courts', icon: Scale },
    { title: 'Comarcas', href: '/admin/judicial-districts', icon: Map },
    { title: 'Varas', href: '/admin/judicial-branches', icon: Building2 },
    { title: 'Processos', href: '/admin/judicial-processes', icon: FileText },
]

const platformManagementItems = [
  { title: 'Comitentes', href: '/admin/sellers', icon: Users },
  { title: 'Leiloeiros', href: '/admin/auctioneers', icon: Landmark },
  { title: 'Estados', href: '/admin/states', icon: Map },
  { title: 'Cidades', href: '/admin/cities', icon: Building2 },
  { title: 'Usuários', href: '/admin/users', icon: Users },
  { title: 'Habilitações', href: '/admin/habilitations', icon: UserCheck },
  { title: 'Templates de Documentos', href: '/admin/document-templates', icon: Files },
  { title: 'Mensagens de Contato', href: '/admin/contact-messages', icon: MessageSquare },
  { title: 'Perfis (Roles)', href: '/admin/roles', icon: ShieldCheck },
  { title: 'Relatórios', href: '/admin/reports', icon: BarChart },
  { title: 'Configurações', href: '/admin/settings', icon: Settings },
];

const NavButton = ({ item, pathname, onLinkClick }: { item: { href: string; title: string; icon: React.ElementType; disabled?: boolean }; pathname: string; onLinkClick?: () => void; }) => (
  <Button
    key={item.href}
    variant={pathname === item.href || (item.href !== '/admin/dashboard' && pathname.startsWith(item.href) && !item.disabled) ? 'secondary' : 'ghost'}
    className={cn(
      'w-full justify-start',
      (pathname === item.href || (item.href !== '/admin/dashboard' && pathname.startsWith(item.href)) && !item.disabled) && 'font-semibold text-primary hover:text-primary'
    )}
    asChild
    disabled={item.disabled}
    onClick={onLinkClick}
  >
    <Link href={item.disabled ? '#' : item.href}>
      <item.icon className="mr-2 h-4 w-4" />
      {item.title}
    </Link>
  </Button>
);

export default function AdminSidebar() {
  const pathname = usePathname();

  return (
    <aside className="sticky top-0 h-screen w-64 bg-background border-r flex flex-col">
      <div className="p-4 border-b">
        <Link href="/admin/dashboard" className="flex items-center space-x-2">
          <LayoutDashboard className="h-7 w-7 text-primary" />
          <span className="font-bold text-xl text-primary">BidExpert Admin</span>
        </Link>
      </div>
      <ScrollArea className="flex-1">
        <nav className="p-2 space-y-1">
          {topLevelNavItems.map((item) => <NavButton key={item.href} item={item} pathname={pathname} />)}
          
          <Accordion type="multiple" className="w-full" defaultValue={['auction-management', 'judicial-management', 'platform-management', 'content-management']}>
              <AccordionItem value="auction-management" className="border-b-0">
                  <AccordionTrigger className="text-xs font-semibold uppercase text-muted-foreground hover:no-underline rounded-md px-3 hover:bg-accent/50">Gestão de Leilões</AccordionTrigger>
                  <AccordionContent className="pt-1 space-y-1">
                      {auctionManagementItems.map((item) => <NavButton key={item.href} item={item} pathname={pathname} />)}
                  </AccordionContent>
              </AccordionItem>
               <AccordionItem value="content-management" className="border-b-0">
                  <AccordionTrigger className="text-xs font-semibold uppercase text-muted-foreground hover:no-underline rounded-md px-3 hover:bg-accent/50">Conteúdo e Mídia</AccordionTrigger>
                  <AccordionContent className="pt-1 space-y-1">
                      {contentManagementItems.map((item) => <NavButton key={item.href} item={item} pathname={pathname} />)}
                  </AccordionContent>
              </AccordionItem>
              <AccordionItem value="judicial-management" className="border-b-0">
                  <AccordionTrigger className="text-xs font-semibold uppercase text-muted-foreground hover:no-underline rounded-md px-3 hover:bg-accent/50">Gestão Judicial</AccordionTrigger>
                  <AccordionContent className="pt-1 space-y-1">
                      {judicialManagementItems.map((item) => <NavButton key={item.href} item={item} pathname={pathname} />)}
                  </AccordionContent>
              </AccordionItem>
              <AccordionItem value="platform-management" className="border-b-0">
                  <AccordionTrigger className="text-xs font-semibold uppercase text-muted-foreground hover:no-underline rounded-md px-3 hover:bg-accent/50">Gestão da Plataforma</AccordionTrigger>
                  <AccordionContent className="pt-1 space-y-1">
                      {platformManagementItems.map((item) => <NavButton key={item.href} item={item} pathname={pathname} />)}
                  </AccordionContent>
              </AccordionItem>
          </Accordion>
        </nav>
      </ScrollArea>
      <div className="p-4 border-t">
        <Button variant="outline" className="w-full" asChild>
            <Link href="/">Voltar ao Site</Link>
        </Button>
      </div>
    </aside>
  );
}

```
- src/components/layout/consignor-sidebar.tsx:
```tsx
// src/components/layout/consignor-sidebar.tsx
'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { Briefcase, LayoutDashboard, ListChecks, DollarSign, ShoppingCart, BarChart3, Settings } from 'lucide-react';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';

const sidebarNavItems = [
  {
    title: 'Visão Geral',
    href: '/consignor-dashboard/overview',
    icon: LayoutDashboard,
  },
  {
    title: 'Meus Leilões',
    href: '/consignor-dashboard/auctions',
    icon: Briefcase,
  },
  {
    title: 'Meus Lotes',
    href: '/consignor-dashboard/lots',
    icon: ListChecks,
  },
  {
    title: 'Venda Direta',
    href: '/consignor-dashboard/direct-sales',
    icon: ShoppingCart,
  },
  {
    title: 'Relatórios',
    href: '/consignor-dashboard/reports',
    icon: BarChart3,
  },
  {
    title: 'Financeiro',
    href: '/consignor-dashboard/financial',
    icon: DollarSign,
  },
  {
    title: 'Configurações',
    href: '/consignor-dashboard/settings',
    icon: Settings,
  },
];

export default function ConsignorSidebar() {
  const pathname = usePathname();

  return (
    <aside className="sticky top-0 h-screen w-64 bg-background border-r flex flex-col">
      <div className="p-4 border-b">
        <Link href="/consignor-dashboard/overview" className="flex items-center space-x-2">
          <Briefcase className="h-7 w-7 text-primary" />
          <span className="font-bold text-xl text-primary">Painel Comitente</span>
        </Link>
      </div>
      <ScrollArea className="flex-1">
        <nav className="p-4 space-y-1">
          {sidebarNavItems.map((item) => (
            <Button
              key={item.title}
              variant={pathname === item.href || (item.href !== '/consignor-dashboard/overview' && pathname.startsWith(item.href)) ? 'secondary' : 'ghost'}
              className={cn(
                'w-full justify-start',
                (pathname === item.href || (item.href !== '/consignor-dashboard/overview' && pathname.startsWith(item.href))) && 'font-semibold text-primary hover:text-primary'
              )}
              asChild
            >
              <Link href={item.href}>
                <item.icon className="mr-2 h-4 w-4" />
                {item.title}
              </Link>
            </Button>
          ))}
        </nav>
      </ScrollArea>
       <div className="p-4 border-t">
        <Button variant="outline" className="w-full" asChild>
            <Link href="/">Voltar ao Site</Link>
        </Button>
      </div>
    </aside>
  );
}

```
- src/components/layout/main-nav.tsx:
```tsx

'use client';

import * as React from 'react'; 
import Link from 'next/link';
import { usePathname, useSearchParams } from 'next/navigation'; // Importado useSearchParams
import { cn } from '@/lib/utils';
import type { LotCategory, AuctioneerProfileInfo, SellerProfileInfo, RecentlyViewedLotInfo } from '@/types';
import { ChevronDown, History, Home, Landmark, Gavel, Percent, Phone, ListChecks, Tag, Users, FileText as FileTextIcon, BookOpen } from 'lucide-react'; 
import { useEffect, useState, useCallback, forwardRef } from 'react'; // Adicionado useCallback e forwardRef
import {
  NavigationMenu,
  NavigationMenuContent,
  NavigationMenuItem,
  NavigationMenuList,
  NavigationMenuLink,
  NavigationMenuTrigger,
  navigationMenuTriggerStyle,
} from "@/components/ui/navigation-menu";
import MegaMenuCategories from './mega-menu-categories';
import MegaMenuLinkList, { type MegaMenuGroup } from './mega-menu-link-list';
import MegaMenuAuctioneers from './mega-menu-auctioneers';
import TwoColumnMegaMenu from './two-column-mega-menu';
import type { RecentlyViewedLotInfo as HistoryListItemType } from '@/types'; // Renomeado para evitar conflito
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'; 
import type { MegaMenuLinkItem } from './mega-menu-link-list'; 
import Image from 'next/image';


// Renomeado para não conflitar com o nome do componente
export const HistoryListItem = forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & { item: HistoryListItemType; onClick?: () => void }
>(({ className, item, onClick, ...props }, ref) => {
  return (
    <Link
      href={`/auctions/${item.auctionId}/lots/${item.id}`}
      ref={ref}
      className={cn(
        "flex items-center gap-2 py-1.5 px-2 rounded-md hover:bg-accent transition-colors text-xs leading-snug text-muted-foreground",
        className
      )}
      onClick={onClick}
      {...props}
    >
      <div className="relative h-10 w-12 flex-shrink-0 bg-muted rounded-sm overflow-hidden">
        <Image src={item.imageUrl || 'https://placehold.co/120x100.png'} alt={item.title} fill className="object-cover" data-ai-hint={item.dataAiHint || "item visto recentemente"} />
      </div>
      <span className="truncate flex-grow text-foreground/90">{item.title}</span>
    </Link>
  );
});
HistoryListItem.displayName = "HistoryListItem";

export interface NavItem {
  href?: string;
  label: string;
  isMegaMenu?: boolean;
  contentKey?: 'categories' | 'modalities' | 'consignors' | 'auctioneers' | 'history';
  icon?: React.ElementType; 
  megaMenuAlign?: "start" | "center" | "end";
  twoColumnMegaMenuProps?: {
    sidebarTitle?: string;
    mainContent: {
      imageUrl: string;
      imageAlt: string;
      dataAiHint: string;
      title: string;
      description: string;
      buttonLink: string;
      buttonText: string;
    };
  };
  hrefPrefix?: string; 
}

const modalityMegaMenuGroups: MegaMenuGroup[] = [
  {
    items: [
      { href: '/search?type=auctions&auctionType=JUDICIAL', label: 'Leilões Judiciais', description: 'Oportunidades de processos judiciais.', icon: <Gavel className="h-4 w-4" /> },
      { href: '/search?type=auctions&auctionType=EXTRAJUDICIAL', label: 'Leilões Extrajudiciais', description: 'Negociações diretas e mais ágeis.', icon: <Landmark className="h-4 w-4" /> },
      { href: '/search?type=auctions&auctionType=TOMADA_DE_PRECOS', label: 'Tomada de Preços', description: 'Processo de seleção e cotação.', icon: <FileTextIcon className="h-4 w-4" /> },
      { href: '/direct-sales', label: 'Venda Direta', description: 'Compre itens com preço fixo.', icon: <Tag className="h-4 w-4" /> },
      { href: '/search?type=auctions&auctionType=PARTICULAR', label: 'Leilões Particulares', description: 'Leilões privados ou com acesso restrito.', icon: <Users className="h-4 w-4" /> },
    ]
  }
];

interface MainNavProps extends React.HTMLAttributes<HTMLElement> {
    items: NavItem[];
    onLinkClick?: () => void;
    isMobile?: boolean;
    searchCategories?: LotCategory[];
    auctioneers?: AuctioneerProfileInfo[];
    consignorMegaMenuGroups?: MegaMenuGroup[];
    recentlyViewedItems?: RecentlyViewedLotInfo[];
    HistoryListItemComponent?: typeof HistoryListItem;
}

const MAX_ITEMS_IN_TW_COL_SIDEBAR = 5;


export default function MainNav({ 
    items, 
    className, 
    onLinkClick, 
    isMobile = false,
    searchCategories = [],
    auctioneers = [],
    consignorMegaMenuGroups = [],
    recentlyViewedItems = [],
    HistoryListItemComponent,
    ...props 
}: MainNavProps) {
  const pathname = usePathname();
  const searchParams = useSearchParams();
  const [isClient, setIsClient] = useState(false);
  
  useEffect(() => {
    setIsClient(true);
  }, []);
  
  if (!isClient && isMobile) return null;

  if (isMobile) {
    return (
      <nav className={cn('flex flex-col gap-1', className)} {...props}>
        {items.map((item) => (
          item.href && !item.isMegaMenu ? (
            <Link
              key={item.label} 
              href={item.href}
              onClick={onLinkClick}
              className={cn(
                'text-md font-medium transition-colors hover:text-primary flex items-center gap-2 py-2.5 px-3 rounded-md',
                pathname === item.href ? 'bg-accent text-primary' : 'text-muted-foreground hover:bg-accent/50'
              )}
            >
              {item.icon && <item.icon className="h-4 w-4" />}
              <span>{item.label}</span>
            </Link>
          ) : item.isMegaMenu && item.contentKey ? ( 
            <div key={item.label} className="py-1">
                <Link
                    href={item.href || '#'} 
                    onClick={(e) => {
                        if (!item.href && onLinkClick) { 
                        } else if (onLinkClick) {
                            onLinkClick(); 
                        }
                    }}
                    className={cn(
                        'text-md font-medium transition-colors hover:text-primary flex items-center justify-between gap-2 py-2.5 px-3 rounded-md',
                        pathname === item.href ? 'bg-accent text-primary' : 'text-muted-foreground hover:bg-accent/50'
                    )}
                >
                    <div className="flex items-center gap-2">
                        {item.icon && <item.icon className="h-4 w-4" />}
                        <span>{item.label}</span>
                    </div>
                    {item.contentKey !== 'history' && <ChevronDown className="h-4 w-4"/>}
                </Link>
                <div className="pl-6 mt-1 space-y-0.5">
                    {item.contentKey === 'categories' && searchCategories.slice(0,3).map(cat => (
                        <Link key={cat.slug} href={`/category/${cat.slug}`} onClick={onLinkClick} className="block text-sm text-muted-foreground hover:text-primary py-1">{cat.name}</Link>
                    ))}
                    {item.contentKey === 'categories' && <Link href="/search?type=lots&tab=categories" onClick={onLinkClick} className="block text-sm text-primary hover:underline py-1">Ver todas categorias</Link>}
                    
                    {item.contentKey === 'modalities' && modalityMegaMenuGroups[0].items.map(mod => (
                          <Link key={mod.href} href={mod.href} onClick={onLinkClick} className="block text-sm text-muted-foreground hover:text-primary py-1">{mod.label}</Link>
                    ))}
                      {item.contentKey === 'consignors' && (consignorMegaMenuGroups[0]?.items || []).slice(0,4).map(con => (
                          <Link key={con.href} href={con.href} onClick={onLinkClick} className="block text-sm text-muted-foreground hover:text-primary py-1">{con.label}</Link>
                    ))}
                    {item.contentKey === 'consignors' && (consignorMegaMenuGroups[0]?.items || []).length > 4 && <Link href="/sellers" onClick={onLinkClick} className="block text-sm text-primary hover:underline py-1">Ver todos comitentes</Link>}
                    
                    {item.contentKey === 'auctioneers' && auctioneers.slice(0,3).map(auc => (
                        <Link key={auc.id} href={`/auctioneers/${auc.slug || auc.publicId || auc.id}`} onClick={onLinkClick} className="block text-sm text-muted-foreground hover:text-primary py-1">{auc.name}</Link>
                    ))}
                      {item.contentKey === 'auctioneers' && auctioneers.length > 3 && <Link href="/auctioneers" onClick={onLinkClick} className="block text-sm text-primary hover:underline py-1">Ver todos leiloeiros</Link>}
                    
                     {item.contentKey === 'history' && HistoryListItemComponent && (
                        <div className="mt-2 space-y-1 max-h-60 overflow-y-auto">
                            {recentlyViewedItems.length === 0 ? (
                                <p className="text-xs text-muted-foreground text-center py-2">Nenhum item visto recentemente.</p>
                            ) : (
                                recentlyViewedItems.slice(0, 5).map(rvItem => (
                                    <HistoryListItemComponent key={rvItem.id} item={rvItem} onClick={onLinkClick} />
                                ))
                            )}
                             <Link href="/dashboard/history" onClick={onLinkClick} className="block text-xs text-primary hover:underline text-center pt-1">Ver Histórico Completo</Link>
                        </div>
                    )}
                </div>
            </div>
          ) : null
        ))}
      </nav>
    );
  }
  

  return (
    <NavigationMenu className={cn("relative z-10 flex items-center justify-start", className)} {...props} delayDuration={0}>
      <NavigationMenuList className={cn("group flex list-none items-center justify-start space-x-1")}>
        {items.map((item) => {
          let megaMenuPropsForTwoColumn: any = null; 
          const currentParamsType = searchParams.get('type');
          const currentCategoryParam = searchParams.get('category');
          const currentAuctionTypeParam = searchParams.get('auctionType');

          if (item.isMegaMenu && item.contentKey && item.twoColumnMegaMenuProps) {
            let finalSidebarItems: MegaMenuLinkItem[] = [];
            let finalViewAllLink = undefined;
            let finalSidebarTitle = item.twoColumnMegaMenuProps.sidebarTitle;

            if (item.contentKey === 'modalities') {
              finalSidebarItems = modalityMegaMenuGroups[0]?.items || [];
              finalSidebarTitle = item.twoColumnMegaMenuProps.sidebarTitle || 'Modalidades de Leilão';
              finalViewAllLink = { href: '/search?type=auctions', label: 'Ver Todos os Leilões', icon: ListChecks };
            } else if (item.contentKey === 'consignors') {
              const consignorItems = (consignorMegaMenuGroups[0]?.items || []);
              finalSidebarItems = consignorItems.slice(0, MAX_ITEMS_IN_TW_COL_SIDEBAR);
              if (consignorItems.length > MAX_ITEMS_IN_TW_COL_SIDEBAR) {
                finalViewAllLink = { href: '/sellers', label: 'Ver Todos Comitentes', icon: Users };
              }
              finalSidebarTitle = item.twoColumnMegaMenuProps.sidebarTitle || 'Principais Comitentes';
            } else if (item.contentKey === 'auctioneers') {
              const mappedAuctioneerItems: MegaMenuLinkItem[] = auctioneers.map(auc => ({
                href: `/auctioneers/${auc.slug || auc.publicId || auc.id}`,
                label: auc.name,
                description: `${auc.city || ''}${auc.city && auc.state ? ' - ' : ''}${auc.state || ''}` || 'Leiloeiro Verificado',
                icon: auc.logoUrl ? <Avatar className="h-5 w-5 border"><AvatarImage src={auc.logoUrl!} alt={auc.name} data-ai-hint={auc.dataAiHintLogo || 'logo leiloeiro'} /><AvatarFallback>{auc.name.charAt(0)}</AvatarFallback></Avatar> : undefined
              }));
              finalSidebarItems = mappedAuctioneerItems.slice(0, MAX_ITEMS_IN_TW_COL_SIDEBAR);
              if (auctioneers.length > MAX_ITEMS_IN_TW_COL_SIDEBAR) {
                finalViewAllLink = { href: '/auctioneers', label: 'Ver Todos Leiloeiros', icon: Landmark };
              }
              finalSidebarTitle = item.twoColumnMegaMenuProps.sidebarTitle || 'Leiloeiros em Destaque';
            }
            
            megaMenuPropsForTwoColumn = {
              ...item.twoColumnMegaMenuProps,
              sidebarTitle: finalSidebarTitle,
              sidebarItems: finalSidebarItems,
              viewAllLink: finalViewAllLink,
            };
          }


          if (item.isMegaMenu && item.contentKey) {
            let isActiveTrigger = false;
            if (item.contentKey === 'categories' && (pathname?.startsWith('/category') || (pathname === '/search' && (currentParamsType === 'lots' || currentCategoryParam)))) {
              isActiveTrigger = true;
            } else if (item.contentKey === 'modalities' && pathname === '/search' && currentParamsType === 'auctions' && currentAuctionTypeParam) {
              isActiveTrigger = true;
            } else if (item.contentKey === 'consignors' && pathname?.startsWith('/sellers')) {
              isActiveTrigger = true;
            } else if (item.contentKey === 'auctioneers' && pathname?.startsWith('/auctioneers')) {
              isActiveTrigger = true;
            } else if (item.contentKey === 'history' && pathname === '/dashboard/history') {
              isActiveTrigger = true;
            }


            return (
              <NavigationMenuItem key={item.label} value={item.label}>
                 <NavigationMenuTrigger
                  className={cn(
                    navigationMenuTriggerStyle(),
                    isActiveTrigger && 'bg-accent text-primary font-semibold'
                  )}
                >
                  {item.icon && <item.icon className="mr-1.5 h-4 w-4" /> } 
                  {item.label}
                </NavigationMenuTrigger>
                <NavigationMenuContent align={item.megaMenuAlign || "start"}>
                  {item.contentKey === 'categories' && <MegaMenuCategories categories={searchCategories} onLinkClick={onLinkClick} />}
                  
                  {megaMenuPropsForTwoColumn && (item.contentKey === 'modalities' || item.contentKey === 'consignors' || item.contentKey === 'auctioneers') && (
                    <TwoColumnMegaMenu {...megaMenuPropsForTwoColumn} onLinkClick={onLinkClick} />
                  )}
                  
                  {item.contentKey === 'history' && HistoryListItemComponent && (
                     <div className="w-80 p-2">
                        <div className="flex justify-between items-center p-2 border-b mb-1">
                            <span className="text-sm font-medium text-foreground flex items-center"><History className="mr-1.5 h-4 w-4"/> Histórico</span>
                        </div>
                        {recentlyViewedItems.length === 0 ? (
                            <p className="text-xs text-muted-foreground text-center py-3">Nenhum item visto recentemente.</p>
                        ) : (
                            <ul className="max-h-80 overflow-y-auto space-y-0.5">
                                {recentlyViewedItems.slice(0, 5).map(rvItem => (
                                <li key={rvItem.id}>
                                    <HistoryListItemComponent item={rvItem} onClick={onLinkClick} />
                                </li>
                                ))}
                            </ul>
                        )}
                        <div className="border-t mt-1 pt-1">
                            <NavigationMenuLink asChild>
                                <Link 
                                    href="/dashboard/history" 
                                    className={cn(navigationMenuTriggerStyle(), "w-full justify-center text-primary hover:underline text-xs py-1 h-auto bg-transparent hover:bg-accent")} 
                                    onClick={onLinkClick}
                                >
                                Ver Histórico Completo
                                </Link>
                            </NavigationMenuLink>
                        </div>
                    </div>
                  )}
                </NavigationMenuContent>
              </NavigationMenuItem>
            );
          }
          return ( 
            item.href ? (
              <NavigationMenuItem key={item.href}>
                <Link href={item.href} legacyBehavior passHref>
                  <NavigationMenuLink
                    className={cn(
                      navigationMenuTriggerStyle(), 
                      pathname === item.href
                        ? 'bg-accent text-primary font-semibold' 
                        : 'text-foreground/80 hover:text-primary hover:bg-accent/70 focus:bg-accent/70' 
                    )}
                    onClick={onLinkClick}
                  >
                    {item.icon && <item.icon className="mr-1.5 h-4 w-4 flex-shrink-0" />}
                    {item.label}
                  </NavigationMenuLink>
                </Link>
              </NavigationMenuItem>
            ) : null
          );
        })}
      </NavigationMenuList>
    </NavigationMenu>
  );
}

```
- src/components/layout/mega-menu-link-list.tsx:
```tsx

'use client';

import * as React from 'react';
import Link from 'next/link';
import { NavigationMenuLink } from '@/components/ui/navigation-menu';
import { cn } from '@/lib/utils';
import { ChevronRight } from 'lucide-react';

export interface MegaMenuLinkItem {
  href: string;
  label: string;
  description?: string;
  icon?: React.ReactNode;
}

export interface MegaMenuGroup {
  title?: string;
  items: MegaMenuLinkItem[];
}

interface MegaMenuLinkListProps {
  groups: MegaMenuGroup[];
  onLinkClick?: () => void;
  gridCols?: string; // e.g., 'md:grid-cols-2'
}

const ListItem = React.forwardRef<
  React.ElementRef<'a'>,
  React.ComponentPropsWithoutRef<'a'> & { icon?: React.ReactNode; title: string }
>(({ className, title, children, icon, ...props }, ref) => {
  return (
    <li>
      <NavigationMenuLink asChild>
        <a
          ref={ref}
          className={cn(
            'flex select-none items-center space-x-3 rounded-md p-3 leading-none no-underline outline-none transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground',
            className
          )}
          {...props}
        >
          {icon && <div className="text-primary flex-shrink-0">{icon}</div>}
          <div className="flex-grow min-w-0">
            <div className="text-sm font-medium leading-none truncate" title={title}>{title}</div>
            {children && (
              <p className="line-clamp-2 text-xs leading-snug text-muted-foreground">
                {children}
              </p>
            )}
          </div>
          {!children && <ChevronRight className="h-4 w-4 text-muted-foreground group-hover:text-primary flex-shrink-0" />}
        </a>
      </NavigationMenuLink>
    </li>
  );
});
ListItem.displayName = 'ListItem';

export default function MegaMenuLinkList({ groups, onLinkClick, gridCols = "md:grid-cols-1" }: MegaMenuLinkListProps) {
  if (!groups || groups.length === 0 || groups.every(g => g.items.length === 0)) {
    return <p className="p-4 text-sm text-muted-foreground">Nenhuma opção disponível.</p>;
  }

  return (
    <div className="p-2">
      {groups.map((group, groupIndex) => (
        (group.items && group.items.length > 0) ? (
          <div key={group.title || `group-${groupIndex}`} className={groupIndex > 0 ? "mt-3 pt-3 border-t border-border/50" : ""}>
            {group.title && (
              <h4 className="px-3 py-2 text-sm font-semibold text-foreground">{group.title}</h4>
            )}
            <ul className={cn("grid w-[300px] gap-1 p-2 md:w-[350px] lg:w-[400px]", gridCols)}>
              {group.items.map((item) => (
                <ListItem
                  key={item.href}
                  title={item.label}
                  href={item.href}
                  icon={item.icon}
                  onClick={onLinkClick}
                >
                  {item.description}
                </ListItem>
              ))}
            </ul>
          </div>
        ) : null
      ))}
    </div>
  );
}

```
- src/components/layout/two-column-mega-menu.tsx:
```tsx
// src/components/layout/two-column-mega-menu.tsx
'use client';

import * as React from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { NavigationMenuLink } from '@/components/ui/navigation-menu';
import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';
import { ChevronRight, ListChecks } from 'lucide-react';

export interface MegaMenuLinkItem {
  href: string;
  label: string;
  description?: string;
  icon?: React.ReactNode;
}

interface TwoColumnMegaMenuProps {
  sidebarTitle?: string;
  sidebarItems: MegaMenuLinkItem[];
  mainContent: {
    imageUrl: string;
    imageAlt: string;
    dataAiHint: string;
    title: string;
    description: string;
    buttonLink: string;
    buttonText: string;
  };
  viewAllLink?: {
    href: string;
    label: string;
    icon?: React.ElementType;
  };
  containerWidthClasses?: string;
  gridClasses?: string; // e.g., "grid-cols-[220px_1fr]"
  onLinkClick?: () => void;
}

const ListItem = React.forwardRef<
  React.ElementRef<'a'>,
  React.ComponentPropsWithoutRef<'a'> & { icon?: React.ReactNode; title: string }
>(({ className, title, children, icon, ...props }, ref) => {
  return (
    <li>
      <NavigationMenuLink asChild>
        <a
          ref={ref}
          className={cn(
            'flex select-none items-center space-x-2 rounded-md p-2.5 leading-none no-underline outline-none transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground',
            className
          )}
          {...props}
        >
          {icon && <div className="text-primary flex-shrink-0">{icon}</div>}
          <div className="flex-grow min-w-0">
            <div className="text-sm font-medium leading-none truncate" title={title}>{title}</div>
            {children && (
              <p className="line-clamp-1 text-xs leading-snug text-muted-foreground">
                {children}
              </p>
            )}
          </div>
          {!children && <ChevronRight className="h-4 w-4 text-muted-foreground group-hover:text-primary flex-shrink-0" />}
        </a>
      </NavigationMenuLink>
    </li>
  );
});
ListItem.displayName = 'ListItem';

export default function TwoColumnMegaMenu({
  sidebarTitle,
  sidebarItems,
  mainContent,
  viewAllLink,
  containerWidthClasses = "md:w-[650px] lg:w-[750px]",
  gridClasses = "grid-cols-[250px_1fr]",
  onLinkClick
}: TwoColumnMegaMenuProps) {

  if (!sidebarItems || sidebarItems.length === 0) {
    return <div className="p-4 text-sm text-muted-foreground">Nenhuma opção disponível.</div>;
  }

  return (
    <div className={cn("grid gap-0 p-0 max-h-[calc(80vh-100px)] min-h-[350px]", containerWidthClasses, gridClasses)}>
      {/* Left Panel: Links List */}
      <div className="bg-background border-r border-border p-3 flex flex-col h-full">
        {sidebarTitle && (
          <h4 className="px-3 py-2 text-md font-semibold text-foreground mb-1 font-headline">{sidebarTitle}</h4>
        )}
        <div className="overflow-y-auto flex-grow pr-1">
          <ul className="space-y-0.5">
            {sidebarItems.map((item) => (
              <ListItem
                key={item.href}
                title={item.label}
                href={item.href}
                icon={item.icon}
                onClick={onLinkClick}
              >
                {item.description}
              </ListItem>
            ))}
          </ul>
        </div>
        {viewAllLink && (
          <div className="mt-auto pt-2 border-t border-border">
            <NavigationMenuLink asChild>
              <Link
                href={viewAllLink.href}
                onClick={onLinkClick}
                className={cn(
                  'flex select-none items-center justify-center rounded-md p-3 text-sm font-semibold text-primary hover:bg-accent hover:text-primary/90 leading-none no-underline outline-none transition-colors focus:bg-accent focus:text-primary/90'
                )}
              >
                {viewAllLink.icon ? <viewAllLink.icon className="h-4 w-4 mr-2"/> : <ListChecks className="h-4 w-4 mr-2"/>}
                <span>{viewAllLink.label}</span>
              </Link>
            </NavigationMenuLink>
          </div>
        )}
      </div>

      {/* Right Panel: Main Content / Promotion */}
      <div className="p-4 md:p-6 h-full overflow-y-auto bg-secondary/30 flex flex-col">
         <div className="flex-grow">
            <h3 className="text-xl font-bold text-primary mb-2 font-headline">{mainContent.title}</h3>
            <p className="text-xs text-muted-foreground mb-4">
                {mainContent.description}
            </p>
        </div>
        
        <div className="mt-auto">
            <Link href={mainContent.buttonLink} onClick={onLinkClick} className="block group">
            <div className="relative aspect-[16/9] bg-muted rounded-md overflow-hidden mb-3">
                <Image 
                src={mainContent.imageUrl} 
                alt={mainContent.imageAlt}
                fill
                className="object-cover transition-transform duration-300 group-hover:scale-105"
                data-ai-hint={mainContent.dataAiHint} 
                />
            </div>
            </Link>
            <Button size="sm" variant="default" className="w-full" asChild>
                <Link href={mainContent.buttonLink} onClick={onLinkClick}>
                    {mainContent.buttonText}
                </Link>
            </Button>
        </div>
      </div>
    </div>
  );
}

```