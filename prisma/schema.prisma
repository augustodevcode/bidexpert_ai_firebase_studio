// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// =================================================
//                 Core Models
// =================================================

model User {
  id                 String                @id @default(cuid())
  email              String                @unique
  fullName           String?
  password           String
  roleId             String?
  habilitationStatus UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType        UserAccountType       @default(PHYSICAL)
  badges             Json?                 @default("[]")

  // Personal Info (PF)
  cpf              String?   @unique
  rgNumber         String?
  rgIssuer         String?
  rgIssueDate      DateTime?
  rgState          String?
  dateOfBirth      DateTime?
  gender           String?
  profession       String?
  nationality      String?
  maritalStatus    String?
  propertyRegime   String?
  spouseName       String?
  spouseCpf        String?

  // Company Info (PJ)
  razaoSocial      String?
  cnpj             String?   @unique
  inscricaoEstadual String?
  website          String?

  // Contact & Address
  cellPhone    String?
  homePhone    String?
  zipCode      String?
  street       String?
  number       String?
  complement   String?
  neighborhood String?
  city         String?
  state        String?

  // Platform Specific
  status         String?   @default("ATIVO") // ATIVO, INATIVO, SUSPENSO
  optInMarketing Boolean   @default(false)
  avatarUrl      String?
  dataAiHint     String?
  activeBids     Int?      @default(0)
  auctionsWon    Int?      @default(0)
  itemsSold      Int?      @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relationships
  role              Role?                 @relation(fields: [roleId], references: [id], onDelete: SetNull)
  sellerProfile     Seller?
  auctioneerProfile Auctioneer?
  documents         UserDocument[]
  bids              Bid[]
  wins              UserWin[]
  notifications     Notification[]
  uploadedMedia     MediaItem[]           @relation("UploadedByUser")
  reviews           Review[]
  questions         LotQuestion[]         @relation("AskedByUser")
  answeredQuestions LotQuestion[]         @relation("AnsweredByUser")
  maxBids           UserLotMaxBid[]
}

model Permission {
  id    String @id @default(cuid())
  name  String @unique
  roles Role[]
}

model Role {
  id          String       @id @default(cuid())
  name        String
  name_normalized String   @unique
  description String?      @db.Text
  permissions Permission[]
  users       User[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model DocumentType {
  id             String         @id @default(cuid())
  name           String         @unique
  description    String?        @db.Text
  isRequired     Boolean        @default(false)
  appliesTo      String // Comma-separated: "PHYSICAL,LEGAL"
  allowedFormats String // Comma-separated: "pdf,jpg,png"
  displayOrder   Int            @default(0)
  userDocuments  UserDocument[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model UserDocument {
  id              String             @id @default(cuid())
  userId          String
  documentTypeId  String
  fileUrl         String?
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  rejectionReason String?            @db.Text
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType DocumentType @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

model MediaItem {
  id                   String        @id @default(cuid())
  fileName             String
  storagePath          String?       @unique
  title                String?
  altText              String?
  caption              String?
  description          String?       @db.Text
  mimeType             String
  sizeBytes            Int
  dimensions           Json?
  urlOriginal          String        @db.Text
  urlThumbnail         String?       @db.Text
  urlMedium            String?       @db.Text
  urlLarge             String?       @db.Text
  dataAiHint           String?
  uploadedBy           String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  // Relationships
  userUploader           User?         @relation("UploadedByUser", fields: [uploadedBy], references: [id], onDelete: SetNull)
  auctionImage           Auction?      @relation("AuctionImage")
  lotImage               Lot?          @relation("LotImage")
  bemImage               Bem?          @relation("BemImage")
  lots                   Lot[] // For gallery
  bens                   Bem[] // For gallery
  logoSeller             Seller?       @relation("LogoSeller")
  logoAuctioneer         Auctioneer?   @relation("LogoAuctioneer")
  logoCategory           LotCategory?  @relation("LogoCategory")
  coverCategory          LotCategory?  @relation("CoverCategory")
  megaMenuCategory       LotCategory?  @relation("MegaMenuCategory")
  iconSubcategory        Subcategory?  @relation("IconSubcategory")
  offerImage             DirectSaleOffer? @relation("OfferImage")
  blogPostImage          BlogPost?     @relation("BlogPostImage")
}


// =================================================
//           Auction & Lot Models
// =================================================

model Auction {
  id                             String        @id @default(cuid())
  publicId                       String        @unique @default(cuid())
  title                          String
  fullTitle                      String?       @db.Text
  description                    String?       @db.Text
  status                         AuctionStatus @default(RASCUNHO)
  auctionType                    AuctionType?
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json          @default("[]")
  city                           String?
  state                          String?
  imageUrl                       String?
  imageMediaId                   String?       @unique
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  automaticBiddingEnabled        Boolean?      @default(false)
  silentBiddingEnabled           Boolean?      @default(false)
  allowMultipleBidsPerUser       Boolean?      @default(true)
  allowInstallmentBids           Boolean?      @default(false)
  softCloseEnabled               Boolean?      @default(false)
  softCloseMinutes               Int?          @default(2)
  estimatedRevenue               Decimal?      @db.Decimal(12, 2)
  achievedRevenue                Decimal?      @db.Decimal(12, 2)
  isFeaturedOnMarketplace        Boolean?      @default(false)
  marketplaceAnnouncementTitle   String?
  additionalTriggers             Json?         @default("[]")
  decrementAmount                Decimal?      @db.Decimal(10, 2)
  decrementIntervalSeconds       Int?
  floorPrice                     Decimal?      @db.Decimal(12, 2)
  autoRelistSettings             Json?
  visits                         Int?          @default(0)
  totalLots                      Int?          @default(0)
  totalHabilitatedUsers          Int?          @default(0)
  dataAiHint                     String?
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt

  // Relationships
  categoryId                     String
  category                       LotCategory   @relation(fields: [categoryId], references: [id])
  auctioneerId                   String
  auctioneer                     Auctioneer    @relation(fields: [auctioneerId], references: [id])
  sellerId                       String?
  seller                         Seller?       @relation(fields: [sellerId], references: [id])
  judicialProcessId              String?       @unique
  judicialProcess                JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  image                          MediaItem?    @relation("AuctionImage", fields: [imageMediaId], references: [id])
  lots                           Lot[]
  bids                           Bid[]
  reviews                        Review[]
  questions                      LotQuestion[]
}

model Lot {
  id                   String      @id @default(cuid())
  publicId             String      @unique @default(cuid())
  number               String?
  title                String
  description          String?     @db.Text
  status               LotStatus   @default(EM_BREVE)
  price                Decimal     @default(0) @db.Decimal(12, 2)
  initialPrice         Decimal?    @db.Decimal(12, 2)
  secondInitialPrice   Decimal?    @db.Decimal(12, 2)
  bidIncrementStep     Decimal?    @db.Decimal(10, 2)
  reservePrice         Decimal?    @db.Decimal(12, 2)
  evaluationValue      Decimal?    @db.Decimal(12, 2)
  debtAmount           Decimal?    @db.Decimal(12, 2)
  itbiValue            Decimal?    @db.Decimal(12, 2)
  lotSpecificAuctionDate DateTime?
  secondAuctionDate    DateTime?
  endDate              DateTime?
  bidsCount            Int?        @default(0)
  views                Int?        @default(0)
  isFeatured           Boolean?    @default(false)
  isExclusive          Boolean?    @default(false)
  discountPercentage   Float?
  additionalTriggers   Json?       @default("[]")
  dataAiHint           String?
  condition            String?
  latitude             Float?
  longitude            Float?
  mapAddress           String?
  mapEmbedUrl          String?     @db.Text
  mapStaticImageUrl    String?
  winningBidTermUrl    String?

  // Relationships
  auctionId     String
  auction       Auction      @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  categoryId    String?
  category      LotCategory? @relation(fields: [categoryId], references: [id])
  subcategoryId String?
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  sellerId      String?
  seller        Seller?      @relation(fields: [sellerId], references: [id])
  cityId        String?
  city          CityInfo?    @relation(fields: [cityId], references: [id])
  stateId       String?
  state         StateInfo?   @relation(fields: [stateId], references: [id])
  bens          Bem[]
  mediaItems    MediaItem[]  // Gallery
  imageMediaId  String?      @unique
  image         MediaItem?   @relation("LotImage", fields: [imageMediaId], references: [id])
  bids          Bid[]
  wins          UserWin[]
  reviews       Review[]
  questions     LotQuestion[]
  maxBids       UserLotMaxBid[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bem {
  id                   String    @id @default(cuid())
  publicId             String    @unique @default(cuid())
  title                String
  description          String?   @db.Text
  status               BemStatus @default(DISPONIVEL)
  evaluationValue      Decimal?  @db.Decimal(12, 2)
  imageUrl             String?
  imageMediaId         String?   @unique
  dataAiHint           String?
  locationCity         String?
  locationState        String?
  address              String?
  latitude             Float?
  longitude            Float?
  // ... (Other specific fields) ...
  hasKey               Boolean?

  // Relationships
  categoryId        String?
  category          LotCategory? @relation(fields: [categoryId], references: [id])
  subcategoryId     String?
  subcategory       Subcategory? @relation(fields: [subcategoryId], references: [id])
  judicialProcessId String?
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  sellerId          String?
  seller            Seller?      @relation(fields: [sellerId], references: [id])
  lots              Lot[]
  mediaItems        MediaItem[]  // Gallery
  image             MediaItem?   @relation("BemImage", fields: [imageMediaId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// =================================================
//      Auctioneer & Seller Profiles
// =================================================

model Seller {
  id                         String            @id @default(cuid())
  publicId                   String            @unique @default(cuid())
  name                       String
  slug                       String            @unique
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  logoMediaId                String?           @unique
  dataAiHintLogo             String?
  description                String?           @db.Text
  memberSince                DateTime?
  rating                     Float?
  activeLotsCount            Int?
  totalSalesValue            Decimal?          @db.Decimal(15, 2)
  auctionsFacilitatedCount   Int?
  isJudicial                 Boolean           @default(false)
  judicialBranchId           String?           @unique
  createdAt                  DateTime          @default(now())
  updatedAt                  DateTime          @updatedAt
  
  // Relationships
  userId                     String?           @unique
  user                       User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  judicialBranch             JudicialBranch?   @relation(fields: [judicialBranchId], references: [id])
  logo                       MediaItem?        @relation("LogoSeller", fields: [logoMediaId], references: [id])
  auctions                   Auction[]
  lots                       Lot[]
  bens                       Bem[]
  directSaleOffers           DirectSaleOffer[]
}

model Auctioneer {
  id                       String    @id @default(cuid())
  publicId                 String    @unique @default(cuid())
  name                     String
  slug                     String    @unique
  registrationNumber       String?
  contactName              String?
  email                    String?
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  logoMediaId              String?   @unique
  dataAiHintLogo           String?
  description              String?   @db.Text
  memberSince              DateTime?
  rating                   Float?
  auctionsConductedCount   Int?
  totalValueSold           Decimal?  @db.Decimal(15, 2)
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  
  // Relationships
  userId                   String?   @unique
  user                     User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  logo                     MediaItem? @relation("LogoAuctioneer", fields: [logoMediaId], references: [id])
  auctions                 Auction[]
}

// =================================================
//        Geographic & Category Models
// =================================================

model StateInfo {
  id        String   @id @default(cuid())
  name      String
  uf        String   @unique
  slug      String   @unique
  cityCount Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  cities    CityInfo[]
  lots      Lot[]
  courts    Court[]
  districts JudicialDistrict[]
}

model CityInfo {
  id        String    @id @default(cuid())
  name      String
  slug      String
  stateId   String
  stateUf   String
  ibgeCode  String?
  lotCount  Int?      @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relationships
  state     StateInfo @relation(fields: [stateId], references: [id])
  lots      Lot[]
}

model LotCategory {
  id                   String        @id @default(cuid())
  name                 String        @unique
  slug                 String        @unique
  description          String?       @db.Text
  itemCount            Int?          @default(0)
  hasSubcategories     Boolean?      @default(false)
  logoMediaId          String?       @unique
  coverImageMediaId    String?       @unique
  megaMenuImageMediaId String?       @unique
  dataAiHintLogo       String?
  dataAiHintCover      String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  // Relationships
  logo                 MediaItem?    @relation("LogoCategory", fields: [logoMediaId], references: [id])
  coverImage           MediaItem?    @relation("CoverCategory", fields: [coverImageMediaId], references: [id])
  megaMenuImage        MediaItem?    @relation("MegaMenuCategory", fields: [megaMenuImageMediaId], references: [id])
  subcategories        Subcategory[]
  lots                 Lot[]
  bens                 Bem[]
  auctions             Auction[]
  directSaleOffers     DirectSaleOffer[]
}

model Subcategory {
  id               String      @id @default(cuid())
  name             String
  slug             String
  parentCategoryId String
  description      String?     @db.Text
  itemCount        Int?        @default(0)
  displayOrder     Int         @default(0)
  iconUrl          String?
  iconMediaId      String?     @unique
  dataAiHintIcon   String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // Relationships
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id])
  lots             Lot[]
  bens             Bem[]
  icon             MediaItem?  @relation("IconSubcategory", fields: [iconMediaId], references: [id])
}


// =================================================
//          Judicial Entity Models
// =================================================

model Court {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  stateUf   String
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  state     StateInfo?         @relation(fields: [stateUf], references: [uf])
  districts JudicialDistrict[]
  processes JudicialProcess[]
}

model JudicialDistrict {
  id        String   @id @default(cuid())
  name      String
  slug      String
  courtId   String
  stateId   String
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  court     Court            @relation(fields: [courtId], references: [id])
  state     StateInfo        @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]
}

model JudicialBranch {
  id          String   @id @default(cuid())
  name        String
  slug        String
  districtId  String
  contactName String?
  phone       String?
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  district     JudicialDistrict  @relation(fields: [districtId], references: [id])
  sellers      Seller[]
  processes    JudicialProcess[]
}

model JudicialProcess {
  id              String   @id @default(cuid())
  publicId        String   @unique @default(cuid())
  processNumber   String   @unique
  isElectronic    Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  courtId         String
  court           Court            @relation(fields: [courtId], references: [id])
  districtId      String
  district        JudicialDistrict @relation(fields: [districtId], references: [id])
  branchId        String
  branch          JudicialBranch   @relation(fields: [branchId], references: [id])
  sellerId        String?
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  parties         ProcessParty[]
  bens            Bem[]
  auctions        Auction[]
}

model ProcessParty {
  id             String         @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType @default(OUTRO)

  // Relationships
  process JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@unique([processId, name, partyType])
}

// =================================================
//      Engagement & Transactional Models
// =================================================

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Decimal  @db.Decimal(12, 2)
  timestamp     DateTime @default(now())

  // Relationships
  lot     Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder  User @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String        @id @default(cuid())
  lotId            String
  userId           String
  winningBidAmount Decimal       @db.Decimal(12, 2)
  winDate          DateTime      @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?

  // Relationships
  lot  Lot  @relation(fields: [lotId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Decimal  @db.Decimal(12, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}


model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())

  // Relationships
  lot     Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                        String   @id @default(cuid())
  lotId                     String
  auctionId                 String
  userId                    String // User who asked
  userDisplayName           String
  questionText              String   @db.Text
  isPublic                  Boolean  @default(true)
  answerText                String?  @db.Text
  answeredAt                DateTime?
  answeredByUserId          String?
  answeredByUserDisplayName String?
  createdAt                 DateTime @default(now())

  // Relationships
  lot              Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction          Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  userAsker        User @relation("AskedByUser", fields: [userId], references: [id], onDelete: Cascade)
  userAnswerer     User? @relation("AnsweredByUser", fields: [answeredByUserId], references: [id], onDelete: SetNull)
}

model DirectSaleOffer {
  id                   String              @id @default(cuid())
  publicId             String              @unique @default(cuid())
  title                String
  description          String              @db.Text
  offerType            DirectSaleOfferType
  status               DirectSaleOfferStatus @default(PENDING_APPROVAL)
  price                Decimal?            @db.Decimal(12, 2)
  minimumOfferPrice    Decimal?            @db.Decimal(12, 2)
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?             @unique
  dataAiHint           String?
  expiresAt            DateTime?
  views                Int?                @default(0)
  proposalsCount       Int?                @default(0)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt

  // Relationships
  categoryId           String
  category             LotCategory         @relation(fields: [categoryId], references: [id])
  sellerId             String
  seller               Seller              @relation(fields: [sellerId], references: [id])
  image                MediaItem?          @relation("OfferImage", fields: [imageMediaId], references: [id])
}

// =================================================
//        Platform & Content Models
// =================================================

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ContactMessage {
    id        String   @id @default(cuid())
    name      String
    email     String
    subject   String
    message   String   @db.Text
    isRead    Boolean  @default(false)
    createdAt DateTime @default(now())
}

model BlogPost {
  id            String   @id @default(cuid())
  title         String
  slug          String   @unique
  content       String   @db.Text
  authorId      String
  authorName    String
  publishedAt   DateTime
  featuredImage String?  @unique
  tags          String   // Comma-separated string
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  image         MediaItem? @relation("BlogPostImage", fields: [featuredImage], references: [id], onDelete: SetNull)
}

model DocumentTemplate {
  id        String              @id @default(cuid())
  name      String              @unique
  type      DocumentTemplateType
  content   String              @db.Text
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model PlatformSettings {
  id                             String @id @default("global")
  siteTitle                      String?
  siteTagline                    String?
  galleryImageBasePath           String?
  storageProvider                String?
  firebaseStorageBucket          String?
  activeThemeName                String?
  themes                         Json?
  platformPublicIdMasks          Json?
  homepageSections               Json?
  mentalTriggerSettings          Json?
  sectionBadgeVisibility         Json?
  mapSettings                    Json?
  biddingSettings                Json?
  searchPaginationType           String?
  searchItemsPerPage             Int?
  searchLoadMoreCount            Int?
  showCountdownOnLotDetail       Boolean?
  showCountdownOnCards           Boolean?
  showRelatedLotsOnLotDetail     Boolean?
  relatedLotsCount               Int?
  defaultUrgencyTimerHours       Int?
  defaultListItemsPerPage        Int?
  variableIncrementTable         Json?
  updatedAt                      DateTime @updatedAt
}


// =================================================
//                      Enums
// =================================================

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RETIRADO
  CANCELADO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ACTIVE
  SOLD
  EXPIRED
  PENDING_APPROVAL
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}
