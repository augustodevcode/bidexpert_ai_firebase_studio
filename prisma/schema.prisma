// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                  String   @id @default(uuid())
  email               String   @unique
  fullName            String
  password            String
  roleId              String?
  sellerId            String?  @unique
  habilitationStatus  String?  @default("PENDENTE_DOCUMENTOS")
  avatarUrl           String?
  dataAiHint          String?
  optInMarketing      Boolean? @default(false)
  badges              Json?

  // Personal Info
  cpf                 String?
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?

  // Address
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?

  // Legal Person Info
  accountType         String?
  razaoSocial         String?
  cnpj                String?
  inscricaoEstadual   String?
  website             String?

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relationships
  role                 Role?         @relation(fields: [roleId], references: [id], onDelete: SetNull)
  documents            UserDocument[]
  bids                 Bid[]
  wins                 UserWin[]
  maxBids              UserLotMaxBid[]
  notifications        Notification[]
  reviews              Review[]
  questions            LotQuestion[]
  sellerProfile        Seller?
  uploadedMedia        MediaItem[]   @relation("UploadedBy")
  answeredQuestions    LotQuestion[] @relation("AnsweredBy")
}

model Permission {
  id          String @id @default(uuid())
  name        String @unique
  description String?
  roles       Role[]
}

model Role {
  id              String       @id @default(uuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  users           User[]
  permissions     Permission[]
}

model UserDocument {
  id                String       @id @default(uuid())
  userId            String
  documentTypeId    String
  fileUrl           String
  fileName          String?
  status            String       @default("NOT_SENT") // UserDocumentStatus
  uploadDate        DateTime?
  analysisDate      DateTime?
  analystId         String?
  rejectionReason   String?      @db.Text
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  // Relationships
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType      DocumentType @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id             String         @id @default(uuid())
  name           String         @unique
  description    String?
  isRequired     Boolean        @default(true)
  appliesTo      String?        // e.g., "PHYSICAL,LEGAL"
  allowedFormats String?        // e.g., "pdf,jpg,png"
  displayOrder   Int            @default(0)
  userDocuments  UserDocument[]
}

model Auction {
  id                             String    @id @default(uuid())
  publicId                       String    @unique
  title                          String
  fullTitle                      String?
  description                    String?   @db.Text
  status                         String // AuctionStatus
  auctionType                    String? // AuctionType
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json?
  city                           String?
  state                          String?
  imageUrl                       String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  dataAiHint                     String?
  visits                         Int?      @default(0)
  initialOffer                   Float?
  totalLots                      Int?      @default(0)
  bidsCount                      Int?      @default(0)
  isFeaturedOnMarketplace        Boolean?  @default(false)
  marketplaceAnnouncementTitle   String?
  automaticBiddingEnabled        Boolean?  @default(false)
  silentBiddingEnabled           Boolean?  @default(false)
  allowMultipleBidsPerUser       Boolean?  @default(true)
  allowInstallmentBids           Boolean?  @default(false)
  softCloseEnabled               Boolean?  @default(false)
  softCloseMinutes               Int?
  estimatedRevenue               Float?
  achievedRevenue                Float?
  totalHabilitatedUsers          Int?
  additionalTriggers             String?
  vehicleLocation                String?
  sellingBranch                  String?
  createdAt                      DateTime  @default(now())
  updatedAt                      DateTime  @updatedAt

  // Foreign Keys
  categoryId                     String?
  auctioneerId                   String
  sellerId                       String?
  judicialProcessId              String?   @unique
  imageMediaId                   String?   @unique

  // Relationships
  category                       LotCategory?           @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  auctioneer                     Auctioneer             @relation(fields: [auctioneerId], references: [id])
  seller                         Seller?                @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  judicialProcess                JudicialProcess?       @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  image                          MediaItem?             @relation("AuctionImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  lots                           Lot[]
  bids                           Bid[]
  reviews                        Review[]
  questions                      LotQuestion[]
}

model Lot {
  id                             String         @id @default(uuid())
  publicId                       String         @unique
  number                         String?
  title                          String
  description                    String?        @db.Text
  status                         String // LotStatus
  price                          Float
  initialPrice                   Float?
  secondInitialPrice             Float?
  bidIncrementStep               Float?
  views                          Int?           @default(0)
  bidsCount                      Int?           @default(0)
  imageUrl                       String?
  galleryImageUrls               Json?
  condition                      String?
  dataAiHint                     String?
  isFeatured                     Boolean?       @default(false)
  isExclusive                    Boolean?       @default(false)
  discountPercentage             Float?
  additionalTriggers             Json?
  latitude                       Float?
  longitude                      Float?
  mapAddress                     String?
  mapEmbedUrl                    String?
  mapStaticImageUrl              String?
  judicialProcessNumber          String?
  courtDistrict                  String?
  courtName                      String?
  publicProcessUrl               String?
  propertyRegistrationNumber     String?
  propertyLiens                  String?        @db.Text
  knownDebts                     String?        @db.Text
  additionalDocumentsInfo        String?        @db.Text
  reservePrice                   Float?
  evaluationValue                Float?
  debtAmount                     Float?
  itbiValue                      Float?
  endDate                        DateTime?
  lotSpecificAuctionDate         DateTime?
  secondAuctionDate              DateTime?
  createdAt                      DateTime       @default(now())
  updatedAt                      DateTime       @updatedAt

  // Foreign Keys
  auctionId                      String
  categoryId                     String?
  subcategoryId                  String?
  stateId                        String?
  cityId                         String?
  sellerId                       String?
  auctioneerId                   String?
  imageMediaId                   String?        @unique

  // Relationships
  auction                        Auction        @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                       LotCategory?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory                    Subcategory?   @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  state                          StateInfo?     @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city                           CityInfo?      @relation(fields: [cityId], references: [id], onDelete: SetNull)
  image                          MediaItem?     @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  bens                           Bem[]
  mediaItems                     MediaItem[]
  bids                           Bid[]
  wins                           UserWin[]
  reviews                        Review[]
  questions                      LotQuestion[]
  maxBids                        UserLotMaxBid[]
}

model Seller {
  id                         String   @id @default(uuid())
  publicId                   String   @unique
  name                       String   @unique
  slug                       String   @unique
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  logoUrl                    String?
  dataAiHintLogo             String?
  description                String?  @db.Text
  memberSince                DateTime?
  rating                     Float?
  activeLotsCount            Int?
  totalSalesValue            Float?
  auctionsFacilitatedCount   Int?
  isJudicial                 Boolean  @default(false)
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  // Foreign Keys
  userId                     String?        @unique
  judicialBranchId           String?        @unique
  logoMediaId                String?        @unique

  // Relationships
  user                       User?            @relation(fields: [userId], references: [id])
  auctions                   Auction[]
  judicialProcesses          JudicialProcess[]
  bens                       Bem[]
  directSaleOffers           DirectSaleOffer[]
  judicialBranch             JudicialBranch?    @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  blogPosts                  BlogPost[]
  logo                       MediaItem?       @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
}

model Auctioneer {
  id                       String   @id @default(uuid())
  publicId                 String   @unique
  name                     String   @unique
  slug                     String   @unique
  registrationNumber       String?
  contactName              String?
  email                    String?
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  logoUrl                  String?
  dataAiHintLogo           String?
  description              String?  @db.Text
  memberSince              DateTime?
  rating                   Float?
  auctionsConductedCount   Int?
  totalValueSold           Float?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  
  // Foreign Keys
  logoMediaId              String?        @unique

  // Relationships
  auctions                 Auction[]
  logo                     MediaItem?     @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
}

model Court {
  id          String             @id @default(uuid())
  name        String             @unique
  slug        String             @unique
  stateUf     String
  website     String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  
  // Relationships
  districts   JudicialDistrict[]
  processes   JudicialProcess[]
}

model JudicialDistrict {
  id        String             @id @default(uuid())
  name      String
  slug      String
  stateId   String
  courtId   String
  zipCode   String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  // Relationships
  state     StateInfo          @relation(fields: [stateId], references: [id], onDelete: Cascade)
  court     Court              @relation(fields: [courtId], references: [id], onDelete: Cascade)
  branches  JudicialBranch[]
  processes JudicialProcess[]

  @@unique([name, stateId, courtId])
}

model JudicialBranch {
  id           String             @id @default(uuid())
  name         String
  slug         String
  districtId   String
  contactName  String?
  phone        String?
  email        String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  // Relationships
  district     JudicialDistrict   @relation(fields: [districtId], references: [id], onDelete: Cascade)
  processes    JudicialProcess[]
  seller       Seller?

  @@unique([name, districtId])
}

model JudicialProcess {
  id                  String           @id @default(uuid())
  publicId            String           @unique
  processNumber       String           @unique
  isElectronic        Boolean
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  // Foreign Keys
  courtId             String
  districtId          String
  branchId            String
  sellerId            String?

  // Relationships
  court          Court            @relation(fields: [courtId], references: [id])
  district       JudicialDistrict @relation(fields: [districtId], references: [id])
  branch         JudicialBranch   @relation(fields: [branchId], references: [id])
  seller         Seller?          @relation(fields: [sellerId], references: [id])
  parties        ProcessParty[]
  bens           Bem[]
  auction        Auction?
}

model ProcessParty {
  id             String   @id @default(uuid())
  processId      String
  name           String
  partyType      String
  documentNumber String?

  // Relationships
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@unique([processId, name, partyType])
}

model LotCategory {
  id                 String       @id @default(uuid())
  name               String       @unique
  slug               String       @unique
  description        String?
  itemCount          Int?
  hasSubcategories   Boolean      @default(false)
  logoUrl            String?
  dataAiHintLogo     String?
  coverImageUrl      String?
  dataAiHintCover    String?
  megaMenuImageUrl   String?
  dataAiHintMegaMenu String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  // Foreign Keys
  logoMediaId        String?      @unique
  coverImageMediaId  String?      @unique
  megaMenuImageMediaId String?    @unique

  // Relationships
  logo              MediaItem?   @relation("CategoryLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  coverImage        MediaItem?   @relation("CategoryCover", fields: [coverImageMediaId], references: [id], onDelete: SetNull)
  megaMenuImage     MediaItem?   @relation("CategoryMegaMenu", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull)
  lots              Lot[]
  bens              Bem[]
  subcategories     Subcategory[]
  auctions          Auction[]
}

model Subcategory {
  id                 String       @id @default(uuid())
  name               String
  slug               String       @unique
  description        String?
  parentCategoryId   String
  displayOrder       Int          @default(0)
  itemCount          Int?         @default(0)
  iconUrl            String?
  dataAiHintIcon     String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  // Foreign Keys
  iconMediaId        String?      @unique

  // Relationships
  parentCategory     LotCategory  @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots               Lot[]
  bens               Bem[]
  icon               MediaItem?   @relation("SubcategoryIcon", fields: [iconMediaId], references: [id], onDelete: SetNull)
}

model Bem {
  id                         String   @id @default(uuid())
  publicId                   String   @unique
  title                      String
  description                String?  @db.Text
  status                     String   // BemStatus
  evaluationValue            Float?
  imageUrl                   String?
  galleryImageUrls             Json?
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  // Veiculo
  plate                      String?
  make                       String?
  model                      String?
  version                    String?
  year                       Int?
  modelYear                  Int?
  mileage                    Int?
  color                      String?
  fuelType                   String?
  transmissionType           String?
  bodyType                   String?
  vin                        String?
  renavam                    String?
  enginePower                String?
  numberOfDoors              Int?
  vehicleOptions             String?  @db.Text
  detranStatus               String?
  debts                      String?  @db.Text
  runningCondition           String?
  bodyCondition              String?
  tiresCondition             String?
  hasKey                     Boolean?

  // Imovel
  propertyType               String?
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  area                       Float?
  bedrooms                   Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  amenities                  Json?

  // Maquinas e Equipamentos
  serialNumber               String?
  hoursUsed                  Int?
  engineType                 String?
  capacityOrPower            String?
  maintenanceHistory         String?  @db.Text
  installationLocation       String?
  compliesWithNR             String?
  operatingLicenses          String?

  // Semoventes
  breed                      String?
  age                        String?
  sex                        String?
  weight                     String?
  individualId               String?
  purpose                    String?
  sanitaryCondition          String?
  lineage                    String?
  isPregnant                 Boolean?
  specialSkills              String?
  gtaDocument                String?
  breedRegistryDocument      String?

  // Foreign Keys
  categoryId                 String
  subcategoryId              String?
  judicialProcessId          String?
  sellerId                   String?
  imageMediaId               String?   @unique

  // Relationships
  category        LotCategory?     @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller          Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  image           MediaItem?       @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  lots            Lot[]
}

model MediaItem {
  id                         String   @id @default(uuid())
  fileName                   String
  storagePath                String   @unique
  uploadedAt                 DateTime @default(now())
  title                      String?
  altText                    String?
  caption                    String?
  description                String?  @db.Text
  mimeType                   String
  sizeBytes                  Int
  dimensions                 Json?
  urlOriginal                String   @db.Text
  urlThumbnail               String?  @db.Text
  urlMedium                  String?  @db.Text
  urlLarge                   String?  @db.Text
  linkedLotIds               String[] // Array of Lot IDs
  dataAiHint                 String?
  
  // Foreign Keys
  uploadedBy                 String?

  // Relationships
  uploader                   User?             @relation("UploadedBy", fields: [uploadedBy], references: [id], onDelete: SetNull)
  lotAsImage                 Lot?              @relation("LotImage")
  bemAsImage                 Bem?              @relation("BemImage")
  sellerAsLogo               Seller?           @relation("SellerLogo")
  auctioneerAsLogo           Auctioneer?       @relation("AuctioneerLogo")
  categoryAsLogo             LotCategory?      @relation("CategoryLogo")
  categoryAsCover            LotCategory?      @relation("CategoryCover")
  categoryAsMegaMenu         LotCategory?      @relation("CategoryMegaMenu")
  subcategoryAsIcon          Subcategory?      @relation("SubcategoryIcon")
  auctionAsImage             Auction?          @relation("AuctionImage")
  directSaleOfferAsImage     DirectSaleOffer?  @relation("DirectSaleOfferImage")
}

model DirectSaleOffer {
  id                   String            @id @default(uuid())
  publicId             String            @unique
  title                String
  description          String            @db.Text
  offerType            String // DirectSaleOfferType
  status               String // DirectSaleOfferStatus
  price                Float?
  minimumOfferPrice    Float?
  locationCity         String?
  locationState        String?
  imageUrl             String?           @db.Text
  dataAiHint           String?
  galleryImageUrls     Json?
  expiresAt            DateTime?
  views                Int?              @default(0)
  proposalsCount       Int?              @default(0)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  
  // Foreign Keys
  categoryId           String
  sellerId             String
  imageMediaId         String?           @unique

  // Relationships
  category             LotCategory       @relation(fields: [categoryId], references: [id])
  seller               Seller            @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  image                MediaItem?        @relation("DirectSaleOfferImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
}

model StateInfo {
  id        String             @id @default(uuid())
  name      String             @unique
  slug      String             @unique
  uf        String             @unique
  cityCount Int?               @default(0)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  
  // Relationships
  cities    CityInfo[]
  lots      Lot[]
  courts    Court[]
  districts JudicialDistrict[]
}

model CityInfo {
  id        String   @id @default(uuid())
  name      String
  slug      String
  stateId   String
  stateUf   String
  ibgeCode  String?
  lotCount  Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  state     StateInfo @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots      Lot[]
}

model Bid {
  id            String   @id @default(uuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())

  // Relationships
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String   @id @default(uuid())
  lotId            String   @unique // A lot can only be won once
  userId           String
  winningBidAmount Float
  winDate          DateTime @default(now())
  paymentStatus    String   @default("PENDENTE") // PaymentStatus
  invoiceUrl       String?

  // Relationships
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot              Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model Review {
  id              String   @id @default(uuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String   @db.Text
  createdAt       DateTime @default(now())

  // Relationships
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot              Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction          Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                      String   @id @default(uuid())
  lotId                   String
  auctionId               String
  userId                  String
  userDisplayName         String
  questionText            String   @db.Text
  answerText              String?  @db.Text
  answeredAt              DateTime?
  answeredByUserId        String?
  isPublic                Boolean  @default(true)
  createdAt               DateTime @default(now())

  // Relationships
  user                    User     @relation("QuestionAskedBy", fields: [userId], references: [id], onDelete: Cascade)
  lot                     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction                 Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  answeredByUser          User?    @relation("AnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}


model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())
  
  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BlogPost {
  id            String   @id @default(uuid())
  title         String
  slug          String   @unique
  content       String   @db.Text
  authorId      String   // Can be a general author or linked to a seller/user
  publishedAt   DateTime
  tags          String?
  featuredImage String?
  
  // Foreign Keys
  sellerId      String?

  // Relationships
  seller        Seller? @relation(fields: [sellerId], references: [id])
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model PlatformSettings {
  id                             String @id @default("global")
  siteTitle                      String?
  siteTagline                    String?
  galleryImageBasePath           String?
  storageProvider                String? @default("local") // StorageProviderType
  firebaseStorageBucket          String?
  activeThemeName                String?
  themes                         Json?
  platformPublicIdMasks          Json?
  homepageSections               Json?
  mentalTriggerSettings          Json?
  sectionBadgeVisibility         Json?
  mapSettings                    Json?
  biddingSettings                Json?
  searchPaginationType           String? @default("loadMore") // SearchPaginationType
  searchItemsPerPage             Int?    @default(12)
  searchLoadMoreCount            Int?    @default(12)
  showCountdownOnLotDetail       Boolean? @default(true)
  showCountdownOnCards           Boolean? @default(true)
  showRelatedLotsOnLotDetail     Boolean? @default(true)
  relatedLotsCount               Int?    @default(5)
  variableIncrementTable         Json?
  defaultListItemsPerPage        Int?    @default(10)
  updatedAt                      DateTime @updatedAt
}

// ENUMS

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum AccountType {
    PHYSICAL
    LEGAL
    DIRECT_SALE_CONSIGNOR
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum StorageProviderType {
  local
  firebase
}

enum SearchPaginationType {
  loadMore
  numberedPages
}

