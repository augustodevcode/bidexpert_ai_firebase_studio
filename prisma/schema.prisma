
// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

/// Enums para a aplicação

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

// Modelos

model User {
  id                  String   @id @default(uuid())
  email               String   @unique
  password            String?
  fullName            String?
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType  @default(PHYSICAL)
  avatarUrl           String?
  dataAiHint          String?     @db.VarChar(100)
  badges              Json?
  roles               UsersOnRoles[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  cpf                 String? @unique
  cellPhone           String?
  dateOfBirth         DateTime?
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  optInMarketing      Boolean? @default(false)
  
  razaoSocial       String?
  cnpj              String? @unique
  inscricaoEstadual String?
  website           String?
  responsibleName   String?
  responsibleCpf    String?

  documents            UserDocument[]
  notifications        Notification[]
  bids                 Bid[]
  wins                 UserWin[]
  maxBids              UserLotMaxBid[]
  uploadedMedia        MediaItem[]      @relation("UploadedBy")
  answeredQuestions    LotQuestion[]    @relation("AnsweredByUser")
  sellerProfile        Seller?
  auctioneerProfile    Auctioneer?
  habilitations        AuctionHabilitation[]
  askedQuestions       LotQuestion[] @relation("AskedByUser")
  wonLots              Lot[] @relation("LotWinner")
}

model Role {
  id              String   @id @default(uuid())
  name            String
  nameNormalized  String   @unique
  description     String?  @db.Text
  permissions     Json?
  users           UsersOnRoles[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String // "system", "admin-user-id", etc.

  @@id([userId, roleId])
}

model State {
  id              String    @id @default(uuid())
  name            String
  uf              String    @unique
  slug            String    @unique
  cityCount       Int?      @default(0)
  cities          City[]
  judicialDistricts JudicialDistrict[]
  auctions        Auction[]
  lots            Lot[]
  courts          Court[]
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
}

model City {
  id        String    @id @default(uuid())
  name      String
  slug      String?
  state     State     @relation(fields: [stateId], references: [id])
  stateId   String
  stateUf   String?
  ibgeCode  String?   @unique
  lotCount  Int?      @default(0)
  auctions  Auction[]
  lots      Lot[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  
  @@index([stateId])
}

model Court {
  id                String    @id @default(uuid())
  name              String
  slug              String?   @unique
  state             State?    @relation(fields: [stateId], references: [id])
  stateId           String?
  website           String?
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt
}

model JudicialDistrict {
  id                String    @id @default(uuid())
  name              String
  slug              String?   @unique
  court             Court?    @relation(fields: [courtId], references: [id])
  courtId           String?
  state             State?    @relation(fields: [stateId], references: [id])
  stateId           String?
  zipCode           String?
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt
}

model JudicialBranch {
  id                String    @id @default(uuid())
  name              String
  slug              String?   @unique
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  sellers           Seller[]
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt
}

model Seller {
  id                String    @id @default(uuid())
  publicId          String?   @unique
  slug              String?   @unique
  name              String    @unique
  contactName       String?
  email             String?
  phone             String?
  address           String?
  city              String?
  state             String?
  zipCode           String?
  website           String?
  logoUrl           String?
  logoMediaId       String?
  dataAiHintLogo    String?   @db.VarChar(100)
  description       String?   @db.Text
  isJudicial        Boolean   @default(false)
  user              User?     @relation(fields: [userId], references: [id])
  userId            String?   @unique
  judicialBranch    JudicialBranch? @relation(fields: [judicialBranchId], references: [id])
  judicialBranchId  String?   @unique
  auctions          Auction[]
  bens              Bem[]
  directSaleOffers  DirectSaleOffer[]
  lots              Lot[]
  judicialProcesses JudicialProcess[]
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt
}

model Auctioneer {
  id                  String    @id @default(uuid())
  publicId            String?   @unique
  slug                String?   @unique
  name                String
  registrationNumber  String?
  contactName         String?
  email               String?
  phone               String?
  address             String?
  city                String?
  state               String?
  zipCode             String?
  website             String?
  logoUrl             String?
  logoMediaId         String?
  dataAiHintLogo      String?   @db.VarChar(100)
  description         String?   @db.Text
  user                User?     @relation(fields: [userId], references: [id])
  userId              String?   @unique
  auctions            Auction[]
  lots                Lot[]
  createdAt           DateTime? @default(now())
  updatedAt           DateTime? @updatedAt
}

model JudicialProcess {
  id            String    @id @default(uuid())
  publicId      String?   @unique
  processNumber String
  isElectronic  Boolean   @default(true)
  court         Court?    @relation(fields: [courtId], references: [id])
  courtId       String?
  district      JudicialDistrict? @relation(fields: [districtId], references: [id])
  districtId    String?
  branch        JudicialBranch? @relation(fields: [branchId], references: [id])
  branchId      String?
  seller        Seller?            @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId      String?
  parties       JudicialParty[]
  bens          Bem[]
  auctions      Auction[]
  mediaItems    MediaItem[]
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
}

model JudicialParty {
  id             String          @id @default(uuid())
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType
}

model AuctionHabilitation {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId String
  status    String   @default("APPROVED") // PENDING, APPROVED, REJECTED
  requestedAt DateTime @default(now())
  processedAt DateTime?

  @@id([userId, auctionId])
}

model Bem {
  id                   String @id @default(uuid())
  publicId             String? @unique
  title                String
  description          String? @db.Text
  status               String @default("DISPONIVEL")
  categoryId           String
  category             LotCategory @relation(fields: [categoryId], references: [id])
  subcategoryId        String?
  subcategory          Subcategory? @relation(fields: [subcategoryId], references: [id])
  judicialProcessId    String?
  judicialProcess      JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  sellerId             String?
  seller               Seller? @relation(fields: [sellerId], references: [id])
  evaluationValue      Decimal? @db.Decimal(15, 2)
  imageUrl             String?
  imageMediaId         String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  dataAiHint           String? @db.VarChar(100)
  locationCity         String?
  locationState        String?
  address              String?
  latitude             Decimal? @db.Decimal(10, 8)
  longitude            Decimal? @db.Decimal(11, 8)
  lots                 LotBens[]
  createdAt            DateTime? @default(now())
  updatedAt            DateTime? @updatedAt
}

model DirectSaleOffer {
  id                  String   @id @default(uuid())
  publicId            String?  @unique
  title               String
  description         String?  @db.Text
  offerType           DirectSaleOfferType
  price               Decimal? @db.Decimal(15, 2)
  minimumOfferPrice   Decimal? @db.Decimal(15, 2)
  status              DirectSaleOfferStatus @default("ACTIVE")
  category            LotCategory @relation(fields: [categoryId], references: [id])
  categoryId          String
  seller              Seller   @relation(fields: [sellerId], references: [id])
  sellerId            String
  sellerName          String?
  sellerLogoUrl       String?
  dataAiHintSellerLogo String?   @db.VarChar(100)
  locationCity        String?
  locationState       String?
  imageUrl            String?
  imageMediaId        String?
  dataAiHint          String?  @db.VarChar(100)
  galleryImageUrls    Json?
  mediaItemIds        Json?
  itemsIncluded       Json?
  views               Int?     @default(0)
  expiresAt           DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model AuctionStage {
  id            String  @id @default(uuid())
  auction       Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  name          String
  startDate     DateTime
  endDate       DateTime
  initialPrice  Decimal? @db.Decimal(15, 2)
  statusText    String?
  lotDetails    LotAuctionStageDetails[]

  @@index([auctionId])
}

model LotAuctionStageDetails {
  lot           Lot           @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  auctionStage  AuctionStage  @relation(fields: [auctionStageId], references: [id], onDelete: Cascade)
  auctionStageId String
  initialBid    Decimal       @db.Decimal(15, 2)
  bidIncrement  Decimal?      @db.Decimal(10, 2)
  evaluationValue    Decimal?         @comment("Valor de avaliação específico para esta praça")
  
  @@id([lotId, auctionStageId])
}

model Auction {
  id                             String        @id @default(uuid())
  publicId                       String?       @unique
  slug                           String?       @unique
  title                          String
  description                    String?       @db.Text
  status                         AuctionStatus @default(RASCUNHO)
  auctionDate                    DateTime?
  endDate                        DateTime?
  initialOffer                   Decimal?      @db.Decimal(15, 2)
  visits                         Int?          @default(0)
  isFavorite                     Boolean       @default(false)
  imageUrl                       String?
  imageMediaId                   String?
  dataAiHint                     String?       @db.VarChar(100)
  documentsUrl                   String?
  judicialProcess                JudicialProcess?     @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  judicialProcessId              String?
  court                          Court?                 @relation(fields: [courtId], references: [id], onDelete: SetNull)
  courtId                        String?
  district                       JudicialDistrict?      @relation(fields: [districtId], references: [id], onDelete: SetNull)
  districtId                     String?
  branch                         JudicialBranch?        @relation(fields: [branchId], references: [id], onDelete: SetNull)
  branchId                       String?
  city                           City?                 @relation(fields: [cityId], references: [id])
  cityId                         String?
  state                          State?            @relation(fields: [stateId], references: [id])
  stateId                        String?
  category                       LotCategory?           @relation(fields: [categoryId], references: [id])
  categoryId                     String?
  auctioneer                     Auctioneer?            @relation(fields: [auctioneerId], references: [id])
  auctioneerId                   String?
  seller                         Seller?                @relation(fields: [sellerId], references: [id])
  sellerId                       String?
  lots                           Lot[]
  auctionStages                  AuctionStage[]
  habilitations                  AuctionHabilitation[]
  bids                           Bid[]
  questions                      LotQuestion[]
  // Settings
  auctionType                    AuctionType?
  auctionMethod                  AuctionMethod?         @default(STANDARD)
  participation                  AuctionParticipation?  @default(ONLINE)
  // Advanced Features
  additionalTriggers             Json?
  decrementAmount                Decimal?
  decrementIntervalSeconds       Int?
  floorPrice                     Decimal?
  softCloseEnabled               Boolean                @default(false)
  softCloseMinutes               Int?                   @default(2)
  automaticBiddingEnabled        Boolean                @default(false)
  allowInstallmentBids           Boolean                @default(true)
  silentBiddingEnabled           Boolean                @default(false)
  allowMultipleBidsPerUser       Boolean                @default(true)
  // Marketplace
  isFeaturedOnMarketplace        Boolean                @default(false)
  marketplaceAnnouncementTitle   String?
  // Timestamps
  createdAt                      DateTime?              @default(now())
  updatedAt                      DateTime?              @updatedAt
}

model Lot {
  id                         String   @id @default(uuid())
  publicId                   String?  @unique
  auction                    Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                  String
  number                     String?
  title                      String
  description                String?  @db.Text
  price                      Decimal  @db.Decimal(15, 2)
  bids                       Bid[]
  winner                     User?                    @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId                   String?
  winningBidTermUrl          String?
  status                     LotStatus
  bidsCount                  Int?     @default(0)
  views                      Int?     @default(0)
  isFeatured                 Boolean  @default(false)
  isExclusive                Boolean  @default(false)
  discountPercentage         Int?
  additionalTriggers         Json?
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  type                       String
  category                   LotCategory?             @relation(fields: [categoryId], references: [id])
  categoryId                 String?
  subcategory                Subcategory?             @relation(fields: [subcategoryId], references: [id])
  subcategoryId              String?
  auctionName                String?
  seller                     Seller?                  @relation(fields: [sellerId], references: [id])
  sellerId                   String?
  sellerName                 String?
  auctioneer                 Auctioneer?              @relation(fields: [auctioneerId], references: [id])
  auctioneerId               String?
  city                       City?                    @relation(fields: [cityId], references: [id])
  cityId                     String?
  state                      State?                   @relation(fields: [stateId], references: [id])
  stateId                    String?
  cityName                   String?
  stateUf                    String?
  latitude                   Decimal? @db.Decimal(10, 8)
  longitude                  Decimal? @db.Decimal(11, 8)
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?
  endDate                    DateTime?
  auctionDate                DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  dataAiHint                 String?  @db.VarChar(100)
  allowInstallmentBids       Boolean? @default(false)
  createdAt                  DateTime? @default(now())
  updatedAt                  DateTime? @updatedAt
  bens                       LotBens[]
  questions                  LotQuestion[]
  reviews                    Review[]
  maxBids                    UserLotMaxBid[]
  win                        UserWin?
  stageDetails               LotAuctionStageDetails[]
  inheritedMediaFromBemId    String?
  
  @@index([auctionId])
}

model LotBens {
  lot   Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId String
  bem   Bem  @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId String

  @@id([lotId, bemId])
}

model UserWin {
  id               String   @id @default(uuid())
  lot              Lot      @relation(fields: [lotId], references: [id])
  lotId            String   @unique
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  winningBidAmount Decimal  @db.Decimal(15, 2)
  winDate          DateTime @default(now())
  paymentStatus    PaymentStatus
  invoiceUrl       String?
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model Bid {
  id            String   @id @default(uuid())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId      String
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())

  @@index([lotId])
}

model LotQuestion {
  id                      String   @id @default(uuid())
  lot                     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId                   String
  auction                 Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId               String
  user                    User     @relation("AskedByUser", fields: [userId], references: [id])
  userId                  String
  userDisplayName         String
  questionText            String   @db.Text
  answerText              String?  @db.Text
  isPublic                Boolean  @default(true)
  answeredBy              User?    @relation("AnsweredByUser", fields: [answeredByUserId], references: [id])
  answeredByUserId        String?
  answeredByUserDisplayName String?
  createdAt               DateTime @default(now())
  answeredAt              DateTime?
}

model Review {
  id              String   @id @default(uuid())
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentType {
  id          String         @id @default(uuid())
  name        String
  description String?
  isRequired  Boolean        @default(true)
  appliesTo   String? /// Comma-separated: PHYSICAL,LEGAL,ALL,PROCESS
  userDocs    UserDocument[]
}

model UserDocument {
  id              String           @id @default(uuid())
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  documentType    DocumentType     @relation(fields: [documentTypeId], references: [id])
  documentTypeId  String
  status          UserDocumentStatus @default(NOT_SENT)
  fileUrl         String
  fileName        String?
  rejectionReason String?          @db.Text
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([userId, documentTypeId])
}
