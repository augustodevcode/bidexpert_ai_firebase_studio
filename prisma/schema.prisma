// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// =================================
// ENUMS
// =================================

enum UserAccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDENTE_DOCUMENTOS
  PENDENTE_ANALISE
  HABILITADO
  REJEITADO_DOCUMENTOS
  BLOQUEADO
}

enum UserDocumentStatus {
  NAO_ENVIADO
  SUBMETIDO
  EM_ANALISE
  APROVADO
  REJEITADO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ATIVO
  VENDIDO
  EXPIRADO
  PENDENTE_APROVACAO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

// =================================
// MODELS
// =================================

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  fullName                String
  password                String
  roleId                  String?
  habilitationStatus      UserHabilitationStatus   @default(PENDENTE_DOCUMENTOS)
  accountType             UserAccountType          @default(PHYSICAL)
  badges                  Json?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  sellerProfileId         String?                  @unique
  auctioneerProfileId     String?                  @unique
  
  // Optional Personal Info
  cpf                   String?
  rgNumber              String?
  rgIssuer              String?
  rgIssueDate           DateTime?
  rgState               String?
  dateOfBirth           DateTime?
  cellPhone             String?
  homePhone             String?
  gender                String?
  profession            String?
  nationality           String?
  maritalStatus         String?
  propertyRegime        String?
  spouseName            String?
  spouseCpf             String?

  // Optional Address Info
  zipCode               String?
  street                String?
  number                String?
  complement            String?
  neighborhood          String?
  city                  String?
  state                 String?

  // Optional Legal Person Info
  razaoSocial           String?
  cnpj                  String?                  @unique
  inscricaoEstadual     String?
  website               String?

  // Marketing
  optInMarketing        Boolean                  @default(false)

  // Relationships
  role                  Role?                    @relation(fields: [roleId], references: [id])
  documents             UserDocument[]
  notifications         Notification[]
  bids                  Bid[]
  wins                  UserWin[]
  maxBids               UserLotMaxBid[]
  reviews               Review[]
  questions             LotQuestion[]            @relation("userQuestions")
  answers               LotQuestion[]            @relation("answeredByUser")
  uploadedMedia         MediaItem[]
  blogPosts             BlogPost[]
}

model Role {
  id              String        @id @default(cuid())
  name            String        @unique
  name_normalized String        @unique
  description     String?
  permissions     Json // Storing as JSON string
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  users User[]
}

model Permission {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model DocumentType {
  id              String         @id @default(cuid())
  name            String
  description     String?
  isRequired      Boolean        @default(true)
  appliesTo       String? // E.g., "PHYSICAL,LEGAL"
  allowedFormats  String? // E.g., "pdf,jpg,png"
  displayOrder    Int            @default(0)
  userDocuments   UserDocument[]
}

model UserDocument {
  id                String             @id @default(cuid())
  userId            String
  documentTypeId    String
  fileUrl           String?
  fileName          String?
  status            UserDocumentStatus @default(NAO_ENVIADO)
  uploadDate        DateTime?
  analysisDate      DateTime?
  analystId         String?
  rejectionReason   String?            @db.Text
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType DocumentType @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

model State {
  id        String   @id @default(cuid())
  name      String
  uf        String   @unique
  slug      String   @unique
  cityCount Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cities   City[]
  courts   Court[]
  districts JudicialDistrict[]
}

model City {
  id       String @id @default(cuid())
  name     String
  slug     String @unique
  stateId  String
  stateUf  String
  ibgeCode String?
  lotCount Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  state State @relation(fields: [stateId], references: [id])
}

model LotCategory {
  id                  String  @id @default(cuid())
  name                String  @unique
  slug                String  @unique
  description         String? @db.Text
  itemCount           Int?
  hasSubcategories    Boolean?
  logoUrl             String?
  coverImageUrl       String?
  megaMenuImageUrl    String?
  dataAiHintLogo      String?
  dataAiHintCover     String?
  dataAiHintMegaMenu  String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  auctions      Auction[]
  subcategories Subcategory[]
  lots          Lot[]
  bens          Bem[]
}

model Subcategory {
  id                  String      @id @default(cuid())
  name                String
  slug                String      @unique
  parentCategoryId    String
  description         String?
  itemCount           Int?
  displayOrder        Int?
  iconUrl             String?
  iconMediaId         String?
  dataAiHintIcon      String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  
  parentCategory LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots           Lot[]
  bens           Bem[]
}

model DirectSaleOffer {
  id                  String                @id @default(cuid())
  publicId            String                @unique
  title               String
  description         String?               @db.Text
  offerType           DirectSaleOfferType
  status              DirectSaleOfferStatus
  price               Float?
  minimumOfferPrice   Float?
  categoryId          String
  sellerId            String
  locationCity        String?
  locationState       String?
  imageUrl            String?
  imageMediaId        String?
  dataAiHint          String?
  galleryImageUrls    Json?
  mediaItemIds        Json?
  expiresAt           DateTime?
  itemsIncluded       Json?
  tags                Json?
  views               Int?
  proposalsCount      Int?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt

  category LotCategory @relation(fields: [categoryId], references: [id])
  seller   Seller      @relation(fields: [sellerId], references: [id])
}

model MediaItem {
  id              String   @id @default(cuid())
  fileName        String
  storagePath     String?  @unique
  uploadedAt      DateTime @default(now())
  uploadedBy      String?
  title           String?
  altText         String?
  caption         String?  @db.Text
  description     String?  @db.Text
  mimeType        String
  sizeBytes       Int
  dimensions      Json?
  urlOriginal     String?  @db.Text
  urlThumbnail    String?  @db.Text
  urlMedium       String?  @db.Text
  urlLarge        String?  @db.Text
  dataAiHint      String?

  user     User? @relation(fields: [uploadedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  // No back-relations to Lot/Auction etc. to avoid cycles and complexity
}

model Seller {
  id          String @id @default(cuid())
  publicId    String @unique
  name        String @unique
  slug        String @unique
  contactName String?
  email       String?
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  website     String?
  logoUrl     String?
  dataAiHintLogo String?
  description String? @db.Text
  isJudicial  Boolean @default(false)
  userId      String? @unique
  judicialBranchId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user              User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  judicialBranch    JudicialBranch?   @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  auctions          Auction[]
  directSaleOffers  DirectSaleOffer[]
  judicialProcesses JudicialProcess[]
  bens              Bem[]
}

model Auctioneer {
  id                      String   @id @default(cuid())
  publicId                String   @unique
  name                    String   @unique
  slug                    String   @unique
  registrationNumber      String?
  contactName             String?
  email                   String?
  phone                   String?
  address                 String?
  city                    String?
  state                   String?
  zipCode                 String?
  website                 String?
  logoUrl                 String?
  dataAiHintLogo          String?
  description             String?  @db.Text
  userId                  String?  @unique

  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  
  user     User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  auctions Auction[]
}

model Auction {
  id                             String        @id @default(cuid())
  publicId                       String        @unique
  title                          String        @db.VarChar(200)
  fullTitle                      String?       @db.VarChar(300)
  description                    String?       @db.Text
  status                         AuctionStatus @default(RASCUNHO)
  auctionType                    AuctionType?
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json?
  city                           String?
  state                          String?
  imageUrl                       String?       @db.Text
  imageMediaId                   String?
  documentsUrl                   String?       @db.Text
  dataAiHint                     String?
  visits                         Int?          @default(0)
  initialOffer                   Float?
  totalLots                      Int           @default(0)
  bidsCount                      Int?          @default(0)
  sellingBranch                  String?
  vehicleLocation                String?
  automaticBiddingEnabled        Boolean?      @default(false)
  silentBiddingEnabled           Boolean?      @default(false)
  allowMultipleBidsPerUser       Boolean?      @default(true)
  allowInstallmentBids           Boolean?      @default(false)
  softCloseEnabled               Boolean?      @default(false)
  softCloseMinutes               Int?          @default(2)
  estimatedRevenue               Float?
  achievedRevenue                Float?        @default(0)
  totalHabilitatedUsers          Int?          @default(0)
  isFeaturedOnMarketplace        Boolean?      @default(false)
  marketplaceAnnouncementTitle   String?
  additionalTriggers             String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  
  categoryId      String?
  auctioneerId    String?
  sellerId        String?
  judicialProcessId String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  category         LotCategory?     @relation(fields: [categoryId], references: [id])
  auctioneer       Auctioneer?      @relation(fields: [auctioneerId], references: [id])
  seller           Seller?          @relation(fields: [sellerId], references: [id])
  judicialProcess  JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  
  lots          Lot[]
  bids          Bid[]
  reviews       Review[]
  questions     LotQuestion[]
}

model Lot {
  id                        String      @id @default(cuid())
  publicId                  String      @unique
  auctionId                 String
  number                    String?
  title                     String
  description               String?     @db.Text
  price                     Float       @default(0)
  initialPrice              Float?
  secondInitialPrice        Float?
  bidIncrementStep          Float?
  status                    LotStatus   @default(EM_BREVE)
  
  imageUrl                  String?     @db.Text
  imageMediaId              String?
  winningBidTermUrl         String?
  
  galleryImageUrls          Json?
  mediaItemIds              Json?
  bemIds                    Json?
  
  isFeatured                Boolean?    @default(false)
  isExclusive               Boolean?    @default(false)
  discountPercentage        Float?
  additionalTriggers        Json?
  
  condition                 String?
  dataAiHint                String?

  // FKs
  categoryId      String?
  subcategoryId   String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auction      Auction      @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category     LotCategory? @relation(fields: [categoryId], references: [id])
  subcategory  Subcategory? @relation(fields: [subcategoryId], references: [id])
  
  bids    Bid[]
  wins    UserWin[]
  maxBids UserLotMaxBid[]
  reviews Review[]
  questions LotQuestion[]

  @@index([auctionId])
  @@index([status])
}

model Bem {
  id                          String    @id @default(cuid())
  publicId                    String    @unique
  title                       String
  description                 String?   @db.Text
  status                      BemStatus @default(DISPONIVEL)
  evaluationValue             Float?
  
  imageUrl                    String?
  imageMediaId                String?
  galleryImageUrls            Json?
  mediaItemIds                Json?
  dataAiHint                  String?

  locationCity                String?
  locationState               String?
  address                     String?
  latitude                    Float?
  longitude                   Float?

  // FKs
  judicialProcessId String?
  sellerId          String?
  categoryId        String?
  subcategoryId     String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller          Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  category        LotCategory?     @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory?     @relation(fields: [subcategoryId], references: [id])
}

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())

  lot     Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder  User    @relation(fields: [bidderId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([bidderId])
}

model UserWin {
  id               String        @id @default(cuid())
  lotId            String
  userId           String
  winningBidAmount Float
  winDate          DateTime      @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?
  
  lot Lot  @relation(fields: [lotId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([lotId, userId])
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lotId])
}


model Review {
  id                String   @id @default(cuid())
  lotId             String
  auctionId         String
  userId            String
  userDisplayName   String
  rating            Int
  comment           String?  @db.Text
  isVerified        Boolean  @default(false)
  createdAt         DateTime @default(now())
  
  lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  questionText    String   @db.Text
  answerText      String?  @db.Text
  answeredAt      DateTime?
  answeredByUserId String?
  isPublic        Boolean  @default(true)
  createdAt       DateTime @default(now())
  
  lot        Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction    Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  questioner User @relation("userQuestions", fields: [userId], references: [id], onDelete: Cascade)
  answeredBy User? @relation("answeredByUser", fields: [answeredByUserId], references: [id], onDelete: SetNull)
}

// =================================
// JUDICIAL MANAGEMENT MODELS
// =================================

model Court {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  stateId   String
  stateUf   String
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  state State @relation(fields: [stateId], references: [id])
  districts JudicialDistrict[]
}

model JudicialDistrict {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  courtId   String
  stateId   String
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  court   Court   @relation(fields: [courtId], references: [id])
  state   State   @relation(fields: [stateId], references: [id])
  branches JudicialBranch[]
  processes JudicialProcess[]
}

model JudicialBranch {
  id           String   @id @default(cuid())
  name         String
  slug         String   @unique
  districtId   String
  contactName  String?
  phone        String?
  email        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  district  JudicialDistrict @relation(fields: [districtId], references: [id])
  processes JudicialProcess[]
  seller    Seller?
}

model JudicialProcess {
  id              String  @id @default(cuid())
  publicId        String  @unique
  processNumber   String  @unique
  isElectronic    Boolean @default(true)
  
  courtId         String?
  districtId      String?
  branchId        String?
  sellerId        String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  court     Court?             @relation(fields: [courtId], references: [id])
  district  JudicialDistrict?  @relation(fields: [districtId], references: [id])
  branch    JudicialBranch?    @relation(fields: [branchId], references: [id])
  seller    Seller?            @relation(fields: [sellerId], references: [id])

  parties ProcessParty[]
  bens    Bem[]
  auctions Auction[]
}

model ProcessParty {
  id             String           @id @default(cuid())
  processId      String
  name           String
  partyType      ProcessPartyType
  documentNumber String?
  
  process JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  
  @@unique([processId, name, partyType])
}

// =================================
// CONTENT & PLATFORM MODELS
// =================================

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model BlogPost {
  id            String   @id @default(cuid())
  title         String
  slug          String   @unique
  content       String   @db.Text
  authorId      String
  publishedAt   DateTime?
  isPublished   Boolean  @default(false)
  featuredImageId String?  @unique
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  author           User       @relation(fields: [authorId], references: [id])
  tags             Tag[]
}

model Tag {
  id   String @id @default(cuid())
  name String @unique
  
  posts BlogPost[]
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model PlatformSettings {
  id              String @id @default("global")
  siteTitle       String
  siteTagline     String?
  galleryImageBasePath String
  storageProvider String @default("local") // "local" or "firebase"
  firebaseStorageBucket String?
  activeThemeName String?
  themes          Json?

  platformPublicIdMasks   Json?
  homepageSections        Json?
  mentalTriggerSettings   Json?
  sectionBadgeVisibility  Json?
  mapSettings             Json?
  searchPaginationType    String? @default("loadMore")
  searchItemsPerPage      Int?    @default(12)
  searchLoadMoreCount     Int?    @default(12)
  showCountdownOnLotDetail Boolean? @default(true)
  showCountdownOnCards    Boolean? @default(true)
  showRelatedLotsOnLotDetail Boolean? @default(true)
  relatedLotsCount        Int? @default(5)
  variableIncrementTable  Json?
  biddingSettings         Json?
  defaultListItemsPerPage Int? @default(10)

  updatedAt DateTime @updatedAt
}

```
- src/types/index.js:
```js
"use strict";
// src/types/index.ts
Object.defineProperty(exports, "__esModule", { value: true });

```
- src/types/index.ts:
```ts
// src/types/index.ts
import type { 
    User, Role, UserDocument, DocumentType, Auction as PrismaAuction, Lot as PrismaLot, Bid, 
    UserWin, Seller, Auctioneer, DirectSaleOffer, MediaItem, LotCategory, 
    State as StateInfo, City as CityInfo, Subcategory,
    Court, JudicialDistrict, JudicialBranch, JudicialProcess, ProcessParty, Bem,
    Notification, BlogPost, ContactMessage,
    Review, LotQuestion, UserLotMaxBid,
    Prisma,
    Permission,
    Tag,
} from '@prisma/client';
import type { Timestamp as FirebaseAdminTimestamp, FieldValue as FirebaseAdminFieldValue } from 'firebase-admin/firestore';
import type { Timestamp as FirebaseClientTimestamp } from 'firebase/firestore'; // Client SDK Timestamp

// For server-side logic (Admin SDK)
export type ServerTimestamp = FirebaseAdminTimestamp;
export type AdminFieldValue = FirebaseAdminFieldValue;

// For client-side logic or data received from client
export type ClientTimestamp = FirebaseClientTimestamp;

// Generic type for properties that could be any of these, or a JS Date
export type AnyTimestamp = ServerTimestamp | ClientTimestamp | Date | string | null | undefined;

// --- Redefining Prisma types to include relations or computed fields ---

export type Auction = PrismaAuction & {
  lots?: Lot[];
  totalLots?: number;
  auctioneer?: string;
  seller?: string;
  category?: string;
  auctioneerName?: string;
  auctioneerLogoUrl?: string;
};

export type Lot = PrismaLot & {
    auctionName?: string;
    type?: string;
    subcategoryName?: string;
    cityName?: string;
    stateUf?: string;
    isFavorite?: boolean;
    bens?: Bem[];
};

export type Bem = Prisma.BemGetPayload<{
  include: {
    category: true;
    subcategory: true;
    judicialProcess: true;
    seller: true;
  }
}> & {
  categoryName?: string;
  subcategoryName?: string;
  judicialProcessNumber?: string;
  sellerName?: string;
};


// --- EXPORTING PRISMA GENERATED TYPES ---
// This makes it easy to use the exact shape of our database models throughout the app.
export type { 
    User as UserProfileData, Role, UserDocument, DocumentType, Bid as BidInfo, 
    UserWin, Seller as SellerProfileInfo, Auctioneer as AuctioneerProfileInfo, 
    DirectSaleOffer, MediaItem, LotCategory, StateInfo, CityInfo, Subcategory,
    Court, JudicialDistrict, JudicialBranch, JudicialProcess, ProcessParty, // Removed Bem here
    Notification, BlogPost, ContactMessage, // Exporting ContactMessage
    Review, LotQuestion, UserLotMaxBid, // Exporting new types
    Prisma,
    Permission, Tag,
};


// --- CUSTOM & COMPOSITE TYPES ---

// Adds computed permissions array to the base User type
export type UserProfileWithPermissions = User & {
  permissions: string[];
};

// Represents the data coming from the user registration form
export type UserCreationData = Partial<Omit<User, 'id' | 'createdAt' | 'updatedAt' | 'roleId' | 'sellerId' | 'badges'>> & {
  email: string;
  password?: string | null;
};

// Represents the fields that a user can edit on their own profile page
export type EditableUserProfileData = Partial<Omit<User, 'id' | 'email' | 'createdAt' | 'updatedAt' | 'roleId' | 'sellerId' | 'password' | 'badges'>>;

export type UserFormValues = Pick<User, 'fullName' | 'email' | 'cpf' | 'cellPhone' | 'dateOfBirth' | 'accountType' | 'razaoSocial' | 'cnpj' | 'inscricaoEstadual' | 'website' | 'zipCode' | 'street' | 'number' | 'complement' | 'neighborhood' | 'city' | 'state' | 'optInMarketing'> & {
  password?: string;
  roleId?: string | null; 
};


export interface UserBid {
    id: string;
    lotId: string;
    auctionId: string;
    lotTitle: string;
    lotImageUrl: string;
    lotImageAiHint?: string;
    userBidAmount: number;
    currentLotPrice: number;
    bidStatus: 'GANHANDO' | 'PERDENDO' | 'SUPERADO_POR_OUTRO' | 'SUPERADO_PELO_PROPRIO_MAXIMO' | 'ARREMATADO' | 'NAO_ARREMATADO' | 'ENCERRADO' | 'CANCELADO';
    bidDate: AnyTimestamp;
    lotEndDate: AnyTimestamp;
    lot: Lot; // Include full lot for linking
}

// --- FORM DATA TYPES ---
// These types define the shape of data coming from forms, before it's processed for the database.

export type CategoryFormData = Omit<LotCategory, 'id' | 'slug' | 'createdAt' | 'updatedAt' | 'itemCount' | 'hasSubcategories'>;
export type SubcategoryFormData = Omit<Subcategory, 'id' | 'slug' | 'createdAt' | 'updatedAt' | 'itemCount'>;
export type StateFormData = Omit<StateInfo, 'id' | 'slug' | 'createdAt' | 'updatedAt' | 'cityCount'>;
export type CityFormData = Omit<CityInfo, 'id' | 'slug' | 'stateUf' | 'createdAt' | 'updatedAt' | 'lotCount'>;
export type AuctioneerFormData = Omit<Auctioneer, 'id' | 'publicId' | 'slug' | 'createdAt' | 'updatedAt' | 'logoMediaId'>;
export type SellerFormData = Omit<Seller, 'id'| 'publicId' | 'slug' | 'createdAt' | 'updatedAt' | 'logoMediaId'>;
export type RoleFormData = Omit<Role, 'id' | 'name_normalized' | 'createdAt' | 'updatedAt'>;
export type CourtFormData = Omit<Court, 'id' | 'slug' | 'createdAt' | 'updatedAt'>;
export type JudicialDistrictFormData = Omit<JudicialDistrict, 'id' | 'slug' | 'createdAt' | 'updatedAt'>;
export type JudicialBranchFormData = Omit<JudicialBranch, 'id' | 'slug' | 'createdAt' | 'updatedAt'>;
export type JudicialProcessFormData = Omit<JudicialProcess, 'id' | 'publicId' | 'createdAt' | 'updatedAt'> & {
  parties: Array<Partial<ProcessParty>>; 
};
export type DocumentTemplateFormData = Omit<DocumentTemplate, 'id' | 'createdAt' | 'updatedAt'>;

export type BemFormData = Omit<Prisma.BemUncheckedCreateInput, 'id' | 'publicId' | 'createdAt' | 'updatedAt' | 'galleryImageUrls' | 'mediaItemIds' | 'amenities'> & {
  galleryImageUrls?: string[];
  mediaItemIds?: string[];
  amenities?: { value: string }[];
};

export type AuctionFormData = Omit<Auction, 'id' | 'publicId' | 'createdAt' | 'updatedAt' | 'totalLots'> & {
  auctionDate: Date; 
  endDate?: Date | null; 
};

export type LotFormData = Omit<Lot, 'id'|'publicId'|'createdAt'|'updatedAt'|'auctionId'|'categoryId'|'number'|'isFavorite'|'views'|'bidsCount'|'status'|'isFeatured'> & {
  auctionId: string;
  type: string; // From form, maps to categoryId
  auctionName?: string;
  bemIds?: string[];
  mediaItemIds?: string[];
  isFeatured?: boolean;
};

export type LotDbData = Omit<LotFormData, 'type' | 'auctionName'> & {
  categoryId: string;
};


export type DirectSaleOfferFormData = Omit<DirectSaleOffer, 'id' | 'publicId' | 'createdAt' | 'updatedAt' | 'views' | 'proposalsCount' | 'galleryImageUrls' | 'itemsIncluded' | 'tags' | 'sellerId' | 'sellerLogoUrl' | 'dataAiHintSellerLogo' | 'latitude' | 'longitude' | 'mapAddress' | 'mapEmbedUrl' | 'mapStaticImageUrl' | 'categoryId'> & {
    expiresAt?: Date | null;
    mediaItemIds?: string[];
    galleryImageUrls?: string[];
    category: string; // The form sends the name, action will resolve ID
    sellerName: string; // Form sends name
};

// --- WIZARD SPECIFIC TYPES ---

export interface WizardData {
  auctionType?: Extract<AuctionType, 'JUDICIAL' | 'EXTRAJUDICIAL' | 'PARTICULAR' | 'TOMADA_DE_PRECOS'>;
  judicialProcess?: JudicialProcess;
  auctionDetails?: Partial<Auction> & {
    auctioneer?: string; // name
    seller?: string;     // name
  };
  selectedBens?: Bem[];
  createdLots?: Partial<Lot>[];
}


// --- GENERIC & UTILITY TYPES ---

// Used for API responses from CNJ
export interface CnjProcessSource {
  numeroProcesso: string;
  classe: { codigo: number; nome: string };
  sistema: { codigo: number; nome: string };
  formato: { codigo: number; nome: string };
  tribunal: string;
  dataHoraUltimaAtualizacao: string;
  grau: string;
  dataAjuizamento: string;
  movimentos: any[];
  id: string;
  nivelSigilo: number;
  orgaoJulgador: {
    codigoMunicipioIBGE: number;
    codigo: number;
    nome: string;
  };
  assuntos: { codigo: number; nome: string }[][];
}
export interface CnjHit {
  _index: string;
  _type: string;
  _id: string;
  _score: number | null;
  _source: CnjProcessSource;
  sort?: (string | number)[];
}
export interface CnjSearchResponse {
  took: number;
  timed_out: boolean;
  hits: {
    total: {
      value: number;
      relation: string;
    };
    max_score: number | null;
    hits: CnjHit[];
  };
}

export type ThemeColors = Record<string, string>;

export interface Theme {
  name: string;
  colors: ThemeColors;
}

export interface MentalTriggerSettings {
    showDiscountBadge?: boolean;
    showUrgencyTimer?: boolean;
    urgencyTimerThresholdDays?: number;
    urgencyTimerThresholdHours?: number;
    showPopularityBadge?: boolean;
    popularityViewThreshold?: number;
    showHotBidBadge?: boolean;
    hotBidThreshold?: number;
    showExclusiveBadge?: boolean;
}

export interface BadgeVisibilitySettings {
  showStatusBadge?: boolean;
  showDiscountBadge?: boolean;
  showUrgencyTimer?: boolean;
  showPopularityBadge?: boolean;
  showHotBidBadge?: boolean;
  showExclusiveBadge?: boolean;
}

export interface SectionBadgeConfig {
  featuredLots?: BadgeVisibilitySettings;
  searchGrid?: BadgeVisibilitySettings;
  searchList?: BadgeVisibilitySettings;
  lotDetail?: BadgeVisibilitySettings; 
}

export type HomepageSectionType = 'hero_carousel' | 'filter_links' | 'featured_lots' | 'active_auctions' | 'promo_banner_1' | 'categories_grid';

export interface PromoCardContent {
    title: string;
    subtitle?: string;
    link: string;
    imageUrl?: string;
    imageAlt?: string;
    dataAiHint?: string;
    bgColorClass?: string;
}

export interface HomepageSectionConfig {
  id: string;
  type: HomepageSectionType;
  title?: string;
  visible: boolean;
  order: number;
  itemCount?: number; 
  categorySlug?: string; 
  promoContent?: PromoCardContent;
}

export interface MapSettings {
  defaultProvider?: 'google' | 'openstreetmap' | 'staticImage';
  googleMapsApiKey?: string | null;
  staticImageMapZoom?: number;
  staticImageMapMarkerColor?: string;
}

export type SearchPaginationType = 'loadMore' | 'numberedPages';

export type StorageProviderType = 'local' | 'firebase';

export interface BiddingSettings {
  instantBiddingEnabled?: boolean;
  getBidInfoInstantly?: boolean;
  biddingInfoCheckIntervalSeconds?: number;
}

export type VariableIncrementRule = Prisma.JsonValue;

export type PlatformSettingsFormData = Omit<PlatformSettings, 'id' | 'updatedAt' | 'variableIncrementTable'> & {
    variableIncrementTable?: { from: number, to: number | null, increment: number }[];
};


export interface AdminReportData {
  users: number;
  auctions: number;
  lots: number;
  sellers: number;
  totalRevenue: number;
  newUsersLast30Days: number;
  activeAuctions: number;
  lotsSoldCount: number;
  salesData: { name: string; Sales: number }[];
  categoryData: { name: string; value: number }[];
  averageBidValue: number;
  averageLotsPerAuction: number;
  auctionSuccessRate: number;
}

export interface ConsignorDashboardStats {
    totalLotsConsigned: number;
    activeLots: number;
    soldLots: number;
    totalSalesValue: number;
    salesRate: number;
    salesData: { name: string; Sales: number }[];
}


export interface RecentlyViewedLotInfo {
  id: string;
  title: string;
  imageUrl: string;
  auctionId: string;
  dataAiHint?: string;
}

export type AuctionStage = Omit<Prisma.JsonValue, 'endDate'> & {
  name: string;
  endDate: AnyTimestamp;
  statusText?: string;
  initialPrice?: number;
};


// Enums for Zod schemas
export const lotStatusValues: [LotStatus, ...LotStatus[]] = [
  'EM_BREVE',
  'ABERTO_PARA_LANCES',
  'ENCERRADO',
  'VENDIDO',
  'NAO_VENDIDO',
];

export const auctionStatusValues: [AuctionStatus, ...AuctionStatus[]] = [
  'RASCUNHO',
  'EM_PREPARACAO',
  'EM_BREVE',
  'ABERTO', 
  'ABERTO_PARA_LANCES',
  'ENCERRADO',
  'FINALIZADO', 
  'CANCELADO',
  'SUSPENSO'
];

export const bemStatusValues: [Bem['status'], ...Bem['status'][]] = [
  'CADASTRO', 'DISPONIVEL', 'LOTEADO', 'VENDIDO', 'REMOVIDO', 'INATIVADO'
];

export const documentTemplateTypeValues: [DocumentTemplate['type'], ...DocumentTemplate['type'][]] = [
  'WINNING_BID_TERM', 'EVALUATION_REPORT', 'AUCTION_CERTIFICATE'
];
```
- yarn.lock:
```text
# This file is intentionally left empty. It will be re-generated on the next `yarn install` call.

```