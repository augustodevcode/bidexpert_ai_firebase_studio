
// Arquivo de cabeçalho para o schema do Prisma
// Contém a configuração do datasource e do generator.

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

generator genkit {
  provider = "genkit-prisma-plugin"
}

// -----------------------------------------------------
// --- Modelos de Entidades Principais
// -----------------------------------------------------
model Auction {
  id                        String                   @id @default(cuid())
  publicId                  String                   @unique @default(cuid())
  slug                      String                   @unique
  title                     String
  description               String?                  @db.Text
  status                    AuctionStatus            @default(RASCUNHO)
  auctionDate               DateTime                 @default(now())
  endDate                   DateTime?
  visits                    Int                      @default(0)
  totalLots                 Int                      @default(0)
  initialOffer              Decimal?                 @db.Decimal(12, 2)
  achievedRevenue           Decimal?                 @db.Decimal(12, 2)
  estimatedRevenue          Decimal?                 @db.Decimal(12, 2)
  isFeaturedOnMarketplace   Boolean                  @default(false)
  marketplaceAnnouncementTitle String?
  totalHabilitatedUsers     Int                      @default(0)
  auctionType               AuctionType              @default(EXTRAJUDICIAL)
  auctionMethod             AuctionMethod            @default(STANDARD)
  participation             AuctionParticipation     @default(ONLINE)
  additionalTriggers        Json?
  dataAiHint                String?
  winningBidTermUrl         String?
  evaluationReportUrl       String?
  auctionCertificateUrl     String?
  documentsUrl              String?
  onlineUrl                 String?
  address                   String?
  city                      String?
  state                     String?
  zipCode                   String?
  latitude                  Decimal?                 @db.Decimal(9, 6)
  longitude                 Decimal?                 @db.Decimal(9, 6)
  sellingBranch             String?
  softCloseMinutes          Int?
  softCloseEnabled          Boolean                  @default(false)
  automaticBiddingEnabled   Boolean                  @default(true)
  allowInstallmentBids      Boolean                  @default(true)
  silentBiddingEnabled      Boolean                  @default(false)
  allowMultipleBidsPerUser  Boolean                  @default(true)
  decrementAmount           Decimal?                 @db.Decimal(12, 2)
  decrementIntervalSeconds  Int?
  floorPrice                Decimal?                 @db.Decimal(12, 2)
  imageMediaId              String?
  imageUrl                  String?
  lots                      Lot[]
  reviews                   Review[]
  judicialProcessId         String?                  @unique
  judicialProcess           JudicialProcess?         @relation(fields: [judicialProcessId], references: [id])
  auctioneerId              String?
  auctioneer                Auctioneer?              @relation(fields: [auctioneerId], references: [id])
  sellerId                  String?
  seller                    Seller?                  @relation(fields: [sellerId], references: [id])
  categoryId                String?
  category                  LotCategory?             @relation(fields: [categoryId], references: [id])
  cityId                    String?
  cityData                  City?                    @relation(fields: [cityId], references: [id])
  stateId                   String?
  stateData                 State?                   @relation(fields: [stateId], references: [id])
  stages                    AuctionStage[]
  habilitations             AuctionHabilitation[]
  bids                      Bid[]
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
  tenantId                  String
  tenant                    Tenant                   @relation(fields: [tenantId], references: [id])
  lotQuestions              LotQuestion[]

  @@index([sellerId])
  @@index([auctioneerId])
  @@index([categoryId])
  @@index([tenantId])
}

model Auctioneer {
  id                   String     @id @default(cuid())
  publicId             String     @unique @default(cuid())
  slug                 String     @unique
  name                 String     @unique
  registrationNumber   String?
  email                String?    @unique
  phone                String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?    @db.Text
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  latitude             Decimal?   @db.Decimal(9, 6)
  longitude            Decimal?   @db.Decimal(9, 6)
  auctions             Auction[]
  lots                 Lot[]
  userId               String?    @unique
  user                 User?      @relation(fields: [userId], references: [id])
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  tenantId             String
  tenant               Tenant     @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

model AuctionHabilitation {
  id        String   @id @default(cuid())
  userId    String
  auctionId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, auctionId])
}

model AuctionStage {
  id           String    @id @default(cuid())
  auctionId    String
  name         String
  startDate    DateTime
  endDate      DateTime
  initialPrice Decimal?  @db.Decimal(12, 2)
  auction      Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  lotDetails   LotStageDetails[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([auctionId])
}

model Asset {
  id                        String         @id @default(cuid())
  publicId                  String         @unique @default(cuid())
  title                     String
  description               String?        @db.Text
  status                    AssetStatus    @default(CADASTRO)
  evaluationValue           Decimal?       @db.Decimal(12, 2)
  properties                Json?
  imageUrl                  String?
  imageMediaId              String?
  dataAiHint                String?
  galleryImageUrls          Json?
  categoryId                String?
  category                  LotCategory?   @relation(fields: [categoryId], references: [id])
  subcategoryId             String?
  subcategory               Subcategory?   @relation(fields: [subcategoryId], references: [id])
  sellerId                  String?
  seller                    Seller?        @relation(fields: [sellerId], references: [id])
  judicialProcessId         String?
  judicialProcess           JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  street                    String?
  number                    String?
  complement                String?
  neighborhood              String?
  cityId                    String?
  city                      City?          @relation(fields: [cityId], references: [id])
  stateId                   String?
  state                     State?         @relation(fields: [stateId], references: [id])
  zipCode                   String?
  latitude                  Decimal?       @db.Decimal(9, 6)
  longitude                 Decimal?       @db.Decimal(9, 6)
  lots                      AssetsOnLots[]
  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @updatedAt
  tenantId                  String
  tenant                    Tenant         @relation(fields: [tenantId], references: [id])

  @@index([categoryId])
  @@index([subcategoryId])
  @@index([sellerId])
  @@index([judicialProcessId])
  @@index([tenantId])
}

model AssetsOnLots {
  asset      Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  assetId    String
  lot        Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId      String
  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([assetId, lotId])
  @@index([assetId])
  @@index([lotId])
}

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  amount        Decimal  @db.Decimal(12, 2)
  timestamp     DateTime @default(now())
  isMaxBid      Boolean  @default(false)
  bidderDisplay String?
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id])

  @@index([lotId])
  @@index([bidderId])
  @@index([tenantId])
}

model City {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  ibgeCode  String?   @unique
  stateId   String
  state     State     @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateUf   String?
  latitude  Decimal?  @db.Decimal(9, 6)
  longitude Decimal?  @db.Decimal(9, 6)
  auctions  Auction[]
  assets    Asset[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([name, stateId])
  @@index([stateId])
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Court {
  id                String              @id @default(cuid())
  name              String              @unique
  slug              String              @unique
  stateUf           String
  website           String?
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  sellers           Seller[]
}

model DataSource {
  id        String @id @default(cuid())
  name      String
  modelName String @unique
  fields    Json
}

model DirectSaleOffer {
  id                      String                  @id @default(cuid())
  publicId                String                  @unique @default(cuid())
  title                   String
  description             String?                 @db.Text
  status                  DirectSaleOfferStatus   @default(PENDING_APPROVAL)
  offerType               DirectSaleOfferType     @default(BUY_NOW)
  price                   Decimal?                @db.Decimal(12, 2)
  minimumOfferPrice       Decimal?                @db.Decimal(12, 2)
  imageUrl                String?
  imageMediaId            String?
  dataAiHint              String?
  galleryImageUrls        Json?
  mediaItemIds            Json?
  views                   Int                     @default(0)
  locationCity            String?
  locationState           String?
  expiresAt               DateTime?
  category                String?
  sellerName              String?
  categoryId              String?
  categoryData            LotCategory?            @relation(fields: [categoryId], references: [id])
  sellerId                String?
  seller                  Seller?                 @relation(fields: [sellerId], references: [id])
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  tenantId                String
  tenant                  Tenant                  @relation(fields: [tenantId], references: [id])
  
  @@index([categoryId])
  @@index([sellerId])
  @@index([tenantId])
}

model DocumentTemplate {
  id        String               @id @default(cuid())
  name      String               @unique
  type      DocumentTemplateType
  content   String               @db.Text
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model DocumentType {
  id          String         @id @default(cuid())
  name        String         @unique
  description String?
  isRequired  Boolean        @default(false)
  appliesTo   String?
  userDocs    UserDocument[]
}

model InstallmentPayment {
  id                String        @id @default(cuid())
  userWinId         String
  userWin           UserWin       @relation(fields: [userWinId], references: [id], onDelete: Cascade)
  installmentNumber Int
  totalInstallments Int
  amount            Decimal       @db.Decimal(12, 2)
  dueDate           DateTime
  paymentDate       DateTime?
  status            PaymentStatus @default(PENDENTE)

  @@index([userWinId])
}

model JudicialBranch {
  id                String              @id @default(cuid())
  name              String              @unique
  slug              String              @unique
  contactName       String?
  phone             String?
  email             String?
  districtId        String
  district          JudicialDistrict    @relation(fields: [districtId], references: [id], onDelete: Cascade)
  processes         JudicialProcess[]
  sellers           Seller[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@index([districtId])
}

model JudicialDistrict {
  id         String            @id @default(cuid())
  name       String            @unique
  slug       String            @unique
  zipCode    String?
  courtId    String
  court      Court             @relation(fields: [courtId], references: [id], onDelete: Cascade)
  stateId    String
  state      State             @relation(fields: [stateId], references: [id], onDelete: Cascade)
  branches   JudicialBranch[]
  processes  JudicialProcess[]
  sellers    Seller[]
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  @@index([courtId])
  @@index([stateId])
}

model JudicialParty {
  id             String          @id @default(cuid())
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  processId      String
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@index([processId])
}

model JudicialProcess {
  id              String           @id @default(cuid())
  publicId        String           @unique @default(cuid())
  processNumber   String
  isElectronic    Boolean          @default(true)
  courtId         String
  court           Court            @relation(fields: [courtId], references: [id])
  districtId      String
  district        JudicialDistrict @relation(fields: [districtId], references: [id])
  branchId        String
  branch          JudicialBranch   @relation(fields: [branchId], references: [id])
  parties         JudicialParty[]
  assets          Asset[]
  auctions        Auction[]
  sellerId        String?
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  tenantId        String
  tenant          Tenant           @relation(fields: [tenantId], references: [id])
  mediaItems      MediaItem[]
  
  @@unique([processNumber, tenantId])
  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
  @@index([sellerId])
  @@index([tenantId])
}

model Lot {
  id                        String              @id @default(cuid())
  publicId                  String              @unique @default(cuid())
  slug                      String              @unique
  number                    String?
  title                     String
  description               String?             @db.Text
  status                    LotStatus           @default(EM_BREVE)
  type                      String
  price                     Decimal             @db.Decimal(12, 2)
  initialPrice              Decimal?            @db.Decimal(12, 2)
  secondInitialPrice        Decimal?            @db.Decimal(12, 2)
  bidIncrementStep          Decimal?            @db.Decimal(12, 2)
  views                     Int?                @default(0)
  bidsCount                 Int?                @default(0)
  isFeatured                Boolean?            @default(false)
  isExclusive               Boolean?            @default(false)
  winningBidTermUrl         String?
  imageUrl                  String?
  imageMediaId              String?
  dataAiHint                String?
  hasKey                    Boolean?            @default(true)
  allowInstallmentBids      Boolean?            @default(true)
  inheritedMediaFromAssetId String?
  properties                Json?
  mapAddress                String?
  latitude                  Decimal?            @db.Decimal(9, 6)
  longitude                 Decimal?            @db.Decimal(9, 6)
  auctionId                 String
  auction                   Auction             @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  categoryId                String?
  category                  LotCategory?        @relation(fields: [categoryId], references: [id])
  subcategoryId             String?
  subcategory               Subcategory?        @relation(fields: [subcategoryId], references: [id])
  sellerId                  String?
  seller                    Seller?             @relation(fields: [sellerId], references: [id])
  auctioneerId              String?
  auctioneer                Auctioneer?         @relation(fields: [auctioneerId], references: [id])
  winnerId                  String?
  winner                    User?               @relation("WonLots", fields: [winnerId], references: [id])
  assets                    AssetsOnLots[]
  bids                      Bid[]
  reviews                   Review[]
  questions                 LotQuestion[]
  userWins                  UserWin[]
  maxBids                   UserLotMaxBid[]
  stageDetails              LotStageDetails[]
  originalLotId             String?             @unique
  originalLot               Lot?                @relation("RelistedLots", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot               Lot?                @relation("RelistedLots")
  isRelisted                Boolean             @default(false)
  relistCount               Int                 @default(0)
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  tenantId                  String
  tenant                    Tenant              @relation(fields: [tenantId], references: [id])
  
  @@index([auctionId])
  @@index([categoryId])
  @@index([sellerId])
  @@index([winnerId])
  @@index([tenantId])
}

model LotCategory {
  id                    String        @id @default(cuid())
  name                  String        @unique
  slug                  String        @unique
  description           String?
  hasSubcategories      Boolean       @default(false)
  displayOrder          Int           @default(0)
  iconName              String?
  logoUrl               String?
  logoMediaId           String?
  dataAiHintIcon        String?
  coverImageUrl         String?
  coverImageMediaId     String?
  dataAiHintCover       String?
  megaMenuImageUrl      String?
  megaMenuImageMediaId  String?
  dataAiHintMegaMenu    String?
  lots                  Lot[]
  assets                Asset[]
  subcategories         Subcategory[]
  directSaleOffers      DirectSaleOffer[]
  auctions              Auction[]
}

model LotQuestion {
  id                        String   @id @default(cuid())
  lotId                     String
  auctionId                 String
  userId                    String
  userDisplayName           String
  questionText              String   @db.Text
  isPublic                  Boolean  @default(true)
  answerText                String?  @db.Text
  answeredAt                DateTime?
  answeredByUserId          String?
  answeredByUserDisplayName String?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  lot                       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction                   Auction  @relation(fields: [auctionId], references: [id], onDelete: NoAction)
  user                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LotStageDetails {
  id              String   @id @default(cuid())
  lotId           String
  stageId         String
  initialBid      Decimal? @db.Decimal(12, 2)
  bidIncrement    Decimal? @db.Decimal(12, 2)
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  stage           AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)
  
  @@unique([lotId, stageId])
}

model MediaItem {
  id                  String  @id @default(cuid())
  fileName            String
  storagePath         String
  urlOriginal         String
  urlThumbnail        String?
  mimeType            String
  sizeBytes           Int
  title               String?
  altText             String?
  caption             String?
  description         String?
  dataAiHint          String?
  uploadedById        String
  uploadedBy          User    @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  judicialProcessId   String?
  judicialProcess     JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model Report {
  id           String   @id @default(cuid())
  name         String
  description  String?
  definition   Json
  createdBy    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String?  @db.Text
  isVerified      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: NoAction)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([lotId, userId])
}

model Role {
  id             String         @id @default(cuid())
  name           String         @unique
  nameNormalized String         @unique
  description    String?
  permissions    Json
  users          UsersOnRoles[]
}

model Seller {
  id                 String              @id @default(cuid())
  publicId           String              @unique @default(cuid())
  slug               String              @unique
  name               String              @unique
  contactName        String?
  email              String?             @unique
  phone              String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?             @db.Text
  isJudicial         Boolean             @default(false)
  address            String?
  city               String?
  state              String?
  zipCode            String?
  latitude           Decimal?            @db.Decimal(9, 6)
  longitude          Decimal?            @db.Decimal(9, 6)
  judicialBranchId   String?             @unique
  judicialBranch     JudicialBranch?     @relation(fields: [judicialBranchId], references: [id])
  judicialDistrictId String?
  judicialDistrict   JudicialDistrict?   @relation(fields: [judicialDistrictId], references: [id])
  courtId            String?
  court              Court?              @relation(fields: [courtId], references: [id])
  auctions           Auction[]
  lots               Lot[]
  assets             Asset[]
  userId             String?             @unique
  user               User?               @relation(fields: [userId], references: [id])
  directSaleOffers   DirectSaleOffer[]
  judicialProcesses  JudicialProcess[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  tenantId           String
  tenant             Tenant              @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

model State {
  id     String             @id @default(cuid())
  name   String             @unique
  uf     String             @unique
  slug   String             @unique
  cities City[]
  auctions Auction[]
  assets Asset[]
  judicialDistricts JudicialDistrict[]
}

model Subcategory {
  id                String       @id @default(cuid())
  name              String
  slug              String       @unique
  description       String?
  displayOrder      Int          @default(0)
  iconUrl           String?
  iconMediaId       String?
  dataAiHintIcon    String?
  parentCategoryId  String
  parentCategory    LotCategory  @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots              Lot[]
  assets            Asset[]

  @@unique([name, parentCategoryId])
  @@index([parentCategoryId])
}

model Subscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

model Tenant {
  id                 String                 @id @default(cuid())
  name               String
  subdomain          String?                @unique
  domain             String?                @unique
  auctions           Auction[]
  lots               Lot[]
  assets             Asset[]
  sellers            Seller[]
  auctioneers        Auctioneer[]
  users              UsersOnTenants[]
  judicialProcesses  JudicialProcess[]
  directSaleOffers   DirectSaleOffer[]
  subscribers        Subscriber[]
  reports            Report[]
  platformSettings   PlatformSettings?
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  notifications      Notification[]
}

model User {
  id                      String                 @id @default(cuid())
  publicId                String?                @unique
  email                   String                 @unique
  password                String?
  fullName                String?
  cpf                     String?                @unique
  rgNumber                String?
  rgIssuer                String?
  rgIssueDate             DateTime?
  rgState                 String?
  dateOfBirth             DateTime?
  cellPhone               String?
  homePhone               String?
  gender                  String?
  profession              String?
  nationality             String?
  maritalStatus           String?
  propertyRegime          String?
  spouseName              String?
  spouseCpf               String?
  zipCode                 String?
  street                  String?
  number                  String?
  complement              String?
  neighborhood            String?
  city                    String?
  state                   String?
  accountType             AccountType            @default(PHYSICAL)
  razaoSocial             String?
  cnpj                    String?                @unique
  inscricaoEstadual       String?
  website                 String?
  optInMarketing          Boolean                @default(false)
  habilitationStatus      UserHabilitationStatus @default(PENDING_DOCUMENTS)
  lastLogin               DateTime?
  avatarUrl               String?
  dataAiHint              String?
  badges                  Json?
  bids                    Bid[]
  wonLots                 Lot[]                  @relation("WonLots")
  wins                    UserWin[]
  reviews                 Review[]
  questions               LotQuestion[]
  documents               UserDocument[]
  maxBids                 UserLotMaxBid[]
  roles                   UsersOnRoles[]
  tenants                 UsersOnTenants[]
  sellerProfile           Seller?
  auctioneerProfile       Auctioneer?
  uploadedMedia           MediaItem[]
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  habilitations           AuctionHabilitation[]
  notifications           Notification[]
}

model UserDocument {
  id               String             @id @default(cuid())
  userId           String
  documentTypeId   String
  fileUrl          String
  fileName         String
  status           UserDocumentStatus @default(NOT_SENT)
  rejectionReason  String?
  submittedAt      DateTime           @default(now())
  verifiedAt       DateTime?
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType     DocumentType       @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, documentTypeId])
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Decimal  @db.Decimal(12, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: NoAction)

  @@unique([userId, lotId])
}

model UserWin {
  id                 String               @id @default(cuid())
  userId             String
  lotId              String               @unique
  winningBidAmount   Decimal              @db.Decimal(12, 2)
  winDate            DateTime             @default(now())
  paymentStatus      PaymentStatus        @default(PENDENTE)
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot                Lot                  @relation(fields: [lotId], references: [id], onDelete: NoAction)
  installmentPayments InstallmentPayment[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  
  @@index([userId])
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model UsersOnTenants {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId   String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, tenantId])
}

model VehicleMake {
  id      String         @id @default(cuid())
  name    String         @unique
  slug    String         @unique
  models  VehicleModel[]
}

model VehicleModel {
  id      String      @id @default(cuid())
  name    String
  slug    String      @unique
  makeId  String
  make    VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)
  
  @@unique([makeId, name])
}

model ThemeSettings {
  id                 String       @id @default(cuid())
  name               String       @unique
  platformSettingsId String
  platformSettings   PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  colors             ThemeColors?
}

model ThemeColors {
  id              String         @id @default(cuid())
  themeSettingsId String         @unique
  themeSettings   ThemeSettings  @relation(fields: [themeSettingsId], references: [id])
  primary         String?
  background      String?
  accent          String?
  lightPrimary    String?
  lightBackground String?
  lightAccent     String?
  darkPrimary     String?
  darkBackground  String?
  darkAccent      String?
}

model IdMasks {
  id                    String            @id @default(cuid())
  platformSettingsId    String            @unique
  platformSettings      PlatformSettings  @relation(fields: [platformSettingsId], references: [id])
  auctionCodeMask       String?
  lotCodeMask           String?
  sellerCodeMask        String?
  auctioneerCodeMask    String?
  userCodeMask          String?
  assetCodeMask         String?
  categoryCodeMask      String?
  subcategoryCodeMask   String?
}

model MapSettings {
  id                 String           @id @default(cuid())
  platformSettingsId String           @unique
  platformSettings   PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  defaultProvider    String           @default("openstreetmap")
  googleMapsApiKey   String?
}

model BiddingSettings {
  id                              String           @id @default(cuid())
  platformSettingsId              String           @unique
  platformSettings                PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  instantBiddingEnabled           Boolean          @default(true)
  getBidInfoInstantly             Boolean          @default(true)
  biddingInfoCheckIntervalSeconds Int              @default(1)
  defaultStageDurationDays        Int?
  defaultDaysBetweenStages        Int?
}

model PaymentGatewaySettings {
  id                           String           @id @default(cuid())
  platformSettingsId           String           @unique
  platformSettings             PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  defaultGateway               String           @default("Manual")
  platformCommissionPercentage Float            @default(5)
  gatewayApiKey                String?
  gatewayEncryptionKey         String?
}

model NotificationSettings {
  id                         String           @id @default(cuid())
  platformSettingsId       String           @unique
  platformSettings         PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  notifyOnNewAuction       Boolean          @default(true)
  notifyOnFeaturedLot      Boolean          @default(false)
  notifyOnAuctionEndingSoon Boolean          @default(true)
  notifyOnPromotions       Boolean          @default(true)
}

model MentalTriggerSettings {
  id                      String           @id @default(cuid())
  platformSettingsId    String           @unique
  platformSettings      PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  showDiscountBadge     Boolean          @default(true)
  showPopularityBadge   Boolean          @default(true)
  popularityViewThreshold Int              @default(500)
  showHotBidBadge       Boolean          @default(true)
  hotBidThreshold       Int              @default(10)
  showExclusiveBadge    Boolean          @default(true)
}

model SectionBadgeVisibility {
  id                      String           @id @default(cuid())
  platformSettingsId    String           @unique
  platformSettings      PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  searchGrid_showStatusBadge    Boolean @default(true)
  searchGrid_showDiscountBadge  Boolean @default(true)
  searchGrid_showUrgencyTimer   Boolean @default(true)
  searchGrid_showPopularityBadge Boolean @default(true)
  searchGrid_showHotBidBadge    Boolean @default(true)
  searchGrid_showExclusiveBadge Boolean @default(true)
}

model VariableIncrementRule {
  id                 String           @id @default(cuid())
  platformSettingsId String
  platformSettings   PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  from               Decimal          @db.Decimal(12, 2)
  to                 Decimal?         @db.Decimal(12, 2)
  increment          Decimal          @db.Decimal(12, 2)
}

model PlatformSettings {
  id                      String                   @id @default(cuid())
  tenantId                String                   @unique
  tenant                  Tenant                   @relation(fields: [tenantId], references: [id])
  
  siteTitle               String                   @default("BidExpert")
  siteTagline             String?
  logoUrl                 String?
  faviconUrl              String?
  
  galleryImageBasePath    String                   @default("/uploads/media/")
  storageProvider         String                   @default("local")
  firebaseStorageBucket   String?
  activeThemeName         String?
  
  searchPaginationType    String                   @default("loadMore")
  searchItemsPerPage      Int                      @default(12)
  searchLoadMoreCount     Int                      @default(12)
  showCountdownOnLotDetail Boolean                  @default(true)
  showCountdownOnCards    Boolean                  @default(true)
  showRelatedLotsOnLotDetail Boolean               @default(true)
  relatedLotsCount        Int                      @default(4)
  defaultListItemsPerPage Int                      @default(10)
  defaultUrgencyTimerHours Int?
  isSetupComplete         Boolean                  @default(false)
  crudFormMode            CrudFormMode             @default(modal)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  themes                  ThemeSettings[]
  platformPublicIdMasks   IdMasks[]
  mapSettings             MapSettings[]
  biddingSettings         BiddingSettings[]
  paymentGatewaySettings  PaymentGatewaySettings[]
  notificationSettings    NotificationSettings[]
  mentalTriggerSettings   MentalTriggerSettings[]
  sectionBadgeVisibility  SectionBadgeVisibility[]
  variableIncrementTable  VariableIncrementRule[]
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum AssetStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum SearchPaginationType {
  PAGINATION
  loadMore
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum CrudFormMode {
  modal
  sheet
}

    