// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// =================================================================
// ENUMS
// =================================================================

enum UserHabilitationStatus {
  PENDENTE_DOCUMENTOS
  PENDENTE_ANALISE
  HABILITADO
  REJEITADO_DOCUMENTOS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  PENDING_APPROVAL
  ACTIVE
  SOLD
  EXPIRED
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

// =================================================================
// MODELS
// =================================================================

model Permission {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  roles       Role[]
}

model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  permissions     Permission[]
  users           User[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model User {
  id                      String                  @id @default(cuid())
  email                   String                  @unique
  fullName                String
  password                String
  roleId                  String?
  role                    Role?                   @relation(fields: [roleId], references: [id])
  sellerId                String?                 @unique
  sellerProfile           Seller?
  auctioneerId            String?                 @unique
  auctioneerProfile       Auctioneer?
  habilitationStatus      UserHabilitationStatus  @default(PENDENTE_DOCUMENTOS)
  accountType             AccountType?
  cpf                     String?                 @unique
  rgNumber                String?
  rgIssuer                String?
  rgIssueDate             DateTime?
  rgState                 String?
  dateOfBirth             DateTime?
  cellPhone               String?
  homePhone               String?
  gender                  String?
  profession              String?
  nationality             String?
  maritalStatus           String?
  propertyRegime          String?
  spouseName              String?
  spouseCpf               String?
  zipCode                 String?
  street                  String?
  number                  String?
  complement              String?
  neighborhood            String?
  city                    String?
  state                   String?
  status                  String?
  optInMarketing          Boolean?                @default(false)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  avatarUrl               String?
  dataAiHint              String?
  badges                  String?
  userDocuments           UserDocument[]
  bids                    Bid[]
  wins                    UserWin[]
  maxBids                 UserLotMaxBid[]
  notifications           Notification[]
  reviews                 Review[]
  questions               LotQuestion[]
  answers                 LotQuestion[]           @relation("AnsweredBy")
  uploadedMedia           MediaItem[]
  blogPosts               BlogPost[]
  contactMessages         ContactMessage[]
}

model State {
  id        String             @id @default(cuid())
  name      String             @unique
  uf        String             @unique
  slug      String             @unique
  lotCount  Int?
  cityCount Int?
  cities    City[]
  courts    Court[]
  districts JudicialDistrict[]
  lots      Lot[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model City {
  id        String   @id @default(cuid())
  name      String
  slug      String
  stateId   String
  state     State    @relation(fields: [stateId], references: [id])
  stateUf   String
  ibgeCode  String?
  lotCount  Int?
  lots      Lot[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LotCategory {
  id                 String          @id @default(cuid())
  name               String          @unique
  slug               String          @unique
  description        String?         @db.Text
  itemCount          Int?
  hasSubcategories   Boolean?
  logoUrl            String?
  dataAiHintLogo     String?
  coverImageUrl      String?
  dataAiHintCover    String?
  megaMenuImageUrl   String?
  dataAiHintMegaMenu String?
  auctions           Auction[]
  lots               Lot[]
  bens               Bem[]
  subcategories      Subcategory[]
  directSaleOffers   DirectSaleOffer[]
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
}

model Subcategory {
  id               String      @id @default(cuid())
  name             String
  slug             String      @unique
  description      String?
  itemCount        Int?
  displayOrder     Int?
  parentCategoryId String
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id])
  lots             Lot[]
  bens             Bem[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model Court {
  id        String             @id @default(cuid())
  name      String             @unique
  slug      String             @unique
  stateUf   String
  state     State              @relation(fields: [stateUf], references: [uf])
  website   String?
  districts JudicialDistrict[]
  processes JudicialProcess[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model JudicialDistrict {
  id        String           @id @default(cuid())
  name      String
  slug      String
  courtId   String
  court     Court            @relation(fields: [courtId], references: [id])
  stateId   String
  state     State            @relation(fields: [stateId], references: [id])
  zipCode   String?
  branches  JudicialBranch[]
  processes JudicialProcess[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model JudicialBranch {
  id         String             @id @default(cuid())
  name       String
  slug       String
  districtId String
  district   JudicialDistrict   @relation(fields: [districtId], references: [id])
  contactName String?
  phone      String?
  email      String?
  sellers    Seller[]
  processes  JudicialProcess[]
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
}

model Seller {
  id                     String            @id @default(cuid())
  publicId               String            @unique
  name                   String
  slug                   String            @unique
  contactName            String?
  email                  String?
  phone                  String?
  address                String?
  city                   String?
  state                  String?
  zipCode                String?
  website                String?
  logoId                 String?
  logo                   MediaItem?        @relation(fields: [logoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dataAiHintLogo         String?
  description            String?           @db.Text
  isJudicial             Boolean?          @default(false)
  judicialBranchId       String?           @unique
  judicialBranch         JudicialBranch?   @relation(fields: [judicialBranchId], references: [id])
  userId                 String?           @unique
  user                   User?             @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  auctions               Auction[]
  bens                   Bem[]
  directSaleOffers       DirectSaleOffer[]
  judicialProcesses      JudicialProcess[]
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
}

model Auctioneer {
  id                     String    @id @default(cuid())
  publicId               String    @unique
  name                   String
  slug                   String    @unique
  registrationNumber     String?
  contactName            String?
  email                  String?
  phone                  String?
  address                String?
  city                   String?
  state                  String?
  zipCode                String?
  website                String?
  logoId                 String?
  logo                   MediaItem? @relation(fields: [logoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dataAiHintLogo         String?
  description            String?   @db.Text
  userId                 String?   @unique
  user                   User?     @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  auctions               Auction[]
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
}

model Auction {
  id                             String           @id @default(cuid())
  publicId                       String           @unique
  title                          String
  fullTitle                      String?          @db.Text
  description                    String?          @db.Text
  status                         AuctionStatus
  auctionType                    AuctionType?
  auctionDate                    DateTime
  endDate                        DateTime?
  city                           String?
  state                          String?
  imageUrl                       String?
  imageMediaId                   String?
  dataAiHint                     String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  visits                         Int?
  initialOffer                   Float?
  isFavorite                     Boolean?
  currentBid                     Float?
  bidsCount                      Int?
  automaticBiddingEnabled        Boolean?
  silentBiddingEnabled           Boolean?
  allowMultipleBidsPerUser       Boolean?
  allowInstallmentBids           Boolean?
  softCloseEnabled               Boolean?
  softCloseMinutes               Int?
  estimatedRevenue               Float?
  achievedRevenue                Float?
  totalHabilitatedUsers          Int?
  isFeaturedOnMarketplace        Boolean?
  marketplaceAnnouncementTitle   String?
  additionalTriggers             String?
  auctionStages                  Json
  totalLots                      Int              @default(0)
  categoryId                     String
  category                       LotCategory      @relation(fields: [categoryId], references: [id])
  auctioneerId                   String
  auctioneer                     Auctioneer       @relation(fields: [auctioneerId], references: [id])
  sellerId                       String?
  seller                         Seller?          @relation(fields: [sellerId], references: [id])
  judicialProcessId              String?
  judicialProcess                JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  lots                           Lot[]
  bids                           Bid[]
  reviews                        Review[]
  questions                      LotQuestion[]
  createdAt                      DateTime         @default(now())
  updatedAt                      DateTime         @updatedAt
}

model Lot {
  id                  String       @id @default(cuid())
  publicId            String       @unique
  title               String
  number              String?
  description         String?      @db.Text
  price               Float        @default(0)
  initialPrice        Float?
  secondInitialPrice  Float?
  bidIncrementStep    Float?
  status              LotStatus
  isFeatured          Boolean?
  isExclusive         Boolean?
  discountPercentage  Float?
  additionalTriggers  String?
  condition           String?
  dataAiHint          String?
  imageUrl            String?
  imageMediaId        String?
  galleryImageUrls    Json?
  mediaItemIds        Json?
  bemIds              Json?
  bens                Bem[]
  latitude            Float?
  longitude           Float?
  mapAddress          String?
  mapEmbedUrl         String?
  mapStaticImageUrl   String?
  views               Int?         @default(0)
  bidsCount           Int?         @default(0)
  endDate             DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate   DateTime?
  winningBidTermUrl   String?
  judicialProcessNumber String?
  courtName           String?
  courtDistrict       String?
  publicProcessUrl    String?
  propertyRegistrationNumber String?
  propertyLiens       String?      @db.Text
  knownDebts          String?      @db.Text
  additionalDocumentsInfo String?  @db.Text
  reservePrice        Float?
  evaluationValue     Float?
  debtAmount          Float?
  itbiValue           Float?
  auctionId           String
  auction             Auction      @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  categoryId          String?
  category            LotCategory? @relation(fields: [categoryId], references: [id])
  subcategoryId       String?
  subcategory         Subcategory? @relation(fields: [subcategoryId], references: [id])
  stateId             String?
  state               State?       @relation(fields: [stateId], references: [id])
  cityId              String?
  city                City?        @relation(fields: [cityId], references: [id])
  bids                Bid[]
  wins                UserWin[]
  maxBids             UserLotMaxBid[]
  reviews             Review[]
  questions           LotQuestion[]
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

model Bem {
  id                         String    @id @default(cuid())
  publicId                   String    @unique
  title                      String
  description                String?   @db.Text
  status                     BemStatus
  categoryId                 String?
  category                   LotCategory? @relation(fields: [categoryId], references: [id])
  subcategoryId              String?
  subcategory                Subcategory? @relation(fields: [subcategoryId], references: [id])
  evaluationValue            Float?
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  judicialProcessId          String?
  judicialProcess            JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  sellerId                   String?
  seller                     Seller?   @relation(fields: [sellerId], references: [id])
  lots                       Lot[]     @relation(fields: [bemIds], references: [id])
  bemIds                     String[]  @db.ObjectId
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
  
  // Veículos
  plate                      String?
  make                       String?
  model                      String?
  version                    String?
  year                       Int?
  modelYear                  Int?
  mileage                    Int?
  color                      String?
  fuelType                   String?
  transmissionType           String?
  bodyType                   String?
  vin                        String?
  renavam                    String?
  enginePower                String?
  numberOfDoors              Int?
  vehicleOptions             String?
  detranStatus               String?
  debts                      String?
  runningCondition           String?
  bodyCondition              String?
  tiresCondition             String?
  hasKey                     Boolean?

  // Imóveis
  propertyType               String?
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  area                       Float?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?   @db.Text
  infrastructure             String?   @db.Text
  condoDetails               String?   @db.Text
  improvements               String?   @db.Text
  topography                 String?
  liensAndEncumbrances       String?   @db.Text
  propertyDebts              String?   @db.Text
  unregisteredRecords        String?   @db.Text
  hasHabiteSe                Boolean?
  zoningRestrictions         String?

  // Semoventes
  breed                      String?
  age                        String?
  sex                        String?
  weight                     String?
  individualId               String?
  purpose                    String?
  sanitaryCondition          String?
  lineage                    String?
  isPregnant                 Boolean?
  specialSkills              String?
  gtaDocument                String?
  breedRegistryDocument      String?

  // Outros tipos de bens
  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String?   @db.Text
  includedAccessories        String?   @db.Text
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String?   @db.Text
  applianceCapacity          String?
  voltage                    String?
  applianceType              String?
  additionalFunctions        String?
  hoursUsed                  Int?
  engineType                 String?
  capacityOrPower            String?
  maintenanceHistory         String?   @db.Text
  installationLocation       String?
  compliesWithNR             String?
  operatingLicenses          String?
  furnitureType              String?
  material                   String?
  style                      String?
  dimensions                 String?
  pieceCount                 Int?
  jewelryType                String?
  metal                      String?
  gemstones                  String?
  totalWeight                String?
  jewelrySize                String?
  authenticityCertificate    String?
  workType                   String?
  artist                     String?
  period                     String?
  technique                  String?
  provenance                 String?   @db.Text
  boatType                   String?
  boatLength                 String?
  hullMaterial               String?
  onboardEquipment           String?   @db.Text
  productName                String?
  quantity                   String?
  packagingType              String?
  expirationDate             DateTime?
  storageConditions          String?
  preciousMetalType          String?
  purity                     String?
  forestGoodsType            String?
  volumeOrQuantity           String?
  species                    String?
  dofNumber                  String?
}


model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lotId     String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lotId])
}

model Review {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  userDisplayName String
  lotId           String
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId       String
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  rating          Int
  comment         String   @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model LotQuestion {
  id                        String   @id @default(cuid())
  userId                    String
  user                      User     @relation(fields: [userId], references: [id])
  userDisplayName           String
  lotId                     String
  lot                       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId                 String
  auction                   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  questionText              String   @db.Text
  answerText                String?  @db.Text
  answeredAt                DateTime?
  answeredByUserId          String?
  answeredByUser            User?    @relation("AnsweredBy", fields: [answeredByUserId], references: [id])
  answeredByUserDisplayName String?
  isPublic                  Boolean  @default(true)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}

model UserDocument {
  id              String             @id @default(cuid())
  userId          String
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentTypeId  String
  documentType    DocumentType       @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)
  fileUrl         String?
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  rejectionReason String?
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id           String         @id @default(cuid())
  name         String         @unique
  description  String?
  isRequired   Boolean
  allowedFormats String? // Comma-separated
  appliesTo    String? // Comma-separated (PHYSICAL, LEGAL)
  displayOrder Int
  userDocs     UserDocument[]
}

model DirectSaleOffer {
  id                   String                @id @default(cuid())
  publicId             String                @unique
  title                String
  description          String                @db.Text
  offerType            DirectSaleOfferType
  status               DirectSaleOfferStatus
  price                Float?
  minimumOfferPrice    Float?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  expiresAt            DateTime?
  itemsIncluded        Json?
  tags                 Json?
  views                Int?
  proposalsCount       Int?
  categoryId           String
  category             LotCategory           @relation(fields: [categoryId], references: [id])
  sellerId             String
  seller               Seller                @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model MediaItem {
  id                     String    @id @default(cuid())
  fileName               String
  storagePath            String    @unique
  urlOriginal            String?
  urlThumbnail           String?
  urlMedium              String?
  urlLarge               String?
  title                  String?
  altText                String?
  caption                String?
  description            String?
  mimeType               String
  sizeBytes              Int
  dimensions             Json?
  linkedLotIds           String[]
  dataAiHint             String?
  uploadedBy             String?
  user                   User?     @relation(fields: [uploadedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sellerLogoFor            Seller[]
  auctioneerLogoFor        Auctioneer[]
  blogPostFeaturedFor    BlogPost[]
  uploadedAt             DateTime  @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model UserWin {
  id               String        @id @default(cuid())
  userId           String
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  lotId            String
  lot              Lot           @relation(fields: [lotId], references: [id], onDelete: Cascade)
  winningBidAmount Float
  winDate          DateTime
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?
}

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId     String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidderId      String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())
}

model BlogPost {
  id              String      @id @default(cuid())
  title           String
  slug            String      @unique
  content         String      @db.Text
  excerpt         String?
  status          String      @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  authorId        String
  author          User        @relation(fields: [authorId], references: [id])
  featuredImageId String?
  featuredImage   MediaItem?  @relation(fields: [featuredImageId], references: [id], onDelete: SetNull)
  tags            String?     // Comma-separated
  publishedAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  repliedBy User?    @relation(fields: [repliedById], references: [id])
  repliedById String?
  repliedAt DateTime?
}

model PlatformSettings {
  id                             String   @id @default("global")
  siteTitle                      String?
  siteTagline                    String?
  galleryImageBasePath           String?
  storageProvider                String?  @default("local") // "local" | "firebase"
  firebaseStorageBucket          String?
  activeThemeName                String?
  themes                         Json?
  platformPublicIdMasks          Json?
  homepageSections               Json?
  mentalTriggerSettings          Json?
  sectionBadgeVisibility         Json?
  mapSettings                    Json?
  biddingSettings                Json?
  searchPaginationType           String?
  searchItemsPerPage             Int?
  searchLoadMoreCount            Int?
  defaultListItemsPerPage        Int?
  showCountdownOnLotDetail       Boolean?
  showCountdownOnCards           Boolean?
  showRelatedLotsOnLotDetail     Boolean?
  relatedLotsCount               Int?
  variableIncrementTable         Json[]
  updatedAt                      DateTime @updatedAt
}

// Judicial Process Models
model JudicialProcess {
  id              String           @id @default(cuid())
  publicId        String           @unique
  processNumber   String           @unique
  isElectronic    Boolean
  courtId         String
  court           Court            @relation(fields: [courtId], references: [id])
  districtId      String
  district        JudicialDistrict @relation(fields: [districtId], references: [id])
  branchId        String
  branch          JudicialBranch   @relation(fields: [branchId], references: [id])
  sellerId        String?
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  parties         ProcessParty[]
  bens            Bem[]
  auctions        Auction[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model ProcessParty {
  id             String           @id @default(cuid())
  processId      String
  process        JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)
  name           String
  documentNumber String?
  partyType      ProcessPartyType

  @@unique([processId, name, partyType])
}
```
- src/types/index.ts:
```ts
// src/types/index.ts
import type { 
    User, Role, UserDocument, DocumentType, Auction as PrismaAuction, Lot as PrismaLot, Bid, 
    UserWin, Seller, Auctioneer, DirectSaleOffer, MediaItem, LotCategory, 
    State as StateInfo, City as CityInfo, Subcategory,
    Court, JudicialDistrict, JudicialBranch, JudicialProcess, ProcessParty, Bem,
    Notification, BlogPost, ContactMessage,
    Review, LotQuestion, UserLotMaxBid,
    Prisma,
    Permission
} from '@prisma/client';
import type { Timestamp as FirebaseAdminTimestamp, FieldValue as FirebaseAdminFieldValue } from 'firebase-admin/firestore';
import type { Timestamp as FirebaseClientTimestamp } from 'firebase/firestore'; // Client SDK Timestamp

// For server-side logic (Admin SDK)
export type ServerTimestamp = FirebaseAdminTimestamp;
export type AdminFieldValue = FirebaseAdminFieldValue;

// For client-side logic or data received from client
export type ClientTimestamp = FirebaseClientTimestamp;

// Generic type for properties that could be any of these, or a JS Date
export type AnyTimestamp = ServerTimestamp | ClientTimestamp | Date | string | null | undefined;

// --- Redefining Prisma types to include relations or computed fields ---

export type Auction = PrismaAuction & {
  lots?: Lot[];
  totalLots?: number;
  auctioneer?: string;
  seller?: string;
  category?: string;
  auctioneerName?: string;
  auctioneerLogoUrl?: string;
};

export type Lot = PrismaLot & {
    auctionName?: string;
    type?: string;
    subcategoryName?: string;
    cityName?: string;
    stateUf?: string;
    isFavorite?: boolean;
    bens?: Bem[];
};

export type Bem = Prisma.BemGetPayload<{
  include: {
    category: true;
    subcategory: true;
    judicialProcess: true;
    seller: true;
  }
}> & {
  categoryName?: string;
  subcategoryName?: string;
  judicialProcessNumber?: string;
  sellerName?: string;
};


// --- EXPORTING PRISMA GENERATED TYPES ---
// This makes it easy to use the exact shape of our database models throughout the app.
export type { 
    User as UserProfileData, Role, UserDocument, DocumentType, Bid as BidInfo, 
    UserWin, Seller as SellerProfileInfo, Auctioneer as AuctioneerProfileInfo, 
    DirectSaleOffer, MediaItem, LotCategory, StateInfo, CityInfo, Subcategory,
    Court, JudicialDistrict, JudicialBranch, JudicialProcess, ProcessParty,
    Notification, BlogPost, ContactMessage, // Exporting ContactMessage
    Review, LotQuestion, UserLotMaxBid, // Exporting new types
    Prisma,
    Permission,
    Bem
};


// --- CUSTOM & COMPOSITE TYPES ---

// Adds computed permissions array to the base User type
export type UserProfileWithPermissions = User & {
  permissions: string[];
};

// Represents the data coming from the user registration form
export type UserCreationData = Partial<Omit<User, 'id' | 'createdAt' | 'updatedAt' | 'roleId' | 'sellerId' | 'badges'>> & {
  email: string;
  password?: string | null;
};

// Represents the fields that a user can edit on their own profile page
export type EditableUserProfileData = Partial<Omit<User, 'id' | 'email' | 'createdAt' | 'updatedAt' | 'roleId' | 'sellerId' | 'password' | 'badges'>>;

export type UserFormValues = Pick<User, 'fullName' | 'email' | 'cpf' | 'cellPhone' | 'dateOfBirth' | 'accountType' | 'razaoSocial' | 'cnpj' | 'inscricaoEstadual' | 'website' | 'zipCode' | 'street' | 'number' | 'complement' | 'neighborhood' | 'city' | 'state' | 'optInMarketing'> & {
  password?: string;
  roleId?: string | null; 
};


export interface UserBid {
    id: string;
    lotId: string;
    auctionId: string;
    lotTitle: string;
    lotImageUrl: string;
    lotImageAiHint?: string;
    userBidAmount: number;
    currentLotPrice: number;
    bidStatus: 'GANHANDO' | 'PERDENDO' | 'SUPERADO_POR_OUTRO' | 'SUPERADO_PELO_PROPRIO_MAXIMO' | 'ARREMATADO' | 'NAO_ARREMATADO' | 'ENCERRADO' | 'CANCELADO';
    bidDate: AnyTimestamp;
    lotEndDate: AnyTimestamp;
    lot: Lot; // Include full lot for linking
}

// --- FORM DATA TYPES ---
// These types define the shape of data coming from forms, before it's processed for the database.

export type CategoryFormData = Omit<LotCategory, 'id' | 'slug' | 'createdAt' | 'updatedAt' | 'itemCount' | 'hasSubcategories'>;
export type SubcategoryFormData = Omit<Subcategory, 'id' | 'slug' | 'createdAt' | 'updatedAt' | 'itemCount'>;
export type StateFormData = Omit<StateInfo, 'id' | 'slug' | 'createdAt' | 'updatedAt' | 'cityCount'>;
export type CityFormData = Omit<CityInfo, 'id' | 'slug' | 'stateUf' | 'createdAt' | 'updatedAt' | 'lotCount'>;
export type AuctioneerFormData = Omit<Auctioneer, 'id' | 'publicId' | 'slug' | 'createdAt' | 'updatedAt'>;
export type SellerFormData = Omit<Seller, 'id'| 'publicId' | 'slug' | 'createdAt' | 'updatedAt'>;
export type RoleFormData = Omit<Role, 'id' | 'name_normalized' | 'createdAt' | 'updatedAt'> & { permissions?: string[] };
export type CourtFormData = Omit<Court, 'id' | 'slug' | 'createdAt' | 'updatedAt'>;
export type JudicialDistrictFormData = Omit<JudicialDistrict, 'id' | 'slug' | 'createdAt' | 'updatedAt'>;
export type JudicialBranchFormData = Omit<JudicialBranch, 'id' | 'slug' | 'createdAt' | 'updatedAt'>;
export type JudicialProcessFormData = Omit<JudicialProcess, 'id' | 'publicId' | 'createdAt' | 'updatedAt'> & {
  parties: Array<Partial<ProcessParty>>; 
};
export type DocumentTemplateFormData = Omit<DocumentTemplate, 'id' | 'createdAt' | 'updatedAt'>;

export type BemFormData = Omit<Prisma.BemUncheckedCreateInput, 'id' | 'publicId' | 'createdAt' | 'updatedAt' | 'galleryImageUrls' | 'mediaItemIds' | 'amenities'> & {
  galleryImageUrls?: string[];
  mediaItemIds?: string[];
  amenities?: { value: string }[];
};

export type AuctionFormData = Omit<Auction, 'id' | 'publicId' | 'createdAt' | 'updatedAt' | 'totalLots'> & {
  auctionDate: Date; 
  endDate?: Date | null; 
};

export type LotFormData = Omit<Lot, 'id'|'publicId'|'createdAt'|'updatedAt'|'auctionId'|'categoryId'|'number'|'isFavorite'|'views'|'bidsCount'|'status'|'isFeatured'> & {
  auctionId: string;
  type: string; // From form, maps to categoryId
  auctionName?: string;
  bemIds?: string[];
  mediaItemIds?: string[];
  isFeatured?: boolean;
};

export type LotDbData = Omit<LotFormData, 'type' | 'auctionName'> & {
  categoryId: string;
};


export type DirectSaleOfferFormData = Omit<DirectSaleOffer, 'id' | 'publicId' | 'createdAt' | 'updatedAt' | 'views' | 'proposalsCount' | 'galleryImageUrls' | 'itemsIncluded' | 'tags' | 'sellerId' | 'sellerLogoUrl' | 'dataAiHintSellerLogo' | 'latitude' | 'longitude' | 'mapAddress' | 'mapEmbedUrl' | 'mapStaticImageUrl' | 'categoryId'> & {
    expiresAt?: Date | null;
    mediaItemIds?: string[];
    galleryImageUrls?: string[];
    category: string; // The form sends the name, action will resolve ID
    sellerName: string; // Form sends name
};

// --- WIZARD SPECIFIC TYPES ---

export interface WizardData {
  auctionType?: Extract<AuctionType, 'JUDICIAL' | 'EXTRAJUDICIAL' | 'PARTICULAR' | 'TOMADA_DE_PRECOS'>;
  judicialProcess?: JudicialProcess;
  auctionDetails?: Partial<Auction> & {
    auctioneer?: string; // name
    seller?: string;     // name
  };
  selectedBens?: Bem[];
  createdLots?: Partial<Lot>[];
}


// --- GENERIC & UTILITY TYPES ---

// Used for API responses from CNJ
export interface CnjProcessSource {
  numeroProcesso: string;
  classe: { codigo: number; nome: string };
  sistema: { codigo: number; nome: string };
  formato: { codigo: number; nome: string };
  tribunal: string;
  dataHoraUltimaAtualizacao: string;
  grau: string;
  dataAjuizamento: string;
  movimentos: any[];
  id: string;
  nivelSigilo: number;
  orgaoJulgador: {
    codigoMunicipioIBGE: number;
    codigo: number;
    nome: string;
  };
  assuntos: { codigo: number; nome: string }[][];
}
export interface CnjHit {
  _index: string;
  _type: string;
  _id: string;
  _score: number | null;
  _source: CnjProcessSource;
  sort?: (string | number)[];
}
export interface CnjSearchResponse {
  took: number;
  timed_out: boolean;
  hits: {
    total: {
      value: number;
      relation: string;
    };
    max_score: number | null;
    hits: CnjHit[];
  };
}

export type ThemeColors = Record<string, string>;

export interface Theme {
  name: string;
  colors: ThemeColors;
}

export interface MentalTriggerSettings {
    showDiscountBadge?: boolean;
    showUrgencyTimer?: boolean;
    urgencyTimerThresholdDays?: number;
    urgencyTimerThresholdHours?: number;
    showPopularityBadge?: boolean;
    popularityViewThreshold?: number;
    showHotBidBadge?: boolean;
    hotBidThreshold?: number;
    showExclusiveBadge?: boolean;
}

export interface BadgeVisibilitySettings {
  showStatusBadge?: boolean;
  showDiscountBadge?: boolean;
  showUrgencyTimer?: boolean;
  showPopularityBadge?: boolean;
  showHotBidBadge?: boolean;
  showExclusiveBadge?: boolean;
}

export interface SectionBadgeConfig {
  featuredLots?: BadgeVisibilitySettings;
  searchGrid?: BadgeVisibilitySettings;
  searchList?: BadgeVisibilitySettings;
  lotDetail?: BadgeVisibilitySettings; 
}

export type HomepageSectionType = 'hero_carousel' | 'filter_links' | 'featured_lots' | 'active_auctions' | 'promo_banner_1' | 'categories_grid';

export interface PromoCardContent {
    title: string;
    subtitle?: string;
    link: string;
    imageUrl?: string;
    imageAlt?: string;
    dataAiHint?: string;
    bgColorClass?: string;
}

export interface HomepageSectionConfig {
  id: string;
  type: HomepageSectionType;
  title?: string;
  visible: boolean;
  order: number;
  itemCount?: number; 
  categorySlug?: string; 
  promoContent?: PromoCardContent;
}

export interface MapSettings {
  defaultProvider?: 'google' | 'openstreetmap' | 'staticImage';
  googleMapsApiKey?: string | null;
  staticImageMapZoom?: number;
  staticImageMapMarkerColor?: string;
}

export type SearchPaginationType = 'loadMore' | 'numberedPages';

export type StorageProviderType = 'local' | 'firebase';

export interface BiddingSettings {
  instantBiddingEnabled?: boolean;
  getBidInfoInstantly?: boolean;
  biddingInfoCheckIntervalSeconds?: number;
}

export type VariableIncrementRule = Prisma.JsonValue;

export type PlatformSettingsFormData = Omit<PlatformSettings, 'id' | 'updatedAt' | 'variableIncrementTable'> & {
    variableIncrementTable?: { from: number, to: number | null, increment: number }[];
};


export interface AdminReportData {
  users: number;
  auctions: number;
  lots: number;
  sellers: number;
  totalRevenue: number;
  newUsersLast30Days: number;
  activeAuctions: number;
  lotsSoldCount: number;
  salesData: { name: string; Sales: number }[];
  categoryData: { name: string; value: number }[];
  averageBidValue: number;
  averageLotsPerAuction: number;
  auctionSuccessRate: number;
}

export interface AdminDashboardStats {
    users: number;
    auctions: number;
    lots: number;
    sellers: number;
}

export interface ConsignorDashboardStats {
    totalLotsConsigned: number;
    activeLots: number;
    soldLots: number;
    totalSalesValue: number;
    salesRate: number;
    salesData: { name: string; Sales: number }[];
}


export interface RecentlyViewedLotInfo {
  id: string;
  title: string;
  imageUrl: string;
  auctionId: string;
  dataAiHint?: string;
}

export type AuctionStage = Omit<Prisma.JsonValue, 'endDate'> & {
  name: string;
  endDate: AnyTimestamp;
  statusText?: string;
  initialPrice?: number;
};


// Enums for Zod schemas
export const lotStatusValues: [LotStatus, ...LotStatus[]] = [
  'EM_BREVE',
  'ABERTO_PARA_LANCES',
  'ENCERRADO',
  'VENDIDO',
  'NAO_VENDIDO',
];

export const auctionStatusValues: [AuctionStatus, ...AuctionStatus[]] = [
  'RASCUNHO',
  'EM_PREPARACAO',
  'EM_BREVE',
  'ABERTO', 
  'ABERTO_PARA_LANCES',
  'ENCERRADO',
  'FINALIZADO', 
  'CANCELADO',
  'SUSPENSO'
];

export const bemStatusValues: [Bem['status'], ...Bem['status'][]] = [
  'CADASTRO', 'DISPONIVEL', 'LOTEADO', 'VENDIDO', 'REMOVIDO', 'INATIVADO'
];

export const documentTemplateTypeValues: [DocumentTemplate['type'], ...DocumentTemplate['type'][]] = [
  'WINNING_BID_TERM', 'EVALUATION_REPORT', 'AUCTION_CERTIFICATE'
];
```
- yarn.lock:
```text
# This file is intentionally left empty. It will be re-generated on the next `yarn install` call.

```
- README.md:
```md
# BidExpert - Powered by Firebase Studio

This is a Next.js starter application built with Firebase Studio. It's designed to provide a robust foundation for an online auction platform, complete with an admin panel, user authentication, and a flexible data layer powered by Prisma.

To get started, take a look at `src/app/page.tsx`.

---

## Database Setup with Prisma

This project uses **Prisma** as its Object-Relational Mapper (ORM) to manage database interactions. It's configured to work with PostgreSQL, but can be adapted for other SQL databases like MySQL.

### 1. Create a `.env.local` File

In the root of your project, create a file named `.env.local`. This file will securely store your database connection string and should not be committed to version control.

### 2. Add Your Database Connection String

Add the `DATABASE_URL` environment variable to your `.env.local` file. You can get the connection string from your database provider's dashboard (e.g., Neon, Supabase, PlanetScale, AWS RDS) or construct it if you're running the database locally.

**Format for PostgreSQL:**
`postgresql://[USER]:[PASSWORD]@[HOST]:[PORT]/[DATABASE_NAME]`

**Example for a local PostgreSQL database:**
```
DATABASE_URL="postgresql://user:password@localhost:5432/bidexpert_db"
```

### 3. Initialize and Seed the Database

Once your connection string is set up, run the following commands in your terminal to prepare your database.

1.  **Apply Migrations:** This command reads your `prisma/schema.prisma` file and creates all the necessary tables in your database.
    ```bash
    npx prisma migrate dev --name init
    ```
    This will also automatically run `prisma generate` to create the Prisma Client based on your schema.

2.  **Seed the Database (Optional):** This command executes the `prisma/seed.ts` script to populate your database with essential data like default user roles, an admin account, and sample data to make development easier.
    ```bash
    npx prisma db seed
    ```

### 4. Start the Development Server

You're all set! Start the Next.js development server.
```bash
npm run dev
```

### Useful Prisma Commands

-   **`npx prisma studio`**: Opens a visual editor for your database in the browser.
-   **`npx prisma generate`**: Manually regenerates the Prisma Client after changes to `schema.prisma`.
-   **`npx prisma migrate dev --name <migration-name>`**: Creates a new migration file after you modify `schema.prisma`.

```