// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
  binaryTargets   = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

// ==============================================================================
// === User and Authentication Models
// ==============================================================================

model User {
  id                      String                   @id @default(uuid())
  email                   String                   @unique
  fullName                String?
  password                String
  avatarUrl               String?
  dataAiHint              String?
  roleId                  String?
  role                    Role?                    @relation(fields: [roleId], references: [id])
  habilitationStatus      UserHabilitationStatus   @default(PENDENTE_DOCUMENTOS)
  bids                    Bid[]
  wins                    UserWin[]
  notifications           Notification[]
  documents               UserDocument[]
  maxBids                 UserLotMaxBid[]
  reviews                 Review[]
  questions               LotQuestion[]
  answers                 LotQuestion[]            @relation("AnsweredByUser")
  uploadedMedia           MediaItem[]
  sellerProfile           Seller?                  @relation("UserToSeller")
  auctioneerProfile       Auctioneer?              @relation("UserToAuctioneer")
  // Gamification
  badges                  Json[]                   @default([])
  // Account Type Specific Fields
  accountType             String?                  @default("PHYSICAL") // e.g., PHYSICAL, LEGAL, DIRECT_SALE_CONSIGNOR
  // Physical Person
  cpf                     String?                  @unique
  rgNumber                String?
  rgIssuer                String?
  rgIssueDate             DateTime?
  rgState                 String?
  dateOfBirth             DateTime?
  gender                  String?
  profession              String?
  nationality             String?
  maritalStatus           String?
  propertyRegime          String? // Regime de bens
  spouseName              String?
  spouseCpf               String?
  // Legal Person
  razaoSocial             String?
  cnpj                    String?                  @unique
  inscricaoEstadual       String?
  website                 String?
  responsibleName         String?
  responsibleCpf          String?
  // Address
  cellPhone               String?
  homePhone               String?
  zipCode                 String?
  street                  String?
  number                  String?
  complement              String?
  neighborhood            String?
  city                    String?
  state                   String?
  // Preferences
  optInMarketing          Boolean?                 @default(false)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
}

model Role {
  id              String   @id @default(uuid())
  name            String   @unique
  name_normalized String   @unique @default("")
  description     String?  @db.Text
  permissions     Json[]   @default([])
  users           User[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model UserDocument {
  id                String             @id @default(uuid())
  userId            String
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentTypeId    String
  documentType      DocumentType       @relation(fields: [documentTypeId], references: [id])
  fileUrl           String
  fileName          String
  status            UserDocumentStatus @default(NOT_SENT)
  rejectionReason   String?            @db.Text
  uploadDate        DateTime           @default(now())
  analysisDate      DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id             String         @id @default(uuid())
  name           String         @unique
  description    String?
  isRequired     Boolean        @default(true)
  appliesTo      String?        // Comma-separated: PHYSICAL,LEGAL,DIRECT_SALE_CONSIGNOR
  allowedFormats String?        // Comma-separated: pdf,jpg,png
  displayOrder   Int            @default(0)
  userDocuments  UserDocument[]
}

// ==============================================================================
// === Auction Core Models
// ==============================================================================

model Auction {
  id                             String        @id @default(uuid())
  publicId                       String        @unique
  title                          String
  description                    String?       @db.Text
  status                         AuctionStatus @default(RASCUNHO)
  auctionType                    String?       // JUDICIAL, EXTRAJUDICIAL, PARTICULAR, TOMADA_DE_PRECOS, DUTCH, SILENT
  categoryId                     String
  category                       LotCategory   @relation(fields: [categoryId], references: [id])
  auctioneerId                   String
  auctioneer                     Auctioneer    @relation(fields: [auctioneerId], references: [id])
  sellerId                       String?
  seller                         Seller?       @relation(fields: [sellerId], references: [id])
  judicialProcessId              String?
  judicialProcess                JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json          @default("[]") // Ex: [{name: '1a Pra√ßa', endDate: '...', initialPrice: 10000}, ...]
  city                           String?
  state                          String?
  lots                           Lot[]
  totalLots                      Int?          @default(0)
  // Media
  imageUrl                       String?
  imageMediaId                   String?
  documentsUrl                   String?
  dataAiHint                     String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  // Bidding & Automation
  automaticBiddingEnabled        Boolean?      @default(false)
  silentBiddingEnabled           Boolean?      @default(false)
  allowMultipleBidsPerUser       Boolean?      @default(true)
  allowInstallmentBids           Boolean?      @default(false)
  softCloseEnabled               Boolean?      @default(false)
  softCloseMinutes               Int?          @default(2)
  autoRelistSettings             Json?
  // Dutch Auction Specifics
  decrementAmount                Float?
  decrementIntervalSeconds       Int?
  floorPrice                     Float?
  // Financials & Stats
  visits                         Int?          @default(0)
  estimatedRevenue               Float?
  achievedRevenue                Float?        @default(0)
  totalHabilitatedUsers          Int?          @default(0)
  // Marketplace & Marketing
  isFeaturedOnMarketplace        Boolean?      @default(false)
  marketplaceAnnouncementTitle   String?
  additionalTriggers             String?
  sellingBranch                  String?
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt

  @@index([sellerId])
  @@index([auctioneerId])
  @@index([judicialProcessId])
  @@index([status])
  @@index([auctionType])
  @@fulltext([title, description])
}

model Lot {
  id                       String         @id @default(uuid())
  publicId                 String         @unique
  auctionId                String
  auction                  Auction        @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  number                   String?
  title                    String
  description              String?        @db.Text
  status                   LotStatus      @default(EM_BREVE)
  price                    Float
  initialPrice             Float?
  secondInitialPrice       Float?
  reservePrice             Float?
  bidIncrementStep         Float?
  evaluationValue          Float?
  debtAmount               Float?
  itbiValue                Float?
  isFeatured               Boolean?       @default(false)
  isExclusive              Boolean?       @default(false)
  condition                String?
  location                 String?
  additionalTriggers       Json[]         @default([])
  // Dates
  lotSpecificAuctionDate   DateTime?
  secondAuctionDate        DateTime?
  endDate                  DateTime?
  // Relationships
  categoryId               String?
  category                 LotCategory?   @relation(fields: [categoryId], references: [id])
  subcategoryId            String?
  subcategory              Subcategory?   @relation(fields: [subcategoryId], references: [id])
  sellerId                 String?
  seller                   Seller?        @relation("SellerLots", fields: [sellerId], references: [id])
  auctioneerId             String?
  auctioneer               Auctioneer?    @relation("AuctioneerLots", fields: [auctioneerId], references: [id])
  bids                     Bid[]
  winnerId                 String?
  winner                   UserWin?       @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  reviews                  Review[]
  questions                LotQuestion[]
  maxBids                  UserLotMaxBid[]
  // Geolocation
  latitude                 Float?
  longitude                Float?
  mapAddress               String?
  mapEmbedUrl              String?        @db.Text
  mapStaticImageUrl        String?
  stateId                  String?
  state                    StateInfo?     @relation(fields: [stateId], references: [id])
  cityId                   String?
  city                     CityInfo?      @relation(fields: [cityId], references: [id])
  // Media
  imageUrl                 String?
  imageMediaId             String?
  galleryImageUrls         Json[]         @default([])
  mediaItemIds             Json[]         @default([])
  dataAiHint               String?
  // Judicial Info
  judicialProcessNumber    String?
  courtDistrict            String?
  courtName                String?
  publicProcessUrl         String?
  propertyRegistrationNumber String?
  propertyLiens            String?        @db.Text
  knownDebts               String?        @db.Text
  additionalDocumentsInfo  String?        @db.Text
  winningBidTermUrl        String?
  // Stats
  views                    Int?           @default(0)
  bidsCount                Int?           @default(0)
  // Bem Linking
  bemIds                   Json[]         @default([])
  bens                     Bem[]
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt

  @@unique([auctionId, number])
  @@index([auctionId])
  @@index([categoryId])
  @@index([status])
  @@index([sellerId])
  @@fulltext([title, description])
}

model Bid {
  id             String   @id @default(uuid())
  lotId          String
  lot            Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId      String
  bidderId       String
  bidder         User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderDisplay  String   // To avoid joining User table for display
  amount         Float
  timestamp      DateTime @default(now())
  isMaxBid       Boolean  @default(false)
  
  @@index([lotId])
  @@index([bidderId])
}

model UserWin {
  id                 String   @id @default(uuid())
  lotId              String   @unique
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  winningBidAmount   Float
  winDate            DateTime @default(now())
  paymentStatus      PaymentStatus @default(PENDENTE)
  invoiceUrl         String?
  
  @@index([userId])
}

model UserLotMaxBid {
    id        String   @id @default(uuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    lotId     String
    lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
    maxAmount Float
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, lotId])
}

// ==============================================================================
// === Entity and Content Models
// ==============================================================================

model Seller {
  id                        String             @id @default(uuid())
  publicId                  String             @unique
  name                      String
  slug                      String             @unique
  contactName               String?
  email                     String?            @unique
  phone                     String?
  address                   String?
  city                      String?
  state                     String?
  zipCode                   String?
  website                   String?
  logoUrl                   String?
  logoMediaId               String?            @unique
  logo                      MediaItem?         @relation("SellerLogo", fields: [logoMediaId], references: [id])
  dataAiHintLogo            String?
  description               String?            @db.Text
  userId                    String?            @unique
  user                      User?              @relation("UserToSeller", fields: [userId], references: [id])
  isJudicial                Boolean            @default(false)
  judicialBranchId          String?            @unique
  judicialBranch            JudicialBranch?    @relation(fields: [judicialBranchId], references: [id])
  auctions                  Auction[]
  lots                      Lot[]              @relation("SellerLots")
  directSales               DirectSaleOffer[]
  bens                      Bem[]
  // Stats
  rating                    Float?
  activeLotsCount           Int?               @default(0)
  totalSalesValue           Float?             @default(0)
  auctionsFacilitatedCount  Int?               @default(0)
  memberSince               DateTime?
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
}

model Auctioneer {
  id                        String        @id @default(uuid())
  publicId                  String        @unique
  name                      String
  slug                      String        @unique
  registrationNumber        String?
  contactName               String?
  email                     String?       @unique
  phone                     String?
  address                   String?
  city                      String?
  state                     String?
  zipCode                   String?
  website                   String?
  logoUrl                   String?
  logoMediaId               String?       @unique
  logo                      MediaItem?    @relation("AuctioneerLogo", fields: [logoMediaId], references: [id])
  dataAiHintLogo            String?
  description               String?       @db.Text
  userId                    String?       @unique
  user                      User?         @relation("UserToAuctioneer", fields: [userId], references: [id])
  auctions                  Auction[]
  lots                      Lot[]         @relation("AuctioneerLots")
  // Stats
  rating                    Float?
  auctionsConductedCount    Int?          @default(0)
  totalValueSold            Float?          @default(0)
  memberSince               DateTime?
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
}

model DirectSaleOffer {
  id                   String        @id @default(uuid())
  publicId             String        @unique
  title                String
  description          String?       @db.Text
  offerType            DirectSaleOfferType
  status               DirectSaleOfferStatus @default(PENDING_APPROVAL)
  price                Float?
  minimumOfferPrice    Float?
  categoryId           String
  category             LotCategory   @relation(fields: [categoryId], references: [id])
  sellerId             String
  seller               Seller        @relation(fields: [sellerId], references: [id])
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?       @unique
  image                MediaItem?    @relation("DirectSaleImage", fields: [imageMediaId], references: [id])
  dataAiHint           String?
  galleryImageUrls     Json[]        @default([])
  mediaItemIds         Json[]        @default([])
  itemsIncluded        Json[]        @default([])
  tags                 Json[]        @default([])
  views                Int?          @default(0)
  proposalsCount       Int?          @default(0)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  expiresAt            DateTime?
}

model MediaItem {
  id                        String    @id @default(uuid())
  fileName                  String
  storagePath               String    @unique
  title                     String?
  altText                   String?
  caption                   String?
  description               String?   @db.Text
  mimeType                  String
  sizeBytes                 Int
  uploadedAt                DateTime  @default(now())
  uploadedBy                String?
  userUploader              User?     @relation(fields: [uploadedBy], references: [id])
  // Public URLs
  urlOriginal               String
  urlThumbnail              String?
  urlMedium                 String?
  urlLarge                  String?
  // SEO & AI
  dataAiHint                String?
  // Relations
  lotId                     String?
  lot                       Lot?      @relation(fields: [lotId], references: [id])
  linkedLotIds              Json[]    @default([])
  auctionId                 String?
  sellerLogo                Seller?   @relation("SellerLogo")
  auctioneerLogo            Auctioneer? @relation("AuctioneerLogo")
  directSaleOffer           DirectSaleOffer? @relation("DirectSaleImage")
}

model LotCategory {
  id                  String         @id @default(uuid())
  name                String         @unique
  slug                String         @unique
  description         String?
  logoUrl             String?
  dataAiHintLogo      String?
  coverImageUrl       String?
  dataAiHintCover     String?
  megaMenuImageUrl    String?
  dataAiHintMegaMenu  String?
  itemCount           Int?           @default(0)
  hasSubcategories    Boolean?       @default(false)
  subcategories       Subcategory[]
  auctions            Auction[]
  lots                Lot[]
  directSaleOffers    DirectSaleOffer[]
  bens                Bem[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
}

model Subcategory {
  id                String       @id @default(uuid())
  name              String
  slug              String       @unique
  description       String?
  parentCategoryId  String
  parentCategory    LotCategory  @relation(fields: [parentCategoryId], references: [id])
  displayOrder      Int          @default(0)
  iconUrl           String?
  iconMediaId       String?
  dataAiHintIcon    String?
  lots              Lot[]
  bens              Bem[]

  @@unique([parentCategoryId, name])
}

model StateInfo {
  id        String   @id @default(uuid())
  name      String   @unique
  uf        String   @unique
  slug      String   @unique
  cityCount Int?     @default(0)
  cities    CityInfo[]
  courts    Court[]
  districts JudicialDistrict[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CityInfo {
  id        String   @id @default(uuid())
  name      String
  slug      String
  stateId   String
  state     StateInfo @relation(fields: [stateId], references: [id])
  stateUf   String
  ibgeCode  String?
  lotCount  Int?     @default(0)
  lots      Lot[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([stateId, name])
}


// ==============================================================================
// === Judicial System Models
// ==============================================================================

model Court {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  stateUf     String
  state       StateInfo @relation(fields: [stateUf], references: [uf])
  website     String?
  districts   JudicialDistrict[]
  processes   JudicialProcess[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model JudicialDistrict {
  id        String   @id @default(uuid())
  name      String
  slug      String
  courtId   String
  court     Court    @relation(fields: [courtId], references: [id])
  stateId   String
  state     StateInfo @relation(fields: [stateId], references: [id])
  zipCode   String?
  branches  JudicialBranch[]
  processes JudicialProcess[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courtId, name])
}

model JudicialBranch {
  id              String   @id @default(uuid())
  name            String
  slug            String
  districtId      String
  district        JudicialDistrict @relation(fields: [districtId], references: [id])
  contactName     String?
  phone           String?
  email           String?
  processes       JudicialProcess[]
  seller          Seller?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([districtId, name])
}

model JudicialProcess {
  id            String   @id @default(uuid())
  publicId      String   @unique
  processNumber String   @unique
  isElectronic  Boolean  @default(true)
  courtId       String
  court         Court    @relation(fields: [courtId], references: [id])
  districtId    String
  district      JudicialDistrict @relation(fields: [districtId], references: [id])
  branchId      String
  branch        JudicialBranch   @relation(fields: [branchId], references: [id])
  parties       ProcessParty[]
  bens          Bem[]
  auctions      Auction[]
  sellerId      String?
  seller        Seller? @relation(fields: [sellerId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ProcessParty {
  id              String   @id @default(uuid())
  processId       String
  process         JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  name            String
  documentNumber  String?
  partyType       ProcessPartyType @default(OUTRO)

  @@unique([processId, name, partyType])
}

// ==============================================================================
// === Bem (Asset) Model
// ==============================================================================

model Bem {
  id                  String       @id @default(uuid())
  publicId            String       @unique
  title               String
  description         String?      @db.Text
  status              BemStatus
  // Asset Origin
  judicialProcessId   String?
  judicialProcess     JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  sellerId            String?
  seller              Seller?      @relation(fields: [sellerId], references: [id])
  // Categorization
  categoryId          String?
  category            LotCategory? @relation(fields: [categoryId], references: [id])
  subcategoryId       String?
  subcategory         Subcategory? @relation(fields: [subcategoryId], references: [id])
  // Value
  evaluationValue     Float?
  // Media
  imageUrl            String?
  imageMediaId        String?
  bemImage            MediaItem?    @relation(fields: [imageMediaId], references: [id])
  galleryImageUrls    Json[]        @default([])
  mediaItemIds        Json[]        @default([])
  dataAiHint          String?
  // Location
  locationCity        String?
  locationState       String?
  address             String?
  latitude            Float?
  longitude           Float?
  // Vehicle Specific
  plate               String?
  make                String?
  model               String?
  version             String?
  year                Int?
  modelYear           Int?
  mileage             Int?
  color               String?
  fuelType            String?
  transmissionType    String?
  bodyType            String?
  vin                 String?      @unique
  renavam             String?      @unique
  enginePower         String?
  numberOfDoors       Int?
  vehicleOptions      String?      @db.Text
  detranStatus        String?
  debts               String?      @db.Text
  runningCondition    String?
  bodyCondition       String?
  tiresCondition      String?
  hasKey              Boolean?     @default(false)
  // Real Estate Specific
  propertyRegistrationNumber String? @unique
  iptuNumber               String? @unique
  isOccupied               Boolean? @default(false)
  totalArea                Float?
  builtArea                Float?
  bedrooms                 Int?
  suites                   Int?
  bathrooms                Int?
  parkingSpaces            Int?
  constructionType         String?
  finishes                 String? @db.Text
  infrastructure           String? @db.Text
  condoDetails             String? @db.Text
  improvements             String? @db.Text
  topography               String?
  liensAndEncumbrances     String? @db.Text
  propertyDebts            String? @db.Text
  unregisteredRecords      String? @db.Text
  hasHabiteSe              Boolean?
  zoningRestrictions       String?
  amenities                Json?
  // Electronics
  brand                    String?
  serialNumber             String? @unique
  itemCondition            String?
  specifications           String? @db.Text
  includedAccessories      String? @db.Text
  batteryCondition         String?
  hasInvoice               Boolean?
  hasWarranty              Boolean?
  repairHistory            String? @db.Text
  // Appliances
  applianceCapacity        String?
  voltage                  String?
  applianceType            String?
  additionalFunctions      String?
  // Machinery & Equipment
  hoursUsed                Int?
  engineType               String?
  capacityOrPower          String?
  maintenanceHistory       String? @db.Text
  installationLocation     String?
  compliesWithNR           String?
  operatingLicenses        String?
  // Livestock
  breed                    String?
  age                      String?
  sex                      String? // Macho, F√™mea
  weight                   String?
  individualId             String? @unique
  purpose                  String? // e.g., Corte, Leite, Reprodu√ß√£o
  sanitaryCondition        String?
  lineage                  String?
  isPregnant               Boolean?
  specialSkills            String?
  gtaDocument              String?
  breedRegistryDocument    String?
  // Furniture
  furnitureType            String?
  material                 String?
  style                    String?
  dimensions               String?
  pieceCount               Int?
  // Jewelry
  jewelryType              String?
  metal                    String?
  gemstones                String?
  totalWeight              String?
  jewelrySize              String?
  authenticityCertificate  String?
  // Art & Antiques
  workType                 String?
  artist                   String?
  period                   String?
  technique                String?
  provenance               String? @db.Text
  // Boats
  boatType                 String?
  boatLength               String?
  hullMaterial             String?
  onboardEquipment         String? @db.Text
  // Food
  productName              String?
  quantity                 String?
  packagingType            String?
  expirationDate           DateTime?
  storageConditions        String?
  // Precious Metals
  preciousMetalType        String?
  purity                   String?
  // Forest Goods
  forestGoodsType          String?
  volumeOrQuantity         String?
  species                  String?
  dofNumber                String?
  lots                     Lot[]
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  
  @@index([judicialProcessId])
  @@index([sellerId])
  @@index([categoryId])
  @@fulltext([title, description])
}


// ==============================================================================
// === Supporting Models (Notifications, Reviews, etc.)
// ==============================================================================

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())

  @@index([userId])
}

model BlogPost {
  id        String   @id @default(uuid())
  title     String
  slug      String   @unique
  content   String   @db.Text
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Review {
    id              String @id @default(uuid())
    lotId           String
    lot             Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
    auctionId       String
    userId          String
    user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userDisplayName String
    rating          Int
    comment         String @db.Text
    createdAt       DateTime @default(now())
}

model LotQuestion {
    id                          String @id @default(uuid())
    lotId                       String
    lot                         Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
    auctionId                   String
    userId                      String
    user                        User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userDisplayName             String
    questionText                String @db.Text
    isPublic                    Boolean @default(true)
    answerText                  String? @db.Text
    answeredAt                  DateTime?
    answeredByUserId            String?
    answeredByUser              User? @relation("AnsweredByUser", fields: [answeredByUserId], references: [id], onDelete: SetNull)
    answeredByUserDisplayName   String?
    createdAt                   DateTime @default(now())
}

model PlatformSettings {
  id                           String @id @default("global")
  siteTitle                    String?
  siteTagline                  String?
  galleryImageBasePath         String?
  storageProvider              String? @default("local")
  firebaseStorageBucket        String?
  activeThemeName              String?
  themes                       Json?
  platformPublicIdMasks        Json?
  homepageSections             Json?
  mentalTriggerSettings        Json?
  sectionBadgeVisibility       Json?
  mapSettings                  Json?
  searchPaginationType         String? @default("loadMore")
  searchItemsPerPage           Int? @default(12)
  searchLoadMoreCount          Int? @default(12)
  showCountdownOnLotDetail     Boolean? @default(true)
  showCountdownOnCards         Boolean? @default(true)
  showRelatedLotsOnLotDetail   Boolean? @default(true)
  relatedLotsCount             Int? @default(5)
  defaultUrgencyTimerHours     Int?
  biddingSettings              Json?
  variableIncrementTable       Json   @default("[]")
  defaultListItemsPerPage      Int? @default(10)
  updatedAt                    DateTime @updatedAt
}


// ==============================================================================
// === ENUMS
// ==============================================================================

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
}

enum DirectSaleOfferType {
    BUY_NOW
    ACCEPTS_PROPOSALS
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum UserHabilitationStatus {
  PENDENTE_DOCUMENTOS
  PENDING_ANALYSIS
  REJECTED_DOCUMENTS
  HABILITADO
  BLOCKED
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}
