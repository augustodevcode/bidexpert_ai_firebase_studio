// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// ENUMS - DEFINIÇÕES DE TIPO
// =================================================================

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

// =================================================================
// 1. MODELS WITHOUT DEPENDENCIES
// =================================================================

model Role {
  id              String          @id @default(uuid())
  name            String          @unique
  nameNormalized  String          @unique
  description     String?
  permissions     Json?
  users           UsersOnRoles[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model State {
  id                 String               @id @default(uuid())
  name               String
  uf                 String               @unique
  slug               String               @unique
  cities             City[]
  lotCount           Int?                 @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  auctions           Auction[]
  judicialDistricts  JudicialDistrict[]
  lots               Lot[]
}

model LotCategory {
  id                    String                @id @default(uuid())
  name                  String                @unique
  slug                  String                @unique
  description           String?               @db.VarChar(500)
  hasSubcategories      Boolean               @default(false)
  logoUrl               String?
  logoMediaId           String?
  dataAiHintLogo        String?
  coverImageUrl         String?
  coverImageMediaId     String?
  dataAiHintCover       String?
  megaMenuImageUrl      String?
  megaMenuImageMediaId  String?
  dataAiHintMegaMenu    String?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  subcategories         Subcategory[]
  lots                  Lot[]
  bens                  Bem[]
  auctions              Auction[]
  directSaleOffers      DirectSaleOffer[]
}

model DocumentType {
  id           String         @id @default(uuid())
  name         String
  description  String?
  isRequired   Boolean        @default(true)
  /// Comma-separated: PHYSICAL,LEGAL,ALL,PROCESS
  appliesTo    String?        
  userDocs     UserDocument[]
}

model DocumentTemplate {
  id        String   @id @default(uuid())
  name      String
  type      String
  content   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id      String   @id @default(uuid())
  name    String
  email   String
  subject String?
  message String   @db.Text
  isRead  Boolean  @default(false)
  createdAt DateTime @default(now())
}


// =================================================================
// 2. MODELS WITH ONE LEVEL OF DEPENDENCY
// =================================================================

model User {
  id                   String                 @id @default(uuid())
  email                String                 @unique
  password             String?
  fullName             String?
  habilitationStatus   String                 @default("PENDING_DOCUMENTS") /// UserHabilitationStatus enum
  accountType          String                 @default("PHYSICAL") /// AccountType enum
  avatarUrl            String?
  dataAiHint           String?
  badges               Json?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  roles                UsersOnRoles[]
  sellerProfile        Seller?
  auctioneerProfile    Auctioneer?
  uploadedMedia        MediaItem[]            @relation("UploadedBy")
  answeredQuestions    LotQuestion[]          @relation("AnsweredByUser")
  documents            UserDocument[]
  bids                 Bid[]
  wins                 UserWin[]
  maxBids              UserLotMaxBid[]
  questions            LotQuestion[]          @relation("AskedByUser")
  habilitations        AuctionHabilitation[]
  wonLots              Lot[]                  @relation("Winner")
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model Court {
  id                String               @id @default(uuid())
  name              String
  slug              String?              @unique
  stateUf           String?
  website           String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model City {
  id        String    @id @default(uuid())
  name      String
  slug      String?
  state     State     @relation(fields: [stateId], references: [id])
  stateId   String
  stateUf   String
  ibgeCode  String?   @unique
  lotCount  Int?      @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  auctions  Auction[]
}

model Subcategory {
  id                   String      @id @default(uuid())
  name                 String
  slug                 String?     @unique
  parentCategory       LotCategory @relation(fields: [parentCategoryId], references: [id])
  parentCategoryId     String
  description          String?     @db.VarChar(500)
  displayOrder         Int         @default(0)
  iconUrl              String?
  iconMediaId          String?
  dataAiHintIcon       String?
  lots                 Lot[]
  bens                 Bem[]
}


// =================================================================
// 3. MODELS WITH TWO OR MORE LEVELS OF DEPENDENCY
// =================================================================
model JudicialDistrict {
  id                String             @id @default(uuid())
  name              String
  slug              String?            @unique
  court             Court?             @relation(fields: [courtId], references: [id])
  courtId           String?
  state             State?             @relation(fields: [stateId], references: [id])
  stateId           String?
  zipCode           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
}

model JudicialBranch {
  id                String             @id @default(uuid())
  name              String
  slug              String?            @unique
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
  auctions          Auction[]
}

model Auctioneer {
  id                   String    @id @default(uuid())
  publicId             String    @unique
  slug                 String?   @unique
  name                 String
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?   @db.Text
  user                 User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId               String?   @unique
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  auctions             Auction[]
}

model Seller {
  id                   String             @id @default(uuid())
  publicId             String             @unique
  slug                 String?            @unique
  name                 String             @unique
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?            @db.Text
  user                 User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId               String?            @unique
  isJudicial           Boolean            @default(false)
  judicialBranch       JudicialBranch?    @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  judicialBranchId     String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  auctions             Auction[]
  bens                 Bem[]
  directSaleOffers     DirectSaleOffer[]
  judicialProcesses    JudicialProcess[]
}


model Bem {
  id                   String       @id @default(uuid())
  publicId             String       @unique
  title                String       @db.VarChar(200)
  description          String?      @db.Text
  status               String       @default("DISPONIVEL") // e.g., 'DISPONIVEL', 'LOTEADO', 'VENDIDO', 'REMOVIDO'
  category             LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId           String?
  subcategory          Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId        String?
  judicialProcess      JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId    String?
  seller               Seller?      @relation(fields: [sellerId], references: [id])
  sellerId             String?
  evaluationValue      Decimal?     @db.Decimal(15, 2)
  imageUrl             String?
  imageMediaId         String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  dataAiHint           String?
  locationCity         String?
  locationState        String?
  address              String?
  latitude             Decimal?     @db.Decimal(10, 8)
  longitude            Decimal?     @db.Decimal(11, 8)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  lots                 LotBens[]

  /// Vehicle-specific fields
  plate                String?
  make                 String?
  model                String?
  version              String?
  year                 Int?
  modelYear            Int?
  mileage              Int?
  color                String?
  fuelType             String?
  transmissionType     String?
  bodyType             String?
  vin                  String?      @db.VarChar(17)
  renavam              String?      @db.VarChar(11)
  enginePower          String?
  numberOfDoors        Int?
  vehicleOptions       String?      @db.VarChar(500)
  detranStatus         String?
  debts                String?      @db.VarChar(500)
  runningCondition     String?
  bodyCondition        String?
  tiresCondition       String?
  hasKey               Boolean?

  /// Real Estate-specific fields
  propertyRegistrationNumber String?
  iptuNumber               String?
  isOccupied               Boolean?
  totalArea                Decimal?     @db.Decimal(15, 2)
  builtArea                Decimal?     @db.Decimal(15, 2)
  bedrooms                 Int?
  suites                   Int?
  bathrooms                Int?
  parkingSpaces            Int?
  constructionType         String?
  finishes                 String?      @db.VarChar(500)
  infrastructure           String?      @db.VarChar(500)
  condoDetails             String?      @db.VarChar(500)
  improvements             String?      @db.VarChar(500)
  topography               String?
  liensAndEncumbrances     String?      @db.Text
  propertyDebts            String?      @db.VarChar(500)
  unregisteredRecords      String?      @db.VarChar(500)
  hasHabiteSe              Boolean?
  zoningRestrictions       String?
  amenities                Json?

  /// Electronics-specific fields
  brand                   String?
  serialNumber            String?
  itemCondition           String?
  specifications          String?     @db.Text
  includedAccessories     String?     @db.VarChar(500)
  batteryCondition        String?
  hasInvoice              Boolean?
  hasWarranty             Boolean?
  repairHistory           String?     @db.VarChar(500)

  // ... (outros campos específicos de outras categorias) ...
}

model DirectSaleOffer {
  id                   String       @id @default(uuid())
  publicId             String       @unique
  title                String
  description          String?      @db.Text
  offerType            String?      // e.g., 'BUY_NOW', 'ACCEPTS_PROPOSALS'
  price                Decimal?     @db.Decimal(15, 2)
  minimumOfferPrice    Decimal?     @db.Decimal(15, 2)
  status               String       @default("ACTIVE") // e.g., 'ACTIVE', 'SOLD', 'EXPIRED'
  category             LotCategory  @relation(fields: [categoryId], references: [id])
  categoryId           String
  seller               Seller       @relation(fields: [sellerId], references: [id])
  sellerId             String
  sellerName           String?
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int?         @default(0)
  expiresAt            DateTime?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
}

model JudicialProcess {
  id                   String             @id @default(uuid())
  publicId             String             @unique
  processNumber        String             @unique
  isElectronic         Boolean            @default(true)
  court                Court?             @relation(fields: [courtId], references: [id])
  courtId              String?
  district             JudicialDistrict?  @relation(fields: [districtId], references: [id])
  districtId           String?
  branch               JudicialBranch?    @relation(fields: [branchId], references: [id])
  branchId             String?
  seller               Seller?            @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId             String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  parties              JudicialParty[]
  bens                 Bem[]
  mediaItems           MediaItem[]
}

model JudicialParty {
  id             String          @id @default(uuid())
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId      String
  name           String
  documentNumber String?
  partyType      String // e.g., 'AUTOR', 'REU'
}

model LotBens {
  lot      Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId    String
  bem      Bem      @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId    String
  
  @@id([lotId, bemId])
}

model AuctionHabilitation {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  auction    Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId  String
  createdAt  DateTime @default(now())
  
  @@id([userId, auctionId])
}

// =================================================================
// 4. MAIN OPERATIONAL MODELS
// =================================================================
model AuctionStage {
  id            String   @id @default(uuid())
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  name          String
  startDate     DateTime
  endDate       DateTime
  /// Valor inicial do lance específico para esta praça
  initialPrice  Decimal? @db.Decimal(15, 2)
  statusText    String?
  lotDetails    LotAuctionStageDetails[]
}

model LotAuctionStageDetails {
  id                 String       @id @default(uuid())
  lot                Lot          @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId              String
  auctionStage       AuctionStage @relation(fields: [auctionStageId], references: [id], onDelete: Cascade)
  auctionStageId     String
  initialBid         Decimal      @db.Decimal(15, 2)
  bidIncrement       Decimal?     @db.Decimal(15, 2)
  /// Valor de avaliação específico para esta praça
  evaluationValue    Decimal?     @db.Decimal(15, 2)
  
  @@unique([lotId, auctionStageId])
}

model Auction {
  id                             String                 @id @default(uuid())
  publicId                       String                 @unique
  slug                           String                 @unique
  title                          String
  description                    String?                @db.Text
  status                         String                 @default("RASCUNHO")
  auctionDate                    DateTime
  endDate                        DateTime?
  auctioneer                     Auctioneer?            @relation(fields: [auctioneerId], references: [id])
  auctioneerId                   String?
  seller                         Seller?                @relation(fields: [sellerId], references: [id])
  sellerId                       String?
  category                       LotCategory?           @relation(fields: [categoryId], references: [id])
  categoryId                     String?
  judicialProcess                JudicialProcess?       @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  judicialProcessId              String?
  court                          Court?                 @relation(fields: [courtId], references: [id], onDelete: SetNull)
  courtId                        String?
  district                       JudicialDistrict?      @relation(fields: [districtId], references: [id], onDelete: SetNull)
  districtId                     String?
  branch                         JudicialBranch?        @relation(fields: [branchId], references: [id], onDelete: SetNull)
  branchId                       String?
  city                           City?                 @relation(fields: [cityId], references: [id])
  cityId                         String?
  state                          State?            @relation(fields: [stateId], references: [id])
  stateId                        String?
  imageUrl                       String?
  imageMediaId                   String?
  documentsUrl                   String?
  visits                         Int?                   @default(0)
  totalHabilitatedUsers          Int?                   @default(0)
  totalLots                      Int?                   @default(0)
  initialOffer                   Decimal?               @db.Decimal(15, 2)
  achievedRevenue                Decimal?               @db.Decimal(15, 2)
  isFeaturedOnMarketplace        Boolean                @default(false)
  marketplaceAnnouncementTitle   String?
  dataAiHint                     String?
  additionalTriggers             Json?
  
  // Settings
  auctionType                    AuctionType?
  auctionMethod                  AuctionMethod?         @default(STANDARD)
  participation                  AuctionParticipation?  @default(ONLINE)
  address                        String?
  zipCode                        String?
  onlineUrl                      String?
  sellingBranch                  String?
  automaticBiddingEnabled        Boolean                @default(false)
  allowInstallmentBids           Boolean                @default(true)
  silentBiddingEnabled           Boolean                @default(false)
  allowMultipleBidsPerUser       Boolean                @default(true)
  softCloseEnabled               Boolean                @default(false)
  softCloseMinutes               Int?                   @default(2)
  estimatedRevenue               Decimal?               @db.Decimal(15, 2)
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  autoRelistSettings             Json?

  createdAt                      DateTime               @default(now())
  updatedAt                      DateTime               @updatedAt

  lots                           Lot[]
  bids                           Bid[]
  auctionStages                  AuctionStage[]
  habilitations                  AuctionHabilitation[]
  questions                      LotQuestion[]
}

model Lot {
  id                         String                   @id @default(uuid())
  publicId                   String?                  @unique
  auction                    Auction                  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                  String
  slug                       String?                  @unique
  number                     String?
  title                      String
  description                String?                  @db.Text
  price                      Decimal                  @db.Decimal(15, 2)
  bidsCount                  Int?                     @default(0)
  views                      Int?                     @default(0)
  isFeatured                 Boolean                  @default(false)
  isExclusive                Boolean                  @default(false)
  discountPercentage         Int?
  additionalTriggers         Json?
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  inheritedMediaFromBemId    String?                  
  type                       String // Denormalized category name for easy display
  category                   LotCategory?             @relation(fields: [categoryId], references: [id])
  categoryId                 String?
  subcategory                Subcategory?             @relation(fields: [subcategoryId], references: [id])
  subcategoryId              String?
  auctionName                String?
  seller                     Seller?                  @relation(fields: [sellerId], references: [id])
  sellerId                   String?
  sellerName                 String?
  auctioneer                 Auctioneer?              @relation(fields: [auctioneerId], references: [id])
  auctioneerId               String?
  city                       City?                    @relation(fields: [cityId], references: [id])
  cityId                     String?
  state                      State?                   @relation(fields: [stateId], references: [id])
  stateId                    String?
  cityName                   String?
  stateUf                    String?
  latitude                   Decimal?                 @db.Decimal(10, 8)
  longitude                  Decimal?                 @db.Decimal(11, 8)
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?
  endDate                    DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  dataAiHint                 String?
  winner                     User?                    @relation("Winner", fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId                   String?
  winningBidTermUrl          String?
  createdAt                  DateTime                 @default(now())
  updatedAt                  DateTime                 @updatedAt
  bens                       LotBens[]
  bids                       Bid[]
  userWins                   UserWin[]
  maxBids                    UserLotMaxBid[]
  questions                  LotQuestion[]
  stageDetails               LotAuctionStageDetails[]
}

model LotQuestion {
  id                   String   @id @default(uuid())
  lot                  Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId                String
  auction              Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId            String
  user                 User     @relation("AskedByUser", fields: [userId], references: [id])
  userId               String
  userDisplayName      String
  questionText         String   @db.Text
  isPublic             Boolean  @default(true)
  answerText           String?  @db.Text
  answeredByUser       User?    @relation("AnsweredByUser", fields: [answeredByUserId], references: [id], onDelete: SetNull)
  answeredByUserId     String?
  answeredByUserDisplayName String?
  createdAt            DateTime @default(now())
  answeredAt           DateTime?
}


model MediaItem {
  id               String           @id @default(uuid())
  fileName         String
  storagePath      String           @unique
  title            String
  altText          String?
  caption          String?
  description      String?          @db.Text
  mimeType         String
  sizeBytes        Int
  urlOriginal      String
  urlThumbnail     String?
  urlMedium        String?
  urlLarge         String?
  linkedLotIds     Json?
  dataAiHint       String?
  uploadedByUser   User             @relation("UploadedBy", fields: [uploadedByUserId], references: [id])
  uploadedByUserId String
  judicialProcess  JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId String?
  uploadedAt       DateTime         @default(now())
}

model UserDocument {
  id              String       @id @default(uuid())
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  documentType    DocumentType @relation(fields: [documentTypeId], references: [id])
  documentTypeId  String
  status          String       @default("PENDING_ANALYSIS")
  fileUrl         String
  fileName        String?
  rejectionReason String?      @db.Text
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@unique([userId, documentTypeId])
}

model Bid {
  id            String   @id @default(uuid())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId      String
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
}

model UserWin {
  id               String  @id @default(uuid())
  lot              Lot     @relation(fields: [lotId], references: [id])
  lotId            String  @unique
  user             User    @relation(fields: [userId], references: [id])
  userId           String
  winningBidAmount Decimal @db.Decimal(15, 2)
  winDate          DateTime
  paymentStatus    String
  invoiceUrl       String?
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model PlatformSettings {
  id                             String   @id @default("global")
  siteTitle                      String?
  siteTagline                    String?
  logoUrl                        String?
  faviconUrl                     String?
  galleryImageBasePath           String?
  storageProvider                String?  @default("local")
  firebaseStorageBucket          String?
  activeThemeName                String?
  themes                         Json?
  platformPublicIdMasks          Json?
  homepageSections               Json?
  mentalTriggerSettings          Json?
  sectionBadgeVisibility         Json?
  mapSettings                    Json?
  searchPaginationType           String?  @default("loadMore")
  searchItemsPerPage             Int?     @default(12)
  searchLoadMoreCount            Int?     @default(12)
  showCountdownOnLotDetail       Boolean? @default(true)
  showCountdownOnCards           Boolean? @default(true)
  showRelatedLotsOnLotDetail     Boolean? @default(true)
  relatedLotsCount               Int?     @default(4)
  defaultUrgencyTimerHours       Int?
  variableIncrementTable         Json?
  biddingSettings                Json?
  paymentGatewaySettings         Json?
  defaultListItemsPerPage        Int?     @default(10)
  updatedAt                      DateTime @updatedAt
}

model VehicleMake {
  id String @id @default(uuid())
  name String @unique
  slug String @unique
  models VehicleModel[]
}

model VehicleModel {
  id String @id @default(uuid())
  name String
  slug String @unique
  make VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)
  makeId String

  @@unique([name, makeId])
}
