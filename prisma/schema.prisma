// prisma/schema.prisma

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-1.1.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// =================================================================
// ENUMS
// =================================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  PENDING_APPROVAL
  ACTIVE
  SOLD
  EXPIRED
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

// =================================================================
// MODELS
// =================================================================

model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  fullName                String?
  password                String
  roleId                  String?
  accountType             AccountType?
  cpf                     String?                @unique
  dateOfBirth             DateTime?
  razaoSocial             String?
  cnpj                    String?                @unique
  inscricaoEstadual       String?
  website                 String?
  cellPhone               String?
  zipCode                 String?
  street                  String?
  number                  String?
  complement              String?
  neighborhood            String?
  city                    String?
  state                   String?
  optInMarketing          Boolean                @default(false)
  badges                  Json?
  habilitationStatus      UserHabilitationStatus?  @default(PENDING_DOCUMENTS)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  avatarUrl               String?
  dataAiHint              String?
  rgNumber                String?
  rgIssuer                String?
  rgIssueDate             DateTime?
  rgState                 String?
  homePhone               String?
  gender                  String?
  profession              String?
  nationality             String?
  maritalStatus           String?
  propertyRegime          String?
  spouseName              String?
  spouseCpf               String?
  status                  String?
  activeBids              Int?
  auctionsWon             Int?
  itemsSold               Int?
  sellerId                String?                @unique
  auctioneerId            String?                @unique

  role                    Role?                    @relation(fields: [roleId], references: [id], onDelete: SetNull)
  sellerProfile           Seller?
  auctioneerProfile       Auctioneer?

  bids                    Bid[]
  wins                    UserWin[]
  documents               UserDocument[]
  notifications           Notification[]
  askedQuestions          LotQuestion[]            @relation("AskedByUser")
  answeredQuestions       LotQuestion[]            @relation("AnsweredByUser")
  uploadedMedia           MediaItem[]
  userLotMaxBids          UserLotMaxBid[]

  @@index([roleId])
}

model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  permissions     Permission[] @relation()
  users           User[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Permission {
  id    String @id @default(cuid())
  name  String @unique
  roles Role[] @relation()
}

model DocumentType {
  id             String             @id @default(cuid())
  name           String
  description    String?
  isRequired     Boolean            @default(true)
  appliesTo      Json?
  allowedFormats Json?
  displayOrder   Int                @default(0)
  userDocuments  UserDocument[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model UserDocument {
  id                String             @id @default(cuid())
  userId            String
  documentTypeId    String
  fileUrl           String?
  fileName          String?
  status            UserDocumentStatus @default(NOT_SENT)
  uploadDate        DateTime?
  analysisDate      DateTime?
  analystId         String?
  rejectionReason   String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType      DocumentType       @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)

  @@unique([userId, documentTypeId])
}

model Auction {
  id                             String        @id @default(cuid())
  publicId                       String        @unique
  title                          String
  fullTitle                      String?
  description                    String?       @db.Text
  status                         AuctionStatus @default(RASCUNHO)
  auctionType                    AuctionType?
  categoryId                     String
  auctioneerId                   String
  sellerId                       String?
  judicialProcessId              String?
  endDate                        DateTime?
  auctionStages                  Json?
  imageUrl                       String?
  dataAiHint                     String?
  documentsUrl                   String?
  totalLots                      Int?          @default(0)
  visits                         Int?          @default(0)
  initialOffer                   Float?
  isFavorite                     Boolean?
  currentBid                     Float?
  bidsCount                      Int?          @default(0)
  sellingBranch                  String?
  vehicleLocation                String?
  automaticBiddingEnabled        Boolean?
  allowInstallmentBids           Boolean?
  softCloseEnabled               Boolean?
  softCloseMinutes               Int?
  estimatedRevenue               Float?
  achievedRevenue                Float?
  totalHabilitatedUsers          Int?
  isFeaturedOnMarketplace        Boolean?
  marketplaceAnnouncementTitle   String?
  additionalTriggers             Json?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  imageMediaId                   String?       @unique
  decrementAmount                Float?
  decrementIntervalSeconds       Int?
  floorPrice                     Float?
  silentBiddingEnabled           Boolean?
  allowMultipleBidsPerUser       Boolean?
  autoRelistSettings             Json?
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt
  auctionDate                    DateTime      @default(now())

  category                       LotCategory   @relation(fields: [categoryId], references: [id])
  auctioneer                     Auctioneer    @relation(fields: [auctioneerId], references: [id])
  seller                         Seller?       @relation(fields: [sellerId], references: [id])
  judicialProcess                JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  lots                           Lot[]
  bids                           Bid[]
  reviews                        Review[]
  questions                      LotQuestion[]
  image                          MediaItem?    @relation("AuctionImage", fields: [imageMediaId], references: [id])

  @@index([categoryId])
  @@index([auctioneerId])
  @@index([sellerId])
  @@index([judicialProcessId])
}

model LotCategory {
  id                   String        @id @default(cuid())
  name                 String        @unique
  slug                 String        @unique
  description          String?
  itemCount            Int?
  hasSubcategories     Boolean       @default(false)
  logoMediaId          String?       @unique
  coverImageMediaId    String?       @unique
  megaMenuImageMediaId String?       @unique
  dataAiHintLogo       String?
  dataAiHintCover      String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  lots                 Lot[]
  auctions             Auction[]
  bens                 Bem[]
  subcategories        Subcategory[]
  logo                 MediaItem?    @relation("LogoCategory", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  coverImage           MediaItem?    @relation("CoverCategory", fields: [coverImageMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  megaMenuImage        MediaItem?    @relation("MegaMenuCategory", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  directSaleOffers     DirectSaleOffer[]
}

model Seller {
  id                         String            @id @default(cuid())
  publicId                   String            @unique
  name                       String
  slug                       String            @unique
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  description                String?           @db.Text
  memberSince                DateTime?
  rating                     Float?
  activeLotsCount            Int?
  totalSalesValue            Float?
  auctionsFacilitatedCount   Int?
  userId                     String?           @unique
  logoMediaId                String?           @unique
  dataAiHintLogo             String?
  isJudicial                 Boolean           @default(false)
  judicialBranchId           String?           @unique
  createdAt                  DateTime          @default(now())
  updatedAt                  DateTime          @updatedAt

  user                       User?             @relation("UserSeller", fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  judicialBranch             JudicialBranch?   @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  logo                       MediaItem?        @relation("LogoSeller", fields: [logoMediaId], references: [id])

  auctions                   Auction[]
  judicialProcesses          JudicialProcess[]
  directSaleOffers           DirectSaleOffer[]
  bens                       Bem[]
  lots                       Lot[]
}

model Auctioneer {
  id                       String    @id @default(cuid())
  publicId                 String    @unique
  name                     String
  slug                     String    @unique
  registrationNumber       String?
  contactName              String?
  email                    String?
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  description              String?
  memberSince              DateTime?
  rating                   Float?
  auctionsConductedCount   Int?
  totalValueSold           Float?
  userId                   String?   @unique
  logoMediaId              String?   @unique
  dataAiHintLogo           String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  user                     User?     @relation("UserAuctioneer", fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  logo                     MediaItem? @relation("LogoAuctioneer", fields: [logoMediaId], references: [id])

  auctions                 Auction[]
}

model JudicialProcess {
  id              String         @id @default(cuid())
  publicId        String         @unique
  processNumber   String         @unique
  isElectronic    Boolean        @default(true)
  courtId         String
  districtId      String
  branchId        String
  sellerId        String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  court           Court          @relation(fields: [courtId], references: [id])
  district        JudicialDistrict @relation(fields: [districtId], references: [id])
  branch          JudicialBranch @relation(fields: [branchId], references: [id])
  seller          Seller?        @relation(fields: [sellerId], references: [id])
  parties         ProcessParty[]
  bens            Bem[]
  auctions        Auction[]

  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
  @@index([sellerId])
}

model Court {
  id         String             @id @default(cuid())
  name       String             @unique
  slug       String             @unique
  stateUf    String
  website    String?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  districts  JudicialDistrict[]
  processes  JudicialProcess[]
}

model JudicialDistrict {
  id        String           @id @default(cuid())
  name      String
  slug      String           @unique
  courtId   String
  stateId   String
  zipCode   String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  court     Court            @relation(fields: [courtId], references: [id])
  state     StateInfo        @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]
}

model JudicialBranch {
  id              String             @id @default(cuid())
  name            String
  slug            String             @unique
  districtId      String
  contactName     String?
  phone           String?
  email           String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  district        JudicialDistrict   @relation(fields: [districtId], references: [id])
  processes       JudicialProcess[]
  judicialSellers Seller[]
}

model ProcessParty {
  id             String           @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  process        JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@unique([processId, name, partyType])
}

model StateInfo {
  id        String             @id @default(cuid())
  name      String             @unique
  uf        String             @unique
  slug      String             @unique
  cityCount Int?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  cities    CityInfo[]
  lots      Lot[]
  courts    Court[]
  districts JudicialDistrict[]
}

model CityInfo {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  stateId   String
  stateUf   String
  ibgeCode  String?
  lotCount  Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  state     StateInfo @relation(fields: [stateId], references: [id])
  lots      Lot[]
}

model Subcategory {
  id                   String      @id @default(cuid())
  name                 String
  slug                 String      @unique
  description          String?
  parentCategoryId     String
  itemCount            Int?
  displayOrder         Int         @default(0)
  iconMediaId          String?     @unique
  dataAiHintIcon       String?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt

  parentCategory       LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots                 Lot[]
  bens                 Bem[]
  icon                 MediaItem?  @relation("IconSubcategory", fields: [iconMediaId], references: [id])
}

model DirectSaleOffer {
  id                       String                @id @default(cuid())
  publicId                 String                @unique
  title                    String
  description              String                @db.Text
  offerType                DirectSaleOfferType
  status                   DirectSaleOfferStatus
  price                    Float?
  minimumOfferPrice        Float?
  categoryId               String
  sellerId                 String
  locationCity             String?
  locationState            String?
  imageUrl                 String?
  imageMediaId             String?               @unique
  dataAiHint               String?
  galleryImageUrls         Json?
  mediaItemIds             Json?
  itemsIncluded            Json?
  tags                     Json?
  views                    Int?                  @default(0)
  proposalsCount           Int?                  @default(0)
  expiresAt                DateTime?
  latitude                 Float?
  longitude                Float?
  mapAddress               String?
  mapEmbedUrl              String?
  mapStaticImageUrl        String?
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt

  category                 LotCategory           @relation(fields: [categoryId], references: [id])
  seller                   Seller                @relation(fields: [sellerId], references: [id])
  image                    MediaItem?            @relation("OfferImage", fields: [imageMediaId], references: [id])
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   @db.Text
  authorId    String
  authorName  String
  imageUrl    String?
  publishedAt DateTime?
  tags        Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ContactMessage {
  id         String   @id @default(cuid())
  name       String
  email      String
  subject    String
  message    String   @db.Text
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model Notification {
  id         String   @id @default(cuid())
  userId     String
  message    String
  link       String?
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@index([lotId])
}

model LotQuestion {
  id                        String   @id @default(cuid())
  lotId                     String
  auctionId                 String
  userId                    String
  userDisplayName           String
  questionText              String   @db.Text
  answerText                String?  @db.Text
  answeredAt                DateTime?
  answeredByUserId          String?
  answeredByUserDisplayName String?
  isPublic                  Boolean  @default(true)
  createdAt                 DateTime @default(now())

  lot               Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction           Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user              User @relation("AskedByUser", fields: [userId], references: [id], onDelete: Cascade)
  answeredByUser    User? @relation("AnsweredByUser", fields: [answeredByUserId], references: [id], onDelete: SetNull)

  @@index([lotId])
}

model UserLotMaxBid {
  id         String   @id @default(cuid())
  userId     String
  lotId      String
  maxAmount  Float
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot        Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model PlatformSettings {
  id                         String    @id @default("global")
  siteTitle                  String?
  siteTagline                String?
  galleryImageBasePath       String?
  storageProvider            String?
  firebaseStorageBucket      String?
  activeThemeName            String?
  themes                     Json?
  platformPublicIdMasks      Json?
  homepageSections           Json?
  mentalTriggerSettings      Json?
  sectionBadgeVisibility     Json?
  mapSettings                Json?
  searchPaginationType       String?
  searchItemsPerPage         Int?
  searchLoadMoreCount        Int?
  showCountdownOnLotDetail   Boolean?
  showCountdownOnCards       Boolean?
  showRelatedLotsOnLotDetail Boolean?
  relatedLotsCount           Int?
  variableIncrementTable     Json?     @default("[]")
  defaultListItemsPerPage    Int?
  biddingSettings            Json?
  updatedAt                  DateTime? @updatedAt
}

model Lot {
  id                         String     @id @default(cuid())
  publicId                   String     @unique
  auctionId                  String
  number                     String?
  title                      String
  description                String?    @db.Text
  price                      Float      @default(0)
  initialPrice               Float?
  secondInitialPrice         Float?
  bidIncrementStep           Float?
  status                     LotStatus
  categoryId                 String
  subcategoryId              String?
  stateId                    String?
  cityId                     String?
  imageUrl                   String?
  imageMediaId               String?    @unique
  winningBidTermUrl          String?
  views                      Int?       @default(0)
  bidsCount                  Int?       @default(0)
  isFeatured                 Boolean?
  isExclusive                Boolean?
  discountPercentage         Float?
  additionalTriggers         Json?
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?
  judicialProcessNumber      String?
  courtDistrict              String?
  courtName                  String?
  publicProcessUrl           String?
  propertyRegistrationNumber String?
  propertyLiens              String?
  knownDebts                 String?
  additionalDocumentsInfo    String?
  reservePrice               Float?
  evaluationValue            Float?
  debtAmount                 Float?
  itbiValue                  Float?
  endDate                    DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  dataAiHint                 String?
  sellerId                   String?
  auctioneerId               String?
  createdAt                  DateTime   @default(now())
  updatedAt                  DateTime   @updatedAt

  auction                    Auction      @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                   LotCategory  @relation(fields: [categoryId], references: [id])
  subcategory                Subcategory? @relation(fields: [subcategoryId], references: [id])
  state                      StateInfo?   @relation(fields: [stateId], references: [id])
  city                       CityInfo?    @relation(fields: [cityId], references: [id])
  image                      MediaItem?   @relation("LotImage", fields: [imageMediaId], references: [id])
  mediaItems                 MediaItem[]  @relation("LotMediaItems")
  bens                       Bem[]        @relation()
  seller                     Seller?      @relation(fields: [sellerId], references: [id])

  bids                       Bid[]
  wins                       UserWin[]
  reviews                    Review[]
  questions                  LotQuestion[]
  userLotMaxBids             UserLotMaxBid[]

  @@index([auctionId])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([stateId])
  @@index([cityId])
  @@index([sellerId])
}

model Bem {
  id                         String   @id @default(cuid())
  publicId                   String   @unique
  title                      String
  description                String?  @db.Text
  status                     BemStatus
  categoryId                 String?
  subcategoryId              String?
  judicialProcessId          String?
  sellerId                   String?
  evaluationValue            Float?
  imageUrl                   String?
  imageMediaId               String?  @unique
  galleryImageUrls           Json?
  mediaItemIds               Json?
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  plate                      String?
  make                       String?
  model                      String?
  version                    String?
  year                       Int?
  modelYear                  Int?
  mileage                    Int?
  color                      String?
  fuelType                   String?
  transmissionType           String?
  bodyType                   String?
  vin                        String?
  renavam                    String?
  enginePower                String?
  numberOfDoors              Int?
  vehicleOptions             String?
  detranStatus               String?
  debts                      String?
  runningCondition           String?
  bodyCondition              String?
  tiresCondition             String?
  hasKey                     Boolean?
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  area                       Float?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  propertyType               String?
  constructionType           String?
  finishes                   String?
  infrastructure             String?
  condoDetails               String?
  improvements               String?
  topography                 String?
  liensAndEncumbrances       String?
  propertyDebts              String?
  unregisteredRecords        String?
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String?
  includedAccessories        String?
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String?
  applianceCapacity          String?
  voltage                    String?
  applianceType              String?
  additionalFunctions        String?
  hoursUsed                  Int?
  engineType                 String?
  capacityOrPower            String?
  maintenanceHistory         String?
  installationLocation       String?
  compliesWithNR             String?
  operatingLicenses          String?
  breed                      String?
  age                        String?
  sex                        String?
  weight                     String?
  individualId               String?
  purpose                    String?
  sanitaryCondition          String?
  lineage                    String?
  isPregnant                 Boolean?
  specialSkills              String?
  gtaDocument                String?
  vaccinationStatus          String?
  breedRegistryDocument      String?
  furnitureType              String?
  material                   String?
  style                      String?
  dimensions                 String?
  pieceCount                 Int?
  jewelryType                String?
  metal                      String?
  gemstones                  String?
  totalWeight                String?
  jewelrySize                String?
  authenticityCertificate    String?
  workType                   String?
  artist                     String?
  period                     String?
  technique                  String?
  provenance                 String?
  boatType                   String?
  boatLength                 String?
  hullMaterial               String?
  onboardEquipment           String?
  productName                String?
  quantity                   String?
  packagingType              String?
  expirationDate             DateTime?
  storageConditions          String?
  preciousMetalType          String?
  purity                     String?
  forestGoodsType            String?
  volumeOrQuantity           String?
  species                    String?
  dofNumber                  String?
  amenities                  Json?     @default("[]")
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  category                   LotCategory?      @relation(fields: [categoryId], references: [id])
  subcategory                Subcategory?      @relation(fields: [subcategoryId], references: [id])
  judicialProcess            JudicialProcess?  @relation(fields: [judicialProcessId], references: [id])
  seller                     Seller?           @relation(fields: [sellerId], references: [id])
  image                      MediaItem?        @relation("BemImage", fields: [imageMediaId], references: [id])
  lots                       Lot[]             @relation()
}

model MediaItem {
  id                   String      @id @default(cuid())
  fileName             String
  storagePath          String?
  title                String?
  altText              String?
  caption              String?
  description          String?
  mimeType             String
  sizeBytes            Int
  dimensions           Json?
  urlOriginal          String
  urlThumbnail         String?
  urlMedium            String?
  urlLarge             String?
  linkedLotIds         Json?
  dataAiHint           String?
  uploadedBy           String?
  uploadedAt           DateTime    @default(now())
  updatedAt            DateTime    @updatedAt

  user                 User?       @relation(fields: [uploadedBy], references: [id])

  AuctionImage         Auction?    @relation("AuctionImage")
  LotImage             Lot?        @relation("LotImage")
  lots                 Lot[]       @relation("LotMediaItems")
  BemImage             Bem?        @relation("BemImage")
  LogoSeller           Seller?     @relation("LogoSeller")
  LogoAuctioneer       Auctioneer? @relation("LogoAuctioneer")
  LogoCategory         LotCategory?@relation("LogoCategory")
  CoverCategory        LotCategory?@relation("CoverCategory")
  MegaMenuCategory     LotCategory?@relation("MegaMenuCategory")
  IconSubcategory      Subcategory?@relation("IconSubcategory")
  OfferImage           DirectSaleOffer? @relation("OfferImage")
}

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([bidderId])
}

model UserWin {
  id               String        @id @default(cuid())
  lotId            String        @unique
  userId           String
  winningBidAmount Float
  winDate          DateTime      @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?
  lot              Lot           @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
