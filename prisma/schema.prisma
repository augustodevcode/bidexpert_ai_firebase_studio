
// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// MODELOS PRINCIPAIS (CORE MODELS)
// =================================================================

model Auction {
  id                            String       @id @default(uuid())
  publicId                      String       @unique @default(uuid())
  slug                          String       @unique
  title                         String
  description                   String?      @db.Text
  status                        String       @default("RASCUNHO")
  auctionDate                   DateTime     @default(now())
  endDate                       DateTime?
  auctioneerId                  String?
  sellerId                      String?
  categoryId                    String?
  auctionType                   String?
  imageUrl                      String?
  imageMediaId                  String?
  documentsUrl                  String?
  visits                        Int          @default(0)
  totalLots                     Int          @default(0)
  initialOffer                  Float?
  isFavorite                    Boolean      @default(false)
  dataAiHint                    String?
  evaluationReportUrl           String?
  auctionCertificateUrl         String?
  sellingBranch                 String?
  automaticBiddingEnabled       Boolean      @default(false)
  allowInstallmentBids          Boolean      @default(true)
  silentBiddingEnabled          Boolean      @default(false)
  allowMultipleBidsPerUser      Boolean      @default(true)
  softCloseEnabled              Boolean      @default(false)
  softCloseMinutes              Int?         @default(2)
  estimatedRevenue              Float?
  achievedRevenue               Float?
  totalHabilitatedUsers         Int?         @default(0)
  isFeaturedOnMarketplace       Boolean      @default(false)
  marketplaceAnnouncementTitle  String?
  judicialProcessId             String?
  additionalTriggers            Json?
  decrementAmount               Float?
  decrementIntervalSeconds      Int?
  floorPrice                    Float?
  autoRelistSettings            Json?
  createdAt                     DateTime     @default(now())
  updatedAt                     DateTime     @updatedAt
  auctioneer                    Auctioneer?  @relation(fields: [auctioneerId], references: [id])
  category                      LotCategory? @relation(fields: [categoryId], references: [id])
  judicialProcess               JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller                        Seller?      @relation(fields: [sellerId], references: [id])
  lots                          Lot[]
  bids                          Bid[]
  auctionHabilitations          AuctionHabilitation[]
  auctionStages                 Json
}

model Lot {
  id                   String    @id @default(uuid())
  publicId             String    @unique @default(uuid())
  auctionId            String
  slug                 String?
  number               String?
  title                String
  description          String?   @db.Text
  price                Float     @default(0)
  initialPrice         Float?
  secondInitialPrice   Float?
  bidIncrementStep     Float?
  status               String    @default("EM_BREVE")
  bidsCount            Int       @default(0)
  views                Int       @default(0)
  isFeatured           Boolean   @default(false)
  isExclusive          Boolean   @default(false)
  discountPercentage   Int?
  additionalTriggers   Json?
  imageUrl             String?
  imageMediaId         String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  type                 String
  categoryId           String?
  subcategoryId        String?
  auctionName          String?
  sellerId             String?
  sellerName           String?
  auctioneerId         String?
  cityId               String?
  stateId              String?
  cityName             String?
  stateUf              String?
  latitude             Decimal?  @db.Decimal(10, 8)
  longitude            Decimal?  @db.Decimal(11, 8)
  mapAddress           String?
  mapEmbedUrl          String?   @db.Text
  mapStaticImageUrl    String?
  endDate              DateTime?
  auctionDate          DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate    DateTime?
  condition            String?
  dataAiHint           String?
  winnerId             String?
  winningBidTermUrl    String?
  allowInstallmentBids Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  auction       Auction?      @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category      LotCategory?  @relation(fields: [categoryId], references: [id])
  city          City?         @relation(fields: [cityId], references: [id])
  seller        Seller?       @relation(fields: [sellerId], references: [id])
  state         State?        @relation(fields: [stateId], references: [id])
  subcategory   Subcategory?  @relation(fields: [subcategoryId], references: [id])
  winner        User?         @relation(fields: [winnerId], references: [id])
  bids          Bid[]
  userWins      UserWin[]
  bens          LotBens[]
  maxBids       UserLotMaxBid[]
}

model Role {
  id            String   @id @default(uuid())
  name          String
  nameNormalized String   @unique
  description   String?
  permissions   Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  users         UsersOnRoles[]
}

model User {
  id                 String       @id @default(uuid())
  email              String       @unique
  password           String?
  fullName           String?
  sellerId           String?      @unique
  habilitationStatus String       @default("PENDING_DOCUMENTS")
  accountType        String       @default("PHYSICAL")
  avatarUrl          String?
  dataAiHint         String?
  badges             Json?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  
  cpf                String?      @unique
  rgNumber           String?
  rgIssuer           String?
  rgIssueDate        DateTime?
  rgState            String?
  dateOfBirth        DateTime?
  cellPhone          String?
  homePhone          String?
  gender             String?
  profession         String?
  nationality        String?
  maritalStatus      String?
  propertyRegime     String?
  spouseName         String?
  spouseCpf          String?
  
  razaoSocial        String?
  cnpj               String?      @unique
  inscricaoEstadual  String?
  website            String?
  responsibleName    String?
  responsibleCpf     String?
  
  zipCode            String?
  street             String?
  number             String?
  complement         String?
  neighborhood       String?
  city               String?
  state              String?
  optInMarketing     Boolean?     @default(false)

  bids                 Bid[]
  wins                 UserWin[]
  maxBids              UserLotMaxBid[]
  seller               Seller?
  auctioneer           Auctioneer?
  roles                UsersOnRoles[]
  documents            UserDocument[]
  mediaItems           MediaItem[]
  auctionHabilitations AuctionHabilitation[]
  notifications        Notification[]
  lotsWon              Lot[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  role       Role     @relation(fields: [roleId], references: [id])
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model LotCategory {
  id                 String  @id @default(uuid())
  name               String
  slug               String  @unique
  description        String? @db.Text
  hasSubcategories   Boolean @default(false)
  logoUrl            String?
  logoMediaId        String?
  dataAiHintIcon     String?
  dataAiHintLogo     String?
  coverImageUrl      String?
  coverImageMediaId  String?
  dataAiHintCover    String?
  megaMenuImageUrl   String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu String?
  iconName           String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  auctions          Auction[]
  lots              Lot[]
  bens              Bem[]
  subcategories     Subcategory[]
  directSaleOffers  DirectSaleOffer[]
}

model Subcategory {
  id               String  @id @default(uuid())
  name             String
  slug             String?
  parentCategoryId String
  description      String? @db.Text
  displayOrder     Int     @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?

  parentCategory LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots           Lot[]
  bens           Bem[]
}


// =================================================================
// ENTIDADES GEOGR√ÅFICAS E JUDICIAIS
// =================================================================

model State {
  id        String   @id @default(uuid())
  name      String
  uf        String   @unique
  slug      String   @unique
  cityCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cities    City[]
  districts JudicialDistrict[]
  lots      Lot[]
}

model City {
  id        String   @id @default(uuid())
  name      String
  slug      String?
  stateId   String
  stateUf   String?
  ibgeCode  String?  @unique
  lotCount  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  state State @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots  Lot[]
}

model Court {
  id                String   @id @default(uuid())
  name              String
  slug              String?
  stateUf           String?
  website           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  districts         JudicialDistrict[]
  judicialProcesses JudicialProcess[]
}

model JudicialDistrict {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  courtId   String?
  stateId   String?
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  court             Court?             @relation(fields: [courtId], references: [id])
  state             State?             @relation(fields: [stateId], references: [id])
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
}

model JudicialBranch {
  id           String   @id @default(uuid())
  name         String
  slug         String   @unique
  districtId   String?
  contactName  String?
  phone        String?
  email        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  district          JudicialDistrict?   @relation(fields: [districtId], references: [id])
  sellers           Seller[]
  judicialProcesses JudicialProcess[]
}


// =================================================================
// ENTIDADES DE USU√ÅRIOS (PERFIS)
// =================================================================

model Auctioneer {
  id                  String   @id @default(uuid())
  publicId            String   @unique
  slug                String   @unique
  name                String
  registrationNumber  String?
  contactName         String?
  email               String?
  phone               String?
  address             String?
  city                String?
  state               String?
  zipCode             String?
  website             String?
  logoUrl             String?
  logoMediaId         String?
  dataAiHintLogo      String?
  description         String?  @db.Text
  userId              String?  @unique
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  user     User?     @relation(fields: [userId], references: [id])
  auctions Auction[]
}

model Seller {
  id               String   @id @default(uuid())
  publicId         String   @unique
  slug             String   @unique
  name             String   @unique
  contactName      String?
  email            String?
  phone            String?
  address          String?
  city             String?
  state            String?
  zipCode          String?
  website          String?
  logoUrl          String?
  logoMediaId      String?
  dataAiHintLogo   String?
  description      String?  @db.Text
  userId           String?  @unique
  isJudicial       Boolean  @default(false)
  judicialBranchId String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  judicialBranch    JudicialBranch?   @relation(fields: [judicialBranchId], references: [id])
  user              User?             @relation(fields: [userId], references: [id])
  auctions          Auction[]
  lots              Lot[]
  bens              Bem[]
  judicialProcesses JudicialProcess[]
  directSaleOffers  DirectSaleOffer[]
}


// =================================================================
// ENTIDADES DE ITENS
// =================================================================

model JudicialProcess {
  id                String   @id @default(uuid())
  publicId          String   @unique
  processNumber     String
  isElectronic      Boolean  @default(true)
  courtId           String?
  districtId        String?
  branchId          String?
  sellerId          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  court             Court?             @relation(fields: [courtId], references: [id])
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  branch            JudicialBranch?    @relation(fields: [branchId], references: [id])
  seller            Seller?            @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties           JudicialParty[]
  bens              Bem[]
  auctions          Auction[]
}

model JudicialParty {
  id              String  @id @default(uuid())
  processId       String
  name            String
  documentNumber  String?
  partyType       String
  process         JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model Bem {
  id                  String   @id @default(uuid())
  title               String
  description         String?  @db.Text
  status              String   @default("DISPONIVEL")
  categoryId          String?
  subcategoryId       String?
  judicialProcessId   String?
  sellerId            String?
  evaluationValue     Float?
  imageUrl            String?
  imageMediaId        String?
  galleryImageUrls    Json?
  mediaItemIds        Json?
  dataAiHint          String?
  locationCity        String?
  locationState       String?
  address             String?
  latitude            Decimal? @db.Decimal(10, 8)
  longitude           Decimal? @db.Decimal(11, 8)
  
  // Ve√≠culos
  plate                 String?
  make                  String?
  model                 String?
  version               String?
  year                  Int?
  modelYear             Int?
  mileage               Int?
  color                 String?
  fuelType              String?
  transmissionType      String?
  bodyType              String?
  vin                   String?
  renavam               String?
  enginePower           String?
  numberOfDoors         Int?
  vehicleOptions        String?
  detranStatus          String?
  debts                 String?
  runningCondition      String?
  bodyCondition         String?
  tiresCondition        String?
  hasKey                Boolean?

  // Im√≥veis
  propertyType              String?
  propertyRegistrationNumber String?
  iptuNumber                String?
  isOccupied                Boolean?
  area                      Float?
  totalArea                 Float?
  builtArea                 Float?
  bedrooms                  Int?
  suites                    Int?
  bathrooms                 Int?
  parkingSpaces             Int?
  constructionType          String?
  finishes                  String?
  infrastructure            String?
  condoDetails              String?
  improvements              String?
  topography                String?
  liensAndEncumbrances      String?
  propertyDebts             String?
  unregisteredRecords       String?
  hasHabiteSe               Boolean?
  zoningRestrictions        String?
  amenities                 Json?

  // Eletr√¥nicos
  brand                 String?
  serialNumber          String?
  itemCondition         String?
  specifications        String?
  includedAccessories   String?
  batteryCondition      String?
  hasInvoice            Boolean?
  hasWarranty           Boolean?
  repairHistory         String?
  
  // Eletrodom√©sticos
  applianceCapacity   String?
  voltage             String?
  applianceType       String?
  additionalFunctions String?
  
  // M√°quinas e Equipamentos
  hoursUsed           Int?
  engineType          String?
  capacityOrPower     String?
  maintenanceHistory  String?
  installationLocation String?
  compliesWithNR      String?
  operatingLicenses   String?
  
  // Semoventes (Gado)
  breed                 String?
  age                   String?
  sex                   String? // Macho, F√™mea
  weight                String?
  individualId          String? // ID/brinco do animal
  purpose               String? // Corte, Leite, Reprodu√ß√£o
  sanitaryCondition     String?
  vaccinationStatus     String?
  lineage               String?
  isPregnant            Boolean?
  specialSkills         String?
  gtaDocument           String?
  breedRegistryDocument String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  category        LotCategory?    @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory?    @relation(fields: [subcategoryId], references: [id])
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller          Seller?         @relation(fields: [sellerId], references: [id])
  lots            LotBens[]
}

model LotBens {
  lot    Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId  String
  bem    Bem  @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId  String

  @@id([lotId, bemId])
}


// =================================================================
// TABELAS AUXILIARES E DE TRANSA√á√ïES
// =================================================================

model MediaItem {
  id            String   @id @default(uuid())
  fileName      String   @unique
  storagePath   String
  title         String?
  altText       String?
  caption       String?  @db.Text
  description   String?  @db.Text
  mimeType      String
  sizeBytes     Int
  urlOriginal   String
  urlThumbnail  String?
  urlMedium     String?
  urlLarge      String?
  linkedLotIds  Json?
  dataAiHint    String?
  uploadedBy    User?    @relation(fields: [uploadedByUserId], references: [id])
  uploadedAt    DateTime @default(now())
  uploadedByUserId String?
  judicialProcessId String?
}

model UserDocument {
  id              String        @id @default(uuid())
  userId          String
  documentTypeId  String
  status          String        @default("PENDING")
  fileUrl         String
  fileName        String?
  rejectionReason String?       @db.Text
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType  @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id          String   @id @default(uuid())
  name        String
  description String?
  isRequired  Boolean  @default(true)
  appliesTo   String?
  userDocuments UserDocument[]
}

model Bid {
  id             String   @id @default(uuid())
  lotId          String
  auctionId      String
  bidderId       String
  bidderDisplay  String?
  amount         Float
  timestamp      DateTime @default(now())

  lot     Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder  User @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String   @id @default(uuid())
  lotId            String   @unique
  userId           String
  winningBidAmount Float
  winDate          DateTime @default(now())
  paymentStatus    String
  invoiceUrl       String?

  lot Lot  @relation(fields: [lotId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}


model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DirectSaleOffer {
  id                   String      @id @default(uuid())
  publicId             String      @unique
  title                String
  description          String?     @db.Text
  offerType            String?
  price                Float?
  minimumOfferPrice    Float?
  status               String      @default("ACTIVE")
  categoryId           String?
  sellerId             String?
  sellerName           String?
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int         @default(0)
  expiresAt            DateTime?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  
  seller   Seller?      @relation(fields: [sellerId], references: [id])
  category LotCategory? @relation(fields: [categoryId], references: [id])
}

model AuctionHabilitation {
  id        String @id @default(uuid())
  userId    String
  auctionId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@unique([userId, auctionId])
}


// =================================================================
// CONFIGURA√á√ïES GLOBAIS
// =================================================================

model PlatformSettings {
  id                            String @id @default("global")
  siteTitle                     String?
  siteTagline                   String?
  logoUrl                       String?
  faviconUrl                    String?
  galleryImageBasePath          String?
  storageProvider               String?
  firebaseStorageBucket         String?
  activeThemeName               String?
  themes                        Json?
  platformPublicIdMasks         Json?
  homepageSections              Json?
  mentalTriggerSettings         Json?
  sectionBadgeVisibility        Json?
  mapSettings                   Json?
  searchPaginationType          String?
  searchItemsPerPage            Int?
  searchLoadMoreCount           Int?
  showCountdownOnLotDetail      Boolean?
  showCountdownOnCards          Boolean?
  showRelatedLotsOnLotDetail    Boolean?
  relatedLotsCount              Int?
  defaultUrgencyTimerHours      Int?
  variableIncrementTable        Json?
  biddingSettings               Json?
  defaultListItemsPerPage       Int?
  updatedAt                     DateTime? @updatedAt
}

model ContactMessage {
  id          String   @id @default(uuid())
  name        String
  email       String
  subject     String
  message     String   @db.Text
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model DocumentTemplate {
  id        String   @id @default(uuid())
  name      String
  type      String
  content   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

