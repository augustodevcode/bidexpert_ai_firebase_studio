// prisma/schema.prisma

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
  previewFeatures = ["fullTextSearch"]
}

// ==============================================================================
//  Authentication & Authorization
// ==============================================================================

model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  fullName                String?
  password                String
  avatarUrl               String?
  dataAiHint              String?
  roleId                  String?
  role                    Role?                  @relation(fields: [roleId], references: [id])
  sellerId                String?                @unique
  seller                  Seller?                @relation("SellerUser", fields: [sellerId], references: [id])
  auctioneerId            String?                @unique
  auctioneer              Auctioneer?            @relation("AuctioneerUser", fields: [auctioneerId], references: [id])
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  bids                    Bid[]
  wins                    UserWin[]
  documents               UserDocument[]
  notifications           Notification[]
  questions               LotQuestion[]
  reviews                 Review[]
  maxBids                 UserLotMaxBid[]
  optInMarketing          Boolean                @default(false)
  habilitationStatus      UserHabilitationStatus @default(PENDING_DOCUMENTS)
  badges                  Json?
  accountType             AccountType?
  cpf                     String?                @unique
  dateOfBirth             DateTime?
  rgNumber                String?
  rgIssuer                String?
  rgIssueDate             DateTime?
  rgState                 String?
  gender                  String?
  profession              String?
  nationality             String?
  maritalStatus           String?
  propertyRegime          String?
  spouseName              String?
  spouseCpf               String?
  razaoSocial             String?
  cnpj                    String?                @unique
  inscricaoEstadual       String?
  website                 String?
  cellPhone               String?
  homePhone               String?
  zipCode                 String?
  street                  String?
  number                  String?
  complement              String?
  neighborhood            String?
  city                    String?
  state                   String?

  @@map("users")
}

model Role {
  id              String   @id @default(cuid())
  name            String   @unique
  name_normalized String   @unique
  description     String?
  users           User[]
  permissions     String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("roles")
}

// ==============================================================================
//  Core Auction Entities
// ==============================================================================

model Auction {
  id                             String        @id @default(cuid())
  publicId                       String        @unique @default(cuid())
  title                          String
  description                    String?       @db.Text
  status                         AuctionStatus @default(EM_PREPARACAO)
  auctionType                    AuctionType?
  auctionDate                    DateTime
  endDate                        DateTime?
  city                           String?
  state                          String?
  imageUrl                       String?
  imageMediaId                   String?
  dataAiHint                     String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  visits                         Int?          @default(0)
  initialOffer                   Float?
  isFavorite                     Boolean?      @default(false)
  softCloseEnabled               Boolean       @default(true)
  softCloseMinutes               Int?
  automaticBiddingEnabled        Boolean       @default(true)
  allowInstallmentBids           Boolean       @default(false)
  isFeaturedOnMarketplace        Boolean       @default(false)
  marketplaceAnnouncementTitle   String?
  estimatedRevenue               Float?
  achievedRevenue                Float?
  totalHabilitatedUsers          Int?
  sellingBranch                  String?
  silentBiddingEnabled           Boolean       @default(false)
  allowMultipleBidsPerUser       Boolean       @default(true)
  decrementAmount                Float?
  decrementIntervalSeconds       Int?
  floorPrice                     Float?
  autoRelistSettings             Json?
  lots                           Lot[]
  bids                           Bid[]
  reviews                        Review[]
  questions                      LotQuestion[]
  auctionStages                  Json[]
  additionalTriggers             String?
  categoryId                     String?
  category                       LotCategory?  @relation(fields: [categoryId], references: [id])
  auctioneerId                   String?
  auctioneer                     Auctioneer?   @relation(fields: [auctioneerId], references: [id])
  sellerId                       String?
  seller                         Seller?       @relation(fields: [sellerId], references: [id])
  judicialProcessId              String?
  judicialProcess                JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt

  @@fulltext([title, description])
  @@map("auctions")
}

model Lot {
  id                         String        @id @default(cuid())
  publicId                   String        @unique @default(cuid())
  number                     String?
  title                      String
  description                String?       @db.Text
  status                     LotStatus     @default(EM_BREVE)
  price                      Float
  initialPrice               Float?
  secondInitialPrice         Float?
  bidIncrementStep           Float?
  isFeatured                 Boolean?      @default(false)
  isExclusive                Boolean?      @default(false)
  discountPercentage         Float?
  views                      Int?          @default(0)
  bidsCount                  Int?          @default(0)
  imageUrl                   String?
  imageMediaId               String?
  dataAiHint                 String?
  galleryImageUrls           Json?
  mediaItemIds               String[]
  bemIds                     String[]
  bens                       Bem[]
  lotSpecificAuctionDate     DateTime?
  endDate                    DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?
  judicialProcessNumber      String?
  courtDistrict              String?
  courtName                  String?
  publicProcessUrl           String?
  propertyRegistrationNumber String?
  propertyLiens              String?
  knownDebts                 String?
  additionalDocumentsInfo    String?
  winningBidTermUrl          String?
  reservePrice               Float?
  evaluationValue            Float?
  debtAmount                 Float?
  itbiValue                  Float?
  auctionId                  String
  auction                    Auction       @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  categoryId                 String?
  category                   LotCategory?  @relation(fields: [categoryId], references: [id], onUpdate: NoAction)
  subcategoryId              String?
  subcategory                Subcategory?  @relation(fields: [subcategoryId], references: [id], onUpdate: NoAction)
  cityId                     String?
  city                       City?         @relation(fields: [cityId], references: [id])
  stateId                    String?
  state                      State?        @relation(fields: [stateId], references: [id])
  sellerId                   String?
  auctioneerId               String?
  bids                       Bid[]
  wins                       UserWin[]
  reviews                    Review[]
  questions                  LotQuestion[]
  maxBids                    UserLotMaxBid[]
  createdAt                  DateTime      @default(now())
  updatedAt                  DateTime      @updatedAt

  @@fulltext([title, description])
  @@map("lots")
}

model DirectSaleOffer {
  id                    String                @id @default(cuid())
  publicId              String                @unique @default(cuid())
  title                 String
  description           String?
  offerType             DirectSaleOfferType
  status                DirectSaleOfferStatus
  price                 Float?
  minimumOfferPrice     Float?
  locationCity          String?
  locationState         String?
  imageUrl              String?
  imageMediaId          String?
  dataAiHint            String?
  galleryImageUrls      Json?
  itemsIncluded         String[]
  tags                  String[]
  views                 Int                   @default(0)
  proposalsCount        Int                   @default(0)
  expiresAt             DateTime?
  sellerId              String
  seller                Seller                @relation(fields: [sellerId], references: [id])
  categoryId            String
  category              LotCategory           @relation(fields: [categoryId], references: [id])
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt

  @@map("direct_sale_offers")
}


model Bid {
  id             String   @id @default(cuid())
  lotId          String
  lot            Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId      String
  auction        Auction  @relation(fields: [auctionId], references: [id])
  bidderId       String
  bidder         User     @relation(fields: [bidderId], references: [id])
  bidderDisplay  String
  amount         Float
  timestamp      DateTime @default(now())
  isRetracted    Boolean  @default(false)
  retractionReason String?
  bidType        String?  // e.g., 'MANUAL', 'AUTOMATIC'

  @@map("bids")
}

model UserWin {
  id                  String        @id @default(cuid())
  lotId               String        @unique
  lot                 Lot           @relation(fields: [lotId], references: [id])
  userId              String
  user                User          @relation(fields: [userId], references: [id])
  winningBidAmount    Float
  winDate             DateTime
  paymentStatus       PaymentStatus @default(PENDENTE)
  paymentDeadline     DateTime?
  retrievalStatus     String?       // PENDENTE, AGENDADO, RETIRADO
  retrievalDeadline   DateTime?
  invoiceUrl          String?
  shippingInfo        Json?

  @@map("user_wins")
}

// ==============================================================================
//  Content & Taxonomy
// ==============================================================================

model LotCategory {
  id                 String              @id @default(cuid())
  name               String              @unique
  slug               String              @unique
  description        String?
  logoUrl            String?
  dataAiHintLogo     String?
  coverImageUrl      String?
  dataAiHintCover    String?
  megaMenuImageUrl   String?
  dataAiHintMegaMenu String?
  itemCount          Int                 @default(0)
  hasSubcategories   Boolean             @default(false)
  subcategories      Subcategory[]
  lots               Lot[]
  directSaleOffers   DirectSaleOffer[]
  bens               Bem[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@map("lot_categories")
}

model Subcategory {
  id               String       @id @default(cuid())
  name             String
  slug             String       @unique
  description      String?
  displayOrder     Int          @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  parentCategoryId String
  parentCategory   LotCategory  @relation(fields: [parentCategoryId], references: [id])
  lots             Lot[]
  bens             Bem[]
  itemCount        Int          @default(0)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@map("subcategories")
}


model State {
  id        String   @id @default(cuid())
  name      String   @unique
  uf        String   @unique
  slug      String   @unique
  cities    City[]
  cityCount Int      @default(0)
  courts    Court[]
  districts JudicialDistrict[]
  lots      Lot[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("states")
}

model City {
  id        String   @id @default(cuid())
  name      String
  slug      String
  stateId   String
  state     State    @relation(fields: [stateId], references: [id])
  stateUf   String
  ibgeCode  String?  @unique
  lots      Lot[]
  lotCount  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, stateId])
  @@map("cities")
}

// ==============================================================================
//  User-Generated Content & System
// ==============================================================================

model Review {
    id String @id @default(cuid())
    lotId String
    lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
    auctionId String
    auction Auction @relation(fields: [auctionId], references: [id])
    userId String
    user User @relation(fields: [userId], references: [id])
    userDisplayName String
    rating Int
    comment String? @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("reviews")
}

model LotQuestion {
    id String @id @default(cuid())
    lotId String
    lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
    auctionId String
    auction Auction @relation(fields: [auctionId], references: [id])
    userId String
    user User @relation(fields: [userId], references: [id])
    userDisplayName String
    questionText String @db.Text
    answerText String? @db.Text
    answeredByUserId String?
    answeredByUserDisplayName String?
    answeredAt DateTime?
    isPublic Boolean @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("lot_questions")
}


model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  lotId     String
  lot       Lot      @relation(fields: [lotId], references: [id])
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lotId])
  @@map("user_lot_max_bids")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("notifications")
}

model ContactMessage {
    id          String   @id @default(cuid())
    name        String
    email       String
    subject     String
    message     String   @db.Text
    isRead      Boolean  @default(false)
    createdAt   DateTime @default(now())

    @@map("contact_messages")
}


// ==============================================================================
//  Documents & Media
// ==============================================================================

model UserDocument {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  documentTypeId  String
  documentType    DocumentType     @relation(fields: [documentTypeId], references: [id])
  fileName        String?
  fileUrl         String?
  uploadDate      DateTime         @default(now())
  analysisDate    DateTime?
  status          UserDocumentStatus @default(NOT_SENT)
  rejectionReason String?

  @@unique([userId, documentTypeId])
  @@map("user_documents")
}

model DocumentType {
  id              String          @id @default(cuid())
  name            String          @unique
  description     String?
  isRequired      Boolean         @default(true)
  appliesTo       String?         // 'PHYSICAL', 'LEGAL', 'CONSIGNOR' comma-separated
  allowedFormats  String?         // 'pdf,jpg,png'
  displayOrder    Int             @default(0)
  documents       UserDocument[]

  @@map("document_types")
}


model DocumentTemplate {
    id        String               @id @default(cuid())
    name      String               @unique
    type      DocumentTemplateType
    content   String               @db.Text
    createdAt DateTime             @default(now())
    updatedAt DateTime             @updatedAt

    @@map("document_templates")
}

model MediaItem {
  id                    String        @id @default(cuid())
  fileName              String
  storagePath           String        @unique
  title                 String?
  altText               String?
  caption               String?
  description           String?
  mimeType              String
  sizeBytes             Int
  urlOriginal           String
  urlThumbnail          String?
  urlMedium             String?
  urlLarge              String?
  uploadedBy            String?       // Can be user ID or 'system'
  linkedLotIds          String[]
  dataAiHint            String?
  uploadedAt            DateTime      @default(now())

  @@map("media_items")
}

// ==============================================================================
//  Entities: Auctioneer & Seller
// ==============================================================================
model Auctioneer {
  id                       String    @id @default(cuid())
  publicId                 String    @unique @default(cuid())
  name                     String    @unique
  slug                     String    @unique
  registrationNumber       String?
  contactName              String?
  email                    String?   @unique
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  logoUrl                  String?
  logoMediaId              String?
  dataAiHintLogo           String?
  description              String?
  rating                   Float?
  auctionsConductedCount   Int?
  totalValueSold           Float?
  memberSince              DateTime?
  userId                   String?   @unique
  user                     User?     @relation("AuctioneerUser")
  auctions                 Auction[]
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  @@map("auctioneers")
}

model Seller {
  id                        String             @id @default(cuid())
  publicId                  String             @unique @default(cuid())
  name                      String             @unique
  slug                      String             @unique
  contactName               String?
  email                     String?            @unique
  phone                     String?
  address                   String?
  city                      String?
  state                     String?
  zipCode                   String?
  website                   String?
  logoUrl                   String?
  logoMediaId               String?
  dataAiHintLogo            String?
  description               String?
  rating                    Float?
  activeLotsCount           Int?
  totalSalesValue           Float?
  auctionsFacilitatedCount  Int?
  memberSince               DateTime?
  userId                    String?            @unique
  user                      User?              @relation("SellerUser")
  auctions                  Auction[]
  directSaleOffers          DirectSaleOffer[]
  judicialProcesses         JudicialProcess[]
  bens                      Bem[]
  isJudicial                Boolean            @default(false)
  judicialBranchId          String?            @unique
  judicialBranch            JudicialBranch?    @relation("SellerJudicialBranch", fields: [judicialBranchId], references: [id])
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt

  @@map("sellers")
}


// ==============================================================================
//  Judicial Entities
// ==============================================================================

model Court {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  stateUf   String
  state     State    @relation(fields: [stateUf], references: [uf])
  website   String?
  districts JudicialDistrict[]
  processes JudicialProcess[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("courts")
}

model JudicialDistrict {
  id          String           @id @default(cuid())
  name        String
  slug        String
  courtId     String
  court       Court            @relation(fields: [courtId], references: [id])
  stateId     String
  state       State            @relation(fields: [stateId], references: [id])
  zipCode     String?
  branches    JudicialBranch[]
  processes   JudicialProcess[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@unique([name, stateId])
  @@map("judicial_districts")
}

model JudicialBranch {
  id                String             @id @default(cuid())
  name              String
  slug              String
  districtId        String
  district          JudicialDistrict   @relation(fields: [districtId], references: [id])
  contactName       String?
  phone             String?
  email             String?
  processes         JudicialProcess[]
  seller            Seller?            @relation("SellerJudicialBranch")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@unique([name, districtId])
  @@map("judicial_branches")
}

model JudicialProcess {
  id              String           @id @default(cuid())
  publicId        String           @unique @default(cuid())
  processNumber   String           @unique
  isElectronic    Boolean
  courtId         String
  court           Court            @relation(fields: [courtId], references: [id])
  districtId      String
  district        JudicialDistrict @relation(fields: [districtId], references: [id])
  branchId        String
  branch          JudicialBranch   @relation(fields: [branchId], references: [id])
  sellerId        String?
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  parties         ProcessParty[]
  bens            Bem[]
  auctions        Auction[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("judicial_processes")
}

model ProcessParty {
  id             String         @id @default(cuid())
  processId      String
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  name           String
  partyType      ProcessPartyType
  documentNumber String?

  @@unique([processId, name, partyType])
  @@map("process_parties")
}

model Bem {
  id               String       @id @default(cuid())
  publicId         String       @unique @default(cuid())
  title            String
  description      String?      @db.Text
  status           BemStatus
  evaluationValue  Float?
  imageUrl         String?
  imageMediaId     String?
  galleryImageUrls Json?
  mediaItemIds     String[]
  dataAiHint       String?
  locationCity     String?
  locationState    String?
  address          String?
  latitude         Float?
  longitude        Float?
  lotId            String?
  lot              Lot?         @relation(fields: [lotId], references: [id])
  judicialProcessId String?
  judicialProcess  JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  sellerId         String?
  seller           Seller?      @relation(fields: [sellerId], references: [id])
  categoryId       String?
  category         LotCategory? @relation(fields: [categoryId], references: [id])
  subcategoryId    String?
  subcategory      Subcategory? @relation(fields: [subcategoryId], references: [id])

  // Vehicle-specific fields
  plate                String?
  make                 String?
  model                String?
  version              String?
  year                 Int?
  modelYear            Int?
  mileage              Int?
  color                String?
  fuelType             String?
  transmissionType     String?
  bodyType             String?
  vin                  String?      @unique
  renavam              String?      @unique
  enginePower          String?
  numberOfDoors        Int?
  vehicleOptions       String?
  detranStatus         String?
  debts                String?
  runningCondition     String?
  bodyCondition        String?
  tiresCondition       String?
  hasKey               Boolean?

  // Real Estate-specific fields
  propertyRegistrationNumber String? @unique
  iptuNumber                 String? @unique
  isOccupied                 Boolean?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?
  infrastructure             String?
  condoDetails               String?
  improvements               String?
  topography                 String?
  liensAndEncumbrances       String?
  propertyDebts              String?
  unregisteredRecords        String?
  hasHabiteSe                Boolean?
  zoningRestrictions         String?

  // Many other specific fields can be added here following the same pattern
  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String?
  includedAccessories        String?
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String?
  applianceCapacity          String?
  voltage                    String?
  applianceType              String?
  additionalFunctions        String?
  hoursUsed                  Int?
  engineType                 String?
  capacityOrPower            String?
  maintenanceHistory         String?
  installationLocation       String?
  compliesWithNR             String?
  operatingLicenses          String?
  breed                      String?
  age                        String?
  sex                        LivestockSex?
  weight                     String?
  individualId               String?
  purpose                    String?
  sanitaryCondition          String?
  lineage                    String?
  isPregnant                 Boolean?
  specialSkills              String?
  gtaDocument                String?
  breedRegistryDocument      String?
  furnitureType              String?
  material                   String?
  style                      String?
  dimensions                 String?
  pieceCount                 Int?
  jewelryType                String?
  metal                      String?
  gemstones                  String?
  totalWeight                String?
  jewelrySize                String?
  authenticityCertificate    String?
  workType                   String?
  artist                     String?
  period                     String?
  technique                  String?
  provenance                 String?
  boatType                   String?
  boatLength                 String?
  hullMaterial               String?
  onboardEquipment           String?
  productName                String?
  quantity                   String?
  packagingType              String?
  expirationDate             DateTime?
  storageConditions          String?
  preciousMetalType          String?
  purity                     String?
  forestGoodsType            String?
  volumeOrQuantity           String?
  species                    String?
  dofNumber                  String?

  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@map("bens")
}

model BlogPost {
    id String @id @default(cuid())
    title String
    slug String @unique
    content String @db.Text
    authorId String
    // author User @relation(fields: [authorId], references: [id])
    imageUrl String?
    tags String[]
    publishedAt DateTime?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// ==============================================================================
//  Enums
// ==============================================================================

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum DirectSaleOfferType {
    BUY_NOW
    ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
    ACTIVE
    PENDING_APPROVAL
    SOLD
    EXPIRED
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum UserHabilitationStatus {
  PENDENTE_DOCUMENTOS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum LivestockSex {
  Macho
  Femea
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}
