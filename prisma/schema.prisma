// Este é o arquivo principal do seu Prisma schema.
// Saiba mais sobre ele na documentação: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ==============================================================================
//  Modelos de Tenant e Usuário (Globais)
// ==============================================================================
model Tenant {
  id          BigInt   @id @default(autoincrement())
  name        String
  subdomain   String   @unique
  domain      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       UsersOnTenants[]
  auctions    Auction[]
  lots        Lot[]
  sellers     Seller[]
  auctioneers Auctioneer[]
  assets      Asset[]
  bids        Bid[]
  notifications Notification[]
  platformSettings PlatformSettings?
  judicialProcesses JudicialProcess[]
  directSaleOffers    DirectSaleOffer[]
  reports             Report[]
}

model User {
  id                  BigInt   @id @default(autoincrement())
  publicId            String?  @unique
  fullName            String?
  email               String   @unique
  password            String
  avatarUrl           String?
  dataAiHint          String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  roles               UsersOnRoles[]
  tenants             UsersOnTenants[]
  bids                Bid[]
  wins                UserWin[]
  wonLots             Lot[] @relation("LotWinner")
  documents           UserDocument[]
  questions           LotQuestion[]
  reviews             Review[]
  maxBids             UserLotMaxBid[]
  notifications       Notification[]
  habilitations       AuctionHabilitation[]
  uploadedMedia       MediaItem[] @relation("UploadedBy")
  sellerProfile       Seller? @relation("UserToSeller")
  auctioneerProfile   Auctioneer? @relation("UserToAuctioneer")
  cpf                 String?
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String? // Regime de Bens
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  optInMarketing      Boolean? @default(false)
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType @default(PHYSICAL)
  razaoSocial         String?
  cnpj                String?
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
}

model Role {
  id              BigInt   @id @default(autoincrement())
  name            String   @unique
  nameNormalized  String   @unique
  description     String?
  permissions     Json @default("[]")
  users           UsersOnRoles[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     BigInt
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     BigInt
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model UsersOnTenants {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     BigInt
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId   BigInt
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, tenantId])
}


// ==============================================================================
//  Modelos Principais de Leilão
// ==============================================================================
model Auction {
  id              BigInt   @id @default(autoincrement())
  publicId        String   @unique
  title           String
  slug            String   @unique
  description     String?  @db.Text
  status          AuctionStatus @default(EM_PREPARACAO)
  auctionType     AuctionType?
  auctionMethod   AuctionMethod?
  participation   AuctionParticipation?
  auctionDate     DateTime @default(now())
  endDate         DateTime?
  onlineUrl       String?
  street          String?
  number          String?
  complement      String?
  neighborhood    String?
  city            City? @relation(fields: [cityId], references: [id], onDelete: SetNull)
  cityId          BigInt?
  state           State? @relation(fields: [stateId], references: [id], onDelete: SetNull)
  stateId         BigInt?
  zipCode         String?
  latitude        Decimal?
  longitude       Decimal?
  visits          Int      @default(0)
  imageUrl        String?
  imageMediaId    BigInt?
  documentsUrl    String?
  initialOffer          Decimal?
  estimatedRevenue      Decimal?
  achievedRevenue       Decimal?
  decrementAmount       Decimal?
  floorPrice            Decimal?
  softCloseEnabled      Boolean?  @default(false)
  softCloseMinutes      Int?
  allowInstallmentBids  Boolean?  @default(true)
  isFeaturedOnMarketplace Boolean? @default(false)
  totalHabilitatedUsers Int?    @default(0)
  dataAiHint            String?
  evaluationReportUrl   String?
  auctionCertificateUrl String?
  sellingBranch         String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  lots                  Lot[]
  bids                  Bid[]
  reviews               Review[]
  questions             LotQuestion[]
  stages                AuctionStage[]
  habilitations         AuctionHabilitation[]
  
  tenantId          BigInt
  tenant            Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  auctioneerId  BigInt?
  auctioneer    Auctioneer? @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  
  sellerId      BigInt?
  seller        Seller? @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  
  categoryId    BigInt?
  category      LotCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  judicialProcessId BigInt?
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)

  @@index([tenantId])
}

model AuctionStage {
  id              BigInt   @id @default(autoincrement())
  auctionId       BigInt
  name            String
  startDate       DateTime
  endDate         DateTime
  initialPrice    Decimal?
  status          String?
  
  auction   Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  lotStageDetails LotStageDetails[]
  
  @@index([auctionId])
}


model Lot {
  id                      BigInt   @id @default(autoincrement())
  publicId                String   @unique
  number                  String?
  title                   String
  slug                    String   @unique
  description             String?  @db.Text
  properties              String?  @db.Text
  status                  LotStatus   @default(RASCUNHO)
  price                   Decimal     @default(0)
  initialPrice            Decimal?
  secondInitialPrice      Decimal?
  bidIncrementStep        Decimal?
  evaluationValue         Decimal?
  reservePrice            Decimal?
  latitude                Decimal?
  longitude               Decimal?
  street                  String?
  complement              String?
  neighborhood            String?
  zipCode                 String?
  isFeatured              Boolean? @default(false)
  isExclusive             Boolean? @default(false)
  isRelisted              Boolean? @default(false)
  relistCount             Int?     @default(0)
  views                   Int?     @default(0)
  bidsCount               Int?     @default(0)
  imageUrl                String?
  imageMediaId            BigInt?
  inheritedMediaFromAssetId BigInt?
  galleryImageUrls        Json?
  winningBidTermUrl       String?
  dataAiHint              String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  endDate                 DateTime?
  auctionDate             DateTime?
  
  tenantId        BigInt
  tenant          Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  auctionId       BigInt
  auction         Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  
  categoryId      BigInt?
  category        LotCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  subcategoryId   BigInt?
  subcategory     Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  
  sellerId        BigInt?
  seller          Seller? @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  
  auctioneerId    BigInt?
  auctioneer      Auctioneer? @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  
  assets          AssetsOnLots[]
  
  cityId          BigInt?
  city            City? @relation(fields: [cityId], references: [id], onDelete: SetNull)
  
  stateId         BigInt?
  state           State? @relation(fields: [stateId], references: [id], onDelete: SetNull)
  
  originalLotId   BigInt?
  originalLot     Lot?     @relation("RelistHistory", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLots    Lot[]    @relation("RelistHistory")

  winnerId        BigInt?
  winner          User?    @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  win             UserWin? @relation("LotWin")
  
  bids          Bid[]
  reviews       Review[]
  questions     LotQuestion[]
  maxBids       UserLotMaxBid[]
  stageDetails  LotStageDetails[]
  
  @@index([tenantId])
  @@index([auctionId])
}

model Asset {
  id                    BigInt      @id @default(autoincrement())
  publicId              String      @unique
  title                 String
  description           String?     @db.Text
  properties            String?     @db.Text
  status                AssetStatus @default(CADASTRO)
  evaluationValue       Decimal?
  imageUrl              String?
  imageMediaId          BigInt?
  dataAiHint            String?
  latitude              Decimal?
  longitude             Decimal?
  street                String?
  number                String?
  complement            String?
  neighborhood          String?
  zipCode               String?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  
  tenantId              BigInt
  tenant                Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  categoryId            BigInt?
  category              LotCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  subcategoryId         BigInt?
  subcategory           Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)

  sellerId              BigInt?
  seller                Seller?     @relation(fields: [sellerId], references: [id], onDelete: SetNull)

  judicialProcessId     BigInt?
  judicialProcess       JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)

  cityId                BigInt?
  city                  City? @relation(fields: [cityId], references: [id], onDelete: SetNull)

  stateId               BigInt?
  state                 State? @relation(fields: [stateId], references: [id], onDelete: SetNull)
  
  lots                  AssetsOnLots[]
  assetMedia            AssetMedia[]

  @@index([tenantId])
  @@index([sellerId])
  @@index([judicialProcessId])
}

model AssetsOnLots {
  assetId     BigInt
  lotId       BigInt
  assignedAt  DateTime @default(now())
  assignedBy  String?

  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)
  lot   Lot   @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@id([assetId, lotId])
}

// ==============================================================================
//  Modelos de Participantes e Entidades Relacionadas
// ==============================================================================
model Seller {
  id                    BigInt        @id @default(autoincrement())
  publicId              String        @unique
  slug                  String        @unique
  name                  String
  isJudicial            Boolean       @default(false)
  contactName           String?
  email                 String?
  phone                 String?
  website               String?
  logoUrl               String?
  logoMediaId           BigInt?
  dataAiHintLogo        String?
  description           String?       @db.Text
  address               String?
  city                  String?
  state                 String?
  zipCode               String?
  latitude              Decimal?
  longitude             Decimal?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  
  tenantId              BigInt
  tenant                Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  userId                BigInt? @unique
  user                  User? @relation("UserToSeller", fields: [userId], references: [id], onDelete: SetNull)
  
  judicialBranchId      BigInt? @unique
  judicialBranch        JudicialBranch? @relation(fields: [judicialBranchId], references: [id])
  
  judicialDistrictId    BigInt?
  judicialDistrict      JudicialDistrict? @relation(fields: [judicialDistrictId], references: [id])
  
  courtId               BigInt?
  court                 Court? @relation(fields: [courtId], references: [id])
  
  auctions              Auction[]
  lots                  Lot[]
  assets                Asset[]
  directSaleOffers      DirectSaleOffer[]
  judicialProcesses     JudicialProcess[]

  @@index([tenantId])
}

model Auctioneer {
  id                    BigInt        @id @default(autoincrement())
  publicId              String        @unique
  slug                  String        @unique
  name                  String
  registrationNumber    String?
  contactName           String?
  email                 String?
  phone                 String?
  website               String?
  logoUrl               String?
  logoMediaId           BigInt?
  dataAiHintLogo        String?
  description           String?       @db.Text
  address               String?
  city                  String?
  state                 String?
  zipCode               String?
  latitude              Decimal?
  longitude             Decimal?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  tenantId              BigInt
  tenant                Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  userId                BigInt?       @unique
  user                  User?         @relation("UserToAuctioneer", fields: [userId], references: [id], onDelete: SetNull)
  
  auctions              Auction[]
  lots                  Lot[]
  
  @@index([tenantId])
}

// ==============================================================================
//  Modelos de Interação do Usuário
// ==============================================================================
model Bid {
  id          BigInt   @id @default(autoincrement())
  amount      Decimal  @db.Decimal(12, 2)
  timestamp   DateTime @default(now())
  
  bidderId    BigInt
  bidder      User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  
  lotId       BigInt
  lot         Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  auctionId   BigInt
  auction     Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  tenantId    BigInt
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@index([lotId])
  @@index([bidderId])
  @@index([tenantId])
}

model UserWin {
  id                  BigInt   @id @default(autoincrement())
  winningBidAmount    Decimal  @db.Decimal(12, 2)
  winDate             DateTime @default(now())
  paymentStatus       PaymentStatus @default(PENDENTE)
  
  userId              BigInt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  lotId               BigInt   @unique
  lot                 Lot      @relation("LotWin", fields: [lotId], references: [id])
  
  payments            InstallmentPayment[]

  @@index([userId])
}

model InstallmentPayment {
  id                  BigInt   @id @default(autoincrement())
  installmentNumber   Int
  totalInstallments   Int
  amount              Decimal  @db.Decimal(12, 2)
  dueDate             DateTime
  paymentDate         DateTime?
  status              PaymentStatus @default(PENDENTE)
  
  userWinId           BigInt
  userWin             UserWin @relation(fields: [userWinId], references: [id], onDelete: Cascade)

  @@index([userWinId])
}

model Review {
  id          BigInt   @id @default(autoincrement())
  rating      Int
  comment     String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      BigInt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  lotId       BigInt
  lot         Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  auctionId   BigInt
  auction     Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  
  @@index([lotId])
}

model LotQuestion {
  id                  BigInt   @id @default(autoincrement())
  questionText        String   @db.Text
  answerText          String?  @db.Text
  isPublic            Boolean  @default(true)
  createdAt           DateTime @default(now())
  answeredAt          DateTime?
  
  userId              BigInt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userDisplayName     String
  
  lotId               BigInt
  lot                 Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  auctionId           BigInt
  auction             Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  
  answeredByUserId    BigInt?
  answeredByUserDisplayName String?
  
  @@index([lotId])
}

model UserDocument {
  id                BigInt    @id @default(autoincrement())
  userId            BigInt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  documentTypeId    BigInt
  documentType      DocumentType @relation(fields: [documentTypeId], references: [id])

  fileUrl           String
  fileName          String
  status            UserDocumentStatus @default(SUBMITTED)
  rejectionReason   String?
  verifiedAt        DateTime?
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id          BigInt    @id @default(autoincrement())
  name        String    @unique
  description String?
  isRequired  Boolean   @default(true)
  appliesTo   String // e.g., "PHYSICAL", "LEGAL", "ALL"
  
  userDocuments UserDocument[]
}

model Notification {
  id        BigInt   @id @default(autoincrement())
  message   String
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())

  userId    BigInt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  tenantId  BigInt
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AuctionHabilitation {
    id BigInt @id @default(autoincrement())
    userId BigInt
    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

    auctionId BigInt
    auction   Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

    habilitatedAt DateTime @default(now())

    @@unique([userId, auctionId])
}

model LotStageDetails {
  id              BigInt   @id @default(autoincrement())
  stageId         BigInt
  lotId           BigInt
  initialBid      Decimal? @db.Decimal(12, 2)
  bidIncrement    Decimal? @db.Decimal(12, 2)

  stage           AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)
  lot             Lot          @relation(fields: [lotId], references: [id], onDelete: Cascade)
  
  @@unique([stageId, lotId])
}

model UserLotMaxBid {
  id        BigInt    @id @default(autoincrement())
  maxAmount Decimal   @db.Decimal(12, 2)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  userId    BigInt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lotId     BigInt
  lot       Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

// ==============================================================================
//  Modelos de Conteúdo e Configuração
// ==============================================================================
model LotCategory {
  id                BigInt        @id @default(autoincrement())
  publicId          String?       @unique
  name              String        @unique
  slug              String        @unique
  description       String?
  hasSubcategories  Boolean       @default(false)
  displayOrder      Int           @default(0)
  iconName          String?
  logoUrl           String?
  logoMediaId       BigInt?
  dataAiHintIcon    String?
  coverImageUrl     String?
  coverImageMediaId BigInt?
  dataAiHintCover   String?
  megaMenuImageUrl  String?
  megaMenuImageMediaId BigInt?
  dataAiHintMegaMenu  String?
  
  subcategories     Subcategory[]
  lots              Lot[]
  assets            Asset[]
  auctions          Auction[]
  directSaleOffers  DirectSaleOffer[]
}

model Subcategory {
  id                BigInt      @id @default(autoincrement())
  publicId          String?     @unique
  name              String
  slug              String      @unique
  description       String?
  displayOrder      Int         @default(0)
  iconUrl           String?
  iconMediaId       BigInt?
  dataAiHintIcon    String?

  parentCategoryId  BigInt
  parentCategory    LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  
  lots              Lot[]
  assets            Asset[]

  @@unique([name, parentCategoryId])
}

model DirectSaleOffer {
    id                      BigInt        @id @default(autoincrement())
    publicId                String        @unique
    title                   String
    slug                    String        @unique
    description             String?       @db.Text
    status                  DirectSaleOfferStatus @default(PENDING_APPROVAL)
    offerType               DirectSaleOfferType
    price                   Decimal?      @db.Decimal(12, 2)
    minimumOfferPrice       Decimal?      @db.Decimal(12, 2)
    views                   Int?          @default(0)
    imageUrl                String?
    imageMediaId            BigInt?
    galleryImageUrls        Json?
    dataAiHint              String?
    expiresAt               DateTime?
    locationCity            String?
    locationState           String?
    
    categoryId              BigInt?
    category                LotCategory?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)

    sellerId                BigInt?
    seller                  Seller?       @relation(fields: [sellerId], references: [id], onDelete: SetNull)

    tenantId                BigInt
    tenant                  Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

    createdAt               DateTime      @default(now())
    updatedAt               DateTime      @updatedAt

    @@index([tenantId])
}

model MediaItem {
  id              BigInt        @id @default(autoincrement())
  fileName        String
  storagePath     String        @unique
  urlOriginal     String        @unique
  urlThumbnail    String?
  mimeType        String
  sizeBytes       Int
  title           String?
  altText         String?
  caption         String?
  description     String?
  dataAiHint      String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  uploadedBy      User          @relation("UploadedBy", fields: [uploadedById], references: [id])
  uploadedById    BigInt

  judicialProcessId BigInt?
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  
  assetMedia        AssetMedia[]
}

model AssetMedia {
    assetId         BigInt
    mediaId         BigInt
    displayOrder    Int @default(0)

    asset           Asset   @relation(fields: [assetId], references: [id], onDelete: Cascade)
    mediaItem       MediaItem @relation(fields: [mediaId], references: [id], onDelete: Cascade)
    
    @@id([assetId, mediaId])
}


// ==============================================================================
//  Modelos de Relatórios e Dados
// ==============================================================================
model DataSource {
  id          BigInt   @id @default(autoincrement())
  name        String   @unique
  modelName   String   @unique
  fields      Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Report {
  id           BigInt   @id @default(autoincrement())
  name         String
  description  String?
  definition   Json
  
  tenantId     BigInt
  tenant       Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([tenantId])
}

// ==============================================================================
//  Modelos Judiciais e de Localização
// ==============================================================================
model JudicialProcess {
  id              BigInt   @id @default(autoincrement())
  publicId        String   @unique
  processNumber   String
  isElectronic    Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  auctions        Auction[]
  assets          Asset[]
  parties         JudicialParty[]
  documents       MediaItem[]
  
  tenantId        BigInt
  tenant          Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  courtId         BigInt?
  court           Court? @relation(fields: [courtId], references: [id], onDelete: SetNull)

  districtId      BigInt?
  district        JudicialDistrict? @relation(fields: [districtId], references: [id], onDelete: SetNull)

  branchId        BigInt?
  branch          JudicialBranch? @relation(fields: [branchId], references: [id], onDelete: SetNull)
  
  sellerId        BigInt?
  seller          Seller? @relation(fields: [sellerId], references: [id], onDelete: SetNull)

  @@unique([processNumber, tenantId])
  @@index([tenantId])
}

model JudicialParty {
  id              BigInt   @id @default(autoincrement())
  name            String
  partyType       ProcessPartyType
  documentNumber  String?

  processId       BigInt
  process         JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model Court {
  id                  BigInt   @id @default(autoincrement())
  name                String   @unique
  slug                String   @unique
  stateUf             String
  website             String?
  
  districts           JudicialDistrict[]
  judicialProcesses   JudicialProcess[]
  sellers             Seller[]
}

model JudicialDistrict {
  id                  BigInt   @id @default(autoincrement())
  name                String   @unique
  slug                String   @unique
  zipCode             String?

  courtId             BigInt
  court               Court    @relation(fields: [courtId], references: [id], onDelete: Cascade)
  
  stateId             BigInt
  state               State    @relation(fields: [stateId], references: [id])
  
  branches            JudicialBranch[]
  judicialProcesses   JudicialProcess[]
  sellers             Seller[]
}

model JudicialBranch {
  id                  BigInt   @id @default(autoincrement())
  name                String   @unique
  slug                String   @unique
  contactName         String?
  phone               String?
  email               String?

  districtId          BigInt
  district            JudicialDistrict @relation(fields: [districtId], references: [id], onDelete: Cascade)

  judicialProcesses   JudicialProcess[]
  sellers             Seller[]
}

model State {
  id            BigInt   @id @default(autoincrement())
  name          String   @unique
  uf            String   @unique
  slug          String   @unique
  
  cities        City[]
  auctions      Auction[]
  lots          Lot[]
  assets        Asset[]
  districts     JudicialDistrict[]
}

model City {
  id        BigInt   @id @default(autoincrement())
  name      String
  slug      String   @unique
  stateUf   String?
  ibgeCode  String?  @unique
  latitude  Decimal?
  longitude Decimal?
  
  stateId   BigInt
  state     State    @relation(fields: [stateId], references: [id], onDelete: Cascade)
  
  auctions  Auction[]
  lots      Lot[]
  assets    Asset[]

  @@unique([name, stateId])
}

// ==============================================================================
//  Modelos de Veículos
// ==============================================================================
model VehicleMake {
  id      BigInt   @id @default(autoincrement())
  name    String   @unique
  slug    String   @unique
  
  models  VehicleModel[]
}

model VehicleModel {
  id      BigInt   @id @default(autoincrement())
  name    String
  slug    String   @unique
  
  makeId  BigInt
  make    VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)

  @@unique([makeId, name])
}

// ==============================================================================
//  Modelos de Configuração da Plataforma (Aninhados)
// ==============================================================================
model PlatformSettings {
  id                          BigInt    @id @default(autoincrement())
  tenantId                    BigInt    @unique
  siteTitle                   String    @default("BidExpert")
  siteTagline                 String?
  logoUrl                     String?
  faviconUrl                  String?
  contactEmail                String?
  searchPaginationType        String?   @default("pagination")
  searchItemsPerPage          Int?      @default(12)
  searchLoadMoreCount         Int?      @default(12)
  showCountdownOnLotDetail    Boolean?  @default(true)
  showCountdownOnCards        Boolean?  @default(true)
  showRelatedLotsOnLotDetail  Boolean?  @default(true)
  relatedLotsCount            Int?      @default(4)
  defaultListItemsPerPage     Int?      @default(10)
  crudFormMode                String?   @default("modal") // 'modal' or 'sheet'
  isSetupComplete             Boolean   @default(false)
  storageProvider             String?   @default("local") // 'local', 'firebase', 's3'
  galleryImageBasePath        String?
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt

  tenant                      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  themes                      ThemeSettings[]
  mapSettings                 MapSettings?
  biddingSettings             BiddingSettings?
  paymentGatewaySettings      PaymentGatewaySettings?
  notificationSettings        NotificationSettings?
  mentalTriggerSettings       MentalTriggerSettings?
  sectionBadgeVisibility      SectionBadgeVisibility?
  platformPublicIdMasks       IdMasks?
  variableIncrementTable      VariableIncrementRule[]
}

model ThemeSettings {
  id                  BigInt   @id @default(autoincrement())
  name                String   @unique
  isActive            Boolean  @default(false)
  platformSettingsId  BigInt
  
  platformSettings    PlatformSettings @relation(fields: [platformSettingsId], references: [id], onDelete: Cascade)
  colors              ThemeColors?
}

model ThemeColors {
  id              BigInt   @id @default(autoincrement())
  themeSettingsId BigInt   @unique
  
  primary         String? // HSL format: "217 91% 60%"
  background      String?
  accent          String?
  
  themeSettings   ThemeSettings @relation(fields: [themeSettingsId], references: [id], onDelete: Cascade)
}

model MapSettings {
  id                  BigInt   @id @default(autoincrement())
  platformSettingsId  BigInt   @unique
  defaultProvider     String   @default("openstreetmap") // 'openstreetmap' or 'google'
  googleMapsApiKey    String?
  
  platformSettings    PlatformSettings @relation(fields: [platformSettingsId], references: [id], onDelete: Cascade)
}

model BiddingSettings {
  id                              BigInt   @id @default(autoincrement())
  platformSettingsId              BigInt   @unique
  instantBiddingEnabled           Boolean  @default(true)
  getBidInfoInstantly             Boolean  @default(true)
  biddingInfoCheckIntervalSeconds Int      @default(1)
  
  platformSettings                PlatformSettings @relation(fields: [platformSettingsId], references: [id], onDelete: Cascade)
}

model PaymentGatewaySettings {
  id                            BigInt   @id @default(autoincrement())
  platformSettingsId            BigInt   @unique
  defaultGateway                String   @default("Manual")
  platformCommissionPercentage  Decimal  @default(5.0) @db.Decimal(5, 2)
  gatewayApiKey                 String?
  gatewayEncryptionKey          String?

  platformSettings              PlatformSettings @relation(fields: [platformSettingsId], references: [id], onDelete: Cascade)
}

model NotificationSettings {
  id                          BigInt   @id @default(autoincrement())
  platformSettingsId          BigInt   @unique
  notifyOnNewAuction          Boolean  @default(true)
  notifyOnFeaturedLot         Boolean  @default(false)
  notifyOnAuctionEndingSoon   Boolean  @default(true)
  notifyOnPromotions          Boolean  @default(true)
  
  platformSettings            PlatformSettings @relation(fields: [platformSettingsId], references: [id], onDelete: Cascade)
}

model MentalTriggerSettings {
  id                          BigInt   @id @default(autoincrement())
  platformSettingsId          BigInt   @unique
  showDiscountBadge           Boolean  @default(true)
  showPopularityBadge         Boolean  @default(true)
  popularityViewThreshold     Int      @default(500)
  showHotBidBadge             Boolean  @default(true)
  hotBidThreshold             Int      @default(10)
  showExclusiveBadge          Boolean  @default(true)

  platformSettings            PlatformSettings @relation(fields: [platformSettingsId], references: [id], onDelete: Cascade)
}

model SectionBadgeVisibility {
    id                  BigInt   @id @default(autoincrement())
    platformSettingsId  BigInt   @unique
    searchGrid          Json?
    lotDetail           Json?

    platformSettings    PlatformSettings @relation(fields: [platformSettingsId], references: [id], onDelete: Cascade)
}

model IdMasks {
  id                    BigInt   @id @default(autoincrement())
  platformSettingsId    BigInt   @unique
  auctionCodeMask       String?  @default("L-YYYY-NNNNN")
  lotCodeMask           String?  @default("B-YYYY-NNNNN")
  sellerCodeMask        String?  @default("V-YYYY-NNNNN")
  auctioneerCodeMask    String?  @default("P-YYYY-NNNNN")
  assetCodeMask         String?  @default("A-YYYY-NNNNN")
  categoryCodeMask      String?  @default("C-YYYY-NNNNN")
  subcategoryCodeMask   String?  @default("S-YYYY-NNNNN")
  userCodeMask          String?  @default("U-YYYY-NNNNN")

  platformSettings      PlatformSettings @relation(fields: [platformSettingsId], references: [id], onDelete: Cascade)
}

model VariableIncrementRule {
    id                  BigInt    @id @default(autoincrement())
    platformSettingsId  BigInt
    from                Decimal   @db.Decimal(12, 2)
    to                  Decimal?  @db.Decimal(12, 2)
    increment           Decimal   @db.Decimal(12, 2)
    
    platformSettings    PlatformSettings @relation(fields: [platformSettingsId], references: [id], onDelete: Cascade)

    @@index([platformSettingsId])
}

model Subscriber {
  id          BigInt   @id @default(autoincrement())
  email       String   @unique
  name        String?
  subscribedAt DateTime @default(now())
}

// ==============================================================================
//  ENUNS
// ==============================================================================
enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum AssetStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}