// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ============================================================================
//  AUTHENTICATION & AUTHORIZATION
// ============================================================================
model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  fullName            String
  password            String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  avatarUrl           String?
  dataAiHint          String?
  activeBids          Int?                 @default(0)
  auctionsWon         Int?                 @default(0)
  itemsSold           Int?                 @default(0)
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  status              String?              @default("ATIVO")
  optInMarketing      Boolean?             @default(false)
  badges              String? // Comma-separated list of strings

  // Physical Person Details
  cpf                 String?              @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?

  // Address
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?

  // Legal Person Details
  accountType         AccountType          @default(PHYSICAL)
  razaoSocial         String?
  cnpj                String?              @unique
  inscricaoEstadual   String?
  website             String?

  // Relationships
  roleId              String?
  role                Role?                @relation(fields: [roleId], references: [id], onDelete: SetNull, map: "User_roleId_fkey")
  sellerProfileId     String?              @unique
  sellerProfile       Seller?              @relation("UserToSeller")
  auctioneerProfileId String?              @unique
  auctioneerProfile   Auctioneer?          @relation("UserToAuctioneer")
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  notifications       Notification[]
  reviews             Review[]
  questions           LotQuestion[]
  answers             LotQuestion[]        @relation("AnsweredBy")
  mediaItems          MediaItem[]          @relation("UploadedBy")
  blogPosts           BlogPost[]
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  users           User[]
  permissions     Permission[]
}

model Permission {
  id    String @id @default(cuid())
  name  String @unique
  roles Role[]
}

// ============================================================================
//  USER DOCUMENTS & HABILITATION
// ============================================================================
model DocumentType {
  id             String         @id @default(cuid())
  name           String
  description    String?
  isRequired     Boolean        @default(true)
  appliesTo      String? // Comma-separated AccountType values
  allowedFormats String? // Comma-separated file extensions
  displayOrder   Int            @default(0)
  userDocuments  UserDocument[]
}

model UserDocument {
  id              String             @id @default(cuid())
  userId          String
  documentTypeId  String
  fileUrl         String?
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  rejectionReason String?

  // Relationships
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType DocumentType @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

// ============================================================================
//  MEDIA
// ============================================================================
model MediaItem {
  id                     String    @id @default(cuid())
  fileName               String
  storagePath            String    @unique
  uploadedAt             DateTime  @default(now())
  uploadedBy             String?
  title                  String?
  altText                String?
  caption                String?
  description            String?
  mimeType               String
  sizeBytes              Int
  width                  Int?
  height                 Int?
  urlOriginal            String
  urlThumbnail           String
  urlMedium              String
  urlLarge               String
  dataAiHint             String?
  updatedAt              DateTime  @updatedAt

  // Relationships
  userUploader           User?            @relation("UploadedBy", fields: [uploadedBy], references: [id], onDelete: SetNull, onUpdate: NoAction)
  auctionAsImage         Auction?         @relation("AuctionImage")
  bemAsImage             Bem?             @relation("BemImage")
  lotAsImage             Lot?             @relation("LotImage")
  sellerAsLogo           Seller?          @relation("SellerLogo")
  auctioneerAsLogo       Auctioneer?      @relation("AuctioneerLogo")
  blogPostAsImage        BlogPost?        @relation("BlogPostImage")
  directSaleOfferAsImage DirectSaleOffer? @relation("DirectSaleOfferImage")
  categoryAsLogo         LotCategory?     @relation("CategoryLogo")
  categoryAsCoverImage   LotCategory?     @relation("CategoryCoverImage")
  categoryAsMegaMenuImage LotCategory?    @relation("CategoryMegaMenuImage")
  subcategoryAsIcon      Subcategory?     @relation("SubcategoryIcon")
}


// ============================================================================
//  AUCTIONS & LOTS
// ============================================================================
model Auction {
  id                             String           @id @default(cuid())
  publicId                       String           @unique
  title                          String
  fullTitle                      String?
  description                    String?          @db.Text
  status                         AuctionStatus    @default(RASCUNHO)
  auctionType                    String? // JUDICIAL, EXTRAJUDICIAL, PARTICULAR, TOMADA_DE_PRECOS, DUTCH, SILENT
  auctionDate                    DateTime
  endDate                        DateTime?
  city                           String?
  state                          String?
  imageUrl                       String?
  dataAiHint                     String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  visits                         Int?             @default(0)
  initialOffer                   Float?
  bidsCount                      Int?             @default(0)
  totalHabilitatedUsers          Int?             @default(0)
  totalLots                      Int?             @default(0)
  isFeaturedOnMarketplace        Boolean?         @default(false)
  marketplaceAnnouncementTitle   String?
  softCloseEnabled               Boolean?         @default(false)
  softCloseMinutes               Int?             @default(2)
  automaticBiddingEnabled        Boolean?         @default(false)
  silentBiddingEnabled           Boolean?         @default(false)
  allowMultipleBidsPerUser       Boolean?         @default(true)
  allowInstallmentBids           Boolean?         @default(false)
  estimatedRevenue               Float?
  achievedRevenue                Float?
  additionalTriggers             String?          // Comma-separated list of strings
  decrementAmount                Float?           // For Dutch auctions
  decrementIntervalSeconds       Int?             // For Dutch auctions
  floorPrice                     Float?           // For Dutch auctions
  autoRelistSettings             Json?
  auctionStages                  Json?            // Array of AuctionStage objects
  createdAt                      DateTime         @default(now())
  updatedAt                      DateTime         @updatedAt

  // Relationships
  categoryId                     String
  category                       LotCategory      @relation(fields: [categoryId], references: [id])
  auctioneerId                   String
  auctioneer                     Auctioneer       @relation(fields: [auctioneerId], references: [id])
  sellerId                       String?
  seller                         Seller?          @relation(fields: [sellerId], references: [id])
  judicialProcessId              String?
  judicialProcess                JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  imageMediaId                   String?          @unique
  image                          MediaItem?       @relation("AuctionImage", fields: [imageMediaId], references: [id])
  lots                           Lot[]
  bids                           Bid[]
  questions                      LotQuestion[]
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

model Lot {
  id                           String        @id @default(cuid())
  publicId                     String        @unique
  auctionId                    String
  title                        String
  number                       String?
  imageUrl                     String?
  dataAiHint                   String?
  status                       LotStatus     @default(EM_BREVE)
  price                        Float
  initialPrice                 Float?
  secondInitialPrice           Float?
  bidIncrementStep             Float?
  views                        Int?          @default(0)
  bidsCount                    Int?          @default(0)
  isFeatured                   Boolean?      @default(false)
  isExclusive                  Boolean?      @default(false)
  discountPercentage           Float?
  additionalTriggers           String? // Comma-separated list of strings
  latitude                     Float?
  longitude                    Float?
  mapAddress                   String?
  mapEmbedUrl                  String?
  mapStaticImageUrl            String?
  winningBidTermUrl            String?
  judicialProcessNumber        String?
  courtDistrict                String?
  courtName                    String?
  publicProcessUrl             String?
  propertyRegistrationNumber   String?
  propertyLiens                String?       @db.Text
  knownDebts                   String?       @db.Text
  additionalDocumentsInfo      String?       @db.Text
  reservePrice                 Float?
  evaluationValue              Float?
  debtAmount                   Float?
  itbiValue                    Float?
  endDate                      DateTime?
  lotSpecificAuctionDate       DateTime?
  secondAuctionDate            DateTime?
  condition                    String?
  description                  String?       @db.Text
  createdAt                    DateTime      @default(now())
  updatedAt                    DateTime      @updatedAt

  // Relationships
  auction         Auction          @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  categoryId      String
  category        LotCategory      @relation(fields: [categoryId], references: [id])
  subcategoryId   String?
  subcategory     Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  stateId         String?
  state           StateInfo?       @relation(fields: [stateId], references: [id], onDelete: SetNull)
  cityId          String?
  city            CityInfo?        @relation(fields: [cityId], references: [id], onDelete: SetNull)
  imageMediaId    String?          @unique
  image           MediaItem?       @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  bids            Bid[]
  wins            UserWin[]
  questions       LotQuestion[]
  reviews         Review[]
  maxBids         UserLotMaxBid[]
  lotsOnBem       LotOnBem[]       @relation("LotOnBem_Lot")
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
  SUSPENSO
}

model Seller {
  id                         String            @id @default(cuid())
  publicId                   String            @unique
  name                       String            @unique
  slug                       String            @unique
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  description                String?           @db.Text
  dataAiHintLogo             String?
  memberSince                DateTime?
  rating                     Float?
  activeLotsCount            Int?              @default(0)
  totalSalesValue            Float?            @default(0)
  auctionsFacilitatedCount   Int?              @default(0)
  createdAt                  DateTime          @default(now())
  updatedAt                  DateTime          @updatedAt
  isJudicial                 Boolean           @default(false)

  // Relationships
  userId                     String?           @unique
  user                       User?             @relation("UserToSeller", fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  logoMediaId                String?           @unique
  logo                       MediaItem?        @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  judicialBranchId           String?           @unique
  judicialBranch             JudicialBranch?   @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  auctions                   Auction[]
  bens                       Bem[]
  directSaleOffers           DirectSaleOffer[]
  judicialProcesses          JudicialProcess[]
}

model Auctioneer {
  id                       String     @id @default(cuid())
  publicId                 String     @unique
  name                     String     @unique
  slug                     String     @unique
  registrationNumber       String?
  contactName              String?
  email                    String?
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                    String?
  description              String?    @db.Text
  dataAiHintLogo           String?
  memberSince              DateTime?
  rating                   Float?
  auctionsConductedCount   Int?       @default(0)
  totalValueSold           Float?     @default(0)
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt

  // Relationships
  userId                   String?    @unique
  user                     User?      @relation("UserToAuctioneer")
  logoMediaId              String?    @unique
  logo                     MediaItem? @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  auctions                 Auction[]
}

model LotCategory {
  id                   String            @id @default(cuid())
  name                 String            @unique
  slug                 String            @unique
  description          String?
  itemCount            Int?              @default(0)
  hasSubcategories     Boolean?          @default(false)
  dataAiHintLogo       String?
  dataAiHintCover      String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  // Relationships
  logoMediaId          String?           @unique
  logo                 MediaItem?        @relation("CategoryLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  coverImageMediaId    String?           @unique
  coverImage           MediaItem?        @relation("CategoryCoverImage", fields: [coverImageMediaId], references: [id], onDelete: SetNull)
  megaMenuImageMediaId String?           @unique
  megaMenuImage        MediaItem?        @relation("CategoryMegaMenuImage", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull)
  lots                 Lot[]
  subcategories        Subcategory[]
  bens                 Bem[]
  directSaleOffers     DirectSaleOffer[]
  auctions             Auction[]
}

model Subcategory {
  id               String       @id @default(cuid())
  name             String
  slug             String       @unique
  description      String?
  itemCount        Int?         @default(0)
  displayOrder     Int?         @default(0)
  parentCategoryId String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  // Relationships
  parentCategory LotCategory  @relation(fields: [parentCategoryId], references: [id])
  lots           Lot[]
  bens           Bem[]
  iconMediaId    String?      @unique
  icon           MediaItem?   @relation("SubcategoryIcon", fields: [iconMediaId], references: [id], onDelete: SetNull)
}

// ============================================================================
//  JUDICIAL ENTITIES
// ============================================================================

model JudicialProcess {
  id              String   @id @default(cuid())
  publicId        String   @unique
  processNumber   String   @unique
  isElectronic    Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  courtId         String
  court           Court            @relation(fields: [courtId], references: [id])
  districtId      String
  district        JudicialDistrict @relation(fields: [districtId], references: [id])
  branchId        String
  branch          JudicialBranch   @relation(fields: [branchId], references: [id])
  sellerId        String?          @unique
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  parties         ProcessParty[]
  bens            Bem[]
  auctions        Auction[]
}

model Court {
  id        String             @id @default(cuid())
  name      String             @unique
  slug      String             @unique
  stateUf   String
  website   String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  districts JudicialDistrict[]
  processes JudicialProcess[]
}

model JudicialDistrict {
  id        String            @id @default(cuid())
  name      String
  slug      String            @unique
  courtId   String
  stateId   String
  zipCode   String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relationships
  court     Court             @relation(fields: [courtId], references: [id])
  state     StateInfo         @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]
}

model JudicialBranch {
  id          String              @id @default(cuid())
  name        String
  slug        String              @unique
  districtId  String
  contactName String?
  phone       String?
  email       String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  // Relationships
  district  JudicialDistrict    @relation(fields: [districtId], references: [id])
  sellers   Seller[]
  processes JudicialProcess[]
}

model ProcessParty {
  id             String         @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType @default(OUTRO)

  // Relationships
  process JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@unique([processId, name, partyType])
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

// ============================================================================
//  JOIN TABLE FOR LOTS and BENS (Many-to-Many)
// ============================================================================

model LotOnBem {
  lotId     String
  bemId     String
  assignedAt DateTime @default(now())
  assignedBy String // Could be a user ID

  // Relationships
  lot       Lot      @relation("LotOnBem_Lot", fields: [lotId], references: [id], onDelete: Cascade)
  bem       Bem      @relation("LotOnBem_Bem", fields: [bemId], references: [id], onDelete: Cascade)

  @@id([lotId, bemId])
}

// ============================================================================
//  BENS (Assets/Goods)
// ============================================================================

model Bem {
  id          String   @id @default(cuid())
  publicId    String   @unique
  title       String
  description String?  @db.Text
  status      BemStatus @default(DISPONIVEL)
  evaluationValue Float?
  dataAiHint  String?
  address     String?
  locationCity String?
  locationState String?
  latitude    Float?
  longitude   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Dynamic fields based on category
  // Vehicle fields
  plate                String?
  make                 String?
  model                String?
  version              String?
  year                 Int?
  modelYear            Int?
  mileage              Int?
  color                String?
  fuelType             String?
  transmissionType     String?
  bodyType             String?
  vin                  String? @unique
  renavam              String? @unique
  enginePower          String?
  numberOfDoors        Int?
  vehicleOptions       String?
  detranStatus         String?
  debts                String?
  runningCondition     String?
  bodyCondition        String?
  tiresCondition       String?
  hasKey               Boolean?

  // Real Estate fields
  propertyRegistrationNumber String? @unique
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String? @db.Text
  infrastructure             String? @db.Text
  condoDetails               String? @db.Text
  improvements               String? @db.Text
  topography                 String?
  liensAndEncumbrances       String? @db.Text
  propertyDebts              String? @db.Text
  unregisteredRecords        String? @db.Text
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  amenities                  Json?

  // Electronics fields
  brand                String?
  serialNumber         String?
  itemCondition        String?
  specifications       String? @db.Text
  includedAccessories  String?
  batteryCondition     String?
  hasInvoice           Boolean?
  hasWarranty          Boolean?
  repairHistory        String?

  // Appliance fields
  applianceCapacity   String?
  voltage             String?
  applianceType       String?
  additionalFunctions String?
  
  // Machinery fields
  hoursUsed           Int?
  engineType          String?
  capacityOrPower     String?
  maintenanceHistory  String? @db.Text
  installationLocation String?
  compliesWithNR      String?
  operatingLicenses   String?

  // Livestock fields
  breed                 String?
  age                   String?
  sex                   String?
  weight                String?
  individualId          String? @unique
  purpose               String?
  sanitaryCondition     String?
  lineage               String?
  isPregnant            Boolean?
  specialSkills         String?
  gtaDocument           String?
  breedRegistryDocument String?

  // Furniture
  furnitureType String?
  material      String?
  style         String?
  dimensions    String?
  pieceCount    Int?

  // Jewelry
  jewelryType           String?
  metal                 String?
  gemstones             String?
  totalWeight           String?
  jewelrySize           String?
  authenticityCertificate String?

  // Art & Antiques
  workType              String?
  artist                String?
  period                String?
  technique             String?
  provenance            String?

  // Boats
  boatType          String?
  boatLength        String?
  hullMaterial      String?
  onboardEquipment  String?

  // Food
  productName       String?
  quantity          String?
  packagingType     String?
  expirationDate    DateTime?
  storageConditions String?

  // Precious Metals & Stones
  preciousMetalType String?
  purity            String?

  // Forest Goods
  forestGoodsType  String?
  volumeOrQuantity String?
  species          String?
  dofNumber        String?

  // Relationships
  categoryId      String
  category        LotCategory      @relation(fields: [categoryId], references: [id])
  subcategoryId   String?
  subcategory     Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  judicialProcessId String?
  sellerId        String?
  seller          Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  imageMediaId    String?          @unique
  image           MediaItem?       @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  lotsOnBem       LotOnBem[]       @relation("LotOnBem_Bem")
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

// ============================================================================
//  GEOGRAPHICAL & SYSTEM DATA
// ============================================================================
model StateInfo {
  id        String             @id @default(cuid())
  name      String             @unique
  uf        String             @unique
  slug      String             @unique
  cityCount Int?               @default(0)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  courts    Court[]
  cities    CityInfo[]
  lots      Lot[]
  districts JudicialDistrict[]
}

model CityInfo {
  id        String    @id @default(cuid())
  name      String
  slug      String
  stateId   String
  stateUf   String
  ibgeCode  String?
  lotCount  Int?      @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relationships
  state     StateInfo @relation(fields: [stateId], references: [id])
  lots      Lot[]
}

model BlogPost {
  id              String    @id @default(cuid())
  title           String
  slug            String    @unique
  content         String    @db.Text
  authorId        String
  publishedAt     DateTime
  status          String // DRAFT, PUBLISHED, ARCHIVED
  tags            String? // Comma-separated
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relationships
  author          User       @relation(fields: [authorId], references: [id])
  featuredImageId String?    @unique
  image           MediaItem? @relation("BlogPostImage", fields: [featuredImageId], references: [id], onDelete: SetNull)
}

// ============================================================================
//  BIDS, WINS, PAYMENTS & POST-AUCTION
// ============================================================================
model Bid {
  id        String   @id @default(cuid())
  lotId     String
  auctionId String
  bidderId  String
  bidderDisplay String
  amount    Float
  timestamp DateTime @default(now())
  
  // Relationships
  lot     Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder  User @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id                String        @id @default(cuid())
  userId            String
  lotId             String
  winningBidAmount  Float
  winDate           DateTime      @default(now())
  paymentStatus     PaymentStatus @default(PENDENTE)
  invoiceUrl        String?

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

// ============================================================================
//  USER INTERACTION
// ============================================================================

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int // 1-5
  comment         String?  @db.Text
  createdAt       DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id           String   @id @default(cuid())
  lotId        String
  auctionId    String
  userId       String
  userDisplayName String
  questionText String   @db.Text
  isPublic     Boolean  @default(true)
  createdAt    DateTime @default(now())
  
  answerText            String?   @db.Text
  answeredAt            DateTime?
  answeredByUserId      String?
  answeredByUserDisplayName String?

  // Relationships
  lot       Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction   Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  answeredBy User? @relation("AnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)
}

// ============================================================================
//  SYSTEM & PLATFORM
// ============================================================================
model DocumentTemplate {
  id        String               @id @default(cuid())
  name      String               @unique
  type      DocumentTemplateType
  content   String               @db.Text
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

model PlatformSettings {
  id                             String @id @default("global")
  siteTitle                      String?
  siteTagline                    String?
  galleryImageBasePath           String?
  storageProvider                String?
  firebaseStorageBucket          String?
  activeThemeName                String?
  themes                         Json?
  platformPublicIdMasks          Json?
  homepageSections               Json?
  mentalTriggerSettings          Json?
  sectionBadgeVisibility         Json?
  mapSettings                    Json?
  searchPaginationType           String?
  searchItemsPerPage             Int?
  searchLoadMoreCount            Int?
  showCountdownOnLotDetail       Boolean?
  showCountdownOnCards           Boolean?
  showRelatedLotsOnLotDetail     Boolean?
  relatedLotsCount               Int?
  defaultUrgencyTimerHours       Int?
  biddingSettings                Json?
  variableIncrementTable         Json?
  defaultListItemsPerPage        Int?
  updatedAt                      DateTime @updatedAt
}

model DirectSaleOffer {
  id                   String                  @id @default(cuid())
  publicId             String                  @unique
  title                String
  description          String                  @db.Text
  offerType            DirectSaleOfferType
  status               DirectSaleOfferStatus   @default(PENDING_APPROVAL)
  price                Float? // For BUY_NOW
  minimumOfferPrice    Float? // For ACCEPTS_PROPOSALS
  locationCity         String?
  locationState        String?
  dataAiHint           String?
  views                Int                     @default(0)
  proposalsCount       Int                     @default(0)
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  expiresAt            DateTime?

  // Relationships
  categoryId           String
  category             LotCategory             @relation(fields: [categoryId], references: [id])
  sellerId             String
  seller               Seller                  @relation(fields: [sellerId], references: [id])
  imageMediaId         String?                 @unique
  image                MediaItem?              @relation("DirectSaleOfferImage", fields: [imageMediaId], references: [id])
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  PENDING_APPROVAL
  ACTIVE
  SOLD
  EXPIRED
}
