
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// =================================================================
// ENUM DEFINITIONS
// =================================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  REJECTED_DOCUMENTS
  HABILITADO
  BLOCKED
}

enum DocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

// =================================================================
// MODEL DEFINITIONS
// =================================================================

model State {
  id              String             @id @default(uuid())
  name            String
  uf              String             @unique
  slug            String?            @unique
  cityCount       Int?               @default(0)
  cities          City[]
  courts          Court[]
  judicialDistricts JudicialDistrict[]
  lots            Lot[] // For lots that have a state relationship
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model City {
  id        String   @id @default(uuid())
  name      String
  slug      String?
  state     State    @relation(fields: [stateId], references: [id])
  stateId   String
  stateUf   String?
  ibgeCode  String?  @unique
  lotCount  Int?     @default(0)
  lots      Lot[] // For lots that have a city relationship
  auctions  Auction[] // Added back-relation
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LotCategory {
  id                   String                @id @default(uuid())
  name                 String                @unique
  slug                 String                @unique
  description          String?               @db.Text
  hasSubcategories     Boolean?              @default(false)
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  subcategories        Subcategory[]
  lots                 Lot[]
  bens                 Bem[]
  auctions             Auction[] // Added back-relation
  directSaleOffers     DirectSaleOffer[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model Subcategory {
  id                   String       @id @default(uuid())
  name                 String
  slug                 String?      @unique
  parentCategory       LotCategory  @relation(fields: [parentCategoryId], references: [id])
  parentCategoryId     String
  description          String?      @db.Text
  displayOrder         Int?         @default(0)
  iconUrl              String?
  iconMediaId          String?
  dataAiHintIcon       String?
  lots                 Lot[]
  bens                 Bem[]
}

model Role {
  id             String         @id @default(uuid())
  name           String         @unique
  nameNormalized String         @unique
  description    String?        @db.Text
  permissions    Json?
  users          UsersOnRoles[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model User {
  id                 String                @id @default(uuid())
  email              String                @unique
  password           String?
  fullName           String?
  roles              UsersOnRoles[]
  seller             Seller?
  auctioneer         Auctioneer?
  habilitationStatus UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType        AccountType           @default(PHYSICAL)
  avatarUrl          String?
  dataAiHint         String?
  badges             Json?
  documents          UserDocument[]
  bids               Bid[]
  maxBids            UserLotMaxBid[]
  wins               UserWin[]
  notifications      Notification[]
  mediaItems         MediaItem[]
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  
  // Detalhes PF
  cpf                  String?            @unique
  rgNumber             String?
  rgIssuer             String?
  rgIssueDate          DateTime?
  rgState              String?
  dateOfBirth          DateTime?
  homePhone            String?
  cellPhone            String?
  gender               String?
  profession           String?
  nationality          String?
  maritalStatus        String?
  propertyRegime       String?
  spouseName           String?
  spouseCpf            String?

  // Detalhes Endereço
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?

  // Detalhes PJ
  razaoSocial          String?
  cnpj                 String?            @unique
  inscricaoEstadual    String?
  website              String?
  responsibleName      String?
  responsibleCpf       String?

  // Preferências
  optInMarketing       Boolean?           @default(false)
  wonLots              Lot[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  role       Role     @relation(fields: [roleId], references: [id])
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}


model Court {
  id                String             @id @default(uuid())
  name              String             @unique
  slug              String?            @unique
  state             State?             @relation(fields: [stateId], references: [id])
  stateId           String?
  stateUf           String?
  website           String?
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model JudicialDistrict {
  id                String             @id @default(uuid())
  name              String
  slug              String             @unique
  court             Court?             @relation(fields: [courtId], references: [id])
  courtId           String?
  state             State?             @relation(fields: [stateId], references: [id])
  stateId           String?
  zipCode           String?
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[] // Added back-relation
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model JudicialBranch {
  id                String             @id @default(uuid())
  name              String
  slug              String             @unique
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
  auctions          Auction[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Seller {
  id                 String              @id @default(uuid())
  publicId           String?             @unique
  slug               String?             @unique
  name               String              @unique
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?             @db.Text
  userId             String?             @unique
  user               User?               @relation(fields: [userId], references: [id])
  isJudicial         Boolean             @default(false)
  judicialBranch     JudicialBranch?     @relation(fields: [judicialBranchId], references: [id])
  judicialBranchId   String?
  auctions           Auction[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
  lots               Lot[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model Auctioneer {
  id                  String    @id @default(uuid())
  publicId            String?   @unique
  slug                String?   @unique
  name                String
  registrationNumber  String?
  contactName         String?
  email               String?
  phone               String?
  address             String?
  city                String?
  state               String?
  zipCode             String?
  website             String?
  logoUrl             String?
  logoMediaId         String?
  dataAiHintLogo      String?
  description         String?   @db.Text
  userId              String?   @unique
  user                User?     @relation(fields: [userId], references: [id])
  auctions            Auction[]
  lots                Lot[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model JudicialProcess {
  id                String          @id @default(uuid())
  publicId          String?         @unique
  processNumber     String          @unique
  isElectronic      Boolean         @default(true)
  court             Court?          @relation(fields: [courtId], references: [id])
  courtId           String?
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  districtId        String?
  branch            JudicialBranch? @relation(fields: [branchId], references: [id])
  branchId          String?
  seller            Seller?         @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId          String?
  parties           JudicialParty[]
  bens              Bem[]
  mediaItems        MediaItem[]
  auctions          Auction[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model JudicialParty {
  id             String          @id @default(uuid())
  process          JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType
}

model DirectSaleOffer {
  id                     String                @id @default(uuid())
  publicId               String?               @unique
  title                  String
  description            String?               @db.Text
  offerType              DirectSaleOfferType
  price                  Decimal?              @db.Decimal(15, 2)
  minimumOfferPrice      Decimal?              @db.Decimal(15, 2)
  status                 DirectSaleOfferStatus @default(ACTIVE)
  category               LotCategory           @relation(fields: [categoryId], references: [id])
  categoryId             String
  seller                 Seller                @relation(fields: [sellerId], references: [id])
  sellerId               String
  sellerName             String?
  sellerLogoUrl          String?
  dataAiHintSellerLogo   String?
  locationCity           String?
  locationState          String?
  imageUrl               String?
  imageMediaId           String?
  dataAiHint             String?
  galleryImageUrls       Json?
  mediaItemIds           Json?
  itemsIncluded          Json?
  views                  Int?                  @default(0)
  expiresAt              DateTime?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
}

model AuctionStage {
  id                   String        @id @default(uuid())
  auction              Auction       @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId            String
  name                 String
  startDate            DateTime
  endDate              DateTime
  initialPrice         Decimal?      @db.Decimal(15, 2)
  bidIncrement         Decimal?      @db.Decimal(10, 2)
  /// Valor de avaliação específico para esta praça
  evaluationValue      Decimal?      @db.Decimal(15, 2) 
}

model Auction {
  id                  String          @id @default(uuid())
  publicId            String?         @unique
  slug                String?         @unique
  title               String
  description         String?         @db.Text
  status              AuctionStatus   @default(RASCUNHO)
  auctionDate         DateTime
  endDate             DateTime?
  totalLots           Int?            @default(0)
  category            LotCategory?             @relation(fields: [categoryId], references: [id])
  categoryId          String?
  auctioneer          Auctioneer?     @relation(fields: [auctioneerId], references: [id])
  auctioneerId        String?
  seller              Seller?         @relation(fields: [sellerId], references: [id])
  sellerId            String?
  lots                Lot[]
  bids                Bid[]
  questions           LotQuestion[]
  habilitations       AuctionHabilitation[]
  auctionStages       AuctionStage[]

  // Location
  address             String?
  city                City?                @relation(fields: [cityId], references: [id], onDelete: SetNull)
  cityId              String?
  state               State?               @relation(fields: [stateId], references: [id], onDelete: SetNull)
  stateId             String?
  zipCode             String?

  // Judicial Fields
  judicialProcess     JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId   String?
  court               Court?           @relation(fields: [courtId], references: [id], onDelete: SetNull)
  courtId             String?
  district            JudicialDistrict? @relation(fields: [districtId], references: [id], onDelete: SetNull)
  districtId          String?
  branch              JudicialBranch?  @relation(fields: [branchId], references: [id], onDelete: SetNull)
  branchId            String?

  // Advanced Features
  auctionType         AuctionType?
  auctionMethod       AuctionMethod?  @default(STANDARD)
  participation       AuctionParticipation? @default(ONLINE)
  onlineUrl           String?
  sellingBranch       String?
  softCloseEnabled    Boolean         @default(false)
  softCloseMinutes    Int?            @default(2)
  isFeaturedOnMarketplace Boolean     @default(false)
  marketplaceAnnouncementTitle String?
  
  // Bidding Logic
  automaticBiddingEnabled    Boolean @default(false)
  allowInstallmentBids       Boolean @default(true)
  silentBiddingEnabled       Boolean @default(false)
  allowMultipleBidsPerUser   Boolean @default(true)

  // Dutch Auction Specific
  decrementAmount     Decimal?
  decrementIntervalSeconds Int?
  floorPrice          Decimal?
  
  // Relist logic settings
  autoRelistSettings  Json?
  
  // Analytics & Media
  visits              Int?            @default(0)
  estimatedRevenue    Decimal?
  achievedRevenue     Decimal?
  totalHabilitatedUsers Int?            @default(0)
  imageUrl            String?
  imageMediaId        String?
  documentsUrl        String?
  evaluationReportUrl String?
  auctionCertificateUrl String?
  dataAiHint          String?
  additionalTriggers  Json?

  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
}

model Lot {
  id                         String        @id @default(uuid())
  publicId                   String?       @unique
  auction                    Auction       @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                  String
  number                     String?
  title                      String
  slug                       String?
  description                String?       @db.Text
  price                      Decimal       @db.Decimal(15, 2)
  initialPrice               Decimal?      @db.Decimal(15, 2)
  secondInitialPrice         Decimal?      @db.Decimal(15, 2)
  bidIncrementStep           Decimal?      @db.Decimal(10, 2)
  status                     LotStatus     @default(EM_BREVE)
  bids                       Bid[]
  questions                  LotQuestion[]
  maxBids                    UserLotMaxBid[]
  bidsCount                  Int?          @default(0)
  views                      Int?          @default(0)
  isFeatured                 Boolean?      @default(false)
  isExclusive                Boolean?      @default(false)
  discountPercentage         Int?
  additionalTriggers         Json?
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  inheritedMediaFromBemId    String?    /// ID do Bem de onde as mídias são herdadas
  type                       String
  category                   LotCategory?             @relation(fields: [categoryId], references: [id])
  categoryId                 String?
  subcategory                Subcategory?             @relation(fields: [subcategoryId], references: [id])
  subcategoryId              String?
  auctionName                String?
  seller                     Seller?                  @relation(fields: [sellerId], references: [id])
  sellerId                   String?
  sellerName                 String?
  auctioneer                 Auctioneer?              @relation(fields: [auctioneerId], references: [id])
  auctioneerId               String?
  city                       City?                    @relation(fields: [cityId], references: [id])
  cityId                     String?
  state                      State?                   @relation(fields: [stateId], references: [id])
  stateId                    String?
  cityName                   String?
  stateUf                    String?
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?
  endDate                    DateTime?
  auctionDate                DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  dataAiHint                 String?
  winner                     User?         @relation("WonLots", fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId                   String?
  win                        UserWin?
  winningBidTermUrl          String?
  allowInstallmentBids       Boolean?      @default(false)
  bens                       LotBens[]
  createdAt                  DateTime      @default(now())
  updatedAt                  DateTime      @updatedAt
}

model LotBens {
  lot       Lot      @relation(fields: [lotId], references: [id])
  lotId     String
  bem       Bem      @relation(fields: [bemId], references: [id])
  bemId     String
  createdAt DateTime @default(now())

  @@id([lotId, bemId])
}

model Bid {
  id            String   @id @default(uuid())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId      String
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
}

model UserWin {
  id                 String   @id @default(uuid())
  lot                Lot      @relation(fields: [lotId], references: [id])
  lotId              String   @unique
  user               User     @relation(fields: [userId], references: [id])
  userId             String
  winningBidAmount   Decimal  @db.Decimal(15, 2)
  winDate            DateTime
  paymentStatus      PaymentStatus
  invoiceUrl         String?
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model MediaItem {
  id                   String           @id @default(uuid())
  fileName             String
  storagePath          String           @unique
  title                String?
  altText              String?
  caption              String?
  description          String?          @db.Text
  mimeType             String
  sizeBytes            Int?
  urlOriginal          String
  urlThumbnail         String?
  urlMedium            String?
  urlLarge             String?
  linkedLotIds         Json?
  dataAiHint           String?
  uploadedByUser       User             @relation(fields: [uploadedByUserId], references: [id])
  uploadedByUserId     String
  judicialProcess      JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId    String?
  uploadedAt           DateTime         @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentTemplate {
  id        String               @id @default(uuid())
  name      String
  type      DocumentTemplateType
  content   String?              @db.Text
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model DocumentType {
  id               String         @id @default(uuid())
  name             String
  description      String?
  isRequired       Boolean        @default(true)
  /// Comma-separated: PHYSICAL,LEGAL,ALL,PROCESS
  appliesTo        String?
  userDocuments    UserDocument[]
}

model UserDocument {
  id              String         @id @default(uuid())
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  documentType    DocumentType   @relation(fields: [documentTypeId], references: [id])
  documentTypeId  String
  status          DocumentStatus @default(NOT_SENT)
  fileUrl         String
  fileName        String?
  rejectionReason String?        @db.Text
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@unique([userId, documentTypeId])
}

model AuctionHabilitation {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId String
  status    String   @default("HABILITADO")
  requestedAt DateTime @default(now())
  approvedAt  DateTime?

  @@unique([userId, auctionId])
}

model LotQuestion {
  id                        String   @id @default(uuid())
  lot                       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId                     String
  auction                   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                 String
  user                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                    String
  userDisplayName           String
  questionText              String   @db.Text
  answerText                String?  @db.Text
  answeredByUserId          String?
  answeredByUserDisplayName String?
  answeredAt                DateTime?
  isPublic                  Boolean  @default(true)
  createdAt                 DateTime @default(now())
}

model Review {
  id              String   @id @default(uuid())
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId           String
  auctionId       String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  userDisplayName String
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())
}
