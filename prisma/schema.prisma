// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// Enums
// =================================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ACTIVE
  SOLD
  EXPIRED
  PENDING_APPROVAL
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}


// =================================================================
// Models
// =================================================================

model User {
  id                      String                   @id @default(uuid())
  email                   String                   @unique
  fullName                String
  password                String
  roleId                  String?
  sellerId                String?                  @unique
  accountType             AccountType?
  habilitationStatus      UserHabilitationStatus?  @default(PENDING_DOCUMENTS)
  cpf                     String?                  @unique
  rgNumber                String?
  rgIssuer                String?
  rgIssueDate             DateTime?
  rgState                 String?
  dateOfBirth             DateTime?
  cellPhone               String?
  homePhone               String?
  gender                  String?
  profession              String?
  nationality             String?
  maritalStatus           String?
  propertyRegime          String?
  spouseName              String?
  spouseCpf               String?
  zipCode                 String?
  street                  String?
  number                  String?
  complement              String?
  neighborhood            String?
  city                    String?
  state                   String?
  status                  String?
  optInMarketing          Boolean?                 @default(false)
  avatarUrl               String?
  dataAiHint              String?
  activeBids              Int?
  auctionsWon             Int?
  itemsSold               Int?
  razaoSocial             String?
  cnpj                    String?                  @unique
  inscricaoEstadual       String?
  website                 String?
  badges                  Json[]                   @default([])
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt

  role                    Role?                    @relation(fields: [roleId], references: [id])
  sellerProfile           Seller?                  @relation(fields: [sellerId], references: [id])
  documents               UserDocument[]
  notifications           Notification[]
  bids                    Bid[]
  wins                    UserWin[]
  maxBids                 UserLotMaxBid[]
  reviews                 Review[]
  questions               LotQuestion[]
  answers                 LotQuestion[]            @relation("AnsweredByUser")
}

model Role {
  id              String      @id @default(uuid())
  name            String      @unique
  name_normalized String      @unique
  description     String?
  permissions     Json        @default("[]")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  users           User[]
}

model UserDocument {
  id              String             @id @default(uuid())
  userId          String
  documentTypeId  String
  fileUrl         String?
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  rejectionReason String?
  
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType       @relation(fields: [documentTypeId], references: [id])
  
  @@unique([userId, documentTypeId])
  @@index([userId])
}

model DocumentType {
    id              String          @id @default(uuid())
    name            String          @unique
    description     String?
    isRequired      Boolean         @default(true)
    appliesTo       AccountType[]
    allowedFormats  String[]        @default(["pdf", "jpg", "png"])
    displayOrder    Int             @default(0)
    userDocuments   UserDocument[]
    
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
}

model Auction {
    id                          String          @id @default(uuid())
    publicId                    String          @unique
    title                       String
    fullTitle                   String?
    description                 String?
    status                      AuctionStatus   @default(RASCUNHO)
    auctionType                 AuctionType?
    categoryId                  String
    auctioneerId                String
    sellerId                    String?
    judicialProcessId           String?
    auctionDate                 DateTime
    endDate                     DateTime?
    auctionStages               Json[]          @default([])
    city                        String?
    state                       String?
    imageUrl                    String?
    imageMediaId                String?
    dataAiHint                  String?
    documentsUrl                String?
    totalLots                   Int?            @default(0)
    visits                      Int?            @default(0)
    initialOffer                Float?
    isFavorite                  Boolean?
    currentBid                  Float?
    bidsCount                   Int?
    sellingBranch               String?
    vehicleLocation             String?
    automaticBiddingEnabled     Boolean?        @default(false)
    silentBiddingEnabled        Boolean?        @default(false)
    allowMultipleBidsPerUser    Boolean?        @default(true)
    allowInstallmentBids        Boolean?        @default(false)
    softCloseEnabled            Boolean?        @default(false)
    softCloseMinutes            Int?
    estimatedRevenue            Float?
    achievedRevenue             Float?
    totalHabilitatedUsers       Int?
    isFeaturedOnMarketplace     Boolean?        @default(false)
    marketplaceAnnouncementTitle String?
    additionalTriggers          String[]        @default([])
    decrementAmount             Float?
    decrementIntervalSeconds    Int?
    floorPrice                  Float?
    autoRelistSettings          Json?
    relistedFromId              String?         @unique
    relistCount                 Int             @default(0)

    category                    LotCategory     @relation(fields: [categoryId], references: [id])
    auctioneer                  Auctioneer      @relation(fields: [auctioneerId], references: [id])
    seller                      Seller?         @relation(fields: [sellerId], references: [id])
    judicialProcess             JudicialProcess?@relation(fields: [judicialProcessId], references: [id])
    lots                        Lot[]
    bids                        Bid[]
    relistedFrom                Auction?        @relation("AuctionRelist", fields: [relistedFromId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    relistedAuction             Auction?        @relation("AuctionRelist")

    createdAt                   DateTime        @default(now())
    updatedAt                   DateTime        @updatedAt
}

model Lot {
  id                          String      @id @default(uuid())
  publicId                    String      @unique
  auctionId                   String
  title                       String
  number                      String?
  description                 String?
  price                       Float
  initialPrice                Float?
  secondAuctionDate           DateTime?
  secondInitialPrice          Float?
  status                      LotStatus   @default(EM_BREVE)
  stateId                     String?
  cityId                      String?
  categoryId                  String
  subcategoryId               String?
  views                       Int?        @default(0)
  bidsCount                   Int?        @default(0)
  endDate                     DateTime
  lotSpecificAuctionDate      DateTime?
  imageUrl                    String?
  imageMediaId                String?
  dataAiHint                  String?
  galleryImageUrls            String[]
  mediaItemIds                String[]
  isFeatured                  Boolean?    @default(false)
  isExclusive                 Boolean?    @default(false)
  additionalTriggers          String[]    @default([])
  discountPercentage          Int?
  condition                   String?
  
  // Vehicle Fields
  year                        Int?
  make                        String?
  model                       String?
  series                      String?
  stockNumber                 String?
  vin                         String?
  vinStatus                   String?
  lossType                    String?
  primaryDamage               String?
  titleInfo                   String?
  titleBrand                  String?
  startCode                   String?
  hasKey                      Boolean?
  odometer                    String?
  airbagsStatus               String?
  bodyStyle                   String?
  engineDetails               String?
  transmissionType            String?
  driveLineType               String?
  fuelType                    String?
  cylinders                   String?
  restraintSystem             String?
  exteriorInteriorColor       String?
  options                     String?
  manufacturedIn              String?
  vehicleClass                String?
  vehicleLocationInBranch     String?
  laneRunNumber               String?
  aisleStall                  String?
  actualCashValue             String?
  estimatedRepairCost         String?

  bemIds                      String[] @default([])

  auction                     Auction     @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                    LotCategory @relation(fields: [categoryId], references: [id])
  subcategory                 Subcategory? @relation(fields: [subcategoryId], references: [id])
  bids                        Bid[]
  wins                        UserWin[]
  maxBids                     UserLotMaxBid[]
  reviews                     Review[]
  questions                   LotQuestion[]
  
  createdAt                   DateTime    @default(now())
  updatedAt                   DateTime    @updatedAt
}


model Bid {
  id              String      @id @default(uuid())
  lotId           String
  auctionId       String
  bidderId        String
  bidderDisplay   String
  amount          Float
  timestamp       DateTime    @default(now())

  lot             Lot         @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction         Auction     @relation(fields: [auctionId], references: [id])
  user            User        @relation(fields: [bidderId], references: [id])

  @@index([lotId])
}

model UserWin {
    id              String          @id @default(uuid())
    userId          String
    lotId           String
    winningBidAmount Float
    winDate         DateTime        @default(now())
    paymentStatus   PaymentStatus?  @default(PENDENTE)
    invoiceUrl      String?

    user            User            @relation(fields: [userId], references: [id])
    lot             Lot             @relation(fields: [lotId], references: [id])
}

model UserLotMaxBid {
  id        String    @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user      User      @relation(fields: [userId], references: [id])
  lot       Lot       @relation(fields: [lotId], references: [id])

  @@unique([userId, lotId])
}


model Review {
    id              String  @id @default(uuid())
    lotId           String
    auctionId       String
    userId          String
    userDisplayName String
    rating          Int
    comment         String

    lot             Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
    user            User    @relation(fields: [userId], references: [id])
}

model LotQuestion {
    id              String      @id @default(uuid())
    lotId           String
    auctionId       String
    userId          String
    userDisplayName String
    questionText    String
    answerText      String?
    answeredByUserId String?
    answeredByUserDisplayName String?
    answeredAt      DateTime?
    isPublic        Boolean     @default(true)
    
    lot             Lot         @relation(fields: [lotId], references: [id], onDelete: Cascade)
    user            User        @relation(fields: [userId], references: [id])
    answeredBy      User?       @relation("AnsweredByUser", fields: [answeredByUserId], references: [id], onDelete: SetNull)

    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
}


model Seller {
  id                          String          @id @default(uuid())
  publicId                    String          @unique
  name                        String
  slug                        String          @unique
  contactName                 String?
  email                       String?
  phone                       String?
  address                     String?
  city                        String?
  state                       String?
  zipCode                     String?
  website                     String?
  logoUrl                     String?
  logoMediaId                 String?
  dataAiHintLogo              String?
  description                 String?
  memberSince                 DateTime?
  rating                      Float?
  activeLotsCount             Int?
  totalSalesValue             Float?
  auctionsFacilitatedCount    Int?
  isJudicial                  Boolean         @default(false)
  judicialBranchId            String?         @unique
  
  user                        User?
  auctions                    Auction[]
  bens                        Bem[]
  judicialBranch              JudicialBranch? @relation(fields: [judicialBranchId], references: [id])
  
  createdAt                   DateTime        @default(now())
  updatedAt                   DateTime        @updatedAt
}

model Auctioneer {
  id                      String   @id @default(uuid())
  publicId                String   @unique
  name                    String
  slug                    String   @unique
  registrationNumber      String?
  contactName             String?
  email                   String?
  phone                   String?
  address                 String?
  city                    String?
  state                   String?
  zipCode                 String?
  website                 String?
  logoUrl                 String?
  logoMediaId             String?
  dataAiHintLogo          String?
  description             String?
  memberSince             DateTime?
  rating                  Float?
  auctionsConductedCount  Int?
  totalValueSold          Float?
  userId                  String?
  
  auctions                Auction[]

  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model DirectSaleOffer {
  id                      String                @id @default(uuid())
  publicId                String                @unique
  title                   String
  description             String
  imageUrl                String?
  imageMediaId            String?
  dataAiHint              String?
  galleryImageUrls        Json[]
  itemsIncluded           String[]
  tags                    String[]
  offerType               DirectSaleOfferType
  status                  DirectSaleOfferStatus
  price                   Float?
  minimumOfferPrice       Float?
  categoryId              String
  locationCity            String?
  locationState           String?
  sellerId                String
  views                   Int?                  @default(0)
  proposalsCount          Int?                  @default(0)
  expiresAt               DateTime?

  category                LotCategory @relation(fields: [categoryId], references: [id])
  seller                  Seller      @relation(fields: [sellerId], references: [id])

  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
}

model MediaItem {
  id              String   @id @default(uuid())
  fileName        String
  storagePath     String?  @unique
  uploadedAt      DateTime @default(now())
  uploadedBy      String?
  title           String?
  altText         String?
  caption         String?
  description     String?
  mimeType        String
  sizeBytes       Int
  dimensions      Json?
  urlOriginal     String
  urlThumbnail    String?
  urlMedium       String?
  urlLarge        String?
  linkedLotIds    String[]
  dataAiHint      String?
}

model LotCategory {
  id                  String            @id @default(uuid())
  name                String            @unique
  slug                String            @unique
  description         String?
  logoUrl             String?
  logoMediaId         String?
  dataAiHintLogo      String?
  coverImageUrl       String?
  coverImageMediaId   String?
  dataAiHintCover     String?
  megaMenuImageUrl    String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu  String?
  hasSubcategories    Boolean           @default(false)
  itemCount           Int?              @default(0)
  
  subcategories       Subcategory[]
  auctions            Auction[]
  lots                Lot[]
  directSaleOffers    DirectSaleOffer[]
  bens                Bem[]

  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

model Subcategory {
    id              String          @id @default(uuid())
    name            String
    slug            String          @unique
    description     String?
    parentCategoryId String
    iconUrl         String?
    iconMediaId     String?
    dataAiHintIcon  String?
    displayOrder    Int             @default(0)
    itemCount       Int?

    parentCategory  LotCategory     @relation(fields: [parentCategoryId], references: [id])
    lots            Lot[]
    bens            Bem[]
    
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
}


model State {
  id        String   @id @default(uuid())
  name      String   @unique
  uf        String   @unique @db.Char(2)
  slug      String   @unique
  
  cities    City[]
  courts    Court[]
  districts JudicialDistrict[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id       String @id @default(uuid())
  name     String
  slug     String @unique
  stateId  String
  stateUf  String @db.Char(2)
  ibgeCode String?
  
  state    State  @relation(fields: [stateId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Court {
    id          String              @id @default(uuid())
    name        String              @unique
    slug        String              @unique
    stateUf     String              @db.Char(2)
    website     String?
    
    state       State               @relation(fields: [stateUf], references: [uf])
    districts   JudicialDistrict[]
    processes   JudicialProcess[]
    
    createdAt   DateTime            @default(now())
    updatedAt   DateTime            @updatedAt
}

model JudicialDistrict {
    id          String              @id @default(uuid())
    name        String
    slug        String              @unique
    courtId     String
    stateId     String
    zipCode     String?

    court       Court               @relation(fields: [courtId], references: [id])
    state       State               @relation(fields: [stateId], references: [id])
    branches    JudicialBranch[]
    processes   JudicialProcess[]
    
    createdAt   DateTime            @default(now())
    updatedAt   DateTime            @updatedAt
}

model JudicialBranch {
    id          String              @id @default(uuid())
    name        String
    slug        String              @unique
    districtId  String
    contactName String?
    phone       String?
    email       String?

    district    JudicialDistrict    @relation(fields: [districtId], references: [id])
    processes   JudicialProcess[]
    sellers     Seller[]

    createdAt   DateTime            @default(now())
    updatedAt   DateTime            @updatedAt
}

model JudicialProcess {
  id              String      @id @default(uuid())
  publicId        String      @unique
  processNumber   String      @unique
  isElectronic    Boolean     @default(true)
  courtId         String
  districtId      String
  branchId        String
  sellerId        String?

  court           Court       @relation(fields: [courtId], references: [id])
  district        JudicialDistrict @relation(fields: [districtId], references: [id])
  branch          JudicialBranch @relation(fields: [branchId], references: [id])
  seller          Seller?     @relation(fields: [sellerId], references: [id])
  parties         ProcessParty[]
  bens            Bem[]
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model ProcessParty {
    id              String           @id @default(uuid())
    processId       String
    name            String
    partyType       ProcessPartyType
    documentNumber  String?

    process         JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model Bem {
    id                          String          @id @default(uuid())
    publicId                    String          @unique
    title                       String
    description                 String?
    status                      BemStatus       @default(DISPONIVEL)
    categoryId                  String
    subcategoryId               String?
    judicialProcessId           String?
    sellerId                    String?
    evaluationValue             Float?
    imageUrl                    String?
    imageMediaId                String?
    galleryImageUrls            String[]
    mediaItemIds                String[]
    dataAiHint                  String?
    locationCity                String?
    locationState               String?
    address                     String?
    latitude                    Float?
    longitude                   Float?

    // --- Specific Fields (using Json for simplicity, could be separate models) ---
    // Veículos
    plate                       String?
    make                        String?
    model                       String?
    version                     String?
    year                        Int?
    modelYear                   Int?
    mileage                     Int?
    color                       String?
    fuelType                    String?
    transmissionType            String?
    bodyType                    String?
    vin                         String?
    renavam                     String?
    enginePower                 String?
    numberOfDoors               Int?
    vehicleOptions              String?
    detranStatus                String?
    debts                       String?
    runningCondition            String?
    bodyCondition               String?
    tiresCondition              String?
    hasKey                      Boolean?
    // Imóveis
    propertyType                String?
    propertyRegistrationNumber  String?
    iptuNumber                  String?
    isOccupied                  Boolean?
    area                        Float?
    totalArea                   Float?
    builtArea                   Float?
    bedrooms                    Int?
    suites                      Int?
    bathrooms                   Int?
    parkingSpaces               Int?
    amenities                   Json[]
    constructionType            String?
    finishes                    String?
    infrastructure              String?
    condoDetails                String?
    improvements                String?
    topography                  String?
    liensAndEncumbrances        String?
    propertyDebts               String?
    unregisteredRecords         String?
    hasHabiteSe                 Boolean?
    zoningRestrictions          String?
    // Máquinas e Equipamentos
    serialNumber                String?
    hoursUsed                   Int?
    engineType                  String?
    capacityOrPower             String?
    maintenanceHistory          String?
    installationLocation        String?
    compliesWithNR              String?
    operatingLicenses           String?
    // Semoventes (Livestock)
    breed                       String?
    age                         String?
    sex                         String?
    weight                      String?
    individualId                String?
    purpose                     String?
    sanitaryCondition           String?
    vaccinationStatus           String?
    lineage                     String?
    isPregnant                  Boolean?
    specialSkills               String?
    gtaDocument                 String?
    breedRegistryDocument       String?
    // Eletrônicos
    brand                       String?
    itemCondition               String?
    specifications              String?
    includedAccessories         String?
    batteryCondition            String?
    hasInvoice                  Boolean?
    hasWarranty                 Boolean?
    repairHistory               String?
    // Eletrodomésticos
    applianceCapacity           String?
    voltage                     String?
    applianceType               String?
    additionalFunctions         String?
    // Móveis
    furnitureType               String?
    material                    String?
    style                       String?
    dimensions                  String?
    pieceCount                  Int?
    // Joias
    jewelryType                 String?
    metal                       String?
    gemstones                   String?
    totalWeight                 String?
    jewelrySize                 String?
    authenticityCertificate     String?
    // Obras de Arte e Antiguidades
    workType                    String?
    artist                      String?
    period                      String?
    technique                   String?
    provenance                  String?
    // Embarcações
    boatType                    String?
    boatLength                  String?
    hullMaterial                String?
    onboardEquipment            String?
    // Alimentos
    productName                 String?
    quantity                    String?
    packagingType               String?
    expirationDate              DateTime?
    storageConditions           String?
    // Metais Preciosos e Pedras
    preciousMetalType           String?
    purity                      String?
    // Bens Florestais
    forestGoodsType             String?
    volumeOrQuantity            String?
    species                     String?
    dofNumber                   String?
    
    category                    LotCategory       @relation(fields: [categoryId], references: [id])
    subcategory                 Subcategory?      @relation(fields: [subcategoryId], references: [id])
    judicialProcess             JudicialProcess?  @relation(fields: [judicialProcessId], references: [id])
    seller                      Seller?           @relation(fields: [sellerId], references: [id])

    createdAt                   DateTime          @default(now())
    updatedAt                   DateTime          @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BlogPost {
  id          String    @id @default(uuid())
  title       String
  content     String
  authorId    String
  publishedAt DateTime?
  tags        String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String
  isRead    Boolean  @default(false)
  
  createdAt DateTime @default(now())
}

model PlatformSettings {
  id                      String    @id @default("global")
  siteTitle               String?
  siteTagline             String?
  galleryImageBasePath    String?
  storageProvider         String?   @default("local")
  firebaseStorageBucket   String?
  activeThemeName         String?
  themes                  Json[]
  platformPublicIdMasks   Json?
  homepageSections        Json[]
  mentalTriggerSettings   Json?
  sectionBadgeVisibility  Json?
  mapSettings             Json?
  searchPaginationType    String?
  searchItemsPerPage      Int?
  searchLoadMoreCount     Int?
  showCountdownOnLotDetail Boolean?
  showCountdownOnCards    Boolean?
  showRelatedLotsOnLotDetail Boolean?
  relatedLotsCount        Int?
  variableIncrementTable  Json[] @default([])
  biddingSettings         Json?
  defaultListItemsPerPage Int? @default(10)

  updatedAt DateTime @updatedAt
}
