// Este arquivo contém o cabeçalho do schema Prisma.
// É usado pelo script 'build-prisma-schema.ts' para gerar o schema.prisma final.
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}


model Auction {
  id                            String                @id @default(cuid())
  publicId                      String?               @unique
  slug                          String?               @unique
  title                         String
  description                   String?               @db.Text
  status                        AuctionStatus         @default(RASCUNHO)
  auctionDate                   DateTime?             @default(now())
  endDate                       DateTime?
  totalLots                     Int                   @default(0)
  visits                        Int                   @default(0)
  initialOffer                  Decimal?
  isFeaturedOnMarketplace       Boolean               @default(false)
  marketplaceAnnouncementTitle  String?               @db.Text
  totalHabilitatedUsers         Int?                  @default(0)
  isFavorite                    Boolean?              @default(false)
  dataAiHint                    String?
  documentsUrl                  String?               @db.Text
  evaluationReportUrl           String?               @db.Text
  auctionCertificateUrl         String?               @db.Text
  sellingBranch                 String?               @db.Text
  automaticBiddingEnabled       Boolean               @default(false)
  silentBiddingEnabled          Boolean               @default(false)
  allowMultipleBidsPerUser      Boolean               @default(true)
  allowInstallmentBids          Boolean               @default(true)
  softCloseEnabled              Boolean               @default(false)
  softCloseMinutes              Int                   @default(2)
  estimatedRevenue              Decimal?
  achievedRevenue               Decimal?
  additionalTriggers            Json?
  decrementAmount               Decimal?
  decrementIntervalSeconds      Int?
  floorPrice                    Decimal?
  createdAt                     DateTime              @default(now())
  updatedAt                     DateTime              @updatedAt
  lots                          Lot[]
  auctioneer                    Auctioneer?           @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  auctioneerId                  String?
  seller                        Seller?               @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId                      String?
  category                      LotCategory?          @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId                    String?
  tenant                        Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId                      String
  city                          City?                 @relation(fields: [cityId], references: [id], onDelete: SetNull)
  cityId                        String?
  state                         State?                @relation(fields: [stateId], references: [id], onDelete: SetNull)
  stateId                       String?
  zipCode                       String?
  latitude                      Float?
  longitude                     Float?
  onlineUrl                     String?               @db.Text
  address                       String?               @db.Text
  auctionType                   AuctionType?
  auctionMethod                 AuctionMethod?        @default(STANDARD)
  participation                 AuctionParticipation? @default(ONLINE)
  stages                        AuctionStage[]
  judicialProcessId             String?
  judicialProcess               JudicialProcess?      @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  habilitations                 AuctionHabilitation[]
  reviews                       Review[]
  questions                     LotQuestion[]
  courtId                       String?
  court                         Court?                @relation(map: "CourtAuctions", fields: [courtId], references: [id], onDelete: SetNull)
  districtId                    String?
  district                      JudicialDistrict?     @relation(map: "DistrictAuctions", fields: [districtId], references: [id], onDelete: SetNull)
  branchId                      String?
  branch                        JudicialBranch?       @relation(map: "BranchAuctions", fields: [branchId], references: [id], onDelete: SetNull)
  bids                          Bid[]
}

model AuctionHabilitation {
  userId      String
  auctionId   String
  habilitatedAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@id([userId, auctionId])
  @@index([auctionId])
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

model AuctionStage {
  id           String   @id @default(cuid())
  name         String
  startDate    DateTime @db.DateTime(0)
  endDate      DateTime @db.DateTime(0)
  initialPrice Decimal? @db.Decimal(15, 2)
  auctionId    String

  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@index([auctionId])
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}


model Auctioneer {
  id                   String    @id @default(cuid())
  publicId             String    @unique
  slug                 String    @unique
  name                 String
  registrationNumber   String?   @db.Text
  contactName          String?   @db.Text
  email                String?   @db.Text
  phone                String?   @db.Text
  address              String?   @db.Text
  city                 String?   @db.Text
  state                String?   @db.Text
  zipCode              String?   @db.Text
  website              String?   @db.Text
  logoUrl              String?   @db.Text
  logoMediaId          String?
  dataAiHintLogo       String?   @db.Text
  description          String?   @db.Text
  userId               String?   @unique
  user                 User?     @relation("UserAuctioneer", fields: [userId], references: [id], onDelete: SetNull)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  auctions             Auction[]
  lots                 Lot[]
  // Multi-Tenant
  tenant               Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId             String
}


model Bem {
  id                        String              @id @default(cuid())
  publicId                  String              @unique
  title                     String
  description               String?             @db.Text
  status                    BemStatus           @default(DISPONIVEL)
  evaluationValue           Decimal?            @db.Decimal(15, 2)
  imageUrl                  String?             @db.Text
  imageMediaId              String?
  galleryImageUrls          Json?
  mediaItemIds              Json?
  dataAiHint                String?             @db.Text
  locationCity              String?             @db.Text
  locationState             String?             @db.Text
  address                   String?             @db.Text
  latitude                  Float?
  longitude                 Float?
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  // Relacionamentos
  categoryId                String
  category                  LotCategory         @relation(fields: [categoryId], references: [id])
  subcategoryId             String?
  subcategory               Subcategory?        @relation(fields: [subcategoryId], references: [id])
  judicialProcessId         String?
  judicialProcess           JudicialProcess?    @relation(fields: [judicialProcessId], references: [id])
  sellerId                  String?
  seller                    Seller?             @relation(fields: [sellerId], references: [id])
  tenant                    Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId                  String
  lots                      LotBens[]
  // Vehicle specific
  plate                     String?             @db.Text
  make                      String?             @db.Text
  model                     String?             @db.Text
  version                   String?             @db.Text
  year                      Int?
  modelYear                 Int?
  mileage                   Int?
  color                     String?             @db.Text
  fuelType                  String?             @db.Text
  transmissionType          String?             @db.Text
  bodyType                  String?             @db.Text
  vin                       String?             @db.Text
  renavam                   String?             @db.Text
  enginePower               String?             @db.Text
  numberOfDoors             Int?
  vehicleOptions            String?             @db.Text
  detranStatus              String?             @db.Text
  debts                     String?             @db.Text
  runningCondition          String?             @db.Text
  bodyCondition             String?             @db.Text
  tiresCondition            String?             @db.Text
  hasKey                    Boolean?
  // Imóveis
  propertyRegistrationNumber String?             @db.Text
  iptuNumber                String?             @db.Text
  isOccupied                Boolean?
  totalArea                 Decimal?
  builtArea                 Decimal?
  bedrooms                  Int?
  suites                    Int?
  bathrooms                 Int?
  parkingSpaces             Int?
  constructionType          String?             @db.Text
  finishes                  String?             @db.Text
  infrastructure            String?             @db.Text
  condoDetails              String?             @db.Text
  improvements              String?             @db.Text
  topography                String?             @db.Text
  liensAndEncumbrances      String?             @db.Text
  propertyDebts             String?             @db.Text
  unregisteredRecords       String?             @db.Text
  hasHabiteSe               Boolean?
  zoningRestrictions        String?             @db.Text
  amenities                 Json?
  // Eletrônicos
  brand                     String?             @db.Text
  serialNumber              String?             @db.Text
  itemCondition             String?             @db.Text
  specifications            String?             @db.Text
  includedAccessories       String?             @db.Text
  batteryCondition          String?             @db.Text
  hasInvoice                Boolean?
  hasWarranty               Boolean?
  repairHistory             String?             @db.Text
  // Eletrodomésticos
  applianceCapacity         String?             @db.Text
  voltage                   String?             @db.Text
  applianceType             String?             @db.Text
  additionalFunctions       String?
  // Máquinas e Equipamentos
  hoursUsed                 Int?
  engineType                String?             @db.Text
  capacityOrPower           String?             @db.Text
  maintenanceHistory        String?             @db.Text
  installationLocation      String?             @db.Text
  compliesWithNR            String?             @db.Text
  operatingLicenses         String?             @db.Text
  // Semoventes (Livestock)
  breed                     String?             @db.Text
  age                       String?             @db.Text
  sex                       String?             @db.Text // Tornando string para 'Macho'/'Fêmea'
  weight                    String?             @db.Text
  individualId              String?             @db.Text
  purpose                   String?             @db.Text
  sanitaryCondition         String?             @db.Text
  vaccinationStatus         String?             @db.Text
  lineage                   String?             @db.Text
  isPregnant                Boolean?
  specialSkills             String?             @db.Text
  gtaDocument               String?             @db.Text
  breedRegistryDocument     String?             @db.Text
  // Móveis
  furnitureType             String?             @db.Text
  material                  String?             @db.Text
  style                     String?             @db.Text
  dimensions                String?             @db.Text
  pieceCount                Int?
  // Joias
  jewelryType               String?             @db.Text
  metal                     String?             @db.Text
  gemstones                 String?             @db.Text
  totalWeight               String?             @db.Text
  jewelrySize               String?             @db.Text
  authenticityCertificate   String?             @db.Text
  // Obras de Arte e Antiguidades
  workType                  String?             @db.Text
  artist                    String?             @db.Text
  period                    String?             @db.Text
  technique                 String?             @db.Text
  provenance                String?             @db.Text
  // Embarcações
  boatType                  String?             @db.Text
  boatLength                String?             @db.Text
  hullMaterial              String?             @db.Text
  onboardEquipment          String?             @db.Text
  // Alimentos
  productName               String?             @db.Text
  quantity                  String?             @db.Text
  packagingType             String?             @db.Text
  expirationDate            DateTime?
  storageConditions         String?             @db.Text
  // Metais Preciosos e Pedras
  preciousMetalType         String?             @db.Text
  purity                    String?             @db.Text
  // Bens Florestais
  forestGoodsType           String?             @db.Text
  volumeOrQuantity          String?             @db.Text
  species                   String?             @db.Text
  dofNumber                 String?             @db.Text
}

/// Status de um bem individual.
enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

/// Representa um lance feito por um usuário em um lote.
model Bid {
  id            String   @id @default(uuid())
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
  bidderDisplay String?

  // Relações
  lot       Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId String
  bidder    User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId  String

  // Multi-Tenant
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId String
}

model City {
  id        String    @id @default(cuid())
  name      String
  slug      String?
  ibgeCode  String?   @unique
  lotCount  Int?      @default(0)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  state     State     @relation(fields: [stateId], references: [id])
  stateId   String
  lots      Lot[]
  auctions  Auction[]
}

model ContactMessage {
  id      String   @id @default(cuid())
  name    String
  email   String
  subject String?
  message String   @db.Text
  isRead  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Court {
  id                String              @id @default(cuid())
  name              String
  slug              String?
  stateUf           String?
  website           String?
  createdAt         DateTime?           @default(now())
  updatedAt         DateTime?           @updatedAt
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]           @relation(map: "CourtAuctions")
}

/// @Model {label: "Fonte de Dados de Relatório", icon: "database"}
model DataSource {
  id        String @id @default(cuid())
  name      String
  modelName String @unique
  fields    Json

  @@map("data_sources")
}


model DirectSaleOffer {
  id                   String                @id @default(cuid())
  publicId             String                @unique
  title                String
  description          String?               @db.Text
  offerType            DirectSaleOfferType
  price                Decimal?              @db.Decimal(15, 2)
  minimumOfferPrice    Decimal?              @db.Decimal(15, 2)
  status               DirectSaleOfferStatus @default(ACTIVE)
  sellerId             String
  seller               Seller                @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerName           String?
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  categoryId           String
  category             LotCategory           @relation(fields: [categoryId], references: [id])
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int                   @default(0)
  expiresAt            DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  tenant               Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId             String
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

model DocumentTemplate {
  id      String   @id @default(cuid())
  name    String
  type    DocumentTemplateType
  content String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

model DocumentType {
  id              String         @id @default(cuid())
  name            String
  description     String?
  isRequired      Boolean        @default(true)
  appliesTo       String // e.g., 'PHYSICAL,LEGAL'
  userDocuments   UserDocument[]
}

model InstallmentPayment {
  id                String        @id @default(cuid())
  userWinId         String
  installmentNumber Int
  amount            Decimal       @db.Decimal(15, 2)
  dueDate           DateTime
  status            PaymentStatus @default(PENDENTE)
  paymentDate       DateTime?
  paymentMethod     String?
  transactionId     String?
  userWin           UserWin       @relation(fields: [userWinId], references: [id], onDelete: Cascade)

  @@unique([userWinId, installmentNumber])
  @@index([userWinId])
}

model JudicialBranch {
  id                String              @id @default(cuid())
  name              String
  slug              String?             @unique
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime?           @default(now())
  updatedAt         DateTime?           @updatedAt
  district          JudicialDistrict?   @relation(fields: [districtId], references: [id])
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
  auctions          Auction[]           @relation(map: "BranchAuctions")
}

model JudicialDistrict {
  id                String            @id @default(cuid())
  name              String
  slug              String?           @unique
  courtId           String?
  stateId           String?
  zipCode           String?
  createdAt         DateTime?         @default(now())
  updatedAt         DateTime?         @updatedAt
  court             Court?            @relation(fields: [courtId], references: [id])
  state             State?            @relation(fields: [stateId], references: [id])
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]         @relation(map: "DistrictAuctions")
}

model JudicialParty {
  id             String           @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType

  process JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@index([processId])
}


model JudicialProcess {
  id                String  @id @default(cuid())
  publicId          String  @unique
  processNumber     String
  isElectronic      Boolean @default(true)
  courtId           String?
  districtId        String?
  branchId          String?
  sellerId          String?
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt
  tenantId          String
  bens              Bem[]
  auctions          Auction[] @relation(map: "AuctionToJudicialProcess")

  // Relations
  court             Court?            @relation(fields: [courtId], references: [id])
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch            JudicialBranch?   @relation(fields: [branchId], references: [id])
  seller            Seller?           @relation(fields: [sellerId], references: [id])
  tenant            Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  parties           JudicialParty[] // Back-relation added here
}


model Lot {
  id                        String              @id @default(cuid())
  publicId                  String              @unique
  slug                      String              @unique
  number                    String?
  title                     String
  description               String?             @db.Text
  price                     Decimal             @db.Decimal(15, 2)
  initialPrice              Decimal?            @db.Decimal(15, 2)
  secondInitialPrice        Decimal?            @db.Decimal(15, 2)
  bidIncrementStep          Decimal?            @db.Decimal(10, 2)
  status                    LotStatus           @default(EM_BREVE)
  bidsCount                 Int?                @default(0)
  views                     Int?                @default(0)
  isFeatured                Boolean?            @default(false)
  isExclusive               Boolean?            @default(false)
  discountPercentage        Int?
  additionalTriggers        Json?
  imageUrl                  String?             @db.Text
  imageMediaId              String?
  galleryImageUrls          Json?
  mediaItemIds              Json?
  dataAiHint                String?
  winnerId                  String?
  winner                    User?               @relation("UserWins", fields: [winnerId], references: [id], onDelete: SetNull)
  winningBidTermUrl         String?             @db.Text
  allowInstallmentBids      Boolean?            @default(false)
  endDate                   DateTime?
  auctionDate               DateTime?
  lotSpecificAuctionDate    DateTime?
  secondAuctionDate         DateTime?
  condition                 String?             @db.Text
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  // Relacionamentos
  auction                   Auction             @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                 String
  type                      String
  categoryId                String?
  category                  LotCategory?        @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategoryId             String?
  subcategory               Subcategory?        @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  sellerId                  String?
  seller                    Seller?             @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  auctioneerId              String?
  auctioneer                Auctioneer?         @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  cityId                    String?
  city                      City?               @relation(fields: [cityId], references: [id], onDelete: SetNull)
  stateId                   String?
  state                     State?              @relation(fields: [stateId], references: [id], onDelete: SetNull)
  cityName                  String?             @db.Text
  stateUf                   String?             @db.Text
  latitude                  Float?
  longitude                 Float?
  mapAddress                String?             @db.Text
  mapEmbedUrl               String?             @db.Text
  mapStaticImageUrl         String?             @db.Text
  bens                      LotBens[]
  bids                      Bid[]
  userWins                  UserWin[]
  userMaxBids               UserLotMaxBid[]
  reviews                   Review[]
  questions                 LotQuestion[]
  inheritedMediaFromBemId   String?
  // Relist info
  isRelisted                Boolean             @default(false)
  relistCount               Int                 @default(0)
  originalLotId             String?
  originalLot               Lot?                @relation("RelistHistory", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLots              Lot[]               @relation("RelistHistory")
  // Multi-tenancy
  tenant                    Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId                  String
  stageDetails              Json?

  @@unique([auctionId, number])
  @@index([slug])
}

model LotBens {
  lotId String
  bemId String

  lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bem Bem @relation(fields: [bemId], references: [id], onDelete: Cascade)

  @@id([lotId, bemId])
  @@index([bemId])
}

model LotCategory {
  id                   String            @id @default(cuid())
  name                 String
  slug                 String            @unique
  description          String?
  hasSubcategories     Boolean
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  auctions             Auction[]
  bens                 Bem[]
  lots                 Lot[]
  subcategories        Subcategory[]
  DirectSaleOffer      DirectSaleOffer[]
}


model LotQuestion {
  id                      String    @id @default(cuid())
  lot                     Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId                   String
  auction                 Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId               String
  user                    User      @relation(fields: [userId], references: [id])
  userId                  String
  userDisplayName         String
  questionText            String    @db.Text
  answerText              String?   @db.Text
  answeredByUserId        String?
  answeredByUserDisplayName String?
  answeredAt              DateTime?
  isPublic                Boolean   @default(true)
  createdAt               DateTime  @default(now())

  @@index([lotId])
  @@index([userId])
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
  RETIRADO
}

model MediaItem {
  id               String    @id @default(cuid())
  fileName         String
  storagePath      String
  title            String?
  altText          String?
  caption          String?
  description      String?   @db.Text
  mimeType         String
  sizeBytes        Int?
  urlOriginal      String
  urlThumbnail     String?
  urlMedium        String?
  urlLarge         String?
  linkedLotIds     Json?
  judicialProcessId String?
  dataAiHint       String?
  uploadedAt       DateTime  @default(now())
  uploadedByUserId String?   // Made optional to work with onDelete: SetNull
  uploadedBy       User?     @relation(fields: [uploadedByUserId], references: [id], onDelete: SetNull)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  tenantId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

model PlatformSettings {
  id                           String               @id @default("global")
  siteTitle                    String?
  siteTagline                  String?
  logoUrl                      String?
  faviconUrl                   String?
  galleryImageBasePath         String?
  storageProvider              String?
  firebaseStorageBucket        String?
  activeThemeName              String?
  themes                       Json?
  platformPublicIdMasks        Json?
  homepageSections             Json?
  mentalTriggerSettings        Json?
  sectionBadgeVisibility       Json?
  mapSettings                  Json?
  searchPaginationType         SearchPaginationType @default(loadMore)
  searchItemsPerPage           Int                  @default(12)
  searchLoadMoreCount          Int                  @default(12)
  showCountdownOnLotDetail     Boolean              @default(true)
  showCountdownOnCards         Boolean              @default(true)
  showRelatedLotsOnLotDetail   Boolean              @default(true)
  relatedLotsCount             Int                  @default(5)
  defaultUrgencyTimerHours     Int?
  variableIncrementTable       Json?
  biddingSettings              Json?
  paymentGatewaySettings       Json?
  defaultListItemsPerPage      Int                  @default(10)
  updatedAt                    DateTime?            @updatedAt
  tenantId                     String               @unique
  tenant                       Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String?
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([lotId])
}

model Role {
  id            String         @id @default(cuid())
  name          String         @unique
  nameNormalized String        @unique
  description   String?
  permissions   Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  users         UsersOnRoles[]
}

enum SearchPaginationType {
  loadMore
  numberedPages
}


model Seller {
  id                   String              @id @default(cuid())
  publicId             String              @unique
  slug                 String              @unique
  name                 String              @unique
  contactName          String?             @db.Text
  email                String?             @db.Text
  phone                String?             @db.Text
  address              String?             @db.Text
  city                 String?             @db.Text
  state                String?             @db.Text
  zipCode              String?             @db.Text
  website              String?             @db.Text
  logoUrl              String?             @db.Text
  logoMediaId          String?
  dataAiHintLogo       String?             @db.Text
  description          String?             @db.Text
  userId               String?             @unique
  user                 User?               @relation("UserSeller", fields: [userId], references: [id], onDelete: SetNull)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  isJudicial           Boolean             @default(false)
  judicialBranchId     String?             @unique
  judicialBranch       JudicialBranch?     @relation(fields: [judicialBranchId], references: [id])
  // Relacionamentos
  auctions             Auction[]
  lots                 Lot[]
  bens                 Bem[]
  directSaleOffers     DirectSaleOffer[]
  judicialProcesses    JudicialProcess[]
  // Multi-Tenant
  tenant               Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId             String
}

model State {
  id                String             @id @default(cuid())
  name              String
  uf                String             @unique
  slug              String?            @unique
  cityCount         Int?               @default(0)
  createdAt         DateTime?          @default(now())
  updatedAt         DateTime?          @updatedAt
  cities            City[]
  judicialDistricts JudicialDistrict[]
  auctions          Auction[]
  lots              Lot[]
}

model Subcategory {
  id                 String      @id @default(cuid())
  name               String
  slug               String
  parentCategoryId   String
  description        String?
  displayOrder       Int         @default(0)
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots               Lot[]
  bens               Bem[]
}

/// Define um Tenant (inquilino) na plataforma. Cada Tenant representa um leiloeiro ou cliente.
model Tenant {
  id        String   @id @default(uuid())
  name      String
  subdomain String   @unique
  domain    String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações inversas
  users             UsersOnTenants[]
  auctions          Auction[]
  lots              Lot[]
  bens              Bem[]
  sellers           Seller[]
  auctioneers       Auctioneer[]
  judicialProcesses JudicialProcess[]
  directSaleOffers  DirectSaleOffer[]
  notifications     Notification[]
  bids              Bid[]
  reports           Report[]
  platformSettings  PlatformSettings?
}

model User {
  id                      String                @id @default(cuid())
  email                   String                @unique
  password                String?               @db.Text
  fullName                String?               @db.Text
  habilitationStatus      UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType             AccountType           @default(PHYSICAL)
  avatarUrl               String?               @db.Text
  dataAiHint              String?               @db.Text
  badges                  Json?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  cpf                     String?               @db.Text
  rgNumber                String?               @db.Text
  rgIssuer                String?               @db.Text
  rgIssueDate             DateTime?
  rgState                 String?               @db.Text
  dateOfBirth             DateTime?
  cellPhone               String?               @db.Text
  homePhone               String?               @db.Text
  gender                  String?               @db.Text
  profession              String?               @db.Text
  nationality             String?               @db.Text
  maritalStatus           String?               @db.Text
  propertyRegime          String?               @db.Text
  spouseName              String?               @db.Text
  spouseCpf               String?               @db.Text
  zipCode                 String?               @db.Text
  street                  String?               @db.Text
  number                  String?               @db.Text
  complement              String?               @db.Text
  neighborhood            String?               @db.Text
  city                    String?               @db.Text
  state                   String?               @db.Text
  optInMarketing          Boolean?              @default(false)
  razaoSocial             String?               @db.Text
  cnpj                    String?               @db.Text
  inscricaoEstadual       String?               @db.Text
  website                 String?               @db.Text
  responsibleName         String?               @db.Text
  responsibleCpf          String?               @db.Text

  // Relations
  notifications           Notification[]
  mediaItems              MediaItem[]
  documents               UserDocument[]
  bids                    Bid[]
  maxBids                 UserLotMaxBid[]
  sellerProfile           Seller?               @relation("UserSeller")
  auctioneerProfile       Auctioneer?           @relation("UserAuctioneer")
  roles                   UsersOnRoles[]
  tenants                 UsersOnTenants[]
  wins                    UserWin[]
  lotsWon                 Lot[]                 @relation("UserWins")
  auctionHabilitations    AuctionHabilitation[]
  lotQuestions            LotQuestion[]
  reviews                 Review[]
}

model UserDocument {
  id              String             @id @default(cuid())
  userId          String
  documentTypeId  String
  status          UserDocumentStatus @default(PENDING_ANALYSIS)
  fileUrl         String
  fileName        String?
  rejectionReason String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType DocumentType @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
  @@index([userId])
}


enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  REJEITADO
  BLOCKED
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
  @@index([lotId])
}

model UserWin {
  id                String               @id @default(cuid())
  lotId             String               @unique
  userId            String
  winningBidAmount  Decimal              @db.Decimal(15, 2)
  winDate           DateTime             @default(now())
  paymentStatus     PaymentStatus        @default(PENDENTE)
  invoiceUrl        String?
  installments      InstallmentPayment[]
  lot               Lot                  @relation(fields: [lotId], references: [id])
  user              User                 @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UsersOnRoles {
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([roleId])
}

model UsersOnTenants {
  userId     String
  tenantId   String
  assignedAt DateTime @default(now())
  assignedBy String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@id([userId, tenantId])
  @@index([tenantId])
}

model VehicleMake {
  id     String         @id @default(cuid())
  name   String         @unique
  slug   String         @unique
  models VehicleModel[]
}

model VehicleModel {
  id     String      @id @default(cuid())
  name   String
  slug   String
  makeId String
  make   VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)

  @@unique([makeId, name])
  @@index([slug])
}

// prisma/models/lot.prisma
model Lot {
  id              String   @id @default(cuid())
  publicId        String   @unique @default(uuid())
  number          String?
  title           String
  description     String?  @db.Text
  status          String   @default("EM_BREVE")
  auctionId       String
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  price           Decimal  @db.Decimal(15, 2)
  initialPrice    Decimal? @db.Decimal(15, 2)
  evaluationValue Decimal? @db.Decimal(15, 2)

  views     Int  @default(0)
  bidsCount Int  @default(0)
  bids      Bid[]

  isFeatured  Boolean @default(false)
  isExclusive Boolean @default(false)

  imageUrl       String?
  imageMediaId   String?
  galleryImageUrls Json?
  mediaItemIds   Json?

  categoryId    String?
  category      LotCategory?  @relation(fields: [categoryId], references: [id])
  subcategoryId String?
  subcategory   Subcategory?  @relation(fields: [subcategoryId], references: [id])
  type          String // Denormalized from category for easier filtering

  sellerId    String?
  seller      Seller?       @relation(fields: [sellerId], references: [id])
  auctioneerId String?
  auctioneer  Auctioneer?   @relation(fields: [auctioneerId], references: [id])
  
  // Location
  cityName      String?
  stateUf       String?
  cityId        String?
  stateId       String?
  latitude      Decimal? @db.Decimal(10, 8)
  longitude     Decimal? @db.Decimal(11, 8)
  mapAddress    String?

  endDate     DateTime?
  auctionDate DateTime?

  // Lógica de Praças/Etapas
  stageDetails Json? @default("[]")

  // Relist Logic
  originalLotId String?
  isRelisted    Boolean @default(false)
  relistCount   Int     @default(0)

  // Winner Info
  winnerId          String?
  winner            User?             @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  winningBidTermUrl String?
  wins              UserWin[]

  // Auditing
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  bens LotBens[]
  
  inheritedMediaFromBemId String?

  @@index([auctionId])
  @@index([winnerId])
  @@index([sellerId])
  @@index([status])
  @@index([tenantId])
}


/// @model
/// @description Armazena tokens temporários para redefinição de senha.
model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
}


model Report {
  id          String   @id @default(uuid())
  name        String
  description String?
  definition  Json
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("reports")
}
