// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}


// =============================================
//               ENUMS
// =============================================
enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  PENDING_APPROVAL
  ACTIVE
  SOLD
  EXPIRED
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

// =============================================
//               Core Models
// =============================================

model User {
  id                    String                   @id @default(cuid())
  email                 String                   @unique
  fullName              String?
  password              String?
  accountType           AccountType              @default(PHYSICAL)
  habilitationStatus    UserHabilitationStatus   @default(PENDING_DOCUMENTS)
  cpf                   String?                  @unique
  rgNumber              String?
  rgIssuer              String?
  rgIssueDate           DateTime?
  rgState               String?
  dateOfBirth           DateTime?
  cellPhone             String?
  homePhone             String?
  gender                String?
  profession            String?
  nationality           String?
  maritalStatus         String?
  propertyRegime        String?
  spouseName            String?
  spouseCpf             String?
  zipCode               String?
  street                String?
  number                String?
  complement            String?
  neighborhood          String?
  city                  String?
  state                 String?
  status                String?                  @default("ATIVO")
  optInMarketing        Boolean                  @default(false)
  avatarUrl             String?
  dataAiHint            String?
  activeBids            Int?                     @default(0)
  auctionsWon           Int?                     @default(0)
  itemsSold             Int?                     @default(0)
  badges                Json?                    @default("[]")
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt

  // Relationships
  roleId                String?
  role                  Role?                    @relation(fields: [roleId], references: [id])
  sellerId              String?                  @unique
  sellerProfile         Seller?                  @relation("UserToSeller")
  auctioneerProfileId   String?                  @unique
  auctioneerProfile     Auctioneer?              @relation("UserToAuctioneer")
  documents             UserDocument[]
  mediaItems            MediaItem[]
  bids                  Bid[]
  wins                  UserWin[]
  questions             LotQuestion[]
  reviews               Review[]
  notifications         Notification[]
  maxBids               UserLotMaxBid[]
}

model Role {
  id              String         @id @default(cuid())
  name            String
  name_normalized String         @unique
  description     String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relationships
  users           User[]
  permissions     Permission[]   @relation("RoleToPermission")
}

model Permission {
  id              String         @id @default(cuid())
  name            String         @unique
  description     String?

  // Relationships
  roles           Role[]         @relation("RoleToPermission")
}

model DocumentType {
  id             String         @id @default(cuid())
  name           String
  description    String?
  isRequired     Boolean        @default(true)
  appliesTo      String? // Comma-separated AccountType values
  allowedFormats String? // Comma-separated file extensions
  displayOrder   Int            @default(0)

  // Relationships
  userDocuments  UserDocument[]
}

model UserDocument {
  id                String             @id @default(cuid())
  fileUrl           String?
  fileName          String?
  status            UserDocumentStatus @default(NOT_SENT)
  uploadDate        DateTime?
  analysisDate      DateTime?
  analystId         String?
  rejectionReason   String?

  // Relationships
  documentTypeId    String
  documentType      DocumentType       @relation(fields: [documentTypeId], references: [id])
  userId            String
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@unique([userId, documentTypeId])
}


model Auction {
  id                            String        @id @default(cuid())
  publicId                      String        @unique
  title                         String        @db.VarChar(200)
  fullTitle                     String?       @db.VarChar(300)
  description                   String?       @db.Text
  status                        AuctionStatus
  auctionType                   String?
  auctionDate                   DateTime
  endDate                       DateTime?
  isFeaturedOnMarketplace       Boolean?      @default(false)
  marketplaceAnnouncementTitle  String?       @db.VarChar(150)
  auctionStages                 Json?
  automaticBiddingEnabled       Boolean?      @default(false)
  silentBiddingEnabled          Boolean?      @default(false)
  allowMultipleBidsPerUser      Boolean?      @default(true)
  allowInstallmentBids          Boolean?      @default(false)
  softCloseEnabled              Boolean?      @default(false)
  softCloseMinutes              Int?          @default(2)
  estimatedRevenue              Float?
  achievedRevenue               Float?
  totalHabilitatedUsers         Int?          @default(0)
  decrementAmount               Float?
  decrementIntervalSeconds      Int?
  floorPrice                    Float?
  city                          String?
  state                         String?
  imageUrl                      String?       @db.VarChar(1024)
  documentsUrl                  String?       @db.VarChar(1024)
  evaluationReportUrl           String?       @db.VarChar(1024)
  auctionCertificateUrl         String?       @db.VarChar(1024)
  sellingBranch                 String?
  dataAiHint                    String?
  visits                        Int?          @default(0)
  initialOffer                  Float?        @default(0)
  bidsCount                     Int?          @default(0)
  totalLots                     Int?          @default(0)
  createdAt                     DateTime      @default(now())
  updatedAt                     DateTime      @updatedAt

  // Relationships
  categoryId        String
  auctioneerId      String
  sellerId          String?
  imageMediaId      String?           @unique
  judicialProcessId String?

  category          LotCategory       @relation(fields: [categoryId], references: [id])
  auctioneer        Auctioneer        @relation(fields: [auctioneerId], references: [id])
  seller            Seller?           @relation(fields: [sellerId], references: [id])
  judicialProcess   JudicialProcess?  @relation(fields: [judicialProcessId], references: [id])
  image             MediaItem?        @relation("AuctionImage", fields: [imageMediaId], references: [id])
  lots              Lot[]
  bids              Bid[]

  @@index([categoryId])
  @@index([auctioneerId])
  @@index([sellerId])
  @@index([status])
}

model Lot {
  id                          String      @id @default(cuid())
  publicId                    String      @unique
  number                      String?
  title                       String
  description                 String?     @db.Text
  price                       Float
  initialPrice                Float?
  secondInitialPrice          Float?
  bidIncrementStep            Float?
  status                      LotStatus
  isFeatured                  Boolean?    @default(false)
  isExclusive                 Boolean?    @default(false)
  discountPercentage          Float?
  additionalTriggers          Json?       @default("[]")
  views                       Int?        @default(0)
  bidsCount                   Int?        @default(0)
  latitude                    Float?
  longitude                   Float?
  mapAddress                  String?
  mapEmbedUrl                 String?     @db.VarChar(1024)
  mapStaticImageUrl           String?     @db.VarChar(1024)
  judicialProcessNumber       String?
  courtDistrict               String?
  courtName                   String?
  publicProcessUrl            String?     @db.VarChar(1024)
  propertyRegistrationNumber  String?
  propertyLiens               String?     @db.Text
  knownDebts                  String?     @db.Text
  additionalDocumentsInfo     String?     @db.Text
  reservePrice                Float?
  evaluationValue             Float?
  debtAmount                  Float?
  itbiValue                   Float?
  endDate                     DateTime?
  lotSpecificAuctionDate      DateTime?
  secondAuctionDate           DateTime?
  condition                   String?
  dataAiHint                  String?
  imageUrl                    String?     @db.VarChar(1024)
  galleryImageUrls            Json?       @default("[]")

  // Vehicle specific
  year                        Int?
  make                        String?
  model                       String?
  series                      String?
  stockNumber                 String?
  sellingBranch               String?
  vin                         String?
  vinStatus                   String?
  lossType                    String?
  primaryDamage               String?
  titleInfo                   String?
  titleBrand                  String?
  startCode                   String?
  hasKey                      Boolean?
  odometer                    String?
  airbagsStatus               String?
  bodyStyle                   String?
  engineDetails               String?
  transmissionType            String?
  driveLineType               String?
  fuelType                    String?
  cylinders                   String?
  restraintSystem             String?
  exteriorInteriorColor       String?
  options                     String?
  manufacturedIn              String?
  vehicleClass                String?
  vehicleLocationInBranch     String?
  laneRunNumber               String?
  aisleStall                  String?
  actualCashValue             String?
  estimatedRepairCost         String?
  
  createdAt                   DateTime    @default(now())
  updatedAt                   DateTime    @updatedAt
  
  // Relationships
  auctionId     String
  categoryId    String
  subcategoryId String?
  stateId       String?
  cityId        String?
  imageMediaId  String?          @unique

  auction       Auction          @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category      LotCategory      @relation(fields: [categoryId], references: [id])
  subcategory   Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  state         StateInfo?       @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city          CityInfo?        @relation(fields: [cityId], references: [id], onDelete: SetNull)
  image         MediaItem?       @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  bids          Bid[]
  wins          UserWin[]
  reviews       Review[]
  questions     LotQuestion[]
  maxBids       UserLotMaxBid[]
  lotsOnBem     LotOnBem[]

  @@index([auctionId])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([status])
}

model Auctioneer {
  id                       String     @id @default(cuid())
  publicId                 String     @unique
  name                     String
  slug                     String     @unique
  registrationNumber       String?
  contactName              String?
  email                    String?    @unique
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  description              String?    @db.Text
  memberSince              DateTime?
  rating                   Float?
  auctionsConductedCount   Int?       @default(0)
  totalValueSold           Float?     @default(0)
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt

  // Relationships
  userId                   String?    @unique
  user                     User?      @relation("UserToAuctioneer", fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  logoMediaId              String?    @unique
  logo                     MediaItem? @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  auctions                 Auction[]
}

model Seller {
  id                       String    @id @default(cuid())
  publicId                 String    @unique
  name                     String
  slug                     String    @unique
  contactName              String?
  email                    String?
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  description              String?   @db.Text
  isJudicial               Boolean   @default(false)
  memberSince              DateTime?
  rating                   Float?
  activeLotsCount          Int?      @default(0)
  totalSalesValue          Float?    @default(0)
  auctionsFacilitatedCount Int?      @default(0)

  // Relationships
  userId                   String?         @unique
  user                     User?           @relation("UserToSeller", fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  logoMediaId              String?         @unique
  logo                     MediaItem?      @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  judicialBranchId         String?         @unique
  judicialBranch           JudicialBranch? @relation("SellerToJudicialBranch", fields: [judicialBranchId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  auctions                 Auction[]
  bens                     Bem[]
  directSaleOffers         DirectSaleOffer[]
  
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt

  @@index([slug])
  @@index([userId])
}

model LotCategory {
  id                   String      @id @default(cuid())
  name                 String      @unique
  slug                 String      @unique
  description          String?
  itemCount            Int?        @default(0)
  hasSubcategories     Boolean     @default(false)
  logoUrl              String?     @db.Text
  dataAiHintLogo       String?
  coverImageUrl        String?     @db.Text
  dataAiHintCover      String?
  megaMenuImageUrl     String?     @db.Text
  dataAiHintMegaMenu   String?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt

  // Relationships
  logoMediaId          String?     @unique
  coverImageMediaId    String?     @unique
  megaMenuImageMediaId String?     @unique
  logo                 MediaItem?  @relation("CategoryLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  coverImage           MediaItem?  @relation("CategoryCoverImage", fields: [coverImageMediaId], references: [id], onDelete: SetNull)
  megaMenuImage        MediaItem?  @relation("CategoryMegaMenuImage", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull)
  
  lots                 Lot[]
  bens                 Bem[]
  directSaleOffers     DirectSaleOffer[]
  subcategories        Subcategory[]
}

model Subcategory {
  id             String      @id @default(cuid())
  name           String
  slug           String      @unique
  description    String?
  itemCount      Int?        @default(0)
  displayOrder   Int         @default(0)
  iconUrl        String?
  dataAiHintIcon String?
  
  // Relationships
  parentCategoryId String
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots             Lot[]
  bens             Bem[]
  iconMediaId      String?     @unique
  icon             MediaItem?  @relation("SubcategoryIcon", fields: [iconMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([parentCategoryId])
}

model MediaItem {
  id                   String      @id @default(cuid())
  fileName             String
  storagePath          String?
  title                String?
  altText              String?
  caption              String?
  description          String?     @db.Text
  mimeType             String
  sizeBytes            Int
  dimensions           Json?
  urlOriginal          String      @db.Text
  urlThumbnail         String?     @db.Text
  urlMedium            String?     @db.Text
  urlLarge             String?     @db.Text
  linkedLotIds         Json?
  dataAiHint           String?
  uploadedBy           String?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt

  // Relationships
  userUploader           User?              @relation(fields: [uploadedBy], references: [id], onDelete: SetNull, onUpdate: NoAction)
  auctionAsImage         Auction?           @relation("AuctionImage")
  lotAsImage             Lot?               @relation("LotImage")
  bemAsImage             Bem?               @relation("BemImage")
  sellerAsLogo           Seller?            @relation("SellerLogo")
  auctioneerAsLogo       Auctioneer?        @relation("AuctioneerLogo")
  blogPostAsImage        BlogPost?          @relation("BlogPostImage")
  directSaleOfferAsImage DirectSaleOffer?   @relation("DirectSaleOfferImage")
  categoryAsLogo         LotCategory?       @relation("CategoryLogo")
  categoryAsCoverImage   LotCategory?       @relation("CategoryCoverImage")
  categoryAsMegaMenuImage LotCategory?      @relation("CategoryMegaMenuImage")
  subcategoryAsIcon      Subcategory?       @relation("SubcategoryIcon")

  @@index([uploadedBy])
}


model Bem {
  id              String      @id @default(cuid())
  publicId        String      @unique
  title           String
  description     String?     @db.Text
  status          BemStatus
  evaluationValue Float?
  imageUrl        String?
  dataAiHint      String?
  locationCity    String?
  locationState   String?
  address         String?
  latitude        Float?
  longitude       Float?

  // Vehicle
  plate           String?
  make            String?
  model           String?
  version         String?
  year            Int?
  modelYear       Int?
  mileage         Int?
  color           String?
  fuelType        String?
  transmissionType String?
  bodyType        String?
  vin             String?
  renavam         String?
  enginePower     String?
  numberOfDoors   Int?
  vehicleOptions  String?
  detranStatus    String?
  debts           String?
  runningCondition String?
  bodyCondition   String?
  tiresCondition  String?
  hasKey          Boolean?
  
  // Real Estate
  propertyType          String?
  propertyRegistrationNumber String?
  iptuNumber            String?
  isOccupied            Boolean?
  area                  Float?
  totalArea             Float?
  builtArea             Float?
  bedrooms              Int?
  suites                Int?
  bathrooms             Int?
  parkingSpaces         Int?
  constructionType      String?
  finishes              String? @db.Text
  infrastructure        String? @db.Text
  condoDetails          String? @db.Text
  improvements          String? @db.Text
  topography            String?
  liensAndEncumbrances  String? @db.Text
  propertyDebts         String? @db.Text
  unregisteredRecords   String? @db.Text
  hasHabiteSe           Boolean?
  zoningRestrictions    String?
  amenities             Json?
  
  // Electronics & Others
  brand                 String?
  serialNumber          String?
  itemCondition         String?
  specifications        String? @db.Text
  includedAccessories   String?
  batteryCondition      String?
  hasInvoice            Boolean?
  hasWarranty           Boolean?
  repairHistory         String?
  applianceCapacity     String?
  voltage               String?
  applianceType         String?
  additionalFunctions   String?
  hoursUsed             Int?
  engineType            String?
  capacityOrPower       String?
  maintenanceHistory    String? @db.Text
  installationLocation  String?
  compliesWithNR        String?
  operatingLicenses     String?
  breed                 String?
  age                   String?
  sex                   String? // Macho, Fêmea
  weight                String?
  individualId          String?
  purpose               String?
  sanitaryCondition     String?
  lineage               String?
  isPregnant            Boolean?
  specialSkills         String?
  gtaDocument           String?
  breedRegistryDocument String?
  furnitureType         String?
  material              String?
  style                 String?
  dimensions            String?
  pieceCount            Int?
  jewelryType           String?
  metal                 String?
  gemstones             String?
  totalWeight           String?
  jewelrySize           String?
  authenticityCertificate String?
  workType              String?
  artist                String?
  period                String?
  technique             String?
  provenance            String? @db.Text
  boatType              String?
  boatLength            String?
  hullMaterial          String?
  onboardEquipment      String? @db.Text
  productName           String?
  quantity              String?
  packagingType         String?
  expirationDate        DateTime?
  storageConditions     String?
  preciousMetalType     String?
  purity                String?
  forestGoodsType       String?
  volumeOrQuantity      String?
  species               String?
  dofNumber             String?

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relationships
  categoryId        String
  subcategoryId     String?
  judicialProcessId String?
  sellerId          String?
  imageMediaId      String?         @unique

  category        LotCategory      @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller          Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  image           MediaItem?       @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  lotsOnBem       LotOnBem[]

  @@index([categoryId])
  @@index([subcategoryId])
  @@index([judicialProcessId])
  @@index([sellerId])
}

model StateInfo {
  id        String   @id @default(cuid())
  name      String
  uf        String   @unique
  slug      String   @unique
  cityCount Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  courts    Court[]
  districts JudicialDistrict[]
  cities    CityInfo[]
}

model CityInfo {
  id        String   @id @default(cuid())
  name      String
  slug      String
  ibgeCode  String?
  lotCount  Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  stateId   String
  state     StateInfo @relation(fields: [stateId], references: [id])
  lots      Lot[]

  @@unique([name, stateId])
}

model PlatformSettings {
  id                          String @id @default("global")
  siteTitle                   String?
  siteTagline                 String?
  galleryImageBasePath        String?
  storageProvider             String?
  firebaseStorageBucket       String?
  activeThemeName             String?
  themes                      Json?
  platformPublicIdMasks       Json?
  homepageSections            Json?
  mentalTriggerSettings       Json?
  sectionBadgeVisibility      Json?
  mapSettings                 Json?
  biddingSettings             Json?
  searchPaginationType        String?
  searchItemsPerPage          Int?
  searchLoadMoreCount         Int?
  showCountdownOnLotDetail    Boolean?
  showCountdownOnCards        Boolean?
  showRelatedLotsOnLotDetail  Boolean?
  relatedLotsCount            Int?
  defaultUrgencyTimerHours    Int?
  variableIncrementTable      Json?
  defaultListItemsPerPage     Int?
  updatedAt                   DateTime @updatedAt
}

model BlogPost {
  id                String    @id @default(cuid())
  publicId          String    @unique
  title             String
  slug              String    @unique
  content           String    @db.Text
  authorName        String
  publishedAt       DateTime?
  tags              String?   // Comma-separated
  
  // Relationships
  featuredImageId String?   @unique
  image           MediaItem? @relation("BlogPostImage", fields: [featuredImageId], references: [id], onDelete: SetNull)
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Bid {
  id            String   @id @default(cuid())
  amount        Float
  timestamp     DateTime @default(now())
  
  // Relationships
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  lot           Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder        User   @relation(fields: [bidderId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([bidderId])
}

model UserWin {
  id               String        @id @default(cuid())
  winningBidAmount Float
  winDate          DateTime      @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?

  // Relationships
  lotId            String
  lot              Lot           @relation(fields: [lotId], references: [id], onDelete: Cascade)
  userId           String
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@index([userId])
  @@index([lotId])
}


model Notification {
  id        String   @id @default(cuid())
  message   String
  link      String?
  isRead    Boolean  @default(false)
  
  // Relationships
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([userId])
}

model Review {
  id              String   @id @default(cuid())
  rating          Int
  comment         String?  @db.Text
  userId          String
  userDisplayName String
  
  // Relationships
  lotId           String
  auctionId       String
  lot             Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  
  @@index([lotId])
  @@index([userId])
}

model LotQuestion {
  id                 String   @id @default(cuid())
  questionText       String   @db.Text
  isPublic           Boolean  @default(true)
  answerText         String?  @db.Text
  answeredAt         DateTime?
  userId             String
  userDisplayName    String
  answeredByUserId   String?
  answeredByUserDisplayName String?
  
  // Relationships
  lotId              String
  auctionId          String
  lot                Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user               User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  answeredBy         User?  @relation("AnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)
  createdAt          DateTime @default(now())
  
  @@index([lotId])
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  maxAmount Float
  isActive  Boolean  @default(true)
  
  // Relationships
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lotId     String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lotId])
}

model Court {
  id        String             @id @default(cuid())
  name      String             @unique
  slug      String             @unique
  stateUf   String
  website   String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  // Relationships
  state     StateInfo          @relation(fields: [stateUf], references: [uf])
  districts JudicialDistrict[]
  processes JudicialProcess[]
}

model JudicialDistrict {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  courtId   String
  stateId   String
  court     Court            @relation(fields: [courtId], references: [id])
  state     StateInfo        @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]

  @@unique([name, courtId])
}

model JudicialBranch {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  contactName String?
  phone       String?
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  districtId  String
  district    JudicialDistrict @relation(fields: [districtId], references: [id], onDelete: Cascade)
  processes   JudicialProcess[]
  seller      Seller?          @relation("SellerToJudicialBranch")

  @@unique([name, districtId])
}

model JudicialProcess {
  id              String         @id @default(cuid())
  publicId        String         @unique
  processNumber   String         @unique
  isElectronic    Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relationships
  courtId         String
  districtId      String
  branchId        String
  sellerId        String?        @unique
  
  court           Court            @relation(fields: [courtId], references: [id])
  district        JudicialDistrict @relation(fields: [districtId], references: [id])
  branch          JudicialBranch   @relation(fields: [branchId], references: [id])
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  parties         ProcessParty[]
  bens            Bem[]
  auctions        Auction[]
}

model ProcessParty {
  id             String           @id @default(cuid())
  name           String
  documentNumber String?
  partyType      ProcessPartyType

  // Relationships
  processId      String
  process        JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@unique([processId, name, partyType])
}

model DirectSaleOffer {
  id                String                 @id @default(cuid())
  publicId          String                 @unique
  title             String
  description       String                 @db.Text
  offerType         DirectSaleOfferType
  status            DirectSaleOfferStatus
  price             Float?
  minimumOfferPrice Float?
  locationCity      String?
  locationState     String?
  itemsIncluded     Json?                  
  tags              Json?
  views             Int                    @default(0)
  proposalsCount    Int                    @default(0)
  expiresAt         DateTime?

  // Relationships
  categoryId        String
  category          LotCategory            @relation(fields: [categoryId], references: [id])
  sellerId          String
  seller            Seller                 @relation(fields: [sellerId], references: [id])
  imageMediaId      String?                @unique
  image             MediaItem?             @relation("DirectSaleOfferImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt

  @@index([sellerId])
  @@index([categoryId])
}

// Explicit many-to-many join table for Bem and Lot
model LotOnBem {
  bem   Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bemId String
  lot   Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lotId String

  @@id([bemId, lotId])
}

```
- src/components/layout/header-actions.ts:
```ts
// src/components/layout/header-actions.ts
'use server';

import type { Lot, LotCategory, RecentlyViewedLotInfo } from '@/types';
import { getLotsByIds } from '@/app/admin/lots/actions';
import { getLotCategories } from '@/app/admin/categories/actions';

/**
 * Fetches data for the header, specifically for recently viewed lots.
 * This function takes an array of lot IDs (from local storage) and returns
 * the corresponding full lot objects.
 * @param lotIds - An array of lot IDs.
 * @returns An array of RecentlyViewedLotInfo objects.
 */
export async function getHeaderData(lotIds: string[]): Promise<RecentlyViewedLotInfo[]> {
  if (lotIds.length === 0) {
    return [];
  }
  try {
    const lotData = await getLotsByIds(lotIds);
    // Map the full lot data to the minimal info needed for the header dropdown
    return lotData.map(lot => ({
      id: lot.id,
      title: lot.title,
      imageUrl: lot.imageUrl || 'https://placehold.co/120x100.png',
      auctionId: lot.auctionId,
      dataAiHint: lot.dataAiHint || 'item visto recentemente',
    }));
  } catch (error) {
    console.error("Error fetching header data (recently viewed lots):", error);
    return [];
  }
}

/**
 * Fetches all lot categories for use in the search dropdown.
 * @returns An array of LotCategory objects.
 */
export async function getHeaderSearchCategories(): Promise<LotCategory[]> {
  try {
    const categories = await getLotCategories();
    return categories;
  } catch (error) {
    console.error("Error fetching categories for header search:", error);
    return [];
  }
}

```
- src/app/profile/actions.ts:
```ts
/**
 * @fileoverview Server Action for the user profile page.
 * Provides a function to fetch the complete profile data for a specific user.
 */
'use server';

import { prisma } from '@/lib/prisma';
import type { UserProfileData } from '@/types';

/**
 * Fetches the complete profile data for a user by their ID.
 * This is used to display detailed information on the user's profile page.
 * @param {string} userId - The unique ID of the user.
 * @returns {Promise<UserProfileData | null>} A promise that resolves to the user's profile data, or null if not found.
 */
export async function getMyProfileData(userId: string): Promise<UserProfileData | null> {
  if (!userId) {
    console.warn("[getMyProfileData Action] No userId provided.");
    return null;
  }
  
  try {
    const user = await prisma.user.findUnique({
      where: { id: userId },
      include: {
        role: true, // Include the related role
      },
    });

    if (!user) {
      return null;
    }

    // Map the Prisma user model to our UserProfileData type, including roleName
    const userProfile: UserProfileData = {
      ...user,
      uid: user.id, // Ensure uid alias is present
      roleName: user.role?.name || 'Não definido',
    } as unknown as UserProfileData;
    
    return userProfile;

  } catch (error) {
    console.error(`[getMyProfileData Action] Error fetching profile for user ${userId}:`, error);
    return null;
  }
}
```
- src/contexts/dev-context.tsx:
```ts
// This file is now obsolete and will be deleted.
// The database adapter selection logic has been removed.

```
- src/hooks/use-local-storage.ts:
```ts
// src/hooks/use-local-storage.ts
import { useState, useEffect } from 'react';

/**
 * A custom hook to synchronize state with localStorage.
 * This hook is client-side only and handles server-side rendering gracefully by returning the initial value.
 * @template T - The type of the value to be stored.
 * @param {string} key - The key under which the value is stored in localStorage.
 * @param {T} initialValue - The initial value to use if nothing is found in localStorage.
 * @returns {[T, (value: T) => void]} A tuple containing the current value and a function to update it.
 */
function useLocalStorage<T>(key: string, initialValue: T): [T, (value: T | ((val: T) => T)) => void] {
  // State to store our value
  // Pass initial state function to useState so logic is only executed once on the client
  const [storedValue, setStoredValue] = useState<T>(initialValue);

  // useEffect to load from localStorage on initial client render
  useEffect(() => {
    if (typeof window === 'undefined') {
      return;
    }
    try {
      const item = window.localStorage.getItem(key);
      setStoredValue(item ? JSON.parse(item) : initialValue);
    } catch (error) {
      console.error(`Error reading localStorage key “${key}”:`, error);
      setStoredValue(initialValue);
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [key]); // Only run on mount

  // Return a wrapped version of useState's setter function that ...
  // ... persists the new value to localStorage.
  const setValue = (value: T | ((val: T) => T)) => {
    try {
      // Allow value to be a function so we have the same API as useState
      const valueToStore = value instanceof Function ? value(storedValue) : value;
      // Save state
      setStoredValue(valueToStore);
      // Save to local storage
      if (typeof window !== 'undefined') {
        window.localStorage.setItem(key, JSON.stringify(valueToStore));
      }
    } catch (error) {
      console.error(`Error setting localStorage key “${key}”:`, error);
    }
  };

  return [storedValue, setValue];
}

export default useLocalStorage;
```
- src/lib/database/sample-data/notifications.json:
```json
[]
```
- src/lib/database/sample-data/platform-settings.json:
```json
[
  {
    "id": "global",
    "siteTitle": "BidExpert Leilões",
    "siteTagline": "Sua plataforma definitiva para leilões online.",
    "galleryImageBasePath": "/uploads/media/",
    "storageProvider": "local",
    "firebaseStorageBucket": "bidexpert-630df.appspot.com",
    "activeThemeName": "Padrão BidExpert",
    "themes": [
      {
        "name": "Padrão BidExpert",
        "colors": {
          "--background": "hsl(0 0% 100%)",
          "--foreground": "hsl(0 0% 3.9%)",
          "--primary": "hsl(25 95% 53%)",
          "--primary-foreground": "hsl(0 0% 100%)",
          "--secondary": "hsl(0 0% 96.1%)",
          "--accent": "hsl(25 95% 95%)"
        }
      }
    ],
    "platformPublicIdMasks": {
      "auctions": "LEIL-",
      "lots": "LOTE-",
      "auctioneers": "LEILOE-",
      "sellers": "COMIT-"
    },
    "homepageSections": [
      { "id": "hero", "type": "hero_carousel", "title": "Destaques Principais", "visible": true, "order": 1 },
      { "id": "filter_links", "type": "filter_links", "title": "Explorar por Tipo", "visible": true, "order": 2 },
      { "id": "featured_lots", "type": "featured_lots", "title": "Lotes em Destaque", "visible": true, "order": 3, "itemCount": 10 },
      { "id": "active_auctions", "type": "active_auctions", "title": "Leilões Ativos", "visible": true, "order": 4, "itemCount": 10 }
    ],
    "mentalTriggerSettings": {
      "showDiscountBadge": true,
      "showUrgencyTimer": true,
      "urgencyTimerThresholdDays": 1,
      "urgencyTimerThresholdHours": 12,
      "showPopularityBadge": true,
      "popularityViewThreshold": 500,
      "showHotBidBadge": true,
      "hotBidThreshold": 10,
      "showExclusiveBadge": true
    },
    "sectionBadgeVisibility": {
      "featuredLots": { "showStatusBadge": false, "showDiscountBadge": true, "showUrgencyTimer": true, "showPopularityBadge": true, "showHotBidBadge": true, "showExclusiveBadge": true },
      "searchGrid": { "showStatusBadge": true, "showDiscountBadge": true, "showUrgencyTimer": true, "showPopularityBadge": true, "showHotBidBadge": true, "showExclusiveBadge": true },
      "searchList": { "showStatusBadge": true, "showDiscountBadge": true, "showUrgencyTimer": true, "showPopularityBadge": true, "showHotBidBadge": true, "showExclusiveBadge": true },
      "lotDetail": { "showStatusBadge": true, "showDiscountBadge": true, "showUrgencyTimer": true, "showPopularityBadge": true, "showHotBidBadge": true, "showExclusiveBadge": true }
    },
    "mapSettings": {
      "defaultProvider": "openstreetmap",
      "googleMapsApiKey": "",
      "staticImageMapZoom": 15,
      "staticImageMapMarkerColor": "blue"
    },
    "searchPaginationType": "loadMore",
    "searchItemsPerPage": 12,
    "searchLoadMoreCount": 12,
    "showCountdownOnLotDetail": true,
    "showCountdownOnCards": true,
    "showRelatedLotsOnLotDetail": true,
    "relatedLotsCount": 5
  }
]
```
- src/lib/database/sample-data/user-wins.json:
```json
[
  {
    "id": "win-1",
    "lotId": "LOTEART004",
    "userId": "admin-bidexpert-platform-001",
    "winningBidAmount": 72000,
    "winDate": "2025-07-02T04:00:00.000Z",
    "paymentStatus": "PAGO"
  },
  {
    "id": "win-2",
    "lotId": "LOTEJUD002",
    "userId": "user-test-002",
    "winningBidAmount": 765000,
    "winDate": "2025-07-14T04:00:00.000Z",
    "paymentStatus": "PENDENTE"
  },
  {
    "id": "win-3",
    "lotId": "LOTEBRA05",
    "userId": "user-test-002",
    "winningBidAmount": 101000,
    "winDate": "2025-07-04T09:00:00.000Z",
    "paymentStatus": "PAGO"
  },
  {
    "id": "win-4",
    "lotId": "LOTEBRA06",
    "userId": "admin-bidexpert-platform-001",
    "winningBidAmount": 117500,
    "winDate": "2025-07-04T10:00:00.000Z",
    "paymentStatus": "PROCESSANDO"
  }
]
```
- src/lib/get-db-name.ts:
```ts
// This file is now obsolete and will be deleted.
// The database adapter selection logic has been removed.

```
- src/middleware.ts:
```ts

import { NextResponse, type NextRequest } from 'next/server';

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;

  // Se a rota for interna (ex: /_next/) ou um arquivo estático (ex: /favicon.ico), não fazemos nada.
  if (pathname.startsWith('/_next/') || pathname.includes('.')) {
    return NextResponse.next();
  }

  // --- Lógica de Banco de Dados de Desenvolvimento ---
  // No ambiente de desenvolvimento, permitimos a seleção de DB via query param.
  // Esta lógica lê o query param, define um cookie e então redireciona para a URL sem o query param.
  // A seleção real do banco de dados agora é gerenciada pelo Prisma com base em `DATABASE_URL` no `.env`.
  // Este middleware agora serve principalmente para depuração e para indicar a configuração ativa no UI.
  if (process.env.NODE_ENV === 'development') {
    const dbQueryParam = request.nextUrl.searchParams.get('db');
    const currentDbCookie = request.cookies.get('dev-config-db');

    // Se o query param `db` estiver presente, definimos um cookie e redirecionamos.
    if (dbQueryParam && ['SAMPLE_DATA', 'FIRESTORE', 'MYSQL', 'POSTGRES'].includes(dbQueryParam.toUpperCase())) {
      const response = NextResponse.redirect(new URL(pathname, request.url));
      response.cookies.set('dev-config-db', dbQueryParam.toUpperCase(), {
        path: '/',
        maxAge: 60 * 60 * 24 * 7, // 1 semana
      });
      return response;
    }
  }

  // --- Outras Lógicas de Middleware (Autenticação, etc.) podem ser adicionadas aqui ---
  // Exemplo:
  // const session = await getSession(); // Supondo que você tenha uma função getSession
  // if (!session && pathname.startsWith('/dashboard')) {
  //   return NextResponse.redirect(new URL('/login', request.url));
  // }

  return NextResponse.next();
}

export const config = {
  // O matcher define em quais rotas o middleware será executado.
  matcher: [
    // Roda em todas as rotas exceto aquelas que começam com:
    // - api (Rotas de API)
    // - _next/static (Arquivos estáticos)
    // - _next/image (Otimização de imagem)
    // - favicon.ico (Ícone de favicon)
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
  ],
};

```
- src/scripts/health-check-context.sh:
```sh
#!/bin/bash

echo "🧠 Gemini Context Health Check"
echo "-----------------------------"
echo ""

echo "📦 Largest files (by size):"
du -sh .[!.]* * 2>/dev/null | sort -hr | head -n 10
echo ""

echo "⚠️  Files over 100KB (potential token bloat):"
find . -type f -size +100k | grep -vE "node_modules|.git|.next|dist|context_backup|internal|yarn.lock" | sort
echo ""

echo "📏 Estimating total word count (excluding node_modules)..."
wc_output=$(find . -type f \( -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.json" -o -name "*.md" -o -name "*.sh" -o -name "schema.prisma" \) \
  -not -path "*/node_modules/*" \
  -not -path "*/.git/*" \
  -not -path "*/.next/*" \
  -not -path "*/dist/*" \
  -not -path "*/internal/*" \
  -not -path "*/context_backup/*" \
  -not -path "*yarn.lock*" \
  -exec cat {} + | wc -w)
token_estimate=$(( $wc_output * 4 ))
echo "→ Total words: $wc_output (~$token_estimate tokens)"
if [ "$token_estimate" -gt 1000000 ]; then
  echo "❌ OVER TOKEN LIMIT — Gemini will fail to load context."
else
  echo "✅ Under token limit."
fi
echo ""

echo "🔍 Checking .studioignore..."
if [ -f .studioignore ]; then
  echo "✅ .studioignore found."
  for path in node_modules .next dist internal context_backup firebase-debug.log .git package-lock.json yarn.lock; do
    if grep -q "$path" .studioignore; then
      echo "✅ $path is ignored"
    else
      echo "⚠️  $path is NOT ignored — consider adding it"
    fi
  done
else
  echo "❌ .studioignore not found — create one!"
fi

echo ""
echo "🎯 Context Health Check Complete"
```
- yarn.lock:
```
# This file is intentionally left blank.
# The user's project uses yarn, but the lockfile content is not needed for this interaction.
```