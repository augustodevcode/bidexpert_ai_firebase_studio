// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =====================================================================
// Modelos de Usuário, Autenticação e Permissões
// =====================================================================

model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  fullName            String
  password            String
  roleId              String?
  habilitationStatus  UserHabilitationStatus @default(PENDENTE_DOCUMENTOS)
  accountType         UserAccountType?     @default(PHYSICAL)
  badges              Json?
  
  // Relações
  role                Role?                @relation(fields: [roleId], references: [id], onDelete: SetNull)
  documents           UserDocument[]       @relation("UserDocuments")
  bids                Bid[]                @relation("UserBids")
  wins                UserWin[]            @relation("UserWins")
  notifications       Notification[]       @relation("UserNotifications")
  reviews             Review[]             @relation("UserReviews")
  questions           LotQuestion[]        @relation("UserQuestions")
  answers             LotQuestion[]        @relation("UserAnswers")
  mediaItems          MediaItem[]          @relation("UserMediaItems")
  maxBids             UserLotMaxBid[]      @relation("UserMaxBids")
  
  // Campos de Perfil Detalhado
  cpf                 String?              @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  optInMarketing      Boolean?             @default(false)
  
  // Campos de Pessoa Jurídica
  razaoSocial         String?
  cnpj                String?              @unique
  inscricaoEstadual   String?
  website             String?

  // Timestamps
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  @@index([email])
  @@index([roleId])
}

model Role {
  id              String       @id @default(uuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  users           User[]
  permissions     Permission[] @relation(references: [id])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Permission {
  id          String @id @default(uuid())
  name        String @unique
  description String?
  roles       Role[] @relation(references: [id])
}

model UserDocument {
  id              String             @id @default(uuid())
  userId          String
  documentTypeId  String
  fileUrl         String?
  fileName        String?
  status          UserDocumentStatus @default(NAO_ENVIADO)
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  rejectionReason String?
  
  user            User               @relation("UserDocuments", fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType       @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id             String         @id @default(uuid())
  name           String         @unique
  description    String?
  isRequired     Boolean        @default(false)
  appliesTo      String?
  allowedFormats String?
  displayOrder   Int?
  userDocuments  UserDocument[]
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation("UserMaxBids", fields: [userId], references: [id], onDelete: Cascade)
  lot       Lote     @relation("LotMaxBids", fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

// =====================================================================
// Modelos de Leilão e Lotes
// =====================================================================

model Leilao {
  id                             String           @id @default(uuid())
  publicId                       String           @unique
  title                          String
  fullTitle                      String?
  description                    String?          @db.Text
  status                         AuctionStatus    @default(RASCUNHO)
  auctionType                    AuctionType?
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json?            // Armazena estágios como JSON
  city                           String?
  state                          String?
  imageUrl                       String?
  imageMediaId                   String?
  documentsUrl                   String?
  sellingBranch                  String?
  automaticBiddingEnabled        Boolean?         @default(false)
  allowInstallmentBids           Boolean?         @default(false)
  softCloseEnabled               Boolean?         @default(false)
  softCloseMinutes               Int?             @default(2)
  estimatedRevenue               Float?
  achievedRevenue                Float?
  totalHabilitatedUsers          Int?
  isFeaturedOnMarketplace        Boolean?         @default(false)
  marketplaceAnnouncementTitle   String?
  additionalTriggers             String?          // Comma-separated strings
  dataAiHint                     String?
  visits                         Int?             @default(0)
  initialOffer                   Float?
  bidsCount                      Int?             @default(0)
  
  // Relações
  categoryId                     String
  auctioneerId                   String
  sellerId                       String?
  judicialProcessId              String?
  
  category                       LotCategory      @relation(fields: [categoryId], references: [id])
  auctioneer                     Leiloeiro        @relation(fields: [auctioneerId], references: [id])
  seller                         Vendedor?        @relation(fields: [sellerId], references: [id])
  processoJudicial               ProcessoJudicial? @relation("AuctionProcesses", fields: [judicialProcessId], references: [id], onDelete: SetNull)
  lotes                          Lote[]
  lances                         Lance[]
  reviews                        Review[]
  questions                      LotQuestion[]

  // Timestamps
  createdAt                      DateTime         @default(now())
  updatedAt                      DateTime         @updatedAt

  @@index([status])
  @@index([auctionType])
  @@index([categoryId])
  @@index([auctioneerId])
  @@index([sellerId])
}

model Lote {
  id                             String         @id @default(uuid())
  publicId                       String         @unique
  number                         String?
  title                          String
  description                    String?        @db.Text
  price                          Float
  initialPrice                   Float?
  secondInitialPrice             Float?
  bidIncrementStep               Float?
  status                         LotStatus      @default(EM_BREVE)
  
  // Relações
  auctionId                      String
  categoryId                     String
  subcategoryId                  String?
  stateId                        String?
  cityId                         String?
  
  auction                        Leilao         @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                       LotCategory    @relation(fields: [categoryId], references: [id])
  subcategory                    Subcategoria?  @relation(fields: [subcategoryId], references: [id])
  state                          Estado?        @relation(fields: [stateId], references: [id])
  city                           Cidade?        @relation(fields: [cityId], references: [id])
  bens                           Bem[]          @relation(references: [id])
  mediaItems                     MediaItem[]    @relation(references: [id])
  lances                         Lance[]
  wins                           VencedorLote[]
  reviews                        Review[]
  questions                      LotQuestion[]
  maxBids                        UserLotMaxBid[] @relation("LotMaxBids")

  // Imagens e Mídia
  imageUrl                       String?
  imageMediaId                   String?
  galleryImageUrls               Json?
  
  // Dados Adicionais e de Veículo/Imóvel
  condition                      String?
  dataAiHint                     String?
  isFeatured                     Boolean?       @default(false)
  isExclusive                    Boolean?       @default(false)
  discountPercentage             Float?
  additionalTriggers             Json?
  views                          Int?           @default(0)
  bidsCount                      Int?           @default(0)
  
  // Dados de Localização Geográfica
  latitude                       Float?
  longitude                      Float?
  mapAddress                     String?
  
  // Timestamps
  createdAt                      DateTime       @default(now())
  updatedAt                      DateTime       @updatedAt

  @@index([status])
  @@index([auctionId])
  @@index([categoryId])
}

model Bem {
  id                   String            @id @default(uuid())
  publicId             String            @unique
  title                String
  description          String?           @db.Text
  status               BemStatus         @default(DISPONIVEL)
  evaluationValue      Float?
  imageUrl             String?
  imageMediaId         String?
  galleryImageUrls     Json?
  dataAiHint           String?
  locationCity         String?
  locationState        String?
  address              String?
  latitude             Float?
  longitude            Float?
  
  // Relações
  categoryId           String
  subcategoryId        String?
  judicialProcessId    String?
  sellerId             String?
  
  category             LotCategory       @relation(fields: [categoryId], references: [id])
  subcategory          Subcategoria?     @relation(fields: [subcategoryId], references: [id])
  judicialProcess      ProcessoJudicial? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller               Vendedor?         @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  lotes                Lote[]            @relation(references: [id])
  
  // Campos específicos de tipo
  details              Json?
  
  // Timestamps
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
}


model Lance {
  id            String   @id @default(uuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())
  isMaxBid      Boolean  @default(false)

  lote          Lote     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  leilao        Leilao   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder        User     @relation("UserBids", fields: [bidderId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([bidderId])
}

model VencedorLote {
  id               String      @id @default(uuid())
  lotId            String      @unique
  userId           String
  auctionId        String
  winningBidAmount Float
  winDate          DateTime    @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?
  
  lote             Lote        @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user             User        @relation("UserWins", fields: [userId], references: [id], onDelete: Cascade)
}

// =====================================================================
// Modelos de Entidades (Vendedor, Leiloeiro)
// =====================================================================

model Vendedor {
  id                         String    @id @default(uuid())
  publicId                   String    @unique
  name                       String
  slug                       String    @unique
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  logoUrl                    String?
  dataAiHintLogo             String?
  description                String?   @db.Text
  isJudicial                 Boolean   @default(false)
  
  // Relações
  userId                     String?   @unique
  judicialBranchId           String?   @unique
  
  user                       User?
  judicialBranch             JudicialBranch? @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  leiloes                    Leilao[]
  bens                       Bem[]
  ofertasVendaDireta         VendaDireta[]

  // Timestamps
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
}

model Leiloeiro {
  id                         String    @id @default(uuid())
  publicId                   String    @unique
  name                       String
  slug                       String    @unique
  registrationNumber         String?
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  logoUrl                    String?
  dataAiHintLogo             String?
  description                String?   @db.Text
  
  // Relações
  userId                     String?   @unique
  user                       User?
  leiloes                    Leilao[]

  // Timestamps
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
}

// =====================================================================
// Modelos de Conteúdo e Configuração
// =====================================================================

model LotCategory {
  id                 String           @id @default(uuid())
  name               String           @unique
  slug               String           @unique
  description        String?
  itemCount          Int?             @default(0)
  hasSubcategories   Boolean?         @default(false)
  
  logoUrl            String?
  dataAiHintLogo     String?
  coverImageUrl      String?
  dataAiHintCover    String?
  megaMenuImageUrl   String?
  dataAiHintMegaMenu String?
  
  lots               Lote[]
  bens               Bem[]
  subcategories      Subcategoria[]
  directSaleOffers   VendaDireta[]
  blogPosts          BlogPost[]

  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model Subcategoria {
  id               String       @id @default(uuid())
  name             String
  slug             String       @unique
  description      String?
  parentCategoryId String
  displayOrder     Int?         @default(0)
  itemCount        Int?         @default(0)
  
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  
  parentCategory   LotCategory  @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots             Lote[]
  bens             Bem[]

  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Estado {
  id        String   @id @default(uuid())
  name      String   @unique
  uf        String   @unique
  slug      String   @unique
  cityCount Int?     @default(0)
  
  cities    Cidade[]
  courts    Court[]
  districts JudicialDistrict[]
  lots      Lote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cidade {
  id        String   @id @default(uuid())
  name      String
  slug      String
  stateId   String
  stateUf   String
  ibgeCode  String?
  lotCount  Int?     @default(0)
  
  state     Estado   @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots      Lote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VendaDireta {
  id                  String               @id @default(uuid())
  publicId            String               @unique
  title               String
  description         String               @db.Text
  offerType           DirectSaleOfferType
  status              DirectSaleOfferStatus  @default(PENDENTE_APROVACAO)
  price               Float?
  minimumOfferPrice   Float?
  locationCity        String?
  locationState       String?
  imageUrl            String?
  imageMediaId        String?
  dataAiHint          String?
  galleryImageUrls    Json?
  itemsIncluded       Json?
  tags                Json?
  views               Int?
  proposalsCount      Int?
  expiresAt           DateTime?
  
  categoryId          String
  sellerId            String
  
  category            LotCategory          @relation(fields: [categoryId], references: [id])
  seller              Vendedor             @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model MediaItem {
  id               String     @id @default(uuid())
  fileName         String
  storagePath      String?
  title            String?
  altText          String?
  caption          String?
  description      String?
  mimeType         String
  sizeBytes        Int
  dimensions       Json?
  urlOriginal      String?
  urlThumbnail     String?
  urlMedium        String?
  urlLarge         String?
  dataAiHint       String?
  
  uploadedById     String?
  uploadedBy       User?      @relation("UserMediaItems", fields: [uploadedById], references: [id], onDelete: SetNull)
  lots             Lote[]     @relation(references: [id])
  
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Notification {
  id        String    @id @default(uuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())
  user      User      @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
}

model ContactMessage {
  id        String    @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String    @db.Text
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())
}

model Review {
  id              String   @id @default(uuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String?  @db.Text
  isApproved      Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  lot             Lote     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction         Leilao   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user            User     @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                        String   @id @default(uuid())
  lotId                     String
  auctionId                 String
  userId                    String
  userDisplayName           String
  questionText              String   @db.Text
  isPublic                  Boolean  @default(true)
  answerText                String?  @db.Text
  answeredAt                DateTime?
  answeredByUserId          String?
  answeredByUserDisplayName String?
  createdAt                 DateTime @default(now())
  
  lot                       Lote     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction                   Leilao   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user                      User     @relation("UserQuestions", fields: [userId], references: [id], onDelete: Cascade)
  answeredBy                User?    @relation("UserAnswers", fields: [answeredByUserId], references: [id], onDelete: SetNull)
}

model BlogPost {
    id        String      @id @default(uuid())
    title     String
    slug      String      @unique
    content   String      @db.Text
    authorId  String
    author    User        @relation(fields: [authorId], references: [id])
    imageUrl  String?
    tags      Json?
    isPublished Boolean   @default(false)
    publishedAt DateTime?
    categoryId  String?
    category    LotCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
}

// =====================================================================
// Modelos Judiciais
// =====================================================================

model Court {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String   @unique
  stateId   String
  stateUf   String
  website   String?
  
  state     Estado   @relation(fields: [stateId], references: [id])
  districts JudicialDistrict[]
  processes ProcessoJudicial[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JudicialDistrict {
  id        String   @id @default(uuid())
  name      String
  slug      String
  courtId   String
  stateId   String
  zipCode   String?
  
  court     Court      @relation(fields: [courtId], references: [id])
  state     Estado     @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes ProcessoJudicial[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JudicialBranch {
  id         String   @id @default(uuid())
  name       String
  slug       String
  districtId String
  contactName String?
  phone      String?
  email      String?
  
  district   JudicialDistrict @relation(fields: [districtId], references: [id], onDelete: Cascade)
  processes  ProcessoJudicial[]
  seller     Vendedor?

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ProcessoJudicial {
  id            String   @id @default(uuid())
  publicId      String   @unique
  processNumber String   @unique
  isElectronic  Boolean  @default(true)

  courtId       String
  districtId    String
  branchId      String
  sellerId      String?
  
  court         Court          @relation(fields: [courtId], references: [id])
  district      JudicialDistrict @relation(fields: [districtId], references: [id])
  branch        JudicialBranch @relation(fields: [branchId], references: [id])
  seller        Vendedor?      @relation(fields: [sellerId], references: [id])
  parties       ProcessParty[]
  bens          Bem[]
  auctions      Leilao[]       @relation("AuctionProcesses")
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ProcessParty {
  id             String         @id @default(uuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  
  process        ProcessoJudicial @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@unique([processId, name, partyType])
}

model PlatformSettings {
  id                           String @id @default("global")
  siteTitle                    String
  siteTagline                  String?
  galleryImageBasePath         String?
  storageProvider              String?
  firebaseStorageBucket        String?
  activeThemeName              String?
  themes                       Json?
  platformPublicIdMasks        Json?
  homepageSections             Json?
  mentalTriggerSettings        Json?
  sectionBadgeVisibility       Json?
  mapSettings                  Json?
  biddingSettings              Json?
  searchPaginationType         String?
  searchItemsPerPage           Int?
  searchLoadMoreCount          Int?
  showCountdownOnLotDetail     Boolean?
  showCountdownOnCards         Boolean?
  showRelatedLotsOnLotDetail   Boolean?
  relatedLotsCount             Int?
  variableIncrementTable       Json?
  defaultUrgencyTimerHours     Int?
  defaultListItemsPerPage      Int?
  updatedAt                    DateTime @updatedAt
}

// =====================================================================
// Enums
// =====================================================================

enum UserHabilitationStatus {
  PENDENTE_DOCUMENTOS
  PENDENTE_ANALISE
  HABILITADO
  REJEITADO_DOCUMENTOS
  BLOQUEADO
}

enum UserAccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserDocumentStatus {
  NAO_ENVIADO
  SUBMETIDO
  APROVADO
  REJEITADO
  PENDENTE_ANALISE
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  PENDENTE_APROVACAO
  ACTIVE
  SOLD
  EXPIRED
  CANCELLED
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum DocumentTemplateType {
    WINNING_BID_TERM
    EVALUATION_REPORT
    AUCTION_CERTIFICATE
}

