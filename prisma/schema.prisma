// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. ENUMS (Used for defining allowed string values)
// =================================================================

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

// =================================================================
// 2. MODELS (Represents database tables)
// =================================================================

model Lot {
  id                      String        @id @default(cuid())
  publicId                String        @unique @default(cuid())
  number                  String?
  title                   String
  description             String?       @db.Text
  price                   Decimal       @default(0.00) @db.Decimal(15, 2)
  initialPrice            Decimal?      @db.Decimal(15, 2)
  secondInitialPrice      Decimal?      @db.Decimal(15, 2)
  bidIncrementStep        Decimal?      @db.Decimal(10, 2)
  status                  LotStatus     @default(EM_BREVE)
  bidsCount               Int           @default(0)
  views                   Int           @default(0)
  isFeatured              Boolean       @default(false)
  isExclusive             Boolean       @default(false)
  isRelisted              Boolean       @default(false)
  relistCount             Int           @default(0)
  discountPercentage      Int?
  additionalTriggers      Json?
  imageUrl                String?
  imageMediaId            String?
  galleryImageUrls        Json?
  mediaItemIds            Json?
  inheritedMediaFromBemId String?
  type                    String
  condition               String?
  dataAiHint              String?
  winningBidTermUrl       String?
  allowInstallmentBids    Boolean       @default(false)
  latitude                Float?
  longitude               Float?
  mapAddress              String?
  endDate                 DateTime?
  lotSpecificAuctionDate  DateTime?
  secondAuctionDate       DateTime?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt

  auctionId    String
  auction      Auction     @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  categoryId   String?
  category     LotCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategoryId String?
  subcategory  Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  sellerId     String?
  seller       Seller?     @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  auctioneerId String?
  auctioneer   Auctioneer? @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  cityId       String?
  city         City?       @relation(fields: [cityId], references: [id], onDelete: SetNull)
  stateId      String?
  state        State?      @relation(fields: [stateId], references: [id], onDelete: SetNull)

  bids     Bid[]
  wins     UserWin[]
  bens     LotBens[]
  maxBids  UserLotMaxBid[]
  reviews  Review[]
  questions LotQuestion[]
  
  originalLotId String? @unique
  relistedLot   Lot?    @relation("LotRelist", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  originalLot   Lot?    @relation("LotRelist")
  
  winnerId        String?
  winner          User? @relation("WonLots", fields: [winnerId], references: [id], onDelete: SetNull)
}

model LotBens {
  lotId  String
  bemId  String
  lot    Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bem    Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)

  @@id([lotId, bemId])
}

model Auction {
  id                             String        @id @default(cuid())
  publicId                       String        @unique @default(cuid())
  slug                           String        @unique
  title                          String
  description                    String?       @db.Text
  status                         AuctionStatus @default(RASCUNHO)
  auctionType                    AuctionType   @default(EXTRAJUDICIAL)
  auctionMethod                  AuctionMethod @default(STANDARD)
  participation                  AuctionParticipation @default(ONLINE)
  auctionDate                    DateTime?
  endDate                        DateTime?
  imageUrl                       String?
  imageMediaId                   String?
  dataAiHint                     String?
  documentsUrl                   String?
  onlineUrl                      String?       @db.VarChar(500)
  address                        String?
  zipCode                        String?
  latitude                       Float?
  longitude                      Float?
  visits                         Int           @default(0)
  totalLots                      Int           @default(0)
  initialOffer                   Decimal?      @db.Decimal(15, 2)
  isFavorite                     Boolean       @default(false)
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  automaticBiddingEnabled        Boolean       @default(false)
  silentBiddingEnabled           Boolean       @default(false)
  allowMultipleBidsPerUser       Boolean       @default(true)
  allowInstallmentBids           Boolean       @default(true)
  softCloseEnabled               Boolean       @default(false)
  softCloseMinutes               Int           @default(2)
  estimatedRevenue               Decimal?      @db.Decimal(15, 2)
  achievedRevenue                Decimal?      @db.Decimal(15, 2)
  totalHabilitatedUsers          Int           @default(0)
  isFeaturedOnMarketplace        Boolean       @default(false)
  marketplaceAnnouncementTitle   String?
  decrementAmount                Decimal?      @db.Decimal(10, 2)
  decrementIntervalSeconds       Int?
  floorPrice                     Decimal?      @db.Decimal(15, 2)
  autoRelistSettings             Json?
  
  auctioneerId      String?
  sellerId          String?
  categoryId        String?
  judicialProcessId String?
  courtId           String?
  districtId        String?
  branchId          String?
  cityId            String?
  stateId           String?

  auctioneer      Auctioneer?         @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  seller          Seller?             @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  category        LotCategory?        @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  judicialProcess JudicialProcess?    @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  court           Court?              @relation(fields: [courtId], references: [id], onDelete: SetNull)
  district        JudicialDistrict?   @relation(fields: [districtId], references: [id], onDelete: SetNull)
  branch          JudicialBranch?     @relation(fields: [branchId], references: [id], onDelete: SetNull)
  city            City?               @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state           State?              @relation(fields: [stateId], references: [id], onDelete: SetNull)
  
  lots          Lot[]
  auctionStages AuctionStage[]
  bids          Bid[]
  habilitations AuctionHabilitation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuctionStage {
  id              String   @id @default(cuid())
  auctionId       String
  name            String
  startDate       DateTime
  endDate         DateTime
  evaluationValue Decimal? @db.Decimal(15, 2)
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}

model User {
  id                   String        @id @default(cuid())
  email                String        @unique
  password             String?
  fullName             String?
  sellerId             String?
  habilitationStatus   UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType          AccountType   @default(PHYSICAL)
  avatarUrl            String?
  dataAiHint           String?
  badges               Json?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  
  // Detalhes PF
  cpf                  String? @unique
  rgNumber             String?
  rgIssuer             String?
  rgIssueDate          DateTime?
  rgState              String?
  dateOfBirth          DateTime?
  cellPhone            String?
  homePhone            String?
  gender               String?
  profession           String?
  nationality          String?
  maritalStatus        String?
  propertyRegime       String?
  spouseName           String?
  spouseCpf            String?

  // Endere√ßo
  zipCode              String?
  street               String?
  number               String?
  complement           String?
  neighborhood         String?
  city                 String?
  state                String?
  
  // Detalhes PJ
  razaoSocial          String?
  cnpj                 String? @unique
  inscricaoEstadual    String?
  website              String?
  responsibleName      String?
  responsibleCpf       String?

  // Marketing
  optInMarketing       Boolean? @default(false)
  
  roles         UsersOnRoles[]
  bids          Bid[]
  wins          UserWin[]
  maxBids       UserLotMaxBid[]
  documents     UserDocument[]
  notifications Notification[]
  reviews       Review[]
  questions     LotQuestion[]
  answers       LotQuestion[]        @relation("AnsweredBy")
  mediaItems    MediaItem[]
  auctioneer    Auctioneer?
  seller        Seller?
  habilitations AuctionHabilitation[]
  wonLots       Lot[]                @relation("WonLots")
}

model Role {
  id            String   @id @default(cuid())
  name          String
  nameNormalized String  @unique
  description   String?
  permissions   String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  users UsersOnRoles[]
}

model UsersOnRoles {
  userId      String
  roleId      String
  assignedAt  DateTime @default(now())
  assignedBy  String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model StateInfo {
  id        String   @id @default(cuid())
  name      String
  uf        String   @unique
  slug      String   @unique
  cityCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  cities    City[]
  districts JudicialDistrict[]
  auctions  Auction[]
  lots      Lot[]
  courts    Court[]
}

model City {
  id        String   @id @default(cuid())
  name      String
  slug      String?
  stateId   String
  stateUf   String?
  ibgeCode  String?  @unique
  lotCount  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  state StateInfo @relation(fields: [stateId], references: [id], onDelete: Cascade)
  auctions Auction[]
  lots     Lot[]
}

model LotCategory {
  id                   String @id @default(cuid())
  name                 String
  slug                 String @unique
  description          String? @db.Text
  hasSubcategories     Boolean? @default(false)
  itemCount            Int? @default(0)
  iconName             String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintIcon       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?

  auctions     Auction[]
  bens         Bem[]
  subcategories Subcategory[]
  lots         Lot[]
  directSaleOffers DirectSaleOffer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subcategory {
  id        String @id @default(cuid())
  name      String
  slug      String? @unique
  description String? @db.Text
  displayOrder Int @default(0)
  iconUrl      String?
  iconMediaId  String?
  dataAiHintIcon String?
  
  parentCategoryId String
  parentCategory LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  
  lots Lot[]
  bens Bem[]
}

model Auctioneer {
  id                   String   @id @default(cuid())
  publicId             String   @unique
  slug                 String   @unique
  name                 String
  registrationNumber   String?
  contactName          String?
  email                String?  @unique
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?  @db.Text
  userId               String?  @unique
  user                 User?    @relation(fields: [userId], references: [id])
  
  auctions Auction[]
  lots     Lot[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Seller {
  id               String   @id @default(cuid())
  publicId         String   @unique
  slug             String   @unique
  name             String   @unique
  contactName      String?
  email            String?  @unique
  phone            String?
  address          String?
  city             String?
  state            String?
  zipCode          String?
  website          String?
  logoUrl          String?
  logoMediaId      String?
  dataAiHintLogo   String?
  description      String?  @db.Text
  isJudicial       Boolean  @default(false)
  userId           String?  @unique
  user             User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  judicialBranchId String?  @unique
  judicialBranch   JudicialBranch? @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  
  auctions         Auction[]
  lots             Lot[]
  bens             Bem[]
  directSaleOffers DirectSaleOffer[]
  judicialProcesses JudicialProcess[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlatformSettings {
  id                             String   @id @default(cuid())
  siteTitle                      String?
  siteTagline                    String?
  logoUrl                        String?
  faviconUrl                     String?
  galleryImageBasePath           String?
  storageProvider                String?
  firebaseStorageBucket          String?
  activeThemeName                String?
  themes                         Json?
  platformPublicIdMasks          Json?
  homepageSections               Json?
  mentalTriggerSettings          Json?
  sectionBadgeVisibility         Json?
  mapSettings                    Json?
  searchPaginationType           String?
  searchItemsPerPage             Int?
  searchLoadMoreCount            Int?
  showCountdownOnLotDetail       Boolean?
  showCountdownOnCards           Boolean?
  showRelatedLotsOnLotDetail     Boolean?
  relatedLotsCount               Int?
  defaultUrgencyTimerHours       Int?
  variableIncrementTable         Json?
  biddingSettings                Json?
  paymentGatewaySettings         Json?
  defaultListItemsPerPage        Int?
  updatedAt                      DateTime @updatedAt
}

model DirectSaleOffer {
  id                String   @id @default(cuid())
  publicId          String   @unique
  title             String
  description       String?  @db.Text
  offerType         DirectSaleOfferType
  price             Decimal? @db.Decimal(15, 2)
  minimumOfferPrice Decimal? @db.Decimal(15, 2)
  status            DirectSaleOfferStatus @default(ACTIVE)
  locationCity      String?
  locationState     String?
  imageUrl          String?
  imageMediaId      String?
  dataAiHint        String?
  galleryImageUrls  Json?
  mediaItemIds      Json?
  itemsIncluded     Json?
  views             Int      @default(0)
  expiresAt         DateTime?
  
  categoryId       String?
  sellerId         String?
  
  category         LotCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  seller           Seller?   @relation(fields: [sellerId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Judicial related tables
model Court {
    id        String   @id @default(cuid())
    name      String
    slug      String   @unique
    stateId   String?
    stateUf   String?
    website   String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    state StateInfo? @relation(fields: [stateId], references: [id], onDelete: SetNull)
    judicialProcesses JudicialProcess[]
    districts         JudicialDistrict[]
    auctions          Auction[]
}

model JudicialDistrict {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  courtId   String?
  stateId   String?
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  court     Court? @relation(fields: [courtId], references: [id], onDelete: SetNull)
  state     StateInfo? @relation(fields: [stateId], references: [id], onDelete: SetNull)
  branches  JudicialBranch[]
  processes JudicialProcess[]
  auctions  Auction[]
}

model JudicialBranch {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  districtId    String?
  contactName   String?
  phone         String?
  email         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  district  JudicialDistrict? @relation(fields: [districtId], references: [id], onDelete: SetNull)
  processes JudicialProcess[]
  seller    Seller?
  auctions  Auction[]
}

model JudicialProcess {
  id              String   @id @default(cuid())
  publicId        String   @unique
  processNumber   String
  isElectronic    Boolean  @default(true)
  courtId         String?
  districtId      String?
  branchId        String?
  sellerId        String?
  
  court    Court?            @relation(fields: [courtId], references: [id], onDelete: SetNull)
  district JudicialDistrict? @relation(fields: [districtId], references: [id], onDelete: SetNull)
  branch   JudicialBranch?   @relation(fields: [branchId], references: [id], onDelete: SetNull)
  seller   Seller?           @relation(fields: [sellerId], references: [id], onDelete: SetNull)

  parties JudicialParty[]
  bens    Bem[]
  auctions Auction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JudicialParty {
  id             String @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  
  process JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model Bem {
  id                       String    @id @default(cuid())
  publicId                 String    @unique @default(cuid())
  title                    String
  description              String?   @db.Text
  status                   String    @default("DISPONIVEL") // e.g. DISPONIVEL, LOTEADO, VENDIDO, REMOVIDO
  evaluationValue          Decimal?  @db.Decimal(15, 2)
  imageUrl                 String?
  imageMediaId             String?
  galleryImageUrls         Json?
  mediaItemIds             Json?
  dataAiHint               String?
  locationCity             String?
  locationState            String?
  address                  String?
  latitude                 Float?
  longitude                Float?
  // Vehicle specific
  plate                    String?
  make                     String?
  model                    String?
  version                  String?
  year                     Int?
  modelYear                Int?
  mileage                  Int?
  color                    String?
  fuelType                 String?
  transmissionType         String?
  bodyType                 String?
  vin                      String?   @unique
  renavam                  String?   @unique
  enginePower              String?
  numberOfDoors            Int?
  vehicleOptions           String?
  detranStatus             String?
  debts                    String?
  runningCondition         String?
  bodyCondition            String?
  tiresCondition           String?
  hasKey                   Boolean?
  // Im√≥veis
  propertyRegistrationNumber String?
  iptuNumber               String?
  isOccupied               Boolean?
  area                     Decimal?
  totalArea                Decimal?
  builtArea                Decimal?
  bedrooms                 Int?
  suites                   Int?
  bathrooms                Int?
  parkingSpaces            Int?
  constructionType         String?
  finishes                 String? @db.Text
  infrastructure           String? @db.Text
  condoDetails             String? @db.Text
  improvements             String? @db.Text
  topography               String?
  liensAndEncumbrances     String? @db.Text
  propertyDebts            String? @db.Text
  unregisteredRecords      String? @db.Text
  hasHabiteSe              Boolean?
  zoningRestrictions       String?
  amenities                Json?

  categoryId        String?
  subcategoryId     String?
  judicialProcessId String?
  sellerId          String?
  
  category        LotCategory?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory     Subcategory?      @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess JudicialProcess?  @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller          Seller?           @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  
  lots            LotBens[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bid {
  id             String   @id @default(cuid())
  lotId          String
  auctionId      String
  bidderId       String
  bidderDisplay  String?
  amount         Decimal  @db.Decimal(15, 2)
  timestamp      DateTime @default(now())
  
  lot     Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id                 String   @id @default(cuid())
  lotId              String   @unique
  userId             String
  winningBidAmount   Decimal  @db.Decimal(15, 2)
  winDate            DateTime @default(now())
  paymentStatus      PaymentStatus @default(PENDENTE)
  invoiceUrl         String?
  
  lot          Lot     @relation(fields: [lotId], references: [id])
  user         User    @relation(fields: [userId], references: [id])
  installments InstallmentPayment[]
}

model InstallmentPayment {
  id                  String @id @default(cuid())
  userWinId           String
  userWin             UserWin @relation(fields: [userWinId], references: [id], onDelete: Cascade)
  installmentNumber   Int
  amount              Decimal @db.Decimal(15, 2)
  dueDate             DateTime
  status              PaymentStatus @default(PENDENTE)
  paymentDate         DateTime?
  paymentMethod       String?
  transactionId       String?
}

model AuctionHabilitation {
    userId String
    auctionId String
    habilitatedAt DateTime @default(now())
    
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
    
    @@id([userId, auctionId])
}


model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lotId])
}

model DocumentType {
    id String @id @default(cuid())
    name String @unique
    description String
    isRequired Boolean @default(true)
    appliesTo String // e.g. "PHYSICAL,LEGAL", "ALL"
    
    userDocuments UserDocument[]
}

model UserDocument {
    id String @id @default(cuid())
    userId String
    documentTypeId String
    status UserDocumentStatus @default(PENDING_ANALYSIS)
    fileUrl String
    fileName String?
    rejectionReason String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    documentType DocumentType @relation(fields: [documentTypeId], references: [id])

    @@unique([userId, documentTypeId])
}

model Notification {
    id String @id @default(cuid())
    userId String
    message String
    link String?
    isRead Boolean @default(false)
    createdAt DateTime @default(now())
    
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
    id String @id @default(cuid())
    lotId String
    auctionId String
    userId String
    userDisplayName String
    rating Int
    comment String @db.Text
    createdAt DateTime @default(now())
    
    lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LotQuestion {
    id String @id @default(cuid())
    lotId String
    auctionId String
    userId String
    userDisplayName String
    questionText String @db.Text
    isPublic Boolean @default(true)
    createdAt DateTime @default(now())
    
    answerText String? @db.Text
    answeredAt DateTime?
    answeredByUserId String?
    
    lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    answeredBy User? @relation("AnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)
}

model MediaItem {
    id String @id @default(cuid())
    fileName String
    storagePath String
    title String?
    altText String?
    caption String?
    description String? @db.Text
    mimeType String
    sizeBytes Int
    urlOriginal String
    urlThumbnail String?
    urlMedium String?
    urlLarge String?
    linkedLotIds Json?
    dataAiHint String?
    
    judicialProcessId String?
    uploadedByUserId String
    uploadedAt DateTime @default(now())

    uploadedBy User @relation(fields: [uploadedByUserId], references: [id], onDelete: Cascade)
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentTemplate {
  id        String   @id @default(cuid())
  name      String
  type      DocumentTemplateType
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VehicleMake {
    id String @id @default(cuid())
    name String @unique
    slug String @unique
    
    models VehicleModel[]
}

model VehicleModel {
    id String @id @default(cuid())
    name String
    slug String
    makeId String
    make VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)
    
    @@unique([name, makeId])
}
