
// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// MODELOS DE ENTIDADES PRINCIPAIS
// =================================================================

model Auction {
  id              String   @id @default(uuid())
  publicId        String   @unique @default(uuid())
  title           String   @db.VarChar(255)
  description     String?  @db.Text
  slug            String   @unique
  status          String   @default("RASCUNHO")
  auctionDate     DateTime
  endDate         DateTime?
  totalLots       Int      @default(0)
  initialOffer    Decimal? @db.Decimal(15, 2)
  isFavorite      Boolean  @default(false)
  visits          Int      @default(0)
  imageUrl        String?  @db.VarChar(255)
  imageMediaId    String?
  dataAiHint      String?  @db.VarChar(100)
  documentsUrl    String?  @db.VarChar(255)
  
  // New structured fields
  auctionType             String?
  auctionMethod           String? @default("STANDARD")
  participation           String? @default("ONLINE")
  
  // Location for presencial/hibrido
  address                 String? @db.VarChar(255)
  zipCode                 String? @db.VarChar(10)
  latitude                Float?
  longitude               Float?
  onlineUrl               String? @db.VarChar(255)

  // Advanced settings
  evaluationReportUrl         String?  @db.VarChar(255)
  auctionCertificateUrl       String?  @db.VarChar(255)
  sellingBranch               String?  @db.VarChar(100)
  automaticBiddingEnabled     Boolean  @default(false)
  allowInstallmentBids        Boolean  @default(true)
  silentBiddingEnabled        Boolean  @default(false)
  allowMultipleBidsPerUser    Boolean  @default(true)
  softCloseEnabled            Boolean  @default(false)
  softCloseMinutes            Int      @default(2)
  estimatedRevenue            Decimal? @db.Decimal(15, 2)
  achievedRevenue             Decimal? @db.Decimal(15, 2)
  totalHabilitatedUsers       Int?     @default(0)
  isFeaturedOnMarketplace     Boolean  @default(false)
  marketplaceAnnouncementTitle String? @db.VarChar(150)
  additionalTriggers          Json?

  // Dutch Auction Specific
  decrementAmount             Decimal? @db.Decimal(15, 2)
  decrementIntervalSeconds    Int?
  floorPrice                  Decimal? @db.Decimal(15, 2)
  
  // Auto-relist settings
  autoRelistSettings          Json?
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // RELATIONS
  auctioneerId    String?
  auctioneer      Auctioneer? @relation(fields: [auctioneerId], references: [id])
  
  sellerId        String?
  seller          Seller?     @relation(fields: [sellerId], references: [id])
  
  categoryId      String?
  category        LotCategory? @relation(fields: [categoryId], references: [id])

  judicialProcessId String?
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])

  courtId         String?
  court           Court?      @relation(fields: [courtId], references: [id])

  districtId      String?
  district        JudicialDistrict? @relation(fields: [districtId], references: [id])
  
  branchId        String?
  branch          JudicialBranch?   @relation(fields: [branchId], references: [id])

  cityId          String?
  city            City?             @relation(fields: [cityId], references: [id])
  
  stateId         String?
  state           State?            @relation(fields: [stateId], references: [id])

  lots            Lot[]
  bids            Bid[]
  auctionStages   AuctionStage[]
  habilitations  AuctionHabilitation[]
}

model AuctionStage {
  id              String   @id @default(uuid())
  auctionId       String
  name            String
  startDate       DateTime
  endDate         DateTime
  evaluationValue Decimal? @db.Decimal(15, 2)
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  lotStageDetails LotAuctionStageDetails[]
}

model Lot {
  id              String   @id @default(uuid())
  publicId        String   @unique @default(uuid())
  number          String?  @db.VarChar(20)
  title           String   @db.VarChar(255)
  description     String?  @db.Text
  slug            String?
  price           Decimal  @db.Decimal(15, 2)
  initialPrice    Decimal? @db.Decimal(15, 2)
  secondInitialPrice Decimal? @db.Decimal(15, 2)
  evaluationValue Decimal? @db.Decimal(15, 2)
  bidIncrementStep Decimal? @db.Decimal(10, 2)
  status          String   @default("EM_BREVE")
  bidsCount       Int      @default(0)
  views           Int      @default(0)
  isFeatured      Boolean  @default(false)
  isExclusive     Boolean  @default(false)
  isRelisted      Boolean  @default(false)
  relistCount     Int      @default(0)
  discountPercentage Int?
  additionalTriggers Json?
  imageUrl        String?  @db.VarChar(255)
  imageMediaId    String?  @db.VarChar(100)
  galleryImageUrls Json?
  mediaItemIds    Json?
  inheritedMediaFromBemId String? // ID of the Bem to inherit media from
  type            String   @db.VarChar(100) // This is the denormalized category name
  condition       String?  @db.VarChar(100)
  dataAiHint      String?  @db.VarChar(100)
  winningBidTermUrl String?  @db.VarChar(255)
  allowInstallmentBids Boolean @default(false)
  
  // Location
  cityName        String?   @db.VarChar(100)
  stateUf         String?   @db.VarChar(2)
  latitude        Float?
  longitude       Float?
  mapAddress      String?   @db.VarChar(255)
  mapEmbedUrl     String?   @db.VarChar(500)
  mapStaticImageUrl String? @db.VarChar(255)

  // Dates
  endDate          DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate DateTime?

  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // RELATIONS
  auctionId       String
  auction         Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  categoryId      String?
  category        LotCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  subcategoryId   String?
  subcategory     Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  
  sellerId        String?
  seller          Seller? @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  
  auctioneerId    String?
  auctioneer      Auctioneer? @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  
  cityId          String?
  city            City? @relation(fields: [cityId], references: [id], onDelete: SetNull)
  
  stateId         String?
  state           State? @relation(fields: [stateId], references: [id], onDelete: SetNull)
  
  winnerId        String?
  winner          User? @relation("WonLots", fields: [winnerId], references: [id], onDelete: SetNull)

  originalLotId   String?  @unique
  originalLot     Lot?     @relation("RelistedLot", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot     Lot?     @relation("RelistedLot")

  bens            LotBens[]
  bids            Bid[]
  wins            UserWin[]
  reviews         Review[]
  questions       LotQuestion[]
  maxBids         UserLotMaxBid[]
  stageDetails    LotAuctionStageDetails[]
}

model Bem {
    id              String @id @default(uuid())
    publicId        String @unique @default(uuid())
    title           String @db.VarChar(200)
    description     String? @db.Text
    status          String @default("DISPONIVEL")
    evaluationValue Decimal? @db.Decimal(15, 2)
    imageUrl        String? @db.VarChar(255)
    imageMediaId    String? @db.VarChar(100)
    galleryImageUrls Json?
    mediaItemIds    Json?
    dataAiHint      String? @db.VarChar(100)
    locationCity    String? @db.VarChar(100)
    locationState   String? @db.VarChar(100)
    address         String? @db.VarChar(255)
    latitude        Float?
    longitude       Float?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    categoryId      String?
    category        LotCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

    subcategoryId   String?
    subcategory     Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)

    judicialProcessId String?
    judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)

    sellerId        String?
    seller          Seller? @relation(fields: [sellerId], references: [id], onDelete: SetNull)

    lots            LotBens[]
}


model LotBens {
    lotId String
    bemId String
    lot   Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
    bem   Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)

    @@id([lotId, bemId])
}

model LotAuctionStageDetails {
    id              String   @id @default(uuid())
    lotId           String
    auctionStageId  String
    initialBid      Decimal? @db.Decimal(15, 2)
    bidIncrement    Decimal? @db.Decimal(10, 2)
    lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
    auctionStage    AuctionStage @relation(fields: [auctionStageId], references: [id], onDelete: Cascade)

    @@unique([lotId, auctionStageId])
}

// =================================================================
// MODELOS DE ENTIDADES DE USUÁRIO E AUTENTICAÇÃO
// =================================================================

model User {
  id                      String   @id @default(uuid())
  uid                     String   @unique @default(uuid())
  email                   String   @unique
  password                String?
  fullName                String?
  sellerId                String?  @unique
  habilitationStatus      String   @default("PENDING_DOCUMENTS")
  accountType             String   @default("PHYSICAL")
  avatarUrl               String?
  dataAiHint              String?  @db.VarChar(100)
  badges                  Json?
  optInMarketing          Boolean  @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  cpf                     String?   @unique
  dateOfBirth             DateTime?
  rgNumber                String?
  rgIssuer                String?
  rgIssueDate             DateTime?
  rgState                 String?
  homePhone               String?
  cellPhone               String?
  gender                  String?
  profession              String?
  nationality             String?
  maritalStatus           String?
  propertyRegime          String?
  spouseName              String?
  spouseCpf               String?
  
  // Company info
  razaoSocial             String?
  cnpj                    String?   @unique
  inscricaoEstadual       String?
  website                 String?
  responsibleName         String?
  responsibleCpf          String?

  // Address
  zipCode                 String?
  street                  String?
  number                  String?
  complement              String?
  neighborhood            String?
  city                    String?
  state                   String?

  // RELATIONS
  roles                   UsersOnRoles[]
  documents               UserDocument[]
  notifications           Notification[]
  bids                    Bid[]
  wins                    UserWin[]    @relation("WonLots")
  maxBids                 UserLotMaxBid[]
  uploadedMedia           MediaItem[]
  sellerProfile           Seller?      @relation("SellerUserAccount")
}

model Role {
  id            String   @id @default(uuid())
  name          String
  nameNormalized String  @unique
  description   String?
  permissions   Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  users         UsersOnRoles[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

// =================================================================
// MODELOS DE ENTIDADES DE APOIO
// =================================================================

model LotCategory {
  id                String   @id @default(uuid())
  name              String
  slug              String   @unique
  description       String?  @db.VarChar(500)
  hasSubcategories  Boolean  @default(false)
  logoUrl           String?  @db.VarChar(255)
  logoMediaId       String?  @db.VarChar(100)
  dataAiHintLogo    String?  @db.VarChar(100)
  coverImageUrl     String?  @db.VarChar(255)
  coverImageMediaId String?  @db.VarChar(100)
  dataAiHintCover   String?  @db.VarChar(100)
  megaMenuImageUrl  String?  @db.VarChar(255)
  megaMenuImageMediaId String? @db.VarChar(100)
  dataAiHintMegaMenu String? @db.VarChar(100)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  subcategories     Subcategory[]
  lots              Lot[]
  bens              Bem[]
  auctions          Auction[]
}

model Subcategory {
  id               String      @id @default(uuid())
  name             String
  slug             String?
  parentCategoryId String
  description      String?     @db.VarChar(500)
  displayOrder     Int         @default(0)
  iconUrl          String?     @db.VarChar(255)
  iconMediaId      String?     @db.VarChar(100)
  dataAiHintIcon   String?     @db.VarChar(100)
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots             Lot[]
  bens             Bem[]
}


model Seller {
  id               String   @id @default(uuid())
  publicId         String   @unique @default(uuid())
  slug             String   @unique
  name             String   @unique
  contactName      String?  @db.VarChar(150)
  email            String?  @db.VarChar(150)
  phone            String?  @db.VarChar(20)
  address          String?  @db.VarChar(200)
  city             String?  @db.VarChar(100)
  state            String?  @db.VarChar(50)
  zipCode          String?  @db.VarChar(10)
  website          String?  @db.VarChar(255)
  logoUrl          String?  @db.VarChar(255)
  logoMediaId      String?  @db.VarChar(100)
  dataAiHintLogo   String?  @db.VarChar(100)
  description      String?  @db.Text
  isJudicial       Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  judicialBranchId  String?    @unique
  judicialBranch    JudicialBranch? @relation(fields: [judicialBranchId], references: [id])
  
  userId          String?     @unique
  user            User?       @relation("SellerUserAccount", fields: [userId], references: [id])

  auctions        Auction[]
  lots            Lot[]
  bens            Bem[]
  directSales     DirectSaleOffer[]
}


model Auctioneer {
  id                String   @id @default(uuid())
  publicId          String   @unique @default(uuid())
  slug              String   @unique
  name              String
  registrationNumber String? @db.VarChar(50)
  contactName       String?  @db.VarChar(150)
  email             String?  @db.VarChar(150)
  phone             String?  @db.VarChar(20)
  address           String?  @db.VarChar(200)
  city              String?  @db.VarChar(100)
  state             String?  @db.VarChar(50)
  zipCode           String?  @db.VarChar(10)
  website           String?  @db.VarChar(255)
  logoUrl           String?  @db.VarChar(255)
  logoMediaId       String?  @db.VarChar(100)
  dataAiHintLogo    String?  @db.VarChar(100)
  description       String?  @db.Text
  userId            String?  @unique
  user              User?    @relation(fields: [userId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  auctions          Auction[]
  lots              Lot[]
}


model State {
  id        String   @id @default(uuid())
  name      String
  uf        String   @unique
  slug      String?  @unique
  cityCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  cities    City[]
  districts JudicialDistrict[]
  auctions  Auction[]
  lots      Lot[]
}

model City {
  id       String   @id @default(uuid())
  name     String
  slug     String?
  stateId  String
  stateUf  String?
  ibgeCode String?  @unique
  lotCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  state    State @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots     Lot[]
  auctions Auction[]
}

model Bid {
  id              String   @id @default(uuid())
  lotId           String
  auctionId       String
  bidderId        String
  bidderDisplay   String?
  amount          Decimal  @db.Decimal(15, 2)
  timestamp       DateTime @default(now())
  
  lot             Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction         Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder          User @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
    id              String   @id @default(uuid())
    lotId           String   @unique
    userId          String
    winningBidAmount Decimal @db.Decimal(15, 2)
    winDate         DateTime @default(now())
    paymentStatus   String
    invoiceUrl      String?
    
    lot             Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
    user            User @relation("WonLots", fields: [userId], references: [id], onDelete: Cascade)
    installments    InstallmentPayment[]
}

model InstallmentPayment {
    id                 String   @id @default(uuid())
    userWinId          String
    installmentNumber  Int
    amount             Decimal  @db.Decimal(15, 2)
    dueDate            DateTime
    status             String   @default("PENDENTE") // PENDENTE, PAGO, ATRASADO
    paymentDate        DateTime?
    paymentMethod      String?
    transactionId      String?
    
    userWin            UserWin @relation(fields: [userWinId], references: [id], onDelete: Cascade)
}


model Notification {
    id         String   @id @default(uuid())
    userId     String
    message    String
    link       String?
    isRead     Boolean  @default(false)
    createdAt  DateTime @default(now())
    
    user       User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DocumentType {
    id          String @id @default(uuid())
    name        String @unique
    description String?
    isRequired  Boolean @default(true)
    appliesTo   String  // e.g. "PHYSICAL,LEGAL", "ALL", "PROCESS"
    documents   UserDocument[]
}

model UserDocument {
    id              String @id @default(uuid())
    userId          String
    documentTypeId  String
    status          String @default("PENDING_ANALYSIS")
    fileUrl         String @db.VarChar(255)
    fileName        String?
    rejectionReason String? @db.Text
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    
    user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
    documentType    DocumentType @relation(fields: [documentTypeId], references: [id])
    
    @@unique([userId, documentTypeId])
}


model MediaItem {
    id                String @id @default(uuid())
    fileName          String
    storagePath       String @db.VarChar(255)
    title             String?
    altText           String?
    caption           String?
    description       String? @db.Text
    mimeType          String
    sizeBytes         Int
    urlOriginal       String @db.VarChar(255)
    urlThumbnail      String? @db.VarChar(255)
    urlMedium         String? @db.VarChar(255)
    urlLarge          String? @db.VarChar(255)
    linkedLotIds      Json?
    dataAiHint        String? @db.VarChar(100)
    
    uploadedByUserId  String?
    uploadedBy        User?   @relation(fields: [uploadedByUserId], references: [id], onDelete: SetNull)
    uploadedAt        DateTime @default(now())
    
    judicialProcessId String?
    judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
}


model DirectSaleOffer {
    id                    String @id @default(uuid())
    publicId              String @unique @default(uuid())
    title                 String @db.VarChar(255)
    description           String? @db.Text
    offerType             String
    price                 Decimal? @db.Decimal(15, 2)
    minimumOfferPrice     Decimal? @db.Decimal(15, 2)
    status                String   @default("PENDING_APPROVAL")
    category              String   @db.VarChar(100)
    sellerId              String
    sellerName            String   @db.VarChar(150)
    sellerLogoUrl         String?  @db.VarChar(255)
    dataAiHintSellerLogo  String?  @db.VarChar(100)
    locationCity          String?  @db.VarChar(100)
    locationState         String?  @db.VarChar(100)
    imageUrl              String?  @db.VarChar(255)
    imageMediaId          String?  @db.VarChar(100)
    dataAiHint            String?  @db.VarChar(100)
    galleryImageUrls      Json?
    mediaItemIds          Json?
    itemsIncluded         Json?
    views                 Int      @default(0)
    expiresAt             DateTime?
    createdAt             DateTime @default(now())
    updatedAt             DateTime @updatedAt
    
    seller                Seller @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model UserLotMaxBid {
    id          String @id @default(uuid())
    userId      String
    lotId       String
    maxAmount   Decimal @db.Decimal(15, 2)
    isActive    Boolean @default(true)
    createdAt   DateTime @default(now())
    
    user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
    lot         Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)

    @@unique([userId, lotId])
}


// =================================================================
// MODELOS DE ENTIDADES JUDICIAIS
// =================================================================

model Court {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  stateUf   String
  website   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  districts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions Auction[]
}

model JudicialDistrict {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  courtId   String
  stateId   String
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  court     Court @relation(fields: [courtId], references: [id])
  state     State @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions Auction[]
}

model JudicialBranch {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  districtId  String
  contactName String?  @db.VarChar(150)
  phone       String?  @db.VarChar(20)
  email       String?  @db.VarChar(150)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  district    JudicialDistrict @relation(fields: [districtId], references: [id])
  seller      Seller?
  judicialProcesses JudicialProcess[]
  auctions    Auction[]
}

model JudicialProcess {
  id              String   @id @default(uuid())
  publicId        String   @unique @default(uuid())
  processNumber   String
  isElectronic    Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  courtId         String?
  court           Court?      @relation(fields: [courtId], references: [id])
  districtId      String?
  district        JudicialDistrict? @relation(fields: [districtId], references: [id])
  branchId        String?
  branch          JudicialBranch?   @relation(fields: [branchId], references: [id])
  
  sellerId        String?
  seller          Seller?     @relation(fields: [sellerId], references: [id], onDelete: SetNull)

  parties         JudicialParty[]
  bens            Bem[]
  mediaItems      MediaItem[]
  auction         Auction[]
}

model JudicialParty {
  id              String   @id @default(uuid())
  processId       String
  name            String   @db.VarChar(255)
  documentNumber  String?  @db.VarChar(50)
  partyType       String   @db.VarChar(50)
  
  process         JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

// =================================================================
// MODELOS PARA O CONSTRUTOR DE RELATÓRIOS
// =================================================================
model Report {
    id          String @id @default(uuid())
    name        String
    description String?
    definition  Json // Stores the JSON definition of the report layout and elements
    ownerId     String? // Could be linked to a User
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model DataSource {
    id          String @id @default(uuid())
    name        String
    type        String // e.g., 'PrismaQuery', 'ApiEndpoint', 'StaticJson'
    connectionDetails Json // Stores connection string, query, etc.
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}


// =================================================================
// MODELOS PARA APLICAÇÃO GERAL
// =================================================================

model ContactMessage {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(150)
  email     String   @db.VarChar(150)
  subject   String?  @db.VarChar(255)
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentTemplate {
    id          String @id @default(uuid())
    name        String
    type        String // WINNING_BID_TERM, EVALUATION_REPORT, etc.
    content     String @db.Text
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Review {
    id              String @id @default(uuid())
    lotId           String
    auctionId       String
    userId          String
    userDisplayName String
    rating          Int // 1 to 5
    comment         String @db.Text
    createdAt       DateTime @default(now())
    lot             Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model LotQuestion {
    id                      String @id @default(uuid())
    lotId                   String
    auctionId               String
    userId                  String
    userDisplayName         String
    questionText            String @db.Text
    isPublic                Boolean @default(true)
    answerText              String? @db.Text
    answeredByUserId        String?
    answeredByUserDisplayName String?
    answeredAt              DateTime?
    createdAt               DateTime @default(now())
    lot                     Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model AuctionHabilitation {
    userId      String
    auctionId   String
    habilitatedAt DateTime @default(now())
    user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    auction     Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

    @@id([userId, auctionId])
}


// =================================================================
// MODELOS PARA O PAINEL DE CONFIGURAÇÕES
// =================================================================
model PlatformSettings {
    id                      String @id @default("global")
    siteTitle               String
    siteTagline             String?
    logoUrl                 String?
    faviconUrl              String?
    galleryImageBasePath    String
    storageProvider         String   @default("local") // 'local' or 'firebase'
    firebaseStorageBucket   String?
    activeThemeName         String?
    themes                  Json?
    platformPublicIdMasks   Json?
    homepageSections        Json?
    mentalTriggerSettings   Json?
    sectionBadgeVisibility  Json?
    mapSettings             Json?
    searchPaginationType    String   @default("loadMore")
    searchItemsPerPage      Int      @default(12)
    searchLoadMoreCount     Int      @default(12)
    showCountdownOnLotDetail Boolean @default(true)
    showCountdownOnCards    Boolean @default(true)
    showRelatedLotsOnLotDetail Boolean @default(true)
    relatedLotsCount        Int      @default(5)
    defaultUrgencyTimerHours Int?
    variableIncrementTable  Json?
    biddingSettings         Json?
    paymentGatewaySettings  Json?
    defaultListItemsPerPage Int @default(10)
    updatedAt               DateTime @updatedAt
}

model VehicleMake {
    id      String          @id @default(uuid())
    name    String          @unique
    slug    String          @unique
    models  VehicleModel[]
}

model VehicleModel {
    id      String      @id @default(uuid())
    name    String
    slug    String
    makeId  String
    make    VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)
    @@unique([makeId, name])
}
