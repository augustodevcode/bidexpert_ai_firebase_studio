
// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =====================================
// ENUMS
// =====================================

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}


// =====================================
// MODELS (Ordered by Dependencies)
// =====================================

model PlatformSettings {
  id                         String    @id @default("global")
  siteTitle                  String    @default("BidExpert")
  siteTagline                String?
  logoUrl                    String?
  faviconUrl                 String?
  galleryImageBasePath       String    @default("/uploads/media/")
  storageProvider            String    @default("local") // 'local' or 'firebase'
  firebaseStorageBucket      String?
  activeThemeName            String?
  themes                     Json? // Storing array as a single JSON object
  platformPublicIdMasks      Json?
  homepageSections           Json? // Storing array as a single JSON object
  mentalTriggerSettings      Json?
  sectionBadgeVisibility     Json?
  mapSettings                Json?
  searchPaginationType       String    @default("loadMore")
  searchItemsPerPage         Int       @default(12)
  searchLoadMoreCount        Int       @default(12)
  showCountdownOnLotDetail   Boolean   @default(true)
  showCountdownOnCards       Boolean   @default(true)
  showRelatedLotsOnLotDetail Boolean   @default(true)
  relatedLotsCount           Int       @default(4)
  defaultUrgencyTimerHours   Int?
  variableIncrementTable     Json? // Storing array as a single JSON object
  biddingSettings            Json?
  paymentGatewaySettings     Json?
  defaultListItemsPerPage    Int       @default(10)
  updatedAt                  DateTime? @updatedAt
}

model Role {
  id              String         @id @default(uuid())
  name            String
  nameNormalized  String         @unique
  description     String?
  permissions     Json?
  users           UsersOnRoles[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model State {
  id         String     @id @default(uuid())
  name       String
  uf         String     @unique
  slug       String     @unique
  cityCount  Int        @default(0)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  cities     City[]
  districts  JudicialDistrict[]
  auctions   Auction[]
  lots       Lot[]
}

model LotCategory {
  id                   String            @id @default(uuid())
  name                 String
  slug                 String            @unique
  description          String?
  hasSubcategories     Boolean           @default(false)
  itemCount            Int               @default(0)
  iconName             String?
  dataAiHintIcon       String?
  logoUrl              String?
  logoMediaId          String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  lots                 Lot[]
  bens                 Bem[]
  auctions             Auction[]
  subcategories      Subcategory[]
  directSaleOffers   DirectSaleOffer[]
}

model Subcategory {
  id                String       @id @default(uuid())
  name              String
  slug              String?
  parentCategoryId  String
  parentCategory    LotCategory  @relation(fields: [parentCategoryId], references: [id])
  description       String?
  displayOrder      Int          @default(0)
  iconUrl           String?
  iconMediaId       String?
  dataAiHintIcon    String?
  lots              Lot[]
  bens              Bem[]
}

model DocumentType {
  id          String         @id @default(uuid())
  name        String
  description String?
  isRequired  Boolean        @default(true)
  appliesTo   String?
  documents   UserDocument[]
}

model DocumentTemplate {
  id        String      @id @default(uuid())
  name      String
  type      String // e.g., WINNING_BID_TERM, EVALUATION_REPORT
  content   String      @db.Text
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model City {
  id        String    @id @default(uuid())
  name      String
  slug      String?
  stateId   String
  stateUf   String?
  ibgeCode  String?   @unique
  lotCount  Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  state     State     @relation(fields: [stateId], references: [id])
  lots      Lot[]
}

model Court {
  id                 String             @id @default(uuid())
  name               String
  slug               String?
  stateUf            String?
  website            String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  districts          JudicialDistrict[]
  judicialProcesses  JudicialProcess[]
  auctions           Auction[]
}

model JudicialDistrict {
  id                 String           @id @default(uuid())
  name               String
  slug               String           @unique
  courtId            String?          @index
  stateId            String?          @index
  zipCode            String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  court              Court?           @relation(fields: [courtId], references: [id])
  state              State?           @relation(fields: [stateId], references: [id])
  branches           JudicialBranch[]
  judicialProcesses  JudicialProcess[]
  auctions           Auction[]
}

model JudicialBranch {
  id                 String            @id @default(uuid())
  name               String
  slug               String            @unique
  districtId         String?           @index
  contactName        String?
  phone              String?
  email              String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  district           JudicialDistrict? @relation(fields: [districtId], references: [id])
  sellers            Seller[]
  judicialProcesses  JudicialProcess[]
  auctions           Auction[]
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model User {
  id                    String                 @id @default(uuid())
  email                 String                 @unique
  password              String?
  fullName              String?
  cpf                   String?
  cellPhone             String?
  homePhone             String?
  rgNumber              String?
  rgIssuer              String?
  rgIssueDate           DateTime?
  rgState               String?
  dateOfBirth           DateTime?
  gender                String?
  profession            String?
  nationality           String?
  maritalStatus         String?
  propertyRegime        String?
  spouseName            String?
  spouseCpf             String?
  zipCode               String?
  street                String?
  number                String?
  complement            String?
  neighborhood          String?
  city                  String?
  state                 String?
  avatarUrl             String?
  dataAiHint            String?
  badges                Json?
  sellerId              String?                @unique
  habilitationStatus    UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType           AccountType            @default(PHYSICAL)
  razaoSocial           String?
  cnpj                  String?
  inscricaoEstadual     String?
  website               String?
  responsibleName       String?
  responsibleCpf        String?
  optInMarketing        Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  roles                 UsersOnRoles[]
  seller                Seller?                @relation("SellerUser")
  bids                  Bid[]
  wins                  UserWin[]
  documents             UserDocument[]
  notifications         Notification[]
  habilitations         AuctionHabilitation[]
  maxBids               UserLotMaxBid[]
  uploadedMedia         MediaItem[]            @relation("UploadedBy")
  wonLots               Lot[]                  @relation("WonLots")
  auctioneer            Auctioneer?
}

model Auctioneer {
  id                   String    @id @default(uuid())
  publicId             String    @unique
  slug                 String    @unique
  name                 String
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?   @db.Text
  rating               Float?
  auctionsConductedCount Int?      @default(0)
  totalValueSold       Decimal?  @db.Decimal(15, 2)
  memberSince          DateTime? @default(now())
  userId               String?   @unique
  user                 User?     @relation(fields: [userId], references: [id])
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  auctions             Auction[]
}

model Seller {
  id                      String             @id @default(uuid())
  publicId                String             @unique
  slug                    String             @unique
  name                    String             @unique
  contactName             String?
  email                   String?
  phone                   String?
  address                 String?
  city                    String?
  state                   String?
  zipCode                 String?
  website                 String?
  logoUrl                 String?
  logoMediaId             String?
  dataAiHintLogo          String?
  description             String?            @db.Text
  rating                  Float?
  activeLotsCount         Int?               @default(0)
  totalSalesValue         Decimal?           @db.Decimal(15, 2)
  auctionsFacilitatedCount Int?               @default(0)
  memberSince             DateTime?          @default(now())
  userId                  String?            @unique
  user                    User?              @relation("SellerUser", fields: [userId], references: [id], onDelete: SetNull)
  isJudicial              Boolean            @default(false)
  judicialBranchId        String?            @index
  judicialBranch          JudicialBranch?    @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  auctions                Auction[]
  lots                    Lot[]
  bens                    Bem[]
  directSaleOffers        DirectSaleOffer[]
  judicialProcesses       JudicialProcess[]
}

model Bem {
  id                    String           @id @default(uuid())
  publicId              String           @unique
  title                 String
  description           String?          @db.Text
  status                String           @default("DISPONIVEL") // DISPONIVEL, LOTEADO, VENDIDO, REMOVIDO, INATIVADO
  categoryId            String
  category              LotCategory      @relation(fields: [categoryId], references: [id])
  subcategoryId         String?
  subcategory           Subcategory?     @relation(fields: [subcategoryId], references: [id])
  judicialProcessId     String?          @index
  judicialProcess       JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  sellerId              String?          @index
  seller                Seller?          @relation(fields: [sellerId], references: [id])
  evaluationValue       Decimal?         @db.Decimal(15, 2)
  imageUrl              String?
  imageMediaId          String?
  galleryImageUrls      Json?
  mediaItemIds          Json?
  dataAiHint            String?
  locationCity          String?
  locationState         String?
  address               String?
  latitude              Float?
  longitude             Float?
  
  // Vehicle specific
  plate                   String?
  make                    String?
  model                   String?
  version                 String?
  year                    Int?
  modelYear               Int?
  mileage                 Int?
  color                   String?
  fuelType                String?
  transmissionType        String?
  bodyType                String?
  vin                     String?
  renavam                 String?
  enginePower             String?
  numberOfDoors           Int?
  vehicleOptions          String? @db.Text
  detranStatus            String?
  debts                   String? @db.Text
  runningCondition        String?
  bodyCondition           String?
  tiresCondition          String?
  hasKey                  Boolean?

  // Real Estate specific
  propertyRegistrationNumber String?
  iptuNumber               String?
  isOccupied               Boolean?
  totalArea                Decimal? @db.Decimal(15, 2)
  builtArea                Decimal? @db.Decimal(15, 2)
  bedrooms                 Int?
  suites                   Int?
  bathrooms                Int?
  parkingSpaces            Int?
  constructionType         String?
  finishes                 String? @db.Text
  infrastructure           String? @db.Text
  condoDetails             String? @db.Text
  improvements             String? @db.Text
  topography               String?
  liensAndEncumbrances     String? @db.Text
  propertyDebts            String? @db.Text
  unregisteredRecords      String? @db.Text
  hasHabiteSe              Boolean?
  zoningRestrictions       String?
  amenities                Json?

  // Eletrônicos
  brand                    String?
  serialNumber             String?
  itemCondition            String?
  specifications           String? @db.Text
  includedAccessories      String? @db.Text
  batteryCondition         String?
  hasInvoice               Boolean?
  hasWarranty              Boolean?
  repairHistory            String? @db.Text
  
  // Eletrodomésticos
  applianceCapacity        String?
  voltage                  String?
  applianceType            String?
  additionalFunctions      String?
  
  // Máquinas e Equipamentos
  hoursUsed                Int?
  engineType               String?
  capacityOrPower          String?
  maintenanceHistory       String? @db.Text
  installationLocation     String?
  compliesWithNR           String?
  operatingLicenses        String?
  
  // Semoventes (Livestock)
  breed                    String?
  age                      String?
  sex                      String?
  weight                   String?
  individualId             String?
  purpose                  String?
  sanitaryCondition        String?
  lineage                  String?
  isPregnant               Boolean?
  specialSkills            String?
  gtaDocument              String?
  breedRegistryDocument    String?

  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  lots                  LotBens[]
}

model LotBens {
  lotId   String
  bemId   String
  lot     Lot    @relation(fields: [lotId], references: [id])
  bem     Bem    @relation(fields: [bemId], references: [id])

  @@id([lotId, bemId])
}

model Auction {
  id                           String                 @id @default(uuid())
  publicId                     String                 @unique
  slug                         String                 @unique
  title                        String
  description                  String?                @db.Text
  status                       AuctionStatus          @default(RASCUNHO)
  auctionDate                  DateTime               @default(now())
  endDate                      DateTime?
  totalLots                    Int                    @default(0)
  visits                       Int                    @default(0)
  totalHabilitatedUsers        Int                    @default(0)
  initialOffer                 Decimal?               @db.Decimal(15, 2)
  estimatedRevenue             Decimal?               @db.Decimal(15, 2)
  achievedRevenue              Decimal?               @db.Decimal(15, 2)
  isFavorite                   Boolean                @default(false)
  isFeaturedOnMarketplace      Boolean                @default(false)
  marketplaceAnnouncementTitle String?
  imageUrl                     String?
  imageMediaId                 String?
  dataAiHint                   String?
  documentsUrl                 String?
  evaluationReportUrl          String?
  auctionCertificateUrl        String?
  auctionType                  AuctionType?
  auctionMethod                AuctionMethod          @default(STANDARD)
  participation                AuctionParticipation   @default(ONLINE)
  address                      String?
  zipCode                      String?
  latitude                     Float?
  longitude                    Float?
  onlineUrl                    String?
  sellingBranch                String?
  automaticBiddingEnabled      Boolean                @default(false)
  allowInstallmentBids         Boolean                @default(true)
  silentBiddingEnabled         Boolean                @default(false)
  allowMultipleBidsPerUser     Boolean                @default(true)
  softCloseEnabled             Boolean                @default(false)
  softCloseMinutes             Int                    @default(2)
  decrementAmount              Decimal?               @db.Decimal(15, 2)
  decrementIntervalSeconds     Int?
  floorPrice                   Decimal?               @db.Decimal(15, 2)
  autoRelistSettings           Json?
  judicialProcessId            String?                @index
  auctioneerId                 String?                @index
  sellerId                     String?                @index
  categoryId                   String?                @index
  cityId                       String?                @index
  stateId                      String?                @index
  courtId                      String?                @index
  districtId                   String?                @index
  branchId                     String?                @index
  auctioneer                   Auctioneer?            @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  seller                       Seller?                @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  category                     LotCategory?           @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  judicialProcess              JudicialProcess?       @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  court                        Court?                 @relation("AuctionCourt", fields: [courtId], references: [id], onDelete: SetNull)
  district                     JudicialDistrict?      @relation("AuctionDistrict", fields: [districtId], references: [id], onDelete: SetNull)
  branch                       JudicialBranch?        @relation("AuctionBranch", fields: [branchId], references: [id], onDelete: SetNull)
  city                         City?                  @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state                        State?                 @relation(fields: [stateId], references: [id], onDelete: SetNull)
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  lots                         Lot[]
  bids                         Bid[]
  auctionStages                AuctionStage[]
  habilitations                AuctionHabilitation[]
}

model Lot {
  id                       String               @id @default(uuid())
  publicId                 String               @unique
  auctionId                String               @index
  slug                     String?
  number                   String?
  title                    String
  description              String?              @db.Text
  price                    Decimal              @db.Decimal(15, 2)
  initialPrice             Decimal?             @db.Decimal(15, 2)
  secondInitialPrice       Decimal?             @db.Decimal(15, 2)
  evaluationValue          Decimal?             @db.Decimal(15, 2)
  bidIncrementStep         Decimal?             @db.Decimal(10, 2)
  status                   LotStatus            @default(EM_BREVE)
  bidsCount                Int?                 @default(0)
  views                    Int?                 @default(0)
  isFeatured               Boolean?             @default(false)
  isExclusive              Boolean?             @default(false)
  discountPercentage       Int?
  additionalTriggers       Json?
  imageUrl                 String?
  imageMediaId             String?
  galleryImageUrls         Json?
  mediaItemIds             Json?
  inheritedMediaFromBemId  String?
  type                     String
  categoryId               String?              @index
  subcategoryId            String?              @index
  auctionName              String?
  sellerId                 String?              @index
  sellerName               String?
  auctioneerId             String?              @index
  cityId                   String?              @index
  stateId                  String?              @index
  cityName                 String?
  stateUf                  String?
  latitude                 Float?
  longitude                Float?
  mapAddress               String?
  mapEmbedUrl              String?
  mapStaticImageUrl        String?
  endDate                  DateTime?
  auctionDate              DateTime?
  lotSpecificAuctionDate   DateTime?
  secondAuctionDate        DateTime?
  condition                String?
  dataAiHint               String?
  winnerId                 String?              @index
  winningBidTermUrl        String?
  isRelisted               Boolean              @default(false)
  relistCount              Int                  @default(0)
  originalLotId            String?              @unique
  allowInstallmentBids     Boolean              @default(false)
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  auction                  Auction              @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                 LotCategory?         @relation(fields: [categoryId], references: [id])
  subcategory              Subcategory?         @relation(fields: [subcategoryId], references: [id])
  seller                   Seller?              @relation(fields: [sellerId], references: [id])
  auctioneer               Auctioneer?          @relation(fields: [auctioneerId], references: [id])
  city                     City?                @relation(fields: [cityId], references: [id])
  state                    State?               @relation(fields: [stateId], references: [id])
  winner                   User?                @relation("WonLots", fields: [winnerId], references: [id], onDelete: SetNull)
  originalLot              Lot?                 @relation("RelistHistory", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot              Lot[]                @relation("RelistHistory")
  bens                     LotBens[]
  bids                     Bid[]
  userWins                 UserWin[]
  maxBids                  UserLotMaxBid[]
  stageDetails             LotAuctionStageDetails[]
}

model LotAuctionStageDetails {
  id             String   @id @default(uuid())
  lotId          String   @index
  stageId        String   @index
  initialBid     Decimal? @db.Decimal(15, 2)
  bidIncrement   Decimal? @db.Decimal(10, 2)
  lot            Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  stage          AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)

  @@unique([lotId, stageId])
}

model AuctionStage {
  id                String                   @id @default(uuid())
  auctionId         String                   @index
  name              String
  startDate         DateTime
  endDate           DateTime
  evaluationValue   Decimal?                 @db.Decimal(15, 2)
  auction           Auction                  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  lotStageDetails   LotAuctionStageDetails[]
}

model DirectSaleOffer {
  id                   String        @id @default(uuid())
  publicId             String        @unique
  title                String
  description          String?       @db.Text
  offerType            DirectSaleOfferType
  price                Decimal?      @db.Decimal(15, 2)
  minimumOfferPrice    Decimal?      @db.Decimal(15, 2)
  status               DirectSaleOfferStatus @default(ACTIVE)
  categoryId           String?       @index
  sellerId             String?       @index
  sellerName           String?
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int?          @default(0)
  expiresAt            DateTime?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  category             LotCategory?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  seller               Seller?       @relation(fields: [sellerId], references: [id], onDelete: SetNull)
}

model JudicialProcess {
  id              String         @id @default(uuid())
  publicId        String         @unique
  processNumber   String
  isElectronic    Boolean        @default(true)
  courtId         String?        @index
  districtId      String?        @index
  branchId        String?        @index
  sellerId        String?        @index
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  bens            Bem[]
  auctions        Auction[]
  court           Court?         @relation(fields: [courtId], references: [id])
  district        JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch          JudicialBranch? @relation(fields: [branchId], references: [id])
  seller          Seller?        @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties         JudicialParty[]
}

model JudicialParty {
  id              String           @id @default(uuid())
  processId       String           @index
  name            String
  documentNumber  String?
  partyType       ProcessPartyType
  process         JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model UserDocument {
  id                String             @id @default(uuid())
  userId            String             @index
  documentTypeId    String             @index
  status            UserDocumentStatus @default(PENDING_ANALYSIS)
  fileUrl           String
  fileName          String?
  rejectionReason   String?            @db.Text
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType      DocumentType       @relation(fields: [documentTypeId], references: [id])
}

model UsersOnRoles {
  userId      String
  roleId      String
  assignedAt  DateTime @default(now())
  assignedBy  String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model Bid {
  id             String   @id @default(uuid())
  lotId          String   @index
  auctionId      String   @index
  bidderId       String   @index
  bidderDisplay  String?
  amount         Decimal  @db.Decimal(15, 2)
  timestamp      DateTime @default(now())
  lot            Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction        Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id                 String               @id @default(uuid())
  lotId              String               @unique // A lot can only be won once
  userId             String               @index
  winningBidAmount   Decimal              @db.Decimal(15, 2)
  winDate            DateTime             @default(now())
  paymentStatus      PaymentStatus        @default(PENDENTE)
  invoiceUrl         String?
  lot                Lot                  @relation(fields: [lotId], references: [id])
  user               User                 @relation(fields: [userId], references: [id])
  installments       InstallmentPayment[]
}

model InstallmentPayment {
  id                 String        @id @default(uuid())
  userWinId          String        @index
  userWin            UserWin       @relation(fields: [userWinId], references: [id])
  installmentNumber  Int
  amount             Decimal       @db.Decimal(15, 2)
  dueDate            DateTime
  status             PaymentStatus @default(PENDENTE)
  paymentDate        DateTime?
  paymentMethod      String?
  transactionId      String?
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String   @index
  lotId     String   @index
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model Notification {
    id String @id @default(uuid())
    userId String @index
    user User @relation(fields: [userId], references: [id])
    message String
    link String?
    isRead Boolean @default(false)
    createdAt DateTime @default(now())
}

model AuctionHabilitation {
  userId        String
  auctionId     String
  habilitatedAt DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@id([userId, auctionId])
}

model MediaItem {
  id                  String   @id @default(uuid())
  fileName            String
  storagePath         String
  title               String
  altText             String?
  caption             String?
  description         String?  @db.Text
  mimeType            String
  sizeBytes           Int
  urlOriginal         String
  urlThumbnail        String?
  urlMedium           String?
  urlLarge            String?
  linkedLotIds        Json?
  judicialProcessId   String?  @index
  dataAiHint          String?
  uploadedByUserId    String?  @index("uploadedBy_idx")
  uploadedAt          DateTime @default(now())

  uploadedBy          User?    @relation("UploadedBy", fields: [uploadedByUserId], references: [id], onDelete: SetNull)
}

model VehicleMake {
  id    String @id @default(uuid())
  name  String @unique
  slug  String @unique
  models VehicleModel[]
}

model VehicleModel {
  id      String      @id @default(uuid())
  name    String
  slug    String
  makeId  String
  make    VehicleMake @relation(fields: [makeId], references: [id])

  @@unique([makeId, name])
}
