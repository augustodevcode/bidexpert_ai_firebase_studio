// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// =================================================================
// 1. CORE & SETTINGS
// =================================================================
model PlatformSettings {
  id                            String @id @default(cuid())
  siteTitle                     String @default("BidExpert")
  siteTagline                   String?
  logoUrl                       String?
  faviconUrl                    String?
  galleryImageBasePath          String @default("/uploads/media/")
  storageProvider               String @default("local") // "local" or "firebase"
  firebaseStorageBucket         String?
  activeThemeName               String?
  themes                        Json?
  platformPublicIdMasks         Json?
  homepageSections              Json?
  mentalTriggerSettings         Json?
  sectionBadgeVisibility        Json?
  mapSettings                   Json?
  searchPaginationType          String @default("loadMore")
  searchItemsPerPage            Int    @default(12)
  searchLoadMoreCount           Int    @default(12)
  showCountdownOnLotDetail      Boolean @default(true)
  showCountdownOnCards          Boolean @default(true)
  showRelatedLotsOnLotDetail    Boolean @default(true)
  relatedLotsCount              Int @default(5)
  defaultUrgencyTimerHours      Int?
  variableIncrementTable        Json?
  biddingSettings               Json?
  paymentGatewaySettings        Json?
  defaultListItemsPerPage       Int @default(10)
  updatedAt                     DateTime @updatedAt
}

model Role {
  id                String @id @default(cuid())
  name              String 
  nameNormalized    String  @unique // For system checks, e.g., ADMINISTRATOR
  description       String?
  permissions       String[]
  users             UsersOnRoles[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String // e.g., 'system', 'admin-user-id'

  @@id([userId, roleId])
}


// =================================================================
// 2. USER & AUTHENTICATION
// =================================================================
model User {
  id                   String     @id @default(cuid())
  email                String     @unique
  password             String?
  fullName             String?
  avatarUrl            String?
  dataAiHint           String?
  habilitationStatus   UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType          AccountType @default(PHYSICAL)
  
  // Relational Fields
  seller               Seller?     // If this user is also a seller
  auctioneer           Auctioneer? // If this user is also an auctioneer
  roles                UsersOnRoles[]
  documents            UserDocument[]
  notifications        Notification[]
  bids                 Bid[]
  wins                 UserWin[]
  maxBids              UserLotMaxBid[]
  uploadedMedia        MediaItem[] @relation("UploadedBy")
  answeredQuestions    LotQuestion[] @relation("AnsweredByUser")
  habilitatedFor       AuctionHabilitation[]

  // PF Details
  cpf                   String?
  rgNumber              String?
  rgIssuer              String?
  rgIssueDate           DateTime?
  rgState               String?
  dateOfBirth           DateTime?
  cellPhone             String?
  homePhone             String?
  gender                String?
  profession            String?
  nationality           String?
  maritalStatus         String?
  propertyRegime        String? // Regime de bens
  spouseName            String?
  spouseCpf             String?

  // PJ Details
  razaoSocial           String?
  cnpj                  String?
  inscricaoEstadual     String?
  website               String?
  
  // Responsible Person for PJ
  responsibleName       String?
  responsibleCpf        String?

  // Address
  zipCode               String?
  street                String?
  number                String?
  complement            String?
  neighborhood          String?
  city                  String?
  state                 String?

  // Preferences & Timestamps
  optInMarketing        Boolean  @default(false)
  badges                String[]
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

// =================================================================
// 3. GEOGRAPHICAL & JUDICIAL ENTITIES
// =================================================================

model State {
  id        String   @id @default(cuid())
  name      String
  uf        String   @unique
  slug      String   @unique
  cities    City[]
  districts JudicialDistrict[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id        String   @id @default(cuid())
  name      String
  slug      String
  state     State    @relation(fields: [stateId], references: [id])
  stateId   String
  stateUf   String
  ibgeCode  String?  @unique
  lots      Lot[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Court {
  id                String             @id @default(cuid())
  name              String
  slug              String             @unique
  stateUf           String
  website           String?
  districts         JudicialDistrict[]
  judicialProcesses JudicialProcess[]  @relation("CourtToProcess")
  auctions          Auction[]          @relation("CourtToAuction")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model JudicialDistrict {
  id                String             @id @default(cuid())
  name              String
  slug              String             @unique
  court             Court?             @relation("CourtToProcess", fields: [courtId], references: [id])
  courtId           String?
  state             State?             @relation(fields: [stateId], references: [id])
  stateId           String?
  zipCode           String?
  branches          JudicialBranch[]
  judicialProcesses JudicialProcess[]  @relation("DistrictToProcess")
  auctions          Auction[]          @relation("DistrictToAuction")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model JudicialBranch {
  id                String             @id @default(cuid())
  name              String
  slug              String             @unique
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  sellers           Seller[]           @relation("BranchToSeller")
  judicialProcesses JudicialProcess[]  @relation("BranchToProcess")
  auctions          Auction[]          @relation("BranchToAuction")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

// =================================================================
// 4. CORE AUCTION ENTITIES
// =================================================================

model Auctioneer {
  id                   String    @id @default(cuid())
  publicId             String    @unique
  slug                 String    @unique
  name                 String
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?   @db.Text
  userId               String?   @unique
  user                 User?     @relation(fields: [userId], references: [id])
  auctions             Auction[]
  lots                 Lot[]
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model Seller {
  id                 String          @id @default(cuid())
  publicId           String          @unique
  slug               String          @unique
  name               String          @unique
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?         @db.Text
  userId             String?         @unique
  user               User?           @relation(fields: [userId], references: [id])
  isJudicial         Boolean         @default(false)
  judicialBranch     JudicialBranch? @relation("BranchToSeller", fields: [judicialBranchId], references: [id])
  judicialBranchId   String?
  auctions           Auction[]
  lots               Lot[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
  judicialProcesses  JudicialProcess[]
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
}

model Auction {
  id                              String          @id @default(cuid())
  publicId                        String          @unique
  slug                            String          @unique
  title                           String
  description                     String?         @db.Text
  status                          AuctionStatus   @default(RASCUNHO)
  auctionType                     AuctionType?
  auctionMethod                   AuctionMethod?  @default(STANDARD)
  participation                   AuctionParticipation? @default(ONLINE)
  
  // Location fields for presencial/hibrido
  address                         String?
  cityId                          String?
  city                            City? @relation(fields: [cityId], references: [id])
  stateId                         String?
  state                           State? @relation(fields: [stateId], references: [id])
  zipCode                         String?
  onlineUrl                       String?

  auctionDate                     DateTime
  endDate                         DateTime?
  auctionStages                   AuctionStage[]

  // Relational Fields
  auctioneerId                    String?
  auctioneer                      Auctioneer?     @relation(fields: [auctioneerId], references: [id])
  sellerId                        String?
  seller                          Seller?         @relation(fields: [sellerId], references: [id])
  categoryId                      String?
  category                        LotCategory?    @relation(fields: [categoryId], references: [id])
  judicialProcessId               String?
  judicialProcess                 JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  courtId                         String?
  court                           Court? @relation("CourtToAuction", fields: [courtId], references: [id])
  districtId                      String?
  district                        JudicialDistrict? @relation("DistrictToAuction", fields: [districtId], references: [id])
  branchId                        String?
  branch                          JudicialBranch? @relation("BranchToAuction", fields: [branchId], references: [id])
  
  lots                            Lot[]
  bids                            Bid[]

  // Config & Metadata
  imageUrl                        String?
  imageMediaId                    String?
  documentsUrl                    String?
  evaluationReportUrl             String?
  auctionCertificateUrl           String?
  sellingBranch                   String? // Filial vendedora (texto livre)
  automaticBiddingEnabled         Boolean         @default(false)
  allowInstallmentBids            Boolean         @default(true)
  silentBiddingEnabled            Boolean         @default(false)
  softCloseEnabled                Boolean         @default(false)
  softCloseMinutes                Int?
  isFeaturedOnMarketplace         Boolean         @default(false)
  marketplaceAnnouncementTitle    String?
  
  additionalTriggers              String[] // For custom badges like "OPORTUNIDADE"
  visits                          Int             @default(0)

  // Dutch Auction Specifics
  decrementAmount                 Float?
  decrementIntervalSeconds        Int?
  floorPrice                      Float?

  autoRelistSettings              Json?

  habilitations                   AuctionHabilitation[]

  createdAt                       DateTime        @default(now())
  updatedAt                       DateTime        @updatedAt
}

model AuctionStage {
  id             String    @id @default(cuid())
  auctionId      String
  auction        Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  name           String
  startDate      DateTime
  endDate        DateTime
  initialPrice   Float? // DEPRECATED: Moved to LotAuctionStageDetails
  lotDetails     LotAuctionStageDetails[]

  @@index([auctionId])
}

// NEW JOIN TABLE for per-lot, per-stage pricing
model LotAuctionStageDetails {
  id              String  @id @default(cuid())
  lot             Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId           String
  auctionStage    AuctionStage @relation(fields: [auctionStageId], references: [id], onDelete: Cascade)
  auctionStageId  String
  
  initialBid      Float   // Lance inicial para este lote nesta praça
  bidIncrement    Float?  // Incremento específico para este lote nesta praça

  @@unique([lotId, auctionStageId])
  @@index([lotId])
  @@index([auctionStageId])
}


enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD // English auction
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO // Auction is open, but lots might not be for bidding yet
  ABERTO_PARA_LANCES
  ENCERRADO // All lots are finished, pending results
  FINALIZADO // Results are published
  CANCELADO
  SUSPENSO
}

// =================================================================
// 5. LOTS, BENS, and BIDS
// =================================================================

model LotCategory {
  id                String        @id @default(cuid())
  name              String
  slug              String        @unique
  description       String?       @db.Text
  hasSubcategories  Boolean       @default(false)
  logoUrl           String?
  logoMediaId       String?
  dataAiHintLogo    String?
  coverImageUrl     String?
  coverImageMediaId String?
  dataAiHintCover   String?
  megaMenuImageUrl  String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu String?
  auctions          Auction[]
  lots              Lot[]
  subcategories     Subcategory[]
  bens              Bem[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Subcategory {
  id                String      @id @default(cuid())
  name              String
  slug              String
  parentCategory    LotCategory @relation(fields: [parentCategoryId], references: [id])
  parentCategoryId  String
  description       String?
  displayOrder      Int         @default(0)
  iconUrl           String?
  iconMediaId       String?
  dataAiHintIcon    String?
  lots              Lot[]
  bens              Bem[]
}

model Lot {
  id                  String   @id @default(cuid())
  publicId            String   @unique
  auction             Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId           String
  number              String?
  title               String
  description         String?  @db.Text
  
  price               Float // Current highest bid or starting price.
  // REMOVED: initialPrice
  // REMOVED: secondInitialPrice
  // REMOVED: bidIncrementStep
  
  status              LotStatus @default(EM_BREVE)
  
  // Populated by system
  bidsCount           Int      @default(0)
  views               Int      @default(0)

  // Configuration
  isFeatured          Boolean  @default(false)
  isExclusive         Boolean  @default(false)
  allowInstallmentBids Boolean @default(false)
  discountPercentage  Int?
  additionalTriggers  String[]
  condition           String?
  
  // Media
  imageUrl            String?
  imageMediaId        String?
  galleryImageUrls    Json?
  mediaItemIds        Json?
  inheritedMediaFromBemId String? // Se as imagens do lote vêm de um Bem específico
  dataAiHint          String?

  // Relations
  bens                LotBens[] // Many-to-many with Bem
  stageDetails        LotAuctionStageDetails[] // One-to-many relationship for pricing per stage

  // Relational IDs
  categoryId          String?
  category            LotCategory? @relation(fields: [categoryId], references: [id])
  subcategoryId       String?
  subcategory         Subcategory? @relation(fields: [subcategoryId], references: [id])
  sellerId            String?
  seller              Seller?  @relation(fields: [sellerId], references: [id])
  auctioneerId        String?
  auctioneer          Auctioneer? @relation(fields: [auctioneerId], references: [id])
  
  // Location
  cityId              String?
  city                City?    @relation(fields: [cityId], references: [id])
  stateId             String?
  state               State?   @relation(fields: [stateId], references: [id])
  cityName            String? // Denormalized for display
  stateUf             String? // Denormalized for display
  latitude            Float?
  longitude           Float?
  mapAddress          String?
  mapEmbedUrl         String?
  mapStaticImageUrl   String?
  
  // Timestamps & Dates
  endDate             DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate   DateTime? // DEPRECATED: Logic is now in stages
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Bidding & Outcome
  bids                Bid[]
  maxBids             UserLotMaxBid[]
  winner              User?    @relation(fields: [winnerId], references: [id])
  winnerId            String?
  winRecord           UserWin?
  winningBidTermUrl   String?
  
  @@index([auctionId])
  @@index([categoryId])
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

model Bem {
  id                String @id @default(cuid())
  publicId          String @unique
  title             String
  description       String?  @db.Text
  status            BemStatus @default(DISPONIVEL)
  
  // Relations
  categoryId        String
  category          LotCategory @relation(fields: [categoryId], references: [id])
  subcategoryId     String?
  subcategory       Subcategory? @relation(fields: [subcategoryId], references: [id])
  judicialProcessId String?
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  sellerId          String?
  seller            Seller?  @relation(fields: [sellerId], references: [id])
  lots              LotBens[]

  // Values
  // REMOVED: evaluationValue
  
  // Media
  imageUrl          String?
  imageMediaId      String?
  galleryImageUrls  Json?
  mediaItemIds      Json?
  dataAiHint        String?
  
  // Location
  locationCity      String?
  locationState     String?
  address           String?
  latitude          Float?
  longitude         Float?

  // Vehicle Specifics
  plate               String?
  make                String?
  model               String?
  version             String?
  year                Int?
  modelYear           Int?
  mileage             Int?
  color               String?
  fuelType            String?
  transmissionType    String?
  bodyType            String?
  vin                 String?
  renavam             String?
  enginePower         String?
  numberOfDoors       Int?
  vehicleOptions      String?
  detranStatus        String?
  debts               String?
  runningCondition    String?
  bodyCondition       String?
  tiresCondition      String?
  hasKey              Boolean?

  // Real Estate Specifics
  propertyRegistrationNumber String?
  iptuNumber                  String?
  isOccupied                  Boolean?
  totalArea                   Float?
  builtArea                   Float?
  bedrooms                    Int?
  suites                      Int?
  bathrooms                   Int?
  parkingSpaces               Int?
  constructionType            String?
  finishes                    String?
  infrastructure              String?
  condoDetails                String?
  improvements                String?
  topography                  String?
  liensAndEncumbrances        String?
  propertyDebts               String?
  unregisteredRecords         String?
  hasHabiteSe                 Boolean?
  zoningRestrictions          String?
  amenities                   Json?
  
  // Electronics
  brand                       String?
  serialNumber                String?
  itemCondition               String?
  specifications              String?
  includedAccessories         String?
  batteryCondition            String?
  hasInvoice                  Boolean?
  hasWarranty                 Boolean?
  repairHistory               String?
  
  // Appliances
  applianceCapacity           String?
  voltage                     String?
  applianceType               String?
  additionalFunctions         String?
  
  // Machinery
  hoursUsed                   Int?
  engineType                  String?
  capacityOrPower             String?
  maintenanceHistory          String?
  installationLocation        String?
  compliesWithNR              String?
  operatingLicenses           String?
  
  // Livestock
  breed                       String?
  age                         String?
  sex                         String?
  weight                      String?
  individualId                String?
  purpose                     String?
  sanitaryCondition           String?
  lineage                     String?
  isPregnant                  Boolean?
  specialSkills               String?
  gtaDocument                 String?
  breedRegistryDocument       String?
  
  // Furniture
  furnitureType               String?
  material                    String?
  style                       String?
  dimensions                  String?
  pieceCount                  Int?
  
  // Jewelry
  jewelryType                 String?
  metal                       String?
  gemstones                   String?
  totalWeight                 String?
  jewelrySize                 String?
  authenticityCertificate     String?
  
  // Art & Antiques
  workType                    String?
  artist                      String?
  period                      String?
  technique                   String?
  provenance                  String?
  
  // Boats
  boatType                    String?
  boatLength                  String?
  hullMaterial                String?
  onboardEquipment            String?
  
  // Food
  productName                 String?
  quantity                    String?
  packagingType               String?
  expirationDate              DateTime?
  storageConditions           String?
  
  // Precious Metals
  preciousMetalType           String?
  purity                      String?
  
  // Forest Goods
  forestGoodsType             String?
  volumeOrQuantity            String?
  species                     String?
  dofNumber                   String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([categoryId])
  @@index([sellerId])
  @@index([judicialProcessId])
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

// Join table for Lots and Bens
model LotBens {
  lot     Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId   String
  bem     Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId   String
  @@id([lotId, bemId])
}

model Bid {
  id            String   @id @default(cuid())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId      String
  bidderDisplay String?  // Denormalized name or anonymous ID
  amount        Float
  timestamp     DateTime @default(now())
  
  @@index([lotId])
  @@index([bidderId])
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

// =================================================================
// 6. USER-RELATED MODELS
// =================================================================

model UserWin {
  id                String   @id @default(cuid())
  lot               Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lotId             String   @unique
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  winningBidAmount  Float
  winDate           DateTime @default(now())
  paymentStatus     PaymentStatus @default(PENDENTE)
  invoiceUrl        String?
  
  @@index([userId])
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

model DocumentType {
  id              String  @id @default(cuid())
  name            String
  description     String?
  isRequired      Boolean @default(true)
  appliesTo       String // e.g. "PHYSICAL,LEGAL,ALL"
  userDocuments   UserDocument[]
}

model UserDocument {
  id                String   @id @default(cuid())
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  documentType      DocumentType @relation(fields: [documentTypeId], references: [id])
  documentTypeId    String
  status            UserDocumentStatus @default(PENDING_ANALYSIS)
  fileUrl           String
  fileName          String?
  rejectionReason   String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([userId, documentTypeId])
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}


model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  @@index([userId])
}

model AuctionHabilitation {
  id          String @id @default(cuid())
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  auction     Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId   String
  createdAt   DateTime @default(now())

  @@unique([userId, auctionId])
}

// =================================================================
// 7. MISC & PLATFORM MODELS
// =================================================================

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DirectSaleOffer {
  id                  String   @id @default(cuid())
  publicId            String   @unique
  title               String
  description         String?  @db.Text
  offerType           DirectSaleOfferType
  price               Float?
  minimumOfferPrice   Float?
  status              DirectSaleOfferStatus @default(ACTIVE)
  category            LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId          String?
  seller              Seller?  @relation(fields: [sellerId], references: [id])
  sellerId            String?
  sellerName          String? // Denormalized for display
  sellerLogoUrl       String?
  dataAiHintSellerLogo String?
  locationCity        String?
  locationState       String?
  imageUrl            String?
  imageMediaId        String?
  dataAiHint          String?
  galleryImageUrls    Json?
  mediaItemIds        Json?
  itemsIncluded       String[]
  views               Int      @default(0)
  expiresAt           DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  RASCUNHO
  PENDING_APPROVAL
  ACTIVE
  SOLD
  EXPIRED
  CANCELED
}

model MediaItem {
  id          String   @id @default(cuid())
  fileName    String
  storagePath String
  title       String?
  altText     String?
  caption     String?
  description String?  @db.Text
  mimeType    String
  sizeBytes   Int?
  urlOriginal String
  urlThumbnail String?
  urlMedium   String?
  urlLarge    String?
  
  linkedLotIds      Json?
  judicialProcessId String?
  
  uploadedBy        User?    @relation("UploadedBy", fields: [uploadedByUserId], references: [id])
  uploadedByUserId  String?
  uploadedAt        DateTime @default(now())
}

model JudicialProcess {
  id                String             @id @default(cuid())
  publicId          String             @unique
  processNumber     String
  isElectronic      Boolean            @default(true)
  court             Court?             @relation("CourtToProcess", fields: [courtId], references: [id])
  courtId           String?
  district          JudicialDistrict?  @relation("DistrictToProcess", fields: [districtId], references: [id])
  districtId        String?
  branch            JudicialBranch?    @relation("BranchToProcess", fields: [branchId], references: [id])
  branchId          String?
  seller            Seller?            @relation(fields: [sellerId], references: [id])
  sellerId          String?
  parties           JudicialParty[]
  bens              Bem[]
  auctions          Auction[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model JudicialParty {
  id              String           @id @default(cuid())
  process         JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId       String
  name            String
  documentNumber  String?
  partyType       ProcessPartyType
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

model DocumentTemplate {
  id            String             @id @default(cuid())
  name          String
  type          DocumentTemplateType
  content       String?            @db.Text
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

model VehicleMake {
  id      String         @id @default(cuid())
  name    String         @unique
  slug    String         @unique
  models  VehicleModel[]
}

model VehicleModel {
  id      String      @id @default(cuid())
  name    String
  slug    String
  make    VehicleMake @relation(fields: [makeId], references: [id])
  makeId  String
  
  @@unique([makeId, name])
}
