// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// =================================================================
// 1. TABLES WITH NO FOREIGN KEY DEPENDENCIES (BASE TABLES)
// =================================================================

model PlatformSettings {
  id                           String                    @id @default("global")
  siteTitle                    String?                   @db.VarChar(100)
  siteTagline                  String?                   @db.VarChar(200)
  logoUrl                      String?                   @db.VarChar(255)
  faviconUrl                   String?                   @db.VarChar(255)
  galleryImageBasePath         String                    @default("/uploads/media/") @db.VarChar(200)
  storageProvider              StorageProviderType       @default(local)
  firebaseStorageBucket        String?                   @db.VarChar(200)
  activeThemeName              String?
  themes                       Json?
  platformPublicIdMasks        Json?
  homepageSections             Json?
  mentalTriggerSettings        Json?
  sectionBadgeVisibility       Json?
  mapSettings                  Json?
  searchPaginationType         SearchPaginationType      @default(loadMore)
  searchItemsPerPage           Int                       @default(12)
  searchLoadMoreCount          Int                       @default(12)
  showCountdownOnLotDetail     Boolean                   @default(true)
  showCountdownOnCards         Boolean                   @default(true)
  showRelatedLotsOnLotDetail   Boolean                   @default(true)
  relatedLotsCount             Int                       @default(5)
  defaultUrgencyTimerHours     Int?
  variableIncrementTable       Json?
  biddingSettings              Json?
  defaultListItemsPerPage      Int                       @default(10)
  updatedAt                    DateTime?                 @updatedAt
}

model Role {
  id              String         @id @default(cuid())
  name            String         @db.VarChar(50)
  nameNormalized  String         @unique @db.VarChar(50)
  description     String?        @db.VarChar(255)
  permissions     Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  users           UsersOnRoles[]
}

model State {
  id        String             @id @default(cuid())
  name      String             @db.VarChar(100)
  uf        String             @unique @db.VarChar(2)
  slug      String             @unique @db.VarChar(100)
  cityCount Int                @default(0)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  cities    City[]
  districts JudicialDistrict[]
  lots      Lot[]
}

model LotCategory {
  id                   String            @id @default(cuid())
  name                 String            @db.VarChar(100)
  slug                 String            @unique @db.VarChar(100)
  description          String?           @db.VarChar(500)
  hasSubcategories     Boolean           @default(false)
  iconName             String?           @db.VarChar(50)
  logoUrl              String?           @db.VarChar(255)
  logoMediaId          String?           @db.VarChar(100)
  dataAiHintIcon       String?           @db.VarChar(100)
  dataAiHintLogo       String?           @db.VarChar(100)
  coverImageUrl        String?           @db.VarChar(255)
  coverImageMediaId    String?           @db.VarChar(100)
  dataAiHintCover      String?           @db.VarChar(100)
  megaMenuImageUrl     String?           @db.VarChar(255)
  megaMenuImageMediaId String?           @db.VarChar(100)
  dataAiHintMegaMenu   String?           @db.VarChar(100)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  auctions             Auction[]
  bens                 Bem[]
  lots                 Lot[]
  subcategories        Subcategory[]
  directSaleOffers     DirectSaleOffer[]
}

model DocumentTemplate {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(150)
  type      String   @db.VarChar(50)
  content   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(150)
  email     String   @db.VarChar(150)
  subject   String?  @db.VarChar(255)
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentType {
  id              String         @id @default(cuid())
  name            String         @db.VarChar(150)
  description     String?        @db.VarChar(255)
  isRequired      Boolean        @default(true)
  appliesTo       String?        @db.VarChar(50)
  userDocuments   UserDocument[]
}

// =================================================================
// 2. TABLES WITH ONE LEVEL OF DEPENDENCY
// =================================================================

model User {
  id                      String                  @id @default(cuid())
  email                   String                  @unique
  password                String?
  fullName                String?
  sellerId                String?                 @unique
  habilitationStatus      UserHabilitationStatus  @default(PENDING_DOCUMENTS)
  accountType             AccountType             @default(PHYSICAL)
  avatarUrl               String?
  dataAiHint              String?
  badges                  Json?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  roles                   UsersOnRoles[]
  seller                  Seller?
  auctioneer              Auctioneer?
  documents               UserDocument[]
  bids                    Bid[]
  wins                    UserWin[]
  maxBids                 UserLotMaxBid[]
  notifications           Notification[]
  mediaItems              MediaItem[]
  auctionHabilitations    AuctionHabilitation[]
}

model UsersOnRoles {
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  role        Role     @relation(fields: [roleId], references: [id])
  roleId      String
  assignedAt  DateTime @default(now())
  assignedBy  String

  @@id([userId, roleId])
}

model City {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(150)
  slug      String?  @db.VarChar(150)
  stateId   String
  stateUf   String?  @db.VarChar(2)
  ibgeCode  String?  @unique @db.VarChar(10)
  lotCount  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lots      Lot[]
  state     State    @relation(fields: [stateId], references: [id], onDelete: Cascade)
}

model Subcategory {
  id               String      @id @default(cuid())
  name             String      @db.VarChar(100)
  slug             String?     @db.VarChar(100)
  parentCategoryId String
  description      String?     @db.VarChar(500)
  displayOrder     Int         @default(0)
  iconUrl          String?     @db.VarChar(255)
  iconMediaId      String?     @db.VarChar(100)
  dataAiHintIcon   String?     @db.VarChar(100)
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  bens             Bem[]
  lots             Lot[]
}

model Court {
  id                String             @id @default(cuid())
  name              String             @db.VarChar(150)
  slug              String?            @db.VarChar(150)
  stateUf           String?            @db.VarChar(2)
  website           String?            @db.VarChar(255)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  districts         JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

// =================================================================
// 3. TABLES WITH TWO OR MORE LEVELS OF DEPENDENCY
// =================================================================

model JudicialDistrict {
  id                String             @id @default(cuid())
  name              String             @db.VarChar(150)
  slug              String             @unique @db.VarChar(150)
  courtId           String?
  stateId           String?
  zipCode           String?            @db.VarChar(10)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  court             Court?             @relation(fields: [courtId], references: [id])
  state             State?             @relation(fields: [stateId], references: [id])
  branches          JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialBranch {
  id                String             @id @default(cuid())
  name              String             @db.VarChar(150)
  slug              String             @unique @db.VarChar(150)
  districtId        String?
  contactName       String?            @db.VarChar(150)
  phone             String?            @db.VarChar(20)
  email             String?            @db.VarChar(150)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
  auctions          Auction[]
}

model Seller {
  id                 String             @id @default(cuid())
  publicId           String             @unique @db.VarChar(100)
  slug               String             @unique @db.VarChar(150)
  name               String             @unique @db.VarChar(150)
  contactName        String?            @db.VarChar(150)
  email              String?            @db.VarChar(150)
  phone              String?            @db.VarChar(20)
  address            String?            @db.VarChar(200)
  city               String?            @db.VarChar(100)
  state              String?            @db.VarChar(50)
  zipCode            String?            @db.VarChar(10)
  website            String?            @db.VarChar(255)
  logoUrl            String?            @db.VarChar(255)
  logoMediaId        String?            @db.VarChar(100)
  dataAiHintLogo     String?            @db.VarChar(100)
  description        String?            @db.Text
  userId             String?            @unique
  isJudicial         Boolean            @default(false)
  judicialBranchId   String?            @unique
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  judicialBranch     JudicialBranch?    @relation(fields: [judicialBranchId], references: [id])
  user               User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  auctions           Auction[]
  lots               Lot[]
  bens               Bem[]
  judicialProcesses  JudicialProcess[]
  directSaleOffers   DirectSaleOffer[]
}

model Auctioneer {
  id                 String    @id @default(cuid())
  publicId           String    @unique @db.VarChar(100)
  slug               String    @unique @db.VarChar(150)
  name               String
  registrationNumber String?   @db.VarChar(50)
  contactName        String?   @db.VarChar(150)
  email              String?   @db.VarChar(150)
  phone              String?   @db.VarChar(20)
  address            String?   @db.VarChar(200)
  city               String?   @db.VarChar(100)
  state              String?   @db.VarChar(50)
  zipCode            String?   @db.VarChar(10)
  website            String?   @db.VarChar(255)
  logoUrl            String?   @db.VarChar(255)
  logoMediaId        String?   @db.VarChar(100)
  dataAiHintLogo     String?   @db.VarChar(100)
  description        String?   @db.Text
  userId             String?   @unique
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User?     @relation(fields: [userId], references: [id])
  auctions           Auction[]
}

model JudicialProcess {
  id                String           @id @default(cuid())
  publicId          String           @unique @db.VarChar(100)
  processNumber     String           @db.VarChar(100)
  isElectronic      Boolean          @default(true)
  courtId           String?
  districtId        String?
  branchId          String?
  sellerId          String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  bens              Bem[]
  auctions          Auction[]
  court             Court?           @relation(fields: [courtId], references: [id])
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch            JudicialBranch?  @relation(fields: [branchId], references: [id])
  seller            Seller?          @relation(fields: [sellerId], references: [id])
  parties           JudicialParty[]
}

model JudicialParty {
  id             String          @id @default(cuid())
  processId      String
  name           String
  documentNumber String?         @db.VarChar(50)
  partyType      String          @db.VarChar(50)
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model Bem {
  id                         String           @id @default(cuid())
  publicId                   String           @unique
  title                      String           @db.VarChar(200)
  description                String?          @db.Text
  status                     String           @default("DISPONIVEL") @db.VarChar(50)
  categoryId                 String?
  subcategoryId              String?
  judicialProcessId          String?
  sellerId                   String?
  evaluationValue            Float?
  imageUrl                   String?          @db.VarChar(255)
  imageMediaId               String?          @db.VarChar(100)
  galleryImageUrls           Json?
  mediaItemIds               Json?
  dataAiHint                 String?          @db.VarChar(100)
  locationCity               String?          @db.VarChar(100)
  locationState              String?          @db.VarChar(100)
  address                    String?          @db.VarChar(255)
  latitude                   Decimal?         @db.Decimal(10, 8)
  longitude                  Decimal?         @db.Decimal(11, 8)
  createdAt                  DateTime         @default(now())
  updatedAt                  DateTime         @updatedAt
  plate                      String?          @db.VarChar(10)
  make                       String?          @db.VarChar(50)
  model                      String?          @db.VarChar(50)
  version                    String?          @db.VarChar(100)
  year                       Int?
  modelYear                  Int?
  mileage                    Int?
  color                      String?          @db.VarChar(30)
  fuelType                   String?          @db.VarChar(30)
  transmissionType           String?          @db.VarChar(30)
  bodyType                   String?          @db.VarChar(50)
  vin                        String?          @db.VarChar(17)
  renavam                    String?          @db.VarChar(11)
  enginePower                String?          @db.VarChar(50)
  numberOfDoors              Int?
  vehicleOptions             String?          @db.VarChar(500)
  detranStatus               String?          @db.VarChar(100)
  debts                      String?          @db.VarChar(500)
  runningCondition           String?          @db.VarChar(100)
  bodyCondition              String?          @db.VarChar(100)
  tiresCondition             String?          @db.VarChar(100)
  hasKey                     Boolean?
  propertyRegistrationNumber String?          @db.VarChar(50)
  iptuNumber                 String?          @db.VarChar(50)
  isOccupied                 Boolean?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?          @db.VarChar(100)
  finishes                   String?          @db.VarChar(500)
  infrastructure             String?          @db.VarChar(500)
  condoDetails               String?          @db.VarChar(500)
  improvements               String?          @db.VarChar(500)
  topography                 String?          @db.VarChar(100)
  liensAndEncumbrances       String?          @db.Text
  propertyDebts              String?          @db.VarChar(500)
  unregisteredRecords        String?          @db.VarChar(500)
  hasHabiteSe                Boolean?
  zoningRestrictions         String?          @db.VarChar(200)
  amenities                  Json?
  brand                      String?          @db.VarChar(50)
  serialNumber               String?          @db.VarChar(100)
  itemCondition              String?          @db.VarChar(100)
  specifications             String?          @db.Text
  includedAccessories        String?          @db.VarChar(500)
  batteryCondition           String?          @db.VarChar(100)
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String?          @db.VarChar(500)
  applianceCapacity          String?          @db.VarChar(50)
  voltage                    String?          @db.VarChar(20)
  applianceType              String?          @db.VarChar(50)
  additionalFunctions        String?          @db.VarChar(200)
  hoursUsed                  Int?
  engineType                 String?          @db.VarChar(50)
  capacityOrPower            String?          @db.VarChar(100)
  maintenanceHistory         String?          @db.Text
  installationLocation       String?          @db.VarChar(200)
  compliesWithNR             String?          @db.VarChar(100)
  operatingLicenses          String?          @db.VarChar(200)
  breed                      String?          @db.VarChar(50)
  age                        String?          @db.VarChar(30)
  sex                        String?          @db.VarChar(10)
  weight                     String?          @db.VarChar(30)
  individualId               String?          @db.VarChar(50)
  purpose                    String?          @db.VarChar(100)
  sanitaryCondition          String?          @db.VarChar(200)
  lineage                    String?          @db.VarChar(200)
  isPregnant                 Boolean?
  specialSkills              String?          @db.VarChar(200)
  gtaDocument                String?          @db.VarChar(100)
  breedRegistryDocument      String?          @db.VarChar(100)
  furnitureType              String?          @db.VarChar(100)
  material                   String?          @db.VarChar(100)
  style                      String?          @db.VarChar(50)
  dimensions                 String?          @db.VarChar(100)
  pieceCount                 Int?
  jewelryType                String?          @db.VarChar(100)
  metal                      String?          @db.VarChar(100)
  gemstones                  String?          @db.VarChar(500)
  totalWeight                String?          @db.VarChar(50)
  jewelrySize                String?          @db.VarChar(50)
  authenticityCertificate    String?          @db.VarChar(200)
  workType                   String?          @db.VarChar(100)
  artist                     String?          @db.VarChar(100)
  period                     String?          @db.VarChar(100)
  technique                  String?          @db.VarChar(100)
  provenance                 String?          @db.VarChar(500)
  boatType                   String?          @db.VarChar(100)
  boatLength                 String?          @db.VarChar(50)
  hullMaterial               String?          @db.VarChar(50)
  onboardEquipment           String?          @db.Text
  productName                String?          @db.VarChar(100)
  quantity                   String?          @db.VarChar(50)
  packagingType              String?          @db.VarChar(50)
  expirationDate             DateTime?
  storageConditions          String?          @db.VarChar(200)
  preciousMetalType          String?          @db.VarChar(50)
  purity                     String?          @db.VarChar(50)
  forestGoodsType            String?          @db.VarChar(100)
  volumeOrQuantity           String?          @db.VarChar(100)
  species                    String?          @db.VarChar(100)
  dofNumber                  String?          @db.VarChar(100)
  category                   LotCategory?     @relation(fields: [categoryId], references: [id])
  subcategory                Subcategory?     @relation(fields: [subcategoryId], references: [id])
  judicialProcess            JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller                     Seller?          @relation(fields: [sellerId], references: [id])
  lots                       LotBens[]
}

model AuctionHabilitation {
  id        String   @id @default(cuid())
  userId    String
  auctionId String
  user      User     @relation(fields: [userId], references: [id])
  auction   Auction  @relation(fields: [auctionId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, auctionId])
}

model Auction {
  id                           String                  @id @db.VarChar(100)
  publicId                     String                  @unique @db.VarChar(100)
  slug                         String?                 @unique @db.VarChar(255)
  title                        String
  description                  String?                 @db.Text
  status                       String                  @default("RASCUNHO") @db.VarChar(50)
  auctionDate                  DateTime?
  endDate                      DateTime?
  auctioneerId                 String?
  sellerId                     String?
  categoryId                   String?
  auctionType                  String?                 @db.VarChar(50)
  imageUrl                     String?                 @db.VarChar(255)
  imageMediaId                 String?                 @db.VarChar(100)
  documentsUrl                 String?                 @db.VarChar(255)
  visits                       Int                     @default(0)
  totalLots                    Int                     @default(0)
  initialOffer                 Float?
  isFavorite                   Boolean                 @default(false)
  dataAiHint                   String?                 @db.VarChar(100)
  judicialProcessId            String?
  courtId                      String?
  districtId                   String?
  branchId                     String?
  evaluationReportUrl          String?                 @db.VarChar(255)
  auctionCertificateUrl        String?                 @db.VarChar(255)
  sellingBranch                String?                 @db.VarChar(100)
  automaticBiddingEnabled      Boolean                 @default(false)
  allowInstallmentBids         Boolean                 @default(true)
  silentBiddingEnabled         Boolean                 @default(false)
  allowMultipleBidsPerUser     Boolean                 @default(true)
  softCloseEnabled             Boolean                 @default(false)
  softCloseMinutes             Int                     @default(2)
  estimatedRevenue             Float?
  achievedRevenue              Float?
  totalHabilitatedUsers        Int?                    @default(0)
  isFeaturedOnMarketplace      Boolean                 @default(false)
  marketplaceAnnouncementTitle String?                 @db.VarChar(150)
  auctionStages                Json?
  additionalTriggers           Json?
  decrementAmount              Float?
  decrementIntervalSeconds     Int?
  floorPrice                   Float?
  autoRelistSettings           Json?
  createdAt                    DateTime                @default(now())
  updatedAt                    DateTime                @updatedAt
  auctioneer                   Auctioneer?             @relation(fields: [auctioneerId], references: [id])
  seller                       Seller?                 @relation(fields: [sellerId], references: [id])
  category                     LotCategory?            @relation(fields: [categoryId], references: [id])
  court                        Court?                  @relation(fields: [courtId], references: [id])
  district                     JudicialDistrict?       @relation(fields: [districtId], references: [id])
  branch                       JudicialBranch?         @relation(fields: [branchId], references: [id])
  judicialProcess              JudicialProcess?        @relation(fields: [judicialProcessId], references: [id])
  lots                         Lot[]
  bids                         Bid[]
  auctionHabilitations         AuctionHabilitation[]
}

model Lot {
  id                       String          @id @default(cuid())
  publicId                 String          @unique @db.VarChar(100)
  auctionId                String          @db.VarChar(100)
  slug                     String?         @db.VarChar(255)
  number                   String?         @db.VarChar(20)
  title                    String
  description              String?         @db.Text
  price                    Float
  initialPrice             Float?
  secondInitialPrice       Float?
  bidIncrementStep         Float?
  status                   String          @default("EM_BREVE") @db.VarChar(50)
  bidsCount                Int             @default(0)
  views                    Int             @default(0)
  isFeatured               Boolean         @default(false)
  isExclusive              Boolean         @default(false)
  discountPercentage       Int?
  additionalTriggers       Json?
  imageUrl                 String?         @db.VarChar(255)
  imageMediaId             String?         @db.VarChar(100)
  galleryImageUrls         Json?
  mediaItemIds             Json?
  type                     String          @db.VarChar(100)
  categoryId               String?
  subcategoryId            String?
  auctionName              String?
  sellerId                 String?
  sellerName               String?         @db.VarChar(150)
  auctioneerId             String?
  cityId                   String?
  stateId                  String?
  cityName                 String?         @db.VarChar(100)
  stateUf                  String?         @db.VarChar(2)
  latitude                 Decimal?        @db.Decimal(10, 8)
  longitude                Decimal?        @db.Decimal(11, 8)
  mapAddress               String?         @db.VarChar(255)
  mapEmbedUrl              String?         @db.VarChar(500)
  mapStaticImageUrl        String?         @db.VarChar(255)
  endDate                  DateTime?
  auctionDate              DateTime?
  lotSpecificAuctionDate   DateTime?
  secondAuctionDate        DateTime?
  condition                String?         @db.VarChar(100)
  dataAiHint               String?         @db.VarChar(100)
  winnerId                 String?
  winningBidTermUrl        String?         @db.VarChar(255)
  allowInstallmentBids     Boolean         @default(false)
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
  auction                  Auction         @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                 LotCategory?    @relation(fields: [categoryId], references: [id])
  subcategory              Subcategory?    @relation(fields: [subcategoryId], references: [id])
  seller                   Seller?         @relation(fields: [sellerId], references: [id])
  city                     City?           @relation(fields: [cityId], references: [id])
  state                    State?          @relation(fields: [stateId], references: [id])
  winner                   User?           @relation("LotWinner", fields: [winnerId], references: [id])
  bens                     LotBens[]
  bids                     Bid[]
  maxBids                  UserLotMaxBid[]
  userWins                 UserWin[]
}

model LotBens {
  lotId String
  bemId String
  lot   Lot    @relation(fields: [lotId], references: [id])
  bem   Bem    @relation(fields: [bemId], references: [id])

  @@id([lotId, bemId])
}

model MediaItem {
  id              String   @id @default(cuid())
  fileName        String   @unique
  storagePath     String
  title           String?
  altText         String?
  caption         String?  @db.VarChar(500)
  description     String?  @db.Text
  mimeType        String   @db.VarChar(100)
  sizeBytes       Int?
  urlOriginal     String
  urlThumbnail    String?
  urlMedium       String?
  urlLarge        String?
  linkedLotIds    Json?
  dataAiHint      String?  @db.VarChar(100)
  uploadedByUserId String?
  uploadedBy      User?    @relation(fields: [uploadedByUserId], references: [id])
  uploadedAt      DateTime @default(now())
  judicialProcessId String?
}

model UserDocument {
  id              String       @id @default(cuid())
  userId          String
  documentTypeId  String
  status          String       @default("PENDING") @db.VarChar(50)
  fileUrl         String       @db.VarChar(255)
  fileName        String?
  rejectionReason String?      @db.Text
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType @relation(fields: [documentTypeId], references: [id])
}

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String?  @db.VarChar(150)
  amount        Float
  timestamp     DateTime @default(now())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String   @id @default(cuid())
  lotId            String   @unique
  userId           String
  winningBidAmount Float
  winDate          DateTime @default(now())
  paymentStatus    String   @db.VarChar(50)
  invoiceUrl       String?  @db.VarChar(255)
  user             User     @relation(fields: [userId], references: [id])
  lot              Lot      @relation(fields: [lotId], references: [id])
}

model DirectSaleOffer {
  id                   String      @id @default(cuid())
  publicId             String      @unique @db.VarChar(100)
  title                String
  description          String?     @db.Text
  offerType            String?     @db.VarChar(50)
  price                Float?
  minimumOfferPrice    Float?
  status               String      @default("ACTIVE") @db.VarChar(50)
  categoryId           String?
  sellerId             String?
  sellerName           String?     @db.VarChar(150)
  sellerLogoUrl        String?     @db.VarChar(255)
  dataAiHintSellerLogo String?     @db.VarChar(100)
  locationCity         String?     @db.VarChar(100)
  locationState        String?     @db.VarChar(100)
  imageUrl             String?     @db.VarChar(255)
  imageMediaId         String?     @db.VarChar(100)
  dataAiHint           String?     @db.VarChar(100)
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int         @default(0)
  expiresAt            DateTime?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  category             LotCategory? @relation(fields: [categoryId], references: [id])
  seller               Seller?      @relation(fields: [sellerId], references: [id])
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model Notification {
    id        String @id @default(cuid())
    userId    String
    message   String
    link      String?
    isRead    Boolean @default(false)
    createdAt DateTime @default(now())
    user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum StorageProviderType {
  local
  firebase
}

enum SearchPaginationType {
  loadMore
  numberedPages
}

enum MapProvider {
  google
  openstreetmap
  staticImage
}
