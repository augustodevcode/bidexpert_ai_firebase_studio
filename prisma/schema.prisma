// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// ENUMS
// =================================================================
enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO // Auction is open, but lots might not be open for bidding yet (e.g., scheduled start)
  ABERTO_PARA_LANCES
  ENCERRADO // All lots are closed, but winners might not be finalized
  FINALIZADO // All post-auction processes are complete
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum DirectSaleOfferStatus {
  RASCUNHO
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS // Needs to send documents
  PENDING_ANALYSIS // Documents sent, waiting for admin approval
  HABILITADO // Approved to bid
  REJECTED_DOCUMENTS // Documents were rejected
  BLOCKED // Blocked by admin
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD // English Auction (Ascending)
  DUTCH // Dutch Auction (Descending)
  SILENT // Sealed-bid auction
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

// =================================================================
// MODELS
// =================================================================

model PlatformSettings {
  id                         String   @id @default("global")
  siteTitle                  String?
  siteTagline                String?
  logoUrl                    String?
  faviconUrl                 String?
  galleryImageBasePath       String
  storageProvider            String
  firebaseStorageBucket      String?
  activeThemeName            String?
  themes                     Json? // Store array of theme objects
  platformPublicIdMasks      Json?
  homepageSections           Json?
  mentalTriggerSettings      Json?
  sectionBadgeVisibility     Json?
  mapSettings                Json?
  searchPaginationType       String
  searchItemsPerPage         Int
  searchLoadMoreCount        Int
  showCountdownOnLotDetail   Boolean
  showCountdownOnCards       Boolean
  showRelatedLotsOnLotDetail Boolean
  relatedLotsCount           Int
  defaultUrgencyTimerHours   Int?
  variableIncrementTable     Json?
  biddingSettings            Json?
  paymentGatewaySettings     Json?
  defaultListItemsPerPage    Int?     @default(10)
  updatedAt                  DateTime @updatedAt
}

model Role {
  id              String   @id @default(uuid())
  name            String   @unique
  nameNormalized  String   @unique
  description     String?
  permissions     String[]
  users           UsersOnRoles[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model User {
  id                  String       @id @default(uuid())
  email               String       @unique
  password            String?
  fullName            String?
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         String       @default("PHYSICAL")
  avatarUrl           String?
  dataAiHint          String?
  seller              Seller[]
  auctioneers         Auctioneer[]
  mediaItems          MediaItem[]
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  maxBids             UserLotMaxBid[]
  notifications       Notification[]
  roles               UsersOnRoles[]
  habilitations       AuctionHabilitation[]
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  
  // Detalhes PF
  cpf                 String?      @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  homePhone           String?
  cellPhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?

  // Detalhes PJ
  razaoSocial         String?      @unique
  cnpj                String?      @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  
  // Endereço
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?

  // Preferências
  optInMarketing      Boolean?     @default(false)
}

model UsersOnRoles {
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    role        Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
    roleId      String
    assignedAt  DateTime @default(now())
    assignedBy  String

    @@id([userId, roleId])
}

model State {
  id            String   @id @default(uuid())
  name          String   @unique
  uf            String   @unique
  slug          String   @unique
  cities        City[]
  districts     JudicialDistrict[]
  courts        Court[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model City {
  id        String    @id @default(uuid())
  name      String
  slug      String?
  state     State     @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId   String
  stateUf   String?
  ibgeCode  String?   @unique
  lots      Lot[]
  auctions  Auction[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([stateId])
}

model LotCategory {
  id                   String            @id @default(uuid())
  name                 String            @unique
  slug                 String            @unique
  description          String?           @db.Text
  hasSubcategories     Boolean
  logoUrl              String?
  logoMediaId          String?
  dataAiHintIcon       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  auctions             Auction[]
  lots                 Lot[]
  bens                 Bem[]
  subcategories        Subcategory[]
  directSaleOffers     DirectSaleOffer[]
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
}

model Subcategory {
  id               String      @id @default(uuid())
  name             String
  slug             String      @unique
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  parentCategoryId String
  description      String?     @db.Text
  displayOrder     Int         @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  lots             Lot[]
  bens             Bem[]

  @@index([parentCategoryId])
}

model Bem {
  id                 String   @id @default(uuid())
  publicId           String   @unique @default(cuid())
  title              String
  description        String?  @db.Text
  status             BemStatus @default(DISPONIVEL)
  
  category           LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId         String?
  subcategory        Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId      String?

  judicialProcess    JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId  String?
  seller             Seller?   @relation(fields: [sellerId], references: [id])
  sellerId           String?
  
  evaluationValue    Decimal? @db.Decimal(15, 2)
  imageUrl           String?
  imageMediaId       String?
  galleryImageUrls   Json?
  mediaItemIds       Json?
  dataAiHint         String?
  
  // Localização específica do bem
  locationCity       String?
  locationState      String?
  address            String?
  latitude           Decimal? @db.Decimal(10, 8)
  longitude          Decimal? @db.Decimal(11, 8)

  // Campos específicos de Veículos
  plate              String?
  make               String?
  model              String?
  version            String?
  year               Int?
  modelYear          Int?
  mileage            Int?
  color              String?
  fuelType           String?
  transmissionType   String?
  bodyType           String?
  vin                String? @unique
  renavam            String? @unique
  enginePower        String?
  numberOfDoors      Int?
  vehicleOptions     String?
  detranStatus       String?
  debts              String?
  runningCondition   String?
  bodyCondition      String?
  tiresCondition     String?
  hasKey             Boolean?
  
  // Campos específicos de Imóveis
  propertyRegistrationNumber String?
  iptuNumber               String?
  isOccupied               Boolean?
  totalArea                Decimal? @db.Decimal(15, 2)
  builtArea                Decimal? @db.Decimal(15, 2)
  bedrooms                 Int?
  suites                   Int?
  bathrooms                Int?
  parkingSpaces            Int?
  constructionType         String?
  finishes                 String?
  infrastructure           String?
  condoDetails             String?
  improvements             String?
  topography               String?
  liensAndEncumbrances     String?
  propertyDebts            String?
  unregisteredRecords      String?
  hasHabiteSe              Boolean?
  zoningRestrictions       String?
  amenities                Json?

  // Campos de Eletrônicos
  brand                    String?
  serialNumber             String?
  itemCondition            String?
  specifications           String? @db.Text
  includedAccessories      String?
  batteryCondition         String?
  hasInvoice               Boolean?
  hasWarranty              Boolean?
  repairHistory            String?

  // Campos de Eletrodomésticos
  applianceCapacity        String?
  voltage                  String?
  applianceType            String?
  additionalFunctions      String?

  // Campos de Máquinas e Equipamentos
  hoursUsed                Int?
  engineType               String?
  capacityOrPower          String?
  maintenanceHistory       String? @db.Text
  installationLocation     String?
  compliesWithNR           String?
  operatingLicenses        String?

  // Campos de Semoventes
  breed                    String?
  age                      String?
  sex                      String?
  weight                   String?
  individualId             String?
  purpose                  String?
  sanitaryCondition        String?
  vaccinationStatus        String?
  lineage                  String?
  isPregnant               Boolean?
  specialSkills            String?
  gtaDocument              String?
  breedRegistryDocument    String?

  lots               LotBens[] // Many-to-Many
  
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  @@index([sellerId])
  @@index([judicialProcessId])
  @@index([categoryId])
}

model MediaItem {
  id                String   @id @default(uuid())
  fileName          String
  storagePath       String
  title             String?
  altText           String?
  caption           String?
  description       String?  @db.Text
  mimeType          String
  sizeBytes         Int?
  urlOriginal       String
  urlThumbnail      String?
  urlMedium         String?
  urlLarge          String?
  dataAiHint        String?
  uploadedBy        User     @relation(fields: [uploadedByUserId], references: [id])
  uploadedByUserId  String
  uploadedAt        DateTime @default(now())
  judicialProcessId String?
}

model Court {
  id                  String             @id @default(uuid())
  name                String             @unique
  slug                String             @unique
  stateUf             String
  website             String?
  districts           JudicialDistrict[]
  judicialProcesses   JudicialProcess[]
  auctions            Auction[]
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model JudicialDistrict {
  id                String             @id @default(uuid())
  name              String             
  slug              String             @unique
  court             Court?             @relation(fields: [courtId], references: [id])
  courtId           String?
  state             State?             @relation(fields: [stateId], references: [id])
  stateId           String?
  zipCode           String?
  branches          JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions            Auction[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@index([courtId])
  @@index([stateId])
}

model JudicialBranch {
  id                String             @id @default(uuid())
  name              String             
  slug              String             @unique
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  judicialProcesses JudicialProcess[]
  auctions            Auction[]
  sellers             Seller[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@index([districtId])
}

model JudicialProcess {
  id                String             @id @default(uuid())
  publicId          String             @unique @default(cuid())
  processNumber     String             @unique
  isElectronic      Boolean            @default(true)
  court             Court?             @relation(fields: [courtId], references: [id])
  courtId           String?
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  districtId        String?
  branch            JudicialBranch?    @relation(fields: [branchId], references: [id])
  branchId          String?
  seller            Seller?            @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId          String?            
  parties           JudicialParty[]
  bens              Bem[]
  auctions          Auction[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@index([sellerId])
  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
}

model JudicialParty {
  id             String          @id @default(uuid())
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType

  @@index([processId])
}

model Seller {
  id                        String              @id @default(uuid())
  publicId                  String              @unique @default(cuid())
  slug                      String              @unique
  name                      String              @unique
  contactName               String?
  email                     String?
  phone                     String?
  address                   String?
  city                      String?
  state                     String?
  zipCode                   String?
  website                   String?
  logoUrl                   String?
  logoMediaId               String?
  dataAiHintLogo            String?
  description               String?             @db.Text
  user                      User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId                    String?             @unique
  isJudicial                Boolean             @default(false)
  judicialBranch            JudicialBranch?     @relation(fields: [judicialBranchId], references: [id])
  judicialBranchId          String?             @unique
  auctions                  Auction[]
  lots                      Lot[]
  bens                      Bem[]
  judicialProcesses         JudicialProcess[]
  directSaleOffers          DirectSaleOffer[]
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
}

model Auctioneer {
  id                   String    @id @default(uuid())
  publicId             String    @unique @default(cuid())
  slug                 String    @unique
  name                 String
  registrationNumber   String?
  contactName          String?
  email                String?   @unique
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?   @db.Text
  user                 User?     @relation(fields: [userId], references: [id])
  userId               String?   @unique
  auctions             Auction[]
  lots                 Lot[]
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model Auction {
  id                               String                 @id @default(uuid())
  publicId                         String                 @unique @default(cuid())
  slug                             String?                @unique
  title                            String
  description                      String?                @db.Text
  status                           AuctionStatus          @default(RASCUNHO)
  auctionDate                      DateTime
  endDate                          DateTime?
  auctioneer                       Auctioneer?            @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  auctioneerId                     String?
  seller                           Seller?                @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId                         String?
  category                         LotCategory?           @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId                       String?
  city                             City?                  @relation(fields: [cityId], references: [id], onDelete: SetNull)
  cityId                           String?
  state                            State?                 @relation(fields: [stateId], references: [id], onDelete: SetNull)
  stateId                          String?
  court                            Court?                 @relation(fields: [courtId], references: [id], onDelete: SetNull)
  courtId                          String?
  district                         JudicialDistrict?      @relation(fields: [districtId], references: [id], onDelete: SetNull)
  districtId                       String?
  branch                           JudicialBranch?        @relation(fields: [branchId], references: [id], onDelete: SetNull)
  branchId                         String?
  judicialProcess                  JudicialProcess?       @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId                String?
  lots                             Lot[]
  bids                             Bid[]
  auctionStages                    AuctionStage[]
  habilitations                    AuctionHabilitation[]
  visits                           Int                    @default(0)
  totalLots                        Int                    @default(0)
  initialOffer                     Decimal?               @db.Decimal(15, 2)
  isFeaturedOnMarketplace          Boolean                @default(false)
  marketplaceAnnouncementTitle     String?
  dataAiHint                       String?
  
  // New structured fields
  auctionType                      AuctionType?
  auctionMethod                    AuctionMethod          @default(STANDARD)
  participation                    AuctionParticipation   @default(ONLINE)

  // Location fields for presencial/hibrido
  address                          String?
  zipCode                          String?
  latitude                         Decimal? @db.Decimal(10, 8)
  longitude                        Decimal? @db.Decimal(11, 8)
  onlineUrl                        String?

  documentsUrl                     String?
  evaluationReportUrl              String?
  auctionCertificateUrl            String?
  sellingBranch                    String?
  automaticBiddingEnabled          Boolean                @default(false)
  silentBiddingEnabled             Boolean                @default(false)
  allowMultipleBidsPerUser         Boolean                @default(true)
  allowInstallmentBids             Boolean                @default(true)
  softCloseEnabled                 Boolean                @default(false) 
  softCloseMinutes                 Int                    @default(2)
  estimatedRevenue                 Decimal?               @db.Decimal(15, 2)
  achievedRevenue                  Decimal?               @db.Decimal(15, 2)
  totalHabilitatedUsers            Int?                   @default(0)
  additionalTriggers               Json?
  
  // Dutch Auction Specific
  decrementAmount                  Decimal? @db.Decimal(15, 2)
  decrementIntervalSeconds         Int?
  floorPrice                       Decimal? @db.Decimal(15, 2)
  
  autoRelistSettings               Json?

  createdAt                        DateTime               @default(now())
  updatedAt                        DateTime               @updatedAt

  @@index([sellerId])
  @@index([auctioneerId])
  @@index([categoryId])
  @@index([judicialProcessId])
  @@index([cityId])
  @@index([stateId])
  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
}

model AuctionStage {
  id               String  @id @default(uuid())
  auction          Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId        String
  name             String
  startDate        DateTime
  endDate          DateTime
  evaluationValue  Decimal? @db.Decimal(15, 2)
  lots             LotAuctionStageDetails[]

  @@index([auctionId])
}

model LotBens {
  lot     Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId   String
  bem     Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId   String

  @@id([lotId, bemId])
  @@index([bemId])
}

model LotAuctionStageDetails {
    id              String        @id @default(uuid())
    lot             Lot           @relation(fields: [lotId], references: [id], onDelete: Cascade)
    lotId           String
    stage           AuctionStage  @relation(fields: [stageId], references: [id], onDelete: Cascade)
    stageId         String
    initialBid      Decimal?      @db.Decimal(15, 2)
    bidIncrement    Decimal?      @db.Decimal(15, 2)

    @@unique([lotId, stageId])
    @@index([stageId])
}

model Lot {
  id                    String                   @id @default(uuid())
  publicId              String                   @unique @default(cuid())
  auction               Auction                  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId             String
  slug                  String?
  number                String?
  title                 String
  description           String?                  @db.Text
  price                 Decimal                  @db.Decimal(15, 2)
  status                LotStatus                @default(EM_BREVE)
  bidsCount             Int?                     @default(0)
  views                 Int?                     @default(0)
  isFeatured            Boolean                  @default(false)
  isExclusive           Boolean                  @default(false)
  discountPercentage    Int?
  additionalTriggers    Json?
  imageUrl              String?
  imageMediaId          String?
  galleryImageUrls      Json?
  mediaItemIds          Json?
  inheritedMediaFromBemId String?
  
  type                  String?                  
  category              LotCategory?             @relation(fields: [categoryId], references: [id])
  categoryId            String?
  subcategory           Subcategory?             @relation(fields: [subcategoryId], references: [id])
  subcategoryId         String?
  
  seller                Seller?                  @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId              String?
  auctioneer            Auctioneer?              @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  auctioneerId          String?
  
  city                  City?                    @relation(fields: [cityId], references: [id], onDelete: SetNull)
  cityId                String?
  state                 State?                   @relation(fields: [stateId], references: [id], onDelete: SetNull)
  stateId               String?

  latitude              Decimal?                 @db.Decimal(10, 8)
  longitude             Decimal?                 @db.Decimal(11, 8)
  mapAddress            String?
  
  endDate               DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate      DateTime?
  condition             String?
  dataAiHint            String?
  
  winner                User?                    @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId              String?
  
  winningBidTermUrl     String?
  allowInstallmentBids  Boolean                  @default(false)
  
  isRelisted            Boolean                  @default(false)
  relistCount           Int                      @default(0)
  originalLotId         String?
  originalLot           Lot?                     @relation("RelistedLot", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLots          Lot[]                    @relation("RelistedLot")

  stageDetails          LotAuctionStageDetails[] // One-to-Many
  bens                  LotBens[]                // Many-to-Many
  bids                  Bid[]
  userWins              UserWin[]
  maxBids               UserLotMaxBid[]

  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt

  @@index([auctionId])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([sellerId])
  @@index([winnerId])
  @@index([originalLotId])
}


model Bid {
  id            String   @id @default(uuid())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId      String
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())

  @@index([lotId])
  @@index([bidderId])
  @@index([auctionId])
}

model UserWin {
  id                 String               @id @default(uuid())
  lot                Lot                  @relation(fields: [lotId], references: [id])
  lotId              String
  user               User                 @relation("LotWinner", fields: [userId], references: [id])
  userId             String
  winningBidAmount   Decimal              @db.Decimal(15, 2)
  winDate            DateTime
  paymentStatus      PaymentStatus        @default(PENDENTE)
  invoiceUrl         String?
  installments       InstallmentPayment[]

  @@index([lotId])
  @@index([userId])
}

model InstallmentPayment {
  id                 String        @id @default(uuid())
  userWin            UserWin       @relation(fields: [userWinId], references: [id], onDelete: Cascade)
  userWinId          String
  installmentNumber  Int
  amount             Decimal       @db.Decimal(15, 2)
  dueDate            DateTime
  status             PaymentStatus @default(PENDENTE)
  paymentDate        DateTime?
  paymentMethod      String?
  transactionId      String?

  @@index([userWinId])
}


model DirectSaleOffer {
  id                   String                @id @default(uuid())
  publicId             String                @unique @default(cuid())
  title                String
  description          String?               @db.Text
  offerType            DirectSaleOfferType
  price                Decimal?              @db.Decimal(15, 2)
  minimumOfferPrice    Decimal?              @db.Decimal(15, 2)
  status               DirectSaleOfferStatus @default(ACTIVE)
  category             LotCategory           @relation(fields: [categoryId], references: [id])
  categoryId           String
  seller               Seller                @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId             String
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int                   @default(0)
  expiresAt            DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model AuctionHabilitation {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  auction   Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId String
  status    String  @default("APPROVED")
  createdAt DateTime @default(now())
  
  @@unique([userId, auctionId])
  @@index([auctionId])
}

model Notification {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  message    String
  link       String?
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@index([userId])
}

model Review {
  id              String   @id @default(uuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String   @db.Text
  createdAt       DateTime @default(now())
}

model LotQuestion {
  id                        String    @id @default(uuid())
  lotId                     String
  auctionId                 String
  userId                    String
  userDisplayName           String
  questionText              String    @db.Text
  answerText                String?   @db.Text
  isPublic                  Boolean   @default(true)
  answeredByUserId          String?
  answeredByUserDisplayName String?
  createdAt                 DateTime  @default(now())
  answeredAt                DateTime?
}

model DocumentType {
  id          String         @id @default(uuid())
  name        String         @unique
  description String?
  isRequired  Boolean        @default(true)
  appliesTo   String?        // e.g., "PHYSICAL,LEGAL"
  userDocs    UserDocument[]
}

model UserDocument {
  id                String             @id @default(uuid())
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  documentType      DocumentType       @relation(fields: [documentTypeId], references: [id])
  documentTypeId    String
  status            UserDocumentStatus @default(PENDING_ANALYSIS)
  fileUrl           String
  fileName          String?
  rejectionReason   String?            @db.Text
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@unique([userId, documentTypeId])
  @@index([documentTypeId])
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentTemplate {
  id      String @id @default(uuid())
  name    String @unique
  type    String
  content String @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
