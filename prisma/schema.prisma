// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// ENUMS - Definições de tipos para consistência
// =================================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

// =================================================================
// MODELS
// =================================================================

model User {
  id                  String                 @id @default(uuid())
  email               String                 @unique
  password            String?
  fullName            String?
  roleId              String?
  sellerId            String?                @unique
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType            @default(PHYSICAL)
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt

  // Personal Info (PF)
  cpf               String? @unique
  rgNumber          String?
  rgIssuer          String?
  rgIssueDate       DateTime?
  rgState           String?
  dateOfBirth       DateTime?
  homePhone         String?
  cellPhone         String?
  gender            String?
  profession        String?
  nationality       String?
  maritalStatus     String?
  propertyRegime    String?
  spouseName        String?
  spouseCpf         String?
  // Address
  zipCode           String?
  street            String?
  number            String?
  complement        String?
  neighborhood      String?
  city              String?
  state             String?
  // Legal Person Info (PJ)
  razaoSocial       String?
  cnpj              String? @unique
  inscricaoEstadual String?
  website           String?
  responsibleName   String?
  responsibleCpf    String?
  // Marketing
  optInMarketing    Boolean? @default(false)

  // Relations
  roles             UsersOnRoles[]
  seller            Seller?
  auctioneer        Auctioneer?
  documents         UserDocument[]
  bids              Bid[]
  wins              UserWin[]
  maxBids           UserLotMaxBid[]
  uploadedMedia     MediaItem[]      @relation("UploadedBy")
  answeredQuestions LotQuestion[]    @relation("AnsweredByUser")
  questions         LotQuestion[]    @relation("AskedByUser")
  habilitations     AuctionHabilitation[]
  notifications     Notification[]
  wonLots           Lot[]            @relation("Winner")
}

model UsersOnRoles {
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  role        Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId      String
  assignedAt  DateTime @default(now())
  assignedBy  String

  @@id([userId, roleId])
}

model Role {
  id             String         @id @default(uuid())
  name           String         @unique
  nameNormalized String         @unique
  description    String?        @db.Text
  permissions    String[]
  users          UsersOnRoles[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model State {
  id              String             @id @default(uuid())
  name            String
  uf              String             @unique
  slug            String             @unique
  cityCount       Int                @default(0)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  cities          City[]
  auctions        Auction[]
  judicialDistricts JudicialDistrict[]
  lots            Lot[]
}

model City {
  id        String    @id @default(uuid())
  name      String
  slug      String?
  stateId   String
  state     State     @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateUf   String?
  ibgeCode  String?   @unique
  lotCount  Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  auctions  Auction[]
  lots      Lot[]
}

model Court {
  id                String             @id @default(uuid())
  name              String             @unique
  slug              String             @unique
  stateUf           String
  website           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialDistrict {
  id                String             @id @default(uuid())
  name              String             @unique
  slug              String             @unique
  courtId           String?
  court             Court?             @relation(fields: [courtId], references: [id])
  stateId           String?
  zipCode           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  state             State?             @relation(fields: [stateId], references: [id])
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialBranch {
  id                String             @id @default(uuid())
  name              String
  slug              String             @unique
  districtId        String?
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
  auctions          Auction[]
}

model Seller {
  id                 String               @id @default(uuid())
  publicId           String               @unique
  slug               String               @unique
  name               String               @unique
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?              @db.Text
  isJudicial         Boolean              @default(false)
  userId             String?              @unique
  user               User?                @relation(fields: [userId], references: [id], onDelete: SetNull)
  judicialBranchId   String?
  judicialBranch     JudicialBranch?      @relation(fields: [judicialBranchId], references: [id])
  auctions           Auction[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  judicialProcesses  JudicialProcess[]
  lots               Lot[]
  directSaleOffers   DirectSaleOffer[]
  bens               Bem[]
}

model Auctioneer {
  id                   String        @id @default(uuid())
  publicId             String        @unique
  slug                 String        @unique
  name                 String
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?       @db.Text
  userId               String?       @unique
  user                 User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  auctions             Auction[]
  lots                 Lot[]
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
}

model JudicialProcess {
  id                  String       @id @default(uuid())
  publicId            String       @unique
  processNumber       String       @unique
  isElectronic        Boolean      @default(true)
  courtId             String?
  court               Court?       @relation(fields: [courtId], references: [id])
  districtId          String?
  district            JudicialDistrict? @relation(fields: [districtId], references: [id])
  branchId            String?
  branch              JudicialBranch? @relation(fields: [branchId], references: [id])
  sellerId            String?
  seller              Seller?      @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties             JudicialParty[]
  bens                Bem[]
  auctions            Auction[]
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  mediaItems          MediaItem[]
}

model JudicialParty {
  id             String          @id @default(uuid())
  processId      String
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  name           String
  documentNumber String?
  partyType      ProcessPartyType
}

model LotCategory {
  id                   String            @id @default(uuid())
  name                 String            @unique
  slug                 String            @unique
  description          String?           @db.Text
  hasSubcategories     Boolean           @default(false)
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  subcategories        Subcategory[]
  lots                 Lot[]
  bens                 Bem[]
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  directSaleOffers     DirectSaleOffer[]
}

model Subcategory {
  id               String      @id @default(uuid())
  name             String
  slug             String      @unique
  parentCategoryId String
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  description      String?     @db.Text
  displayOrder     Int         @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  lots             Lot[]
  bens             Bem[]
}

model LotBens {
  lotId String
  bemId String
  lot   Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bem   Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)

  @@id([lotId, bemId])
}

model LotAuctionStageDetails {
  lotId         String
  auctionStageId String
  lot           Lot          @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionStage  AuctionStage @relation(fields: [auctionStageId], references: [id], onDelete: Cascade)
  initialBid    Decimal?
  bidIncrement  Decimal?     
  evaluationValue Decimal?         /// Valor de avaliação específico para esta praça

  @@id([lotId, auctionStageId])
}

model AuctionHabilitation {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId String
  habilitatedAt DateTime @default(now())

  @@unique([userId, auctionId])
}

model Auction {
  id                             String                 @id @default(uuid())
  publicId                       String                 @unique
  slug                           String                 @unique
  title                          String
  description                    String?                @db.Text
  status                         AuctionStatus          @default(RASCUNHO)
  auctionDate                    DateTime
  endDate                        DateTime?
  totalLots                      Int                    @default(0)
  categoryId                     String?
  category                       LotCategory?           @relation(fields: [categoryId], references: [id])
  auctioneerId                   String?
  auctioneer                     Auctioneer?            @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  sellerId                       String?
  seller                         Seller?                @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  imageUrl                       String?
  imageMediaId                   String?
  dataAiHint                     String?
  visits                         Int                    @default(0)
  judicialProcessId              String?
  judicialProcess                JudicialProcess?       @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  courtId                        String?
  court                          Court?                 @relation(fields: [courtId], references: [id], onDelete: SetNull)
  districtId                     String?
  district                       JudicialDistrict?      @relation(fields: [districtId], references: [id], onDelete: SetNull)
  branchId                       String?
  branch                         JudicialBranch?        @relation(fields: [branchId], references: [id], onDelete: SetNull)
  cityId                         String?
  city                           City?                 @relation(fields: [cityId], references: [id])
  stateId                        String?
  state                          State?            @relation(fields: [stateId], references: [id])
  lots                           Lot[]
  habilitations                  AuctionHabilitation[]
  auctionStages                  AuctionStage[]
  bids                           Bid[]
  questions                      LotQuestion[]

  // Settings
  auctionType                    AuctionType?
  auctionMethod                  AuctionMethod?         @default(STANDARD)
  participation                  AuctionParticipation?  @default(ONLINE)
  
  // Location
  address                        String?
  zipCode                        String?
  onlineUrl                      String?

  // Post-Auction Docs
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  
  // Internal
  sellingBranch                  String?
  automaticBiddingEnabled        Boolean                @default(false)
  allowInstallmentBids           Boolean                @default(true)
  silentBiddingEnabled           Boolean                @default(false)
  allowMultipleBidsPerUser       Boolean                @default(true)
  softCloseEnabled               Boolean                @default(false)
  softCloseMinutes               Int                    @default(2)
  
  // Financial & Stats
  estimatedRevenue               Decimal?
  achievedRevenue                Decimal?
  totalHabilitatedUsers          Int?                   @default(0)
  
  // Marketplace
  isFeaturedOnMarketplace        Boolean                @default(false)
  marketplaceAnnouncementTitle   String?
  
  // Advanced Features
  additionalTriggers             String[]
  decrementAmount                Decimal?
  decrementIntervalSeconds       Int?
  floorPrice                     Decimal?
  
  createdAt                      DateTime               @default(now())
  updatedAt                      DateTime               @updatedAt
}

model AuctionStage {
  id                   String                   @id @default(uuid())
  auctionId            String
  auction              Auction                  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  name                 String
  startDate            DateTime
  endDate              DateTime
  statusText           String?
  lotStageDetails      LotAuctionStageDetails[]
}

model Lot {
  id                         String           @id @default(uuid())
  publicId                   String           @unique
  auctionId                  String
  auction                    Auction          @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  number                     String?
  title                      String
  description                String?          @db.Text
  price                      Decimal          @db.Decimal(15, 2)
  status                     LotStatus        @default(EM_BREVE)
  bidsCount                  Int              @default(0)
  views                      Int              @default(0)
  isFeatured                 Boolean          @default(false)
  isExclusive                Boolean          @default(false)
  discountPercentage         Int?
  additionalTriggers         String[]
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  inheritedMediaFromBemId    String?
  type                       String
  categoryId                 String?
  category                   LotCategory?     @relation(fields: [categoryId], references: [id])
  subcategoryId              String?
  subcategory                Subcategory?     @relation(fields: [subcategoryId], references: [id])
  auctionName                String?
  seller                     Seller?                  @relation(fields: [sellerId], references: [id])
  sellerId                   String?
  sellerName                 String?
  auctioneer                 Auctioneer?              @relation(fields: [auctioneerId], references: [id])
  auctioneerId               String?
  city                       City?                    @relation(fields: [cityId], references: [id])
  cityId                     String?
  state                      State?                   @relation(fields: [stateId], references: [id])
  stateId                    String?
  cityName                   String?
  stateUf                    String?
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?
  endDate                    DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  dataAiHint                 String?
  winner                     User?                    @relation("Winner", fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId                   String?
  winningBidTermUrl          String?
  allowInstallmentBids       Boolean?         @default(false)
  bens                       LotBens[]
  bids                       Bid[]
  questions                  LotQuestion[]
  maxBids                    UserLotMaxBid[]
  wins                       UserWin[]
  stageDetails               LotAuctionStageDetails[]
  createdAt                  DateTime         @default(now())
  updatedAt                  DateTime         @updatedAt
}

model LotQuestion {
  id                        String   @id @default(uuid())
  lotId                     String
  lot                       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction                   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                 String
  user                      User     @relation("AskedByUser", fields: [userId], references: [id])
  userId                    String
  userDisplayName           String
  questionText              String   @db.Text
  isPublic                  Boolean  @default(true)
  answerText                String?  @db.Text
  answeredAt                DateTime?
  answeredByUser            User?    @relation("AnsweredByUser", fields: [answeredByUserId], references: [id], onDelete: SetNull)
  answeredByUserId          String?
  answeredByUserDisplayName String?
  createdAt                 DateTime @default(now())
}

model Bem {
  id                             String        @id @default(uuid())
  publicId                       String        @unique
  title                          String
  description                    String?       @db.Text
  status                         String        @default("DISPONIVEL")
  categoryId                     String
  category                       LotCategory   @relation(fields: [categoryId], references: [id])
  subcategoryId                  String?
  subcategory                    Subcategory?  @relation(fields: [subcategoryId], references: [id])
  judicialProcessId              String?
  judicialProcess                JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  sellerId                       String?
  seller                         Seller?       @relation(fields: [sellerId], references: [id])
  evaluationValue                Decimal?      @db.Decimal(15, 2)
  imageUrl                       String?
  imageMediaId                   String?
  galleryImageUrls               Json?
  mediaItemIds                   Json?
  dataAiHint                     String?
  locationCity                   String?
  locationState                  String?
  address                        String?
  latitude                       Float?
  longitude                      Float?
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt
  lots                           LotBens[]
}

model MediaItem {
  id                   String           @id @default(uuid())
  fileName             String
  storagePath          String
  title                String?
  altText              String?
  caption              String?
  description          String?          @db.Text
  mimeType             String
  sizeBytes            Int?
  urlOriginal          String
  urlThumbnail         String?
  urlMedium            String?
  urlLarge             String?
  linkedLotIds         Json?
  dataAiHint           String?
  uploadedBy           User             @relation("UploadedBy", fields: [uploadedByUserId], references: [id])
  uploadedByUserId     String
  judicialProcess      JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId    String?
  uploadedAt           DateTime         @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DirectSaleOffer {
  id                   String                @id @default(uuid())
  publicId             String                @unique
  title                String
  description          String?               @db.Text
  offerType            DirectSaleOfferType
  price                Decimal?              @db.Decimal(15, 2)
  minimumOfferPrice    Decimal?              @db.Decimal(15, 2)
  status               DirectSaleOfferStatus @default(ACTIVE)
  category             LotCategory           @relation(fields: [categoryId], references: [id])
  categoryId           String
  seller               Seller                @relation(fields: [sellerId], references: [id])
  sellerId             String
  sellerName           String
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int                   @default(0)
  expiresAt            DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model DocumentType {
  id              String         @id @default(uuid())
  name            String         @unique
  description     String?        @db.Text
  isRequired      Boolean        @default(true)
  /// Comma-separated: PHYSICAL,LEGAL,ALL,PROCESS
  appliesTo       String?
  userDocuments   UserDocument[]
}

model UserDocument {
  id               String       @id @default(uuid())
  userId           String
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentTypeId   String
  documentType     DocumentType @relation(fields: [documentTypeId], references: [id])
  status           String       @default("PENDING")
  fileUrl          String
  fileName         String?
  rejectionReason  String?      @db.Text
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@unique([userId, documentTypeId])
}

model DocumentTemplate {
  id        String               @id @default(uuid())
  name      String
  type      DocumentTemplateType
  content   String?              @db.Text
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Bid {
  id            String   @id @default(uuid())
  lotId         String
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId     String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidderId      String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
}

model UserWin {
  id               String        @id @default(uuid())
  lotId            String        @unique
  lot              Lot           @relation(fields: [lotId], references: [id])
  userId           String
  user             User          @relation(fields: [userId], references: [id])
  winningBidAmount Decimal       @db.Decimal(15, 2)
  winDate          DateTime      @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lotId     String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

// =================================================================
// Settings and other single-document models
// =================================================================

model PlatformSettings {
  id                             String                 @id @default("global")
  siteTitle                      String
  siteTagline                    String?
  logoUrl                        String?
  faviconUrl                     String?
  galleryImageBasePath           String
  storageProvider                String
  firebaseStorageBucket          String?
  activeThemeName                String?
  themes                         Json?
  platformPublicIdMasks          Json?
  homepageSections               Json?
  mentalTriggerSettings          Json?
  sectionBadgeVisibility         Json?
  mapSettings                    Json?
  searchPaginationType           String
  searchItemsPerPage             Int
  searchLoadMoreCount            Int
  showCountdownOnLotDetail       Boolean
  showCountdownOnCards           Boolean
  showRelatedLotsOnLotDetail     Boolean
  relatedLotsCount               Int
  defaultUrgencyTimerHours       Int?
  variableIncrementTable         Json?
  biddingSettings                Json?
  paymentGatewaySettings         Json?
  defaultListItemsPerPage        Int?
  updatedAt                      DateTime               @updatedAt
}

model VehicleMake {
  id      String         @id @default(uuid())
  name    String         @unique
  slug    String         @unique
  models  VehicleModel[]
}

model VehicleModel {
  id     String      @id @default(uuid())
  name   String
  slug   String
  makeId String
  make   VehicleMake @relation(fields: [makeId], references: [id])

  @@unique([name, makeId])
}
