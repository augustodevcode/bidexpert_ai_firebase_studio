// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =====================================================================
// AUTH & USERS
// =====================================================================

model User {
  id                  String    @id @default(cuid())
  email               String    @unique
  fullName            String
  password            String
  roleId              String?
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  badges              String[]
  accountType         AccountType @default(PHYSICAL)
  
  // PF Details
  cpf               String? @unique
  rgNumber          String?
  rgIssuer          String?
  rgIssueDate       DateTime?
  rgState           String?
  dateOfBirth       DateTime?
  gender            String?
  profession        String?
  nationality       String?
  maritalStatus     String?
  propertyRegime    String? // Regime de bens
  spouseName        String?
  spouseCpf         String?

  // PJ Details
  razaoSocial         String?
  cnpj                String? @unique
  inscricaoEstadual   String?
  website             String?

  // Contact & Address
  cellPhone     String?
  homePhone     String?
  zipCode       String?
  street        String?
  number        String?
  complement    String?
  neighborhood  String?
  city          String?
  state         String?

  // Preferences
  optInMarketing    Boolean @default(false)
  
  // Timestamps
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relationships
  role                 Role?              @relation(fields: [roleId], references: [id], onDelete: SetNull)
  sellerProfile        Seller?
  auctioneerProfile    Auctioneer?
  documents            UserDocument[]
  notifications        Notification[]
  bids                 Bid[]
  wins                 UserWin[]
  questions            LotQuestion[]      @relation("QuestionAskedBy")
  answeredQuestions    LotQuestion[]      @relation("QuestionAnsweredBy")
  reviews              Review[]
  uploadedMedia        MediaItem[]
  maxBids              UserLotMaxBid[]
}

model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  permissions     String[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  users           User[]
}

model UserDocument {
  id                String    @id @default(cuid())
  userId            String
  documentTypeId    String
  fileUrl           String
  fileName          String?
  status            UserDocumentStatus @default(NOT_SENT)
  uploadDate        DateTime  @default(now())
  analysisDate      DateTime?
  analystId         String?
  rejectionReason   String?   @db.Text

  // Relationships
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType   DocumentType  @relation(fields: [documentTypeId], references: [id])
  
  @@unique([userId, documentTypeId])
}

model DocumentType {
  id              String       @id @default(cuid())
  name            String       @unique
  description     String?
  isRequired      Boolean      @default(true)
  appliesTo       String?      // e.g., 'PHYSICAL,LEGAL'
  allowedFormats  String?      // e.g., 'pdf,jpg,png'
  displayOrder    Int          @default(0)
  
  userDocuments   UserDocument[]
}

// =====================================================================
// AUCTION & LOTS
// =====================================================================

model Auction {
  id                             String        @id @default(cuid())
  publicId                       String        @unique @default(cuid())
  title                          String
  fullTitle                      String?
  description                    String?       @db.Text
  status                         AuctionStatus @default(RASCUNHO)
  auctionType                    AuctionType?
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json
  city                           String?
  state                          String?
  imageUrl                       String?
  imageMediaId                   String?       @unique
  dataAiHint                     String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  visits                         Int           @default(0)
  initialOffer                   Float?
  totalLots                      Int           @default(0)
  bidsCount                      Int           @default(0)
  sellingBranch                  String?
  vehicleLocation                String?
  automaticBiddingEnabled        Boolean       @default(false)
  silentBiddingEnabled           Boolean       @default(false)
  allowMultipleBidsPerUser       Boolean       @default(true)
  allowInstallmentBids           Boolean       @default(false)
  softCloseEnabled               Boolean       @default(false)
  softCloseMinutes               Int?
  estimatedRevenue               Float?
  achievedRevenue                Float?        @default(0)
  totalHabilitatedUsers          Int?
  isFeaturedOnMarketplace        Boolean?      @default(false)
  marketplaceAnnouncementTitle   String?
  additionalTriggers             String[]
  autoRelistSettings             Json?

  // Relationships
  categoryId                     String?
  auctioneerId                   String
  sellerId                       String?
  judicialProcessId              String?       @unique

  category                       LotCategory?           @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  auctioneer                     Auctioneer             @relation(fields: [auctioneerId], references: [id])
  seller                         Seller?                @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  judicialProcess                JudicialProcess?       @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  image                          MediaItem?             @relation("AuctionImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  
  lots                           Lot[]
  bids                           Bid[]
  questions                      LotQuestion[]
}


model Lot {
  id                             String      @id @default(cuid())
  publicId                       String      @unique @default(cuid())
  number                         String?
  title                          String
  description                    String?     @db.Text
  price                          Float       @default(0)
  initialPrice                   Float?
  secondInitialPrice             Float?
  bidIncrementStep               Float?
  status                         LotStatus
  imageUrl                       String?
  imageMediaId                   String?     @unique
  galleryImageUrls               String[]
  dataAiHint                     String?
  winningBidTermUrl              String?
  views                          Int         @default(0)
  bidsCount                      Int         @default(0)
  isFeatured                     Boolean     @default(false)
  isExclusive                    Boolean     @default(false)
  discountPercentage             Float?
  additionalTriggers             String[]
  
  latitude                       Float?
  longitude                      Float?
  mapAddress                     String?
  mapEmbedUrl                    String?
  mapStaticImageUrl              String?

  judicialProcessNumber          String?
  courtDistrict                  String?
  courtName                      String?
  publicProcessUrl               String?
  propertyRegistrationNumber     String?
  propertyLiens                  String?
  knownDebts                     String?
  additionalDocumentsInfo        String?     @db.Text
  
  reservePrice                   Float?
  evaluationValue                Float?
  debtAmount                     Float?
  itbiValue                      Float?
  
  endDate                        DateTime?
  lotSpecificAuctionDate         DateTime?
  secondAuctionDate              DateTime?
  condition                      String?
  
  createdAt                      DateTime    @default(now())
  updatedAt                      DateTime    @updatedAt
  
  // Relationships
  auctionId                      String
  categoryId                     String?
  subcategoryId                  String?
  stateId                        String?
  cityId                         String?
  sellerId                       String?
  auctioneerId                   String?

  auction                        Auction           @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                       LotCategory?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory                    Subcategory?      @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  state                          StateInfo?        @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city                           CityInfo?         @relation(fields: [cityId], references: [id], onDelete: SetNull)
  image                          MediaItem?        @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  bens                           Bem[]
  mediaItems                     MediaItem[]
  bids                           Bid[]
  wins                           UserWin[]
  reviews                        Review[]
  questions                      LotQuestion[]
  maxBids                        UserLotMaxBid[]
}

model Seller {
  id                          String    @id @default(cuid())
  publicId                    String    @unique @default(cuid())
  name                        String    @unique
  slug                        String    @unique
  contactName                 String?
  email                       String?
  phone                       String?
  address                     String?
  city                        String?
  state                       String?
  zipCode                     String?
  website                     String?
  logoUrl                     String?
  logoMediaId                 String?   @unique
  dataAiHintLogo              String?
  description                 String?   @db.Text
  memberSince                 DateTime?
  rating                      Float?
  activeLotsCount             Int?
  totalSalesValue             Float?
  auctionsFacilitatedCount    Int?
  isJudicial                  Boolean   @default(false)
  
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  
  // Relationships
  userId                      String?   @unique
  judicialBranchId            String?   @unique

  user                        User?     @relation(fields: [userId], references: [id])
  logo                        MediaItem? @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  auctions                    Auction[]
  bens                        Bem[]
  directSaleOffers            DirectSaleOffer[]
  judicialBranch              JudicialBranch? @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  judicialProcesses           JudicialProcess[]
  blogPosts                   BlogPost[]
}

model Auctioneer {
  id                          String    @id @default(cuid())
  publicId                    String    @unique @default(cuid())
  name                        String    @unique
  slug                        String    @unique
  registrationNumber          String?
  contactName                 String?
  email                       String?
  phone                       String?
  address                     String?
  city                        String?
  state                       String?
  zipCode                     String?
  website                     String?
  logoUrl                     String?
  logoMediaId                 String?   @unique
  dataAiHintLogo              String?
  description                 String?   @db.Text
  memberSince                 DateTime?
  rating                      Float?
  auctionsConductedCount      Int?
  totalValueSold              Float?

  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt

  // Relationships
  userId                      String?   @unique
  user                        User?     @relation(fields: [userId], references: [id])
  logo                        MediaItem? @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  auctions                    Auction[]
}

// =====================================================================
// JUDICIAL ENTITIES
// =====================================================================

model Court {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  stateUf     String
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  districts   JudicialDistrict[]
  processes   JudicialProcess[]
}

model JudicialDistrict {
  id        String   @id @default(cuid())
  name      String
  slug      String
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  courtId   String
  stateId   String
  
  court     Court            @relation(fields: [courtId], references: [id])
  state     StateInfo        @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]
  
  @@unique([name, stateId])
}

model JudicialBranch {
  id          String   @id @default(cuid())
  name        String
  slug        String
  contactName String?
  phone       String?
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  districtId  String
  district    JudicialDistrict @relation(fields: [districtId], references: [id])
  processes   JudicialProcess[]
  seller      Seller?
  
  @@unique([name, districtId])
}

model JudicialProcess {
  id                  String   @id @default(cuid())
  publicId            String   @unique @default(cuid())
  processNumber       String   @unique
  isElectronic        Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relationships
  courtId             String
  districtId          String
  branchId            String
  sellerId            String?

  court               Court            @relation(fields: [courtId], references: [id])
  district            JudicialDistrict @relation(fields: [districtId], references: [id])
  branch              JudicialBranch   @relation(fields: [branchId], references: [id])
  seller              Seller?          @relation(fields: [sellerId], references: [id])
  parties             ProcessParty[]
  bens                Bem[]
  auction             Auction?
}

model ProcessParty {
  id              String         @id @default(cuid())
  processId       String
  name            String
  documentNumber  String?
  partyType       ProcessPartyType @default(OUTRO)

  // Relationships
  process         JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)
  
  @@unique([processId, name, partyType])
}

model Bem {
  id                             String      @id @default(cuid())
  publicId                       String      @unique @default(cuid())
  title                          String
  description                    String?     @db.Text
  status                         BemStatus   @default(DISPONIVEL)
  evaluationValue                Float?
  imageUrl                       String?
  imageMediaId                   String?     @unique
  galleryImageUrls               Json?
  dataAiHint                     String?
  locationCity                   String?
  locationState                  String?
  address                        String?
  latitude                       Float?
  longitude                      Float?
  createdAt                      DateTime    @default(now())
  updatedAt                      DateTime    @updatedAt

  // Dynamic Fields based on Category
  // Veículos
  plate                        String?
  make                         String?
  model                        String?
  version                      String?
  year                         Int?
  modelYear                    Int?
  mileage                      Int?
  color                        String?
  fuelType                     String?
  transmissionType             String?
  bodyType                     String?
  vin                          String?
  renavam                      String?
  enginePower                  String?
  numberOfDoors                Int?
  vehicleOptions               String?
  detranStatus                 String?
  debts                        String?
  runningCondition             String?
  bodyCondition                String?
  tiresCondition               String?
  hasKey                       Boolean?
  
  // Imóveis
  propertyRegistrationNumber String?
  iptuNumber                   String?
  isOccupied                   Boolean?
  totalArea                    Float?
  builtArea                    Float?
  bedrooms                     Int?
  suites                       Int?
  bathrooms                    Int?
  parkingSpaces                Int?
  constructionType             String?
  finishes                     String?
  infrastructure               String?
  condoDetails                 String?
  improvements                 String?
  topography                   String?
  liensAndEncumbrances         String?
  propertyDebts                String?
  unregisteredRecords          String?
  hasHabiteSe                  Boolean?
  zoningRestrictions           String?
  
  // Eletrônicos
  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String?
  includedAccessories        String?
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String?
  
  // Eletrodomésticos
  applianceCapacity        String?
  voltage                  String?
  applianceType              String?
  additionalFunctions      String?
  
  // Máquinas e Equipamentos
  hoursUsed                Int?
  engineType               String?
  capacityOrPower          String?
  maintenanceHistory       String?
  installationLocation     String?
  compliesWithNR           String?
  operatingLicenses        String?
  
  // Semoventes (Livestock)
  breed                    String?
  age                      String?
  sex                      String?
  weight                   String?
  individualId             String?
  purpose                  String?
  sanitaryCondition        String?
  lineage                  String?
  isPregnant               Boolean?
  specialSkills            String?
  gtaDocument              String?
  breedRegistryDocument    String?

  // Móveis
  furnitureType            String?
  material                 String?
  style                    String?
  dimensions               String?
  pieceCount               Int?
  
  // Joias
  jewelryType              String?
  metal                    String?
  gemstones                String?
  totalWeight              String?
  jewelrySize              String?
  authenticityCertificate  String?
  
  // Obras de Arte e Antiguidades
  workType                 String?
  artist                   String?
  period                   String?
  technique                String?
  provenance               String?
  
  // Embarcações
  boatType                 String?
  boatLength               String?
  hullMaterial             String?
  onboardEquipment         String?
  
  // Alimentos
  productName              String?
  quantity                 String?
  packagingType            String?
  expirationDate           DateTime?
  storageConditions        String?
  
  // Metais Preciosos e Pedras
  preciousMetalType        String?
  purity                   String?
  
  // Bens Florestais
  forestGoodsType          String?
  volumeOrQuantity         String?
  species                  String?
  dofNumber                String?

  // Relationships
  categoryId        String
  subcategoryId     String?
  judicialProcessId String?
  sellerId          String?

  category          LotCategory?       @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory       Subcategory?       @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess   JudicialProcess?   @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller            Seller?            @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  image             MediaItem?         @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  lots              Lot[]
}

// =====================================================================
// CATEGORIES & GEOGRAPHICAL DATA
// =====================================================================

model LotCategory {
  id                 String   @id @default(cuid())
  name               String   @unique
  slug               String   @unique
  description        String?
  itemCount          Int?     @default(0)
  hasSubcategories   Boolean? @default(false)
  logoUrl            String?
  logoMediaId        String?  @unique
  dataAiHintLogo     String?
  coverImageUrl      String?
  coverImageMediaId  String?  @unique
  dataAiHintCover    String?
  megaMenuImageUrl   String?
  megaMenuImageMediaId String? @unique
  dataAiHintMegaMenu String?

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relationships
  logo               MediaItem?   @relation("CategoryLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  coverImage         MediaItem?   @relation("CategoryCover", fields: [coverImageMediaId], references: [id], onDelete: SetNull)
  megaMenuImage      MediaItem?   @relation("CategoryMegaMenu", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull)
  lots               Lot[]
  subcategories      Subcategory[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
}

model Subcategory {
  id               String   @id @default(cuid())
  name             String
  slug             String   @unique
  description      String?
  parentCategoryId String
  itemCount        Int?
  displayOrder     Int?
  iconUrl          String?
  iconMediaId      String?  @unique
  dataAiHintIcon   String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots             Lot[]
  bens             Bem[]
  icon             MediaItem?  @relation("SubcategoryIcon", fields: [iconMediaId], references: [id], onDelete: SetNull)
}


model StateInfo {
  id        String   @id @default(cuid())
  name      String   @unique
  uf        String   @unique
  slug      String   @unique
  cityCount Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  lots      Lot[]
  cities    CityInfo[]
  courts    Court[]
  districts JudicialDistrict[]
}

model CityInfo {
  id        String   @id @default(cuid())
  name      String
  slug      String
  stateId   String
  stateUf   String
  ibgeCode  String?
  lotCount  Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  state     StateInfo @relation(fields: [stateId], references: [id])
  lots      Lot[]
}

// =====================================================================
// MEDIA & CONTENT
// =====================================================================

model MediaItem {
  id                         String    @id @default(cuid())
  fileName                   String
  storagePath                String?   @unique
  uploadedAt                 DateTime  @default(now())
  uploadedBy                 String?   
  title                      String?
  altText                    String?
  caption                    String?
  description                String?   @db.Text
  mimeType                   String
  sizeBytes                  Int
  dimensions                 Json?
  urlOriginal                String?
  urlThumbnail               String?
  urlMedium                  String?
  urlLarge                   String?
  linkedLotIds               String[]
  dataAiHint                 String?
  
  // Relationships
  uploader                   User?     @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)
  auctionAsImage             Auction?  @relation("AuctionImage")
  lotAsImage                 Lot?      @relation("LotImage")
  sellerAsLogo               Seller?   @relation("SellerLogo")
  auctioneerAsLogo           Auctioneer? @relation("AuctioneerLogo")
  bemAsImage                 Bem?      @relation("BemImage")
  categoryAsLogo             LotCategory? @relation("CategoryLogo")
  categoryAsCover            LotCategory? @relation("CategoryCover")
  categoryAsMegaMenu         LotCategory? @relation("CategoryMegaMenu")
  subcategoryAsIcon          Subcategory? @relation("SubcategoryIcon")
  lots                       Lot[]
}

model BlogPost {
  id             String    @id @default(cuid())
  title          String
  slug           String    @unique
  content        String    @db.Text
  authorId       String
  authorName     String
  imageUrl       String?
  published      Boolean   @default(false)
  publishedAt    DateTime?
  tags           String[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relationships
  author         Seller @relation(fields: [authorId], references: [id])
}

// =====================================================================
// OTHER ENTITIES
// =====================================================================

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ContactMessage {
  id        String    @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String    @db.Text
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())
}

model Bid {
  id              String      @id @default(cuid())
  amount          Float
  timestamp       DateTime    @default(now())

  // Relationships
  lotId           String
  auctionId       String
  bidderId        String
  bidderDisplay   String

  lot             Lot         @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction         Auction     @relation(fields: [auctionId], references: [id], onDelete: NoAction)
  bidder          User        @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id                  String        @id @default(cuid())
  userId              String
  lotId               String        @unique // A lot can only be won once
  winningBidAmount    Float
  winDate             DateTime
  paymentStatus       PaymentStatus @default(PENDENTE)
  invoiceUrl          String?
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model Review {
    id              String   @id @default(cuid())
    rating          Int
    comment         String   @db.Text
    createdAt       DateTime @default(now())

    // Relationships
    userId          String
    lotId           String
    auctionId       String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model LotQuestion {
    id                      String   @id @default(cuid())
    questionText            String   @db.Text
    isPublic                Boolean  @default(true)
    createdAt               DateTime @default(now())
    answerText              String?  @db.Text
    answeredAt              DateTime?
    answeredByUserId        String?
    
    // Relationships
    userId                  String
    lotId                   String
    auctionId               String

    user                    User     @relation("QuestionAskedBy", fields: [userId], references: [id], onDelete: Cascade)
    lot                     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
    answeredBy              User?    @relation("QuestionAnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)
    auction                 Auction  @relation(fields: [auctionId], references: [id], onDelete: NoAction)
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}


// =====================================================================
// SYSTEM SETTINGS & ENUMS
// =====================================================================

model PlatformSettings {
  id                           String               @id @default("global")
  siteTitle                    String?
  siteTagline                  String?
  galleryImageBasePath         String?
  storageProvider              StorageProviderType? @default(local)
  firebaseStorageBucket        String?
  activeThemeName              String?
  themes                       Json?
  platformPublicIdMasks        Json?
  homepageSections             Json?
  mentalTriggerSettings        Json?
  sectionBadgeVisibility       Json?
  mapSettings                  Json?
  searchPaginationType         SearchPaginationType? @default(loadMore)
  searchItemsPerPage           Int?
  searchLoadMoreCount          Int?
  showCountdownOnLotDetail     Boolean?
  showCountdownOnCards         Boolean?
  showRelatedLotsOnLotDetail   Boolean?
  relatedLotsCount             Int?
  variableIncrementTable       Json?
  biddingSettings              Json?
  defaultListItemsPerPage      Int?
  updatedAt                    DateTime             @updatedAt
}

model DirectSaleOffer {
  id                       String                  @id @default(cuid())
  publicId                 String                  @unique @default(cuid())
  title                    String
  description              String                  @db.Text
  offerType                DirectSaleOfferType
  status                   DirectSaleOfferStatus
  price                    Float?
  minimumOfferPrice        Float?
  locationCity             String?
  locationState            String?
  imageUrl                 String?
  imageMediaId             String?                 @unique
  dataAiHint               String?
  galleryImageUrls         Json?
  itemsIncluded            Json?
  tags                     String[]
  views                    Int                     @default(0)
  proposalsCount           Int                     @default(0)
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  expiresAt                DateTime?

  // Relationships
  categoryId               String
  sellerId                 String
  
  category                 LotCategory             @relation(fields: [categoryId], references: [id])
  seller                   Seller                  @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  image                    MediaItem?              @relation("DirectSaleOfferImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
}

// ENUMS

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum StorageProviderType {
  local
  firebase
}

enum SearchPaginationType {
    loadMore
    numberedPages
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
}
```
- src/app/admin/habilitations/columns.tsx:
```tsx

// src/app/admin/habilitations/columns.tsx
'use client';

import type { ColumnDef } from '@tanstack/react-table';
import type { UserProfileData } from '@/types';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { DataTableColumnHeader } from '@/components/ui/data-table-column-header';
import { getUserHabilitationStatusInfo } from '@/lib/sample-data-helpers';
import Link from 'next/link';
import { Eye } from 'lucide-react';

export const createColumns = (): ColumnDef<UserProfileData>[] => [
  {
    accessorKey: "fullName",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Nome do Usuário" />,
    cell: ({ row }) => (
      <div className="font-medium">
        {row.getValue("fullName")}
      </div>
    ),
  },
  {
    accessorKey: "email",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Email" />,
  },
  {
    accessorKey: "habilitationStatus",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Status" />,
    cell: ({ row }) => {
      const status = row.getValue("habilitationStatus");
      const statusInfo = getUserHabilitationStatusInfo(status as any);
      const Icon = statusInfo.icon;
      return <Badge variant="outline" className={`flex items-center gap-1.5 ${statusInfo.textColor.replace('text-','border-')} ${statusInfo.textColor.replace('text-','bg-').replace('-600', '/10').replace('-700', '/10')}`}>
          <Icon className={`h-3 w-3 ${statusInfo.textColor}`} />{statusInfo.text}
        </Badge>;
    },
    filterFn: (row, id, value) => (value as string[]).includes(row.getValue(id)),
  },
  {
    accessorKey: "updatedAt",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Última Atualização" />,
    cell: ({ row }) => new Date(row.getValue("updatedAt")).toLocaleString('pt-BR'),
  },
  {
    id: "actions",
    cell: ({ row }) => {
      const user = row.original;
      return (
        <Button asChild variant="outline" size="sm">
          <Link href={`/admin/habilitations/${user.uid}`}>
            <Eye className="mr-2 h-4 w-4" />Revisar Documentos
          </Link>
        </Button>
      );
    },
  },
];

```
- src/app/admin/judicial-processes/columns.tsx:
```tsx

// src/app/admin/judicial-processes/columns.tsx
'use client';

import type { ColumnDef } from '@tanstack/react-table';
import { MoreHorizontal, Pencil, Trash2 } from 'lucide-react';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import Link from 'next/link';
import type { JudicialProcess } from '@/types';
import { DataTableColumnHeader } from '@/components/ui/data-table-column-header';

export const createColumns = ({ handleDelete }: { handleDelete: (id: string) => void }): ColumnDef<JudicialProcess>[] => [
  {
    accessorKey: "processNumber",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Nº do Processo" />,
    cell: ({ row }) => (
      <Link href={`/admin/judicial-processes/${row.original.id}/edit`} className="hover:text-primary font-medium">
        {row.getValue("processNumber")}
      </Link>
    ),
  },
  {
    accessorKey: "courtName",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Tribunal" />,
    enableGrouping: true,
  },
  {
    accessorKey: "districtName",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Comarca" />,
  },
  {
    accessorKey: "branchName",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Vara" />,
    enableGrouping: true,
  },
  {
    accessorKey: "sellerName",
    header: ({ column }) => <DataTableColumnHeader column={column} title="Comitente" />,
    enableGrouping: true,
  },
  {
    id: "actions",
    cell: ({ row }) => {
      const process = row.original;
      return (
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" className="h-8 w-8 p-0">
              <span className="sr-only">Abrir menu</span>
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuLabel>Ações</DropdownMenuLabel>
            <DropdownMenuItem asChild>
              <Link href={`/admin/judicial-processes/${process.id}/edit`}><Pencil className="mr-2 h-4 w-4"/>Editar</Link>
            </DropdownMenuItem>
            <DropdownMenuSeparator />
            <DropdownMenuItem onClick={() => handleDelete(process.id)} className="text-destructive">
              <Trash2 className="mr-2 h-4 w-4" />Excluir
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      );
    },
  },
];

```
- src/lib/sample-data-helpers.ts:
```tsx
// src/lib/sample-data-helpers.ts
import type { Lot, LotCategory, UserDocumentStatus, UserHabilitationStatus, PaymentStatus, LotStatus, DirectSaleOfferStatus, AuctionStatus, PlatformSettings, Auction, AuctionStage } from '@/types';
import { FileText, Clock, FileWarning, CheckCircle2, ShieldAlert, HelpCircle, FileUp, CheckCircle } from 'lucide-react';
import { isPast } from 'date-fns';

// ============================================================================
// PURE HELPER FUNCTIONS (CLIENT & SERVER SAFE)
// ============================================================================
export const slugify = (text: string): string => {
  if (!text) return '';
  return text
    .toString()
    .toLowerCase()
    .trim()
    .normalize("NFD").replace(/[\u0300-\u036f]/g, "") 
    .replace(/\s+/g, '-') 
    .replace(/[^\w-]+/g, '') 
    .replace(/--+/g, '-'); 
};


export const getAuctionStatusText = (status: AuctionStatus | LotStatus | UserDocumentStatus | UserHabilitationStatus | PaymentStatus | DirectSaleOfferStatus | string | undefined ): string => {
  if (!status) return 'Status Desconhecido';
  switch (status) {
    case 'ABERTO_PARA_LANCES': return 'Aberto para Lances';
    case 'EM_BREVE': return 'Em Breve';
    case 'ENCERRADO': return 'Encerrado';
    case 'FINALIZADO': return 'Finalizado';
    case 'ABERTO': return 'Aberto';
    case 'CANCELADO': return 'Cancelado';
    case 'SUSPENSO': return 'Suspenso';
    case 'VENDIDO': return 'Vendido';
    case 'NAO_VENDIDO': return 'Não Vendido';
    case 'NOT_SENT': return 'Não Enviado';
    case 'SUBMITTED': return 'Enviado';
    case 'APPROVED': return 'Aprovado';
    case 'REJECTED': return 'Rejeitado';
    case 'PENDING_ANALYSIS': return 'Em Análise';
    case 'PENDING_DOCUMENTS': return 'Documentos Pendentes';
    case 'HABILITADO': return 'Habilitado'; 
    case 'REJECTED_DOCUMENTS': return 'Documentos Rejeitados';
    case 'BLOCKED': return 'Conta Bloqueada';
    case 'ACTIVE': return 'Ativa'; 
    case 'SOLD': return 'Vendido'; 
    case 'EXPIRED': return 'Expirada'; 
    case 'PENDING_APPROVAL': return 'Pendente Aprovação';
    case 'RASCUNHO': return 'Rascunho';
    case 'EM_PREPARACAO': return 'Em Preparação';
    case 'PENDENTE': return 'Pendente';
    case 'PROCESSANDO': return 'Processando';
    case 'PAGO': return 'Pago';
    case 'FALHOU': return 'Falhou';
    case 'REEMBOLSADO': return 'Reembolsado';
    default: {
      if (typeof status === 'string') {
        return status.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
      }
      return 'Status Desconhecido';
    }
  }
};

export const getLotStatusColor = (status: LotStatus | DirectSaleOfferStatus): string => {
  switch (status) {
    case 'ABERTO_PARA_LANCES':
    case 'ACTIVE': 
      return 'bg-green-600 text-white';
    case 'EM_BREVE':
    case 'PENDING_APPROVAL': 
      return 'bg-blue-500 text-white';
    case 'ENCERRADO':
    case 'VENDIDO':
    case 'NAO_VENDIDO':
    case 'SOLD': 
    case 'EXPIRED': 
      return 'bg-gray-500 text-white';
    default:
      return 'bg-gray-300 text-gray-800';
  }
};

export const getAuctionStatusColor = (status: AuctionStatus | undefined): string => {
  if (!status) return 'bg-gray-400 text-gray-800';
  switch (status) {
    case 'ABERTO_PARA_LANCES':
    case 'ABERTO':
      return 'bg-green-600 text-white';
    case 'EM_BREVE':
      return 'bg-blue-500 text-white';
    case 'ENCERRADO':
    case 'FINALIZADO':
    case 'CANCELADO':
    case 'SUSPENSO':
      return 'bg-gray-500 text-white';
    case 'RASCUNHO':
    case 'EM_PREPARACAO':
      return 'bg-yellow-500 text-white';
    default:
      return 'bg-gray-300 text-gray-800';
  }
};

export const getPaymentStatusText = (status: PaymentStatus): string => getAuctionStatusText(status);

export const getUserDocumentStatusColor = (status: UserDocumentStatus): string => {
  switch (status) {
    case 'APPROVED': return 'border-green-500';
    case 'REJECTED': return 'border-red-500';
    case 'PENDING_ANALYSIS':
    case 'SUBMITTED':
      return 'border-yellow-500';
    case 'NOT_SENT':
    default:
      return 'border-gray-400';
  }
};

export const getUserDocumentStatusInfo = (status: UserDocumentStatus | undefined) => {
  switch (status) {
    case 'APPROVED':
      return { text: 'Aprovado', icon: CheckCircle, badgeVariant: 'secondary', textColor: 'text-green-700' };
    case 'REJECTED':
      return { text: 'Rejeitado', icon: FileWarning, badgeVariant: 'destructive', textColor: 'text-destructive' };
    case 'PENDING_ANALYSIS':
      return { text: 'Em Análise', icon: Clock, badgeVariant: 'outline', textColor: 'text-yellow-600' };
    case 'SUBMITTED':
      return { text: 'Enviado', icon: Clock, badgeVariant: 'outline', textColor: 'text-yellow-600' };
    case 'NOT_SENT':
    default:
      return { text: 'Não Enviado', icon: FileUp, badgeVariant: 'secondary', textColor: 'text-muted-foreground' };
  }
};

export const getUserHabilitationStatusInfo = (status: UserHabilitationStatus | undefined) => {
  switch (status) {
    case 'HABILITADO':
      return { text: 'Habilitado', description: 'Você está habilitado para dar lances!', color: 'text-green-600', icon: CheckCircle2, progress: 100 };
    case 'PENDING_ANALYSIS':
      return { text: 'Em Análise', description: 'Nossa equipe está analisando seus documentos.', color: 'text-yellow-600', icon: Clock, progress: 75 };
    case 'PENDING_DOCUMENTS':
      return { text: 'Documentos Pendentes', description: 'Envie os documentos marcados como obrigatórios (*) para prosseguir.', color: 'text-orange-600', icon: FileWarning, progress: 25 };
    case 'REJECTED_DOCUMENTS':
      return { text: 'Documentos Rejeitados', description: 'Um ou mais documentos foram rejeitados. Verifique abaixo.', color: 'text-red-600', icon: FileWarning, progress: 50 };
    case 'BLOCKED':
      return { text: 'Conta Bloqueada', description: 'Sua conta está bloqueada. Entre em contato com o suporte.', color: 'text-gray-700', icon: ShieldAlert, progress: 0 };
    default:
      return { text: 'Pendente', description: 'Complete seu cadastro e envie os documentos.', color: 'text-muted-foreground', icon: HelpCircle, progress: 10 };
  }
};


export const getCategoryAssets = (categoryName: string): { bannerUrl: string, bannerAiHint: string } => {
  const assets: Record<string, { bannerUrl: string, bannerAiHint: string }> = {
      'Leilões Judiciais': { bannerUrl: 'https://placehold.co/1200x250.png?text=Leiloes+Judiciais', bannerAiHint: 'tribunal martelo' },
      'Leilões Extrajudiciais': { bannerUrl: 'https://placehold.co/1200x250.png?text=Leiloes+Extrajudiciais', bannerAiHint: 'contrato assinatura' },
      'Tomada de Preços': { bannerUrl: 'https://placehold.co/1200x250.png?text=Tomada+de+Precos', bannerAiHint: 'documentos negocios' },
      'Venda Direta': { bannerUrl: 'https://placehold.co/1200x250.png?text=Venda+Direta', bannerAiHint: 'carrinho compras' },
      'Segunda Praça': { bannerUrl: 'https://placehold.co/1200x250.png?text=Segunda+Praca', bannerAiHint: 'desconto oportunidade' },
      'Leilões Encerrados': { bannerUrl: 'https://placehold.co/1200x250.png?text=Leiloes+Encerrados', bannerAiHint: 'arquivo historico' },
      'Leilões Cancelados': { bannerUrl: 'https://placehold.co/1200x250.png?text=Leiloes+Cancelados', bannerAiHint: 'carimbo cancelado' },
      'Default': { bannerUrl: 'https://placehold.co/1200x250.png?text=Leiloes', bannerAiHint: 'leilao geral' }
  };
  return assets[categoryName] || assets['Default'];
};

export const getUniqueLotLocations = (lots: Lot[]): string[] => {
  if (!lots) return [];
  const locations = new Set<string>();
  lots.forEach(lot => {
    if (lot.cityName && lot.stateUf) {
      locations.add(`${lot.cityName} - ${lot.stateUf}`);
    }
  });
  return Array.from(locations).sort();
};

export function getEffectiveLotEndDate(lot: Lot, auction?: Auction): Date | null {
  if (!lot) return null;
  
  const relevantAuction = auction || { auctionStages: [], endDate: null, auctionDate: null };

  let finalEndDate: Date | null = null;
  
  if (relevantAuction.auctionStages && relevantAuction.auctionStages.length > 0) {
    const now = new Date();
    // Find the first stage that hasn't ended yet
    let relevantStage = relevantAuction.auctionStages
      .filter(stage => stage.endDate && !isPast(new Date(stage.endDate as string)))
      .sort((a, b) => new Date(a.endDate as string).getTime() - new Date(b.endDate as string).getTime())[0];
    
    // If all stages are in the past, but the lot isn't marked as finished, take the last stage.
    // This ensures that even after a stage passes, we still have a reference date for "Encerrado".
    if (!relevantStage && lot.status !== 'VENDIDO' && lot.status !== 'NAO_VENDIDO') {
      relevantStage = relevantAuction.auctionStages.sort((a, b) => new Date(b.endDate as string).getTime() - new Date(a.endDate as string).getTime())[0];
    }
    
    if (relevantStage && relevantStage.endDate) {
      finalEndDate = new Date(relevantStage.endDate as string);
    }
  }

  // Fallbacks if stages logic doesn't yield a date
  if (!finalEndDate && relevantAuction.endDate) finalEndDate = new Date(relevantAuction.endDate as string);
  
  // The lot's own endDate should be the ultimate fallback
  if (!finalEndDate && lot.endDate) finalEndDate = new Date(lot.endDate as string);
  
  return finalEndDate;
}

```
- tailwind.config.ts:
```ts
import type {Config} from 'tailwindcss';

export default {
  darkMode: ['class'],
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      fontFamily: {
        body: ['Open Sans', 'sans-serif'],
        headline: ['Open Sans', 'sans-serif'],
        code: ['monospace'],
      },
      colors: {
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        chart: {
          '1': 'hsl(var(--chart-1))',
          '2': 'hsl(var(--chart-2))',
          '3': 'hsl(var(--chart-3))',
          '4': 'hsl(var(--chart-4))',
          '5': 'hsl(var(--chart-5))',
        },
        sidebar: {
          DEFAULT: 'hsl(var(--sidebar-background))',
          foreground: 'hsl(var(--sidebar-foreground))',
          primary: 'hsl(var(--sidebar-primary))',
          'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
          accent: 'hsl(var(--sidebar-accent))',
          'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
          border: 'hsl(var(--sidebar-border))',
          ring: 'hsl(var(--sidebar-ring))',
        },
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      keyframes: {
        'accordion-down': {
          from: {
            height: '0',
          },
          to: {
            height: 'var(--radix-accordion-content-height)',
          },
        },
        'accordion-up': {
          from: {
            height: 'var(--radix-accordion-content-height)',
          },
          to: {
            height: '0',
          },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
      },
    },
  },
  plugins: [require('tailwindcss-animate')],
} satisfies Config;
```
