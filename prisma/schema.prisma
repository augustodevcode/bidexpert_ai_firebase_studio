// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ==============================================================================
// ENUMS - Definindo tipos reutiliz√°veis
// ==============================================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

// ==============================================================================
// MODELS - Definindo a estrutura das tabelas do banco de dados
// ==============================================================================

model User {
  id                String                 @id @default(uuid())
  email             String                 @unique
  fullName          String
  password          String
  roleId            String?
  sellerId          String?                @unique
  accountType       AccountType?
  cpf               String?                @unique
  rgNumber          String?
  rgIssuer          String?
  rgIssueDate       DateTime?
  rgState           String?
  dateOfBirth       DateTime?
  cellPhone         String?
  homePhone         String?
  gender            String?
  profession        String?
  nationality       String?
  maritalStatus     String?
  propertyRegime    String?
  spouseName        String?
  spouseCpf         String?
  zipCode           String?
  street            String?
  number            String?
  complement        String?
  neighborhood      String?
  city              String?
  state             String?
  status            String?                @default("ATIVO")
  habilitationStatus UserHabilitationStatus @default(PENDING_DOCUMENTS)
  optInMarketing    Boolean                @default(false)
  badges            Json                   @default("[]")
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  avatarUrl         String?
  dataAiHint        String?
  activeBids        Int?                   @default(0)
  auctionsWon       Int?                   @default(0)
  itemsSold         Int?                   @default(0)
  razaoSocial       String?
  cnpj              String?                @unique
  inscricaoEstadual String?
  website           String?
  role              Role?                  @relation(fields: [roleId], references: [id])
  documents         UserDocument[]
  bids              Bid[]
  wins              UserWin[]
  notifications     Notification[]
  sellerProfile     Seller?                @relation(fields: [sellerId], references: [id])
  answeredQuestions LotQuestion[]          @relation("AnsweredByUser")
  maxBids           UserLotMaxBid[]
}

model Permission {
  id      String @id @default(uuid())
  name    String @unique
  roles   Role[] @relation("RolePermissions")
}

model Role {
  id              String       @id @default(uuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  permissions     Permission[] @relation("RolePermissions")
  users           User[]
}

model DocumentType {
  id             String         @id @default(uuid())
  name           String
  description    String?
  isRequired     Boolean        @default(true)
  appliesTo      Json           @default("[\"PHYSICAL\", \"LEGAL\", \"DIRECT_SALE_CONSIGNOR\"]")
  allowedFormats Json
  displayOrder   Int            @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  userDocuments  UserDocument[]
}

model UserDocument {
  id              String             @id @default(uuid())
  userId          String
  documentTypeId  String
  fileUrl         String?
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  rejectionReason String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType       @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

model Auction {
  id                             String        @id @default(uuid())
  publicId                       String        @unique
  title                          String
  fullTitle                      String?       @db.Text
  description                    String?       @db.Text
  status                         AuctionStatus @default(RASCUNHO)
  auctionType                    AuctionType?
  categoryId                     String
  auctioneerId                   String
  sellerId                       String?
  judicialProcessId              String?
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json
  imageUrl                       String?
  imageMediaId                   String?
  dataAiHint                     String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  automaticBiddingEnabled        Boolean?      @default(false)
  silentBiddingEnabled           Boolean?      @default(false)
  allowMultipleBidsPerUser       Boolean?      @default(true)
  allowInstallmentBids           Boolean?      @default(false)
  softCloseEnabled               Boolean?      @default(false)
  softCloseMinutes               Int?          @default(2)
  isFeaturedOnMarketplace        Boolean?      @default(false)
  marketplaceAnnouncementTitle   String?
  additionalTriggers             Json
  visits                         Int?          @default(0)
  initialOffer                   Float?
  bidsCount                      Int?          @default(0)
  totalLots                      Int?          @default(0)
  totalHabilitatedUsers          Int?          @default(0)
  estimatedRevenue               Float?
  achievedRevenue                Float?        @default(0)
  city                           String?
  state                          String?
  sellingBranch                  String?
  vehicleLocation                String?
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt
  category                       LotCategory   @relation(fields: [categoryId], references: [id])
  auctioneer                     Auctioneer    @relation(fields: [auctioneerId], references: [id])
  seller                         Seller?       @relation(fields: [sellerId], references: [id])
  judicialProcess                JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  lots                           Lot[]
  bids                           Bid[]
}

model Lot {
  id                          String      @id @default(uuid())
  publicId                    String      @unique
  auctionId                   String
  number                      String?
  title                       String
  description                 String?     @db.Text
  price                       Float
  initialPrice                Float?
  secondInitialPrice          Float?
  bidIncrementStep            Float?
  reservePrice                Float?
  evaluationValue             Float?
  debtAmount                  Float?
  itbiValue                   Float?
  status                      LotStatus
  categoryId                  String
  subcategoryId               String?
  imageMediaId                String?
  galleryImageUrls            Json
  mediaItemIds                Json
  bemIds                      Json
  winningBidTermUrl           String?
  isFeatured                  Boolean?    @default(false)
  isExclusive                 Boolean?    @default(false)
  discountPercentage          Float?
  additionalTriggers          Json
  latitude                    Float?
  longitude                   Float?
  mapAddress                  String?
  mapEmbedUrl                 String?     @db.Text
  mapStaticImageUrl           String?
  views                       Int?        @default(0)
  bidsCount                   Int?        @default(0)
  auctionDate                 DateTime?
  endDate                     DateTime?
  secondAuctionDate           DateTime?
  lotSpecificAuctionDate      DateTime?
  condition                   String?
  dataAiHint                  String?
  sellerId                    String?
  auctioneerId                String?
  judicialProcessNumber       String?
  courtDistrict               String?
  courtName                   String?
  publicProcessUrl            String?
  propertyRegistrationNumber  String?
  propertyLiens               String?     @db.Text
  knownDebts                  String?     @db.Text
  additionalDocumentsInfo     String?     @db.Text
  year                        Int?
  make                        String?
  model                       String?
  series                      String?
  stockNumber                 String?
  sellingBranch               String?
  vin                         String?
  vinStatus                   String?
  lossType                    String?
  primaryDamage               String?
  titleInfo                   String?
  titleBrand                  String?
  startCode                   String?
  hasKey                      Boolean?
  odometer                    String?
  airbagsStatus               String?
  bodyStyle                   String?
  engineDetails               String?
  transmissionType            String?
  driveLineType               String?
  fuelType                    String?
  cylinders                   String?
  restraintSystem             String?
  exteriorInteriorColor       String?
  options                     String?
  manufacturedIn              String?
  vehicleClass                String?
  vehicleLocationInBranch     String?
  laneRunNumber               String?
  aisleStall                  String?
  actualCashValue             String?
  estimatedRepairCost         String?
  createdAt                   DateTime    @default(now())
  updatedAt                   DateTime    @updatedAt
  auction                     Auction     @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                    LotCategory @relation(fields: [categoryId], references: [id])
  subcategory                 Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  bids                        Bid[]
  wins                        UserWin[]
  reviews                     Review[]
  questions                   LotQuestion[]
  maxBids                     UserLotMaxBid[]
}

model Seller {
  id                         String   @id @default(uuid())
  publicId                   String   @unique
  name                       String   @unique
  slug                       String   @unique
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  logoUrl                    String?
  logoMediaId                String?
  dataAiHintLogo             String?
  description                String?  @db.Text
  memberSince                DateTime?
  rating                     Float?
  activeLotsCount            Int?     @default(0)
  totalSalesValue            Float?   @default(0)
  auctionsFacilitatedCount   Int?     @default(0)
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  isJudicial                 Boolean  @default(false)
  userId                     String?  @unique
  judicialBranchId           String?
  user                       User?
  judicialBranch             JudicialBranch? @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  auctions                   Auction[]
  directSaleOffers           DirectSaleOffer[]
  judicialProcesses          JudicialProcess[]
  bens                       Bem[]
}

model Auctioneer {
  id                       String   @id @default(uuid())
  publicId                 String   @unique
  name                     String   @unique
  slug                     String   @unique
  registrationNumber       String?
  contactName              String?
  email                    String?
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  logoUrl                  String?
  logoMediaId              String?
  dataAiHintLogo           String?
  description              String?  @db.Text
  memberSince              DateTime?
  rating                   Float?
  auctionsConductedCount   Int?     @default(0)
  totalValueSold           Float?   @default(0)
  userId                   String?  @unique
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  auctions                 Auction[]
}

model Court {
  id                String             @id @default(uuid())
  name              String             @unique
  slug              String             @unique
  stateUf           String
  website           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
}

model JudicialDistrict {
  id                String            @id @default(uuid())
  name              String
  slug              String            @unique
  courtId           String
  stateId           String
  zipCode           String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  court             Court             @relation(fields: [courtId], references: [id])
  state             State             @relation(fields: [stateId], references: [id])
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
}

model JudicialBranch {
  id                String            @id @default(uuid())
  name              String
  slug              String            @unique
  districtId        String
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  district          JudicialDistrict  @relation(fields: [districtId], references: [id])
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
}

model JudicialProcess {
  id              String          @id @default(uuid())
  publicId        String          @unique
  processNumber   String          @unique
  isElectronic    Boolean         @default(true)
  courtId         String
  districtId      String
  branchId        String
  sellerId        String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  court           Court           @relation(fields: [courtId], references: [id])
  district        JudicialDistrict @relation(fields: [districtId], references: [id])
  branch          JudicialBranch  @relation(fields: [branchId], references: [id])
  seller          Seller?         @relation(fields: [sellerId], references: [id])
  parties         ProcessParty[]
  bens            Bem[]
  auctions        Auction[]
}

model ProcessParty {
  id             String           @id @default(uuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  process        JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@unique([processId, name, partyType])
}

model Bem {
  id                          String      @id @default(uuid())
  publicId                    String      @unique
  title                       String
  description                 String?     @db.Text
  status                      BemStatus
  categoryId                  String
  subcategoryId               String?
  judicialProcessId           String?
  sellerId                    String?
  evaluationValue             Float?
  imageUrl                    String?
  imageMediaId                String?
  galleryImageUrls            Json
  mediaItemIds                Json
  dataAiHint                  String?
  locationCity                String?
  locationState               String?
  address                     String?
  latitude                    Float?
  longitude                   Float?
  plate                       String?
  make                        String?
  model                       String?
  version                     String?
  year                        Int?
  modelYear                   Int?
  mileage                     Int?
  color                       String?
  fuelType                    String?
  transmissionType            String?
  bodyType                    String?
  vin                         String?
  renavam                     String?
  enginePower                 String?
  numberOfDoors               Int?
  vehicleOptions              String?     @db.Text
  detranStatus                String?
  debts                       String?     @db.Text
  runningCondition            String?
  bodyCondition               String?
  tiresCondition              String?
  hasKey                      Boolean?
  propertyType                String?
  propertyRegistrationNumber  String?
  iptuNumber                  String?
  isOccupied                  Boolean?
  area                        Float?
  totalArea                   Float?
  builtArea                   Float?
  bedrooms                    Int?
  suites                      Int?
  bathrooms                   Int?
  parkingSpaces               Int?
  constructionType            String?
  finishes                    String?     @db.Text
  infrastructure              String?     @db.Text
  condoDetails                String?     @db.Text
  improvements                String?     @db.Text
  topography                  String?
  liensAndEncumbrances        String?     @db.Text
  propertyDebts               String?     @db.Text
  unregisteredRecords         String?     @db.Text
  hasHabiteSe                 Boolean?
  zoningRestrictions          String?
  amenities                   Json        @default("[]")
  brand                       String?
  serialNumber                String?
  itemCondition               String?
  specifications              String?     @db.Text
  includedAccessories         String?     @db.Text
  batteryCondition            String?
  hasInvoice                  Boolean?
  hasWarranty                 Boolean?
  repairHistory               String?     @db.Text
  applianceCapacity           String?
  voltage                     String?
  applianceType               String?
  additionalFunctions         String?     @db.Text
  hoursUsed                   Int?
  engineType                  String?
  capacityOrPower             String?
  maintenanceHistory          String?     @db.Text
  installationLocation        String?
  compliesWithNR              String?
  operatingLicenses           String?
  breed                       String?
  age                         String?
  sex                         String?
  weight                      String?
  individualId                String?
  purpose                     String?
  sanitaryCondition           String?
  vaccinationStatus           String?
  lineage                     String?
  isPregnant                  Boolean?
  specialSkills               String?
  gtaDocument                 String?
  breedRegistryDocument       String?
  furnitureType               String?
  material                    String?
  style                       String?
  dimensions                  String?
  pieceCount                  Int?
  jewelryType                 String?
  metal                       String?
  gemstones                   String?
  totalWeight                 String?
  jewelrySize                 String?
  authenticityCertificate     String?
  workType                    String?
  artist                      String?
  period                      String?
  technique                   String?
  provenance                  String?     @db.Text
  boatType                    String?
  boatLength                  String?
  hullMaterial                String?
  onboardEquipment            String?     @db.Text
  productName                 String?
  quantity                    String?
  packagingType               String?
  expirationDate              DateTime?
  storageConditions           String?
  preciousMetalType           String?
  purity                      String?
  forestGoodsType             String?
  volumeOrQuantity            String?
  species                     String?
  dofNumber                   String?
  createdAt                   DateTime    @default(now())
  updatedAt                   DateTime    @updatedAt
  category                    LotCategory @relation(fields: [categoryId], references: [id])
  subcategory                 Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess             JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller                      Seller?     @relation(fields: [sellerId], references: [id], onDelete: SetNull)
}

model LotCategory {
  id                   String        @id @default(uuid())
  name                 String        @unique
  slug                 String        @unique
  description          String?
  logoUrl              String?
  logoMediaId          String?
  coverImageUrl        String?
  coverImageMediaId    String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintLogo       String?
  dataAiHintCover      String?
  dataAiHintMegaMenu   String?
  itemCount            Int?          @default(0)
  hasSubcategories     Boolean?      @default(false)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  auctions             Auction[]
  lots                 Lot[]
  subcategories        Subcategory[]
  bens                 Bem[]
}

model Subcategory {
  id               String      @id @default(uuid())
  name             String
  slug             String      @unique
  parentCategoryId String
  description      String?
  displayOrder     Int         @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  itemCount        Int?        @default(0)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots             Lot[]
  bens             Bem[]
}

model State {
  id        String             @id @default(uuid())
  name      String             @unique
  uf        String             @unique
  slug      String             @unique
  cityCount Int?               @default(0)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  cities    City[]
  districts JudicialDistrict[]
}

model City {
  id        String @id @default(uuid())
  name      String
  slug      String @unique
  stateId   String
  stateUf   String
  ibgeCode  String?
  lotCount  Int?   @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state     State    @relation(fields: [stateId], references: [id])
}

model DirectSaleOffer {
  id                 String                @id @default(uuid())
  publicId           String                @unique
  title              String
  description        String                @db.Text
  offerType          DirectSaleOfferType
  status             DirectSaleOfferStatus
  price              Float?
  minimumOfferPrice  Float?
  locationCity       String?
  locationState      String?
  imageUrl           String?
  imageMediaId       String?
  dataAiHint         String?
  galleryImageUrls   Json
  mediaItemIds       Json
  itemsIncluded      Json
  tags               Json
  views              Int?                  @default(0)
  proposalsCount     Int?                  @default(0)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  expiresAt          DateTime?
  categoryId         String
  sellerId           String
  category           LotCategory           @relation(fields: [categoryId], references: [id])
  seller             Seller                @relation(fields: [sellerId], references: [id])
}

model Bid {
  id            String   @id @default(uuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())
  isProxyBid    Boolean  @default(false)
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String        @id @default(uuid())
  lotId            String        @unique
  userId           String
  winningBidAmount Float
  winDate          DateTime      @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot              Lot           @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model BlogPost {
  id          String   @id @default(uuid())
  title       String
  content     String   @db.Text
  authorId    String
  authorName  String
  slug        String   @unique
  publishedAt DateTime?
  tags        Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Review {
  id              String   @id @default(uuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String   @db.Text
  createdAt       DateTime @default(now())
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                      String   @id @default(uuid())
  lotId                   String
  auctionId               String
  userId                  String
  userDisplayName         String
  questionText            String   @db.Text
  isPublic                Boolean  @default(true)
  answerText              String?  @db.Text
  answeredAt              DateTime?
  answeredByUserId        String?
  answeredByUserDisplayName String?
  createdAt               DateTime @default(now())
  lot                     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  answeredByUser          User?    @relation("AnsweredByUser", fields: [answeredByUserId], references: [id], onDelete: SetNull)
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model MediaItem {
  id            String   @id @default(uuid())
  fileName      String
  storagePath   String?
  uploadedAt    DateTime @default(now())
  uploadedBy    String?
  title         String?
  altText       String?
  caption       String?
  description   String?
  mimeType      String
  sizeBytes     Int
  dimensions    Json?
  urlOriginal   String
  urlThumbnail  String?
  urlMedium     String?
  urlLarge      String?
  linkedLotIds  String[]
  dataAiHint    String?
}

model PlatformSettings {
  id                         String   @id @default("global")
  siteTitle                  String?
  siteTagline                String?
  galleryImageBasePath       String?
  storageProvider            String?
  firebaseStorageBucket      String?
  activeThemeName            String?
  themes                     Json
  platformPublicIdMasks      Json?
  homepageSections           Json
  mentalTriggerSettings      Json?
  sectionBadgeVisibility     Json?
  mapSettings                Json?
  searchPaginationType       String?
  searchItemsPerPage         Int?
  searchLoadMoreCount        Int?
  showCountdownOnLotDetail   Boolean?
  showCountdownOnCards       Boolean?
  showRelatedLotsOnLotDetail Boolean?
  relatedLotsCount           Int?
  biddingSettings            Json?
  variableIncrementTable     Json     @default("[]")
  defaultListItemsPerPage    Int?
  defaultUrgencyTimerHours   Int?
  updatedAt                  DateTime @updatedAt
}
