// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
}

enum StorageProviderType {
  local
  firebase
}

// --- MODELS ---

model User {
  id                  String                   @id @default(cuid())
  email               String                   @unique
  fullName            String?
  password            String
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  roleId              String?
  habilitationStatus  UserHabilitationStatus?  @default(PENDING_DOCUMENTS)
  accountType         AccountType?             @default(PHYSICAL)
  razaoSocial         String?
  cnpj                String?                  @unique
  inscricaoEstadual   String?
  website             String?
  cpf                 String?                  @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  status              String?                  @default("ATIVO")
  optInMarketing      Boolean                  @default(false)
  avatarUrl           String?
  dataAiHint          String?
  activeBids          Int?                     @default(0)
  auctionsWon         Int?                     @default(0)
  itemsSold           Int?                     @default(0)
  badges              String?

  // Relationships
  role                Role?                    @relation(fields: [roleId], references: [id], onDelete: SetNull)
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  notifications       Notification[]
  uploadedMedia       MediaItem[]
  maxBids             UserLotMaxBid[]
  reviews             Review[]
  questions           LotQuestion[]            @relation("UserQuestions")
  answeredQuestions   LotQuestion[]            @relation("UserAnswers")

  @@index([email])
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  roles       Role[]
}

model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  users           User[]
  permissions     Permission[]
}

model UserDocument {
  id              String             @id @default(cuid())
  userId          String
  documentTypeId  String
  fileUrl         String?
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  rejectionReason String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  // Relationships
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType DocumentType @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id             String         @id @default(cuid())
  name           String         @unique
  description    String?
  isRequired     Boolean        @default(false)
  appliesTo      String?
  allowedFormats String?
  displayOrder   Int            @default(0)
  userDocuments  UserDocument[]
}

model Auction {
  id                  String       @id @default(cuid())
  publicId            String       @unique @default(cuid())
  title               String
  fullTitle           String?
  description         String?      @db.Text
  status              AuctionStatus
  auctionType         AuctionType?
  auctionDate         DateTime
  endDate             DateTime?
  auctionStages       Json?
  city                String?
  state               String?
  imageUrl            String?
  imageMediaId        String?      @unique
  dataAiHint          String?
  documentsUrl        String?
  visits              Int?         @default(0)
  totalLots           Int?         @default(0)
  initialOffer        Float?
  isFavorite          Boolean?     @default(false)
  currentBid          Float?
  bidsCount           Int?         @default(0)
  sellingBranch       String?
  vehicleLocation     String?
  automaticBiddingEnabled Boolean?   @default(false)
  silentBiddingEnabled    Boolean?   @default(false)
  allowMultipleBidsPerUser Boolean?  @default(true)
  allowInstallmentBids    Boolean?   @default(false)
  softCloseEnabled        Boolean?   @default(false)
  softCloseMinutes        Int?
  estimatedRevenue         Float?
  achievedRevenue          Float?
  totalHabilitatedUsers    Int?
  isFeaturedOnMarketplace  Boolean?  @default(false)
  marketplaceAnnouncementTitle String?
  additionalTriggers      String?
  decrementAmount         Float?
  decrementIntervalSeconds Int?
  floorPrice              Float?
  evaluationReportUrl     String?
  auctionCertificateUrl   String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  // Foreign keys
  categoryId          String?
  auctioneerId        String?
  sellerId            String?
  judicialProcessId   String?      @unique

  // Relationships
  category          LotCategory?      @relation(fields: [categoryId], references: [id])
  auctioneer        Auctioneer?       @relation(fields: [auctioneerId], references: [id])
  seller            Seller?           @relation(fields: [sellerId], references: [id])
  judicialProcess   JudicialProcess?
  lots              Lot[]
  bids              Bid[]
  image             MediaItem?        @relation("AuctionImage", fields: [imageMediaId], references: [id], onDelete: SetNull)

  @@index([status])
  @@index([auctionType])
  @@index([categoryId])
}

model Lot {
  id                String    @id @default(cuid())
  publicId          String    @unique @default(cuid())
  number            String?
  title             String
  description       String?   @db.Text
  price             Float
  initialPrice      Float?
  secondInitialPrice Float?
  status            LotStatus
  imageUrl          String?
  imageMediaId      String?   @unique
  dataAiHint        String?
  galleryImageUrls  Json?
  mediaItemIds      Json?
  bemIds            Json?
  views             Int       @default(0)
  bidsCount         Int       @default(0)
  isFeatured        Boolean   @default(false)
  isExclusive       Boolean   @default(false)
  discountPercentage Float?
  additionalTriggers String?
  latitude          Float?
  longitude         Float?
  mapAddress        String?
  mapEmbedUrl       String?
  mapStaticImageUrl String?
  judicialProcessNumber    String?
  courtDistrict            String?
  courtName                String?
  publicProcessUrl         String?
  propertyRegistrationNumber String?
  propertyLiens            String?
  knownDebts               String?
  additionalDocumentsInfo  String? @db.Text
  winningBidTermUrl        String?
  reservePrice             Float?
  evaluationValue          Float?
  debtAmount               Float?
  itbiValue                Float?
  endDate                  DateTime?
  lotSpecificAuctionDate   DateTime?
  secondAuctionDate        DateTime?
  bidIncrementStep         Float?
  condition                String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Foreign keys
  auctionId     String
  categoryId    String?
  subcategoryId String?
  stateId       String?
  cityId        String?

  // Relationships
  auction       Auction      @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category      LotCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  state         StateInfo?   @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city          CityInfo?    @relation(fields: [cityId], references: [id], onDelete: SetNull)
  bids          Bid[]
  wins          UserWin[]
  maxBids       UserLotMaxBid[]
  questions     LotQuestion[]
  reviews       Review[]
  image         MediaItem?   @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)

  @@index([auctionId])
  @@index([status])
}

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())

  // Relationships
  lot       Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction   Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder    User    @relation(fields: [bidderId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([bidderId])
}

model UserWin {
  id               String        @id @default(cuid())
  userId           String
  lotId            String        @unique // A lot can only have one winner
  winningBidAmount Float
  winDate          DateTime      @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Seller {
  id                       String    @id @default(cuid())
  publicId                 String    @unique @default(cuid())
  name                     String    @unique
  slug                     String    @unique
  isJudicial               Boolean   @default(false)
  contactName              String?
  email                    String?
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  logoUrl                  String?
  logoMediaId              String?   @unique
  dataAiHintLogo           String?
  description              String?   @db.Text
  memberSince              DateTime?
  rating                   Float?
  activeLotsCount          Int?
  totalSalesValue          Float?
  auctionsFacilitatedCount Int?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  // Foreign keys
  judicialBranchId  String?  @unique

  // Relationships
  user              User?            @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  judicialBranch    JudicialBranch?
  auctions          Auction[]
  bens              Bem[]
  judicialProcesses JudicialProcess[]
  directSaleOffers  DirectSaleOffer[]
  logo              MediaItem?       @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)

  @@index([isJudicial])
}

model Auctioneer {
  id                     String    @id @default(cuid())
  publicId               String    @unique @default(cuid())
  name                   String    @unique
  slug                   String    @unique
  registrationNumber     String?
  contactName            String?
  email                  String?
  phone                  String?
  address                String?
  city                   String?
  state                  String?
  zipCode                String?
  website                String?
  logoUrl                String?
  logoMediaId            String?   @unique
  dataAiHintLogo         String?
  description            String?   @db.Text
  memberSince            DateTime?
  rating                 Float?
  auctionsConductedCount Int?
  totalValueSold         Float?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  // Relationships
  user     User?      @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  auctions Auction[]
  logo     MediaItem? @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
}

model LotCategory {
  id                 String    @id @default(cuid())
  name               String    @unique
  slug               String    @unique
  description        String?
  itemCount          Int?      @default(0)
  hasSubcategories   Boolean   @default(false)
  logoUrl            String?
  logoMediaId        String?   @unique
  coverImageUrl      String?
  coverImageMediaId  String?   @unique
  megaMenuImageUrl   String?
  megaMenuImageMediaId String? @unique
  dataAiHintLogo     String?
  dataAiHintCover    String?
  dataAiHintMegaMenu String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relationships
  auctions           Auction[]
  lots               Lot[]
  bens               Bem[]
  subcategories      Subcategory[]
  directSaleOffers   DirectSaleOffer[]
  logo               MediaItem? @relation("CategoryLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  coverImage         MediaItem? @relation("CategoryCoverImage", fields: [coverImageMediaId], references: [id], onDelete: SetNull)
  megaMenuImage      MediaItem? @relation("CategoryMegaMenuImage", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull)
}

model Subcategory {
  id             String      @id @default(cuid())
  name           String
  slug           String      @unique
  description    String?
  displayOrder   Int         @default(0)
  itemCount      Int?        @default(0)
  parentCategoryId String
  iconUrl        String?
  iconMediaId    String?     @unique
  dataAiHintIcon String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relationships
  parentCategory LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots           Lot[]
  bens           Bem[]
  icon           MediaItem?
}

model Bem {
  id                         String   @id @default(cuid())
  publicId                   String   @unique @default(cuid())
  title                      String
  description                String?  @db.Text
  status                     BemStatus
  evaluationValue            Float?
  imageUrl                   String?
  imageMediaId               String?  @unique
  galleryImageUrls           Json?
  mediaItemIds               Json?
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  
  // Specific fields
  plate String?
  make String?
  model String?
  version String?
  year Int?
  modelYear Int?
  mileage Int?
  color String?
  fuelType String?
  transmissionType String?
  bodyType String?
  vin String?
  renavam String?
  enginePower String?
  numberOfDoors Int?
  vehicleOptions String?
  detranStatus String?
  debts String?
  runningCondition String?
  bodyCondition String?
  tiresCondition String?
  hasKey Boolean?
  propertyRegistrationNumber String?
  iptuNumber String?
  isOccupied Boolean?
  totalArea Float?
  builtArea Float?
  bedrooms Int?
  suites Int?
  bathrooms Int?
  parkingSpaces Int?
  constructionType String?
  finishes String?
  infrastructure String?
  condoDetails String?
  improvements String?
  topography String?
  liensAndEncumbrances String?
  propertyDebts String?
  unregisteredRecords String?
  hasHabiteSe Boolean?
  zoningRestrictions String?
  brand String?
  serialNumber String?
  itemCondition String?
  specifications String?
  includedAccessories String?
  batteryCondition String?
  hasInvoice Boolean?
  hasWarranty Boolean?
  repairHistory String?
  applianceCapacity String?
  voltage String?
  applianceType String?
  additionalFunctions String?
  hoursUsed Int?
  engineType String?
  capacityOrPower String?
  maintenanceHistory String?
  installationLocation String?
  compliesWithNR String?
  operatingLicenses String?
  breed String?
  age String?
  sex String?
  weight String?
  individualId String?
  purpose String?
  sanitaryCondition String?
  lineage String?
  isPregnant Boolean?
  specialSkills String?
  gtaDocument String?
  breedRegistryDocument String?
  furnitureType String?
  material String?
  style String?
  dimensions String?
  pieceCount Int?
  jewelryType String?
  metal String?
  gemstones String?
  totalWeight String?
  jewelrySize String?
  authenticityCertificate String?
  workType String?
  artist String?
  period String?
  technique String?
  provenance String?
  boatType String?
  boatLength String?
  hullMaterial String?
  onboardEquipment String?
  productName String?
  quantity String?
  packagingType String?
  expirationDate DateTime?
  storageConditions String?
  preciousMetalType String?
  purity String?
  forestGoodsType String?
  volumeOrQuantity String?
  species String?
  dofNumber String?
  amenities Json?
  
  // Foreign Keys
  categoryId        String?
  subcategoryId     String?
  judicialProcessId String?
  sellerId          String?

  // Relationships
  category          LotCategory?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory       Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller            Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  image             MediaItem?       @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
}

model Court {
  id                String             @id @default(cuid())
  name              String             @unique
  slug              String             @unique
  stateId           String
  website           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // Relationships
  state             StateInfo          @relation(fields: [stateId], references: [id])
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
}

model JudicialDistrict {
  id        String           @id @default(cuid())
  name      String
  slug      String           @unique
  courtId   String
  stateId   String
  zipCode   String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relationships
  court     Court            @relation(fields: [courtId], references: [id])
  state     StateInfo        @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]
}

model JudicialBranch {
  id             String            @id @default(cuid())
  name           String
  slug           String            @unique
  districtId     String
  contactName    String?
  phone          String?
  email          String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Relationships
  district   JudicialDistrict  @relation(fields: [districtId], references: [id], onDelete: Cascade)
  processes  JudicialProcess[]
  seller     Seller?
}

model JudicialProcess {
  id                String       @id @default(cuid())
  publicId          String       @unique @default(cuid())
  processNumber     String       @unique
  isElectronic      Boolean
  courtId           String
  districtId        String
  branchId          String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relationships
  court     Court            @relation(fields: [courtId], references: [id])
  district  JudicialDistrict @relation(fields: [districtId], references: [id])
  branch    JudicialBranch   @relation(fields: [branchId], references: [id])
  parties   ProcessParty[]
  bens      Bem[]
  auction   Auction?
}

model ProcessParty {
  id             String           @id @default(cuid())
  processId      String
  name           String
  partyType      ProcessPartyType
  documentNumber String?

  // Relationships
  process JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@unique([processId, name, partyType])
}

model StateInfo {
  id        String   @id @default(cuid())
  name      String   @unique
  uf        String   @unique
  slug      String   @unique
  cityCount Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  cities    CityInfo[]
  lots      Lot[]
  courts    Court[]
  districts JudicialDistrict[]
}

model CityInfo {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  stateId   String
  stateUf   String
  ibgeCode  String?
  lotCount  Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  state StateInfo @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots  Lot[]
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   @db.Text
  authorId    String
  publishedAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tags        String?
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  message     String
  link        String?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String   @db.Text
  createdAt       DateTime @default(now())

  // Relationships
  lot    Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                        String   @id @default(cuid())
  lotId                     String
  auctionId                 String
  userId                    String
  userDisplayName           String
  questionText              String   @db.Text
  isPublic                  Boolean  @default(true)
  answerText                String?  @db.Text
  answeredAt                DateTime?
  answeredByUserId          String?
  answeredByUserDisplayName String?
  createdAt                 DateTime @default(now())

  // Relationships
  lot              Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user             User @relation("UserQuestions", fields: [userId], references: [id], onDelete: Cascade)
  answeredBy       User? @relation("UserAnswers", fields: [answeredByUserId], references: [id], onDelete: SetNull)
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentTemplate {
  id        String               @id @default(cuid())
  name      String               @unique
  type      DocumentTemplateType
  content   String               @db.Text
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model DirectSaleOffer {
  id                 String                @id @default(cuid())
  publicId           String                @unique
  title              String
  description        String                @db.Text
  offerType          DirectSaleOfferType
  status             DirectSaleOfferStatus
  price              Float?
  minimumOfferPrice  Float?
  locationCity       String?
  locationState      String?
  imageUrl           String?
  imageMediaId       String?               @unique
  dataAiHint         String?
  galleryImageUrls   Json?
  mediaItemIds       Json?
  expiresAt          DateTime?
  itemsIncluded      Json?
  tags               String?
  views              Int                   @default(0)
  proposalsCount     Int                   @default(0)
  latitude           Float?
  longitude          Float?
  mapAddress         String?
  mapEmbedUrl        String?
  mapStaticImageUrl  String?
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  
  // Foreign Keys
  categoryId String
  sellerId   String

  // Relationships
  category                 LotCategory           @relation(fields: [categoryId], references: [id])
  seller                   Seller                @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  image                    MediaItem?            @relation("DirectSaleOfferImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
}

model MediaItem {
  id                      String   @id @default(cuid())
  fileName                String
  storagePath             String   @unique
  title                   String?
  altText                 String?
  caption                 String?
  description             String?
  mimeType                String
  sizeBytes               Int
  dimensions              Json?
  urlOriginal             String
  urlThumbnail            String?
  urlMedium               String?
  urlLarge                String?
  linkedLotIds            Json?
  dataAiHint              String?
  uploadedAt              DateTime @default(now())
  uploadedBy              String?

  // Relationships
  uploadedByUser          User?                @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)
  auctionAsImage          Auction?             @relation("AuctionImage")
  lotAsImage              Lot?                 @relation("LotImage")
  sellerAsLogo            Seller?              @relation("SellerLogo")
  auctioneerAsLogo        Auctioneer?          @relation("AuctioneerLogo")
  categoryAsLogo          LotCategory?         @relation("CategoryLogo")
  categoryAsCoverImage    LotCategory?         @relation("CategoryCoverImage")
  categoryAsMegaMenuImage LotCategory?         @relation("CategoryMegaMenuImage")
  bemAsImage              Bem?                 @relation("BemImage")
  subcategoryAsIcon       Subcategory?         @relation("SubcategoryIcon")
  directSaleOfferAsImage  DirectSaleOffer?     @relation("DirectSaleOfferImage")
}

model PlatformSettings {
    id                        String @id @default("global")
    siteTitle                 String?
    siteTagline               String?
    galleryImageBasePath      String?
    storageProvider           StorageProviderType? @default(local)
    firebaseStorageBucket     String?
    activeThemeName           String?
    themes                    Json?
    platformPublicIdMasks     Json?
    homepageSections          Json?
    mentalTriggerSettings     Json?
    sectionBadgeVisibility    Json?
    mapSettings               Json?
    searchPaginationType      SearchPaginationType? @default(loadMore)
    searchItemsPerPage        Int? @default(12)
    searchLoadMoreCount       Int? @default(12)
    showCountdownOnLotDetail  Boolean? @default(true)
    showCountdownOnCards      Boolean? @default(true)
    showRelatedLotsOnLotDetail Boolean? @default(true)
    relatedLotsCount          Int? @default(5)
    defaultUrgencyTimerHours  Int?
    variableIncrementTable    Json?
    biddingSettings           Json?
    defaultListItemsPerPage   Int? @default(10)
    updatedAt                 DateTime @updatedAt
}
