// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// ENUMERATIONS
// =================================================================
enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

enum DirectSaleOfferStatus {
  RASCUNHO
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

// =================================================================
// MODELS
// =================================================================

model State {
  id        String   @id @default(uuid())
  name      String
  uf        String   @unique
  slug      String   @unique
  cityCount Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cities    City[]
  auctions  Auction[]
  lots      Lot[]
}

model City {
  id        String   @id @default(uuid())
  name      String
  slug      String?
  stateId   String
  stateUf   String?
  ibgeCode  String?  @unique
  lotCount  Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state     State    @relation(fields: [stateId], references: [id])
  auctions  Auction[]
  lots      Lot[]

  @@index([stateId])
}

model Role {
  id             String        @id @default(uuid())
  name           String        @unique
  nameNormalized String        @unique
  description    String?
  permissions    Json?
  users          UsersOnRoles[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}


model DocumentType {
  id          String         @id @default(uuid())
  name        String
  description String?
  isRequired  Boolean        @default(true)
  appliesTo   String?
  documents   UserDocument[]
}

model LotCategory {
  id                   String              @id @default(uuid())
  name                 String
  slug                 String              @unique
  description          String?
  hasSubcategories     Boolean
  logoUrl              String?
  logoMediaId          String?
  dataAiHintIcon       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  lots                 Lot[]
  bens                 Bem[]
  subcategories      Subcategory[]
  auctions             Auction[]
  directSaleOffers     DirectSaleOffer[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model Subcategory {
  id               String      @id @default(uuid())
  name             String
  slug             String?
  parentCategoryId String
  description      String?
  displayOrder     Int         @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id])
  lots             Lot[]
  bens             Bem[]

  @@index([parentCategoryId])
}

model Bem {
  id                       String    @id @default(uuid())
  publicId                 String    @unique @default(uuid())
  title                    String
  description              String?   @db.Text
  status                   String    @default("DISPONIVEL")
  categoryId               String?
  subcategoryId            String?
  judicialProcessId        String?
  sellerId                 String?
  evaluationValue          Decimal?  @db.Decimal(15, 2)
  imageUrl                 String?
  imageMediaId             String?
  galleryImageUrls         Json?
  mediaItemIds             Json?
  dataAiHint               String?
  locationCity             String?
  locationState            String?
  address                  String?
  latitude                 Float?
  longitude                Float?
  plate                    String?
  make                     String?
  model                    String?
  version                  String?
  year                     Int?
  modelYear                Int?
  mileage                  Int?
  color                    String?
  fuelType                 String?
  transmissionType         String?
  bodyType                 String?
  vin                      String?
  renavam                  String?
  enginePower              String?
  numberOfDoors            Int?
  vehicleOptions           String?
  detranStatus             String?
  debts                    String?
  runningCondition         String?
  bodyCondition            String?
  tiresCondition           String?
  hasKey                   Boolean?
  propertyRegistrationNumber String?
  iptuNumber               String?
  isOccupied               Boolean?
  totalArea                Decimal?
  builtArea                Decimal?
  bedrooms                 Int?
  suites                   Int?
  bathrooms                Int?
  parkingSpaces            Int?
  constructionType         String?
  finishes                 String?   @db.Text
  infrastructure           String?   @db.Text
  condoDetails             String?   @db.Text
  improvements             String?   @db.Text
  topography               String?
  liensAndEncumbrances     String?   @db.Text
  propertyDebts            String?
  unregisteredRecords      String?
  hasHabiteSe              Boolean?
  zoningRestrictions       String?
  amenities                Json?
  brand                    String?
  serialNumber             String?
  itemCondition            String?
  specifications           String?   @db.Text
  includedAccessories      String?
  batteryCondition         String?
  hasInvoice               Boolean?
  hasWarranty              Boolean?
  repairHistory            String?
  applianceCapacity        String?
  voltage                  String?
  applianceType            String?
  additionalFunctions      String?
  hoursUsed                Int?
  engineType               String?
  capacityOrPower          String?
  maintenanceHistory       String?   @db.Text
  installationLocation     String?
  compliesWithNR           String?
  operatingLicenses        String?
  breed                    String?
  age                      String?
  sex                      String?
  weight                   String?
  individualId             String?
  purpose                  String?
  sanitaryCondition        String?
  vaccinationStatus        String?
  lineage                  String?
  isPregnant               Boolean?
  specialSkills            String?
  gtaDocument              String?
  breedRegistryDocument    String?
  furnitureType            String?
  material                 String?
  style                    String?
  dimensions               String?
  pieceCount               Int?
  jewelryType              String?
  metal                    String?
  gemstones                String?
  totalWeight              String?
  jewelrySize              String?
  authenticityCertificate  String?
  workType                 String?
  artist                   String?
  period                   String?
  technique                String?
  provenance               String?
  boatType                 String?
  boatLength               String?
  hullMaterial             String?
  onboardEquipment         String?
  productName              String?
  quantity                 String?
  packagingType            String?
  expirationDate           DateTime?
  storageConditions        String?
  preciousMetalType        String?
  purity                   String?
  forestGoodsType          String?
  volumeOrQuantity         String?
  species                  String?
  dofNumber                String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  category                 LotCategory?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory              Subcategory?      @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess          JudicialProcess?  @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller                   Seller?           @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  lots                     LotBens[]

  @@index([sellerId])
  @@index([categoryId])
  @@index([judicialProcessId])
}

model LotBens {
  lot     Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId   String
  bem     Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId   String
  @@id([lotId, bemId])
}

model Court {
  id                String              @id @default(uuid())
  name              String
  slug              String?
  stateUf           String?
  website           String?
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]           @relation("AuctionCourt")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model JudicialDistrict {
  id                String           @id @default(uuid())
  name              String
  slug              String?          @unique
  courtId           String?
  stateId           String?
  zipCode           String?
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]        @relation("AuctionDistrict")
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  court             Court?           @relation(fields: [courtId], references: [id])
  state             State?           @relation(fields: [stateId], references: [id])

  @@index([courtId])
  @@index([stateId])
}

model JudicialBranch {
  id                String              @id @default(uuid())
  name              String
  slug              String?             @unique
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  sellers           Seller[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]           @relation("AuctionBranch")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  district          JudicialDistrict?   @relation(fields: [districtId], references: [id])

  @@index([districtId])
}

model PlatformSettings {
  id                           String   @id @default("global")
  siteTitle                    String?
  siteTagline                  String?
  logoUrl                      String?
  faviconUrl                   String?
  galleryImageBasePath         String?
  storageProvider              String?
  firebaseStorageBucket        String?
  activeThemeName              String?
  platformPublicIdMasks        Json?
  mapSettings                  Json?
  searchPaginationType         String?
  searchItemsPerPage           Int?
  searchLoadMoreCount          Int?
  showCountdownOnLotDetail     Boolean?
  showCountdownOnCards         Boolean?
  showRelatedLotsOnLotDetail   Boolean?
  relatedLotsCount             Int?
  defaultUrgencyTimerHours     Int?
  biddingSettings              Json?
  paymentGatewaySettings       Json?
  defaultListItemsPerPage      Int?
  themes                       Json?
  homepageSections             Json?
  variableIncrementTable       Json?
  updatedAt                    DateTime? @updatedAt
}

model Lot {
  id                          String    @id @default(uuid())
  publicId                    String?   @unique
  auctionId                   String
  slug                        String?
  number                      String?
  title                       String
  description                 String?   @db.Text
  price                       Decimal
  initialPrice                Decimal?
  secondInitialPrice          Decimal?
  bidIncrementStep            Decimal?
  status                      LotStatus @default(EM_BREVE)
  bidsCount                   Int?      @default(0)
  views                       Int?      @default(0)
  isFeatured                  Boolean?  @default(false)
  isExclusive                 Boolean?  @default(false)
  discountPercentage          Int?
  additionalTriggers          Json?
  imageUrl                    String?
  imageMediaId                String?
  galleryImageUrls            Json?
  mediaItemIds                Json?
  inheritedMediaFromBemId     String?
  type                        String
  categoryId                  String?
  subcategoryId               String?
  auctionName                 String?
  sellerId                    String?
  sellerName                  String?
  auctioneerId                String?
  cityId                      String?
  stateId                     String?
  cityName                    String?
  stateUf                     String?
  latitude                    Float?
  longitude                   Float?
  mapAddress                  String?
  mapEmbedUrl                 String?
  mapStaticImageUrl           String?
  endDate                     DateTime?
  auctionDate                 DateTime?
  lotSpecificAuctionDate      DateTime?
  secondAuctionDate           DateTime?
  condition                   String?
  dataAiHint                  String?
  winnerId                    String?
  winningBidTermUrl           String?
  allowInstallmentBids        Boolean?  @default(false)
  isRelisted                  Boolean   @default(false)
  relistCount                 Int       @default(0)
  originalLotId               String?   @unique
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  bens                        LotBens[]
  auction                     Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                    LotCategory?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory                 Subcategory?    @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  seller                      Seller?         @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  auctioneer                  Auctioneer?     @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  city                        City?           @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state                       State?          @relation(fields: [stateId], references: [id], onDelete: SetNull)
  winner                      User?           @relation("WonLots", fields: [winnerId], references: [id], onDelete: SetNull)
  originalLot                 Lot?            @relation("RelistHistory", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot                 Lot[]           @relation("RelistHistory")
  bids                        Bid[]
  wins                        UserWin[]
  maxBids                     UserLotMaxBid[]
  stageDetails                LotAuctionStageDetails[]

  @@index([auctionId])
  @@index([categoryId])
  @@index([sellerId])
}

model User {
  id                   String        @id @default(uuid())
  email                String        @unique
  password             String?
  fullName             String?
  sellerId             String?       @unique
  habilitationStatus   UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType          AccountType   @default(PHYSICAL)
  avatarUrl            String?
  dataAiHint           String?
  badges               Json?
  cpf                  String?       @unique
  rgNumber             String?
  rgIssuer             String?
  rgIssueDate          DateTime?
  rgState              String?
  dateOfBirth          DateTime?
  cellPhone            String?
  homePhone            String?
  gender               String?
  profession           String?
  nationality          String?
  maritalStatus        String?
  propertyRegime       String?
  spouseName           String?
  spouseCpf            String?
  zipCode              String?
  street               String?
  number               String?
  complement           String?
  neighborhood         String?
  city                 String?
  state                String?
  optInMarketing       Boolean?      @default(false)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  seller               Seller?       @relation("SellerUser")
  auctioneer           Auctioneer?
  roles                UsersOnRoles[]
  bids                 Bid[]
  wins                 UserWin[]
  documents            UserDocument[]
  notifications        Notification[]
  habilitations        AuctionHabilitation[]
  maxBids              UserLotMaxBid[]
  uploadedMedia        MediaItem[]   @relation("UploadedBy")
  wonLots              Lot[]         @relation("WonLots")
}

model Seller {
  id                 String              @id @default(uuid())
  publicId           String?             @unique
  slug               String?             @unique
  name               String              @unique
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?             @db.Text
  userId             String?             @unique
  isJudicial         Boolean             @default(false)
  judicialBranchId   String?             @unique
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  user               User?               @relation("SellerUser", fields: [userId], references: [id], onDelete: SetNull)
  judicialBranch     JudicialBranch?     @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  auctions           Auction[]
  lots               Lot[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
  judicialProcesses  JudicialProcess[]
}

model Auctioneer {
  id                 String    @id @default(uuid())
  publicId           String?   @unique
  slug               String?   @unique
  name               String
  registrationNumber String?
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?   @db.Text
  userId             String?   @unique
  auctions           Auction[]
  lots               Lot[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User?     @relation(fields: [userId], references: [id])
}

model JudicialProcess {
  id             String           @id @default(uuid())
  publicId       String?          @unique
  processNumber  String
  isElectronic   Boolean          @default(true)
  courtId        String?
  districtId     String?
  branchId       String?
  sellerId       String?
  bens           Bem[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  court          Court?           @relation(fields: [courtId], references: [id])
  district       JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch         JudicialBranch?  @relation(fields: [branchId], references: [id])
  seller         Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties        JudicialParty[]
  auctions       Auction[]

  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
  @@index([sellerId])
}

model DirectSaleOffer {
  id                 String       @id @default(uuid())
  publicId           String?      @unique
  title              String
  description        String?      @db.Text
  offerType          String
  price              Decimal?
  minimumOfferPrice  Decimal?
  status             DirectSaleOfferStatus @default(ACTIVE)
  categoryId         String?
  sellerId           String?
  sellerName         String?
  sellerLogoUrl      String?
  dataAiHintSellerLogo String?
  locationCity       String?
  locationState      String?
  imageUrl           String?
  imageMediaId       String?
  dataAiHint         String?
  galleryImageUrls   Json?
  mediaItemIds       Json?
  itemsIncluded      Json?
  views              Int?         @default(0)
  expiresAt          DateTime?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  category           LotCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  seller             Seller?      @relation(fields: [sellerId], references: [id], onDelete: SetNull)

  @@index([categoryId])
  @@index([sellerId])
}


model DocumentTemplate {
  id        String               @id @default(uuid())
  name      String
  type      DocumentTemplateType
  content   String?              @db.Text
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model UserDocument {
    id              String      @id @default(uuid())
    userId          String
    documentTypeId  String
    status          UserDocumentStatus @default(PENDING_ANALYSIS)
    fileUrl         String
    fileName        String?
    rejectionReason String?
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    documentType    DocumentType @relation(fields: [documentTypeId], references: [id])

    @@unique([userId, documentTypeId])
    @@index([userId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AuctionHabilitation {
  id           String   @id @default(uuid())
  userId       String
  auctionId    String
  habilitatedAt DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction      Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@unique([userId, auctionId])
  @@index([userId])
  @@index([auctionId])
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Decimal
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
  @@index([userId])
  @@index([lotId])
}

model Bid {
  id            String   @id @default(uuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String?
  amount        Decimal
  timestamp     DateTime @default(now())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([bidderId])
}

model UserWin {
    id                  String      @id @default(uuid())
    lotId               String      @unique
    userId              String
    winningBidAmount    Decimal
    winDate             DateTime    @default(now())
    paymentStatus       PaymentStatus @default(PENDENTE)
    invoiceUrl          String?
    lot                 Lot         @relation(fields: [lotId], references: [id], onDelete: Cascade)
    user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    installments        InstallmentPayment[]

    @@index([userId])
}

model InstallmentPayment {
  id                 String   @id @default(uuid())
  userWinId          String
  installmentNumber  Int
  amount             Decimal
  dueDate            DateTime
  status             PaymentStatus @default(PENDENTE)
  paymentDate        DateTime?
  paymentMethod      String?
  transactionId      String?
  userWin            UserWin  @relation(fields: [userWinId], references: [id], onDelete: Cascade)

  @@index([userWinId])
}

model LotAuctionStageDetails {
    lotId          String
    stageId        String
    initialBid     Decimal?
    bidIncrement   Decimal?
    lot            Lot          @relation(fields: [lotId], references: [id], onDelete: Cascade)
    stage          AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)

    @@id([lotId, stageId])
}

model MediaItem {
  id                  String    @id @default(uuid())
  fileName            String
  storagePath         String
  title               String?
  altText             String?
  caption             String?
  description         String?   @db.Text
  mimeType            String
  sizeBytes           Int?
  urlOriginal         String
  urlThumbnail        String?
  urlMedium           String?
  urlLarge            String?
  linkedLotIds        Json?
  judicialProcessId   String?
  dataAiHint          String?
  uploadedByUserId    String
  uploadedAt          DateTime  @default(now())
  uploadedBy          User      @relation("UploadedBy", fields: [uploadedByUserId], references: [id])

  @@index([uploadedByUserId])
  @@index([judicialProcessId])
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}
```