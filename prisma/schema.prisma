// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

generator client {
  provider = "prisma-client-js"
}

// ===============================================
//           MODELS WITHOUT DEPENDENCIES
// ===============================================

model State {
  id        String @id @default(uuid())
  name      String @db.VarChar(100)
  uf        String @unique @db.VarChar(2)
  slug      String @unique @db.VarChar(100)
  cities    City[]
  districts JudicialDistrict[]
  courts    Court[]
  auctions  Auction[]
  lots      Lot[]

  @@map("State")
}

model DocumentType {
  id          String         @id @default(uuid())
  name        String         @db.VarChar(150)
  description String?        @db.VarChar(255)
  isRequired  Boolean        @default(true)
  appliesTo   String?        @db.VarChar(191) // e.g., "PHYSICAL,LEGAL"
  documents   UserDocument[]

  @@map("DocumentType")
}

model DocumentTemplate {
  id        String               @id @default(uuid())
  name      String               @db.VarChar(150)
  type      DocumentTemplateType
  content   String?              @db.Text
  createdAt DateTime             @default(now()) @db.DateTime(3)
  updatedAt DateTime             @updatedAt @db.DateTime(3)

  @@map("DocumentTemplate")
}

model LotCategory {
  id                   String            @id @default(uuid())
  name                 String            @unique @db.VarChar(191)
  slug                 String            @unique @db.VarChar(191)
  description          String?           @db.VarChar(500)
  hasSubcategories     Boolean?
  logoUrl              String?           @db.VarChar(191)
  logoMediaId          String?           @db.VarChar(191)
  dataAiHintLogo       String?           @db.VarChar(191)
  coverImageUrl        String?           @db.VarChar(191)
  coverImageMediaId    String?           @db.VarChar(191)
  dataAiHintCover      String?           @db.VarChar(191)
  megaMenuImageUrl     String?           @db.VarChar(191)
  megaMenuImageMediaId String?           @db.VarChar(191)
  dataAiHintMegaMenu   String?           @db.VarChar(191)
  createdAt            DateTime          @default(now()) @db.DateTime(3)
  updatedAt            DateTime          @updatedAt @db.DateTime(3)
  subcategories      Subcategory[]
  auctions           Auction[]
  lots               Lot[]
  directSaleOffers   DirectSaleOffer[]
  bens               Bem[]

  @@map("LotCategory")
}

model VehicleMake {
  id     String         @id @default(uuid())
  name   String         @unique @db.VarChar(191)
  slug   String         @unique @db.VarChar(191)
  models VehicleModel[]

  @@map("VehicleMake")
}

// ===============================================
//        MODELS WITH ONE-LEVEL DEPENDENCIES
// ===============================================

model User {
  id                  String                 @id @default(uuid())
  email               String                 @unique @db.VarChar(191)
  password            String?                @db.VarChar(191)
  fullName            String?                @db.VarChar(191)
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType            @default(PHYSICAL)
  avatarUrl           String?                @db.VarChar(191)
  dataAiHint          String?                @db.VarChar(191)
  badges              Json?
  cpf                 String?                @db.VarChar(191)
  rgNumber            String?                @db.VarChar(191)
  rgIssuer            String?                @db.VarChar(191)
  rgIssueDate         DateTime?              @db.DateTime(3)
  rgState             String?                @db.VarChar(191)
  dateOfBirth         DateTime?              @db.DateTime(3)
  cellPhone           String?                @db.VarChar(191)
  homePhone           String?                @db.VarChar(191)
  gender              String?                @db.VarChar(191)
  profession          String?                @db.VarChar(191)
  nationality         String?                @db.VarChar(191)
  maritalStatus       String?                @db.VarChar(191)
  propertyRegime      String?                @db.VarChar(191)
  spouseName          String?                @db.VarChar(191)
  spouseCpf           String?                @db.VarChar(191)
  zipCode             String?                @db.VarChar(191)
  street              String?                @db.VarChar(191)
  number              String?                @db.VarChar(191)
  complement          String?                @db.VarChar(191)
  neighborhood        String?                @db.VarChar(191)
  city                String?                @db.VarChar(191)
  state               String?                @db.VarChar(191)
  optInMarketing      Boolean?               @default(false)
  razaoSocial         String?                @db.VarChar(191)
  cnpj                String?                @db.VarChar(191)
  inscricaoEstadual   String?                @db.VarChar(191)
  website             String?                @db.VarChar(191)
  responsibleName     String?                @db.VarChar(191)
  responsibleCpf      String?                @db.VarChar(191)
  createdAt           DateTime               @default(now()) @db.DateTime(3)
  updatedAt           DateTime               @updatedAt @db.DateTime(3)
  roles               UsersOnRoles[]
  documents           UserDocument[]
  bids                Bid[]
  notifications       Notification[]
  wins                UserWin[]
  maxBids             UserLotMaxBid[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  uploadedMedia       MediaItem[]

  @@map("User")
}

model Role {
  id             String         @id @default(uuid())
  name           String         @unique @db.VarChar(50)
  nameNormalized String         @unique @db.VarChar(50)
  description    String?        @db.VarChar(255)
  permissions    Json
  createdAt      DateTime       @default(now()) @db.DateTime(3)
  updatedAt      DateTime       @updatedAt @db.DateTime(3)
  users          UsersOnRoles[]

  @@map("Role")
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @db.VarChar(191)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String   @db.VarChar(191)
  assignedAt DateTime @default(now()) @db.DateTime(3)
  assignedBy String   @db.VarChar(191)

  @@id([userId, roleId])
  @@map("UsersOnRoles")
}

model City {
  id       String    @id @default(uuid())
  name     String    @db.VarChar(150)
  slug     String    @db.VarChar(150)
  stateId  String    @db.VarChar(191)
  stateUf  String?   @db.VarChar(191)
  ibgeCode String?   @unique @db.VarChar(10)
  lotCount Int?      @default(0)
  state    State     @relation(fields: [stateId], references: [id], onDelete: Cascade)
  auctions Auction[]
  lots     Lot[]

  @@map("City")
}

model Court {
  id                String             @id @default(uuid())
  name              String             @db.VarChar(150)
  slug              String?            @db.VarChar(150)
  stateId           String?            @db.VarChar(191)
  stateUf           String?            @db.VarChar(2)
  website           String?            @db.VarChar(191)
  createdAt         DateTime           @default(now()) @db.DateTime(3)
  updatedAt         DateTime           @updatedAt @db.DateTime(3)
  state             State?             @relation(fields: [stateId], references: [id], onDelete: SetNull)
  districts         JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]

  @@map("Court")
}

model Subcategory {
  id                 String      @id @default(uuid())
  name               String      @db.VarChar(191)
  slug               String      @unique @db.VarChar(191)
  parentCategoryId   String      @db.VarChar(191)
  description        String?     @db.VarChar(500)
  displayOrder       Int         @default(0)
  iconUrl            String?     @db.VarChar(191)
  iconMediaId        String?     @db.VarChar(191)
  dataAiHintIcon     String?     @db.VarChar(191)
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots               Lot[]
  bens               Bem[]

  @@map("Subcategory")
}

model VehicleModel {
  id     String      @id @default(uuid())
  name   String      @db.VarChar(191)
  slug   String      @db.VarChar(191)
  makeId String      @db.VarChar(191)
  make   VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)

  @@unique([name, makeId])
  @@map("VehicleModel")
}

model JudicialDistrict {
  id                String           @id @default(uuid())
  name              String           @db.VarChar(150)
  slug              String           @unique @db.VarChar(150)
  courtId           String?          @db.VarChar(191)
  stateId           String           @db.VarChar(191)
  zipCode           String?          @db.VarChar(10)
  createdAt         DateTime         @default(now()) @db.DateTime(3)
  updatedAt         DateTime         @updatedAt @db.DateTime(3)
  court             Court?           @relation(fields: [courtId], references: [id], onDelete: SetNull)
  state             State            @relation(fields: [stateId], references: [id])
  branches          JudicialBranch[]
  judicialProcesses JudicialProcess[]

  @@map("JudicialDistrict")
}

// ===============================================
//      MODELS WITH TWO OR MORE DEPENDENCIES
// ===============================================

model Seller {
  id                 String            @id @default(uuid())
  publicId           String?           @unique @db.VarChar(191)
  slug               String?           @unique @db.VarChar(150)
  name               String            @unique @db.VarChar(150)
  contactName        String?           @db.VarChar(150)
  email              String?           @db.VarChar(150)
  phone              String?           @db.VarChar(20)
  address            String?           @db.VarChar(200)
  city               String?           @db.VarChar(100)
  state              String?           @db.VarChar(50)
  zipCode            String?           @db.VarChar(10)
  website            String?           @db.VarChar(191)
  logoUrl            String?           @db.VarChar(191)
  logoMediaId        String?           @db.VarChar(191)
  dataAiHintLogo     String?           @db.VarChar(191)
  description        String?           @db.Text
  userId             String?           @unique @db.VarChar(191)
  user               User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  isJudicial         Boolean           @default(false)
  judicialBranchId   String?           @unique @db.VarChar(191)
  judicialBranch     JudicialBranch?   @relation(fields: [judicialBranchId], references: [id])
  auctions           Auction[]
  directSaleOffers   DirectSaleOffer[]
  lots               Lot[]             @relation("LotSeller")
  bens               Bem[]
  judicialProcesses  JudicialProcess[]
  createdAt          DateTime          @default(now()) @db.DateTime(3)
  updatedAt          DateTime          @updatedAt @db.DateTime(3)

  @@map("Seller")
}

model Auctioneer {
  id                   String    @id @default(uuid())
  publicId             String?   @unique @db.VarChar(191)
  slug                 String?   @unique @db.VarChar(150)
  name                 String    @db.VarChar(150)
  registrationNumber   String?   @db.VarChar(50)
  contactName          String?   @db.VarChar(150)
  email                String?   @db.VarChar(150)
  phone                String?   @db.VarChar(20)
  address              String?   @db.VarChar(200)
  city                 String?   @db.VarChar(100)
  state                String?   @db.VarChar(50)
  zipCode              String?   @db.VarChar(10)
  website              String?   @db.VarChar(191)
  logoUrl              String?   @db.VarChar(191)
  logoMediaId          String?   @db.VarChar(191)
  dataAiHintLogo       String?   @db.VarChar(191)
  description          String?   @db.Text
  userId               String?   @unique @db.VarChar(191)
  createdAt            DateTime  @default(now()) @db.DateTime(3)
  updatedAt            DateTime  @updatedAt @db.DateTime(3)
  user                 User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  auctions             Auction[]
  lots                 Lot[]     @relation("AuctioneerToLot")

  @@map("Auctioneer")
}

model JudicialBranch {
  id                String             @id @default(uuid())
  name              String             @db.VarChar(150)
  slug              String             @unique @db.VarChar(150)
  districtId        String?            @db.VarChar(191)
  contactName       String?            @db.VarChar(150)
  phone             String?            @db.VarChar(20)
  email             String?            @db.VarChar(150)
  createdAt         DateTime           @default(now()) @db.DateTime(3)
  updatedAt         DateTime           @updatedAt @db.DateTime(3)
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id], onDelete: SetNull)
  sellers           Seller[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]          @relation("AuctionBranch")

  @@map("JudicialBranch")
}

model JudicialProcess {
  id              String           @id @default(uuid())
  publicId        String?          @unique @db.VarChar(191)
  processNumber   String           @db.VarChar(100)
  isElectronic    Boolean          @default(true)
  courtId         String?          @db.VarChar(191)
  districtId      String?          @db.VarChar(191)
  branchId        String?          @db.VarChar(191)
  sellerId        String?          @db.VarChar(191)
  createdAt       DateTime         @default(now()) @db.DateTime(3)
  updatedAt       DateTime         @updatedAt @db.DateTime(3)
  court           Court?           @relation(fields: [courtId], references: [id])
  district        JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch          JudicialBranch?   @relation(fields: [branchId], references: [id])
  seller          Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties         JudicialParty[]
  bens            Bem[]
  auctions        Auction[]
  mediaItems      MediaItem[]

  @@map("JudicialProcess")
}

model Bem {
  id                        String      @id @default(uuid())
  publicId                  String      @unique @db.VarChar(191)
  title                     String      @db.VarChar(191)
  description               String?     @db.Text
  status                    BemStatus   @default(DISPONIVEL)
  categoryId                String      @db.VarChar(191)
  subcategoryId             String?     @db.VarChar(191)
  judicialProcessId         String?     @db.VarChar(191)
  sellerId                  String?     @db.VarChar(191)
  evaluationValue           Decimal?    @db.Decimal(15, 2)
  imageUrl                  String?     @db.VarChar(191)
  imageMediaId              String?     @db.VarChar(191)
  galleryImageUrls          Json?
  mediaItemIds              Json?
  dataAiHint                String?     @db.VarChar(191)
  locationCity              String?     @db.VarChar(191)
  locationState             String?     @db.VarChar(191)
  address                   String?     @db.VarChar(191)
  latitude                  Decimal?    @db.Decimal(10, 8)
  longitude                 Decimal?    @db.Decimal(11, 8)
  plate                     String?     @db.VarChar(191)
  make                      String?     @db.VarChar(191)
  model                     String?     @db.VarChar(191)
  version                   String?     @db.VarChar(191)
  year                      Int?
  modelYear                 Int?
  mileage                   Int?
  color                     String?     @db.VarChar(191)
  fuelType                  String?     @db.VarChar(191)
  transmissionType          String?     @db.VarChar(191)
  bodyType                  String?     @db.VarChar(191)
  vin                       String?     @unique @db.VarChar(191)
  renavam                   String?     @unique @db.VarChar(191)
  enginePower               String?     @db.VarChar(191)
  numberOfDoors             Int?
  vehicleOptions            String?     @db.Text
  detranStatus              String?     @db.VarChar(191)
  debts                     String?     @db.Text
  runningCondition          String?     @db.VarChar(191)
  bodyCondition             String?     @db.VarChar(191)
  tiresCondition            String?     @db.VarChar(191)
  hasKey                    Boolean?
  propertyRegistrationNumber String?     @db.VarChar(191)
  iptuNumber                String?     @db.VarChar(191)
  isOccupied                Boolean?
  totalArea                 Decimal?    @db.Decimal(15, 2)
  builtArea                 Decimal?    @db.Decimal(15, 2)
  bedrooms                  Int?
  suites                    Int?
  bathrooms                 Int?
  parkingSpaces             Int?
  constructionType          String?     @db.VarChar(191)
  finishes                  String?     @db.Text
  infrastructure            String?     @db.Text
  condoDetails              String?     @db.Text
  improvements              String?     @db.Text
  topography                String?     @db.VarChar(191)
  liensAndEncumbrances      String?     @db.Text
  propertyDebts             String?     @db.Text
  unregisteredRecords       String?     @db.Text
  hasHabiteSe               Boolean?
  zoningRestrictions        String?     @db.VarChar(191)
  brand                     String?     @db.VarChar(191)
  serialNumber              String?     @db.VarChar(191)
  itemCondition             String?     @db.VarChar(191)
  specifications            String?     @db.Text
  includedAccessories       String?     @db.Text
  batteryCondition          String?     @db.VarChar(191)
  hasInvoice                Boolean?
  hasWarranty               Boolean?
  repairHistory             String?     @db.Text
  applianceCapacity         String?     @db.VarChar(191)
  voltage                   String?     @db.VarChar(191)
  applianceType             String?     @db.VarChar(191)
  additionalFunctions       String?     @db.VarChar(191)
  hoursUsed                 Int?
  engineType                String?     @db.VarChar(191)
  capacityOrPower           String?     @db.VarChar(191)
  maintenanceHistory        String?     @db.Text
  installationLocation      String?     @db.VarChar(191)
  compliesWithNR            String?     @db.VarChar(191)
  operatingLicenses         String?     @db.VarChar(191)
  breed                     String?     @db.VarChar(191)
  age                       String?     @db.VarChar(191)
  sex                       AnimalSex?
  weight                    String?     @db.VarChar(191)
  individualId              String?     @db.VarChar(191)
  purpose                   String?     @db.VarChar(191)
  sanitaryCondition         String?     @db.VarChar(191)
  vaccinationStatus         String?     @db.VarChar(191)
  lineage                   String?     @db.VarChar(191)
  isPregnant                Boolean?
  specialSkills             String?     @db.VarChar(191)
  gtaDocument               String?     @db.VarChar(191)
  breedRegistryDocument     String?     @db.VarChar(191)
  furnitureType             String?     @db.VarChar(191)
  material                  String?     @db.VarChar(191)
  style                     String?     @db.VarChar(191)
  dimensions                String?     @db.VarChar(191)
  pieceCount                Int?
  jewelryType               String?     @db.VarChar(191)
  metal                     String?     @db.VarChar(191)
  gemstones                 String?     @db.VarChar(191)
  totalWeight               String?     @db.VarChar(191)
  jewelrySize               String?     @db.VarChar(191)
  authenticityCertificate   String?     @db.VarChar(191)
  workType                  String?     @db.VarChar(191)
  artist                    String?     @db.VarChar(191)
  period                    String?     @db.VarChar(191)
  technique                 String?     @db.VarChar(191)
  provenance                String?     @db.Text
  boatType                  String?     @dbVarChar(191)
  boatLength                String?     @db.VarChar(191)
  hullMaterial              String?     @db.VarChar(191)
  onboardEquipment          String?     @db.Text
  productName               String?     @db.VarChar(191)
  quantity                  String?     @db.VarChar(191)
  packagingType             String?     @db.VarChar(191)
  expirationDate            DateTime?   @db.DateTime(3)
  storageConditions         String?     @db.VarChar(191)
  preciousMetalType         String?     @db.VarChar(191)
  purity                    String?     @db.VarChar(191)
  forestGoodsType           String?     @db.VarChar(191)
  volumeOrQuantity          String?     @db.VarChar(191)
  species                   String?     @db.VarChar(191)
  dofNumber                 String?     @db.VarChar(191)
  createdAt                 DateTime    @default(now()) @db.DateTime(3)
  updatedAt                 DateTime    @updatedAt @db.DateTime(3)
  category                  LotCategory @relation(fields: [categoryId], references: [id])
  subcategory               Subcategory? @relation(fields: [subcategoryId], references: [id])
  judicialProcess           JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller                    Seller?      @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  lots                      LotBens[]

  @@map("Bem")
}

model LotBens {
  lot     Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId   String @db.VarChar(191)
  bem     Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId   String @db.VarChar(191)

  @@id([lotId, bemId])
  @@map("LotBens")
}

model Bid {
  id            String    @id @default(uuid())
  lotId         String    @db.VarChar(191)
  auctionId     String    @db.VarChar(191)
  bidderId      String    @db.VarChar(191)
  bidderDisplay String?   @db.VarChar(191)
  amount        Decimal   @db.Decimal(15, 2)
  timestamp     DateTime  @default(now()) @db.DateTime(3)
  lot           Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bidder        User      @relation(fields: [bidderId], references: [id], onDelete: Cascade)

  @@map("Bid")
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(150)
  email     String   @db.VarChar(150)
  subject   String?  @db.VarChar(191)
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now()) @db.DateTime(3)

  @@map("ContactMessage")
}

model JudicialParty {
  id             String           @id @default(uuid())
  processId      String           @db.VarChar(191)
  name           String           @db.VarChar(191)
  documentNumber String?          @db.VarChar(50)
  partyType      ProcessPartyType
  process        JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@map("JudicialParty")
}

model Lot {
  id                           String                     @id @default(uuid())
  publicId                     String?                    @unique @db.VarChar(100)
  auctionId                    String                     @db.VarChar(191)
  slug                         String?                    @unique @db.VarChar(255)
  number                       String?                    @db.VarChar(20)
  title                        String                     @db.VarChar(255)
  description                  String?                    @db.Text
  price                        Decimal                    @db.Decimal(15, 2)
  initialPrice                 Decimal?                   @db.Decimal(15, 2)
  secondInitialPrice           Decimal?                   @db.Decimal(15, 2)
  bidIncrementStep             Decimal?                   @db.Decimal(10, 2)
  status                       LotStatus                  @default(EM_BREVE)
  bidsCount                    Int?                       @default(0)
  views                        Int?                       @default(0)
  isFeatured                   Boolean?                   @default(false)
  isExclusive                  Boolean?                   @default(false)
  discountPercentage           Int?
  additionalTriggers           Json?
  imageUrl                     String?                    @db.VarChar(191)
  imageMediaId                 String?                    @db.VarChar(191)
  galleryImageUrls             Json?
  mediaItemIds                 Json?
  type                         String                     @db.VarChar(100)
  categoryId                   String?                    @db.VarChar(191)
  subcategoryId                String?                    @db.VarChar(191)
  auctionName                  String?                    @db.VarChar(255)
  sellerId                     String?                    @db.VarChar(191)
  sellerName                   String?                    @db.VarChar(150)
  auctioneerId                 String?                    @db.VarChar(191)
  cityId                       String?                    @db.VarChar(191)
  stateId                      String?                    @db.VarChar(191)
  cityName                     String?                    @db.VarChar(100)
  stateUf                      String?                    @db.VarChar(2)
  latitude                     Decimal?                   @db.Decimal(10, 8)
  longitude                    Decimal?                   @db.Decimal(11, 8)
  mapAddress                   String?                    @db.VarChar(255)
  mapEmbedUrl                  String?                    @db.VarChar(500)
  mapStaticImageUrl            String?                    @db.VarChar(191)
  endDate                      DateTime?                  @db.DateTime(3)
  auctionDate                  DateTime?                  @db.DateTime(3)
  lotSpecificAuctionDate       DateTime?                  @db.DateTime(3)
  secondAuctionDate            DateTime?                  @db.DateTime(3)
  condition                    String?                    @db.VarChar(100)
  dataAiHint                   String?                    @db.VarChar(100)
  winnerId                     String?                    @unique @db.VarChar(191)
  winningBidTermUrl            String?                    @db.VarChar(191)
  allowInstallmentBids         Boolean?                   @default(false)
  isRelisted                   Boolean                    @default(false)
  relistCount                  Int                        @default(0)
  originalLotId                String?                    @unique @db.VarChar(191)
  inheritedMediaFromBemId      String?                    @db.VarChar(191)
  createdAt                    DateTime                   @default(now()) @db.DateTime(3)
  updatedAt                    DateTime                   @updatedAt @db.DateTime(3)
  auction                      Auction                    @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                     LotCategory?               @relation(fields: [categoryId], references: [id])
  subcategory                  Subcategory?               @relation(fields: [subcategoryId], references: [id])
  seller                       Seller?                    @relation("LotSeller", fields: [sellerId], references: [id])
  city                         City?                      @relation(fields: [cityId], references: [id])
  state                        State?                     @relation(fields: [stateId], references: [id])
  winner                       User?                      @relation("WonLots", fields: [winnerId], references: [id], onDelete: SetNull)
  originalLot                  Lot?                       @relation("RelistHistory", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot                  Lot?                       @relation("RelistHistory")
  bids                         Bid[]
  wins                         UserWin[]
  maxBids                      UserLotMaxBid[]
  auctioneers                  Auctioneer[]               @relation("AuctioneerToLot")
  stageDetails                 LotAuctionStageDetails[]
  bens                         LotBens[]

  @@map("Lot")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String   @db.VarChar(191)
  message   String   @db.VarChar(191)
  link      String?  @db.VarChar(191)
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now()) @db.DateTime(3)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Notification")
}

model UserDocument {
  id              String         @id @default(uuid())
  userId          String         @db.VarChar(191)
  documentTypeId  String         @db.VarChar(191)
  status          UserDocumentStatus @default(PENDING_ANALYSIS)
  fileUrl         String         @db.VarChar(191)
  fileName        String?        @db.VarChar(191)
  rejectionReason String?        @db.Text
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType   @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)

  @@unique([userId, documentTypeId])
  @@map("UserDocument")
}

model LotAuctionStageDetails {
    id           String       @id @default(uuid())
    lotId        String       @db.VarChar(191)
    stageId      String       @db.VarChar(191)
    initialBid   Decimal?     @db.Decimal(15, 2)
    bidIncrement Decimal?     @db.Decimal(10, 2)
    lot          Lot          @relation(fields: [lotId], references: [id], onDelete: Cascade)
    stage        AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)

    @@unique([lotId, stageId])
    @@map("LotAuctionStageDetails")
}

model AuctionHabilitation {
  id        String   @id @default(uuid())
  userId    String   @db.VarChar(191)
  auctionId String   @db.VarChar(191)
  createdAt DateTime @default(now()) @db.DateTime(3)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@unique([userId, auctionId])
  @@map("AuctionHabilitation")
}

model UserWin {
    id               String               @id @default(uuid())
    lotId            String               @unique @db.VarChar(191)
    userId           String               @db.VarChar(191)
    winningBidAmount Decimal              @db.Decimal(15, 2)
    winDate          DateTime             @default(now()) @db.DateTime(3)
    paymentStatus    PaymentStatus        @default(PENDENTE)
    invoiceUrl       String?              @db.VarChar(191)
    lot              Lot                  @relation(fields: [lotId], references: [id])
    user             User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
    installments     InstallmentPayment[]

    @@map("UserWin")
}

model InstallmentPayment {
    id                String        @id @default(uuid())
    userWinId         String        @db.VarChar(191)
    installmentNumber Int
    amount            Decimal       @db.Decimal(15, 2)
    dueDate           DateTime      @db.DateTime(3)
    status            PaymentStatus @default(PENDENTE)
    paymentDate       DateTime?     @db.DateTime(3)
    paymentMethod     String?       @db.VarChar(191)
    transactionId     String?       @db.VarChar(191)
    win               UserWin       @relation(fields: [userWinId], references: [id], onDelete: Cascade)

    @@map("InstallmentPayment")
}

model UserLotMaxBid {
    id        String   @id @default(uuid())
    userId    String   @db.VarChar(191)
    lotId     String   @db.VarChar(191)
    maxAmount Decimal  @db.Decimal(15, 2)
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now()) @db.DateTime(3)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

    @@unique([userId, lotId])
    @@map("UserLotMaxBid")
}

model MediaItem {
    id                  String           @id @default(uuid())
    fileName            String           @db.VarChar(191)
    storagePath         String           @db.VarChar(191)
    title               String?          @db.VarChar(191)
    altText             String?          @db.VarChar(191)
    caption             String?          @db.VarChar(500)
    description         String?          @db.Text
    mimeType            String           @db.VarChar(100)
    sizeBytes           Int?
    urlOriginal         String           @db.VarChar(191)
    urlThumbnail        String?          @db.VarChar(191)
    urlMedium           String?          @db.VarChar(191)
    urlLarge            String?          @db.VarChar(191)
    linkedLotIds        Json?
    judicialProcessId   String?          @db.VarChar(191)
    dataAiHint          String?          @db.VarChar(100)
    uploadedByUserId    String           @db.VarChar(191)
    uploadedAt          DateTime         @default(now()) @db.DateTime(3)
    uploadedBy          User             @relation(fields: [uploadedByUserId], references: [id])
    judicialProcess     JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)

    @@map("MediaItem")
}


model DirectSaleOffer {
    id                   String                @id @default(uuid())
    publicId             String?               @unique @db.VarChar(100)
    title                String                @db.VarChar(255)
    description          String?               @db.Text
    offerType            DirectSaleOfferType
    price                Decimal?              @db.Decimal(15, 2)
    minimumOfferPrice    Decimal?              @db.Decimal(15, 2)
    status               DirectSaleOfferStatus @default(ACTIVE)
    categoryName         String?               @db.VarChar(100)
    categoryId           String                @db.VarChar(191)
    sellerId             String                @db.VarChar(191)
    sellerName           String?               @db.VarChar(150)
    sellerLogoUrl        String?               @db.VarChar(191)
    dataAiHintSellerLogo String?               @db.VarChar(100)
    locationCity         String?               @db.VarChar(100)
    locationState        String?               @db.VarChar(100)
    imageUrl             String?               @db.VarChar(191)
    imageMediaId         String?               @db.VarChar(191)
    dataAiHint           String?               @db.VarChar(100)
    galleryImageUrls     Json?
    mediaItemIds         Json?
    itemsIncluded        Json?
    views                Int?                  @default(0)
    expiresAt            DateTime?             @db.DateTime(3)
    createdAt            DateTime              @default(now()) @db.DateTime(3)
    updatedAt            DateTime              @updatedAt @db.DateTime(3)
    category             LotCategory           @relation(fields: [categoryId], references: [id])
    seller               Seller                @relation(fields: [sellerId], references: [id], onDelete: Cascade)
    
    @@map("DirectSaleOffer")
}

model PlatformSettings {
  id                          String                @id @default("global") @db.VarChar(191)
  siteTitle                   String?               @db.VarChar(191)
  siteTagline                 String?               @db.VarChar(191)
  galleryImageBasePath        String?               @db.VarChar(191)
  storageProvider             String?               @db.VarChar(191)
  firebaseStorageBucket       String?               @db.VarChar(191)
  activeThemeName             String?               @db.VarChar(191)
  themes                      Json?
  platformPublicIdMasks       Json?
  homepageSections            Json?
  mentalTriggerSettings       Json?
  sectionBadgeVisibility      Json?
  mapSettings                 Json?
  searchPaginationType        String?               @db.VarChar(191)
  searchItemsPerPage          Int?
  searchLoadMoreCount         Int?
  showCountdownOnLotDetail    Boolean?
  showCountdownOnCards        Boolean?
  showRelatedLotsOnLotDetail  Boolean?
  relatedLotsCount            Int?
  defaultUrgencyTimerHours    Int?
  variableIncrementTable      Json?
  biddingSettings             Json?
  paymentGatewaySettings      Json?
  defaultListItemsPerPage     Int?
  updatedAt                   DateTime?             @updatedAt @db.DateTime(3)

  @@map("PlatformSettings")
}


enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum AnimalSex {
  Macho
  Femea
}
