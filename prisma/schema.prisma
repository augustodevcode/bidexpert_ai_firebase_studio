// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// =================================================================
// Enums - Keep all enumerations at the top for clarity
// =================================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  PENDING_APPROVAL
  ACTIVE
  SOLD
  EXPIRED
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

// =================================================================
// Core Models (Users, Roles, Permissions)
// =================================================================

model User {
  id                  String                   @id @default(cuid())
  email               String                   @unique
  fullName            String?
  password            String
  roleId              String?
  habilitationStatus  UserHabilitationStatus?  @default(PENDING_DOCUMENTS)
  status              String?                  @default("ATIVO")
  optInMarketing      Boolean                  @default(false)
  badges              String?                  // Storing as comma-separated string
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  avatarUrl           String?
  accountType         AccountType?             @default(PHYSICAL)
  // PF Details
  cpf                 String?                  @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  // PJ Details
  razaoSocial         String?
  cnpj                String?                  @unique
  inscricaoEstadual   String?
  website             String?
  // Address
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  // Relationships
  role                Role?                    @relation(fields: [roleId], references: [id], onDelete: SetNull)
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  reviews             Review[]
  questions           LotQuestion[]            @relation("QuestionAskedBy")
  answeredQuestions   LotQuestion[]            @relation("QuestionAnsweredBy")
  notifications       Notification[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  blogPosts           BlogPost[]               @relation("AuthoredBy")
  mediaItems          MediaItem[]
}

model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  permissions     String[] // Use String[] for simplicity if supported, otherwise define Permission model
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  users           User[]
}

model Permission {
  id          String @id @default(cuid())
  name        String @unique
  description String?
}

// =================================================================
// Geographic & Categorization Models
// =================================================================

model StateInfo {
  id        String             @id @default(cuid())
  name      String
  uf        String             @unique
  slug      String             @unique
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  cities    CityInfo[]
  courts    Court[]
  districts JudicialDistrict[]
  lots      Lot[]
}

model CityInfo {
  id        String   @id @default(cuid())
  name      String
  slug      String
  stateId   String
  stateUf   String
  ibgeCode  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lots      Lot[]
  state     StateInfo @relation(fields: [stateId], references: [id])
  @@unique([name, stateId])
}

model LotCategory {
  id                 String              @id @default(cuid())
  name               String              @unique
  slug               String              @unique
  description        String?             @db.Text
  logoUrl            String?
  dataAiHintLogo     String?
  coverImageUrl      String?
  dataAiHintCover    String?
  megaMenuImageUrl   String?
  dataAiHintMegaMenu String?
  itemCount          Int?                @default(0)
  hasSubcategories   Boolean?            @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  subcategories      Subcategory[]
  lots               Lot[]
  auctions           Auction[]
  directSaleOffers   DirectSaleOffer[]
  bens               Bem[]
}

model Subcategory {
  id               String       @id @default(cuid())
  name             String
  slug             String       @unique
  description      String?
  parentCategoryId String
  itemCount        Int?         @default(0)
  displayOrder     Int?         @default(0)
  iconUrl          String?
  dataAiHintIcon   String?
  iconMediaId      String?      @unique
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  parentCategory   LotCategory  @relation(fields: [parentCategoryId], references: [id])
  lots             Lot[]
  icon             MediaItem?   @relation("SubcategoryIcon", fields: [iconMediaId], references: [id], onDelete: SetNull)
  bens             Bem[]
}

// =================================================================
// Judicial Models
// =================================================================

model Court {
  id          String             @id @default(cuid())
  name        String             @unique
  slug        String             @unique
  stateUf     String
  website     String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  districts   JudicialDistrict[]
  processes   JudicialProcess[]
  state       StateInfo          @relation(fields: [stateUf], references: [uf])
}

model JudicialDistrict {
  id        String             @id @default(cuid())
  name      String
  slug      String             @unique
  courtId   String
  stateId   String
  zipCode   String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  court     Court              @relation(fields: [courtId], references: [id])
  state     StateInfo          @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]
  @@unique([name, courtId])
}

model JudicialBranch {
  id          String             @id @default(cuid())
  name        String
  slug        String
  districtId  String
  contactName String?
  phone       String?
  email       String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  district    JudicialDistrict   @relation(fields: [districtId], references: [id])
  processes   JudicialProcess[]
  seller      Seller?
  @@unique([name, districtId])
}

// =================================================================
// Core Business Models (Auction, Lot, etc.)
// =================================================================

model Seller {
  id                         String             @id @default(cuid())
  publicId                   String             @unique
  name                       String             @unique
  slug                       String             @unique
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  logoUrl                    String?
  dataAiHintLogo             String?
  logoMediaId                String?            @unique
  description                String?            @db.Text
  isJudicial                 Boolean            @default(false)
  judicialBranchId           String?            @unique
  createdAt                  DateTime           @default(now())
  updatedAt                  DateTime           @updatedAt
  user                       User?              @relation(fields: [userId], references: [id])
  userId                     String?            @unique
  auctions                   Auction[]
  lots                       Lot[]
  judicialBranch             JudicialBranch?    @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  directSaleOffers           DirectSaleOffer[]
  bens                       Bem[]
  judicialProcesses          JudicialProcess[]
  blogPosts                  BlogPost[]
}

model Auctioneer {
  id                     String    @id @default(cuid())
  publicId               String    @unique
  name                   String    @unique
  slug                   String    @unique
  registrationNumber     String?
  contactName            String?
  email                  String?
  phone                  String?
  address                String?
  city                   String?
  state                  String?
  zipCode                String?
  website                String?
  logoUrl                String?
  dataAiHintLogo         String?
  logoMediaId            String?   @unique
  description            String?   @db.Text
  memberSince            DateTime?
  rating                 Float?
  auctionsConductedCount Int?      @default(0)
  totalValueSold         Float?    @default(0)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  userId                 String?   @unique
  user                   User?     @relation(fields: [userId], references: [id])
  auctions               Auction[]
}

model JudicialProcess {
  id                String           @id @default(cuid())
  publicId          String           @unique
  processNumber     String           @unique
  isElectronic      Boolean          @default(true)
  courtId           String
  districtId        String
  branchId          String
  sellerId          String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  auction           Auction?
  bens              Bem[]
  court             Court            @relation(fields: [courtId], references: [id])
  district          JudicialDistrict @relation(fields: [districtId], references: [id])
  branch            JudicialBranch   @relation(fields: [branchId], references: [id])
  seller            Seller?          @relation(fields: [sellerId], references: [id])
  parties           ProcessParty[]
}

model Bem {
  id                         String       @id @default(cuid())
  publicId                   String       @unique
  title                      String
  description                String?      @db.Text
  status                     BemStatus    @default(DISPONIVEL)
  categoryId                 String?
  subcategoryId              String?
  judicialProcessId          String?
  sellerId                   String?
  evaluationValue            Float?
  imageUrl                   String?
  dataAiHint                 String?
  imageMediaId               String?      @unique
  galleryImageUrls           Json?
  mediaItemIds               Json?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  plate                      String?
  make                       String?
  model                      String?
  version                    String?
  year                       Int?
  modelYear                  Int?
  mileage                    Int?
  color                      String?
  fuelType                   String?
  transmissionType           String?
  bodyType                   String?
  vin                        String?
  renavam                    String?
  enginePower                String?
  numberOfDoors              Int?
  vehicleOptions             String?      @db.Text
  detranStatus               String?
  debts                      String?      @db.Text
  runningCondition           String?
  bodyCondition              String?
  tiresCondition             String?
  hasKey                     Boolean?
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  area                       Float?
  bedrooms                   Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  amenities                  Json?
  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String?      @db.Text
  includedAccessories        String?      @db.Text
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String?      @db.Text
  hoursUsed                  Int?
  engineType                 String?
  capacityOrPower            String?
  maintenanceHistory         String?      @db.Text
  breed                      String?
  age                        String?
  sex                        String?
  weight                     String?
  individualId               String?
  purpose                    String?
  sanitaryCondition          String?
  lineage                    String?
  isPregnant                 Boolean?
  gtaDocument                String?
  breedRegistryDocument      String?
  createdAt                  DateTime     @default(now())
  updatedAt                  DateTime     @updatedAt
  category                   LotCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory                Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess            JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller                     Seller?      @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  image                      MediaItem?   @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  lots                       Lot[]
}

model Auction {
  id                             String        @id @default(cuid())
  publicId                       String        @unique
  title                          String
  description                    String?       @db.Text
  status                         AuctionStatus @default(RASCUNHO)
  auctionType                    AuctionType?
  categoryId                     String?
  auctioneerId                   String
  sellerId                       String?
  judicialProcessId              String?       @unique
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json?
  city                           String?
  state                          String?
  imageUrl                       String?
  dataAiHint                     String?
  imageMediaId                   String?       @unique
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  automaticBiddingEnabled        Boolean?      @default(false)
  silentBiddingEnabled           Boolean?      @default(false)
  allowMultipleBidsPerUser       Boolean?      @default(true)
  allowInstallmentBids           Boolean?      @default(false)
  softCloseEnabled               Boolean?      @default(false)
  softCloseMinutes               Int?          @default(2)
  isFeaturedOnMarketplace        Boolean?      @default(false)
  marketplaceAnnouncementTitle   String?
  visits                         Int?          @default(0)
  totalLots                      Int?          @default(0)
  estimatedRevenue               Float?
  achievedRevenue                Float?
  totalHabilitatedUsers          Int?
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt
  category                       LotCategory?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  auctioneer                     Auctioneer    @relation(fields: [auctioneerId], references: [id])
  seller                         Seller?       @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  judicialProcess                JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  image                          MediaItem?    @relation("AuctionImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  lots                           Lot[]
  bids                           Bid[]
  questions                      LotQuestion[]
  reviews                        Review[]
}

model Lot {
  id                         String      @id @default(cuid())
  publicId                   String      @unique
  auctionId                  String
  number                     String?
  title                      String
  description                String?     @db.Text
  price                      Float
  initialPrice               Float?
  secondInitialPrice         Float?
  bidIncrementStep           Float?
  status                     LotStatus
  categoryId                 String?
  subcategoryId              String?
  stateId                    String?
  cityId                     String?
  sellerId                   String?
  auctioneerId               String?
  imageUrl                   String?
  dataAiHint                 String?
  imageMediaId               String?     @unique
  winningBidTermUrl          String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  bemIds                     Json?
  views                      Int?        @default(0)
  bidsCount                  Int?        @default(0)
  isFeatured                 Boolean?    @default(false)
  isExclusive                Boolean?    @default(false)
  discountPercentage         Float?
  additionalTriggers         Json?
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?
  judicialProcessNumber      String?
  courtDistrict              String?
  courtName                  String?
  publicProcessUrl           String?
  propertyRegistrationNumber String?
  propertyLiens              String?
  knownDebts                 String?
  additionalDocumentsInfo    String?     @db.Text
  reservePrice               Float?
  evaluationValue            Float?
  debtAmount                 Float?
  itbiValue                  Float?
  endDate                    DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  createdAt                  DateTime    @default(now())
  updatedAt                  DateTime    @updatedAt
  auction                    Auction     @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                   LotCategory?@relation(fields: [categoryId], references: [id])
  subcategory                Subcategory?@relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  state                      StateInfo?  @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city                       CityInfo?   @relation(fields: [cityId], references: [id], onDelete: SetNull)
  image                      MediaItem?  @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  bens                       Bem[]
  bids                       Bid[]
  wins                       UserWin[]
  reviews                    Review[]
  questions                  LotQuestion[]
  maxBids                    UserLotMaxBid[]
  seller                     Seller?     @relation(fields: [sellerId], references: [id], onDelete: SetNull)
}

// =================================================================
// Event & Junction Models
// =================================================================

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String        @id @default(cuid())
  lotId            String
  userId           String
  winningBidAmount Float
  winDate          DateTime
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?
  lot              Lot           @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProcessParty {
  id             String           @id @default(cuid())
  processId      String
  name           String
  partyType      ProcessPartyType
  documentNumber String?
  process        JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)
  @@unique([processId, name, partyType])
}

model MediaItem {
  id              String             @id @default(cuid())
  fileName        String
  storagePath     String             @unique
  uploadedAt      DateTime           @default(now())
  uploadedBy      String?
  title           String?
  altText         String?
  caption         String?
  description     String?            @db.Text
  mimeType        String
  sizeBytes       Int
  dimensions      Json?
  urlOriginal     String
  urlThumbnail    String?
  urlMedium       String?
  urlLarge        String?
  dataAiHint      String?
  auctionImage    Auction?           @relation("AuctionImage")
  lotImage        Lot?               @relation("LotImage")
  bemImage        Bem?               @relation("BemImage")
  userAvatar      User?              @relation(fields: [userAvatarId], references: [id], onDelete: SetNull)
  userAvatarId    String?            @unique
  sellerLogo      Seller?            @relation(fields: [sellerLogoId], references: [id], onDelete: SetNull)
  sellerLogoId    String?            @unique
  auctioneerLogo  Auctioneer?        @relation(fields: [auctioneerLogoId], references: [id], onDelete: SetNull)
  auctioneerLogoId String?           @unique
  categoryLogo    LotCategory?       @relation("CategoryLogo", fields: [categoryLogoId], references: [id], onDelete: SetNull)
  categoryLogoId  String?            @unique
  categoryCover   LotCategory?       @relation("CategoryCover", fields: [categoryCoverId], references: [id], onDelete: SetNull)
  categoryCoverId String?            @unique
  categoryMegaMenu LotCategory?      @relation("CategoryMegaMenu", fields: [categoryMegaMenuId], references: [id], onDelete: SetNull)
  categoryMegaMenuId String?         @unique
  subcategoryIcon Subcategory?       @relation("SubcategoryIcon")
  blogPostImage   BlogPost?          @relation("BlogPostImage", fields: [blogPostImageId], references: [id], onDelete: SetNull)
  blogPostImageId String?            @unique
}

model UserDocument {
  id                String             @id @default(cuid())
  userId            String
  documentTypeId    String
  fileUrl           String?
  fileName          String?
  status            UserDocumentStatus @default(NOT_SENT)
  uploadDate        DateTime?
  analysisDate      DateTime?
  analystId         String?
  rejectionReason   String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType      DocumentType       @relation(fields: [documentTypeId], references: [id])
  @@unique([userId, documentTypeId])
}

model DocumentType {
  id             String         @id @default(cuid())
  name           String
  description    String?
  isRequired     Boolean        @default(false)
  appliesTo      String?        // 'PHYSICAL,LEGAL'
  allowedFormats String?        // 'pdf,jpg,png'
  displayOrder   Int?
  userDocuments  UserDocument[]
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id                String   @id @default(cuid())
  lotId             String
  auctionId         String
  userId            String
  userDisplayName   String
  rating            Int
  comment           String   @db.Text
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot               Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction           Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                      String   @id @default(cuid())
  lotId                   String
  auctionId               String
  userId                  String
  userDisplayName         String
  questionText            String   @db.Text
  answerText              String?  @db.Text
  answeredAt              DateTime?
  answeredByUserId        String?
  answeredByUserDisplayName String?
  isPublic                Boolean  @default(true)
  createdAt               DateTime @default(now())
  user                    User     @relation("QuestionAskedBy", fields: [userId], references: [id], onDelete: Cascade)
  lot                     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction                 Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  answeredByUser          User?    @relation("QuestionAnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  @@unique([userId, lotId])
}

model BlogPost {
    id String @id @default(cuid())
    title String
    content String @db.Text
    authorId String
    sellerId String?
    publishedAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    tags Tag[]
    image MediaItem?
    author User @relation("AuthoredBy", fields: [authorId], references: [id])
    seller Seller? @relation(fields: [sellerId], references: [id])
}

model Tag {
    id String @id @default(cuid())
    name String @unique
    posts BlogPost[]
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model PlatformSettings {
  id                             String @id @default("global")
  siteTitle                      String
  siteTagline                    String?
  logoUrl                        String?
  faviconUrl                     String?
  galleryImageBasePath           String
  storageProvider                String?
  firebaseStorageBucket          String?
  activeThemeName                String?
  themes                         Json?
  platformPublicIdMasks          Json?
  homepageSections               Json?
  mentalTriggerSettings          Json?
  sectionBadgeVisibility         Json?
  mapSettings                    Json?
  searchPaginationType           String?
  searchItemsPerPage             Int?
  searchLoadMoreCount            Int?
  showCountdownOnLotDetail       Boolean?
  showCountdownOnCards           Boolean?
  showRelatedLotsOnLotDetail     Boolean?
  relatedLotsCount               Int?
  variableIncrementTable         Json?
  biddingSettings                Json?
  defaultListItemsPerPage        Int?
  defaultUrgencyTimerHours       Int?
  updatedAt                      DateTime @updatedAt
}

model DocumentTemplate {
  id        String               @id @default(cuid())
  name      String               @unique
  type      DocumentTemplateType
  content   String               @db.Text
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}
