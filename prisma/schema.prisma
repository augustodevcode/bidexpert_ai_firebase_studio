// prisma/schema.prisma

generator client {
  provider        = "prisma-client-js"
  // The binaryTargets are part of the configuration for your database.
  // We explicitly add the 'debian-openssl-3.0.x' target to ensure compatibility
  // with the environment where the app is running.
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// --- ENUMS ---

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  PENDING_APPROVAL
  ACTIVE
  SOLD
  EXPIRED
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

// --- MODELS ---

model User {
  id                      String                   @id @default(uuid())
  email                   String                   @unique
  fullName                String
  password                String
  roleId                  String?
  role                    Role?                    @relation(fields: [roleId], references: [id])
  habilitationStatus      UserHabilitationStatus   @default(PENDING_DOCUMENTS)
  cpf                     String?                  @unique
  dateOfBirth             DateTime?
  razaoSocial             String?
  cnpj                    String?                  @unique
  inscricaoEstadual       String?
  website                 String?
  cellPhone               String?
  homePhone               String?
  zipCode                 String?
  street                  String?
  number                  String?
  complement              String?
  neighborhood            String?
  city                    String?
  state                   String?
  gender                  String?
  profession              String?
  nationality             String?
  maritalStatus           String?
  propertyRegime          String?
  spouseName              String?
  spouseCpf               String?
  rgNumber                String?
  rgIssuer                String?
  rgIssueDate             DateTime?
  rgState                 String?
  status                  String?                  @default("ATIVO")
  optInMarketing          Boolean                  @default(false)
  badges                  Json?                    @default("[]")
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  avatarUrl               String?
  dataAiHint              String?
  activeBids              Int?                     @default(0)
  auctionsWon             Int?                     @default(0)
  itemsSold               Int?                     @default(0)
  bids                    Bid[]
  wins                    UserWin[]
  maxBids                 UserLotMaxBid[]
  notifications           Notification[]
  reviews                 Review[]
  questions               LotQuestion[]
  answeredQuestions       LotQuestion[]            @relation("AnsweredByUser")
  documents               UserDocument[]
  uploadedMedia           MediaItem[]
  sellerId                String?                  @unique
  sellerProfile           Seller?
  auctioneerId            String?                  @unique
  auctioneerProfile       Auctioneer?              @relation(fields: [auctioneerId], references: [id])
  sellerIdForConsignor    String?                  @unique
  sellerProfileForConsigor Seller?                 @relation("ConsignorSeller", fields: [sellerIdForConsignor], references: [id])
}

model Role {
  id              String       @id @default(uuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?      @db.Text
  permissions     Json?        @default("[]")
  users           User[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Permission {
  id    String @id @default(uuid())
  name  String @unique
  roles Role[]
}

model DocumentType {
  id             String         @id @default(uuid())
  name           String         @unique
  description    String?        @db.Text
  isRequired     Boolean        @default(true)
  appliesTo      Json?          @default("[\"PHYSICAL\", \"LEGAL\", \"DIRECT_SALE_CONSIGNOR\"]")
  allowedFormats Json?
  displayOrder   Int            @default(0)
  userDocuments  UserDocument[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model UserDocument {
  id              String             @id @default(uuid())
  userId          String
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentTypeId  String
  documentType    DocumentType       @relation(fields: [documentTypeId], references: [id])
  fileUrl         String
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  rejectionReason String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@unique([userId, documentTypeId])
  @@index([userId])
  @@index([documentTypeId])
}

model Auction {
  id                             String        @id @default(uuid())
  publicId                       String        @unique
  title                          String
  fullTitle                      String?       @db.Text
  description                    String?       @db.Text
  status                         AuctionStatus
  auctionType                    AuctionType?
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json?
  imageUrl                       String?
  imageMediaId                   String?
  dataAiHint                     String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  automaticBiddingEnabled        Boolean?      @default(false)
  silentBiddingEnabled           Boolean?      @default(false)
  allowMultipleBidsPerUser       Boolean?      @default(true)
  allowInstallmentBids           Boolean?      @default(false)
  softCloseEnabled               Boolean?      @default(false)
  softCloseMinutes               Int?          @default(2)
  estimatedRevenue               Float?
  achievedRevenue                Float?
  isFeaturedOnMarketplace        Boolean?      @default(false)
  marketplaceAnnouncementTitle   String?
  additionalTriggers             Json?         @default("[]")
  visits                         Int?          @default(0)
  totalLots                      Int?          @default(0)
  totalHabilitatedUsers          Int?          @default(0)
  city                           String?
  state                          String?
  decrementAmount                Float?
  decrementIntervalSeconds       Int?
  floorPrice                     Float?
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt
  categoryId                     String
  auctioneerId                   String
  sellerId                       String?
  judicialProcessId              String?

  category                       LotCategory   @relation(fields: [categoryId], references: [id])
  auctioneer                     Auctioneer    @relation(fields: [auctioneerId], references: [id])
  seller                         Seller?       @relation(fields: [sellerId], references: [id])
  judicialProcess                JudicialProcess? @relation(fields: [judicialProcessId], references: [id])

  lots                           Lot[]
  bids                           Bid[]

  @@index([categoryId])
  @@index([auctioneerId])
  @@index([sellerId])
  @@index([judicialProcessId])
}

model LotCategory {
  id                 String  @id @default(uuid())
  name               String  @unique
  slug               String  @unique
  description        String? @db.Text
  itemCount          Int?    @default(0)
  hasSubcategories   Boolean @default(false)
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  coverImageUrl      String?
  coverImageMediaId  String?
  dataAiHintCover    String?
  megaMenuImageUrl   String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  auctions      Auction[]
  lots          Lot[]
  bens          Bem[]
  subcategories Subcategory[]
}

model Subcategory {
  id               String      @id @default(uuid())
  name             String
  slug             String      @unique
  description      String?     @db.Text
  itemCount        Int?        @default(0)
  displayOrder     Int         @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  parentCategoryId String
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id])
  lots             Lot[]
  bens             Bem[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  
  @@unique([parentCategoryId, name])
  @@index([parentCategoryId])
}

model Lot {
  id                         String   @id @default(uuid())
  publicId                   String   @unique
  number                     String?
  title                      String
  description                String?  @db.Text
  status                     LotStatus
  price                      Float
  initialPrice               Float?
  secondInitialPrice         Float?
  bidIncrementStep           Float?
  endDate                    DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  imageUrl                   String?
  imageMediaId               String?
  winningBidTermUrl          String?
  views                      Int?     @default(0)
  bidsCount                  Int?     @default(0)
  isFeatured                 Boolean? @default(false)
  isExclusive                Boolean? @default(false)
  discountPercentage         Float?
  additionalTriggers         Json?    @default("[]")
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?  @db.Text
  mapStaticImageUrl          String?  @db.Text
  judicialProcessNumber      String?
  courtDistrict              String?
  courtName                  String?
  publicProcessUrl           String?
  propertyRegistrationNumber String?
  propertyLiens              String?  @db.Text
  knownDebts                 String?  @db.Text
  additionalDocumentsInfo    String?  @db.Text
  reservePrice               Float?
  evaluationValue            Float?
  debtAmount                 Float?
  itbiValue                  Float?
  dataAiHint                 String?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  auctionId String
  auction   Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  categoryId    String?
  category      LotCategory? @relation(fields: [categoryId], references: [id])
  subcategoryId String?
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])

  stateId String?
  state   StateInfo? @relation(fields: [stateId], references: [id])

  cityId String?
  city   CityInfo? @relation(fields: [cityId], references: [id])

  sellerId String?
  seller   Seller? @relation(fields: [sellerId], references: [id])

  auctioneerId String?
  auctioneer   Auctioneer? @relation(fields: [auctioneerId], references: [id])

  bids      Bid[]
  wins      UserWin[]
  maxBids   UserLotMaxBid[]
  reviews   Review[]
  questions LotQuestion[]

  // M2M Relations
  bens       Bem[]
  mediaItems MediaItem[]

  @@index([auctionId])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([stateId])
  @@index([cityId])
  @@index([sellerId])
  @@index([auctioneerId])
}


model Seller {
  id                         String    @id @default(uuid())
  publicId                   String    @unique
  name                       String    @unique
  slug                       String    @unique
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  logoUrl                    String?
  logoMediaId                String?
  dataAiHintLogo             String?
  description                String?   @db.Text
  memberSince                DateTime?
  rating                     Float?
  activeLotsCount            Int?
  totalSalesValue            Float?
  auctionsFacilitatedCount   Int?
  isJudicial                 Boolean   @default(false)
  userId                     String?   @unique
  judicialBranchId           String?   @unique
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt

  user                       User?     @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userConsignor              User?     @relation("ConsignorSeller", fields: [id], references: [sellerIdForConsignor], onDelete: NoAction, onUpdate: NoAction)
  judicialBranch             JudicialBranch? @relation(fields: [judicialBranchId], references: [id])

  auctions        Auction[]
  bens            Bem[]
  directSaleOffers DirectSaleOffer[]
  judicialProcesses JudicialProcess[]
}

model Auctioneer {
  id                     String    @id @default(uuid())
  publicId               String    @unique
  name                   String    @unique
  slug                   String    @unique
  registrationNumber     String?
  contactName            String?
  email                  String?
  phone                  String?
  address                String?
  city                   String?
  state                  String?
  zipCode                String?
  website                String?
  logoUrl                String?
  logoMediaId            String?
  dataAiHintLogo         String?
  description            String?   @db.Text
  memberSince            DateTime?
  rating                 Float?
  auctionsConductedCount Int?
  totalValueSold         Float?
  userId                 String?   @unique
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  
  user                   User?
  auctions               Auction[]
  lots                   Lot[]
}

model JudicialProcess {
  id              String   @id @default(uuid())
  publicId        String   @unique
  processNumber   String   @unique
  isElectronic    Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  courtId         String
  districtId      String
  branchId        String
  sellerId        String?

  court           Court          @relation(fields: [courtId], references: [id])
  district        JudicialDistrict @relation(fields: [districtId], references: [id])
  branch          JudicialBranch @relation(fields: [branchId], references: [id])
  seller          Seller?        @relation(fields: [sellerId], references: [id])

  parties         ProcessParty[]
  bens            Bem[]
  auctions        Auction[]

  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
  @@index([sellerId])
}

model ProcessParty {
  id             String           @id @default(uuid())
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  processId      String
  process        JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@unique([processId, name, partyType])
}

model Court {
  id        String             @id @default(uuid())
  name      String             @unique
  slug      String             @unique
  stateUf   String
  website   String?
  districts JudicialDistrict[]
  processes JudicialProcess[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model JudicialDistrict {
  id        String           @id @default(uuid())
  name      String
  slug      String
  zipCode   String?
  courtId   String
  stateId   String
  branches  JudicialBranch[]
  processes JudicialProcess[]
  court     Court            @relation(fields: [courtId], references: [id])
  state     StateInfo        @relation(fields: [stateId], references: [id])
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@unique([courtId, name])
  @@index([courtId])
  @@index([stateId])
}

model JudicialBranch {
  id          String            @id @default(uuid())
  name        String
  slug        String
  contactName String?
  phone       String?
  email       String?
  districtId  String
  district    JudicialDistrict  @relation(fields: [districtId], references: [id])
  processes   JudicialProcess[]
  sellers     Seller[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@unique([districtId, name])
}

model Bem {
  id                         String   @id @default(uuid())
  publicId                   String   @unique
  title                      String
  description                String?  @db.Text
  status                     BemStatus
  evaluationValue            Float?
  imageUrl                   String?
  imageMediaId               String?
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  categoryId                 String?
  subcategoryId              String?
  judicialProcessId          String?
  sellerId                   String?

  // Vehicle
  plate                      String?
  make                       String?
  model                      String?
  version                    String?
  year                       Int?
  modelYear                  Int?
  mileage                    Int?
  color                      String?
  fuelType                   String?
  transmissionType           String?
  bodyType                   String?
  vin                        String?  @unique
  renavam                    String?  @unique
  enginePower                String?
  numberOfDoors              Int?
  vehicleOptions             String?  @db.Text
  detranStatus               String?
  debts                      String?  @db.Text
  runningCondition           String?
  bodyCondition              String?
  tiresCondition             String?
  hasKey                     Boolean?

  // Real Estate
  propertyRegistrationNumber String?  @unique
  iptuNumber                 String?
  propertyType               String?
  isOccupied                 Boolean?
  area                       Float?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?  @db.Text
  infrastructure             String?  @db.Text
  condoDetails               String?  @db.Text
  improvements               String?  @db.Text
  topography                 String?
  liensAndEncumbrances       String?  @db.Text
  propertyDebts              String?  @db.Text
  unregisteredRecords        String?  @db.Text
  hasHabiteSe                Boolean?
  zoningRestrictions         String?

  amenities Json? @default("[]")

  // Electronics
  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String?  @db.Text
  includedAccessories        String?  @db.Text
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String?  @db.Text

  // Appliances
  applianceCapacity          String?
  voltage                    String?
  applianceType              String?
  additionalFunctions        String?  @db.Text

  // Machinery
  hoursUsed                  Int?
  engineType                 String?
  capacityOrPower            String?
  maintenanceHistory         String?  @db.Text
  installationLocation       String?
  compliesWithNR             String?
  operatingLicenses          String?

  // Livestock
  breed                      String?
  age                        String?
  sex                        String?
  weight                     String?
  individualId               String?
  purpose                    String?
  sanitaryCondition          String?  @db.Text
  vaccinationStatus          String?
  lineage                    String?  @db.Text
  isPregnant                 Boolean?
  specialSkills              String?  @db.Text
  gtaDocument                String?
  breedRegistryDocument      String?

  // Furniture
  furnitureType              String?
  material                   String?
  style                      String?
  dimensions                 String?
  pieceCount                 Int?

  // Jewelry
  jewelryType                String?
  metal                      String?
  gemstones                  String?  @db.Text
  totalWeight                String?
  jewelrySize                String?
  authenticityCertificate    String?

  // Art
  workType                   String?
  artist                     String?
  period                     String?
  technique                  String?  @db.Text
  provenance                 String?  @db.Text

  // Boats
  boatType                   String?
  boatLength                 String?
  hullMaterial               String?
  onboardEquipment           String?  @db.Text

  // Food
  productName                String?
  quantity                   String?
  packagingType              String?
  expirationDate             DateTime?
  storageConditions          String?

  // Precious Metals
  preciousMetalType          String?
  purity                     String?

  // Forest Goods
  forestGoodsType            String?
  volumeOrQuantity           String?
  species                    String?
  dofNumber                  String?

  // Relations
  category          LotCategory?     @relation(fields: [categoryId], references: [id])
  subcategory       Subcategory?     @relation(fields: [subcategoryId], references: [id])
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller            Seller?          @relation(fields: [sellerId], references: [id])
  lots              Lot[]
  mediaItems        MediaItem[]

  @@index([categoryId])
  @@index([subcategoryId])
  @@index([judicialProcessId])
  @@index([sellerId])
}

model StateInfo {
  id        String             @id @default(uuid())
  name      String             @unique
  uf        String             @unique
  slug      String             @unique
  cityCount Int?               @default(0)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  cities    CityInfo[]
  lots      Lot[]
}

model CityInfo {
  id        String    @id @default(uuid())
  name      String
  slug      String
  stateId   String
  state     StateInfo @relation(fields: [stateId], references: [id])
  stateUf   String
  ibgeCode  String?   @unique
  lotCount  Int?      @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lots      Lot[]

  @@unique([stateId, name])
}


model Bid {
  id            String   @id @default(uuid())
  amount        Float
  timestamp     DateTime @default(now())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([auctionId])
  @@index([bidderId])
}

model UserWin {
  id               String        @id @default(uuid())
  winningBidAmount Float
  winDate          DateTime      @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?
  lotId            String        @unique
  userId           String
  lot              Lot           @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user             User          @relation(fields: [userId], references: [id])

  @@index([lotId])
  @@index([userId])
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

model DirectSaleOffer {
  id                 String                @id @default(uuid())
  publicId           String                @unique
  title              String
  description        String                @db.Text
  offerType          DirectSaleOfferType
  status             DirectSaleOfferStatus
  price              Float?
  minimumOfferPrice  Float?
  locationCity       String?
  locationState      String?
  imageUrl           String
  imageMediaId       String?
  dataAiHint         String?
  itemsIncluded      Json?
  tags               Json?
  views              Int?                  @default(0)
  proposalsCount     Int?                  @default(0)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  expiresAt          DateTime?
  categoryId         String
  sellerId           String
  latitude           Float?
  longitude          Float?
  mapAddress         String?
  mapEmbedUrl        String?               @db.Text
  mapStaticImageUrl  String?               @db.Text

  category LotCategory @relation(fields: [categoryId], references: [id])
  seller   Seller      @relation(fields: [sellerId], references: [id])

  @@index([categoryId])
  @@index([sellerId])
}

model MediaItem {
  id            String    @id @default(uuid())
  fileName      String
  storagePath   String?
  uploadedAt    DateTime  @default(now())
  uploadedBy    String?
  title         String?
  altText       String?
  caption       String?
  description   String?   @db.Text
  mimeType      String
  sizeBytes     Int
  dimensions    Json?
  urlOriginal   String    @db.Text
  urlThumbnail  String?   @db.Text
  urlMedium     String?   @db.Text
  urlLarge      String?   @db.Text
  dataAiHint    String?

  uploader      User?     @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)
  lots          Lot[]
  bens          Bem[]
  
  @@index([uploadedBy])
}


model BlogPost {
  id          String   @id @default(uuid())
  title       String
  slug        String   @unique
  content     String   @db.Text
  authorId    String
  authorName  String
  imageUrl    String?
  publishedAt DateTime?
  tags        Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([authorId])
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Review {
  id              String   @id @default(uuid())
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String

  lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([userId])
}

model LotQuestion {
  id                      String   @id @default(uuid())
  questionText            String   @db.Text
  isPublic                Boolean  @default(true)
  createdAt               DateTime @default(now())
  answerText              String?  @db.Text
  answeredAt              DateTime?
  lotId                   String
  userId                  String
  userDisplayName         String
  answeredByUserId        String?
  answeredByUserDisplayName String?

  lot            Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user           User @relation(fields: [userId], references: [id], onDelete: Cascade)
  answeredByUser User? @relation("AnsweredByUser", fields: [answeredByUserId], references: [id], onDelete: SetNull)

  @@index([lotId])
  @@index([userId])
  @@index([answeredByUserId])
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  lotId     String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PlatformSettings {
  id                         String  @id @default("global")
  siteTitle                  String?
  siteTagline                String?
  galleryImageBasePath       String?
  storageProvider            String? @default("local") // 'local' or 'firebase'
  firebaseStorageBucket      String?
  activeThemeName            String?
  themes                     Json?
  platformPublicIdMasks      Json?
  homepageSections           Json?
  mentalTriggerSettings      Json?
  sectionBadgeVisibility     Json?
  mapSettings                Json?
  biddingSettings            Json?
  searchPaginationType       String? @default("loadMore")
  searchItemsPerPage         Int?    @default(12)
  searchLoadMoreCount        Int?    @default(12)
  showCountdownOnLotDetail   Boolean? @default(true)
  showCountdownOnCards       Boolean? @default(true)
  showRelatedLotsOnLotDetail Boolean? @default(true)
  relatedLotsCount           Int?
  variableIncrementTable     Json?   @default("[]")
  defaultListItemsPerPage    Int?    @default(10)
  updatedAt                  DateTime @updatedAt
}
