// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// MODELOS DE CONFIGURAÇÃO E DADOS BÁSICOS
// =================================================================

model PlatformSettings {
  id                                String                      @id @default("global")
  siteTitle                         String                      @default("BidExpert")
  siteTagline                       String?
  logoUrl                           String?
  faviconUrl                        String?
  galleryImageBasePath              String                      @default("/uploads/media/")
  storageProvider                   String                      @default("local") // 'local' or 'firebase'
  firebaseStorageBucket             String?
  activeThemeName                   String?
  themes                            Json?
  platformPublicIdMasks             Json?
  homepageSections                  Json?
  mentalTriggerSettings             Json?
  sectionBadgeVisibility            Json?
  mapSettings                       Json?
  searchPaginationType              String                      @default("loadMore") // 'loadMore' or 'numberedPages'
  searchItemsPerPage                Int                         @default(12)
  searchLoadMoreCount               Int                         @default(12)
  showCountdownOnLotDetail          Boolean                     @default(true)
  showCountdownOnCards              Boolean                     @default(true)
  showRelatedLotsOnLotDetail        Boolean                     @default(true)
  relatedLotsCount                  Int                         @default(5)
  defaultUrgencyTimerHours          Int?
  variableIncrementTable            Json?
  biddingSettings                   Json?
  paymentGatewaySettings            Json?
  defaultListItemsPerPage           Int                         @default(10)
  createdAt                         DateTime                    @default(now())
  updatedAt                         DateTime                    @updatedAt
}

model Role {
  id              String         @id @default(uuid())
  name            String         @unique
  nameNormalized  String         @unique
  description     String?
  permissions     Json?
  users           UsersOnRoles[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  password            String?
  fullName            String?
  roleId              String? // Mantido para compatibilidade inicial, mas a relação é a fonte da verdade
  sellerId            String?
  habilitationStatus  String               @default("PENDING_DOCUMENTS") // e.g., PENDING_DOCUMENTS, PENDING_ANALYSIS, HABILITADO, REJECTED
  accountType         String               @default("PHYSICAL") // PHYSICAL or LEGAL
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?                // e.g., ["PRIMEIRO_ARREMATE", "COMPRADOR_FREQUENTE"]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  roles               UsersOnRoles[]
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]            @relation("LotWinner")
  maxBids             UserLotMaxBid[]
  notifications       Notification[]
  uploadedMedia       MediaItem[]          @relation("UploadedBy")
  answeredQuestions   LotQuestion[]        @relation("AnsweredBy")
  askedQuestions      LotQuestion[]        @relation("AskedBy")
  habilitations       AuctionHabilitation[]
}

model State {
  id            String             @id @default(uuid())
  name          String
  uf            String             @unique
  slug          String             @unique
  cityCount     Int                @default(0)
  cities        City[]
  districts     JudicialDistrict[]
  courts        Court[]
  auctions      Auction[]
  lots          Lot[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model City {
  id        String    @id @default(uuid())
  name      String
  slug      String?
  state     State     @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId   String
  stateUf   String?
  ibgeCode  String?   @unique
  lotCount  Int       @default(0)
  lots      Lot[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model LotCategory {
  id                   String        @id @default(uuid())
  name                 String        @unique
  slug                 String        @unique
  description          String?
  hasSubcategories     Boolean       @default(false)
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  lots                 Lot[]
  bens                 Bem[]
  subcategories        Subcategory[]
  auctions             Auction[] // Back-relation added here
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
}

model Subcategory {
  id                  String      @id @default(uuid())
  name                String
  slug                String?
  parentCategory      LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  parentCategoryId    String
  description         String?
  displayOrder        Int         @default(0)
  iconUrl             String?
  iconMediaId         String?
  dataAiHintIcon      String?
  lots                Lot[]
  bens                Bem[]
}

model DocumentType {
  id          String         @id @default(uuid())
  name        String
  description String?
  isRequired  Boolean        @default(true)
  appliesTo   String? // e.g., "PHYSICAL,LEGAL", "ALL"
  documents   UserDocument[]
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Court {
  id                String             @id @default(uuid())
  name              String
  slug              String?
  stateUf           String?
  website           String?
  districts         JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  state             State? @relation(fields: [stateId], references: [id]) // Back-relation added here
  stateId           String?
  auctions          Auction[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

// =================================================================
// MODELOS JUDICIAIS
// =================================================================

model JudicialDistrict {
  id                String             @id @default(uuid())
  name              String
  slug              String             @unique
  court             Court              @relation(fields: [courtId], references: [id])
  courtId           String
  state             State              @relation(fields: [stateId], references: [id])
  stateId           String
  zipCode           String?
  branches          JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model JudicialBranch {
  id                String             @id @default(uuid())
  name              String
  slug              String             @unique
  district          JudicialDistrict   @relation(fields: [districtId], references: [id])
  districtId        String
  contactName       String?
  phone             String?
  email             String?
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  sellers           Seller[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model JudicialProcess {
  id              String           @id @default(uuid())
  publicId        String           @unique
  processNumber   String           @unique
  isElectronic    Boolean          @default(true)
  court             Court            @relation(fields: [courtId], references: [id])
  courtId           String
  district          JudicialDistrict @relation(fields: [districtId], references: [id])
  districtId        String
  branch            JudicialBranch   @relation(fields: [branchId], references: [id])
  branchId          String
  seller            Seller?          @relation(fields: [sellerId], references: [id])
  sellerId          String?
  parties           JudicialParty[]
  bens              Bem[]
  auctions          Auction[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model JudicialParty {
  id             String          @id @default(uuid())
  process          JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId        String
  name             String
  documentNumber   String?
  partyType        String
}

// =================================================================
// MODELOS DE ENTIDADES PRINCIPAIS (COMITENTES, LEILOEIROS)
// =================================================================

model Seller {
  id                String             @id @default(uuid())
  publicId          String?            @unique
  slug              String             @unique
  name              String             @unique
  contactName       String?
  email             String?
  phone             String?
  address           String?
  city              String?
  state             String?
  zipCode           String?
  website           String?
  logoUrl           String?
  logoMediaId       String?
  dataAiHintLogo    String?
  description       String?            @db.Text
  isJudicial        Boolean            @default(false)
  judicialBranch    JudicialBranch?    @relation(fields: [judicialBranchId], references: [id])
  judicialBranchId  String?
  user              User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId            String?            @unique
  auctions          Auction[]
  lots              Lot[]
  bens              Bem[]
  directSaleOffers  DirectSaleOffer[]
  judicialProcesses JudicialProcess[] // Back-relation added here
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Auctioneer {
  id                   String    @id @default(uuid())
  publicId             String?   @unique
  slug                 String    @unique
  name                 String
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?   @db.Text
  auctions             Auction[]
  userId               String?   @unique
  user                 User?     @relation(fields: [userId], references: [id])
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

// =================================================================
// MODELOS DE LEILÃO E LOTE (CORE)
// =================================================================

model Auction {
  id                               String               @id @default(uuid())
  publicId                         String               @unique
  slug                             String               @unique
  title                            String
  description                      String?              @db.Text
  status                           String               @default("RASCUNHO")
  auctionDate                      DateTime
  endDate                          DateTime?
  lots                             Lot[]
  auctioneer                       Auctioneer           @relation(fields: [auctioneerId], references: [id])
  auctioneerId                     String
  seller                           Seller               @relation(fields: [sellerId], references: [id])
  sellerId                         String
  category                         LotCategory          @relation(fields: [categoryId], references: [id])
  categoryId                       String
  auctionType                      String?
  participation                    String?
  auctionMethod                    String?
  onlineUrl                        String?
  address                          String?
  city                             City?                @relation(fields: [cityId], references: [id], onDelete: SetNull)
  cityId                           String?
  state                            State?                 @relation(fields: [stateId], references: [id], onDelete: SetNull)
  stateId                          String?
  zipCode                          String?
  latitude                         Float?
  longitude                        Float?
  imageUrl                         String?
  imageMediaId                     String?
  dataAiHint                       String?
  documentsUrl                     String?
  visits                           Int                  @default(0)
  isFeaturedOnMarketplace          Boolean              @default(false)
  marketplaceAnnouncementTitle     String?
  softCloseEnabled                 Boolean              @default(false)
  softCloseMinutes                 Int?                 @default(2)
  automaticBiddingEnabled          Boolean              @default(false)
  allowInstallmentBids             Boolean              @default(true)
  silentBiddingEnabled             Boolean              @default(false)
  allowMultipleBidsPerUser         Boolean              @default(true)
  sellingBranch                    String?
  estimatedRevenue                 Float?
  achievedRevenue                  Float?
  totalHabilitatedUsers            Int?
  judicialProcess                  JudicialProcess?     @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId                String?
  court                            Court?               @relation(fields: [courtId], references: [id])
  courtId                          String?
  district                         JudicialDistrict?    @relation(fields: [districtId], references: [id])
  districtId                       String?
  branch                           JudicialBranch?      @relation(fields: [branchId], references: [id])
  branchId                         String?
  additionalTriggers               Json?
  bids                             Bid[]
  auctionStages                    AuctionStage[]
  habilitations                    AuctionHabilitation[]
  createdAt                        DateTime             @default(now())
  updatedAt                        DateTime             @updatedAt
}

model AuctionHabilitation {
  id         String   @id @default(uuid())
  userId     String
  auctionId  String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction    Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  approvedAt DateTime @default(now())

  @@unique([userId, auctionId])
}


model AuctionStage {
    id String @id @default(uuid())
    auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
    auctionId String
    name String
    startDate DateTime
    endDate DateTime
    evaluationValue Float?

    // Para preços por etapa
    lotDetails LotAuctionStageDetails[]
}


model Lot {
  id                    String                   @id @default(uuid())
  publicId              String                   @unique
  auction               Auction                  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId             String
  slug                  String?
  number                String?
  title                 String
  description           String?                  @db.Text
  price                 Float
  initialPrice          Float?
  secondInitialPrice    Float?
  bidIncrementStep      Float?
  status                String                   @default("EM_BREVE")
  bidsCount             Int                      @default(0)
  views                 Int                      @default(0)
  isFeatured            Boolean                  @default(false)
  isExclusive           Boolean                  @default(false)
  discountPercentage    Int?
  additionalTriggers    Json?
  imageUrl              String?
  imageMediaId          String?
  galleryImageUrls      Json?
  mediaItemIds          Json?
  type                  String
  category              LotCategory              @relation(fields: [categoryId], references: [id])
  categoryId            String
  subcategory           Subcategory?             @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  subcategoryId         String?
  sellerId              String?
  seller                Seller?                  @relation(fields: [sellerId], references: [id])
  auctioneerId          String?
  auctioneer            Auctioneer?              @relation(fields: [auctioneerId], references: [id])
  city                  City?                    @relation(fields: [cityId], references: [id], onDelete: SetNull)
  cityId                String?
  state                 State?                   @relation(fields: [stateId], references: [id], onDelete: SetNull)
  stateId               String?
  cityName              String?
  stateUf               String?
  latitude              Float?
  longitude             Float?
  mapAddress            String?
  mapEmbedUrl           String?
  mapStaticImageUrl     String?
  endDate               DateTime?
  auctionDate           DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate      DateTime?
  condition             String?
  dataAiHint            String?
  
  winner                User?                    @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId              String?
  winningBidTermUrl     String?

  allowInstallmentBids  Boolean                  @default(false)
  isRelisted            Boolean                  @default(false)
  relistCount           Int                      @default(0)
  originalLotId         String?                  @unique
  originalLot           Lot?                     @relation("LotRelist", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot           Lot?                     @relation("LotRelist")
  bids                  Bid[]
  questions             LotQuestion[]
  reviews               Review[]
  bens                  LotBens[]
  wins                  UserWin[]
  maxBids               UserLotMaxBid[]

  stageDetails          LotAuctionStageDetails[]
  
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
}

// Join table for Lots and Bens (Many-to-Many)
model LotBens {
  lot     Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId   String
  bem     Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId   String
  
  @@id([lotId, bemId])
}

model LotAuctionStageDetails {
  id             String  @id @default(uuid())
  lot            Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId          String
  stage          AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)
  stageId        String
  initialBid     Float?
  bidIncrement   Float?
  
  @@unique([lotId, stageId])
}


model Bid {
  id             String   @id @default(uuid())
  lot              Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId            String
  auction          Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId        String
  bidder           User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId         String
  bidderDisplay    String?
  amount           Float
  timestamp        DateTime @default(now())
}

model UserWin {
  id                 String             @id @default(uuid())
  lot                Lot                @relation(fields: [lotId], references: [id])
  lotId              String
  user               User               @relation("WinningUser", fields: [userId], references: [id]) // Renomeada a relação
  userId             String
  winningBidAmount   Float
  winDate            DateTime           @default(now())
  paymentStatus      String
  invoiceUrl         String?
  installments       InstallmentPayment[]
}

model InstallmentPayment {
  id                String   @id @default(uuid())
  userWin           UserWin  @relation(fields: [userWinId], references: [id])
  userWinId         String
  installmentNumber Int
  amount            Float
  dueDate           DateTime
  status            String   @default("PENDENTE") // PENDENTE, PAGO, ATRASADO
  paymentDate       DateTime?
  paymentMethod     String?
  transactionId     String?
}

// =================================================================
// MODELOS DE SUPORTE
// =================================================================

model Review {
  id               String   @id @default(uuid())
  lot              Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId            String
  auctionId        String
  userId           String
  userDisplayName  String
  rating           Int
  comment          String   @db.Text
  createdAt        DateTime @default(now())
}

model LotQuestion {
  id                       String    @id @default(uuid())
  lot                      Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId                    String
  auctionId                String
  user                     User      @relation("AskedBy", fields: [userId], references: [id])
  userId                   String
  userDisplayName          String
  questionText             String    @db.Text
  answerText               String?   @db.Text
  isPublic                 Boolean   @default(true)
  answeredByUser           User?     @relation("AnsweredBy", fields: [answeredByUserId], references: [id])
  answeredByUserId         String?
  answeredByUserDisplayName String?
  answeredAt               DateTime?
  createdAt                DateTime  @default(now())
}


model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model UserDocument {
  id               String       @id @default(uuid())
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  documentType     DocumentType @relation(fields: [documentTypeId], references: [id])
  documentTypeId   String
  status           String       @default("PENDING_ANALYSIS")
  fileUrl          String
  fileName         String?
  rejectionReason  String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@unique([userId, documentTypeId])
}

model MediaItem {
  id                  String  @id @default(uuid())
  fileName            String
  storagePath         String
  title               String?
  altText             String?
  caption             String?
  description         String? @db.Text
  mimeType            String
  sizeBytes           Int?
  urlOriginal         String
  urlThumbnail        String?
  urlMedium           String?
  urlLarge            String?
  linkedLotIds        Json?
  judicialProcessId   String?
  dataAiHint          String?
  uploadedBy          User?   @relation("UploadedBy", fields: [uploadedByUserId], references: [id])
  uploadedByUserId    String?
  uploadedAt          DateTime @default(now())
}
