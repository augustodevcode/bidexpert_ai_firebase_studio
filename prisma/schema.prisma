// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// =============================================
// ENUMS
// =============================================
enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
  RELISTADO // Novo status
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  REJECTED_DOCUMENTS
  HABILITADO
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

// =============================================
// MODELS
// =============================================

model PlatformSettings {
  id                                String                  @id @default("global")
  siteTitle                          String?
  siteTagline                        String?
  logoUrl                            String?
  faviconUrl                         String?
  galleryImageBasePath               String
  storageProvider                    String                  @default("local") // 'local' or 'firebase'
  firebaseStorageBucket              String?
  activeThemeName                    String?
  themes                             Json?
  platformPublicIdMasks              Json?
  homepageSections                   Json?
  mentalTriggerSettings              Json?
  sectionBadgeVisibility             Json?
  mapSettings                        Json?
  searchPaginationType               String                  @default("loadMore") // 'loadMore' or 'numberedPages'
  searchItemsPerPage                 Int                     @default(12)
  searchLoadMoreCount                Int                     @default(12)
  showCountdownOnLotDetail           Boolean                 @default(true)
  showCountdownOnCards               Boolean                 @default(true)
  showRelatedLotsOnLotDetail         Boolean                 @default(true)
  relatedLotsCount                   Int                     @default(5)
  defaultUrgencyTimerHours           Int?
  variableIncrementTable             Json?
  biddingSettings                    Json?
  paymentGatewaySettings             Json?
  defaultListItemsPerPage            Int?                    @default(10)
  updatedAt                          DateTime?               @updatedAt
}

model Role {
  id              String         @id @default(uuid())
  name            String         @unique
  nameNormalized  String         @unique
  description     String?
  permissions     Json?          @default("[]")
  users           UsersOnRoles[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model State {
  id              String             @id @default(uuid())
  name            String
  uf              String             @unique
  slug            String             @unique
  cityCount       Int                @default(0)
  cities          City[]
  judicialDistricts JudicialDistrict[]
  auctions        Auction[]
  lots            Lot[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model City {
  id        String    @id @default(uuid())
  name      String
  slug      String
  stateId   String
  state     State     @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateUf   String?
  ibgeCode  String?   @unique
  lotCount  Int       @default(0)
  auctions  Auction[]
  lots      Lot[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model LotCategory {
  id                   String              @id @default(uuid())
  name                 String              @unique
  slug                 String              @unique
  description          String?             @db.Text
  hasSubcategories     Boolean?
  iconName             String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintIcon       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  subcategories      Subcategory[]
  auctions           Auction[]
  lots               Lot[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model Subcategory {
  id               String       @id @default(uuid())
  name             String
  slug             String       @unique
  parentCategoryId String
  parentCategory   LotCategory  @relation(fields: [parentCategoryId], references: [id])
  description      String?      @db.Text
  displayOrder     Int          @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  lots             Lot[]
  bens             Bem[]
}

model DocumentTemplate {
  id        String               @id @default(uuid())
  name      String               @unique
  type      DocumentTemplateType
  content   String?              @db.Text
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentType {
  id          String         @id @default(uuid())
  name        String         @unique
  description String?
  isRequired  Boolean        @default(true)
  appliesTo   String // e.g., "PHYSICAL,LEGAL"
  userDocs    UserDocument[]
}

model DirectSaleOffer {
  id                  String                @id @default(uuid())
  publicId            String                @unique
  title               String
  description         String?               @db.Text
  offerType           DirectSaleOfferType
  price               Decimal?              @db.Decimal(15, 2)
  minimumOfferPrice   Decimal?              @db.Decimal(15, 2)
  status              DirectSaleOfferStatus @default(ACTIVE)
  category            LotCategory           @relation(fields: [categoryId], references: [id])
  categoryId          String
  seller              Seller                @relation(fields: [sellerId], references: [id])
  sellerId            String
  sellerName          String?
  sellerLogoUrl       String?
  dataAiHintSellerLogo String?
  locationCity        String?
  locationState       String?
  imageUrl            String?
  imageMediaId        String?
  dataAiHint          String?
  galleryImageUrls    Json?
  mediaItemIds        Json?
  itemsIncluded       Json?
  views               Int                   @default(0)
  expiresAt           DateTime?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model Court {
  id                String             @id @default(uuid())
  name              String             @unique
  slug              String             @unique
  stateUf           String
  website           String?
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model JudicialDistrict {
  id          String             @id @default(uuid())
  name        String
  slug        String             @unique
  courtId     String
  court       Court              @relation(fields: [courtId], references: [id])
  stateId     String
  state       State              @relation(fields: [stateId], references: [id])
  zipCode     String?
  branches    JudicialBranch[]
  auctions    Auction[]
  judicialProcesses JudicialProcess[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model JudicialBranch {
  id                String             @id @default(uuid())
  name              String
  slug              String             @unique
  districtId        String
  district          JudicialDistrict   @relation(fields: [districtId], references: [id])
  contactName       String?
  phone             String?
  email             String?
  sellers           Seller[]
  auctions          Auction[]
  judicialProcesses JudicialProcess[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model JudicialProcess {
  id                String           @id @default(uuid())
  publicId          String           @unique
  processNumber     String
  isElectronic      Boolean          @default(true)
  courtId           String
  court             Court            @relation(fields: [courtId], references: [id])
  districtId        String
  district          JudicialDistrict @relation(fields: [districtId], references: [id])
  branchId          String
  branch            JudicialBranch   @relation(fields: [branchId], references: [id])
  sellerId          String?
  seller            Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties           JudicialParty[]
  bens              Bem[]
  auctions          Auction[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model JudicialParty {
  id             String           @id @default(uuid())
  processId      String
  process        JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)
  name           String
  documentNumber String?
  partyType      ProcessPartyType
}

model Seller {
  id                  String             @id @default(uuid())
  publicId            String             @unique
  slug                String             @unique
  name                String             @unique
  contactName         String?
  email               String?
  phone               String?
  address             String?
  city                String?
  state               String?
  zipCode             String?
  website             String?
  logoUrl             String?
  logoMediaId         String?
  dataAiHintLogo      String?
  description         String?            @db.Text
  userId              String?            @unique
  user                User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  isJudicial          Boolean            @default(false)
  judicialBranchId    String?
  judicialBranch      JudicialBranch?    @relation(fields: [judicialBranchId], references: [id])
  auctions            Auction[]
  bens                Bem[]
  lots                Lot[]
  directSaleOffers    DirectSaleOffer[]
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model Auctioneer {
  id                  String    @id @default(uuid())
  publicId            String    @unique
  slug                String    @unique
  name                String
  registrationNumber  String?
  contactName         String?
  email               String?   @unique
  phone               String?
  address             String?
  city                String?
  state               String?
  zipCode             String?
  website             String?
  logoUrl             String?
  logoMediaId         String?
  dataAiHintLogo      String?
  description         String?   @db.Text
  userId              String?   @unique
  user                User?     @relation(fields: [userId], references: [id])
  auctions            Auction[]
  lots                Lot[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Auction {
  id                           String                 @id @default(uuid())
  publicId                       String                 @unique
  slug                           String                 @unique
  title                          String
  description                    String?                @db.Text
  status                         AuctionStatus          @default(RASCUNHO)
  auctionDate                    DateTime?
  endDate                        DateTime?
  totalLots                      Int                    @default(0)
  categoryId                     String?
  category                       LotCategory?           @relation(fields: [categoryId], references: [id])
  auctioneerId                   String?
  auctioneer                     Auctioneer?            @relation(fields: [auctioneerId], references: [id])
  sellerId                       String?
  seller                         Seller?                @relation(fields: [sellerId], references: [id])
  judicialProcessId              String?
  judicialProcess                JudicialProcess?       @relation(fields: [judicialProcessId], references: [id])
  courtId                        String?
  court                          Court?                 @relation(fields: [courtId], references: [id])
  districtId                     String?
  district                       JudicialDistrict?      @relation(fields: [districtId], references: [id])
  branchId                       String?
  branch                         JudicialBranch?        @relation(fields: [branchId], references: [id])
  cityId                         String?
  city                           City?                  @relation(fields: [cityId], references: [id], onDelete: SetNull)
  stateId                        String?
  state                          State?                 @relation(fields: [stateId], references: [id], onDelete: SetNull)
  latitude                       Float?
  longitude                      Float?
  address                        String?
  onlineUrl                      String?
  participation                  AuctionParticipation?  @default(ONLINE)
  auctionType                      AuctionType?
  auctionMethod                  AuctionMethod?         @default(STANDARD)
  imageUrl                       String?
  imageMediaId                   String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  automaticBiddingEnabled        Boolean                @default(false)
  silentBiddingEnabled           Boolean                @default(false)
  allowMultipleBidsPerUser       Boolean                @default(true)
  allowInstallmentBids           Boolean                @default(true)
  softCloseEnabled               Boolean                @default(false)
  softCloseMinutes               Int                    @default(2)
  isFeaturedOnMarketplace        Boolean                @default(false)
  marketplaceAnnouncementTitle   String?
  visits                         Int                    @default(0)
  estimatedRevenue               Decimal?               @db.Decimal(15, 2)
  achievedRevenue                Decimal?               @db.Decimal(15, 2)
  totalHabilitatedUsers          Int?                   @default(0)
  additionalTriggers             Json?
  decrementAmount                Decimal?               @db.Decimal(15, 2)
  decrementIntervalSeconds       Int?
  floorPrice                     Decimal?               @db.Decimal(15, 2)
  autoRelistSettings             Json?
  createdAt                      DateTime               @default(now())
  updatedAt                      DateTime               @updatedAt
  lots                           Lot[]
  bids                           Bid[]
  auctionStages                  AuctionStage[]
  habilitations                  AuctionHabilitation[]
}

model AuctionStage {
  id              String                   @id @default(uuid())
  auctionId       String
  auction         Auction                  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  name            String
  startDate       DateTime
  endDate         DateTime
  evaluationValue Decimal?                 @db.Decimal(15, 2)
  lotDetails      LotAuctionStageDetails[]

  @@unique([auctionId, name])
}

model LotAuctionStageDetails {
  lotId           String
  lot             Lot         @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionStageId  String
  auctionStage    AuctionStage @relation(fields: [auctionStageId], references: [id], onDelete: Cascade)
  initialBid      Decimal?     @db.Decimal(15, 2)
  bidIncrement    Decimal?     @db.Decimal(10, 2)
  reservePrice    Decimal?     @db.Decimal(15, 2)
  evaluationValue Decimal?     @db.Decimal(15, 2)

  @@id([lotId, auctionStageId])
}

model Lot {
  id                   String                   @id @default(uuid())
  publicId             String                   @unique
  auctionId            String
  auction              Auction                  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  slug                 String?                  @unique
  number               String?
  title                String
  description          String?                  @db.Text
  price                Decimal                  @default(0.00) @db.Decimal(15, 2)
  status               LotStatus                @default(EM_BREVE)
  bidsCount            Int                      @default(0)
  views                Int                      @default(0)
  isFeatured           Boolean                  @default(false)
  isExclusive          Boolean                  @default(false)
  discountPercentage   Int?
  additionalTriggers   Json?
  imageUrl             String?
  imageMediaId         String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  inheritedMediaFromBemId String?
  /// ID do Bem de onde as mídias são herdadas
  type                 String // Categoria denormalizada
  categoryId           String
  category             LotCategory              @relation(fields: [categoryId], references: [id])
  subcategoryId        String?
  subcategory          Subcategory?             @relation(fields: [subcategoryId], references: [id])
  auctionName          String?
  sellerId             String?
  seller               Seller?                  @relation(fields: [sellerId], references: [id])
  sellerName           String?
  auctioneerId         String?
  auctioneer           Auctioneer?              @relation(fields: [auctioneerId], references: [id])
  cityId               String?
  city                 City?                    @relation(fields: [cityId], references: [id], onDelete: SetNull)
  stateId              String?
  state                State?                   @relation(fields: [stateId], references: [id], onDelete: SetNull)
  cityName             String?
  stateUf              String?
  latitude             Float?
  longitude            Float?
  mapAddress           String?
  mapEmbedUrl          String?
  mapStaticImageUrl    String?
  endDate              DateTime?
  auctionDate          DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate    DateTime?
  condition            String?
  dataAiHint           String?
  winnerId             String?
  winner               User?                    @relation("WonLots", fields: [winnerId], references: [id], onDelete: SetNull)
  winningBidTermUrl    String?
  allowInstallmentBids Boolean                  @default(false)
  bids                 Bid[]
  userMaxBids          UserLotMaxBid[]
  userWins             UserWin[]
  bens                 LotBens[]
  stageDetails         LotAuctionStageDetails[]

  // Campos que foram movidos para LotAuctionStageDetails
  // initialPrice       Decimal?                 @db.Decimal(15, 2)
  // secondInitialPrice Decimal?                 @db.Decimal(15, 2)
  // bidIncrementStep   Decimal?                 @db.Decimal(10, 2)
  // evaluationValue    Decimal?                 @db.Decimal(15, 2)
  // reservePrice       Decimal?                 @db.Decimal(15, 2)

  // Relist fields
  originalLotId      String?
  originalLot        Lot?                     @relation("RelistHistory", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLots       Lot[]                    @relation("RelistHistory")
  relistCount        Int                      @default(0)
  isRelisted         Boolean                  @default(false)

  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt

  @@index([auctionId, number])
}

model LotBens {
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  bem       Bem      @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId     String
  createdAt DateTime @default(now())

  @@id([lotId, bemId])
}

model Bem {
  id                           String    @id @default(uuid())
  publicId                     String    @unique
  title                        String
  description                  String?   @db.Text
  status                       BemStatus @default(DISPONIVEL)
  categoryId                   String
  category                     LotCategory @relation(fields: [categoryId], references: [id])
  subcategoryId                String?
  subcategory                  Subcategory? @relation(fields: [subcategoryId], references: [id])
  judicialProcessId            String?
  judicialProcess              JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  sellerId                     String?
  seller                       Seller?   @relation(fields: [sellerId], references: [id])
  evaluationValue              Decimal?  @db.Decimal(15, 2)
  imageUrl                     String?
  imageMediaId                 String?
  galleryImageUrls             Json?
  mediaItemIds                 Json?
  dataAiHint                   String?
  locationCity                 String?
  locationState                String?
  address                      String?
  latitude                     Float?
  longitude                    Float?
  createdAt                    DateTime  @default(now())
  updatedAt                    DateTime  @updatedAt
  lots                         LotBens[]

  // Veículos
  plate                 String?
  make                  String?
  model                 String?
  version               String?
  year                  Int?
  modelYear             Int?
  mileage               Int?
  color                 String?
  fuelType              String?
  transmissionType      String?
  bodyType              String?
  vin                   String?   @unique
  renavam               String?   @unique
  enginePower           String?
  numberOfDoors         Int?
  vehicleOptions        String?   @db.Text
  detranStatus          String?
  debts                 String?   @db.Text
  runningCondition      String?
  bodyCondition         String?
  tiresCondition        String?
  hasKey                Boolean?

  // Imóveis
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  area                       Decimal?  @db.Decimal(15, 2)
  totalArea                  Decimal?  @db.Decimal(15, 2)
  builtArea                  Decimal?  @db.Decimal(15, 2)
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?   @db.Text
  infrastructure             String?   @db.Text
  condoDetails               String?   @db.Text
  improvements               String?   @db.Text
  topography                 String?
  liensAndEncumbrances       String?   @db.Text
  propertyDebts              String?   @db.Text
  unregisteredRecords        String?   @db.Text
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  amenities                  Json?

  // Eletrônicos
  brand                 String?
  serialNumber          String?
  itemCondition         String?
  specifications        String?   @db.Text
  includedAccessories   String?   @db.Text
  batteryCondition      String?
  hasInvoice            Boolean?
  hasWarranty           Boolean?
  repairHistory         String?   @db.Text

  // Eletrodomésticos
  applianceCapacity   String?
  voltage             String?
  applianceType       String?
  additionalFunctions String?

  // Máquinas e Equipamentos
  hoursUsed             Int?
  engineType            String?
  capacityOrPower       String?
  maintenanceHistory    String?   @db.Text
  installationLocation  String?
  compliesWithNR        String?
  operatingLicenses     String?

  // Semoventes (Livestock)
  breed                 String?
  age                   String?
  sex                   String? // 'Macho' ou 'Fêmea'
  weight                String?
  individualId          String? // Brinco, registro, etc.
  purpose               String? // Corte, leiteiro, reprodutor, etc.
  sanitaryCondition     String?
  vaccinationStatus     String?
  lineage               String? // Pedigree
  isPregnant            Boolean?
  specialSkills         String?
  gtaDocument           String?
  breedRegistryDocument String?

  // Móveis
  furnitureType String?
  material      String?
  style         String?
  dimensions    String?
  pieceCount    Int?

  // Joias
  jewelryType           String?
  metal                 String?
  gemstones             String?
  totalWeight           String?
  jewelrySize           String?
  authenticityCertificate String?

  // Obras de Arte e Antiguidades
  workType   String?
  artist     String?
  period     String?
  technique  String?
  provenance String?

  // Embarcações
  boatType         String?
  boatLength       String?
  hullMaterial     String?
  onboardEquipment String?

  // Alimentos
  productName       String?
  quantity          String?
  packagingType     String?
  expirationDate    DateTime?
  storageConditions String?

  // Metais Preciosos e Pedras
  preciousMetalType String?
  purity            String?

  // Bens Florestais
  forestGoodsType  String?
  volumeOrQuantity String?
  species          String?
  dofNumber        String?
}

model Bid {
  id            String   @id @default(uuid())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId      String
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
}

model UserWin {
  id                String        @id @default(uuid())
  lot               Lot           @relation(fields: [lotId], references: [id])
  lotId             String        @unique
  user              User          @relation(fields: [userId], references: [id])
  userId            String
  winningBidAmount  Decimal       @db.Decimal(15, 2)
  winDate           DateTime      @default(now())
  paymentStatus     PaymentStatus @default(PENDENTE)
  invoiceUrl        String?
}

model MediaItem {
  id                   String           @id @default(uuid())
  fileName             String
  storagePath          String
  title                String?
  altText              String?
  caption              String?
  description          String?          @db.Text
  mimeType             String
  sizeBytes            Int?
  urlOriginal          String
  urlThumbnail         String?
  urlMedium            String?
  urlLarge             String?
  linkedLotIds         Json?
  judicialProcessId    String?
  judicialProcess      JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  dataAiHint           String?
  uploadedByUserId     String
  uploadedBy           User             @relation(fields: [uploadedByUserId], references: [id])
  uploadedAt           DateTime         @default(now())
}

model UserDocument {
  id                String             @id @default(uuid())
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  documentType      DocumentType       @relation(fields: [documentTypeId], references: [id])
  documentTypeId    String
  status            UserDocumentStatus @default(PENDING_ANALYSIS)
  fileUrl           String
  fileName          String?
  rejectionReason   String?            @db.Text
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@unique([userId, documentTypeId])
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Review {
    id String @id @default(uuid())
    lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
    lotId String
    auctionId String
    userId String
    user User @relation(fields: [userId], references: [id])
    userDisplayName String
    rating Int
    comment String @db.Text
    createdAt DateTime @default(now())
}

model LotQuestion {
    id String @id @default(uuid())
    lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
    lotId String
    auctionId String
    userId String
    user User @relation(fields: [userId], references: [id])
    userDisplayName String
    questionText String @db.Text
    answerText String? @db.Text
    answeredByUserId String?
    answeredByUserDisplayName String?
    answeredAt DateTime?
    isPublic Boolean @default(true)
    createdAt DateTime @default(now())
}

model UserLotMaxBid {
    id String @id @default(uuid())
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
    lotId String
    maxAmount Decimal @db.Decimal(15, 2)
    isActive Boolean @default(true)
    createdAt DateTime @default(now())
    
    @@unique([userId, lotId])
}

model User {
  id                  String                 @id @default(uuid())
  email               String                 @unique
  password            String?
  fullName            String?
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType            @default(PHYSICAL)
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  roles               UsersOnRoles[]
  bids                Bid[]
  wins                UserWin[]              @relation("WonLots")
  maxBids             UserLotMaxBid[]
  documents           UserDocument[]
  notifications       Notification[]
  mediaItems          MediaItem[]
  reviews             Review[]
  questions           LotQuestion[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  habilitations       AuctionHabilitation[]
}

model UsersOnRoles {
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
    roleId    String
    assignedAt DateTime @default(now())
    assignedBy String

    @@id([userId, roleId])
}

model AuctionHabilitation {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  auction   Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId String
  createdAt DateTime @default(now())
  
  @@unique([userId, auctionId])
}

model VehicleMake {
    id      String @id @default(uuid())
    name    String @unique
    slug    String @unique
    models  VehicleModel[]
}

model VehicleModel {
    id      String @id @default(uuid())
    name    String
    slug    String
    makeId  String
    make    VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)
    
    @@unique([makeId, name])
}
