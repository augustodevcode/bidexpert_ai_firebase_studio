// prisma/schema.prisma
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// ===================================
// ENUMS
// ===================================

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

enum DirectSaleOfferStatus {
  RASCUNHO
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}


// ===================================
// MODELS (Ordered by dependency)
// ===================================

// --- Base Models (No or Few Dependencies) ---

model PlatformSettings {
  id                             String  @id @default("global")
  siteTitle                      String?
  siteTagline                    String?
  logoUrl                        String?
  faviconUrl                     String?
  galleryImageBasePath           String?
  storageProvider                String? @default("local")
  firebaseStorageBucket          String?
  activeThemeName                String?
  themes                         Json?
  platformPublicIdMasks          Json?
  homepageSections               Json?
  mentalTriggerSettings          Json?
  sectionBadgeVisibility         Json?
  mapSettings                      Json?
  searchPaginationType           String? @default("loadMore")
  searchItemsPerPage             Int?    @default(12)
  searchLoadMoreCount            Int?    @default(12)
  showCountdownOnLotDetail       Boolean? @default(true)
  showCountdownOnCards           Boolean? @default(true)
  showRelatedLotsOnLotDetail     Boolean? @default(true)
  relatedLotsCount               Int?    @default(5)
  defaultUrgencyTimerHours       Int?
  variableIncrementTable         Json?
  biddingSettings                Json?
  paymentGatewaySettings         Json?
  defaultListItemsPerPage        Int?    @default(10)
  updatedAt                      DateTime? @updatedAt
}

model State {
  id        String             @id @default(uuid())
  name      String
  uf        String             @unique
  slug      String             @unique
  cityCount Int?               @default(0)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  cities    City[]
  districts JudicialDistrict[]
  auctions  Auction[]
}

model Role {
  id             String         @id @default(uuid())
  name           String
  nameNormalized String         @unique
  description    String?
  permissions    Json?
  users          UsersOnRoles[]
  createdAt      DateTime?      @default(now())
  updatedAt      DateTime?      @updatedAt
}

model LotCategory {
  id                   String            @id @default(uuid())
  name                 String
  slug                 String            @unique
  description          String?           @db.VarChar(500)
  hasSubcategories     Boolean?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintIcon       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime?         @default(now())
  updatedAt            DateTime?         @updatedAt
  lots                 Lot[]
  bens                 Bem[]
  subcategories        Subcategory[]
  auctions             Auction[]
  directSaleOffers     DirectSaleOffer[]
}

model DocumentType {
  id          String         @id @default(uuid())
  name        String
  description String?
  isRequired  Boolean        @default(true)
  appliesTo   String?
  userDocs    UserDocument[]
}

model DocumentTemplate {
  id        String               @id @default(uuid())
  name      String
  type      DocumentTemplateType
  content   String?              @db.Text
  createdAt DateTime?            @default(now())
  updatedAt DateTime?            @updatedAt
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Court {
  id                String             @id @default(uuid())
  name              String
  slug              String?
  stateUf           String?
  website           String?
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]          @relation("AuctionCourt")
  createdAt         DateTime?          @default(now())
  updatedAt         DateTime?          @updatedAt
}

model VehicleMake {
  id     String         @id @default(uuid())
  name   String         @unique
  slug   String         @unique
  models VehicleModel[]
}

// --- Dependent Models ---

model Subcategory {
  id                 String      @id @default(uuid())
  name               String
  slug               String?
  parentCategoryId   String
  description        String?     @db.VarChar(500)
  displayOrder       Int?        @default(0)
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  lots               Lot[]
  bens               Bem[]
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)

  @@index([parentCategoryId])
}

model VehicleModel {
  id     String      @id @default(uuid())
  name   String
  slug   String?
  makeId String
  make   VehicleMake @relation(fields: [makeId], references: [id])

  @@unique([name, makeId])
  @@index([makeId])
}

model City {
  id        String    @id @default(uuid())
  name      String
  slug      String?
  stateId   String
  stateUf   String?
  ibgeCode  String?   @unique
  lotCount  Int?      @default(0)
  state     State     @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots      Lot[]
  auctions  Auction[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([stateId])
}

model JudicialDistrict {
  id                String           @id @default(uuid())
  name              String
  slug              String           @unique
  courtId           String?
  stateId           String?
  zipCode           String?
  court             Court?           @relation(fields: [courtId], references: [id])
  state             State?           @relation(fields: [stateId], references: [id])
  branches          JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]        @relation("AuctionDistrict")
  createdAt         DateTime?        @default(now())
  updatedAt         DateTime?        @updatedAt

  @@index([courtId])
  @@index([stateId])
}

model JudicialBranch {
  id                String              @id @default(uuid())
  name              String
  slug              String              @unique
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  district          JudicialDistrict?   @relation(fields: [districtId], references: [id])
  judicialProcesses JudicialProcess[]
  auctions          Auction[]           @relation("AuctionBranch")
  seller            Seller?
  createdAt         DateTime?           @default(now())
  updatedAt         DateTime?           @updatedAt

  @@index([districtId])
}

// --- Core Models with Interdependencies ---

model User {
  id                         String                @id @default(uuid())
  email                      String                @unique
  password                   String?
  fullName                   String?
  habilitationStatus         UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType                AccountType           @default(PHYSICAL)
  avatarUrl                  String?
  dataAiHint                 String?
  sellerId                   String?
  createdAt                  DateTime              @default(now())
  updatedAt                  DateTime              @updatedAt
  roles                      UsersOnRoles[]
  bids                       Bid[]
  wins                       UserWin[]
  wonLots                    Lot[]                 @relation("WonLots")
  documents                  UserDocument[]
  notifications              Notification[]
  habilitations              AuctionHabilitation[]
  maxBids                    UserLotMaxBid[]
  uploadedMedia              MediaItem[]           @relation("UploadedBy")
  seller                     Seller?               @relation("SellerUser")
  auctioneer                 Auctioneer?           @relation("AuctioneerUser")
  cpf                        String?
  rgNumber                   String?
  rgIssuer                   String?
  rgIssueDate                DateTime?
  rgState                    String?
  dateOfBirth                DateTime?
  cellPhone                  String?
  homePhone                  String?
  gender                     String?
  profession                 String?
  nationality                String?
  maritalStatus              String?
  propertyRegime             String?
  spouseName                 String?
  spouseCpf                  String?
  zipCode                    String?
  street                     String?
  number                     String?
  complement                 String?
  neighborhood               String?
  city                       String?
  state                      String?
  optInMarketing             Boolean?              @default(false)
  razaoSocial                String?
  cnpj                       String?
  inscricaoEstadual          String?
  website                    String?
  responsibleName            String?
  responsibleCpf             String?
  badges                     Json?
}

model Auctioneer {
  id                   String    @id @default(uuid())
  publicId             String?   @unique
  slug                 String?   @unique
  name                 String
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?   @db.Text
  userId               String?   @unique
  user                 User?     @relation("AuctioneerUser", fields: [userId], references: [id])
  auctions             Auction[]
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model Seller {
  id                 String              @id @default(uuid())
  publicId           String?             @unique
  slug               String?             @unique
  name               String              @unique
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?             @db.Text
  userId             String?             @unique
  user               User?               @relation("SellerUser", fields: [userId], references: [id], onDelete: SetNull)
  isJudicial         Boolean             @default(false)
  judicialBranchId   String?             @unique
  judicialBranch     JudicialBranch?     @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  lots               Lot[]
  bens               Bem[]
  judicialProcesses  JudicialProcess[]
  auctions           Auction[]
  directSaleOffers   DirectSaleOffer[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model JudicialProcess {
  id                String           @id @default(uuid())
  publicId          String?          @unique
  processNumber     String
  isElectronic      Boolean          @default(true)
  courtId           String?
  districtId        String?
  branchId          String?
  sellerId          String?
  bens              Bem[]
  court             Court?           @relation(fields: [courtId], references: [id])
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch            JudicialBranch?  @relation(fields: [branchId], references: [id])
  seller            Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties           JudicialParty[]
  auctions          Auction[]
  createdAt         DateTime?        @default(now())
  updatedAt         DateTime?        @updatedAt

  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
  @@index([sellerId])
}

model Bem {
  id                         String   @id @default(uuid())
  publicId                   String?  @unique
  title                      String
  description                String?  @db.Text
  status                     String   @default("DISPONIVEL")
  categoryId                 String
  category                   LotCategory @relation(fields: [categoryId], references: [id])
  subcategoryId              String?
  subcategory                Subcategory? @relation(fields: [subcategoryId], references: [id])
  judicialProcessId          String?
  judicialProcess            JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  sellerId                   String?
  seller                     Seller?  @relation(fields: [sellerId], references: [id])
  evaluationValue            Decimal? @db.Decimal(15, 2)
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  plate                      String?
  make                       String?
  model                      String?
  version                    String?
  year                       Int?
  modelYear                  Int?
  mileage                    Int?
  color                      String?
  fuelType                   String?
  transmissionType           String?
  bodyType                   String?
  vin                        String?
  renavam                    String?
  enginePower                String?
  numberOfDoors              Int?
  vehicleOptions             String?
  detranStatus               String?
  debts                      String?
  runningCondition           String?
  bodyCondition              String?
  tiresCondition             String?
  hasKey                     Boolean?
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Decimal?
  builtArea                  Decimal?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?
  infrastructure             String?
  condoDetails               String?
  improvements               String?
  topography                 String?
  liensAndEncumbrances       String?
  propertyDebts              String?
  unregisteredRecords        String?
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  amenities                  Json?
  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String?
  includedAccessories        String?
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String?
  applianceCapacity          String?
  voltage                    String?
  applianceType              String?
  additionalFunctions        String?
  hoursUsed                  Int?
  engineType                 String?
  capacityOrPower            String?
  maintenanceHistory         String?
  installationLocation       String?
  compliesWithNR             String?
  operatingLicenses          String?
  breed                      String?
  age                        String?
  sex                        String?
  weight                     String?
  individualId               String?
  purpose                    String?
  sanitaryCondition          String?
  vaccinationStatus          String?
  lineage                    String?
  isPregnant                 Boolean?
  specialSkills              String?
  gtaDocument                String?
  breedRegistryDocument      String?
  furnitureType              String?
  material                   String?
  style                      String?
  dimensions                 String?
  pieceCount                 Int?
  jewelryType                String?
  metal                      String?
  gemstones                  String?
  totalWeight                String?
  jewelrySize                String?
  authenticityCertificate    String?
  workType                   String?
  artist                     String?
  period                     String?
  technique                  String?
  provenance                 String?
  boatType                   String?
  boatLength                 String?
  hullMaterial               String?
  onboardEquipment           String?
  productName                String?
  quantity                   String?
  packagingType              String?
  expirationDate             DateTime?
  storageConditions          String?
  preciousMetalType          String?
  purity                     String?
  forestGoodsType            String?
  volumeOrQuantity           String?
  species                    String?
  dofNumber                  String?
  lots                       LotBens[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@index([subcategoryId])
  @@index([judicialProcessId])
  @@index([sellerId])
}

model Auction {
  id                             String                @id @default(uuid())
  publicId                       String?               @unique
  slug                           String?               @unique
  title                          String
  description                    String?               @db.Text
  status                         AuctionStatus?        @default(RASCUNHO)
  auctionDate                    DateTime?
  endDate                        DateTime?
  auctioneerId                   String?
  sellerId                       String?
  categoryId                     String?
  auctionType                    String?
  participation                  String?
  auctionMethod                  String?
  onlineUrl                      String?
  address                        String?
  cityId                         String?
  stateId                        String?
  courtId                        String?
  districtId                     String?
  branchId                       String?
  zipCode                        String?
  latitude                       Float?
  longitude                      Float?
  imageUrl                       String?
  imageMediaId                   String?
  dataAiHint                     String?
  documentsUrl                   String?
  visits                         Int?                  @default(0)
  totalLots                      Int?                  @default(0)
  initialOffer                   Decimal?              @db.Decimal(15, 2)
  isFavorite                     Boolean?              @default(false)
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  automaticBiddingEnabled        Boolean?              @default(false)
  allowInstallmentBids           Boolean?              @default(true)
  silentBiddingEnabled           Boolean?              @default(false)
  allowMultipleBidsPerUser       Boolean?              @default(true)
  softCloseEnabled               Boolean?              @default(false)
  softCloseMinutes               Int?                  @default(2)
  estimatedRevenue               Decimal?              @db.Decimal(15, 2)
  achievedRevenue                Decimal?              @db.Decimal(15, 2)
  totalHabilitatedUsers          Int?                  @default(0)
  isFeaturedOnMarketplace        Boolean?              @default(false)
  marketplaceAnnouncementTitle   String?
  judicialProcessId              String?
  decrementAmount                Decimal?              @db.Decimal(15, 2)
  decrementIntervalSeconds       Int?
  floorPrice                     Decimal?              @db.Decimal(15, 2)
  autoRelistSettings             Json?
  bids                           Bid[]
  auctioneer                     Auctioneer?           @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  seller                         Seller?               @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  category                       LotCategory?          @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  city                           City?                 @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state                          State?                @relation(fields: [stateId], references: [id], onDelete: SetNull)
  judicialProcess                JudicialProcess?      @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  court                          Court?                @relation("AuctionCourt", fields: [courtId], references: [id], onDelete: SetNull)
  district                       JudicialDistrict?     @relation("AuctionDistrict", fields: [districtId], references: [id], onDelete: SetNull)
  branch                         JudicialBranch?       @relation("AuctionBranch", fields: [branchId], references: [id], onDelete: SetNull)
  habilitations                  AuctionHabilitation[]
  auctionStages                  AuctionStage[]
  lots                           Lot[]
  createdAt                      DateTime              @default(now())
  updatedAt                      DateTime              @updatedAt

  @@index([auctioneerId])
  @@index([sellerId])
  @@index([categoryId])
  @@index([cityId])
  @@index([stateId])
  @@index([judicialProcessId])
  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
}

model AuctionStage {
  id                      String    @id @default(uuid())
  auctionId               String
  name                    String
  startDate               DateTime
  endDate                 DateTime
  evaluationValue         Decimal?  @db.Decimal(15, 2)
  lotDetails              LotAuctionStageDetails[]
  auction                 Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  
  @@index([auctionId])
}


// --- Models with dependencies on the above ---

model Lot {
  id                         String   @id @default(uuid())
  publicId                   String?  @unique
  auctionId                  String
  slug                       String?
  number                     String?
  title                      String
  description                String?  @db.Text
  price                      Decimal  @db.Decimal(15, 2)
  initialPrice               Decimal? @db.Decimal(15, 2)
  secondInitialPrice         Decimal? @db.Decimal(15, 2)
  bidIncrementStep           Decimal? @db.Decimal(10, 2)
  status                     LotStatus @default(EM_BREVE)
  bidsCount                  Int?     @default(0)
  views                      Int?     @default(0)
  isFeatured                 Boolean? @default(false)
  isExclusive                Boolean? @default(false)
  isRelisted                 Boolean  @default(false)
  relistCount                Int      @default(0)
  discountPercentage         Int?
  additionalTriggers         Json?
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  inheritedMediaFromBemId    String?
  type                       String?
  categoryId                 String?
  category                   LotCategory? @relation(fields: [categoryId], references: [id])
  subcategoryId              String?
  subcategory                Subcategory? @relation(fields: [subcategoryId], references: [id])
  auctionName                String?
  sellerId                   String?
  seller                     Seller?    @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  auctioneerId               String?
  auctioneer                 Auctioneer? @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  cityId                     String?
  city                       City?      @relation(fields: [cityId], references: [id], onDelete: SetNull)
  stateId                    String?
  state                      State?     @relation(fields: [stateId], references: [id], onDelete: SetNull)
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?    @db.VarChar(500)
  mapStaticImageUrl          String?
  endDate                    DateTime?
  auctionDate                DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  dataAiHint                 String?
  winnerId                   String?
  winner                     User?      @relation("WonLots", fields: [winnerId], references: [id], onDelete: SetNull)
  winningBidTermUrl          String?
  allowInstallmentBids       Boolean?   @default(false)
  bids                       Bid[]
  userWins                   UserWin[]
  maxBids                    UserLotMaxBid[]
  bens                       LotBens[]
  originalLotId              String?     @unique
  originalLot                Lot?        @relation("RelistHistory", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot                Lot[]       @relation("RelistHistory")
  lotStageDetails            LotAuctionStageDetails[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  auction     Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@index([sellerId])
  @@index([auctioneerId])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([winnerId])
  @@index([auctionId])
}

model LotBens {
  lot    Lot  @relation(fields: [lotId], references: [id])
  lotId  String
  bem    Bem  @relation(fields: [bemId], references: [id])
  bemId  String

  @@id([lotId, bemId])
  @@index([bemId])
}


model UsersOnRoles {
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  role       Role      @relation(fields: [roleId], references: [id])
  roleId     String
  assignedAt DateTime  @default(now())
  assignedBy String
  @@id([userId, roleId])
  @@index([roleId])
}


model JudicialParty {
  id             String          @id @default(uuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@index([processId])
}

model DirectSaleOffer {
  id                   String                @id @default(uuid())
  publicId             String?               @unique
  title                String
  description          String?               @db.Text
  offerType            DirectSaleOfferType
  price                Decimal?              @db.Decimal(15, 2)
  minimumOfferPrice    Decimal?              @db.Decimal(15, 2)
  status               DirectSaleOfferStatus @default(ACTIVE)
  categoryId           String?
  category             LotCategory?          @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  sellerId             String?
  seller               Seller?               @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerName           String?
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int?                  @default(0)
  expiresAt            DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  @@index([categoryId])
  @@index([sellerId])
}

model Bid {
  id            String   @id @default(uuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([auctionId])
  @@index([bidderId])
}

model UserDocument {
    id              String      @id @default(uuid())
    userId          String
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    documentTypeId  String
    documentType    DocumentType @relation(fields: [documentTypeId], references: [id])
    status          UserDocumentStatus @default(PENDING_ANALYSIS)
    fileUrl         String
    fileName        String?
    rejectionReason String?     @db.Text
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    
    @@unique([userId, documentTypeId])
    @@index([documentTypeId])
}

model Notification {
    id        String   @id @default(uuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    message   String
    link      String?
    isRead    Boolean  @default(false)
    createdAt DateTime @default(now())

    @@index([userId])
}

model AuctionHabilitation {
    userId        String
    auctionId     String
    habilitatedAt DateTime @default(now())
    user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)

    @@id([userId, auctionId])
    @@index([auctionId])
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
  @@index([lotId])
}

model MediaItem {
    id                  String    @id @default(uuid())
    fileName            String    @unique
    storagePath         String
    title               String?
    altText             String?
    caption             String?
    description         String?   @db.Text
    mimeType            String
    sizeBytes           Int?
    urlOriginal         String
    urlThumbnail        String?
    urlMedium           String?
    urlLarge            String?
    linkedLotIds        Json?
    judicialProcessId   String?
    dataAiHint          String?
    uploadedByUserId    String
    uploadedBy          User      @relation("UploadedBy", fields: [uploadedByUserId], references: [id])
    uploadedAt          DateTime  @default(now())

    @@index([uploadedByUserId])
}

model UserWin {
    id               String     @id @default(uuid())
    lotId            String     @unique
    userId           String
    winningBidAmount Decimal    @db.Decimal(15, 2)
    winDate          DateTime   @default(now())
    paymentStatus    PaymentStatus
    invoiceUrl       String?
    lot              Lot        @relation(fields: [lotId], references: [id])
    user             User       @relation(fields: [userId], references: [id])
    installments     InstallmentPayment[]

    @@index([userId])
}

model InstallmentPayment {
    id                  String        @id @default(uuid())
    userWinId           String
    userWin             UserWin       @relation(fields: [userWinId], references: [id])
    installmentNumber   Int
    amount              Decimal       @db.Decimal(15, 2)
    dueDate             DateTime
    status              PaymentStatus @default(PENDENTE)
    paymentDate         DateTime?
    paymentMethod       String?
    transactionId       String?

    @@index([userWinId])
}

// Join table for Auction Stages and Lots (for price overrides)
model LotAuctionStageDetails {
  id             String  @id @default(uuid())
  lotId          String
  stageId        String
  lot            Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionStage   AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)
  initialBid     Decimal? @db.Decimal(15, 2)
  bidIncrement   Decimal? @db.Decimal(10, 2)

  @@unique([lotId, stageId])
  @@index([stageId])
}
