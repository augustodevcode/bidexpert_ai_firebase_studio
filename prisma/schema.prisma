// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ==============================================================================
// 1. User and Access Control
// ==============================================================================
model User {
  id                   String                 @id @default(uuid())
  email                String                 @unique
  fullName             String?
  password             String?
  roleId               String?
  habilitationStatus   UserHabilitationStatus? @default(PENDING_DOCUMENTS)
  status               String?                @default("ACTIVE")
  optInMarketing       Boolean?               @default(false)
  avatarUrl            String?
  dataAiHint           String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  
  // Custom fields from registration
  accountType         AccountType?      @default(PHYSICAL)
  cpf                 String?           @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  
  razaoSocial         String?
  cnpj                String?           @unique
  inscricaoEstadual   String?
  website             String?

  // Address
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?

  // Relationships
  role                 Role?                  @relation(fields: [roleId], references: [id], onDelete: SetNull)
  documents            UserDocument[]
  bids                 Bid[]
  wins                 UserWin[]
  reviews              Review[]
  questionsAsked       LotQuestion[]          @relation("QuestionAskedBy")
  questionsAnswered    LotQuestion[]          @relation("AnsweredBy")
  maxBids              UserLotMaxBid[]
  sellerProfile        Seller?
  auctioneerProfile    Auctioneer?
  uploadedMedia        MediaItem[]
  
  // Gamification
  badges Json?
}

model Role {
  id              String       @id @default(uuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?      @db.Text
  permissions     Permission[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  // Relationships
  users User[]
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?  @db.Text
  
  // Relationships
  roles Role[]
}


// ==============================================================================
// 2. Auctions and Lots
// ==============================================================================
model Auction {
  id                             String        @id @default(uuid())
  publicId                       String        @unique @default(uuid())
  title                          String
  description                    String?       @db.Text
  status                         AuctionStatus @default(RASCUNHO)
  auctionType                    AuctionType?
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json          @default("[]")
  automaticBiddingEnabled        Boolean?      @default(false)
  allowInstallmentBids           Boolean?      @default(false)
  softCloseEnabled               Boolean?      @default(false)
  softCloseMinutes               Int?          @default(2)
  silentBiddingEnabled           Boolean?      @default(false)
  allowMultipleBidsPerUser       Boolean?      @default(true)
  isFeaturedOnMarketplace        Boolean?      @default(false)
  marketplaceAnnouncementTitle   String?
  totalLots                      Int?          @default(0)
  visits                         Int?          @default(0)
  initialOffer                   Float?
  bidsCount                      Int?          @default(0)
  sellingBranch                  String?
  vehicleLocation                String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  estimatedRevenue               Float?
  achievedRevenue                Float?        @default(0)
  totalHabilitatedUsers          Int?          @default(0)
  additionalTriggers             String?
  dataAiHint                     String?
  city                           String?
  state                          String?
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt

  // Relationships
  categoryId      String?
  auctioneerId    String
  sellerId        String?
  judicialProcessId String?           @unique
  imageMediaId    String?           @unique

  category                       LotCategory?           @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  auctioneer                     Auctioneer             @relation(fields: [auctioneerId], references: [id])
  seller                         Seller?                @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  judicialProcess                JudicialProcess?       @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  image                          MediaItem?             @relation("AuctionImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  
  lots    Lot[]
  bids    Bid[]
  reviews Review[]
}


model Lot {
  id                   String    @id @default(uuid())
  publicId             String    @unique @default(uuid())
  number               String?
  title                String
  description          String?   @db.Text
  price                Float
  initialPrice         Float?
  secondInitialPrice   Float?
  bidIncrementStep     Float?
  status               LotStatus
  isFeatured           Boolean?  @default(false)
  isExclusive          Boolean?  @default(false)
  discountPercentage   Float?
  additionalTriggers   String[]
  endDate              DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate    DateTime?
  condition            String?
  dataAiHint           String?
  
  // Vehicle specific
  year                   Int?
  make                   String?
  model                  String?
  series                 String?
  stockNumber            String?
  sellingBranch          String?
  vin                    String?
  vinStatus              String?
  lossType               String?
  primaryDamage          String?
  titleInfo              String?
  titleBrand             String?
  startCode              String?
  hasKey                 Boolean?
  odometer               String?
  airbagsStatus          String?
  bodyStyle              String?
  engineDetails          String?
  transmissionType       String?
  driveLineType          String?
  fuelType               String?
  cylinders              String?
  restraintSystem        String?
  exteriorInteriorColor  String?
  options                String?
  manufacturedIn         String?
  vehicleClass           String?
  vehicleLocationInBranch String?
  laneRunNumber          String?
  aisleStall             String?
  actualCashValue        String?
  estimatedRepairCost    String?

  // Bidding and Stats
  views     Int? @default(0)
  bidsCount Int? @default(0)

  // Location
  latitude    Float?
  longitude   Float?
  mapAddress  String?
  mapEmbedUrl String?
  mapStaticImageUrl String?

  // Legal
  judicialProcessNumber String?
  courtDistrict        String?
  courtName            String?
  publicProcessUrl     String?
  propertyRegistrationNumber String?
  propertyLiens        String?
  knownDebts           String?
  additionalDocumentsInfo String?
  winningBidTermUrl    String?

  // Pricing details
  reservePrice    Float?
  evaluationValue Float?
  debtAmount      Float?
  itbiValue       Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  auctionId     String
  categoryId    String?
  subcategoryId String?
  stateId       String?
  cityId        String?
  imageMediaId  String?           @unique
  bemIds        Json
  mediaItemIds  Json
  
  auction        Auction           @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category       LotCategory?      @relation(fields: [categoryId], references: [id])
  subcategory    Subcategory?      @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  state          StateInfo?        @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city           CityInfo?         @relation(fields: [cityId], references: [id], onDelete: SetNull)
  image          MediaItem?        @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  bens           Bem[]
  
  bids           Bid[]
  wins           UserWin[]
  reviews        Review[]
  questions      LotQuestion[]
  maxBids        UserLotMaxBid[]
}

model UserWin {
  id                 String   @id @default(uuid())
  userId             String
  lotId              String
  winningBidAmount   Float
  winDate            DateTime @default(now())
  paymentStatus      PaymentStatus @default(PENDENTE)
  invoiceUrl         String?
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model Bid {
  id            String   @id @default(uuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())
  isProxyBid    Boolean? @default(false)

  // Relationships
  lot     Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}


// ==============================================================================
// 3. Profiles (Sellers, Auctioneers)
// ==============================================================================
model Seller {
  id                         String    @id @default(uuid())
  publicId                   String    @unique @default(uuid())
  name                       String    @unique
  slug                       String    @unique
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  description                String?   @db.Text
  memberSince                DateTime?
  rating                     Float?
  activeLotsCount            Int?
  totalSalesValue            Float?
  auctionsFacilitatedCount   Int?
  isJudicial                 Boolean?  @default(false)
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt

  // Relationships
  userId            String?         @unique
  user              User?           @relation(fields: [userId], references: [id])
  logoMediaId       String?         @unique
  logo              MediaItem?      @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  judicialBranchId  String?         @unique
  judicialBranch    JudicialBranch? @relation(fields: [judicialBranchId], references: [id])
  
  auctions           Auction[]
  directSaleOffers   DirectSaleOffer[]
  judicialProcesses  JudicialProcess[]
  bens               Bem[]
  blogPosts          BlogPost[]
}

model Auctioneer {
  id                     String    @id @default(uuid())
  publicId               String    @unique @default(uuid())
  name                   String    @unique
  slug                   String    @unique
  registrationNumber     String?
  contactName            String?
  email                  String?
  phone                  String?
  address                String?
  city                   String?
  state                  String?
  zipCode                String?
  website                String?
  description            String?   @db.Text
  memberSince            DateTime?
  rating                 Float?
  auctionsConductedCount Int?
  totalValueSold         Float?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  // Relationships
  userId      String?    @unique
  user        User?      @relation(fields: [userId], references: [id])
  logoMediaId String?    @unique
  logo        MediaItem? @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  
  auctions Auction[]
}

// ==============================================================================
// 4. Judicial Entities
// ==============================================================================
model Court {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String   @unique
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stateUf   String

  // Relationships
  stateId String
  state StateInfo @relation(fields: [stateId], references: [id])
  districts JudicialDistrict[]
  processes JudicialProcess[]
}

model JudicialDistrict {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  courtId   String
  court     Court      @relation(fields: [courtId], references: [id])
  stateId   String
  state     StateInfo  @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]
  
  @@unique([name, courtId])
}

model JudicialBranch {
  id           String   @id @default(uuid())
  name         String
  slug         String   @unique
  contactName  String?
  phone        String?
  email        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relationships
  districtId   String
  district     JudicialDistrict @relation(fields: [districtId], references: [id])
  processes    JudicialProcess[]
  seller       Seller?
}

model JudicialProcess {
  id                String    @id @default(uuid())
  publicId          String    @unique @default(uuid())
  processNumber     String    @unique
  isElectronic      Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relationships
  courtId   String
  districtId String
  branchId  String
  sellerId  String?
  
  court          Court            @relation(fields: [courtId], references: [id])
  district       JudicialDistrict @relation(fields: [districtId], references: [id])
  branch         JudicialBranch   @relation(fields: [branchId], references: [id])
  seller         Seller?          @relation(fields: [sellerId], references: [id])
  
  parties  ProcessParty[]
  bens     Bem[]
  auction  Auction?
}

model ProcessParty {
  id             String         @id @default(uuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType

  // Relationships
  process JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  
  @@unique([processId, name, partyType])
}


// ==============================================================================
// 5. Asset and Categorization Entities
// ==============================================================================
model Bem {
  id                         String    @id @default(uuid())
  publicId                   String    @unique @default(uuid())
  title                      String
  description                String?   @db.Text
  status                     BemStatus @default(DISPONIVEL)
  evaluationValue            Float?
  dataAiHint                 String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt

  // Location
  locationCity String?
  locationState String?
  address      String?
  latitude     Float?
  longitude    Float?

  // Vehicle
  plate               String?
  make                String?
  model               String?
  version             String?
  year                Int?
  modelYear           Int?
  mileage             Int?
  color               String?
  fuelType            String?
  transmissionType    String?
  bodyType            String?
  vin                 String?
  renavam             String?
  enginePower         String?
  numberOfDoors       Int?
  vehicleOptions      String?
  detranStatus        String?
  debts               String?
  runningCondition    String?
  bodyCondition       String?
  tiresCondition      String?
  hasKey              Boolean?

  // Real Estate
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?
  infrastructure             String?
  condoDetails               String?
  improvements               String?
  topography                 String?
  liensAndEncumbrances       String?
  propertyDebts              String?
  unregisteredRecords        String?
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  amenities                  Json?

  // Electronics
  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String?
  includedAccessories        String?
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String?

  // Appliances
  applianceCapacity   String?
  voltage             String?
  applianceType       String?
  additionalFunctions String?

  // Machinery
  hoursUsed           Int?
  engineType          String?
  capacityOrPower     String?
  maintenanceHistory  String?
  installationLocation String?
  compliesWithNR      String?
  operatingLicenses   String?

  // Livestock
  breed                   String?
  age                     String?
  sex                     String?
  weight                  String?
  individualId            String?
  purpose                 String?
  sanitaryCondition       String?
  lineage                 String?
  isPregnant              Boolean?
  specialSkills           String?
  gtaDocument             String?
  breedRegistryDocument   String?
  
  // Furniture
  furnitureType String?
  material      String?
  style         String?
  dimensions    String?
  pieceCount    Int?

  // Jewelry
  jewelryType             String?
  metal                   String?
  gemstones               String?
  totalWeight             String?
  jewelrySize             String?
  authenticityCertificate String?
  
  // Art & Antiques
  workType   String?
  artist     String?
  period     String?
  technique  String?
  provenance String?
  
  // Boats
  boatType         String?
  boatLength       String?
  hullMaterial     String?
  onboardEquipment String?
  
  // Foodstuffs
  productName       String?
  quantity          String?
  packagingType     String?
  expirationDate    DateTime?
  storageConditions String?
  
  // Precious Metals
  preciousMetalType String?
  purity            String?

  // Forest Goods
  forestGoodsType   String?
  volumeOrQuantity  String?
  species           String?
  dofNumber         String?

  // Relationships
  judicialProcessId String?
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  categoryId        String?
  category          LotCategory?     @relation(fields: [categoryId], references: [id])
  subcategoryId     String?
  subcategory       Subcategory?     @relation(fields: [subcategoryId], references: [id])
  sellerId          String?
  seller            Seller?          @relation(fields: [sellerId], references: [id])
  imageMediaId      String?          @unique
  image             MediaItem?       @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  lots              Lot[]
}

model LotCategory {
  id                 String  @id @default(uuid())
  name               String  @unique
  slug               String  @unique
  description        String? @db.Text
  itemCount          Int?    @default(0)
  hasSubcategories   Boolean? @default(false)
  logoUrl            String?
  logoMediaId        String? @unique
  coverImageUrl      String?
  coverImageMediaId  String? @unique
  megaMenuImageUrl   String?
  megaMenuImageMediaId String? @unique
  dataAiHintLogo     String?
  dataAiHintCover    String?
  dataAiHintMegaMenu String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  // Relationships
  logo             MediaItem?        @relation("CategoryLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  coverImage       MediaItem?        @relation("CategoryCover", fields: [coverImageMediaId], references: [id], onDelete: SetNull)
  megaMenuImage    MediaItem?        @relation("CategoryMegaMenu", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull)
  lots             Lot[]
  bens             Bem[]
  subcategories    Subcategory[]
  auctions         Auction[]
  directSaleOffers DirectSaleOffer[]
}

model Subcategory {
  id               String    @id @default(uuid())
  name             String
  slug             String    @unique
  description      String?   @db.Text
  itemCount        Int?      @default(0)
  displayOrder     Int?      @default(0)
  iconUrl          String?
  dataAiHintIcon   String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relationships
  parentCategoryId String
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots             Lot[]
  bens             Bem[]
  iconMediaId      String?     @unique
  icon             MediaItem?  @relation("SubcategoryIcon", fields: [iconMediaId], references: [id], onDelete: SetNull)

  @@unique([parentCategoryId, name])
}

model StateInfo {
  id        String             @id @default(uuid())
  uf        String             @unique
  name      String             @unique
  slug      String             @unique
  cityCount Int?               @default(0)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  // Relationships
  cities    CityInfo[]
  courts    Court[]
  districts JudicialDistrict[]
  lots      Lot[]
}

model CityInfo {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  stateId   String
  stateUf   String
  ibgeCode  String?
  lotCount  Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  state StateInfo @relation(fields: [stateId], references: [id])
  lots  Lot[]
  
  @@unique([name, stateId])
}


// ==============================================================================
// 6. Direct Sales
// ==============================================================================
model DirectSaleOffer {
  id                   String                @id @default(uuid())
  publicId             String                @unique @default(uuid())
  title                String
  description          String?               @db.Text
  offerType            DirectSaleOfferType
  status               DirectSaleOfferStatus
  price                Float?
  minimumOfferPrice    Float?
  locationCity         String?
  locationState        String?
  dataAiHint           String?
  dataAiHintSellerLogo String?
  proposalsCount       Int?                  @default(0)
  views                Int?                  @default(0)
  expiresAt            DateTime?
  itemsIncluded        Json?
  tags                 Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  // Relationships
  categoryId           String
  sellerId             String
  imageMediaId         String?               @unique

  category             LotCategory       @relation(fields: [categoryId], references: [id])
  seller               Seller            @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  image                MediaItem?        @relation("DirectSaleOfferImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
}

// ==============================================================================
// 7. Auxiliary Models (Media, Notifications, etc.)
// ==============================================================================
model MediaItem {
  id               String  @id @default(uuid())
  fileName         String
  storagePath      String  @unique
  title            String?
  altText          String?
  caption          String?
  description      String? @db.Text
  mimeType         String
  sizeBytes        Int
  dimensions       Json?
  urlOriginal      String  @db.Text
  urlThumbnail     String? @db.Text
  urlMedium        String? @db.Text
  urlLarge         String? @db.Text
  linkedLotIds     Json?
  dataAiHint       String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  uploadedById    String?
  uploadedBy      User?    @relation(fields: [uploadedById], references: [id], onDelete: SetNull)

  categoryAsLogo       LotCategory? @relation("CategoryLogo")
  categoryAsCover      LotCategory? @relation("CategoryCover")
  categoryAsMegaMenu   LotCategory? @relation("CategoryMegaMenu")
  
  auctionAsImage       Auction?     @relation("AuctionImage")
  lotAsImage           Lot?         @relation("LotImage")
  bemAsImage           Bem?         @relation("BemImage")
  
  sellerAsLogo         Seller?      @relation("SellerLogo")
  auctioneerAsLogo     Auctioneer?  @relation("AuctioneerLogo")

  subcategoryAsIcon    Subcategory? @relation("SubcategoryIcon")

  directSaleOfferAsImage   DirectSaleOffer? @relation("DirectSaleOfferImage")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model BlogPost {
  id           String    @id @default(uuid())
  title        String
  content      String    @db.Text
  slug         String    @unique
  authorId     String
  publishedAt  DateTime?
  isPublished  Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relationships
  author Seller @relation(fields: [authorId], references: [id])
}

model Review {
  id              String   @id @default(uuid())
  rating          Int
  comment         String?  @db.Text
  userId          String
  userDisplayName String
  lotId           String
  auctionId       String
  createdAt       DateTime @default(now())
  
  // Relationships
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot     Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                        String   @id @default(uuid())
  questionText              String   @db.Text
  answerText                String?  @db.Text
  isPublic                  Boolean  @default(true)
  userId                    String
  userDisplayName           String
  lotId                     String
  auctionId                 String
  answeredAt                DateTime?
  answeredByUserId          String?
  answeredByUserDisplayName String?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  // Relationships
  user                    User     @relation("QuestionAskedBy", fields: [userId], references: [id], onDelete: Cascade)
  lot                     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  answeredBy              User?    @relation("AnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lotId])
}


// ==============================================================================
// 8. Platform Settings
// ==============================================================================

model PlatformSettings {
  id                           String               @id @default("global")
  siteTitle                    String?
  siteTagline                  String?
  galleryImageBasePath         String?
  storageProvider              StorageProviderType? @default(local)
  firebaseStorageBucket        String?
  activeThemeName              String?
  themes                       Json?
  platformPublicIdMasks        Json?
  homepageSections             Json?
  mentalTriggerSettings        Json?
  sectionBadgeVisibility       Json?
  mapSettings                  Json?
  searchPaginationType         SearchPaginationType? @default(loadMore)
  searchItemsPerPage           Int?
  searchLoadMoreCount          Int?
  showCountdownOnLotDetail     Boolean?
  showCountdownOnCards         Boolean?
  showRelatedLotsOnLotDetail   Boolean?
  relatedLotsCount             Int?
  defaultUrgencyTimerHours     Int?
  variableIncrementTable       Json?
  biddingSettings              Json?
  defaultListItemsPerPage      Int?
  updatedAt                    DateTime             @updatedAt
}

// ==============================================================================
// Enums
// ==============================================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
  ABERTO // Legacy or alternative status for 'ABERTO_PARA_LANCES'
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ACTIVE
  SOLD
  EXPIRED
  PENDING_APPROVAL
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum StorageProviderType {
  local
  firebase
}

enum SearchPaginationType {
  loadMore
  numberedPages
}
