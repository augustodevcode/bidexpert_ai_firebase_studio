// Arquivo de schema do Prisma para o projeto BidExpert

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ==============================================================================
// 1. Modelos de Usuário e Autenticação
// ==============================================================================
model User {
  id                   String                 @id @default(cuid())
  email                String                 @unique
  fullName             String?
  password             String
  roleId               String?
  sellerId             String?                @unique
  habilitationStatus   UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType          AccountType            @default(PHYSICAL)
  badges               Json?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  
  // Campos de Pessoa Física
  cpf                String? @unique
  dateOfBirth        DateTime?
  
  // Campos de Pessoa Jurídica
  razaoSocial        String?
  cnpj               String? @unique
  inscricaoEstadual  String?
  website            String?
  
  // Campos de Contato e Endereço
  cellPhone          String?
  zipCode            String?
  street             String?
  number             String?
  complement         String?
  neighborhood       String?
  city               String?
  state              String?
  optInMarketing     Boolean? @default(false)
  
  // Relações
  role                   Role?                    @relation(fields: [roleId], references: [id], onDelete: SetNull)
  sellerProfile          Seller?                  @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  documents              UserDocument[]
  bids                   Bid[]
  wins                   UserWin[]
  notifications          Notification[]
  questions              LotQuestion[]            @relation("QuestionAskedBy")
  answers                LotQuestion[]            @relation("QuestionAnsweredBy")
  mediaItems             MediaItem[]
  maxBids                UserLotMaxBid[]
}


model Role {
  id            String       @id @default(cuid())
  name          String       @unique
  name_normalized String     @unique
  description   String?
  permissions   String[]
  users         User[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model UserDocument {
  id                String             @id @default(cuid())
  userId            String
  documentTypeId    String
  fileUrl           String?
  fileName          String?
  status            UserDocumentStatus @default(NOT_SENT)
  uploadDate        DateTime?
  analysisDate      DateTime?
  rejectionReason   String?
  
  // Relações
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType   DocumentType  @relation(fields: [documentTypeId], references: [id])
  
  @@unique([userId, documentTypeId])
}

model DocumentType {
  id             String         @id @default(cuid())
  name           String         @unique
  description    String?
  isRequired     Boolean        @default(false)
  appliesTo      String?        // Ex: 'PHYSICAL,LEGAL'
  allowedFormats String?
  displayOrder   Int            @default(0)
  userDocuments  UserDocument[]
}

// ==============================================================================
// 2. Modelos de Leilão e Lotes
// ==============================================================================

model Auction {
  id                    String        @id @default(cuid())
  publicId              String        @unique @default(cuid())
  title                 String
  description           String?       @db.Text
  status                AuctionStatus @default(RASCUNHO)
  tipoLeilao            TipoLeilao? // Corrigido de auctionType para tipoLeilao
  auctionDate           DateTime
  endDate               DateTime?
  auctionStages         Json?
  
  // Relações (Chaves Estrangeiras)
  categoryId            String?
  auctioneerId          String
  sellerId              String?
  judicialProcessId     String?       @unique // Corrigido
  imageMediaId          String?       @unique

  // Campos Adicionais
  city                          String?
  state                         String?
  documentsUrl                  String?
  sellingBranch                 String?
  automaticBiddingEnabled       Boolean?  @default(false)
  allowInstallmentBids          Boolean?  @default(false)
  softCloseEnabled              Boolean?  @default(false)
  softCloseMinutes              Int?
  estimatedRevenue              Float?
  achievedRevenue               Float?
  totalHabilitatedUsers         Int?
  isFeaturedOnMarketplace       Boolean?  @default(false)
  marketplaceAnnouncementTitle  String?
  additionalTriggers            String? // Comma-separated strings
  visits                        Int?      @default(0)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relações
  category              LotCategory?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  auctioneer            Auctioneer       @relation(fields: [auctioneerId], references: [id])
  seller                Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  judicialProcess       JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  image                 MediaItem?       @relation("AuctionImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  lots                  Lot[]
  bids                  Bid[]
  questions             LotQuestion[]
}

model Lot {
  id                    String      @id @default(cuid())
  publicId              String      @unique @default(cuid())
  number                String?
  title                 String
  description           String?     @db.Text
  status                LotStatus   @default(EM_BREVE)
  price                 Float       @default(0)
  initialPrice          Float?
  secondInitialPrice    Float?
  bidIncrementStep      Float?
  endDate               DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate     DateTime?
  condition             String?
  isFeatured            Boolean?    @default(false)
  isExclusive           Boolean?    @default(false)
  discountPercentage    Float?
  additionalTriggers    String?
  
  // Relações (Chaves Estrangeiras)
  auctionId             String
  categoryId            String?
  subcategoryId         String?
  stateId               String?
  cityId                String?
  imageMediaId          String?    @unique
  sellerId              String?
  auctioneerId          String?
  
  // Relações
  auction        Auction           @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category       LotCategory?      @relation(fields: [categoryId], references: [id])
  subcategory    Subcategory?      @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  state          StateInfo?        @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city           CityInfo?         @relation(fields: [cityId], references: [id], onDelete: SetNull)
  image          MediaItem?        @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  bens           Bem[]             
  mediaItems     MediaItem[]
  bids           Bid[]
  reviews        Review[]
  questions      LotQuestion[]
  wins           UserWin[]
  maxBids        UserLotMaxBid[]
  
  // Campos Adicionais
  views                 Int?         @default(0)
  bidsCount             Int?         @default(0)
  latitude              Float?
  longitude             Float?
  mapAddress            String?
  mapEmbedUrl           String?
  mapStaticImageUrl     String?
  judicialProcessNumber String?
  courtDistrict         String?
  courtName             String?
  publicProcessUrl      String?
  propertyRegistrationNumber String?
  propertyLiens         String?      @db.Text
  knownDebts            String?      @db.Text
  additionalDocumentsInfo String?  @db.Text
  reservePrice          Float?
  evaluationValue       Float?
  debtAmount            Float?
  itbiValue             Float?
  dataAiHint            String?

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Bem {
  id                   String        @id @default(cuid())
  publicId             String        @unique @default(cuid())
  title                String
  description          String?       @db.Text
  status               BemStatus     @default(DISPONIVEL)
  evaluationValue      Float?
  imageUrl             String?
  imageMediaId         String?       @unique
  dataAiHint           String?
  locationCity         String?
  locationState        String?
  address              String?
  latitude             Float?
  longitude            Float?
  
  // Relações (Chaves Estrangeiras)
  categoryId             String?
  subcategoryId          String?
  judicialProcessId      String?
  sellerId               String?

  // Relacionamentos
  category          LotCategory?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory       Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller            Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  image             MediaItem?       @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  lots              Lot[]            

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Bid {
  id             String    @id @default(cuid())
  lotId          String
  auctionId      String
  bidderId       String
  bidderDisplay  String
  amount         Float
  timestamp      DateTime  @default(now())
  
  // Relações
  lot     Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder  User    @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String       @id @default(cuid())
  lotId            String       @unique
  userId           String
  winningBidAmount Float
  winDate          DateTime     @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?
  
  // Relações
  lot   Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}


// ==============================================================================
// 3. Modelos de Entidades (Comitentes, Leiloeiros)
// ==============================================================================

model Seller {
  id                         String    @id @default(cuid())
  publicId                   String    @unique @default(cuid())
  name                       String
  slug                       String    @unique
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  description                String?   @db.Text
  isJudicial                 Boolean   @default(false)
  
  // Relações (Chaves Estrangeiras)
  userId                     String?   @unique
  logoMediaId                String?   @unique
  judicialBranchId           String?   @unique
  
  // Relações
  user                       User?
  logo                       MediaItem? @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  auctions                   Auction[]
  bens                       Bem[]
  directSaleOffers           DirectSaleOffer[]
  judicialBranch             JudicialBranch?
  judicialProcesses          JudicialProcess[]
  blogPosts                  BlogPost[]
  
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
}

model Auctioneer {
  id                    String    @id @default(cuid())
  publicId              String    @unique @default(cuid())
  name                  String
  slug                  String    @unique
  registrationNumber    String?
  contactName           String?
  email                 String?
  phone                 String?
  address               String?
  city                  String?
  state                 String?
  zipCode               String?
  website               String?
  description           String?   @db.Text
  
  // Relações (Chaves Estrangeiras)
  userId                String?   @unique
  logoMediaId           String?   @unique
  
  // Relações
  user                  User?
  logo                  MediaItem? @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  auctions              Auction[]
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}


// ==============================================================================
// 4. Modelos Judiciais
// ==============================================================================

model Court {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  stateUf     String
  website     String?
  
  // Relações
  districts JudicialDistrict[]
  processes JudicialProcess[]
  state     StateInfo        @relation(fields: [stateUf], references: [uf])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model JudicialDistrict {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  zipCode   String?
  
  // Relações (Chaves Estrangeiras)
  courtId   String
  stateId   String
  
  // Relações
  court     Court            @relation(fields: [courtId], references: [id])
  state     StateInfo        @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JudicialBranch {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  contactName String?
  phone       String?
  email       String?
  
  // Relações (Chaves Estrangeiras)
  districtId  String
  
  // Relações
  district  JudicialDistrict @relation(fields: [districtId], references: [id])
  processes JudicialProcess[]
  seller    Seller?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JudicialProcess {
  id             String    @id @default(cuid())
  publicId       String    @unique @default(cuid())
  processNumber  String    @unique
  isElectronic   Boolean   @default(true)
  
  // Relações (Chaves Estrangeiras)
  courtId        String
  districtId     String
  branchId       String
  sellerId       String?
  
  // Relações
  court      Court            @relation(fields: [courtId], references: [id])
  district   JudicialDistrict @relation(fields: [districtId], references: [id])
  branch     JudicialBranch   @relation(fields: [branchId], references: [id])
  seller     Seller?          @relation(fields: [sellerId], references: [id])
  parties    ProcessParty[]
  bens       Bem[]
  auctions   Auction[]
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ProcessParty {
  id             String         @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  
  // Relações
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}


// ==============================================================================
// 5. Modelos de Conteúdo e Outros
// ==============================================================================

model LotCategory {
  id                 String   @id @default(cuid())
  name               String   @unique
  slug               String   @unique
  description        String?
  hasSubcategories   Boolean  @default(false)
  itemCount          Int?     @default(0)
  
  // Relações (Chaves Estrangeiras)
  logoMediaId        String?  @unique
  coverImageMediaId  String?  @unique
  megaMenuImageMediaId String? @unique
  
  // Relações
  logo                MediaItem?    @relation("CategoryLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  coverImage          MediaItem?    @relation("CategoryCover", fields: [coverImageMediaId], references: [id], onDelete: SetNull)
  megaMenuImage       MediaItem?    @relation("CategoryMegaMenu", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull)
  lots                Lot[]
  subcategories       Subcategory[]
  bens                Bem[]
  directSaleOffers    DirectSaleOffer[]
  
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Subcategory {
  id                 String     @id @default(cuid())
  name               String
  slug               String     @unique
  description        String?
  displayOrder       Int        @default(0)
  
  // Relações (Chaves Estrangeiras)
  parentCategoryId   String
  iconMediaId        String?    @unique
  
  // Relações
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  icon               MediaItem?  @relation("SubcategoryIcon", fields: [iconMediaId], references: [id], onDelete: SetNull)
  lots               Lot[]
  bens               Bem[]
  
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}

model StateInfo {
  id        String   @id @default(cuid())
  name      String   @unique
  uf        String   @unique
  slug      String   @unique
  cityCount Int?     @default(0)
  
  // Relações
  cities    CityInfo[]
  courts    Court[]
  districts JudicialDistrict[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CityInfo {
  id        String    @id @default(cuid())
  name      String
  slug      String
  stateId   String
  stateUf   String
  ibgeCode  String?
  lotCount  Int?      @default(0)
  
  // Relações
  state     StateInfo @relation(fields: [stateId], references: [id])
  lots      Lot[]
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model DirectSaleOffer {
  id                     String                @id @default(cuid())
  publicId               String                @unique @default(cuid())
  title                  String
  description            String?               @db.Text
  offerType              DirectSaleOfferType
  status                 DirectSaleOfferStatus @default(PENDING_APPROVAL)
  price                  Float?
  minimumOfferPrice      Float?
  locationCity           String?
  locationState          String?
  expiresAt              DateTime?
  views                  Int?                  @default(0)
  proposalsCount         Int?                  @default(0)

  // Relações (Chaves Estrangeiras)
  categoryId             String
  sellerId               String
  imageMediaId           String?               @unique

  // Relações
  category             LotCategory       @relation(fields: [categoryId], references: [id])
  seller               Seller            @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  image                MediaItem?        @relation("DirectSaleOfferImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model MediaItem {
  id                   String        @id @default(cuid())
  fileName             String
  storagePath          String        @unique
  uploadedBy           String?
  title                String?
  altText              String?
  caption              String?
  description          String?
  mimeType             String
  sizeBytes            Int
  
  // Relações
  lotAsImage                 Lot?             @relation("LotImage")
  bemAsImage                 Bem?             @relation("BemImage")
  categoryAsLogo             LotCategory?     @relation("CategoryLogo")
  categoryAsCover            LotCategory?     @relation("CategoryCover")
  categoryAsMegaMenu         LotCategory?     @relation("CategoryMegaMenu")
  subcategoryAsIcon          Subcategory?     @relation("SubcategoryIcon")
  sellerAsLogo               Seller?          @relation("SellerLogo")
  auctioneerAsLogo           Auctioneer?      @relation("AuctioneerLogo")
  auctionAsImage             Auction?         @relation("AuctionImage")
  directSaleOfferAsImage     DirectSaleOffer? @relation("DirectSaleOfferImage")
  lots                       Lot[]
  
  uploadedAt           DateTime      @default(now())
}

model Review {
    id                String    @id @default(cuid())
    lotId             String
    auctionId         String
    userId            String
    userDisplayName   String
    rating            Int
    comment           String    @db.Text
    createdAt         DateTime  @default(now())

    // Relações
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                      String    @id @default(cuid())
  lotId                   String
  auctionId               String
  userId                  String
  userDisplayName         String
  questionText            String    @db.Text
  answerText              String?   @db.Text
  answeredAt              DateTime?
  answeredByUserId        String?
  answeredByUserDisplayName String?
  isPublic                Boolean   @default(true)
  createdAt               DateTime  @default(now())
  
  // Relações
  user                    User     @relation("QuestionAskedBy", fields: [userId], references: [id], onDelete: Cascade)
  answeredBy              User?    @relation("QuestionAnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)
  lot                     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model UserLotMaxBid {
    id         String   @id @default(cuid())
    userId     String
    lotId      String
    maxAmount  Float
    isActive   Boolean  @default(true)
    createdAt  DateTime @default(now())
    
    // Relações
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
    
    @@unique([userId, lotId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relações
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BlogPost {
  id             String    @id @default(cuid())
  title          String
  slug           String    @unique
  content        String    @db.Text
  authorId       String
  authorName     String
  publishedAt    DateTime?
  isPublished    Boolean   @default(false)
  tags           String[]
  
  // Relações
  author         Seller   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentTemplate {
  id        String              @id @default(cuid())
  name      String              @unique
  type      DocumentTemplateType
  content   String              @db.Text
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model PlatformSettings {
  id                              String   @id @default("global")
  siteTitle                       String?
  siteTagline                     String?
  galleryImageBasePath            String?
  storageProvider                 StorageProviderType @default(local)
  firebaseStorageBucket           String?
  activeThemeName                 String?
  themes                          Json?
  platformPublicIdMasks           Json?
  homepageSections                Json?
  mentalTriggerSettings           Json?
  sectionBadgeVisibility          Json?
  mapSettings                     Json?
  searchPaginationType            SearchPaginationType? @default(loadMore)
  searchItemsPerPage              Int?
  searchLoadMoreCount             Int?
  defaultListItemsPerPage         Int?
  showCountdownOnLotDetail        Boolean?
  showCountdownOnCards            Boolean?
  showRelatedLotsOnLotDetail      Boolean?
  relatedLotsCount                Int?
  variableIncrementTable          Json?
  biddingSettings                 Json?
  updatedAt                       DateTime @updatedAt
}

// ==============================================================================
// ENUMS
// ==============================================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO_PARA_LANCES
  ABERTO // sinônimo de ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum TipoLeilao {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum StorageProviderType {
  local
  firebase
}

enum SearchPaginationType {
  loadMore
  numberedPages
}

```
- src/components/ui/input.tsx:
```tsx
import * as React from 'react';

import { cn } from '@/lib/utils';

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Input.displayName = 'Input';

export { Input };
```
- src/app/admin/sellers/seller-form.tsx:
```tsx

// src/app/admin/sellers/seller-form.tsx
'use client';

import * as React from 'react';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm, useWatch } from 'react-hook-form';
import { Button } from '@/components/ui/button';
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/hooks/use-toast';
import { useRouter } from 'next/navigation';
import { sellerFormSchema, type SellerFormValues } from './seller-form-schema';
import type { SellerProfileInfo, MediaItem, JudicialBranch } from '@/types';
import { Loader2, Save, Users, Image as ImageIcon, Scale } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import Image from 'next/image';
import ChooseMediaDialog from '@/components/admin/media/choose-media-dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';

interface SellerFormProps {
  initialData?: SellerProfileInfo | null;
  judicialBranches: JudicialBranch[];
  onSubmitAction: (data: SellerFormValues) => Promise<{ success: boolean; message: string; sellerId?: string }>;
  formTitle: string;
  formDescription: string;
  submitButtonText: string;
  /** If provided, this will be the redirect path instead of the admin page. */
  successRedirectPath?: string;
}

export default function SellerForm({
  initialData,
  judicialBranches,
  onSubmitAction,
  formTitle,
  formDescription,
  submitButtonText,
  successRedirectPath
}: SellerFormProps) {
  const { toast } = useToast();
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = React.useState(false);
  const [isMediaDialogOpen, setIsMediaDialogOpen] = React.useState(false);

  const form = useForm<SellerFormValues>({
    resolver: zodResolver(sellerFormSchema),
    defaultValues: {
      name: initialData?.name || '',
      contactName: initialData?.contactName || '',
      email: initialData?.email || '',
      phone: initialData?.phone || '',
      address: initialData?.address || '',
      city: initialData?.city || '',
      state: initialData?.state || '',
      zipCode: initialData?.zipCode || '',
      website: initialData?.website || '',
      logoUrl: initialData?.logoUrl || '',
      dataAiHintLogo: initialData?.dataAiHintLogo || '',
      description: initialData?.description || '',
      judicialBranchId: initialData?.judicialBranchId || null,
      isJudicial: initialData?.isJudicial || false,
    },
  });

  const logoUrlPreview = useWatch({ control: form.control, name: 'logoUrl' });
  const isJudicial = useWatch({ control: form.control, name: 'isJudicial' });

  const handleMediaSelect = (selectedItems: Partial<MediaItem>[]) => {
    if (selectedItems.length > 0) {
      const selectedMediaItem = selectedItems[0];
      if (selectedMediaItem?.urlOriginal) {
        form.setValue('logoUrl', selectedMediaItem.urlOriginal);
      } else {
        toast({ title: "Seleção Inválida", description: "O item de mídia selecionado não possui uma URL válida.", variant: "destructive" });
      }
    }
    setIsMediaDialogOpen(false);
  };

  async function onSubmit(values: SellerFormValues) {
    setIsSubmitting(true);
    try {
      const result = await onSubmitAction(values);
      if (result.success) {
        toast({
          title: 'Sucesso!',
          description: result.message,
        });
        router.push(successRedirectPath || '/admin/sellers');
        router.refresh();
      } else {
        toast({
          title: 'Erro',
          description: result.message,
          variant: 'destructive',
        });
      }
    } catch (error) {
      toast({
        title: 'Erro Inesperado',
        description: 'Ocorreu um erro ao processar sua solicitação.',
        variant: 'destructive',
      });
      console.error("Unexpected error in seller form:", error);
    } finally {
      setIsSubmitting(false);
    }
  }

  return (
    <>
    <Card className="max-w-3xl mx-auto shadow-lg">
      <CardHeader>
        <CardTitle className="flex items-center gap-2"><Users className="h-6 w-6 text-primary" /> {formTitle}</CardTitle>
        <CardDescription>{formDescription}</CardDescription>
      </CardHeader>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)}>
          <CardContent className="space-y-6 bg-secondary/30 p-6">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Nome do Comitente/Empresa</FormLabel>
                  <FormControl>
                    <Input placeholder="Ex: Banco XYZ S.A., 1ª Vara Cível de Lagarto" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="isJudicial"
              render={({ field }) => (
                <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm bg-background">
                  <div className="space-y-0.5">
                    <FormLabel>É Comitente Judicial?</FormLabel>
                    <FormDescription>
                      Marque se este comitente é uma entidade judicial (Vara, Tribunal, etc).
                    </FormDescription>
                  </div>
                  <FormControl>
                    <Switch
                      checked={field.value}
                      onCheckedChange={field.onChange}
                    />
                  </FormControl>
                </FormItem>
              )}
            />
            {isJudicial && (
                <FormField
                    control={form.control}
                    name="judicialBranchId"
                    render={({ field }) => (
                    <FormItem>
                        <FormLabel className="flex items-center gap-2"><Scale className="h-4 w-4"/>Vara Judicial Vinculada (Opcional)</FormLabel>
                        <Select onValueChange={(value) => field.onChange(value === 'none' ? null : value)} value={field.value ?? 'none'}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Nenhuma vara judicial vinculada" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="none">Nenhuma</SelectItem>
                             {judicialBranches.map(branch => (
                                <SelectItem key={branch.id} value={branch.id}>{branch.name} - {branch.districtName}</SelectItem>
                              ))}
                          </SelectContent>
                        </Select>
                        <FormDescription>Se este comitente representa uma entidade judicial, vincule-a aqui.</FormDescription>
                        <FormMessage />
                    </FormItem>
                    )}
                />
            )}
            <div className="grid md:grid-cols-2 gap-6">
              <FormField
                control={form.control}
                name="contactName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Nome do Contato (Opcional)</FormLabel>
                    <FormControl>
                      <Input placeholder="Nome do responsável" {...field} value={field.value ?? ''}/>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email (Opcional)</FormLabel>
                    <FormControl>
                      <Input type="email" placeholder="contato@comitente.com" {...field} value={field.value ?? ''} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            <div className="grid md:grid-cols-2 gap-6">
              <FormField
                control={form.control}
                name="phone"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Telefone (Opcional)</FormLabel>
                    <FormControl>
                      <Input placeholder="(XX) XXXXX-XXXX" {...field} value={field.value ?? ''} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="website"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Website (Opcional)</FormLabel>
                    <FormControl>
                      <Input type="url" placeholder="https://www.comitente.com" {...field} value={field.value ?? ''} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
             <FormField
                control={form.control}
                name="address"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Endereço (Opcional)</FormLabel>
                    <FormControl>
                      <Input placeholder="Rua Exemplo, 123, Bairro" {...field} value={field.value ?? ''} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            <div className="grid md:grid-cols-3 gap-6">
              <FormField
                control={form.control}
                name="city"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Cidade (Opcional)</FormLabel>
                    <FormControl>
                      <Input placeholder="São Paulo" {...field} value={field.value ?? ''} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="state"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Estado/UF (Opcional)</FormLabel>
                    <FormControl>
                      <Input placeholder="SP" {...field} value={field.value ?? ''} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="zipCode"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>CEP (Opcional)</FormLabel>
                    <FormControl>
                      <Input placeholder="00000-000" {...field} value={field.value ?? ''} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            
            <FormItem>
              <FormLabel>Logo do Comitente</FormLabel>
              <div className="flex items-center gap-4">
                <div className="relative w-24 h-24 flex-shrink-0 bg-muted rounded-md overflow-hidden border">
                  {logoUrlPreview ? (
                    <Image src={logoUrlPreview} alt="Prévia do Logo" fill className="object-contain" data-ai-hint="previa logo comitente" />
                  ) : (
                    <div className="flex items-center justify-center h-full text-muted-foreground">
                      <ImageIcon className="h-8 w-8" />
                    </div>
                  )}
                </div>
                <div className="flex-grow space-y-2">
                  <Button type="button" variant="outline" onClick={() => setIsMediaDialogOpen(true)}>
                    {logoUrlPreview ? 'Alterar Logo' : 'Escolher da Biblioteca'}
                  </Button>
                  <FormField
                    control={form.control}
                    name="logoUrl"
                    render={({ field }) => (
                        <FormControl>
                            <Input type="url" placeholder="Ou cole a URL aqui" {...field} value={field.value ?? ""} className="text-xs h-8" />
                        </FormControl>
                    )}
                    />
                  <FormMessage />
                </div>
              </div>
            </FormItem>

            <FormField
              control={form.control}
              name="dataAiHintLogo"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Dica para IA (Logo - Opcional)</FormLabel>
                  <FormControl>
                    <Input placeholder="Ex: banco logo, empresa tecnologia" {...field} value={field.value ?? ''} />
                  </FormControl>
                   <FormDescription>Duas palavras chave para ajudar a IA encontrar uma imagem de placeholder, se a URL do logo não for fornecida.</FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Descrição/Observações (Opcional)</FormLabel>
                  <FormControl>
                    <Textarea placeholder="Detalhes adicionais sobre o comitente..." {...field} value={field.value ?? ''} rows={4} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </CardContent>
          <CardFooter className="flex justify-end gap-2 p-6 border-t">
            <Button type="button" variant="outline" onClick={() => router.push(successRedirectPath || '/admin/sellers')} disabled={isSubmitting}>
              Cancelar
            </Button>
            <Button type="submit" disabled={isSubmitting}>
              {isSubmitting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Save className="mr-2 h-4 w-4" />}
              {submitButtonText}
            </Button>
          </CardFooter>
        </form>
      </Form>
    </Card>
     <ChooseMediaDialog
        isOpen={isMediaDialogOpen}
        onOpenChange={setIsMediaDialogOpen}
        onMediaSelect={handleMediaSelect}
        allowMultiple={false}
      />
    </>
  );
}

```
- src/components/ui/table.tsx:
```tsx

import * as React from 'react';

import {cn} from '@/lib/utils';

const Table = React.forwardRef<HTMLTableElement, React.HTMLAttributes<HTMLTableElement>>(
  ({className, ...props}, ref) => (
    <div className="relative w-full overflow-auto">
      <table ref={ref} className={cn('w-full caption-bottom text-sm', className)} {...props} />
    </div>
  )
);
Table.displayName = 'Table';

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({className, ...props}, ref) => <thead ref={ref} className={cn('[&_tr]:border-b', className)} {...props} />);
TableHeader.displayName = 'TableHeader';

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({className, ...props}, ref) => (
  <tbody ref={ref} className={cn('[&_tr:last-child]:border-0', className)} {...props} />
));
TableBody.displayName = 'TableBody';

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({className, ...props}, ref) => (
  <tfoot
    ref={ref}
    className={cn('border-t bg-muted/50 font-medium [&>tr]:last:border-b-0', className)}
    {...props}
  />
));
TableFooter.displayName = 'TableFooter';

const TableRow = React.forwardRef<HTMLTableRowElement, React.HTMLAttributes<HTMLTableRowElement>>(
  ({className, ...props}, ref) => (
    <tr
      ref={ref}
      className={cn('border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted', className)}
      {...props}
    />
  )
);
TableRow.displayName = 'TableRow';

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({className, ...props}, ref) => (
  <th
    ref={ref}
    className={cn(
      'h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0',
      className
    )}
    {...props}
  />
));
TableHead.displayName = 'TableHead';

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({className, ...props}, ref) => (
  <td ref={ref} className={cn('p-4 align-middle [&:has([role=checkbox])]:pr-0', className)} {...props} />
));
TableCell.displayName = 'TableCell';

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({className, ...props}, ref) => (
  <caption ref={ref} className={cn('mt-4 text-sm text-muted-foreground', className)} {...props} />
));
TableCaption.displayName = 'TableCaption';

export {Table, TableHeader, TableBody, TableFooter, TableHead, TableRow, TableCell, TableCaption};

```