// prisma/schema.prisma

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider      = "prisma-client-js"
  // Adicionado debian-openssl-3.0.x para compatibilidade com o ambiente de produção
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

// ==============================================================================
// === ENUMS
// ==============================================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDENTE_DOCUMENTOS
  PENDING_ANALYSIS
  REJECTED_DOCUMENTS
  HABILITADO
  BLOCKED
}

enum DocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}


// ==============================================================================
// === AUTHENTICATION & AUTHORIZATION
// ==============================================================================

model Usuario {
  id                  String                   @id @default(uuid())
  email               String                   @unique
  password            String
  fullName            String?
  avatarUrl           String?
  dataAiHint          String?
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  roleId              String?
  perfil              Perfil?                  @relation(fields: [roleId], references: [id])
  sellerId            String?                  @unique
  vendedor            Vendedor?                @relation(fields: [sellerId], references: [id])
  lances              Lance[]
  arremates           Arremate[]
  documentos          DocumentoUsuario[]       @relation("UsuarioDocumentos")
  documentosAnalisado DocumentoUsuario[]       @relation("AnalistaDocumentos")
  notificacoes        Notificacao[]
  perguntas           QuestaoLote[]
  respostas           QuestaoLote[]            @relation("RespostasAdmin")
  avaliacoes          Avaliacao[]
  lancesMaximos       LanceMaximoUsuarioLote[]
  postsBlog           PostBlog[]
  vendasDiretas       VendaDireta[]
  vendedorInfo        Vendedor?                @relation("UsuarioVendedor")

  // Registration Fields
  accountType         AccountType?
  cpf                 String?
  dateOfBirth         DateTime?
  razaoSocial         String?
  cnpj                String?
  inscricaoEstadual   String?
  website             String?
  cellPhone           String?
  homePhone           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  
  optInMarketing      Boolean                  @default(false)
  habilitationStatus  UserHabilitationStatus   @default(PENDENTE_DOCUMENTOS)
  badges              String[]                 @default([])

  @@map("usuarios")
}

model DocumentoUsuario {
  id              String          @id @default(uuid())
  userId          String
  usuario         Usuario         @relation("UsuarioDocumentos", fields: [userId], references: [id])
  tipoDocumentoId String
  tipoDocumento   TipoDocumento   @relation(fields: [tipoDocumentoId], references: [id])
  fileUrl         String
  fileName        String
  status          DocumentStatus  @default(SUBMITTED)
  uploadDate      DateTime        @default(now())
  analysisDate    DateTime?
  rejectionReason String?
  analistaId      String?
  analista        Usuario?        @relation("AnalistaDocumentos", fields: [analistaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  
  @@unique([userId, tipoDocumentoId])
  @@map("documentos_usuarios")
}

model TipoDocumento {
  id              String              @id @default(uuid())
  name            String              @unique
  description     String?
  isRequired      Boolean             @default(false)
  appliesTo       String?             // e.g., "PHYSICAL,LEGAL"
  allowedFormats  String?             // e.g., "pdf,jpg,png"
  displayOrder    Int                 @default(0)
  documentos      DocumentoUsuario[]

  @@map("tipos_documento")
}

model Perfil {
  id              String        @id @default(uuid())
  name            String        @unique
  name_normalized String        @unique
  description     String?
  permissions     Permissao[]
  usuarios        Usuario[]

  @@map("perfis")
}

model Permissao {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  perfis      Perfil[]

  @@map("permissoes")
}

// ==============================================================================
// === AUCTION CORE MODELS
// ==============================================================================

model Leilao {
  id                String    @id @default(uuid())
  publicId          String    @unique @default(cuid())
  title             String
  description       String?   @db.Text
  status            AuctionStatus @default(RASCUNHO)
  auctionType       String?
  auctionDate       DateTime
  endDate           DateTime?
  city              String?
  state             String?
  imageUrl          String?
  imageMediaId      String?
  dataAiHint        String?
  documentsUrl      String?
  evaluationReportUrl String?
  auctionCertificateUrl String?
  sellingBranch     String?

  // Settings
  automaticBiddingEnabled Boolean @default(false)
  allowInstallmentBids    Boolean @default(false)
  softCloseEnabled        Boolean @default(false)
  softCloseMinutes        Int?    @default(2)
  silentBiddingEnabled    Boolean @default(false)
  allowMultipleBidsPerUser Boolean @default(true)


  // Financial & Analytics
  initialOffer        Float?
  estimatedRevenue    Float?
  achievedRevenue     Float?
  visits              Int?     @default(0)
  totalHabilitatedUsers Int?    @default(0)

  // Marketplace & Promotion
  isFeaturedOnMarketplace  Boolean?  @default(false)
  marketplaceAnnouncementTitle String?
  additionalTriggers      String? // Comma-separated strings

  // Relationships
  categoriaId         String
  categoria           CategoriaLote @relation(fields: [categoriaId], references: [id])
  leiloeiroId         String
  leiloeiro           Leiloeiro @relation(fields: [leiloeiroId], references: [id])
  sellerId          String?
  comitente         Vendedor? @relation(fields: [sellerId], references: [id])
  lotes             Lote[]
  lances            Lance[]
  perguntasLote     QuestaoLote[]
  avaliacoes        Avaliacao[]
  
  judicialProcessId String?
  processoJudicial  ProcessoJudicial? @relation(fields: [judicialProcessId], references: [id])

  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  etapas            Json? // JSON array of AuctionStage

  @@map("leiloes")
}


model Lote {
  id                      String      @id @default(uuid())
  publicId                String      @unique @default(cuid())
  number                  String?
  title                   String
  description             String?     @db.Text
  price                   Float       // Current price
  initialPrice            Float?      // Starting price for 1st auction
  secondInitialPrice      Float?      // Starting price for 2nd auction
  bidIncrementStep        Float?
  status                  LotStatus   @default(EM_BREVE)
  
  // Location
  cityId                  String?
  cidade                  Cidade?     @relation(fields: [cityId], references: [id])
  stateId                 String?
  estado                  Estado?     @relation(fields: [stateId], references: [id])
  
  // Category
  categoryId              String
  categoria               CategoriaLote  @relation(fields: [categoryId], references: [id])
  subcategoryId           String?
  subcategoria            Subcategoria?  @relation(fields: [subcategoryId], references: [id])

  // Media
  imageUrl                String?
  imageMediaId            String?
  dataAiHint              String?
  galleryImageUrls        Json? @default("[]")
  mediaItemIds            String[] @default([]) // Array of MediaItem IDs for gallery
  
  winningBidTermUrl       String?

  // Analytics
  views                   Int         @default(0)
  bidsCount               Int         @default(0)
  
  // Promotion
  isFeatured              Boolean?    @default(false)
  isExclusive             Boolean?    @default(false)
  discountPercentage      Int?
  additionalTriggers      Json?       @default("[]") // Array of strings like "URGENTE", "DESCONTO"

  // Location for Map
  latitude                Float?
  longitude               Float?
  mapAddress              String?
  mapEmbedUrl             String?
  mapStaticImageUrl       String?
  
  // Judicial Info (if applicable)
  judicialProcessNumber     String?
  courtDistrict             String?
  courtName                 String?
  publicProcessUrl          String?
  propertyRegistrationNumber String?
  propertyLiens             String? @db.Text
  knownDebts                String? @db.Text
  additionalDocumentsInfo   String? @db.Text
  
  // Values
  reservePrice            Float?
  evaluationValue         Float?
  debtAmount              Float?
  itbiValue               Float?
  
  // Dates
  endDate                 DateTime?
  lotSpecificAuctionDate  DateTime?
  secondAuctionDate       DateTime?
  
  condition               String?

  // Relationships
  auctionId               String
  leilao                  Leilao      @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bens                    Bem[]       @relation("BemParaLote")
  lances                  Lance[]
  arremates               Arremate[]
  perguntas               QuestaoLote[]
  avaliacoes              Avaliacao[]
  lancesMaximos           LanceMaximoUsuarioLote[]
  mediaItems              MediaItem[] @relation("LoteMediaItem")

  // Timestamps
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  
  @@map("lotes")
}


model CategoriaLote {
  id                    String        @id @default(uuid())
  name                  String        @unique
  slug                  String        @unique
  description           String?
  logoUrl               String?
  coverImageUrl         String?
  megaMenuImageUrl      String?
  dataAiHintLogo        String?
  dataAiHintCover       String?
  dataAiHintMegaMenu    String?
  itemCount             Int           @default(0)
  hasSubcategories      Boolean       @default(false)
  leiloes               Leilao[]
  lotes                 Lote[]
  bens                  Bem[]
  subcategorias         Subcategoria[]
  vendasDiretas         VendaDireta[]

  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  
  @@map("categorias_lote")
}

model Subcategoria {
  id              String          @id @default(uuid())
  name            String
  slug            String
  description     String?
  parentCategoryId String
  parentCategory  CategoriaLote   @relation(fields: [parentCategoryId], references: [id])
  displayOrder    Int             @default(0)
  iconUrl         String?
  iconMediaId     String?
  dataAiHintIcon  String?
  lotes           Lote[]
  bens            Bem[]
  itemCount       Int             @default(0)

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@unique([name, parentCategoryId])
  @@map("subcategorias")
}

model Lance {
  id            String    @id @default(uuid())
  lotId         String
  lote          Lote      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId     String
  leilao        Leilao    @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidderId      String
  licitante     Usuario   @relation(fields: [bidderId], references: [id])
  amount        Float
  timestamp     DateTime  @default(now())
  bidderDisplay String?

  @@map("lances")
}

model Arremate {
  id                String         @id @default(uuid())
  lotId             String         @unique
  lote              Lote           @relation(fields: [lotId], references: [id])
  userId            String
  usuario           Usuario        @relation(fields: [userId], references: [id])
  winningBidAmount  Float
  winDate           DateTime       @default(now())
  paymentStatus     PaymentStatus  @default(PENDENTE)
  invoiceUrl        String?
  
  @@map("arremates")
}

model Leiloeiro {
  id                      String     @id @default(uuid())
  publicId                String     @unique @default(cuid())
  slug                    String     @unique
  name                    String
  registrationNumber      String?
  contactName             String?
  email                   String?
  phone                   String?
  address                 String?
  city                    String?
  state                   String?
  zipCode                 String?
  website                 String?
  logoUrl                 String?
  dataAiHintLogo          String?
  description             String?    @db.Text
  memberSince             DateTime?
  rating                  Float?
  auctionsConductedCount  Int?
  totalValueSold          Float?
  userId                  String?    @unique
  usuario                 Usuario?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  leiloes                 Leilao[]

  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt

  @@map("leiloeiros")
}

model Vendedor {
  id                        String      @id @default(uuid())
  publicId                  String      @unique @default(cuid())
  slug                      String      @unique
  name                      String
  contactName               String?
  email                     String?
  phone                     String?
  address                   String?
  city                      String?
  state                     String?
  zipCode                   String?
  website                   String?
  logoUrl                   String?
  dataAiHintLogo            String?
  description               String?     @db.Text
  memberSince               DateTime?
  rating                    Float?
  activeLotsCount           Int?
  totalSalesValue           Float?
  auctionsFacilitatedCount  Int?
  userId                    String?     @unique
  usuario                   Usuario?    @relation("UsuarioVendedor", fields: [userId], references: [id], onDelete: SetNull)
  isJudicial                Boolean?    @default(false)
  judicialBranchId          String?     @unique
  varaJudicial              Vara?       @relation(fields: [judicialBranchId], references: [id])
  leiloes                   Leilao[]
  bens                      Bem[]
  vendasDiretas             VendaDireta[]
  processosJudiciais        ProcessoJudicial[]

  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt

  @@map("vendedores")
}

model LanceMaximoUsuarioLote {
  id          String   @id @default(uuid())
  userId      String
  usuario     Usuario  @relation(fields: [userId], references: [id])
  lotId       String
  lote        Lote     @relation(fields: [lotId], references: [id])
  maxAmount   Float
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, lotId])
  @@map("lances_maximos_usuario_lote")
}

// ==============================================================================
// === JUDICIAL ENTITIES
// ==============================================================================

model Tribunal {
  id        String            @id @default(uuid())
  name      String            @unique
  slug      String            @unique
  stateUf   String
  website   String?
  comarcas  Comarca[]
  processos ProcessoJudicial[]
  estado    Estado            @relation(fields: [stateUf], references: [uf])
  
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  
  @@map("tribunais")
}

model Comarca {
  id          String              @id @default(uuid())
  name        String
  slug        String
  courtId     String
  tribunal    Tribunal            @relation(fields: [courtId], references: [id])
  stateId     String
  estado      Estado              @relation(fields: [stateId], references: [id])
  zipCode     String?
  varas       Vara[]
  processos   ProcessoJudicial[]

  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  
  @@unique([name, courtId])
  @@map("comarcas")
}

model Vara {
  id              String                @id @default(uuid())
  name            String
  slug            String
  districtId      String
  comarca         Comarca               @relation(fields: [districtId], references: [id])
  contactName     String?
  phone           String?
  email           String?
  processos       ProcessoJudicial[]
  vendedor        Vendedor?

  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  @@unique([name, districtId])
  @@map("varas")
}

model ProcessoJudicial {
  id              String      @id @default(uuid())
  publicId        String      @unique @default(cuid())
  processNumber   String      @unique
  isElectronic    Boolean     @default(true)
  
  courtId         String
  tribunal        Tribunal    @relation(fields: [courtId], references: [id])
  districtId      String
  comarca         Comarca     @relation(fields: [districtId], references: [id])
  branchId        String
  vara            Vara        @relation(fields: [branchId], references: [id])

  sellerId        String?
  vendedor        Vendedor?   @relation(fields: [sellerId], references: [id])

  partes          ParteProcesso[]
  bens            Bem[]
  leiloes         Leilao[]

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@map("processos_judiciais")
}

model ParteProcesso {
  id              String      @id @default(uuid())
  processId       String
  processo        ProcessoJudicial @relation(fields: [processId], references: [id], onDelete: Cascade)
  name            String
  documentNumber  String?
  partyType       ProcessPartyType

  @@unique([processId, name, partyType])
  @@map("partes_processo")
}

model Bem {
  id                      String        @id @default(uuid())
  publicId                String        @unique @default(cuid())
  title                   String
  description             String?       @db.Text
  status                  BemStatus     @default(DISPONIVEL)
  evaluationValue         Float?
  
  // Location
  locationCity            String?
  locationState           String?
  address                 String?
  latitude                Float?
  longitude               Float?
  
  // Media
  imageUrl                String?
  imageMediaId            String?
  dataAiHint              String?
  galleryImageUrls        Json?         @default("[]")
  mediaItemIds            String[]      @default([])

  // Category
  categoryId              String
  category                CategoriaLote @relation(fields: [categoryId], references: [id])
  subcategoryId           String?
  subcategory             Subcategoria? @relation(fields: [subcategoryId], references: [id])
  
  // Relationships
  judicialProcessId       String?
  judicialProcess         ProcessoJudicial? @relation(fields: [judicialProcessId], references: [id])
  sellerId                String?
  seller                  Vendedor?     @relation(fields: [sellerId], references: [id])
  lotes                   Lote[]        @relation("BemParaLote")

  // Vehicle Specific Fields
  plate                   String?
  make                    String?
  model                   String?
  version                 String?
  year                    Int?
  modelYear               Int?
  mileage                 Int?
  color                   String?
  fuelType                String?
  transmissionType        String?
  bodyType                String?
  vin                     String?
  renavam                 String?
  enginePower             String?
  numberOfDoors           Int?
  vehicleOptions          String?
  detranStatus            String?
  debts                   String?
  runningCondition        String?
  bodyCondition           String?
  tiresCondition          String?
  hasKey                  Boolean?

  // Real Estate Specific Fields
  propertyType            String?
  propertyRegistrationNumber String?
  iptuNumber              String?
  isOccupied              Boolean?
  area                    Float?
  builtArea               Float?
  totalArea               Float?
  bedrooms                Int?
  suites                  Int?
  bathrooms               Int?
  parkingSpaces           Int?
  constructionType        String?
  finishes                String?
  infrastructure          String?
  condoDetails            String?
  improvements            String?
  topography              String?
  liensAndEncumbrances    String?
  propertyDebts           String?
  unregisteredRecords     String?
  hasHabiteSe             Boolean?
  zoningRestrictions      String?
  amenities               Json? @default("[]")

  // Electronics & Appliances Specific Fields
  brand                   String?
  serialNumber            String?
  itemCondition           String?
  specifications          String?
  includedAccessories     String?
  batteryCondition        String?
  hasInvoice              Boolean?
  hasWarranty             Boolean?
  repairHistory           String?
  applianceCapacity       String?
  voltage                 String?
  applianceType           String?
  additionalFunctions     String?

  // Machinery & Equipment Specific Fields
  hoursUsed               Int?
  engineType              String?
  capacityOrPower         String?
  maintenanceHistory      String?
  installationLocation    String?
  compliesWithNR          String?
  operatingLicenses       String?
  
  // Livestock Specific Fields
  breed                   String?
  age                     String?
  sex                     String?
  weight                  String?
  individualId            String?
  purpose                 String?
  sanitaryCondition       String?
  lineage                 String?
  isPregnant              Boolean?
  specialSkills           String?
  gtaDocument             String?
  breedRegistryDocument   String?

  // Timestamps
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt

  @@map("bens")
}

// ==============================================================================
// === OTHER PLATFORM MODELS
// ==============================================================================

model Notificacao {
  id        String   @id @default(uuid())
  userId    String
  usuario   Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())

  @@map("notificacoes")
}

model VendaDireta {
  id                  String                @id @default(uuid())
  publicId            String                @unique @default(cuid())
  title               String
  description         String?               @db.Text
  offerType           DirectSaleOfferType
  status              DirectSaleOfferStatus @default(PENDING_APPROVAL)
  price               Float?
  minimumOfferPrice   Float?
  
  locationCity        String?
  locationState       String?

  imageUrl            String?
  imageMediaId        String?
  dataAiHint          String?
  galleryImageUrls    Json? @default("[]")
  mediaItemIds        String[] @default([])

  itemsIncluded       Json? @default("[]")
  tags                Json? @default("[]")

  views               Int                   @default(0)
  proposalsCount      Int                   @default(0)
  
  expiresAt           DateTime?
  
  categoriaId         String
  categoria           CategoriaLote         @relation(fields: [categoriaId], references: [id])
  vendedorId          String
  vendedor            Vendedor              @relation(fields: [vendedorId], references: [id])
  imagemPrincipal     MediaItem?            @relation("VendaDiretaImagemPrincipal", fields: [imageMediaId], references: [id], onDelete: SetNull)

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  
  @@map("vendas_diretas")
}

model MediaItem {
  id              String      @id @default(uuid())
  fileName        String
  storagePath     String      @unique
  title           String
  altText         String?
  caption         String?
  description     String?
  mimeType        String
  sizeBytes       Int
  
  urlOriginal     String
  urlThumbnail    String?
  urlMedium       String?
  urlLarge        String?
  
  linkedLotIds    String[]    @default([])
  uploadedBy      String?
  dataAiHint      String?

  ofertasVendaDireta MediaItem[] @relation("VendaDiretaImagemPrincipal")
  lotes              Lote[]    @relation("LoteMediaItem")
  uploadedAt      DateTime    @default(now())

  @@map("media_items")
}

model PostBlog {
    id        String @id @default(uuid())
    title     String
    content   String @db.Text
    authorId  String
    author    Usuario @relation(fields: [authorId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    @@map("posts_blog")
}

model Contato {
    id        String @id @default(uuid())
    name      String
    email     String
    subject   String
    message   String @db.Text
    isRead    Boolean @default(false)
    createdAt DateTime @default(now())
    
    @@map("contatos")
}

model Avaliacao {
    id                  String @id @default(uuid())
    lotId               String
    lote                Lote @relation(fields: [lotId], references: [id])
    auctionId           String
    leilao              Leilao @relation(fields: [auctionId], references: [id])
    userId              String
    usuario             Usuario @relation(fields: [userId], references: [id])
    rating              Int
    comment             String? @db.Text
    userDisplayName     String
    createdAt           DateTime @default(now())
    
    @@map("avaliacoes")
}

model QuestaoLote {
    id              String @id @default(uuid())
    lotId           String
    lote            Lote @relation(fields: [lotId], references: [id])
    auctionId       String
    leilao          Leilao @relation(fields: [auctionId], references: [id])
    userId          String
    usuario         Usuario @relation(fields: [userId], references: [id])
    userDisplayName String
    questionText    String @db.Text
    answerText      String? @db.Text
    answeredAt      DateTime?
    answeredByUserId String?
    answeredByUserDisplayName String?
    isPublic        Boolean @default(true)
    createdAt       DateTime @default(now())
    
    answeredBy      Usuario? @relation("RespostasAdmin", fields: [answeredByUserId], references: [id])
    
    @@map("questoes_lote")
}

model TemplateDocumento {
  id        String   @id @default(uuid())
  name      String   @unique
  type      DocumentTemplateType
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("templates_documento")
}

model PlatformSettings {
  id              String @id @default("global")
  siteTitle       String
  siteTagline     String?
  
  // Storage & Media
  galleryImageBasePath String
  storageProvider   String // "local" or "firebase"
  firebaseStorageBucket String?
  
  // Appearance
  activeThemeName   String?
  themes            Json
  homepageSections  Json // Array of HomepageSectionConfig
  
  // Technical Settings
  platformPublicIdMasks Json
  mapSettings             Json
  biddingSettings         Json
  
  // Search & Display
  searchPaginationType    String // "loadMore" or "numberedPages"
  searchItemsPerPage      Int
  searchLoadMoreCount     Int
  showCountdownOnLotDetail Boolean @default(true)
  showCountdownOnCards     Boolean @default(true)
  showRelatedLotsOnLotDetail Boolean @default(true)
  relatedLotsCount        Int @default(5)
  defaultListItemsPerPage Int @default(10)
  
  // Business Logic
  mentalTriggerSettings Json
  sectionBadgeVisibility Json
  variableIncrementTable Json // Array of VariableIncrementRule
  
  updatedAt       DateTime @updatedAt
  
  @@map("configuracoes_plataforma")
}


// ==============================================================================
// === GEOGRAPHICAL MODELS
// ==============================================================================

model Estado {
  id        String      @id @default(uuid())
  name      String      @unique
  uf        String      @unique
  slug      String      @unique
  cityCount Int         @default(0)
  cidades   Cidade[]
  tribunais Tribunal[]
  comarcas  Comarca[]
  lotes     Lote[]
  
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("estados")
}

model Cidade {
  id        String    @id @default(uuid())
  name      String
  slug      String
  stateId   String
  estado    Estado  @relation(fields: [stateId], references: [id])
  stateUf   String
  ibgeCode  String?
  lotCount  Int       @default(0)
  lotes     Lote[]
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@unique([name, stateId])
  @@map("cidades")
}

```
- src/components/layout/admin-sidebar.tsx:
```tsx
// src/components/layout/admin-sidebar.tsx
'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { ListChecks, Package, Landmark, Users, Settings, LayoutDashboard, Gavel, Map, Building2, Library, ShieldCheck, Layers, Tv, ShoppingCart, Scale, FileText, Boxes, Rocket, FileUp, BarChart, BookOpen, UserCheck, MessageSquare, Files } from 'lucide-react';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';

const topLevelNavItems = [
  { title: 'Dashboard', href: '/admin/dashboard', icon: LayoutDashboard },
  { title: 'Auditório Virtual', href: '/live-dashboard', icon: Tv },
  { title: 'Wizard de Leilões', href: '/admin/wizard', icon: Rocket },
  { title: 'Importação CNJ', href: '/admin/import/cnj', icon: FileUp },
];

const auctionManagementItems = [
  { title: 'Leilões', href: '/admin/auctions', icon: Gavel },
  { title: 'Loteamento', href: '/admin/lotting', icon: Boxes },
  { title: 'Lotes', href: '/admin/lots', icon: Package },
  { title: 'Bens', href: '/admin/bens', icon: Package },
  { title: 'Venda Direta', href: '/admin/direct-sales', icon: ShoppingCart },
  { title: 'Categorias de Lotes', href: '/admin/categories', icon: ListChecks },
  { title: 'Subcategorias', href: '/admin/subcategories', icon: Layers },
];

const contentManagementItems = [
    { title: 'Blog', href: '/admin/blog', icon: BookOpen, disabled: true },
    { title: 'Biblioteca de Mídia', href: '/admin/media', icon: Library },
]

const judicialManagementItems = [
    { title: 'Tribunais', href: '/admin/courts', icon: Scale },
    { title: 'Comarcas', href: '/admin/judicial-districts', icon: Map },
    { title: 'Varas', href: '/admin/judicial-branches', icon: Building2 },
    { title: 'Processos', href: '/admin/judicial-processes', icon: FileText },
]

const platformManagementItems = [
  { title: 'Comitentes', href: '/admin/sellers', icon: Users },
  { title: 'Leiloeiros', href: '/admin/auctioneers', icon: Landmark },
  { title: 'Estados', href: '/admin/states', icon: Map },
  { title: 'Cidades', href: '/admin/cities', icon: Building2 },
  { title: 'Usuários', href: '/admin/users', icon: Users },
  { title: 'Habilitações', href: '/admin/habilitations', icon: UserCheck },
  { title: 'Templates de Documentos', href: '/admin/document-templates', icon: Files },
  { title: 'Mensagens de Contato', href: '/admin/contact-messages', icon: MessageSquare },
  { title: 'Perfis (Roles)', href: '/admin/roles', icon: ShieldCheck },
  { title: 'Relatórios', href: '/admin/reports', icon: BarChart },
  { title: 'Configurações', href: '/admin/settings', icon: Settings },
];

const NavButton = ({ item, pathname, onLinkClick }: { item: { href: string; title: string; icon: React.ElementType; disabled?: boolean }; pathname: string; onLinkClick?: () => void; }) => (
  <Button
    key={item.href}
    variant={pathname === item.href || (item.href !== '/admin/dashboard' && pathname.startsWith(item.href) && !item.disabled) ? 'secondary' : 'ghost'}
    className={cn(
      'w-full justify-start',
      (pathname === item.href || (item.href !== '/admin/dashboard' && pathname.startsWith(item.href)) && !item.disabled) && 'font-semibold text-primary hover:text-primary'
    )}
    asChild
    disabled={item.disabled}
    onClick={onLinkClick}
  >
    <Link href={item.disabled ? '#' : item.href}>
      <item.icon className="mr-2 h-4 w-4" />
      {item.title}
    </Link>
  </Button>
);

export default function AdminSidebar() {
  const pathname = usePathname();

  return (
    <aside className="sticky top-0 h-screen w-64 bg-background border-r flex flex-col">
      <div className="p-4 border-b">
        <Link href="/admin/dashboard" className="flex items-center space-x-2">
          <LayoutDashboard className="h-7 w-7 text-primary" />
          <span className="font-bold text-xl text-primary">BidExpert Admin</span>
        </Link>
      </div>
      <ScrollArea className="flex-1">
        <nav className="p-2 space-y-1">
          {topLevelNavItems.map((item) => <NavButton key={item.href} item={item} pathname={pathname} />)}
          
          <Accordion type="multiple" className="w-full" defaultValue={['auction-management', 'judicial-management', 'platform-management', 'content-management']}>
              <AccordionItem value="auction-management" className="border-b-0">
                  <AccordionTrigger className="text-xs font-semibold uppercase text-muted-foreground hover:no-underline rounded-md px-3 hover:bg-accent/50">Gestão de Leilões</AccordionTrigger>
                  <AccordionContent className="pt-1 space-y-1">
                      {auctionManagementItems.map((item) => <NavButton key={item.href} item={item} pathname={pathname} />)}
                  </AccordionContent>
              </AccordionItem>
               <AccordionItem value="content-management" className="border-b-0">
                  <AccordionTrigger className="text-xs font-semibold uppercase text-muted-foreground hover:no-underline rounded-md px-3 hover:bg-accent/50">Conteúdo e Mídia</AccordionTrigger>
                  <AccordionContent className="pt-1 space-y-1">
                      {contentManagementItems.map((item) => <NavButton key={item.href} item={item} pathname={pathname} />)}
                  </AccordionContent>
              </AccordionItem>
              <AccordionItem value="judicial-management" className="border-b-0">
                  <AccordionTrigger className="text-xs font-semibold uppercase text-muted-foreground hover:no-underline rounded-md px-3 hover:bg-accent/50">Gestão Judicial</AccordionTrigger>
                  <AccordionContent className="pt-1 space-y-1">
                      {judicialManagementItems.map((item) => <NavButton key={item.href} item={item} pathname={pathname} />)}
                  </AccordionContent>
              </AccordionItem>
              <AccordionItem value="platform-management" className="border-b-0">
                  <AccordionTrigger className="text-xs font-semibold uppercase text-muted-foreground hover:no-underline rounded-md px-3 hover:bg-accent/50">Gestão da Plataforma</AccordionTrigger>
                  <AccordionContent className="pt-1 space-y-1">
                      {platformManagementItems.map((item) => <NavButton key={item.href} item={item} pathname={pathname} />)}
                  </AccordionContent>
              </AccordionItem>
          </Accordion>
        </nav>
      </ScrollArea>
      <div className="p-4 border-t">
        <Button variant="outline" className="w-full" asChild>
            <Link href="/">Voltar ao Site</Link>
        </Button>
      </div>
    </aside>
  );
}

```
- src/types/index.ts:
```ts
// src/types/index.ts
import type { 
    User, Role, UserDocument, DocumentType, Auction as PrismaAuction, Lot as PrismaLot, Bid, 
    UserWin, Seller, Auctioneer, DirectSaleOffer, MediaItem, LotCategory, 
    State as StateInfo, City as CityInfo, Subcategory,
    Court, JudicialDistrict, JudicialBranch, JudicialProcess, ProcessParty, Bem,
    Notification, BlogPost, ContactMessage,
    Review, LotQuestion, UserLotMaxBid,
    Prisma
} from '@prisma/client';
import type { Timestamp as FirebaseAdminTimestamp, FieldValue as FirebaseAdminFieldValue } from 'firebase-admin/firestore';
import type { Timestamp as FirebaseClientTimestamp } from 'firebase/firestore'; // Client SDK Timestamp

// For server-side logic (Admin SDK)
export type ServerTimestamp = FirebaseAdminTimestamp;
export type AdminFieldValue = FirebaseAdminFieldValue;

// For client-side logic or data received from client
export type ClientTimestamp = FirebaseClientTimestamp;

// Generic type for properties that could be any of these, or a JS Date
export type AnyTimestamp = ServerTimestamp | ClientTimestamp | Date | string | null | undefined;

// --- Redefining Prisma types to include relations or computed fields ---

export type Auction = PrismaAuction & {
  lots?: Lot[];
  totalLots?: number;
  auctioneer?: string;
  seller?: string;
  category?: string;
  auctioneerName?: string;
  auctioneerLogoUrl?: string;
};

export type Lot = PrismaLot & {
    auctionName?: string;
    type?: string;
    subcategoryName?: string;
    cityName?: string;
    stateUf?: string;
    isFavorite?: boolean;
    bens?: Bem[];
};

export type Bem = Prisma.BemGetPayload<{
  include: {
    category: true;
    subcategory: true;
    judicialProcess: true;
    seller: true;
  }
}> & {
  categoryName?: string;
  subcategoryName?: string;
  judicialProcessNumber?: string;
  sellerName?: string;
};


// --- EXPORTING PRISMA GENERATED TYPES ---
// This makes it easy to use the exact shape of our database models throughout the app.
export type { 
    User as UserProfileData, Role, UserDocument, DocumentType, Bid as BidInfo, 
    UserWin, Seller as SellerProfileInfo, Auctioneer, 
    DirectSaleOffer, MediaItem, LotCategory, StateInfo, CityInfo, Subcategory,
    Court, JudicialDistrict, JudicialBranch, JudicialProcess, ProcessParty, // Removed Bem here
    Notification, BlogPost, ContactMessage, // Exporting ContactMessage
    Review, LotQuestion, UserLotMaxBid, // Exporting new types
    Prisma
};


// --- CUSTOM & COMPOSITE TYPES ---

// Adds computed permissions array to the base User type
export type UserProfileWithPermissions = User & {
  permissions: string[];
};

// Represents the data coming from the user registration form
export type UserCreationData = Partial<Omit<User, 'id' | 'createdAt' | 'updatedAt' | 'roleId' | 'sellerId' | 'badges'>> & {
  email: string;
  password?: string | null;
};

// Represents the fields that a user can edit on their own profile page
export type EditableUserProfileData = Partial<Omit<User, 'id' | 'email' | 'createdAt' | 'updatedAt' | 'roleId' | 'sellerId' | 'password' | 'badges'>>;

export type UserFormValues = Pick<User, 'fullName' | 'email' | 'cpf' | 'cellPhone' | 'dateOfBirth' | 'accountType' | 'razaoSocial' | 'cnpj' | 'inscricaoEstadual' | 'website' | 'zipCode' | 'street' | 'number' | 'complement' | 'neighborhood' | 'city' | 'state' | 'optInMarketing'> & {
  password?: string;
  roleId?: string | null; 
};


export interface UserBid {
    id: string;
    lotId: string;
    auctionId: string;
    lotTitle: string;
    lotImageUrl: string;
    lotImageAiHint?: string;
    userBidAmount: number;
    currentLotPrice: number;
    bidStatus: 'GANHANDO' | 'PERDENDO' | 'SUPERADO_POR_OUTRO' | 'SUPERADO_PELO_PROPRIO_MAXIMO' | 'ARREMATADO' | 'NAO_ARREMATADO' | 'ENCERRADO' | 'CANCELADO';
    bidDate: AnyTimestamp;
    lotEndDate: AnyTimestamp;
    lot: Lot; // Include full lot for linking
}

// --- FORM DATA TYPES ---
// These types define the shape of data coming from forms, before it's processed for the database.

export type CategoryFormData = Omit<LotCategory, 'id' | 'slug' | 'createdAt' | 'updatedAt' | 'itemCount' | 'hasSubcategories'>;
export type SubcategoryFormData = Omit<Subcategory, 'id' | 'slug' | 'createdAt' | 'updatedAt' | 'itemCount'>;
export type StateFormData = Omit<StateInfo, 'id' | 'slug' | 'createdAt' | 'updatedAt' | 'cityCount'>;
export type CityFormData = Omit<CityInfo, 'id' | 'slug' | 'stateUf' | 'createdAt' | 'updatedAt' | 'lotCount'>;
export type AuctioneerFormData = Omit<Auctioneer, 'id' | 'publicId' | 'slug' | 'createdAt' | 'updatedAt' | 'memberSince' | 'rating' | 'auctionsConductedCount' | 'totalValueSold' | 'logoMediaId'>;
export type SellerFormData = Omit<Seller, 'id'| 'publicId' | 'slug' | 'createdAt' | 'updatedAt' | 'memberSince' | 'rating' | 'activeLotsCount' | 'totalSalesValue' | 'auctionsFacilitatedCount' | 'logoMediaId'>;
export type RoleFormData = Omit<Role, 'id' | 'name_normalized' | 'createdAt' | 'updatedAt'>;
export type CourtFormData = Omit<Court, 'id' | 'slug' | 'createdAt' | 'updatedAt'>;
export type JudicialDistrictFormData = Omit<JudicialDistrict, 'id' | 'slug' | 'createdAt' | 'updatedAt'>;
export type JudicialBranchFormData = Omit<JudicialBranch, 'id' | 'slug' | 'createdAt' | 'updatedAt'>;
export type JudicialProcessFormData = Omit<JudicialProcess, 'id' | 'publicId' | 'createdAt' | 'updatedAt'> & {
  parties: Array<Partial<ProcessParty>>; 
};
export type DocumentTemplateFormData = Omit<DocumentTemplate, 'id' | 'createdAt' | 'updatedAt'>;

export type BemFormData = Omit<Prisma.BemUncheckedCreateInput, 'id' | 'publicId' | 'createdAt' | 'updatedAt' | 'galleryImageUrls' | 'mediaItemIds' | 'amenities'> & {
  galleryImageUrls?: string[];
  mediaItemIds?: string[];
  amenities?: { value: string }[];
};

export type AuctionFormData = Omit<Auction, 'id' | 'publicId' | 'createdAt' | 'updatedAt' | 'totalLots'> & {
  auctionDate: Date; 
  endDate?: Date | null; 
};

export type LotFormData = Omit<Lot, 'id'|'publicId'|'createdAt'|'updatedAt'|'auctionId'|'categoryId'|'number'|'isFavorite'|'views'|'bidsCount'|'status'|'isFeatured'> & {
  auctionId: string;
  type: string; // From form, maps to categoryId
  auctionName?: string;
  bemIds?: string[];
  mediaItemIds?: string[];
  isFeatured?: boolean;
};

export type LotDbData = Omit<LotFormData, 'type' | 'auctionName'> & {
  categoryId: string;
};


export type DirectSaleOfferFormData = Omit<DirectSaleOffer, 'id' | 'publicId' | 'createdAt' | 'updatedAt' | 'views' | 'proposalsCount' | 'galleryImageUrls' | 'itemsIncluded' | 'tags' | 'sellerId' | 'sellerLogoUrl' | 'dataAiHintSellerLogo' | 'latitude' | 'longitude' | 'mapAddress' | 'mapEmbedUrl' | 'mapStaticImageUrl' | 'categoryId'> & {
    expiresAt?: Date | null;
    mediaItemIds?: string[];
    galleryImageUrls?: string[];
    category: string; // The form sends the name, action will resolve ID
    sellerName: string; // Form sends name
};

// --- WIZARD SPECIFIC TYPES ---

export interface WizardData {
  auctionType?: Extract<Auction['auctionType'], 'JUDICIAL' | 'EXTRAJUDICIAL' | 'PARTICULAR' | 'TOMADA_DE_PRECOS'>;
  judicialProcess?: JudicialProcess;
  auctionDetails?: Partial<Auction> & {
    auctioneer?: string; // name
    seller?: string;     // name
  };
  selectedBens?: Bem[];
  createdLots?: Partial<Lot>[];
}


// --- GENERIC & UTILITY TYPES ---

// Used for API responses from CNJ
export interface CnjProcessSource {
  numeroProcesso: string;
  classe: { codigo: number; nome: string };
  sistema: { codigo: number; nome: string };
  formato: { codigo: number; nome: string };
  tribunal: string;
  dataHoraUltimaAtualizacao: string;
  grau: string;
  dataAjuizamento: string;
  movimentos: any[];
  id: string;
  nivelSigilo: number;
  orgaoJulgador: {
    codigoMunicipioIBGE: number;
    codigo: number;
    nome: string;
  };
  assuntos: { codigo: number; nome: string }[][];
}
export interface CnjHit {
  _index: string;
  _type: string;
  _id: string;
  _score: number | null;
  _source: CnjProcessSource;
  sort?: (string | number)[];
}
export interface CnjSearchResponse {
  took: number;
  timed_out: boolean;
  hits: {
    total: {
      value: number;
      relation: string;
    };
    max_score: number | null;
    hits: CnjHit[];
  };
}

export type ThemeColors = Record<string, string>;

export interface Theme {
  name: string;
  colors: ThemeColors;
}

export interface MentalTriggerSettings {
    showDiscountBadge?: boolean;
    showUrgencyTimer?: boolean;
    urgencyTimerThresholdDays?: number;
    urgencyTimerThresholdHours?: number;
    showPopularityBadge?: boolean;
    popularityViewThreshold?: number;
    showHotBidBadge?: boolean;
    hotBidThreshold?: number;
    showExclusiveBadge?: boolean;
}

export interface BadgeVisibilitySettings {
  showStatusBadge?: boolean;
  showDiscountBadge?: boolean;
  showUrgencyTimer?: boolean;
  showPopularityBadge?: boolean;
  showHotBidBadge?: boolean;
  showExclusiveBadge?: boolean;
}

export interface SectionBadgeConfig {
  featuredLots?: BadgeVisibilitySettings;
  searchGrid?: BadgeVisibilitySettings;
  searchList?: BadgeVisibilitySettings;
  lotDetail?: BadgeVisibilitySettings; 
}

export type HomepageSectionType = 'hero_carousel' | 'filter_links' | 'featured_lots' | 'active_auctions' | 'promo_banner_1' | 'categories_grid';

export interface PromoCardContent {
    title: string;
    subtitle?: string;
    link: string;
    imageUrl?: string;
    imageAlt?: string;
    dataAiHint?: string;
    bgColorClass?: string;
}

export interface HomepageSectionConfig {
  id: string;
  type: HomepageSectionType;
  title?: string;
  visible: boolean;
  order: number;
  itemCount?: number; 
  categorySlug?: string; 
  promoContent?: PromoCardContent;
}

export interface MapSettings {
  defaultProvider?: 'google' | 'openstreetmap' | 'staticImage';
  googleMapsApiKey?: string | null;
  staticImageMapZoom?: number;
  staticImageMapMarkerColor?: string;
}

export type SearchPaginationType = 'loadMore' | 'numberedPages';

export type StorageProviderType = 'local' | 'firebase';

export interface BiddingSettings {
  instantBiddingEnabled?: boolean;
  getBidInfoInstantly?: boolean;
  biddingInfoCheckIntervalSeconds?: number;
}

export type VariableIncrementRule = Prisma.JsonValue;

export type PlatformSettingsFormData = Omit<PlatformSettings, 'id' | 'updatedAt' | 'variableIncrementTable'> & {
    variableIncrementTable?: { from: number, to: number | null, increment: number }[];
};


export interface AdminReportData {
  users: number;
  auctions: number;
  lots: number;
  sellers: number;
  totalRevenue: number;
  newUsersLast30Days: number;
  activeAuctions: number;
  lotsSoldCount: number;
  salesData: { name: string; Sales: number }[];
  categoryData: { name: string; value: number }[];
  averageBidValue: number;
  averageLotsPerAuction: number;
  auctionSuccessRate: number;
}

export interface AdminDashboardStats {
    users: number;
    auctions: number;
    lots: number;
    sellers: number;
}

export interface ConsignorDashboardStats {
    totalLotsConsigned: number;
    activeLots: number;
    soldLots: number;
    totalSalesValue: number;
    salesRate: number;
    salesData: { name: string; Sales: number }[];
}


export interface RecentlyViewedLotInfo {
  id: string;
  title: string;
  imageUrl: string;
  auctionId: string;
  dataAiHint?: string;
}

export type AuctionStage = Omit<Prisma.JsonValue, 'endDate'> & {
  name: string;
  endDate: AnyTimestamp;
  statusText?: string;
  initialPrice?: number;
};


// Enums for Zod schemas
export const lotStatusValues: [LotStatus, ...LotStatus[]] = [
  'EM_BREVE',
  'ABERTO_PARA_LANCES',
  'ENCERRADO',
  'VENDIDO',
  'NAO_VENDIDO',
];

export const auctionStatusValues: [AuctionStatus, ...AuctionStatus[]] = [
  'RASCUNHO',
  'EM_PREPARACAO',
  'EM_BREVE',
  'ABERTO', 
  'ABERTO_PARA_LANCES',
  'ENCERRADO',
  'FINALIZADO', 
  'CANCELADO',
  'SUSPENSO'
];

export const bemStatusValues: [Bem['status'], ...Bem['status'][]] = [
  'CADASTRO', 'DISPONIVEL', 'LOTEADO', 'VENDIDO', 'REMOVIDO', 'INATIVADO'
];

export const documentTemplateTypeValues: [DocumentTemplate['type'], ...DocumentTemplate['type'][]] = [
  'WINNING_BID_TERM', 'EVALUATION_REPORT', 'AUCTION_CERTIFICATE'
];

```
- yarn.lock:
```text
# This file is intentionally-blank.
# It is not a good idea to generate this file automatically.
# yarn install should be run by the user, and that will create this file.

```
