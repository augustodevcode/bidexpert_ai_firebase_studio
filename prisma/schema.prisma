// prisma/header.prisma
// Este é o cabeçalho do schema do Prisma.
// Ele contém as configurações do gerador e da fonte de dados.
// NÃO adicione modelos de dados aqui. Os modelos devem ser definidos
// em arquivos individuais no diretório `prisma/models`.

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

/// Modelo de Ativo (Bem). Representa um item individual
/// que pode ser leiloado, como um carro, uma casa, ou um equipamento.
/// Um ou mais ativos podem ser agrupados em um Lote.
model Asset {
  id                String   @id @default(cuid())
  publicId          String   @unique @map("public_id")
  title             String
  description       String?  @db.Text
  status            String   @default("DISPONIVEL")
  evaluationValue   Decimal? @db.Decimal(12, 2) @map("evaluation_value")

  // Imagem Principal
  imageUrl          String?  @map("image_url")
  imageMediaId      String?  @map("image_media_id")
  mediaItem         MediaItem? @relation("AssetImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  // Galeria de Imagens (Relação Many-to-Many)
  gallery           AssetMedia[] @relation("AssetGallery")

  dataAiHint        String?  @map("data_ai_hint")

  // Relacionamentos
  category          LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId        String?      @map("category_id")
  subcategory       Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId     String?      @map("subcategory_id")

  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId String?          @map("judicial_process_id")

  seller            Seller?       @relation(fields: [sellerId], references: [id])
  sellerId          String?       @map("seller_id")
  
  // Endereço
  street         String?
  number         String?
  complement     String?
  neighborhood   String?
  zipCode        String?       @map("zip_code")
  latitude       Decimal?      @db.Decimal(10, 8)
  longitude      Decimal?      @db.Decimal(11, 8)
  city           City?         @relation(fields: [cityId], references: [id])
  cityId         String?       @map("city_id")
  state          State?        @relation(fields: [stateId], references: [id])
  stateId        String?       @map("state_id")
  
  properties        Json?

  // Relacionamento com lotes
  lots              AssetsOnLots[]

  tenant            Tenant @relation(fields: [tenantId], references: [id])
  tenantId          String @map("tenant_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("assets")
}

/// Modelo de junção para a relação many-to-many
/// entre Ativos (Assets) e Itens de Mídia (MediaItem), representando
/// a galeria de imagens de um ativo.
model AssetMedia {
  asset      Asset     @relation("AssetGallery", fields: [assetId], references: [id], onDelete: Cascade)
  assetId    String
  mediaItem  MediaItem @relation("AssetMediaGallery", fields: [mediaId], references: [id], onDelete: Cascade)
  mediaId    String
  order      Int       @default(0)

  @@id([assetId, mediaId])
  @@map("asset_media")
}

/// Status of an individual asset.
enum AssetStatus {
  /// The asset is being registered and is not ready to be used.
  CADASTRO
  /// The asset is available in the inventory to be added to a lot.
  DISPONIVEL
  /// The asset is already part of a lot.
  LOTEADO
  /// The asset has been sold (as part of a lot).
  VENDIDO
  /// The asset has been removed from the inventory (e.g., returned to the consignor).
  REMOVIDO
  /// The asset is no longer active, but the record is kept.
  INATIVADO
}
// /prisma/models/AssetsOnLots.prisma

model AssetsOnLots {
  lot      Lot    @relation(fields: [lotId], references: [id])
  lotId    String
  asset    Asset  @relation(fields: [assetId], references: [id])
  assetId  String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([lotId, assetId])
}

// prisma/models/auction.prisma
model Auction {
  id              String   @id @default(cuid())
  publicId        String?  @unique
  slug            String?  @unique
  title           String
  description     String?  @db.Text
  status          AuctionStatus @default(RASCUNHO)
  auctionDate     DateTime?
  endDate         DateTime?
  visits          Int      @default(0)
  totalLots       Int      @default(0)
  totalHabilitatedUsers Int @default(0)
  initialOffer    Decimal? @db.Decimal(15, 2)
  achievedRevenue Decimal? @db.Decimal(15, 2)
  isFeaturedOnMarketplace Boolean @default(false)
  additionalTriggers String?

  imageMediaId    String?
  documentsUrl    String? @db.VarChar(500)
  evaluationReportUrl String? @db.VarChar(500)
  auctionCertificateUrl String? @db.VarChar(500)

  auctionType    AuctionType?
  auctionMethod  AuctionMethod? @default(STANDARD)
  participation  AuctionParticipation? @default(ONLINE)

  onlineUrl       String? @db.VarChar(500)
  address         String?
  zipCode         String? @db.VarChar(10)
  latitude        Decimal? @db.Decimal(10, 8)
  longitude       Decimal? @db.Decimal(11, 8)

  softCloseEnabled Boolean? @default(false)
  softCloseMinutes Int?
  
  decrementAmount Decimal? @db.Decimal(10, 2)
  decrementIntervalSeconds Int?
  floorPrice      Decimal? @db.Decimal(15, 2)
  
  isRelisted      Boolean  @default(false)
  relistCount     Int      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenantId        String
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  
  auctioneerId    String?
  auctioneer      Auctioneer? @relation(fields: [auctioneerId], references: [id])
  
  sellerId        String?
  seller          Seller?     @relation(fields: [sellerId], references: [id])
  
  cityId          String?
  city            City?       @relation(fields: [cityId], references: [id])
  
  stateId         String?
  state           State?      @relation(fields: [stateId], references: [id])
  
  lots            Lot[]
  bids            Bid[]
  stages          AuctionStage[]
  habilitations   AuctionHabilitation[]

  judicialProcessId String?
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])

  originalAuctionId String?   @unique
  originalAuction   Auction?    @relation("RelistHistory", fields: [originalAuctionId], references: [id])
  relistedAuction   Auction?    @relation("RelistHistory")

  @@index([tenantId])
  @@index([sellerId])
  @@index([auctioneerId])
  @@index([status])
  @@index([auctionType])
  Court Court[] @relation(map: "CourtAuctions")
  JudicialBranch JudicialBranch[] @relation(map: "BranchAuctions")
  LotCategory LotCategory[]
  LotQuestion LotQuestion[]
  JudicialDistrict JudicialDistrict[] @relation(map: "DistrictAuctions")
  Review Review[]
}

model AuctionHabilitation {
  userId      String
  auctionId   String
  habilitatedAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@id([userId, auctionId])
  @@index([auctionId])
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

model AuctionStage {
  id           String   @id @default(cuid())
  name         String
  startDate    DateTime @db.DateTime(0)
  endDate      DateTime @db.DateTime(0)
  initialPrice Decimal? @db.Decimal(15, 2)
  auctionId    String

  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@index([auctionId])
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  VENDA_DIRETA
}


model Auctioneer {
  id                   String    @id @default(cuid())
  publicId             String    @unique
  slug                 String    @unique
  name                 String
  registrationNumber   String?   @db.Text
  contactName          String?   @db.Text
  email                String?   @db.Text
  phone                String?   @db.Text
  address              String?   @db.Text
  city                 String?   @db.Text
  state                String?   @db.Text
  zipCode              String?   @db.Text
  website              String?   @db.Text
  logoUrl              String?   @db.Text
  logoMediaId          String?
  dataAiHintLogo       String?   @db.Text
  description          String?   @db.Text
  userId               String?   @unique
  user                 User?     @relation("UserAuctioneer", fields: [userId], references: [id], onDelete: SetNull)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  auctions             Auction[]
  lots                 Lot[]
  // Multi-Tenant
  tenant               Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId             String
}

/// Representa um lance feito por um usuário em um lote.
model Bid {
  id            String   @id @default(uuid())
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
  bidderDisplay String?

  // Relações
  lot       Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId String
  bidder    User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId  String

  // Multi-Tenant
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId String
}

model City {
  id        String    @id @default(cuid())
  name      String
  slug      String?
  ibgeCode  String?   @unique
  lotCount  Int?      @default(0)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  state     State     @relation(fields: [stateId], references: [id])
  stateId   String
  lots      Lot[]
  auctions  Auction[]

  @@unique([name, stateId])
  Asset Asset[]
}

model ContactMessage {
  id      String   @id @default(cuid())
  name    String
  email   String
  subject String?
  message String   @db.Text
  isRead  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Court {
  id                String              @id @default(cuid())
  name              String
  slug              String?             @unique
  stateUf           String?
  website           String?
  createdAt         DateTime?           @default(now())
  updatedAt         DateTime?           @updatedAt
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]           @relation(map: "CourtAuctions")
}

/// @Model {label: "Fonte de Dados de Relatório", icon: "database"}
model DataSource {
  id        String @id @default(cuid())
  name      String
  modelName String @unique
  fields    Json

  @@map("data_sources")
}


model DirectSaleOffer {
  id                   String                @id @default(cuid())
  publicId             String                @unique
  title                String
  description          String?               @db.Text
  offerType            DirectSaleOfferType
  price                Decimal?              @db.Decimal(15, 2)
  minimumOfferPrice    Decimal?              @db.Decimal(15, 2)
  status               DirectSaleOfferStatus @default(ACTIVE)
  sellerId             String
  seller               Seller                @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerName           String?
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  categoryId           String
  category             LotCategory           @relation(fields: [categoryId], references: [id])
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int                   @default(0)
  expiresAt            DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  tenant               Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId             String
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

model DocumentTemplate {
  id      String   @id @default(cuid())
  name    String   @unique
  type    DocumentTemplateType
  content String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

model DocumentType {
  id              String         @id @default(cuid())
  name            String   @unique
  description     String?
  isRequired      Boolean        @default(true)
  appliesTo       String // e.g., 'PHYSICAL,LEGAL'
  userDocuments   UserDocument[]
}

model InstallmentPayment {
  id                String        @id @default(cuid())
  userWinId         String
  installmentNumber Int
  amount            Decimal       @db.Decimal(15, 2)
  dueDate           DateTime
  status            PaymentStatus @default(PENDENTE)
  paymentDate       DateTime?
  paymentMethod     String?
  transactionId     String?
  userWin           UserWin       @relation(fields: [userWinId], references: [id], onDelete: Cascade)

  @@unique([userWinId, installmentNumber])
  @@index([userWinId])
  Lot Lot[]
}

model JudicialBranch {
  id                String              @id @default(cuid())
  name              String            @unique
  slug              String?             @unique
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime?           @default(now())
  updatedAt         DateTime?           @updatedAt
  district          JudicialDistrict?   @relation(fields: [districtId], references: [id])
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
  auctions          Auction[]           @relation(map: "BranchAuctions")
}

model JudicialDistrict {
  id                String            @id @default(cuid())
  name              String            @unique
  slug              String?           @unique
  courtId           String?
  stateId           String?
  zipCode           String?
  createdAt         DateTime?         @default(now())
  updatedAt         DateTime?         @updatedAt
  court             Court?            @relation(fields: [courtId], references: [id])
  state             State?            @relation(fields: [stateId], references: [id])
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]         @relation(map: "DistrictAuctions")
}

model JudicialParty {
  id             String           @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType

  process JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@index([processId])
}

model JudicialProcess {
  id                String  @id @default(cuid())
  publicId          String  @unique
  processNumber     String
  isElectronic      Boolean @default(true)
  courtId           String?
  districtId        String?
  branchId          String?
  sellerId          String?
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt
  tenantId          String
  assets            Asset[]
  auctions          Auction[] @relation(map: "AuctionToJudicialProcess")

  // Relations
  court             Court?            @relation(fields: [courtId], references: [id])
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch            JudicialBranch?   @relation(fields: [branchId], references: [id])
  seller            Seller?           @relation(fields: [sellerId], references: [id])
  tenant            Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  parties           JudicialParty[] // Back-relation added here

  @@unique([processNumber, tenantId])
  MediaItem MediaItem[]
}
/// Modelo para Lotes individuais dentro de um leilão.
model Lot {
  id                      String    @id @default(cuid())
  publicId                String?   @unique
  auctionId               String
  slug                    String?
  number                  String?
  title                   String
  description             String?   @db.Text
  price                   Decimal   @db.Decimal(15, 2)
  initialPrice            Decimal?  @db.Decimal(15, 2)
  secondInitialPrice      Decimal?  @db.Decimal(15, 2)
  bidIncrementStep        Decimal?  @db.Decimal(10, 2)
  evaluationValue         Decimal?  @db.Decimal(15, 2)
  status                  LotStatus @default(EM_BREVE)
  bidsCount               Int?      @default(0)
  views                   Int?      @default(0)
  isFeatured              Boolean?  @default(false)
  isExclusive             Boolean?  @default(false)
  discountPercentage      Int?
  additionalTriggers      Json?
  imageUrl                String?   @db.Text
  imageMediaId            String?
  galleryImageUrls        Json?
  mediaItemIds            Json?
  type                    String
  categoryId              String?
  subcategoryId           String?
  auctionName             String?
  sellerId                String?
  sellerName              String?
  auctioneerId            String?
  cityId                  String?
  stateId                 String?
  cityName                String?
  stateUf                 String?
  latitude                Decimal?
  longitude               Decimal?
  mapAddress              String?
  mapEmbedUrl             String?   @db.Text
  mapStaticImageUrl       String?   @db.Text
  endDate                 DateTime?
  auctionDate             DateTime?
  lotSpecificAuctionDate  DateTime?
  secondAuctionDate       DateTime?
  condition               String?
  dataAiHint              String?
  winnerId                String?
  winningBidTermUrl       String?
  allowInstallmentBids    Boolean?  @default(false)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  tenantId                String

  // Relacionamentos
  tenant          Tenant              @relation(fields: [tenantId], references: [id])
  auction         Auction             @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category        LotCategory?        @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory?        @relation(fields: [subcategoryId], references: [id])
  seller          Seller?             @relation(fields: [sellerId], references: [id])
  auctioneer      Auctioneer?         @relation(fields: [auctioneerId], references: [id])
  city            City?               @relation(fields: [cityId], references: [id])
  state           State?              @relation(fields: [stateId], references: [id])
  winner          User?               @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  assets          AssetsOnLots[]
  bids            Bid[]
  reviews         Review[]
  questions       LotQuestion[]
  maxBids         UserLotMaxBid[]
  userWins        UserWin[]
  originalLotId   String?             @unique @map("original_lot_id")
  originalLot     Lot?                @relation("Relist", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot     Lot?                @relation("Relist")
  isRelisted      Boolean             @default(false)
  relistCount     Int                 @default(0)
  installments    InstallmentPayment[]
  stageDetails    Json?

  @@unique([auctionId, number])
}

// prisma/models/LotCategory.prisma
model LotCategory {
  id              String        @id @default(cuid())
  name            String
  slug            String        @unique
  description     String?       @db.Text
  hasSubcategories Boolean?      @default(false)
  logoUrl         String?       @db.Text
  logoMediaId     String?       @db.Text
  dataAiHintLogo  String?       @db.Text
  coverImageUrl   String?       @db.Text
  coverImageMediaId String?     @db.Text
  dataAiHintCover String?       @db.Text
  megaMenuImageUrl String?      @db.Text
  megaMenuImageMediaId String?  @db.Text
  dataAiHintMegaMenu String?    @db.Text
  createdAt       DateTime?     @default(now())
  updatedAt       DateTime?     @updatedAt
  
  // Relations
  subcategories   Subcategory[]
  auctions        Auction[]
  lots            Lot[]
  assets          Asset[]

  @@unique([name])
  DirectSaleOffer DirectSaleOffer[]
}


model LotQuestion {
  id                      String    @id @default(cuid())
  lot                     Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId                   String
  auction                 Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId               String
  user                    User      @relation(fields: [userId], references: [id])
  userId                  String
  userDisplayName         String
  questionText            String    @db.Text
  answerText              String?   @db.Text
  answeredByUserId        String?
  answeredByUserDisplayName String?
  answeredAt              DateTime?
  isPublic                Boolean   @default(true)
  createdAt               DateTime  @default(now())

  @@index([lotId])
  @@index([userId])
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
  RETIRADO
}

/// Modelo de Item de Mídia. Representa um único arquivo
/// (imagem, PDF, etc.) armazenado, com seus metadados.
model MediaItem {
  id           String  @id @default(cuid())
  fileName     String
  mimeType     String
  sizeBytes    Int
  storagePath  String  @unique
  urlOriginal  String
  urlThumbnail String?
  title        String?
  altText      String?
  caption      String?
  description  String?
  dataAiHint   String? @map("data_ai_hint")

  uploadedByUserId String?       @map("uploaded_by_user_id")
  uploadedBy       User?         @relation(fields: [uploadedByUserId], references: [id])
  
  judicialProcessId String?       @map("judicial_process_id")
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])

  // Relação para imagem principal de um Ativo
  imageForAssets Asset[] @relation("AssetImage")

  // Relação para galeria de um Ativo
  galleryForAssets AssetMedia[] @relation("AssetMediaGallery")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("media_items")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  tenantId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([userId])
}


/// @model
/// @description Armazena tokens temporários para redefinição de senha.
model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

// prisma/models/PlatformSettings.prisma

model PlatformSettings {
  id                        String    @id @default(cuid())
  isSetupComplete           Boolean   @default(false) @map("is_setup_complete")
  siteTitle                 String?   @map("site_title")
  siteTagline               String?   @map("site_tagline")
  logoUrl                   String?   @map("logo_url")
  faviconUrl                String?   @map("favicon_url")
  galleryImageBasePath      String?   @map("gallery_image_base_path")
  storageProvider           String?   @map("storage_provider")
  firebaseStorageBucket     String?   @map("firebase_storage_bucket")
  activeThemeName           String?   @map("active_theme_name")
  themes                    Json?
  platformPublicIdMasks     Json?     @map("platform_public_id_masks")
  mentalTriggerSettings     Json?     @map("mental_trigger_settings")
  sectionBadgeVisibility    Json?     @map("section_badge_visibility")
  mapSettings               Json?     @map("map_settings")
  notificationSettings      Json?     @map("notification_settings")
  defaultUrgencyTimerHours  Int?      @map("default_urgency_timer_hours")
  variableIncrementTable    Json?     @map("variable_increment_table")
  biddingSettings           Json?     @map("bidding_settings")
  paymentGatewaySettings    Json?     @map("payment_gateway_settings")
  homepageSections          Json?     @map("homepage_sections")
  searchPaginationType      String?   @default("loadMore") @map("search_pagination_type")
  searchItemsPerPage        Int?      @default(12) @map("search_items_per_page")
  searchLoadMoreCount       Int?      @default(12) @map("search_load_more_count")
  showCountdownOnLotDetail  Boolean?  @default(true) @map("show_countdown_on_lot_detail")
  showCountdownOnCards      Boolean?  @default(true) @map("show_countdown_on_cards")
  showRelatedLotsOnLotDetail Boolean? @default(true) @map("show_related_lots_on_lot_detail")
  relatedLotsCount          Int?      @default(5) @map("related_lots_count")
  defaultListItemsPerPage   Int?      @default(10) @map("default_list_items_per_page")
  updatedAt                 DateTime? @updatedAt @map("updated_at")

  // Relation to Tenant
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId String @unique @map("tenant_id")
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}


model Report {
  id          String   @id @default(uuid())
  name        String
  description String?
  definition  Json
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("reports")
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String?
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([lotId])
}

model Role {
  id              String         @id @default(cuid())
  name            String         @unique
  nameNormalized  String         @unique
  description     String?
  permissions     Json?
  users           UsersOnRoles[]
}

enum SearchPaginationType {
  loadMore
  numberedPages
}


model Seller {
  id                   String              @id @default(cuid())
  publicId             String              @unique
  slug                 String              @unique
  name                 String              @unique
  contactName          String?             @db.Text
  email                String?             @db.Text
  phone                String?             @db.Text
  address              String?             @db.Text
  city                 String?             @db.Text
  state                String?             @db.Text
  zipCode              String?             @db.Text
  website              String?             @db.Text
  logoUrl              String?             @db.Text
  logoMediaId          String?
  dataAiHintLogo       String?             @db.Text
  description          String?             @db.Text
  userId               String?             @unique
  user                 User?               @relation("UserSeller", fields: [userId], references: [id], onDelete: SetNull)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  isJudicial           Boolean             @default(false)
  judicialBranchId     String?             @unique
  judicialBranch       JudicialBranch?     @relation(fields: [judicialBranchId], references: [id])
  // Relacionamentos
  auctions             Auction[]
  lots                 Lot[]
  assets               Asset[]
  directSaleOffers     DirectSaleOffer[]
  judicialProcesses    JudicialProcess[]
  // Multi-Tenant
  tenant               Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId             String
}

model State {
  id                String             @id @default(cuid())
  name              String
  uf                String             @unique
  slug              String?            @unique
  cityCount         Int?               @default(0)
  createdAt         DateTime?          @default(now())
  updatedAt         DateTime?          @updatedAt
  cities            City[]
  judicialDistricts JudicialDistrict[]
  auctions          Auction[]
  lots              Lot[]

  Asset Asset[]
}

model Subcategory {
  id                 String      @id @default(cuid())
  name               String
  slug               String
  parentCategoryId   String
  description        String?
  displayOrder       Int         @default(0)
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots               Lot[]
  assets             Asset[]

  @@unique([name, parentCategoryId])
}
// prisma/models/subscriber.prisma
/// @model Subscriber
/// @description Armazena informações de usuários que se inscreveram na newsletter ou para receber notificações.

model Subscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isVerified Boolean  @default(false)
  
  // Preferências de notificação em formato JSON. Ex: { "notifyOnNewAuction": true, "categories": ["veiculos"] }
  preferences Json?
  
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId  String
  
  @@index([tenantId])
}

/// Define um Tenant (inquilino) na plataforma. Cada Tenant representa um leiloeiro ou cliente.
model Tenant {
  id        String   @id @default(uuid())
  name      String
  subdomain String   @unique
  domain    String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações inversas
  users             UsersOnTenants[]
  auctions          Auction[]
  lots              Lot[]
  assets            Asset[]
  sellers           Seller[]
  auctioneers       Auctioneer[]
  judicialProcesses JudicialProcess[]
  directSaleOffers  DirectSaleOffer[]
  notifications     Notification[]
  bids              Bid[]
  reports           Report[]
  platformSettings  PlatformSettings?

  Subscriber Subscriber[]
}

/// Modelo para Usuários. Armazena informações de perfil, autenticação e
/// status de habilitação. É um modelo global, não associado a um tenant específico.
model User {
  id                      String                @id @default(cuid())
  email                   String                @unique
  password                String?               @db.Text
  fullName                String?               @db.Text
  habilitationStatus      UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType             AccountType           @default(PHYSICAL)
  avatarUrl               String?               @db.Text
  dataAiHint              String?               @db.Text
  badges                  Json?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  cpf                     String?               @db.Text
  rgNumber                String?               @db.Text
  rgIssuer                String?               @db.Text
  rgIssueDate             DateTime?
  rgState                 String?               @db.Text
  dateOfBirth             DateTime?
  cellPhone               String?               @db.Text
  homePhone               String?               @db.Text
  gender                  String?               @db.Text
  profession              String?               @db.Text
  nationality             String?               @db.Text
  maritalStatus           String?               @db.Text
  propertyRegime          String?               @db.Text
  spouseName              String?               @db.Text
  spouseCpf               String?               @db.Text
  zipCode                 String?               @db.Text
  street                  String?               @db.Text
  number                  String?               @db.Text
  complement              String?               @db.Text
  neighborhood            String?               @db.Text
  city                    String?               @db.Text
  state                   String?               @db.Text
  optInMarketing          Boolean?              @default(false)
  razaoSocial             String?               @db.Text
  cnpj                    String?               @db.Text
  inscricaoEstadual       String?               @db.Text
  website                 String?               @db.Text
  responsibleName         String?               @db.Text
  responsibleCpf          String?               @db.Text

  // Relations
  notifications           Notification[]
  mediaItems              MediaItem[]
  documents               UserDocument[]
  bids                    Bid[]
  maxBids                 UserLotMaxBid[]
  sellerProfile           Seller?               @relation("UserSeller")
  auctioneerProfile       Auctioneer?           @relation("UserAuctioneer")
  roles                   UsersOnRoles[]
  tenants                 UsersOnTenants[]
  wins                    UserWin[]
  lotsWon                 Lot[]                 @relation("LotWinner")
  auctionHabilitations    AuctionHabilitation[]
  lotQuestions            LotQuestion[]
  reviews                 Review[]
}

model UserDocument {
  id              String             @id @default(cuid())
  userId          String
  documentTypeId  String
  status          UserDocumentStatus @default(PENDING_ANALYSIS)
  fileUrl         String
  fileName        String?
  rejectionReason String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType DocumentType @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
  @@index([userId])
}


enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  REJEITADO
  BLOCKED
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
  @@index([lotId])
}

model UserWin {
  id                String               @id @default(cuid())
  lotId             String               @unique
  userId            String
  winningBidAmount  Decimal              @db.Decimal(15, 2)
  winDate           DateTime             @default(now())
  paymentStatus     PaymentStatus        @default(PENDENTE)
  invoiceUrl        String?
  installments      InstallmentPayment[]
  lot               Lot                  @relation(fields: [lotId], references: [id])
  user              User                 @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UsersOnRoles {
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([roleId])
}

model UsersOnTenants {
  userId     String
  tenantId   String
  assignedAt DateTime @default(now())
  assignedBy String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@id([userId, tenantId])
  @@index([tenantId])
}

model VehicleMake {
  id     String         @id @default(cuid())
  name   String         @unique
  slug   String         @unique
  models VehicleModel[]
}

model VehicleModel {
  id     String      @id @default(cuid())
  name   String
  slug   String
  makeId String
  make   VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)

  @@unique([makeId, name])
  @@index([slug])
}

// prisma/models/asset.prisma
import { AssetStatus, Tenant, User, LotCategory, Subcategory, JudicialProcess, Seller, City, State, MediaItem, AssetsOnLots } from "./";

model Asset {
  id             BigInt   @id @default(autoincrement())
  publicId       String   @unique @default(cuid())
  tenantId       String
  title          String
  description    String?  @db.Text
  properties     Json?
  status         AssetStatus @default(CADASTRO)
  evaluationValue Decimal? @db.Decimal(12, 2)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  imageUrl      String?
  imageMediaId  String?
  mediaItemIds  String[]
  dataAiHint    String?

  street          String?
  number          String?
  complement      String?
  neighborhood    String?
  zipCode         String?
  latitude        Decimal? @db.Decimal(10, 8)
  longitude       Decimal? @db.Decimal(11, 8)

  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  createdBy       User     @relation("CreatedAssets", fields: [createdById], references: [id])
  createdById     String
  category        LotCategory @relation(fields: [categoryId], references: [id])
  categoryId      BigInt
  subcategory     Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId   BigInt?
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId BigInt?
  seller          Seller   @relation(fields: [sellerId], references: [id])
  sellerId        BigInt
  city            City?     @relation(fields: [cityId], references: [id])
  cityId          BigInt?
  state           State?    @relation(fields: [stateId], references: [id])
  stateId         BigInt?

  lots            AssetsOnLots[]
}

// prisma/models/assets-on-lots.prisma
import { Lot, Asset } from "./";

model AssetsOnLots {
  lot      Lot      @relation(fields: [lotId], references: [id])
  lotId    BigInt
  asset    Asset    @relation(fields: [assetId], references: [id])
  assetId  BigInt
  assignedAt DateTime @default(now())

  @@id([lotId, assetId])
}

// prisma/models/auction-habilitation.prisma
import { User, Auction } from "./";

model AuctionHabilitation {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  auction   Auction  @relation(fields: [auctionId], references: [id])
  auctionId BigInt
  habilitatedAt DateTime @default(now())

  @@id([userId, auctionId])
}

// prisma/models/auction-stage.prisma
import { Auction, LotStagePrice } from "./";

model AuctionStage {
  id             BigInt   @id @default(autoincrement())
  auction        Auction  @relation(fields: [auctionId], references: [id])
  auctionId      BigInt
  name           String
  startDate      DateTime
  endDate        DateTime
  
  lotStagePrices LotStagePrice[]

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([auctionId])
}

// prisma/models/auction.prisma
import { AuctionStatus, AuctionType, AuctionParticipation, AuctionMethod, Lot, Bid, AuctionHabilitation, User, AuctionStage, Tenant, Seller, Auctioneer, LotCategory, JudicialProcess, Court, JudicialDistrict, JudicialBranch } from "./";

model Auction {
  id             BigInt   @id @default(autoincrement())
  publicId       String   @unique @default(cuid())
  tenantId       String
  title          String
  slug           String   @unique
  description    String?  @db.Text
  status         AuctionStatus @default(EM_PREPARACAO)
  auctionType    AuctionType
  auctionMethod  AuctionMethod @default(STANDARD)
  participation  AuctionParticipation @default(ONLINE)
  
  auctionDate    DateTime
  endDate        DateTime?

  onlineUrl      String?
  street         String?
  number         String?
  complement     String?
  neighborhood   String?
  zipCode        String?
  latitude       Decimal? @db.Decimal(10, 8)
  longitude      Decimal? @db.Decimal(11, 8)
  
  imageMediaId   String?
  documentsUrl   String?
  evaluationReportUrl    String?
  auctionCertificateUrl  String?

  visits         Int      @default(0)
  totalHabilitatedUsers Int @default(0)
  isFeaturedOnMarketplace Boolean @default(false)
  marketplaceAnnouncementTitle String?
  
  softCloseEnabled Boolean @default(true)
  softCloseMinutes Int     @default(2)

  decrementAmount           Decimal?  @db.Decimal(12, 2)
  decrementIntervalSeconds  Int?
  floorPrice                Decimal?  @db.Decimal(12, 2)
  
  initialOffer   Decimal? @db.Decimal(12, 2)

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  lots           Lot[]
  bids           Bid[]
  habilitations  AuctionHabilitation[]
  createdBy      User     @relation("CreatedAuctions", fields: [createdById], references: [id])
  createdById    String
  stages         AuctionStage[]
  
  tenant          Tenant          @relation(fields: [tenantId], references: [id])
  seller          Seller?         @relation(fields: [sellerId], references: [id])
  sellerId        BigInt?
  auctioneer      Auctioneer      @relation(fields: [auctioneerId], references: [id])
  auctioneerId    BigInt
  category        LotCategory?    @relation(fields: [categoryId], references: [id])
  categoryId      BigInt?
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId BigInt?

  cityId          BigInt?
  stateId         BigInt?
  
  @@index([sellerId])
  @@index([auctioneerId])
  @@index([status])
}

// prisma/models/auctioneer.prisma
import { User, Auction, Lot, Tenant } from "./";

model Auctioneer {
  id                 BigInt     @id @default(autoincrement())
  publicId           String   @unique @default(cuid())
  tenantId           String
  name               String
  slug               String   @unique
  registrationNumber String?
  
  email              String?  @unique
  phone              String?
  website            String?
  
  address            String?
  city               String?
  state              String?
  zipCode            String?
  
  description        String?  @db.Text
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  
  auctions           Auction[]
  lots               Lot[]

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  tenant             Tenant   @relation(fields: [tenantId], references: [id])
  user               User?    @relation(fields: [userId], references: [id])
  userId             String?  @unique

  @@index([tenantId])
}

// prisma/models/bid.prisma
import { User, Lot, Auction, Tenant, BidOrigin } from "./";

model Bid {
  id          BigInt      @id @default(autoincrement())
  tenantId    String
  lotId       BigInt
  auctionId   BigInt
  bidderId    String
  amount      Decimal   @db.Decimal(12, 2)
  timestamp   DateTime  @default(now())
  origin      BidOrigin @default(MANUAL)

  bidder      User      @relation(fields: [bidderId], references: [id])
  lot         Lot       @relation(fields: [lotId], references: [id])
  auction     Auction   @relation(fields: [auctionId], references: [id])
  tenant      Tenant    @relation(fields: [tenantId], references: [id])

  @@index([lotId, timestamp])
  @@index([bidderId])
}

// prisma/models/category.prisma
import { Subcategory, Lot, Asset, DirectSaleOffer } from "./";

model LotCategory {
  id                BigInt   @id @default(autoincrement())
  name              String   @unique
  slug              String   @unique
  description       String?  @db.Text
  hasSubcategories  Boolean  @default(false)
  displayOrder      Int      @default(0)
  iconName          String?
  logoUrl           String?
  logoMediaId       String?
  dataAiHintIcon    String?
  coverImageUrl     String?
  coverImageMediaId String?
  dataAiHintCover   String?
  megaMenuImageUrl  String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu String?

  subcategories   Subcategory[]
  lots            Lot[]
  assets          Asset[]
  directSaleOffers DirectSaleOffer[]
}

// prisma/models/city.prisma
model City {
  id       BigInt    @id @default(autoincrement())
  name     String
  slug     String    @unique
  state    State     @relation(fields: [stateId], references: [id])
  stateId  BigInt
  stateUf  String?
  ibgeCode String?   @unique

  auctions Auction[]
  lots     Lot[]
  assets   Asset[]

  @@unique([name, stateId])
}

// prisma/models/contact-message.prisma
import { Tenant } from "./";

model ContactMessage {
  id        BigInt   @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

// prisma/models/court.prisma
import { JudicialDistrict, JudicialProcess } from "./";

model Court {
  id         BigInt     @id @default(autoincrement())
  name       String   @unique
  slug       String   @unique
  stateUf    String
  website    String?

  districts  JudicialDistrict[]
  processes  JudicialProcess[]
}

// prisma/models/data-source.prisma

model DataSource {
  id        BigInt   @id @default(autoincrement())
  name      String
  modelName String   @unique
  fields    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// prisma/models/direct-sale-offer.prisma
import { DirectSaleOfferStatus, DirectSaleOfferType, LotCategory, Seller, Tenant } from "./";

model DirectSaleOffer {
  id              BigInt     @id @default(autoincrement())
  publicId        String     @unique @default(cuid())
  tenantId        String
  title           String
  description     String?    @db.Text
  offerType       DirectSaleOfferType @default(BUY_NOW)
  status          DirectSaleOfferStatus @default(PENDING_APPROVAL)
  
  price             Decimal?    @db.Decimal(12, 2)
  minimumOfferPrice Decimal?    @db.Decimal(12, 2)

  categoryId        BigInt
  sellerId          BigInt

  locationCity      String?
  locationState     String?
  
  imageUrl        String?
  imageMediaId    String?
  dataAiHint      String?
  galleryImageUrls  String[]
  mediaItemIds      String[]

  views           Int         @default(0)
  proposalsCount  Int         @default(0)

  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  expiresAt       DateTime?

  tenant          Tenant       @relation(fields: [tenantId], references: [id])
  category        LotCategory  @relation(fields: [categoryId], references: [id])
  seller          Seller       @relation(fields: [sellerId], references: [id])
}

// prisma/models/document-template.prisma
import { DocumentTemplateType } from "./";

model DocumentTemplate {
  id        BigInt     @id @default(autoincrement())
  name      String   @unique
  type      DocumentTemplateType
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// prisma/models/document-type.prisma
import { UserDocument } from "./";

model DocumentType {
  id          BigInt     @id @default(autoincrement())
  name        String   @unique
  description String?
  isRequired  Boolean  @default(false)
  appliesTo   String   @default("BOTH") // PHYSICAL, LEGAL, BOTH
  
  userDocuments UserDocument[]
}

// prisma/models/installment-payment.prisma
import { UserWin, Lot, PaymentStatus } from "./";

model InstallmentPayment {
  id                 BigInt     @id @default(autoincrement())
  userWinId          String
  lotId              BigInt
  installmentNumber  Int
  totalInstallments  Int
  amount             Decimal  @db.Decimal(12, 2)
  dueDate            DateTime
  paymentDate        DateTime?
  status             PaymentStatus @default(PENDENTE)

  userWin            UserWin  @relation(fields: [userWinId], references: [id])
  lot                Lot      @relation(fields: [lotId], references: [id])
}

// prisma/models/judicial-branch.prisma
import { JudicialDistrict, JudicialProcess, Seller } from "./";

model JudicialBranch {
  id         BigInt     @id @default(autoincrement())
  name       String
  slug       String   @unique
  district   JudicialDistrict @relation(fields: [districtId], references: [id])
  districtId BigInt
  
  contactName String?
  phone       String?
  email       String?

  processes  JudicialProcess[]
  sellers    Seller[] // Uma vara pode atuar como um comitente vendedor

  @@unique([name, districtId])
}

// prisma/models/judicial-district.prisma
import { Court, State, JudicialBranch, JudicialProcess } from "./";

model JudicialDistrict {
  id        BigInt     @id @default(autoincrement())
  name      String
  slug      String   @unique
  court     Court    @relation(fields: [courtId], references: [id])
  courtId   BigInt
  state     State    @relation(fields: [stateId], references: [id])
  stateId   BigInt
  zipCode   String?

  branches  JudicialBranch[]
  processes JudicialProcess[]

  @@unique([name, courtId])
}

// prisma/models/judicial-party.prisma
import { JudicialProcess, ProcessPartyType } from "./";

model JudicialParty {
  id             BigInt   @id @default(autoincrement())
  name           String
  documentNumber String?
  partyType      ProcessPartyType @default(OUTRO)
  process        JudicialProcess @relation(fields: [processId], references: [id])
  processId      BigInt
}

// prisma/models/judicial-process.prisma
import { Asset, JudicialParty, Court, JudicialDistrict, JudicialBranch, Tenant, Seller } from "./";

model JudicialProcess {
  id             BigInt   @id @default(autoincrement())
  publicId       String   @unique @default(cuid())
  tenantId       String
  processNumber  String   @unique
  isElectronic   Boolean  @default(true)
  
  court          Court    @relation(fields: [courtId], references: [id])
  courtId        BigInt
  district       JudicialDistrict @relation(fields: [districtId], references: [id])
  districtId     BigInt
  branch         JudicialBranch   @relation(fields: [branchId], references: [id])
  branchId       BigInt
  
  seller         Seller?   @relation(fields: [sellerId], references: [id])
  sellerId       BigInt?

  assets         Asset[]
  parties        JudicialParty[]
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  tenant         Tenant   @relation(fields: [tenantId], references: [id])
}

// prisma/models/lot-stage-details.prisma
model LotStageDetails {
  id            Int     @id @default(autoincrement())
  lot           Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         Int
  stage         AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)
  stageId       Int
  initialBid    Decimal? @db.Decimal(12, 2)
  bidIncrement  Decimal? @db.Decimal(12, 2)

  @@unique([lotId, stageId])
}

// prisma/models/lot-stage-price.prisma
import { Lot, AuctionStage } from "./";

model LotStagePrice {
  lot           Lot     @relation(fields: [lotId], references: [id])
  lotId         BigInt
  stage         AuctionStage @relation(fields: [stageId], references: [id])
  stageId       BigInt

  initialBid    Decimal? @db.Decimal(12, 2)
  bidIncrement  Decimal? @db.Decimal(12, 2)

  @@id([lotId, stageId])
}

// prisma/models/lot.prisma
import { LotStatus, Asset, Auction, User, Bid, UserLotMaxBid, Review, LotQuestion, Tenant, Seller, Auctioneer, LotCategory, Subcategory, LotStagePrice, InstallmentPayment, AssetsOnLots } from "./";

model Lot {
  id                  BigInt   @id @default(autoincrement())
  publicId            String   @unique @default(cuid())
  tenantId            String
  auctionId           BigInt
  number              String?
  title               String
  description         String?  @db.Text
  properties          Json?
  
  status              LotStatus @default(EM_BREVE)
  
  price               Decimal   @db.Decimal(12, 2)
  initialPrice        Decimal?  @db.Decimal(12, 2)
  secondInitialPrice  Decimal?  @db.Decimal(12, 2)
  bidIncrementStep    Decimal?  @db.Decimal(12, 2)
  evaluationValue     Decimal?  @db.Decimal(12, 2)

  views               Int       @default(0)
  bidsCount           Int       @default(0)
  
  hasKey              Boolean   @default(true)
  canBeVisited        Boolean   @default(true)
  
  street              String?
  numberAddress       String?
  complement          String?
  neighborhood        String?
  zipCode             String?
  latitude            Decimal?  @db.Decimal(10, 8)
  longitude           Decimal?  @db.Decimal(11, 8)
  
  imageUrl            String?
  imageMediaId        String?
  inheritedMediaFromAssetId String? // ID do Asset de onde a mídia foi herdada
  
  isFeatured          Boolean   @default(false)
  isExclusive         Boolean   @default(false)
  
  winnerId            String?
  winningBidTermUrl   String?

  additionalTriggers  String[]
  dataAiHint          String?

  isRelisted          Boolean?  @default(false)
  relistCount         Int?      @default(0)

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  auction             Auction   @relation(fields: [auctionId], references: [id])
  winner              User?     @relation("WonLots", fields: [winnerId], references: [id])
  bids                Bid[]
  userMaxBids         UserLotMaxBid[]
  reviews             Review[]
  questions           LotQuestion[]
  tenant              Tenant    @relation(fields: [tenantId], references: [id])
  
  seller              Seller?   @relation(fields: [sellerId], references: [id])
  sellerId            BigInt?
  auctioneer          Auctioneer? @relation(fields: [auctioneerId], references: [id])
  auctioneerId        BigInt?
  
  category            LotCategory @relation(fields: [categoryId], references: [id])
  categoryId          BigInt
  subcategory         Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId       BigInt?

  cityId              BigInt?
  stateId             BigInt?
  
  assets              AssetsOnLots[]
  stageDetails        LotStagePrice[]
  wins                UserWin[]
  installmentPayments InstallmentPayment[]
  originalLot         Lot?      @relation("RelistedLot", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  originalLotId       BigInt?   @unique
  relistedLot         Lot?      @relation("RelistedLot")

  @@index([auctionId])
  @@index([status])
  @@index([winnerId])
}

// prisma/models/media-item.prisma
model MediaItem {
  id                  Int       @id @default(autoincrement())
  fileName            String
  mimeType            String
  sizeBytes           Int
  urlOriginal         String    @unique
  urlThumbnail        String?
  storagePath         String
  altText             String?
  title               String?
  caption             String?
  description         String?   @db.Text
  dataAiHint          String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  uploadedBy          User      @relation(fields: [uploadedByUserId], references: [id])
  uploadedByUserId    Int
  judicialProcess     JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId   Int?
  assets              AssetMedia[]
}

// prisma/models/media.prisma
import { Asset, JudicialProcess, User } from "./";

model MediaItem {
  id                  String   @id @default(cuid())
  fileName            String
  mimeType            String
  sizeBytes           Int
  urlOriginal         String
  urlThumbnail        String?
  storagePath         String
  title               String?
  altText             String?
  caption             String?
  description         String?
  dataAiHint          String?
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  uploadedBy          User     @relation(fields: [uploadedByUserId], references: [id])
  uploadedByUserId    String
  
  judicialProcess     JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId   BigInt?
}

// prisma/models/report.prisma
import { User, Tenant } from "./";

model Report {
  id             BigInt   @id @default(autoincrement())
  tenantId       String
  name           String
  description    String?
  definition     Json
  
  createdBy      User     @relation("CreatedReports", fields: [createdById], references: [id])
  createdById    String
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  tenant         Tenant   @relation(fields: [tenantId], references: [id])
}

// prisma/models/review.prisma
import { User, Lot, Auction } from "./";

model Review {
  id             BigInt   @id @default(autoincrement())
  lotId          BigInt
  auctionId      BigInt
  userId         String
  userDisplayName String
  rating         Int
  comment        String?  @db.Text
  isVerified     Boolean  @default(false)
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  user           User     @relation(fields: [userId], references: [id])
  lot            Lot      @relation(fields: [lotId], references: [id])
  auction        Auction  @relation(fields: [auctionId], references: [id])

  @@index([lotId])
}

// prisma/models/role.prisma
import { User, UsersOnRoles } from "./";

model Role {
  id             String   @id @default(cuid())
  name           String   @unique
  nameNormalized String   @unique
  description    String?
  permissions    String[]
  
  users          UsersOnRoles[]
}

// prisma/models/seller.prisma
import { User, Auction, Lot, Asset, Tenant, JudicialBranch, JudicialProcess } from "./";

model Seller {
  id                BigInt      @id @default(autoincrement())
  publicId          String    @unique @default(cuid())
  tenantId          String
  name              String
  slug              String    @unique
  isJudicial        Boolean   @default(false)
  
  contactName       String?
  email             String?
  phone             String?
  website           String?
  
  address           String?
  city              String?
  state             String?
  zipCode           String?
  
  description       String?   @db.Text
  logoUrl           String?
  logoMediaId       String?
  dataAiHintLogo    String?

  auctions          Auction[]
  lots              Lot[]
  assets            Asset[]
  judicialProcess   JudicialProcess[]
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  tenant            Tenant    @relation(fields: [tenantId], references: [id])
  judicialBranch    JudicialBranch? @relation(fields: [judicialBranchId], references: [id])
  judicialBranchId  BigInt?   @unique

  @@index([tenantId])
}

// prisma/models/state.prisma
import { City, JudicialDistrict, Asset } from "./";

model State {
  id        BigInt     @id @default(autoincrement())
  name      String   @unique
  uf        String   @unique
  slug      String   @unique

  cities    City[]
  districts JudicialDistrict[]
  assets    Asset[]
}

// prisma/models/subcategory.prisma
import { LotCategory, Lot, Asset } from "./";

model Subcategory {
  id               BigInt       @id @default(autoincrement())
  name             String
  slug             String     @unique
  parentCategory   LotCategory  @relation(fields: [parentCategoryId], references: [id])
  parentCategoryId BigInt
  description      String?
  displayOrder     Int        @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  
  lots             Lot[]
  assets           Asset[]

  @@unique([name, parentCategoryId])
}

// prisma/models/tenant.prisma
import { User, UsersOnTenants, Seller, Auctioneer, Auction, Lot, JudicialProcess, Report, DirectSaleOffer, Bid, Subscription } from "./";

model Tenant {
  id          String   @id @default(cuid())
  name        String
  subdomain   String   @unique
  domain      String?  @unique
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  users       UsersOnTenants[]
  sellers     Seller[]
  auctioneers Auctioneer[]
  auctions    Auction[]
  lots        Lot[]
  judicialProcesses JudicialProcess[]
  reports     Report[]
  directSaleOffers DirectSaleOffer[]
  bids        Bid[]
  subscribers Subscription[]
}

// prisma/models/user-document.prisma
import { User, DocumentType, UserDocumentStatus } from "./";

model UserDocument {
  id             String   @id @default(cuid())
  userId         String
  documentTypeId BigInt
  fileUrl        String
  fileName       String
  status         UserDocumentStatus @default(PENDING_ANALYSIS)
  rejectionReason String?
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  user           User          @relation(fields: [userId], references: [id])
  documentType   DocumentType  @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

// prisma/models/user-lot-max-bid.prisma
import { User, Lot } from "./";

model UserLotMaxBid {
  user       User    @relation(fields: [userId], references: [id])
  userId     String
  lot        Lot     @relation(fields: [lotId], references: [id])
  lotId      BigInt
  maxAmount  Decimal @db.Decimal(12, 2)
  isActive   Boolean @default(true)
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([userId, lotId])
}

// prisma/models/user-win.prisma
import { User, Lot, PaymentStatus, InstallmentPayment } from "./";

model UserWin {
  id               String  @id @default(cuid())
  userId           String
  lotId            BigInt  @unique
  winningBidAmount Decimal @db.Decimal(12, 2)
  winDate          DateTime
  paymentStatus    PaymentStatus @default(PENDENTE)
  
  user             User    @relation(fields: [userId], references: [id])
  lot              Lot     @relation(fields: [lotId], references: [id])
  
  installments     InstallmentPayment[]

  @@index([userId])
}

// prisma/models/user.prisma
import { Role, UserHabilitationStatus, AccountType, UsersOnRoles, UsersOnTenants, Bid, UserWin, UserDocument, UserLotMaxBid, Review, LotQuestion, Auctioneer, Seller, Asset, Report } from "./";

model User {
  id                  String   @id @default(cuid())
  email               String   @unique
  password            String
  fullName            String?
  
  cpf                 String?  @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?

  avatarUrl           String?
  dataAiHint          String?
  
  cellPhone           String?  @unique
  homePhone           String?

  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType @default(PHYSICAL)
  
  razaoSocial         String?
  cnpj                String?  @unique
  inscricaoEstadual   String?
  website             String?
  
  responsibleName     String?
  responsibleCpf      String?

  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?

  optInMarketing      Boolean  @default(false)

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  lastLogin           DateTime?
  
  roles               UsersOnRoles[]
  tenants             UsersOnTenants[]
  bids                Bid[]
  wins                UserWin[]
  documents           UserDocument[]
  maxBids             UserLotMaxBid[]
  reviews             Review[]
  questions           LotQuestion[]
  auctioneerProfile   Auctioneer?
  sellerProfile       Seller?
  createdAssets       Asset[] @relation("CreatedAssets")
  createdReports      Report[] @relation("CreatedReports")
  createdAuctions     Auction[] @relation("CreatedAuctions")
}

// prisma/models/users-on-roles.prisma
import { User, Role } from "./";

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  role       Role     @relation(fields: [roleId], references: [id])
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String
  
  @@id([userId, roleId])
}

// prisma/models/users-on-tenants.prisma
import { User, Tenant } from "./";

model UsersOnTenants {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  tenantId   String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, tenantId])
}

// prisma/models/vehicle-make.prisma
model VehicleMake {
  id      BigInt     @id @default(autoincrement())
  name    String   @unique
  slug    String   @unique
  models  VehicleModel[]
}

// prisma/models/vehicle-model.prisma
model VehicleModel {
  id     BigInt     @id @default(autoincrement())
  name   String
  slug   String   @unique
  make   VehicleMake @relation(fields: [makeId], references: [id])
  makeId BigInt

  @@unique([makeId, name])
}
