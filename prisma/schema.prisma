// datasource db defines the database connection settings.
// It's configured via environment variables.
datasource db {
  provider = "mysql" // ou "postgresql"
  url      = env("DATABASE_URL")
}

// generator client specifies that Prisma Client should be generated.
generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. Enums
// =================================================================
enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

// =================================================================
// 2. Models
// =================================================================
model User {
  id                  String                 @id @default(uuid())
  email               String                 @unique
  password            String?
  fullName            String?
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType            @default(PHYSICAL)
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  cpf                 String?
  cellPhone           String?
  homePhone           String?
  dateOfBirth         DateTime?
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  optInMarketing      Boolean                @default(false)
  razaoSocial         String?
  cnpj                String?
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  sellerId            String?                @unique
  seller              Seller?
  auctioneerId        String?                @unique
  auctioneer          Auctioneer?
  documents           UserDocument[]
  bids                Bid[]
  notifications       Notification[]
  wins                UserWin[]              @relation("LotWinner")
  maxBids             UserLotMaxBid[]
  uploadedMedia       MediaItem[]
  roles               UsersOnRoles[]
  habilitations       AuctionHabilitation[]
}

model Role {
  id              String         @id @default(uuid())
  name            String         @unique
  nameNormalized  String         @unique
  description     String?
  permissions     Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  users           UsersOnRoles[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model State {
  id        String             @id @default(uuid())
  name      String
  uf        String             @unique
  slug      String?            @unique
  cityCount Int?               @default(0)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  cities    City[]
  auctions  Auction[]
  lots      Lot[]
  courts    Court[]
  districts JudicialDistrict[]
}

model City {
  id        String   @id @default(uuid())
  name      String
  slug      String?
  stateId   String
  state     State    @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateUf   String?
  ibgeCode  String?  @unique
  lotCount  Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  auctions  Auction[]
  lots      Lot[]
}

model LotCategory {
  id                   String            @id @default(uuid())
  name                 String            @unique
  slug                 String?           @unique
  description          String?           @db.VarChar(500)
  hasSubcategories     Boolean?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  subcategories        Subcategory[]
  auctions             Auction[]
  bens                 Bem[]
  lots                 Lot[]
  directSaleOffers     DirectSaleOffer[]
}

model Subcategory {
  id                String      @id @default(uuid())
  name              String
  slug              String?     @unique
  parentCategoryId  String
  parentCategory    LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  description       String?     @db.VarChar(500)
  displayOrder      Int?        @default(0)
  iconUrl           String?
  iconMediaId       String?
  dataAiHintIcon    String?
  bens              Bem[]
  lots              Lot[]
}

model Court {
  id                String             @id @default(uuid())
  name              String             @unique
  slug              String?            @unique
  stateId           String?
  state             State?             @relation(fields: [stateId], references: [id])
  stateUf           String?
  website           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialProcesses JudicialProcess[]
  judicialDistricts JudicialDistrict[]
  auctions          Auction[]
}

model JudicialDistrict {
  id                String             @id @default(uuid())
  name              String
  slug              String?            @unique
  courtId           String?
  court             Court?             @relation(fields: [courtId], references: [id])
  stateId           String?
  state             State?             @relation(fields: [stateId], references: [id])
  zipCode           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialProcesses JudicialProcess[]
  judicialBranches  JudicialBranch[]
  auctions          Auction[]
}

model JudicialBranch {
  id                String             @id @default(uuid())
  name              String
  slug              String?            @unique
  districtId        String?
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
  auctions          Auction[]
}

model JudicialProcess {
  id            String          @id @default(uuid())
  publicId      String?         @unique
  processNumber String          @unique
  isElectronic  Boolean         @default(true)
  courtId       String?
  court         Court?          @relation(fields: [courtId], references: [id])
  districtId    String?
  district      JudicialDistrict? @relation(fields: [districtId], references: [id])
  branchId      String?
  branch        JudicialBranch? @relation(fields: [branchId], references: [id])
  sellerId      String?
  seller        Seller?         @relation(fields: [sellerId], references: [id])
  parties       JudicialParty[]
  bens          Bem[]
  auctions      Auction[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model JudicialParty {
  id             String          @id @default(uuid())
  processId      String
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  name           String
  documentNumber String?
  partyType      String
}

model Seller {
  id                   String              @id @default(uuid())
  publicId             String?             @unique
  slug                 String?             @unique
  name                 String              @unique
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?             @db.Text
  isJudicial           Boolean             @default(false)
  judicialBranchId     String?
  judicialBranch       JudicialBranch?     @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  userId               String?             @unique
  user                 User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
  auctions             Auction[]
  lots                 Lot[]
  bens                 Bem[]
  judicialProcesses    JudicialProcess[]
  directSaleOffers     DirectSaleOffer[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model Auctioneer {
  id                   String    @id @default(uuid())
  publicId             String?   @unique
  slug                 String?   @unique
  name                 String
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?   @db.Text
  userId               String?   @unique
  user                 User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  auctions             Auction[]
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model Auction {
  id                             String                @id @default(uuid())
  publicId                       String?               @unique
  slug                           String?               @unique
  title                          String
  description                    String?               @db.Text
  status                         AuctionStatus?        @default(RASCUNHO)
  auctionDate                    DateTime?
  endDate                        DateTime?
  auctioneerId                   String?
  auctioneer                     Auctioneer?           @relation(fields: [auctioneerId], references: [id])
  sellerId                       String?
  seller                         Seller?               @relation(fields: [sellerId], references: [id])
  categoryId                     String?
  category                       LotCategory?          @relation(fields: [categoryId], references: [id])
  judicialProcessId              String?
  judicialProcess                JudicialProcess?      @relation(fields: [judicialProcessId], references: [id])
  cityId                         String?
  city                           City?                 @relation(fields: [cityId], references: [id])
  stateId                        String?
  state                          State?                @relation(fields: [stateId], references: [id])
  lots                           Lot[]
  auctionStages                  AuctionStage[]
  habilitations                  AuctionHabilitation[]
  bids                           Bid[]
  auctionType                    AuctionType?
  auctionMethod                  AuctionMethod?        @default(STANDARD)
  participation                  AuctionParticipation? @default(ONLINE)
  onlineUrl                      String?
  address                        String?
  zipCode                        String?
  latitude                       Float?
  longitude                      Float?
  imageUrl                       String?
  imageMediaId                   String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  automaticBiddingEnabled        Boolean               @default(false)
  allowInstallmentBids           Boolean               @default(true)
  silentBiddingEnabled           Boolean               @default(false)
  allowMultipleBidsPerUser       Boolean               @default(true)
  softCloseEnabled               Boolean               @default(false)
  softCloseMinutes               Int?                  @default(2)
  estimatedRevenue               Decimal?              @db.Decimal(15, 2)
  achievedRevenue                Decimal?              @db.Decimal(15, 2)
  totalHabilitatedUsers          Int?                  @default(0)
  isFeaturedOnMarketplace        Boolean               @default(false)
  marketplaceAnnouncementTitle   String?
  dataAiHint                     String?
  courtId                        String?
  court                          Court?                @relation(fields: [courtId], references: [id])
  districtId                     String?
  district                       JudicialDistrict?     @relation(fields: [districtId], references: [id])
  branchId                       String?
  branch                         JudicialBranch?       @relation(fields: [branchId], references: [id])
  decrementAmount                Decimal?              @db.Decimal(15, 2)
  decrementIntervalSeconds       Int?
  floorPrice                     Decimal?              @db.Decimal(15, 2)
  autoRelistSettings             Json?
  createdAt                      DateTime              @default(now())
  updatedAt                      DateTime              @updatedAt
}

model AuctionHabilitation {
  userId     String
  auctionId  String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction    Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@id([userId, auctionId])
}

model AuctionStage {
  id              String    @id @default(uuid())
  auctionId       String
  auction         Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  name            String
  startDate       DateTime
  endDate         DateTime
  evaluationValue Decimal?  @db.Decimal(15, 2)
  initialPrice    Decimal?  @db.Decimal(15, 2)
  status          String? // Ex: 'ABERTA', 'FECHADA'
  details         Json?
}

model LotBens {
  lotId   String
  bemId   String
  lot     Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bem     Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  
  @@id([lotId, bemId])
}

model Lot {
  id                           String                 @id @default(uuid())
  publicId                     String?                @unique
  auctionId                    String
  slug                         String?
  number                       String?
  title                        String
  description                  String?                @db.Text
  price                        Decimal                @db.Decimal(15, 2)
  initialPrice                 Decimal?               @db.Decimal(15, 2)
  secondInitialPrice           Decimal?               @db.Decimal(15, 2)
  evaluationValue              Decimal?               @db.Decimal(15, 2)
  bidIncrementStep             Decimal?               @db.Decimal(10, 2)
  status                       LotStatus?             @default(EM_BREVE)
  bidsCount                    Int?                   @default(0)
  views                        Int?                   @default(0)
  isFeatured                   Boolean?               @default(false)
  isExclusive                  Boolean?               @default(false)
  isRelisted                   Boolean                @default(false)
  relistCount                  Int                    @default(0)
  discountPercentage           Int?
  additionalTriggers           Json?
  imageUrl                     String?
  imageMediaId                 String?
  galleryImageUrls             Json?
  mediaItemIds                 Json?
  type                         String?
  categoryId                   String?
  category                     LotCategory?           @relation(fields: [categoryId], references: [id])
  subcategoryId                String?
  subcategory                  Subcategory?           @relation(fields: [subcategoryId], references: [id])
  auctionName                  String?
  sellerId                     String?
  seller                       Seller?                @relation(fields: [sellerId], references: [id])
  auctioneerId                 String?
  auctioneer                   Auctioneer?            @relation(fields: [auctioneerId], references: [id])
  cityId                       String?
  city                         City?                  @relation(fields: [cityId], references: [id])
  stateId                      String?
  state                        State?                 @relation(fields: [stateId], references: [id])
  cityName                     String?
  stateUf                      String?
  latitude                     Float?
  longitude                    Float?
  mapAddress                   String?
  mapEmbedUrl                  String?
  mapStaticImageUrl            String?
  endDate                      DateTime?
  auctionDate                  DateTime?
  lotSpecificAuctionDate       DateTime?
  secondAuctionDate            DateTime?
  condition                    String?
  dataAiHint                   String?
  winnerId                     String?
  winner                       User?                  @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  winningBidTermUrl            String?
  allowInstallmentBids         Boolean?               @default(false)
  bens                         LotBens[]
  bids                         Bid[]
  maxBids                      UserLotMaxBid[]
  reviews                      Review[]
  questions                    LotQuestion[]
  originalLotId                String?                @unique
  originalLot                  Lot?                   @relation("RelistedLot", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot                  Lot?                   @relation("RelistedLot")
  inheritedMediaFromBemId      String?
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
}

model Bid {
  id            String   @id @default(uuid())
  lotId         String
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId     String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidderId      String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lotId     String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model UserWin {
  id                String       @id @default(uuid())
  lotId             String       @unique
  lot               Lot          @relation(fields: [lotId], references: [id])
  userId            String
  user              User         @relation(fields: [userId], references: [id])
  winningBidAmount  Decimal      @db.Decimal(15, 2)
  winDate           DateTime     @default(now())
  paymentStatus     PaymentStatus @default(PENDENTE)
  invoiceUrl        String?
  installments      InstallmentPayment[]
}

model InstallmentPayment {
  id                 String      @id @default(uuid())
  userWinId          String
  userWin            UserWin     @relation(fields: [userWinId], references: [id], onDelete: Cascade)
  installmentNumber  Int
  amount             Decimal     @db.Decimal(15, 2)
  dueDate            DateTime
  status             PaymentStatus @default(PENDENTE)
  paymentDate        DateTime?
  paymentMethod      String?
  transactionId      String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
}


model Review {
  id              String   @id @default(uuid())
  lotId           String
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  userId          String
  userDisplayName String
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())
}

model LotQuestion {
  id                        String    @id @default(uuid())
  lotId                     String
  lot                       Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
  userId                    String
  userDisplayName           String
  questionText              String    @db.Text
  answerText                String?   @db.Text
  isPublic                  Boolean   @default(true)
  answeredByUserId          String?
  answeredByUserDisplayName String?
  createdAt                 DateTime  @default(now())
  answeredAt                DateTime?
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Bem {
  id                String   @id @default(uuid())
  publicId          String?  @unique
  title             String
  description       String?  @db.Text
  status            String   @default("DISPONIVEL")
  categoryId        String?
  category          LotCategory? @relation(fields: [categoryId], references: [id])
  subcategoryId     String?
  subcategory       Subcategory? @relation(fields: [subcategoryId], references: [id])
  judicialProcessId String?
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  sellerId          String?
  seller            Seller?  @relation(fields: [sellerId], references: [id])
  evaluationValue   Decimal? @db.Decimal(15, 2)
  imageUrl          String?
  imageMediaId      String?
  galleryImageUrls  Json?
  mediaItemIds      Json?
  dataAiHint        String?
  locationCity      String?
  locationState     String?
  address           String?
  latitude          Float?
  longitude         Float?
  lots              LotBens[]

  // Vehicle specific
  plate                   String?
  make                    String?
  model                   String?
  version                 String?
  year                    Int?
  modelYear               Int?
  mileage                 Int?
  color                   String?
  fuelType                String?
  transmissionType        String?
  bodyType                String?
  vin                     String?
  renavam                 String?
  enginePower             String?
  numberOfDoors           Int?
  vehicleOptions          String?  @db.VarChar(500)
  detranStatus            String?
  debts                   String?  @db.VarChar(500)
  runningCondition        String?
  bodyCondition           String?
  tiresCondition          String?
  hasKey                  Boolean?

  // Real Estate specific
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Decimal? @db.Decimal(10, 2)
  builtArea                  Decimal? @db.Decimal(10, 2)
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?  @db.VarChar(500)
  infrastructure             String?  @db.VarChar(500)
  condoDetails               String?  @db.VarChar(500)
  improvements               String?  @db.VarChar(500)
  topography                 String?
  liensAndEncumbrances       String?  @db.Text
  propertyDebts              String?  @db.VarChar(500)
  unregisteredRecords        String?  @db.VarChar(500)
  hasHabiteSe                Boolean?
  zoningRestrictions         String?

  // Electronics specific
  brand                 String?
  serialNumber          String?
  itemCondition         String?
  specifications        String?  @db.Text
  includedAccessories   String?  @db.VarChar(500)
  batteryCondition      String?
  hasInvoice            Boolean?
  hasWarranty           Boolean?
  repairHistory         String?  @db.VarChar(500)

  // Appliance specific
  applianceCapacity   String?
  voltage             String?
  applianceType       String?
  additionalFunctions String?

  // Machinery specific
  hoursUsed         Int?
  engineType        String?
  capacityOrPower   String?
  maintenanceHistory String?  @db.Text
  installationLocation String?
  compliesWithNR    String?
  operatingLicenses String?
  
  // Livestock specific
  breed                 String?
  age                   String?
  sex                   String?
  weight                String?
  individualId          String?
  purpose               String?
  sanitaryCondition     String?
  vaccinationStatus     String?
  lineage               String?
  isPregnant            Boolean?
  specialSkills         String?
  gtaDocument           String?
  breedRegistryDocument String?

  // Furniture
  furnitureType String?
  material      String?
  style         String?
  dimensions    String?
  pieceCount    Int?
  
  // Jewelry
  jewelryType             String?
  metal                   String?
  gemstones               String? @db.VarChar(500)
  totalWeight             String?
  jewelrySize             String?
  authenticityCertificate String?

  // Art/Antiques
  workType   String?
  artist     String?
  period     String?
  technique  String?
  provenance String? @db.VarChar(500)

  // Boats
  boatType         String?
  boatLength       String?
  hullMaterial     String?
  onboardEquipment String? @db.Text

  // Food
  productName       String?
  quantity          String?
  packagingType     String?
  expirationDate    DateTime?
  storageConditions String?

  // Precious Metals
  preciousMetalType String?
  purity            String?

  // Forest Goods
  forestGoodsType  String?
  volumeOrQuantity String?
  species          String?
  dofNumber        String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model MediaItem {
  id              String   @id @default(uuid())
  fileName        String   @unique
  storagePath     String
  title           String?
  altText         String?
  caption         String?  @db.VarChar(500)
  description     String?  @db.Text
  mimeType        String
  sizeBytes       Int?
  urlOriginal     String
  urlThumbnail    String?
  urlMedium       String?
  urlLarge        String?
  linkedLotIds    Json?
  dataAiHint      String?
  judicialProcessId String?
  uploadedBy      User?     @relation(fields: [uploadedByUserId], references: [id])
  uploadedByUserId String?
  uploadedAt      DateTime @default(now())
}

model DocumentType {
  id          String         @id @default(uuid())
  name        String
  description String?
  isRequired  Boolean        @default(true)
  appliesTo   String?        // 'PHYSICAL', 'LEGAL', 'ALL', 'PROCESS'
  documents   UserDocument[]
}

model UserDocument {
  id              String           @id @default(uuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentTypeId  String
  documentType    DocumentType     @relation(fields: [documentTypeId], references: [id])
  status          UserDocumentStatus @default(PENDING_ANALYSIS)
  fileUrl         String
  fileName        String?
  rejectionReason String?          @db.Text
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([userId, documentTypeId])
}

model DirectSaleOffer {
  id                 String                @id @default(uuid())
  publicId           String?               @unique
  title              String
  description        String?               @db.Text
  offerType          DirectSaleOfferType
  price              Decimal?              @db.Decimal(15, 2)
  minimumOfferPrice  Decimal?              @db.Decimal(15, 2)
  status             DirectSaleOfferStatus @default(ACTIVE)
  category           String
  categoryId         String?
  sellerId           String?
  seller             Seller?               @relation(fields: [sellerId], references: [id])
  sellerName         String?
  sellerLogoUrl      String?
  dataAiHintSellerLogo String?
  locationCity       String?
  locationState      String?
  imageUrl           String?
  imageMediaId       String?
  dataAiHint         String?
  galleryImageUrls   Json?
  mediaItemIds       Json?
  itemsIncluded      Json?
  views              Int?                  @default(0)
  expiresAt          DateTime?
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
}

// Model para armazenar mensagens do formulário de contato público.
model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

// Model para configurações globais da plataforma.
// A intenção é ter apenas um registro nesta tabela.
model PlatformSettings {
  id                             String                @id @default("global")
  siteTitle                      String?
  siteTagline                    String?
  logoUrl                        String?
  faviconUrl                     String?
  galleryImageBasePath           String?
  storageProvider                String? // 'local', 'firebase'
  firebaseStorageBucket          String?
  activeThemeName                String?
  themes                         Json?
  platformPublicIdMasks          Json?
  homepageSections               Json?
  mentalTriggerSettings          Json?
  sectionBadgeVisibility         Json?
  mapSettings                    Json?
  searchPaginationType           String? // 'loadMore', 'numberedPages'
  searchItemsPerPage             Int?
  searchLoadMoreCount            Int?
  showCountdownOnLotDetail       Boolean?
  showCountdownOnCards           Boolean?
  showRelatedLotsOnLotDetail     Boolean?
  relatedLotsCount               Int?
  defaultUrgencyTimerHours       Int?
  variableIncrementTable         Json?
  biddingSettings                Json?
  paymentGatewaySettings         Json?
  defaultListItemsPerPage        Int?
  updatedAt                      DateTime              @updatedAt
}

model VehicleMake {
    id    String @id @default(uuid())
    name  String @unique
    slug  String @unique
    models VehicleModel[]
}

model VehicleModel {
    id      String @id @default(uuid())
    name    String 
    slug    String @unique
    makeId  String
    make    VehicleMake @relation(fields: [makeId], references: [id])
    
    @@unique([name, makeId])
}
