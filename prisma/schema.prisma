
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// MODELOS DE NEGÓCIO PRINCIPAIS
// =================================================================

model Auction {
  id                            String    @id @default(uuid())
  publicId                      String    @unique @default(uuid())
  slug                          String?   @unique
  title                         String
  description                   String?   @db.Text
  status                        String    @default("RASCUNHO")
  auctionDate                   DateTime? @default(now())
  endDate                       DateTime?
  auctioneerId                  String?
  sellerId                      String?
  categoryId                    String?
  auctionType                   String?
  imageUrl                      String?
  imageMediaId                  String?
  documentsUrl                  String?
  evaluationReportUrl           String?
  auctionCertificateUrl         String?
  visits                        Int       @default(0)
  totalLots                     Int       @default(0)
  initialOffer                  Float?
  isFavorite                    Boolean   @default(false)
  dataAiHint                    String?
  isFeaturedOnMarketplace       Boolean   @default(false)
  marketplaceAnnouncementTitle  String?
  automaticBiddingEnabled       Boolean   @default(false)
  silentBiddingEnabled          Boolean   @default(false)
  allowMultipleBidsPerUser      Boolean   @default(true)
  allowInstallmentBids          Boolean   @default(false)
  softCloseEnabled              Boolean   @default(false)
  softCloseMinutes              Int?      @default(2)
  estimatedRevenue              Float?
  achievedRevenue               Float?    @default(0)
  totalHabilitatedUsers         Int?      @default(0)
  judicialProcessId             String?
  sellingBranch                 String?
  additionalTriggers            Json?
  decrementAmount               Float?
  decrementIntervalSeconds      Int?
  floorPrice                    Float?
  autoRelistSettings            Json?
  createdAt                     DateTime  @default(now())
  updatedAt                     DateTime  @updatedAt
  mapAddress                    String?
  latitude                      Float?
  longitude                     Float?

  auctioneer             Auctioneer?         @relation(fields: [auctioneerId], references: [id])
  seller                 Seller?             @relation(fields: [sellerId], references: [id])
  category               LotCategory?        @relation(fields: [categoryId], references: [id])
  judicialProcess        JudicialProcess?    @relation(fields: [judicialProcessId], references: [id])
  lots                   Lot[]
  bids                   Bid[]
  auctionHabilitations   AuctionHabilitation[]
  auctionStages          AuctionStage[]
  court                  Court?              @relation(fields: [courtId], references: [id])
  courtId                String?
  judicialBranch         JudicialBranch?     @relation(fields: [judicialBranchId], references: [id])
  judicialBranchId       String?
  judicialDistrict       JudicialDistrict?   @relation(fields: [judicialDistrictId], references: [id])
  judicialDistrictId     String?
}

model AuctionStage {
  id           String    @id @default(uuid())
  auctionId    String
  name         String
  startDate    DateTime
  endDate      DateTime
  initialPrice Float?
  
  auction      Auction     @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}


model Lot {
  id                       String     @id @default(uuid())
  publicId                 String     @unique @default(uuid())
  auctionId                String
  slug                     String?
  number                   String?
  title                    String
  description              String?    @db.Text
  price                    Float      @default(0)
  initialPrice             Float?
  secondInitialPrice       Float?
  bidIncrementStep         Float?
  status                   String     @default("EM_BREVE")
  bidsCount                Int        @default(0)
  views                    Int        @default(0)
  isFeatured               Boolean    @default(false)
  isExclusive              Boolean    @default(false)
  discountPercentage       Int?
  additionalTriggers       Json?
  imageUrl                 String?
  imageMediaId             String?
  galleryImageUrls         Json?
  mediaItemIds             Json?
  type                     String?
  categoryId               String?
  subcategoryId            String?
  auctionName              String?
  sellerId                 String?
  sellerName               String?
  auctioneerId             String?
  cityId                   String?
  stateId                  String?
  cityName                 String?
  stateUf                  String?
  latitude                 Float?
  longitude                Float?
  mapAddress               String?
  mapEmbedUrl              String?
  mapStaticImageUrl        String?
  endDate                  DateTime?
  auctionDate              DateTime?
  lotSpecificAuctionDate   DateTime?
  secondAuctionDate        DateTime?
  condition                String?
  dataAiHint               String?
  winnerId                 String?
  winningBidTermUrl        String?
  allowInstallmentBids     Boolean    @default(false)
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt

  auction          Auction?        @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category         LotCategory?    @relation(fields: [categoryId], references: [id])
  subcategory      Subcategory?    @relation(fields: [subcategoryId], references: [id])
  seller           Seller?         @relation(fields: [sellerId], references: [id])
  city             City?           @relation(fields: [cityId], references: [id])
  state            State?          @relation(fields: [stateId], references: [id])
  winner           User?           @relation(name: "LotWinner", fields: [winnerId], references: [id])
  bids             Bid[]
  questions        LotQuestion[]
  reviews          Review[]
  bens             LotBens[]
  maxBids          UserLotMaxBid[]
}

model Bem {
  id                       String     @id @default(uuid())
  publicId                 String     @unique @default(uuid())
  title                    String
  description              String?    @db.Text
  status                   String     @default("DISPONIVEL") // DISPONIVEL, LOTEADO, VENDIDO, REMOVIDO, INATIVADO
  categoryId               String?
  subcategoryId            String?
  judicialProcessId        String?
  sellerId                 String?
  evaluationValue          Float?
  imageUrl                 String?
  imageMediaId             String?
  galleryImageUrls         Json?
  mediaItemIds             Json?
  dataAiHint               String?
  locationCity             String?
  locationState            String?
  address                  String?
  latitude                 Float?
  longitude                Float?
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt

  // Veículos
  plate                 String?
  make                  String?
  model                 String?
  version               String?
  year                  Int?
  modelYear             Int?
  mileage               Int?
  color                 String?
  fuelType              String?
  transmissionType      String?
  bodyType              String?
  vin                   String?    @unique
  renavam               String?    @unique
  enginePower           String?
  numberOfDoors         Int?
  vehicleOptions        String?    @db.Text
  detranStatus          String?
  debts                 String?    @db.Text
  runningCondition      String?
  bodyCondition         String?
  tiresCondition        String?
  hasKey                Boolean?   @default(false)

  // Imóveis
  propertyRegistrationNumber String? @unique
  iptuNumber                 String? @unique
  isOccupied                 Boolean? @default(false)
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String? @db.Text
  infrastructure             String? @db.Text
  condoDetails               String? @db.Text
  improvements               String? @db.Text
  topography                 String?
  liensAndEncumbrances       String? @db.Text
  propertyDebts              String? @db.Text
  unregisteredRecords        String? @db.Text
  hasHabiteSe                Boolean? @default(false)
  zoningRestrictions         String?

  // Eletrônicos & Eletrodomésticos & Joias etc.
  brand                 String?
  serialNumber          String?
  itemCondition         String?
  specifications        String?    @db.Text
  includedAccessories   String?    @db.Text
  batteryCondition      String?
  hasInvoice            Boolean?
  hasWarranty           Boolean?
  repairHistory         String?
  applianceCapacity     String?
  voltage               String?
  applianceType         String?
  additionalFunctions   String?    @db.Text
  
  // Maquinário
  hoursUsed             Int?
  engineType            String?
  capacityOrPower       String?
  maintenanceHistory    String?    @db.Text
  installationLocation  String?
  compliesWithNR        String?
  operatingLicenses     String?

  // Semoventes
  breed                     String?
  age                       String?
  sex                       String? // 'Macho' ou 'Fêmea'
  weight                    String?
  individualId              String?
  purpose                   String?
  sanitaryCondition         String?
  vaccinationStatus         String?
  lineage                   String?
  isPregnant                Boolean?
  specialSkills             String?
  gtaDocument               String?
  breedRegistryDocument     String?

  // Móveis
  furnitureType String?
  material      String?
  style         String?
  dimensions    String?
  pieceCount    Int?

  // Joias
  jewelryType            String?
  metal                  String?
  gemstones              String? @db.Text
  totalWeight            String?
  jewelrySize            String?
  authenticityCertificate String?

  // Obras de Arte
  workType              String?
  artist                String?
  period                String?
  technique             String?
  provenance            String? @db.Text

  // Embarcações
  boatType          String?
  boatLength        String?
  hullMaterial      String?
  onboardEquipment  String? @db.Text

  // Alimentos
  productName       String?
  quantity          String?
  packagingType     String?
  expirationDate    DateTime?
  storageConditions String?

  // Metais Preciosos e Pedras
  preciousMetalType   String?
  purity              String?

  // Bens Florestais
  forestGoodsType   String?
  volumeOrQuantity  String?
  species           String?
  dofNumber         String?

  category          LotCategory?     @relation(fields: [categoryId], references: [id])
  subcategory       Subcategory?     @relation(fields: [subcategoryId], references: [id])
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller            Seller?          @relation(fields: [sellerId], references: [id])
  lots              LotBens[]
}

model LotBens {
  lotId   String
  bemId   String
  lot     Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bem     Bem     @relation(fields: [bemId], references: [id], onDelete: Cascade)

  @@id([lotId, bemId])
}

// =================================================================
// MODELOS DE USUÁRIOS E PERMISSÕES
// =================================================================

model User {
  id                    String    @id @default(uuid())
  email                 String    @unique
  password              String?
  fullName              String?
  habilitationStatus    String    @default("PENDING_DOCUMENTS")
  accountType           String    @default("PHYSICAL")
  avatarUrl             String?
  dataAiHint            String?
  badges                Json?
  cpf                   String?
  cellPhone             String?
  homePhone             String?
  dateOfBirth           DateTime?
  rgNumber              String?
  rgIssuer              String?
  rgIssueDate           DateTime?
  rgState               String?
  gender                String?
  profession            String?
  nationality           String?
  maritalStatus         String?
  propertyRegime        String?
  spouseName            String?
  spouseCpf             String?
  zipCode               String?
  street                String?
  number                String?
  complement            String?
  neighborhood          String?
  city                  String?
  state                 String?
  razaoSocial           String?
  cnpj                  String?
  inscricaoEstadual     String?
  website               String?
  responsibleName       String?
  responsibleCpf        String?
  optInMarketing        Boolean   @default(false)
  sellerId              String?   @unique
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  seller                Seller?
  roles                 UsersOnRoles[]
  bids                  Bid[]
  wins                  Lot[]           @relation("LotWinner")
  documents             UserDocument[]
  uploadedMedia         MediaItem[]
  questions             LotQuestion[]
  reviews               Review[]
  notifications         Notification[]
  maxBids               UserLotMaxBid[]
  auctionHabilitations  AuctionHabilitation[]
}

model Role {
  id              String         @id @default(uuid())
  name            String         @unique
  nameNormalized  String         @unique
  description     String?
  permissions     String[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  users           UsersOnRoles[]
}

model UsersOnRoles {
  userId      String
  roleId      String
  assignedAt  DateTime @default(now())
  assignedBy  String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model DocumentType {
    id          String @id @default(uuid())
    name        String @unique
    description String?
    isRequired  Boolean @default(true)
    appliesTo   String // Comma separated: PHYSICAL,LEGAL,ALL,PROCESS
    
    userDocuments UserDocument[]
}

model UserDocument {
    id              String @id @default(uuid())
    userId          String
    documentTypeId  String
    status          String @default("PENDING") // PENDING_ANALYSIS, APPROVED, REJECTED
    fileUrl         String
    fileName        String?
    rejectionReason String? @db.Text
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    documentType DocumentType @relation(fields: [documentTypeId], references: [id])

    @@unique([userId, documentTypeId])
}


// =================================================================
// MODELOS DE RELACIONAMENTO E TRANSAÇÕES
// =================================================================

model Bid {
  id              String   @id @default(uuid())
  lotId           String
  auctionId       String
  bidderId        String
  bidderDisplay   String?
  amount          Float
  timestamp       DateTime @default(now())

  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder    User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
    id              String @id @default(uuid())
    lotId           String @unique
    userId          String
    winningBidAmount Float
    winDate         DateTime @default(now())
    paymentStatus   String @default("PENDENTE")
    invoiceUrl      String?

    user User @relation(fields: [userId], references: [id])
    lot  Lot @relation(fields: [lotId], references: [id])
}

model UserLotMaxBid {
  id          String   @id @default(uuid())
  userId      String
  lotId       String
  maxAmount   Float
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lotId])
}

model AuctionHabilitation {
  userId        String
  auctionId     String
  habilitatedAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  
  @@id([userId, auctionId])
}

// =================================================================
// MODELOS DE CONTEÚDO E SUPORTE
// =================================================================

model LotCategory {
  id                  String  @id @default(uuid())
  name                String  @unique
  slug                String  @unique
  description         String? @db.Text
  hasSubcategories    Boolean @default(false)
  logoUrl             String?
  logoMediaId         String?
  dataAiHintIcon      String?
  coverImageUrl       String?
  coverImageMediaId   String?
  dataAiHintCover     String?
  megaMenuImageUrl    String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu  String?
  iconName            String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  lots             Lot[]
  subcategories    Subcategory[]
  auctions         Auction[]
  bens             Bem[]
}

model Subcategory {
  id              String  @id @default(uuid())
  name            String
  slug            String? @unique
  parentCategoryId String
  description     String? @db.Text
  displayOrder    Int     @default(0)
  iconUrl         String?
  iconMediaId     String?
  dataAiHintIcon  String?

  parentCategory LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots           Lot[]
  bens           Bem[]
}

model Review {
    id              String @id @default(uuid())
    lotId           String
    userId          String
    auctionId       String
    userDisplayName String
    rating          Int
    comment         String @db.Text
    createdAt       DateTime @default(now())

    lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LotQuestion {
    id                       String @id @default(uuid())
    lotId                    String
    userId                   String
    auctionId                String
    userDisplayName          String
    questionText             String @db.Text
    answerText               String? @db.Text
    answeredByUserId         String?
    answeredByUserDisplayName String?
    isPublic                 Boolean @default(true)
    createdAt                DateTime @default(now())
    answeredAt               DateTime?

    lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model MediaItem {
  id            String   @id @default(uuid())
  fileName      String
  storagePath   String   @unique
  title         String
  altText       String?
  caption       String?
  description   String?  @db.Text
  mimeType      String
  sizeBytes     Int
  urlOriginal   String
  urlThumbnail  String?
  urlMedium     String?
  urlLarge      String?
  linkedLotIds  Json?
  dataAiHint    String?
  uploadedBy    String
  uploadedAt    DateTime @default(now())
  
  judicialProcessId String?
  user          User?      @relation(fields: [uploadedBy], references: [id])
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
}

model ContactMessage {
    id        String @id @default(uuid())
    name      String
    email     String
    subject   String?
    message   String @db.Text
    isRead    Boolean @default(false)
    createdAt DateTime @default(now())
}

model DocumentTemplate {
  id      String   @id @default(uuid())
  name    String   @unique
  type    String // e.g., WINNING_BID_TERM, EVALUATION_REPORT, AUCTION_CERTIFICATE
  content String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// =================================================================
// MODELOS DE ENTIDADES (COMITENTES, LEILOEIROS)
// =================================================================

model Seller {
  id                  String  @id @default(uuid())
  publicId            String? @unique
  slug                String? @unique
  name                String  @unique
  contactName         String?
  email               String? @unique
  phone               String?
  address             String?
  city                String?
  state               String?
  zipCode             String?
  website             String?
  logoUrl             String?
  logoMediaId         String?
  dataAiHintLogo      String?
  description         String? @db.Text
  isJudicial          Boolean @default(false)
  userId              String? @unique
  judicialBranchId    String? @unique
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  user                User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  auctions            Auction[]
  bens                Bem[]
  lots                Lot[]
  directSaleOffers    DirectSaleOffer[]
  judicialBranch      JudicialBranch?   @relation(fields: [judicialBranchId], references: [id])
}

model Auctioneer {
  id                      String    @id @default(uuid())
  publicId                String    @unique
  slug                    String?   @unique
  name                    String
  registrationNumber      String?
  contactName             String?
  email                   String?
  phone                   String?
  address                 String?
  city                    String?
  state                   String?
  zipCode                 String?
  website                 String?
  logoUrl                 String?
  logoMediaId             String?
  dataAiHintLogo          String?
  description             String?   @db.Text
  userId                  String?   @unique
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  
  user                    User?     @relation(fields: [userId], references: [id])
  auctions                Auction[]
}

// =================================================================
// MODELOS DE LOCALIZAÇÃO E ENTIDADES JUDICIAIS
// =================================================================

model State {
  id      String @id @default(uuid())
  name    String
  uf      String @unique
  slug    String? @unique
  
  cities    City[]
  districts JudicialDistrict[]
}

model City {
  id        String   @id @default(uuid())
  name      String
  slug      String?
  stateId   String
  stateUf   String?
  ibgeCode  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  state     State    @relation(fields: [stateId], references: [id])
  lots      Lot[]
}


model Court {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String?  @unique
  stateUf   String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  districts JudicialDistrict[]
  processes JudicialProcess[]
  auctions  Auction[]
}

model JudicialDistrict {
  id        String   @id @default(uuid())
  name      String
  slug      String?  @unique
  courtId   String?
  stateId   String?
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  court     Court?   @relation(fields: [courtId], references: [id])
  state     State?   @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]
  auctions  Auction[]
}

model JudicialBranch {
  id           String   @id @default(uuid())
  name         String
  slug         String?  @unique
  districtId   String?
  contactName  String?
  phone        String?
  email        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  district     JudicialDistrict? @relation(fields: [districtId], references: [id])
  processes    JudicialProcess[]
  seller       Seller?
  auctions     Auction[]
}

model JudicialProcess {
  id            String   @id @default(uuid())
  publicId      String?  @unique
  processNumber String   @unique
  isElectronic  Boolean  @default(true)
  courtId       String?
  districtId    String?
  branchId      String?
  sellerId      String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  court         Court?            @relation(fields: [courtId], references: [id])
  district      JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch        JudicialBranch?   @relation(fields: [branchId], references: [id])
  seller        Seller?           @relation(fields: [sellerId], references: [id])
  parties       JudicialParty[]
  bens          Bem[]
  media         MediaItem[]
  auctions      Auction[]
}

model JudicialParty {
  id              String   @id @default(uuid())
  processId       String
  name            String
  documentNumber  String?
  partyType       String // 'AUTOR', 'REU', 'ADVOGADO_AUTOR', 'ADVOGADO_REU', etc.

  process         JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

// =================================================================
// MODELOS DE PLATAFORMA E CONFIGURAÇÕES
// =================================================================

model PlatformSettings {
  id                              String  @id @default("global")
  siteTitle                       String?
  siteTagline                     String?
  logoUrl                         String?
  faviconUrl                      String?
  galleryImageBasePath            String?
  storageProvider                 String?
  firebaseStorageBucket           String?
  activeThemeName                 String?
  themes                          Json?
  platformPublicIdMasks           Json?
  homepageSections                Json?
  mentalTriggerSettings           Json?
  sectionBadgeVisibility          Json?
  mapSettings                     Json?
  searchPaginationType            String?
  searchItemsPerPage              Int?
  searchLoadMoreCount             Int?
  showCountdownOnLotDetail        Boolean?
  showCountdownOnCards            Boolean?
  showRelatedLotsOnLotDetail      Boolean?
  relatedLotsCount                Int?
  defaultUrgencyTimerHours        Int?
  variableIncrementTable          Json?
  biddingSettings                 Json?
  defaultListItemsPerPage         Int?
  updatedAt                       DateTime? @updatedAt
}

model Notification {
  id          String   @id @default(uuid())
  userId      String
  message     String
  link        String?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DirectSaleOffer {
  id                   String   @id @default(uuid())
  publicId             String?  @unique
  title                String
  description          String?  @db.Text
  offerType            String?
  price                Float?
  minimumOfferPrice    Float?
  status               String?  @default("ACTIVE")
  categoryId           String?
  sellerId             String?
  sellerName           String?
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int      @default(0)
  expiresAt            DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  category             LotCategory? @relation(fields: [categoryId], references: [id])
  seller               Seller?      @relation(fields: [sellerId], references: [id])
}
