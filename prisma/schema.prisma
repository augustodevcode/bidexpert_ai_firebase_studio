// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// =================================================================
// 1. MODELS WITHOUT FOREIGN KEY DEPENDENCIES (BASE TABLES)
// =================================================================

model Role {
  id              String         @id @default(cuid())
  name            String         @unique
  nameNormalized  String         @unique
  description     String?        @db.VarChar(255)
  permissions     Json?
  users           UsersOnRoles[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model State {
  id        String             @id @default(cuid())
  name      String
  uf        String             @unique
  slug      String             @unique
  cities    City[]
  districts JudicialDistrict[]
  lots      Lot[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model LotCategory {
  id                   String        @id @default(cuid())
  name                 String        @unique
  slug                 String        @unique
  description          String?       @db.VarChar(500)
  hasSubcategories     Boolean       @default(false)
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  subcategories        Subcategory[]
  auctions             Auction[]
  lots                 Lot[]
  bens                 Bem[]
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
}

model DocumentTemplate {
  id        String   @id @default(cuid())
  name      String
  type      String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentType {
  id              String         @id @default(cuid())
  name            String
  description     String?
  isRequired      Boolean        @default(true)
  appliesTo       String // e.g., 'PHYSICAL', 'LEGAL', 'ALL'
  userDocuments   UserDocument[]
}

// =================================================================
// 2. MODELS WITH DEPENDENCIES
// =================================================================

model User {
  id                   String          @id @default(cuid())
  email                String          @unique
  password             String?
  fullName             String?
  roleId               String? // Legacy, consider for removal
  sellerId             String?         @unique // For 1-to-1 relation with Seller
  habilitationStatus   String          @default("PENDING_DOCUMENTS")
  accountType          String          @default("PHYSICAL")
  avatarUrl            String?
  dataAiHint           String?
  badges               Json?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  roles                UsersOnRoles[]
  seller               Seller?
  auctioneer           Auctioneer?
  bids                 Bid[]
  wins                 UserWin[]
  documents            UserDocument[]
  mediaItems           MediaItem[]
  maxBids              UserLotMaxBid[]
  habilitations        AuctionHabilitation[]
  wonLots              Lot[]              @relation("WonLots")
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model City {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  stateId   String
  stateUf   String
  ibgeCode  String?  @unique
  lotCount  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state     State    @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots      Lot[]
}

model Subcategory {
  id                String      @id @default(cuid())
  name              String
  slug              String      @unique
  parentCategoryId  String
  description       String?     @db.VarChar(500)
  displayOrder      Int         @default(0)
  iconUrl           String?
  iconMediaId       String?
  dataAiHintIcon    String?
  parentCategory    LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots              Lot[]
  bens              Bem[]
}

model Court {
  id        String             @id @default(cuid())
  name      String             @unique
  slug      String             @unique
  stateUf   String?
  website   String?
  districts JudicialDistrict[]
  processes JudicialProcess[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model Lot {
  id                         String   @id @default(cuid())
  publicId                   String   @unique @default(cuid())
  auctionId                  String
  slug                       String?
  number                     String?
  title                      String
  description                String?  @db.Text
  price                      Float
  initialPrice               Float?
  secondInitialPrice         Float?
  bidIncrementStep           Float?
  status                     String   @default("EM_BREVE")
  bidsCount                  Int      @default(0)
  views                      Int      @default(0)
  isFeatured                 Boolean  @default(false)
  isExclusive                Boolean  @default(false)
  discountPercentage         Int?
  additionalTriggers         Json?
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  type                       String // Simplified from category name
  categoryId                 String?
  subcategoryId              String?
  auctionName                String? // Denormalized
  sellerId                   String?
  sellerName                 String? // Denormalized
  auctioneerId               String?
  cityId                     String?
  stateId                    String?
  cityName                   String?  // Denormalized
  stateUf                    String?  // Denormalized
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?  @db.VarChar(500)
  mapStaticImageUrl          String?
  endDate                    DateTime?
  auctionDate                DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  dataAiHint                 String?
  winnerId                   String?
  winningBidTermUrl          String?
  allowInstallmentBids       Boolean? @default(false)
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  
  auction         Auction          @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category        LotCategory?     @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory?     @relation(fields: [subcategoryId], references: [id])
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  city            City?            @relation(fields: [cityId], references: [id])
  state           State?           @relation(fields: [stateId], references: [id])
  winner          User?            @relation("WonLots", fields: [winnerId], references: [id])
  maxBids         UserLotMaxBid[]
  bens            LotBens[]
  bids            Bid[]
  win             UserWin[]
}

model Bem {
  id              String      @id @default(cuid())
  publicId        String      @unique @default(cuid())
  title           String
  description     String?     @db.Text
  status          String      @default("DISPONIVEL")
  categoryId      String
  subcategoryId   String?
  judicialProcessId String?
  sellerId        String?
  evaluationValue Float?
  imageUrl        String?
  imageMediaId    String?
  galleryImageUrls Json?
  mediaItemIds    Json?
  dataAiHint      String?
  locationCity    String?
  locationState   String?
  address         String?
  latitude        Float?
  longitude       Float?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  category       LotCategory      @relation(fields: [categoryId], references: [id])
  subcategory    Subcategory?     @relation(fields: [subcategoryId], references: [id])
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  lots            LotBens[]
}

model LotBens {
  lot     Lot     @relation(fields: [lotId], references: [id])
  lotId   String
  bem     Bem     @relation(fields: [bemId], references: [id])
  bemId   String
  @@id([lotId, bemId])
}


model Auction {
  id                           String          @id @default(cuid())
  publicId                     String          @unique @default(cuid())
  slug                         String          @unique
  title                        String
  description                  String?         @db.Text
  status                       String          @default("RASCUNHO")
  auctionDate                  DateTime        @default(now())
  endDate                      DateTime?
  totalLots                    Int             @default(0)
  auctioneerId                 String
  sellerId                     String
  categoryId                   String?
  auctionType                  String?
  imageUrl                     String?
  imageMediaId                 String?
  dataAiHint                   String?
  documentsUrl                 String?
  visits                       Int             @default(0)
  initialOffer                 Float?
  isFavorite                   Boolean         @default(false)
  isFeaturedOnMarketplace      Boolean         @default(false)
  marketplaceAnnouncementTitle String?
  evaluationReportUrl          String?
  auctionCertificateUrl        String?
  sellingBranch                String?
  automaticBiddingEnabled      Boolean         @default(false)
  silentBiddingEnabled         Boolean         @default(false)
  allowMultipleBidsPerUser     Boolean         @default(true)
  allowInstallmentBids         Boolean         @default(false)
  softCloseEnabled             Boolean         @default(false)
  softCloseMinutes             Int             @default(2)
  estimatedRevenue             Float?
  achievedRevenue              Float?
  totalHabilitatedUsers        Int?
  judicialProcessId            String?
  decrementAmount              Float?
  decrementIntervalSeconds     Int?
  floorPrice                   Float?
  createdAt                    DateTime        @default(now())
  updatedAt                    DateTime        @updatedAt

  auctionStages      Json?
  autoRelistSettings Json?
  
  auctioneer    Auctioneer        @relation(fields: [auctioneerId], references: [id])
  seller        Seller            @relation(fields: [sellerId], references: [id])
  category      LotCategory?      @relation(fields: [categoryId], references: [id])
  lots          Lot[]
  bids          Bid[]
  habilitations AuctionHabilitation[]
}

model Seller {
  id                   String            @id @default(cuid())
  publicId             String            @unique @default(cuid())
  slug                 String            @unique
  name                 String            @unique
  contactName          String?
  email                String?           @unique
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?           @db.Text
  userId               String?           @unique
  isJudicial           Boolean           @default(false)
  judicialBranchId     String?           @unique
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  
  user           User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
  judicialBranch JudicialBranch?     @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  auctions       Auction[]
  lots           Lot[]
  bens           Bem[]
  judicialProcesses JudicialProcess[]
  directSaleOffers  DirectSaleOffer[]
}

model Auctioneer {
  id                 String    @id @default(cuid())
  publicId           String    @unique @default(cuid())
  slug               String    @unique
  name               String
  registrationNumber String?
  contactName        String?
  email              String?   @unique
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?   @db.Text
  userId             String?   @unique
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  user     User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  auctions Auction[]
}

model JudicialDistrict {
  id         String           @id @default(cuid())
  name       String
  slug       String           @unique
  courtId    String?
  stateId    String
  zipCode    String?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  
  court     Court?           @relation(fields: [courtId], references: [id], onDelete: SetNull)
  state     State            @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]
}

model JudicialBranch {
  id           String             @id @default(cuid())
  name         String
  slug         String             @unique
  districtId   String
  contactName  String?
  phone        String?
  email        String?            @unique
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  
  district  JudicialDistrict   @relation(fields: [districtId], references: [id])
  processes JudicialProcess[]
  sellers   Seller[]
}

model JudicialProcess {
  id             String   @id @default(cuid())
  publicId       String   @unique @default(cuid())
  processNumber  String
  isElectronic   Boolean  @default(true)
  courtId        String?
  districtId     String?
  branchId       String?
  sellerId       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  court    Court?            @relation(fields: [courtId], references: [id])
  district JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch   JudicialBranch?   @relation(fields: [branchId], references: [id])
  seller   Seller?           @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties  JudicialParty[]
  bens     Bem[]
}

model JudicialParty {
  id             String          @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      String
  
  process JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model MediaItem {
  id               String   @id @default(cuid())
  fileName         String   @unique
  storagePath      String
  title            String?
  altText          String?
  caption          String?  @db.VarChar(500)
  description      String?  @db.Text
  mimeType         String
  sizeBytes        Int
  urlOriginal      String
  urlThumbnail     String?
  urlMedium        String?
  urlLarge         String?
  linkedLotIds     Json?
  dataAiHint       String?
  uploadedBy       String?
  uploadedAt       DateTime @default(now())
  
  user User? @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)
}

model UserDocument {
  id              String       @id @default(cuid())
  userId          String
  documentTypeId  String
  status          String       @default("PENDING")
  fileUrl         String
  fileName        String?
  rejectionReason String?      @db.Text
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType DocumentType @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String?
  amount        Float
  timestamp     DateTime @default(now())
  
  lot     Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder  User    @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String   @id @default(cuid())
  lotId            String   @unique // Each lot can only be won once
  userId           String?
  winningBidAmount Float
  winDate          DateTime
  paymentStatus    String
  invoiceUrl       String?
  
  lot              Lot     @relation(fields: [lotId], references: [id])
  user             User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model DirectSaleOffer {
  id                   String   @id @default(cuid())
  publicId             String   @unique @default(cuid())
  title                String
  description          String?  @db.Text
  offerType            String?
  price                Float?
  minimumOfferPrice    Float?
  status               String   @default("ACTIVE")
  category             String
  sellerId             String?
  sellerName           String?
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int      @default(0)
  expiresAt            DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  seller Seller? @relation(fields: [sellerId], references: [id])
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model AuctionHabilitation {
  id        String   @id @default(cuid())
  userId    String
  auctionId String
  createdAt DateTime @default(now())
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@unique([userId, auctionId])
}
