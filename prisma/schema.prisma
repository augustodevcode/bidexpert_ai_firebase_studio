// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. MODELS WITH NO/MINIMAL FOREIGN KEY DEPENDENCIES
// =================================================================

model Role {
  id              String         @id @default(uuid())
  name            String         @unique
  nameNormalized  String         @unique
  description     String?
  permissions     Json?
  users           UsersOnRoles[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model State {
  id            String             @id @default(uuid())
  name          String
  uf            String             @unique
  slug          String             @unique
  cities        City[]
  districts     JudicialDistrict[]
  auctions      Auction[]
  lots          Lot[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model LotCategory {
  id                  String              @id @default(uuid())
  name                String              @unique
  slug                String              @unique
  description         String?
  itemCount           Int?                @default(0)
  hasSubcategories    Boolean             @default(false)
  iconName            String?
  logoUrl             String?
  logoMediaId         String?
  dataAiHintIcon      String?
  coverImageUrl       String?
  coverImageMediaId   String?
  dataAiHintCover     String?
  megaMenuImageUrl    String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu  String?
  subcategories       Subcategory[]
  auctions            Auction[]
  lots                Lot[]
  bens                Bem[]
  directSaleOffers    DirectSaleOffer[]
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

model DocumentType {
  id          String         @id @default(uuid())
  name        String
  description String?
  isRequired  Boolean        @default(true)
  appliesTo   String?
  userDocs    UserDocument[]
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentTemplate {
  id        String   @id @default(uuid())
  name      String
  type      String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// =================================================================
// 2. MODELS WITH ONE LEVEL OF DEPENDENCY
// =================================================================

model User {
  id                  String               @id @default(uuid())
  uid                 String?              @unique // For potential Firebase Auth UID mapping
  email               String               @unique
  password            String?
  fullName            String?
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType          @default(PHYSICAL)
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?
  roles               UsersOnRoles[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]            @relation("LotWinner")
  answeredQuestions   LotQuestion[]        @relation("AnsweredBy")
  askedQuestions      LotQuestion[]        @relation("AskedBy")
  maxBids             UserLotMaxBid[]
  uploadedMedia       MediaItem[]          @relation("UploadedBy")
  optInMarketing      Boolean?             @default(false)
  
  // Detalhes PF
  cpf                 String?              @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  homePhone           String?
  cellPhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?

  // Detalhes PJ
  razaoSocial         String?
  cnpj                String?              @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?

  // Endere√ßo
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?

  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model City {
  id        String    @id @default(uuid())
  name      String
  slug      String    @unique
  state     State     @relation(fields: [stateId], references: [id])
  stateId   String
  stateUf   String
  ibgeCode  String?   @unique
  lotCount  Int?      @default(0)
  auctions  Auction[]
  lots      Lot[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Subcategory {
  id                  String      @id @default(uuid())
  name                String
  slug                String      @unique
  parentCategory      LotCategory @relation(fields: [parentCategoryId], references: [id])
  parentCategoryId    String
  description         String?
  displayOrder        Int         @default(0)
  iconUrl             String?
  iconMediaId         String?
  dataAiHintIcon      String?
  lots                Lot[]
  bens                Bem[]
}

model Court {
  id                String             @id @default(uuid())
  name              String             @unique
  slug              String             @unique
  stateUf           String
  website           String?
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[] // Back-relation from Auction
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

// =================================================================
// 3. MODELS WITH TWO OR MORE LEVELS OF DEPENDENCY
// =================================================================

model JudicialDistrict {
  id                String             @id @default(uuid())
  name              String
  slug              String             @unique
  court             Court              @relation(fields: [courtId], references: [id])
  courtId           String
  state             State              @relation(fields: [stateId], references: [id])
  stateId           String
  zipCode           String?
  branches          JudicialBranch[]
  judicialProcesses JudicialProcess[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model JudicialBranch {
  id                String             @id @default(uuid())
  name              String
  slug              String             @unique
  district          JudicialDistrict   @relation(fields: [districtId], references: [id])
  districtId        String
  contactName       String?
  phone             String?
  email             String?
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  sellers           Seller[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Seller {
  id                  String           @id @default(uuid())
  publicId            String           @unique
  slug                String           @unique
  name                String           @unique
  contactName         String?
  email               String?
  phone               String?
  address             String?
  city                String?
  state               String?
  zipCode             String?
  website             String?
  logoUrl             String?
  logoMediaId         String?
  dataAiHintLogo      String?
  description         String?          @db.Text
  user                User?            @relation(fields: [userId], references: [id])
  userId              String?          @unique
  isJudicial          Boolean          @default(false)
  judicialBranch      JudicialBranch?  @relation(fields: [judicialBranchId], references: [id])
  judicialBranchId    String?          @unique
  auctions            Auction[]
  lots                Lot[]
  bens                Bem[]
  directSaleOffers    DirectSaleOffer[]
  judicialProcesses   JudicialProcess[]
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
}

model Auctioneer {
  id                   String    @id @default(uuid())
  publicId             String    @unique
  slug                 String    @unique
  name                 String
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?   @db.Text
  user                 User?     @relation(fields: [userId], references: [id])
  userId               String?   @unique
  auctions             Auction[]
  lots                 Lot[]
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model JudicialProcess {
  id              String           @id @default(uuid())
  publicId        String           @unique
  processNumber   String           @unique
  isElectronic    Boolean          @default(true)
  court           Court            @relation(fields: [courtId], references: [id])
  courtId         String
  district        JudicialDistrict @relation(fields: [districtId], references: [id])
  districtId      String
  branch          JudicialBranch   @relation(fields: [branchId], references: [id])
  branchId        String
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  sellerId        String?
  parties         JudicialParty[]
  bens            Bem[]
  auctions        Auction[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model JudicialParty {
  id             String          @id @default(uuid())
  process        JudicialProcess @relation(fields: [processId], references: [id])
  processId      String
  name           String
  documentNumber String?
  partyType      String
}

model Bem {
  id                  String        @id @default(uuid())
  publicId            String        @unique
  title               String
  description         String?       @db.Text
  status              String        @default("DISPONIVEL")
  category            LotCategory   @relation(fields: [categoryId], references: [id])
  categoryId          String
  subcategory         Subcategory?  @relation(fields: [subcategoryId], references: [id])
  subcategoryId       String?
  judicialProcess     JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId   String?
  seller              Seller?       @relation(fields: [sellerId], references: [id])
  sellerId            String?
  evaluationValue     Float?
  imageUrl            String?
  imageMediaId        String?
  galleryImageUrls    Json?
  mediaItemIds        Json?
  dataAiHint          String?
  locationCity        String?
  locationState       String?
  address             String?
  latitude            Float?
  longitude           Float?
  lots                LotBens[]

  // Vehicle Specific
  plate               String?
  make                String?
  model               String?
  version             String?
  year                Int?
  modelYear           Int?
  mileage             Int?
  color               String?
  fuelType            String?
  transmissionType    String?
  bodyType            String?
  vin                 String?
  renavam             String?
  enginePower         String?
  numberOfDoors       Int?
  vehicleOptions      String?
  detranStatus        String?
  debts               String?
  runningCondition    String?
  bodyCondition       String?
  tiresCondition      String?
  hasKey              Boolean?

  // Real Estate Specific
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?
  infrastructure             String?
  condoDetails               String?
  improvements               String?
  topography                 String?
  liensAndEncumbrances       String?
  propertyDebts              String?
  unregisteredRecords        String?
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  amenities                  Json?

  // Electronics Specific
  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String?
  includedAccessories        String?
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String?

  // Appliance Specific
  applianceCapacity          String?
  voltage                    String?
  applianceType              String?
  additionalFunctions        String?

  // Machinery Specific
  hoursUsed                  Int?
  engineType                 String?
  capacityOrPower            String?
  maintenanceHistory         String?
  installationLocation       String?
  compliesWithNR             String?
  operatingLicenses          String?

  // Livestock Specific
  breed                      String?
  age                        String?
  sex                        String?
  weight                     String?
  individualId               String?
  purpose                    String?
  sanitaryCondition          String?
  lineage                    String?
  isPregnant                 Boolean?
  specialSkills              String?
  gtaDocument                String?
  breedRegistryDocument      String?

  // Outros
  furnitureType              String?
  material                   String?
  style                      String?
  dimensions                 String?
  pieceCount                 Int?
  jewelryType                String?
  metal                      String?
  gemstones                  String?
  totalWeight                String?
  jewelrySize                String?
  authenticityCertificate    String?
  workType                   String?
  artist                     String?
  period                     String?
  technique                  String?
  provenance                 String?
  boatType                   String?
  boatLength                 String?
  hullMaterial               String?
  onboardEquipment           String?
  productName                String?
  quantity                   String?
  packagingType              String?
  expirationDate             DateTime?
  storageConditions          String?
  preciousMetalType          String?
  purity                     String?
  forestGoodsType            String?
  volumeOrQuantity           String?
  species                    String?
  dofNumber                  String?
  
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model AuctionStage {
  id               String        @id @default(uuid())
  auction          Auction       @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId        String
  name             String
  startDate        DateTime
  endDate          DateTime
  evaluationValue  Float?
  lots             LotStageDetails[]
}

model Auction {
  id                               String        @id @default(uuid())
  publicId                         String        @unique
  slug                             String        @unique
  title                            String
  description                      String?       @db.Text
  status                           String        @default("RASCUNHO")
  auctionType                      String?
  auctionMethod                    String?
  participation                    String?
  auctionDate                      DateTime
  endDate                          DateTime?
  onlineUrl                        String?
  address                          String?
  zipCode                          String?
  latitude                         Float?
  longitude                        Float?
  auctioneerId                     String
  auctioneer                       Auctioneer    @relation(fields: [auctioneerId], references: [id])
  sellerId                         String
  seller                           Seller        @relation(fields: [sellerId], references: [id])
  categoryId                       String
  category                         LotCategory   @relation(fields: [categoryId], references: [id])
  judicialProcessId                String?
  judicialProcess                  JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  imageUrl                         String?
  imageMediaId                     String?
  dataAiHint                       String?
  documentsUrl                     String?
  visits                           Int?          @default(0)
  totalLots                        Int?          @default(0)
  totalHabilitatedUsers            Int?          @default(0)
  initialOffer                     Float?
  isFavorite                       Boolean?      @default(false)
  isFeaturedOnMarketplace          Boolean?      @default(false)
  marketplaceAnnouncementTitle     String?
  softCloseEnabled                 Boolean?      @default(false)
  softCloseMinutes                 Int?          @default(2)
  automaticBiddingEnabled          Boolean?      @default(false)
  silentBiddingEnabled             Boolean?      @default(false)
  allowMultipleBidsPerUser         Boolean?      @default(true)
  allowInstallmentBids             Boolean?      @default(false)
  estimatedRevenue                 Float?
  achievedRevenue                  Float?
  sellingBranch                    String?
  additionalTriggers               Json?
  evaluationReportUrl              String?
  auctionCertificateUrl            String?
  autoRelistSettings               Json?
  courtId                          String?
  court                            Court?        @relation(fields: [courtId], references: [id])
  branchId                         String?
  branch                           JudicialBranch? @relation(fields: [branchId], references: [id])
  cityId                           String?
  city                             City?         @relation(fields: [cityId], references: [id], onDelete: SetNull)
  stateId                          String?
  state                            State?        @relation(fields: [stateId], references: [id], onDelete: SetNull)
  auctionStages                    AuctionStage[]
  lots                             Lot[]
  habilitations                    AuctionHabilitation[]
  createdAt                        DateTime      @default(now())
  updatedAt                        DateTime      @updatedAt
}

model AuctionHabilitation {
  userId     String
  auctionId  String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction    Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@id([userId, auctionId])
}

model LotBens {
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  bem       Bem      @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId     String
  createdAt DateTime @default(now())

  @@id([lotId, bemId])
}


model LotStageDetails {
    id            String @id @default(uuid())
    lot           Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
    lotId         String
    stage         AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)
    stageId       String
    initialBid    Float?
    bidIncrement  Float?

    @@unique([lotId, stageId])
}


model Lot {
  id                           String               @id @default(uuid())
  publicId                     String               @unique
  auction                      Auction              @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                    String
  number                       String?
  title                        String
  description                  String?              @db.Text
  price                        Float                @default(0)
  initialPrice                 Float?
  secondInitialPrice           Float?
  bidIncrementStep             Float?
  status                       String               @default("EM_BREVE")
  bidsCount                    Int?                 @default(0)
  views                        Int?                 @default(0)
  isFeatured                   Boolean?             @default(false)
  isExclusive                  Boolean?             @default(false)
  discountPercentage           Int?
  additionalTriggers           Json?
  imageUrl                     String?
  imageMediaId                 String?
  dataAiHint                   String?
  galleryImageUrls             Json?
  mediaItemIds                 Json?
  bens                         LotBens[]
  inheritedMediaFromBemId      String?
  type                         String
  categoryId                   String
  category                     LotCategory          @relation(fields: [categoryId], references: [id])
  subcategoryId                String?
  subcategory                  Subcategory?         @relation(fields: [subcategoryId], references: [id])
  sellerId                     String?
  seller                       Seller?              @relation(fields: [sellerId], references: [id])
  auctioneerId                 String?
  auctioneer                   Auctioneer?          @relation(fields: [auctioneerId], references: [id])
  cityId                       String?
  city                         City?                @relation(fields: [cityId], references: [id], onDelete: SetNull)
  stateId                      String?
  state                        State?               @relation(fields: [stateId], references: [id], onDelete: SetNull)
  cityName                     String?
  stateUf                      String?
  latitude                     Float?
  longitude                    Float?
  mapAddress                   String?
  mapEmbedUrl                  String?
  mapStaticImageUrl            String?
  endDate                      DateTime?
  auctionDate                  DateTime?
  lotSpecificAuctionDate       DateTime?
  secondAuctionDate            DateTime?
  condition                    String?
  originalLotId                String?              @unique
  originalLot                  Lot?                 @relation("RelistedLot", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot                  Lot?                 @relation("RelistedLot")
  isRelisted                   Boolean              @default(false)
  relistCount                  Int                  @default(0)
  winnerId                     String?
  winner                       User?                @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  winningBidTermUrl            String?
  allowInstallmentBids         Boolean?             @default(false)
  bids                         Bid[]
  userWins                     UserWin[]
  maxBids                      UserLotMaxBid[]
  questions                    LotQuestion[]
  lotStageDetails              LotStageDetails[]
  createdAt                    DateTime             @default(now())
  updatedAt                    DateTime             @updatedAt
}

model MediaItem {
  id                  String   @id @default(uuid())
  fileName            String
  storagePath         String
  title               String?
  altText             String?
  caption             String?
  description         String?  @db.Text
  mimeType            String
  sizeBytes           Int?
  urlOriginal         String
  urlThumbnail        String?
  urlMedium           String?
  urlLarge            String?
  linkedLotIds        Json?
  dataAiHint          String?
  uploadedByUser      User     @relation("UploadedBy", fields: [uploadedBy], references: [id])
  uploadedBy          String
  judicialProcessId   String?
  uploadedAt          DateTime @default(now())
}

model UserDocument {
  id              String       @id @default(uuid())
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  documentType    DocumentType @relation(fields: [documentTypeId], references: [id])
  documentTypeId  String
  status          String       @default("PENDING_ANALYSIS")
  fileUrl         String
  fileName        String?
  rejectionReason String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@unique([userId, documentTypeId])
}

model Bid {
  id            String   @id @default(uuid())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  auctionId     String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId      String
  bidderDisplay String?
  amount        Float
  timestamp     DateTime @default(now())
}

model UserWin {
  id                 String       @id @default(uuid())
  lot                Lot          @relation(fields: [lotId], references: [id])
  lotId              String       @unique
  user               User         @relation("LotWinner", fields: [userId], references: [id])
  userId             String
  winningBidAmount   Float
  winDate            DateTime     @default(now())
  paymentStatus      String       @default("PENDENTE")
  invoiceUrl         String?
  installments       InstallmentPayment[]
}

model DirectSaleOffer {
  id                   String      @id @default(uuid())
  publicId             String      @unique
  title                String
  description          String?     @db.Text
  offerType            String
  price                Float?
  minimumOfferPrice    Float?
  status               String      @default("ACTIVE")
  category             LotCategory @relation(fields: [categoryId], references: [id])
  categoryId           String
  seller               Seller      @relation(fields: [sellerId], references: [id])
  sellerId             String
  sellerName           String?
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int?        @default(0)
  expiresAt            DateTime?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model LotQuestion {
  id                      String   @id @default(uuid())
  lot                     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId                   String
  askedByUser             User     @relation("AskedBy", fields: [askedByUserId], references: [id])
  askedByUserId           String
  userDisplayName         String
  questionText            String   @db.Text
  isPublic                Boolean  @default(true)
  answerText              String?  @db.Text
  answeredByUser          User?    @relation("AnsweredBy", fields: [answeredByUserId], references: [id])
  answeredByUserId        String?
  answeredByUserDisplayName String?
  answeredAt              DateTime?
  createdAt               DateTime @default(now())
}

model InstallmentPayment {
  id                 String  @id @default(uuid())
  userWin            UserWin @relation(fields: [userWinId], references: [id], onDelete: Cascade)
  userWinId          String
  installmentNumber  Int
  amount             Float
  dueDate            DateTime
  status             PaymentStatus @default("PENDENTE")
  paymentDate        DateTime?
  paymentMethod      String?
  transactionId      String?
}

// Model para armazenar as configura√ß√µes da plataforma em um √∫nico documento
model PlatformSettings {
  id                             String @id @default("global")
  siteTitle                      String?
  siteTagline                    String?
  logoUrl                        String?
  faviconUrl                     String?
  galleryImageBasePath           String?
  storageProvider                String?
  firebaseStorageBucket          String?
  activeThemeName                String?
  themes                         Json?
  platformPublicIdMasks          Json?
  homepageSections               Json?
  mentalTriggerSettings          Json?
  sectionBadgeVisibility         Json?
  mapSettings                    Json?
  searchPaginationType           String?
  searchItemsPerPage             Int?
  searchLoadMoreCount            Int?
  showCountdownOnLotDetail       Boolean?
  showCountdownOnCards           Boolean?
  showRelatedLotsOnLotDetail     Boolean?
  relatedLotsCount               Int?
  defaultUrgencyTimerHours       Int?
  variableIncrementTable         Json?
  biddingSettings                Json?
  paymentGatewaySettings         Json?
  defaultListItemsPerPage        Int?
  updatedAt                      DateTime @updatedAt
}

model VehicleMake {
  id   String @id @default(uuid())
  name String @unique
  slug String @unique
  models VehicleModel[]
}

model VehicleModel {
  id     String      @id @default(uuid())
  name   String
  slug   String      
  make   VehicleMake @relation(fields: [makeId], references: [id])
  makeId String

  @@unique([name, makeId])
}
