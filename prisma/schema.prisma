// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// ==================================================
//               MODELS (Reordered)
// ==================================================

// --- Core Entities (Few dependencies) ---

model User {
  id                   String                 @id @default(cuid())
  email                String                 @unique
  password             String
  fullName             String?
  roleId               String?
  role                 Role?                  @relation(fields: [roleId], references: [id], onDelete: SetNull)
  sellerId             String?                @unique
  sellerProfile        Seller?                @relation("UserSellerProfile", fields: [sellerId], references: [id], onDelete: SetNull)
  auctioneerId         String?                @unique
  auctioneerProfile    Auctioneer?            @relation("UserAuctioneerProfile", fields: [auctioneerId], references: [id], onDelete: SetNull)
  habilitationStatus   UserHabilitationStatus @default(PENDING_DOCUMENTS)
  badges               String?                @db.Text
  avatarUrl            String?
  dataAiHint           String?
  optInMarketing       Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  
  // User Profile Details
  accountType          AccountType?
  cpf                  String?                @unique
  rgNumber             String?
  rgIssuer             String?
  rgIssueDate          DateTime?
  rgState              String?
  dateOfBirth          DateTime?
  cellPhone            String?
  homePhone            String?
  gender               String?
  profession           String?
  nationality          String?
  maritalStatus        String?
  propertyRegime       String?
  spouseName           String?
  spouseCpf            String?
  
  // Address
  zipCode              String?
  street               String?
  number               String?
  complement           String?
  neighborhood         String?
  city                 String?
  state                String?

  // Relationships (Back-references)
  documents       UserDocument[]
  bids            Bid[]
  wins            UserWin[]
  maxBids         UserLotMaxBid[]
  reviews         Review[]
  questionsAsked  LotQuestion[]   @relation("QuestionAskedBy")
  answersGiven    LotQuestion[]   @relation("AnsweredBy")
  mediaItems      MediaItem[]
  notifications   Notification[]
  blogPosts       BlogPost[]
}

model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  permissions     Permission[]
  users           User[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LotCategory {
  id                 String          @id @default(cuid())
  name               String          @unique
  slug               String          @unique
  description        String?         @db.Text
  itemCount          Int?
  hasSubcategories   Boolean?        @default(false)
  logoUrl            String?
  logoMediaId        String?         @unique
  logo               MediaItem?      @relation("CategoryLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  coverImageUrl      String?
  coverImageMediaId  String?         @unique
  coverImage         MediaItem?      @relation("CategoryCoverImage", fields: [coverImageMediaId], references: [id], onDelete: SetNull)
  megaMenuImageUrl   String?
  megaMenuImageMediaId String?       @unique
  megaMenuImage      MediaItem?      @relation("CategoryMegaMenuImage", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull)
  dataAiHintLogo     String?
  dataAiHintCover    String?
  dataAiHintMegaMenu String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  
  // Relationships (Back-references)
  auctions      Auction[]
  lots          Lot[]
  bens          Bem[]
  subcategories Subcategory[]
  directSaleOffers DirectSaleOffer[]
}

model Subcategory {
  id               String       @id @default(cuid())
  name             String
  slug             String       @unique
  description      String?
  parentCategoryId String
  parentCategory   LotCategory  @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  displayOrder     Int?         @default(0)
  itemCount        Int?
  iconUrl          String?
  iconMediaId      String?      @unique
  icon             MediaItem?   @relation("SubcategoryIcon", fields: [iconMediaId], references: [id], onDelete: SetNull)
  dataAiHintIcon   String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  // Relationships (Back-references)
  lots Bem[]
}

model State {
  id        String   @id @default(cuid())
  name      String   @unique
  uf        String   @unique
  slug      String   @unique
  cityCount Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships (Back-references)
  cities    City[]
  courts    Court[]
  districts JudicialDistrict[]
  lots      Lot[]
}

model City {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  stateId   String
  stateUf   String
  state     State    @relation(fields: [stateId], references: [id])
  ibgeCode  String?
  lotCount  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships (Back-references)
  lots Lot[]
}

model Court {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  stateUf     String
  stateId     String
  state       State    @relation(fields: [stateId], references: [id])
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships (Back-references)
  districts JudicialDistrict[]
  processes JudicialProcess[]
}

model JudicialDistrict {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  courtId   String
  court     Court    @relation(fields: [courtId], references: [id])
  stateId   String
  state     State    @relation(fields: [stateId], references: [id])
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships (Back-references)
  branches  JudicialBranch[]
  processes JudicialProcess[]
}

model JudicialBranch {
  id           String   @id @default(cuid())
  name         String
  slug         String   @unique
  districtId   String
  district     JudicialDistrict @relation(fields: [districtId], references: [id])
  contactName  String?
  phone        String?
  email        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relationships (Back-references)
  processes JudicialProcess[]
  seller    Seller?
}

model Seller {
  id                   String    @id @default(cuid())
  publicId             String    @unique @default(cuid())
  name                 String    @unique
  slug                 String    @unique
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  isJudicial           Boolean   @default(false)
  judicialBranchId     String?   @unique
  judicialBranch       JudicialBranch? @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  logoUrl              String?
  logoMediaId          String?   @unique
  logo                 MediaItem? @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  dataAiHintLogo       String?
  description          String?   @db.Text
  userId               String?   @unique
  user                 User?     @relation("UserSellerProfile", fields: [userId], references: [id], onDelete: SetNull)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relationships (Back-references)
  auctions            Auction[]
  directSaleOffers    DirectSaleOffer[]
  judicialProcesses   JudicialProcess[]
  bens                Bem[]
  blogPosts           BlogPost[]
}

model Auctioneer {
  id                     String    @id @default(cuid())
  publicId               String    @unique @default(cuid())
  name                   String    @unique
  slug                   String    @unique
  registrationNumber     String?
  contactName            String?
  email                  String?
  phone                  String?
  address                String?
  city                   String?
  state                  String?
  zipCode                String?
  website                String?
  logoUrl                String?
  logoMediaId            String?   @unique
  logo                   MediaItem? @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  dataAiHintLogo         String?
  description            String?   @db.Text
  memberSince            DateTime?
  rating                 Float?
  auctionsConductedCount Int?
  totalValueSold         Float?
  userId                 String?   @unique
  user                   User?     @relation("UserAuctioneerProfile", fields: [userId], references: [id], onDelete: SetNull)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  // Relationships (Back-references)
  auctions Auction[]
}

model DirectSaleOffer {
  id                   String                @id @default(cuid())
  publicId             String                @unique @default(cuid())
  title                String
  description          String                @db.Text
  offerType            DirectSaleOfferType
  status               DirectSaleOfferStatus @default(ACTIVE)
  price                Float?
  minimumOfferPrice    Float?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?               @unique
  dataAiHint           String?
  expiresAt            DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  views                Int                   @default(0)
  proposalsCount       Int                   @default(0)
  
  // Relationships
  categoryId           String
  category             LotCategory           @relation(fields: [categoryId], references: [id])
  sellerId             String
  seller               Seller                @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  image                MediaItem?            @relation("DirectSaleOfferImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
}

model DocumentType {
  id             String         @id @default(cuid())
  name           String         @unique
  description    String?
  isRequired     Boolean        @default(false)
  appliesTo      String?        // Comma-separated: "PHYSICAL,LEGAL"
  allowedFormats String?        // Comma-separated: "pdf,jpg,png"
  displayOrder   Int            @default(0)

  // Relationships (Back-references)
  userDocuments  UserDocument[]
}

// --- Dependent Models ---

model Auction {
  id                             String        @id @default(cuid())
  publicId                       String        @unique @default(cuid())
  title                          String
  fullTitle                      String?
  description                    String?       @db.Text
  status                         AuctionStatus @default(RASCUNHO)
  auctionType                    AuctionType?
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json          @default("[]")
  city                           String?
  state                          String?
  imageUrl                       String?
  imageMediaId                   String?       @unique
  dataAiHint                     String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  totalLots                      Int?
  visits                         Int?
  initialOffer                   Float?
  bidsCount                      Int?
  sellingBranch                  String?
  vehicleLocation                String?
  automaticBiddingEnabled        Boolean?      @default(false)
  silentBiddingEnabled           Boolean?      @default(false)
  allowMultipleBidsPerUser       Boolean?      @default(true)
  allowInstallmentBids           Boolean?      @default(false)
  softCloseEnabled               Boolean?      @default(false)
  softCloseMinutes               Int?          @default(2)
  estimatedRevenue               Float?
  achievedRevenue                Float?
  totalHabilitatedUsers          Int?
  isFeaturedOnMarketplace        Boolean?      @default(false)
  marketplaceAnnouncementTitle   String?
  additionalTriggers             String? // Comma-separated string
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt

  // Relationships
  categoryId        String?
  auctioneerId      String
  sellerId          String?
  judicialProcessId String?       @unique
  category          LotCategory?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  auctioneer        Auctioneer    @relation(fields: [auctioneerId], references: [id])
  seller            Seller?       @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  image             MediaItem?    @relation("AuctionImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  
  // Back-references
  lots        Lot[]
  bids        Bid[]
  reviews     Review[]
  questions   LotQuestion[]
}

model Lot {
  id                           String     @id @default(cuid())
  publicId                     String     @unique @default(cuid())
  title                        String
  number                       String?
  imageUrl                     String?
  imageMediaId                 String?    @unique
  dataAiHint                   String?
  status                       LotStatus  @default(EM_BREVE)
  views                        Int        @default(0)
  price                        Float
  initialPrice                 Float?
  secondInitialPrice           Float?
  bidIncrementStep             Float?
  endDate                      DateTime?
  lotSpecificAuctionDate       DateTime?
  secondAuctionDate            DateTime?
  bidsCount                    Int        @default(0)
  isFeatured                   Boolean?   @default(false)
  isExclusive                  Boolean?   @default(false)
  discountPercentage           Float?
  additionalTriggers           String?    // Comma-separated string
  condition                    String?
  createdAt                    DateTime   @default(now())
  updatedAt                    DateTime   @updatedAt
  
  // Location
  address                      String?
  latitude                     Float?
  longitude                    Float?
  mapAddress                   String?
  mapEmbedUrl                  String?
  mapStaticImageUrl            String?
  
  // Judicial Info (denormalized for performance)
  judicialProcessNumber        String?
  courtDistrict                String?
  courtName                    String?
  publicProcessUrl             String?
  propertyRegistrationNumber   String?
  propertyLiens                String?    @db.Text
  knownDebts                   String?    @db.Text
  additionalDocumentsInfo      String?    @db.Text
  
  // Financial
  reservePrice                 Float?
  evaluationValue              Float?
  debtAmount                   Float?
  itbiValue                    Float?
  winningBidTermUrl            String?

  // Relationships
  auctionId     String
  auction       Auction    @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  categoryId    String?
  category      LotCategory? @relation(fields: [categoryId], references: [id])
  subcategoryId String?
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  stateId       String?
  state         State?     @relation(fields: [stateId], references: [id], onDelete: SetNull)
  cityId        String?
  city          City?      @relation(fields: [cityId], references: [id], onDelete: SetNull)
  image         MediaItem? @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  
  // Many-to-Many
  bens          Bem[]
  mediaItems    MediaItem[]
  
  // Back-references
  bids        Bid[]
  wins        UserWin[]
  maxBids     UserLotMaxBid[]
  reviews     Review[]
  questions   LotQuestion[]
}

model Bem {
  id                         String   @id @default(cuid())
  publicId                   String   @unique @default(cuid())
  title                      String
  description                String?  @db.Text
  status                     BemStatus @default(DISPONIVEL)
  evaluationValue            Float?
  imageUrl                   String?
  imageMediaId               String?  @unique
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  // Relationships
  categoryId          String?
  category            LotCategory? @relation(fields: [categoryId], references: [id])
  subcategoryId       String?
  subcategory         Subcategory? @relation(fields: [subcategoryId], references: [id])
  judicialProcessId   String?
  judicialProcess     JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  sellerId            String?
  seller              Seller?      @relation(fields: [sellerId], references: [id])
  image               MediaItem?   @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  
  // Many-to-Many
  lots Lot[]
}

model JudicialProcess {
  id              String   @id @default(cuid())
  publicId        String   @unique @default(cuid())
  processNumber   String   @unique
  isElectronic    Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  courtId         String
  districtId      String
  branchId        String
  sellerId        String?
  court           Court    @relation(fields: [courtId], references: [id])
  district        JudicialDistrict @relation(fields: [districtId], references: [id])
  branch          JudicialBranch @relation(fields: [branchId], references: [id])
  seller          Seller?  @relation(fields: [sellerId], references: [id])

  // Back-references
  parties ProcessParty[]
  bens    Bem[]
  auction Auction?
}

model ProcessParty {
  id             String       @id @default(cuid())
  processId      String
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  name           String
  partyType      ProcessPartyType
  documentNumber String?
  
  @@unique([processId, name, partyType])
}

model MediaItem {
  id                     String    @id @default(cuid())
  fileName               String?
  storagePath            String?   @unique
  title                  String?
  altText                String?
  caption                String?
  description            String?   @db.Text
  mimeType               String
  sizeBytes              Int
  dimensions             Json?
  urlOriginal            String    @db.Text
  urlThumbnail           String?   @db.Text
  urlMedium              String?   @db.Text
  urlLarge               String?   @db.Text
  uploadedBy             String?
  uploadedAt             DateTime  @default(now())
  dataAiHint             String?

  // Back-references
  lotsAsMainImage        Lot[]     @relation("LotImage")
  lotsAsGalleryImage     Lot[]
  auctionsAsMainImage    Auction[] @relation("AuctionImage")
  sellersAsLogo          Seller[]  @relation("SellerLogo")
  auctioneersAsLogo      Auctioneer[] @relation("AuctioneerLogo")
  directSaleOfferAsImage DirectSaleOffer[] @relation("DirectSaleOfferImage")
  bensAsMainImage        Bem[]      @relation("BemImage")
  user                   User?      @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)
  categoryAsLogo         LotCategory? @relation("CategoryLogo")
  categoryAsCover        LotCategory? @relation("CategoryCoverImage")
  categoryAsMegaMenu     LotCategory? @relation("CategoryMegaMenuImage")
  subcategoryAsIcon      Subcategory? @relation("SubcategoryIcon")
}

model UserDocument {
  id                String       @id @default(cuid())
  userId            String
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentTypeId    String
  documentType      DocumentType @relation(fields: [documentTypeId], references: [id])
  fileUrl           String?
  fileName          String?
  status            UserDocumentStatus @default(NOT_SENT)
  uploadDate        DateTime?
  analysisDate      DateTime?
  analystId         String?
  rejectionReason   String?      @db.Text
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@unique([userId, documentTypeId])
}

// --- Event Models ---

model Bid {
  id              String      @id @default(cuid())
  lotId           String
  auctionId       String
  bidderId        String
  bidderDisplay   String
  amount          Float
  timestamp       DateTime    @default(now())
  
  // Relationships
  lot             Lot         @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction         Auction     @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder          User        @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id                String   @id @default(cuid())
  lotId             String   @unique
  userId            String
  winningBidAmount  Float
  winDate           DateTime @default(now())
  paymentStatus     PaymentStatus @default(PENDENTE)
  invoiceUrl        String?
  
  // Relationships
  lot               Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserLotMaxBid {
  id          String   @id @default(cuid())
  userId      String
  lotId       String
  maxAmount   Float
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot         Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lotId])
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String   @db.Text
  createdAt       DateTime @default(now())

  // Relationships
  lot     Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                        String   @id @default(cuid())
  lotId                     String
  auctionId                 String
  userId                    String
  userDisplayName           String
  questionText              String   @db.Text
  isPublic                  Boolean  @default(true)
  answerText                String?  @db.Text
  answeredAt                DateTime?
  answeredByUserId          String?
  answeredByUserDisplayName String?
  createdAt                 DateTime @default(now())

  // Relationships
  user        User     @relation("QuestionAskedBy", fields: [userId], references: [id], onDelete: Cascade)
  lot         Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction     Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  answeredBy  User?    @relation("AnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)
}

// --- Content & Platform Models ---

model BlogPost {
  id              String      @id @default(cuid())
  title           String
  slug            String      @unique
  content         String      @db.Text
  authorId        String
  author          User        @relation(fields: [authorId], references: [id])
  publishedAt     DateTime?
  status          String      @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  featuredImageId String?
  featuredImage   MediaItem?  @relation(fields: [featuredImageId], references: [id], onDelete: SetNull)
  tags            Tag[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Tag {
  id   String @id @default(cuid())
  name String @unique
  
  // Relationships
  blogPosts BlogPost[]
}

model Notification {
  id      String   @id @default(cuid())
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message String
  isRead  Boolean  @default(false)
  link    String?
  createdAt DateTime @default(now())
}

model ContactMessage {
  id      String   @id @default(cuid())
  name    String
  email   String
  subject String
  message String   @db.Text
  isRead  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model PlatformSettings {
  id                   String @id @default("global")
  siteTitle            String?
  siteTagline          String?
  galleryImageBasePath String?
  storageProvider      String?
  firebaseStorageBucket String?
  activeThemeName      String?
  themes               Json?
  platformPublicIdMasks Json?
  homepageSections     Json?
  mentalTriggerSettings Json?
  sectionBadgeVisibility Json?
  mapSettings          Json?
  biddingSettings      Json?
  variableIncrementTable Json?
  defaultListItemsPerPage Int?
  updatedAt            DateTime @updatedAt
}

model DocumentTemplate {
  id        String                @id @default(cuid())
  name      String                @unique
  type      DocumentTemplateType
  content   String                @db.Text
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
}


// ==================================================
//                      ENUMS
// ==================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
  SUSPENSO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ACTIVE
  SOLD
  EXPIRED
  PENDING_APPROVAL
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}
