// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys" // Habilita a criação de constraints de chave estrangeira
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. MODELS WITHOUT EXTERNAL DEPENDENCIES (BASE TABLES)
// =================================================================

model PlatformSettings {
  id                           String  @id @default("global") @db.VarChar(191)
  siteTitle                    String? @db.VarChar(191)
  siteTagline                  String? @db.VarChar(191)
  galleryImageBasePath         String? @db.VarChar(191)
  storageProvider              String? @db.VarChar(191)
  firebaseStorageBucket        String? @db.VarChar(191)
  activeThemeName              String? @db.VarChar(191)
  themes                       Json?
  platformPublicIdMasks        Json?
  homepageSections             Json?
  mentalTriggerSettings        Json?
  sectionBadgeVisibility       Json?
  mapSettings                  Json?
  searchPaginationType         String? @db.VarChar(191)
  searchItemsPerPage           Int?
  searchLoadMoreCount          Int?
  showCountdownOnLotDetail     Boolean?
  showCountdownOnCards         Boolean?
  showRelatedLotsOnLotDetail   Boolean?
  relatedLotsCount             Int?
  defaultUrgencyTimerHours     Int?
  variableIncrementTable       Json?
  biddingSettings              Json?
  paymentGatewaySettings       Json?
  defaultListItemsPerPage      Int?
  updatedAt                    DateTime? @updatedAt @db.DateTime(3)
}

model Role {
  id             String         @id @default(uuid()) @db.VarChar(191)
  name           String         @unique @db.VarChar(50)
  nameNormalized String         @unique @db.VarChar(50)
  description    String?        @db.VarChar(255)
  permissions    Json
  createdAt      DateTime       @default(now()) @db.DateTime(3)
  updatedAt      DateTime       @updatedAt @db.DateTime(3)
  users          UsersOnRoles[]
}

model State {
  id                 String             @id @default(uuid()) @db.VarChar(191)
  name               String             @db.VarChar(100)
  uf                 String             @unique @db.VarChar(2)
  slug               String             @unique @db.VarChar(100)
  cities             City[]
  auctions           Auction[]
  lots               Lot[]
  courts             Court[]
  judicialDistricts  JudicialDistrict[]
}

model LotCategory {
  id                   String            @id @default(uuid()) @db.VarChar(191)
  name                 String            @db.VarChar(191)
  slug                 String            @unique @db.VarChar(191)
  description          String?           @db.VarChar(500)
  hasSubcategories     Boolean?
  logoUrl              String?           @db.VarChar(191)
  logoMediaId          String?           @db.VarChar(191)
  dataAiHintLogo       String?           @db.VarChar(191)
  coverImageUrl        String?           @db.VarChar(191)
  coverImageMediaId    String?           @db.VarChar(191)
  dataAiHintCover      String?           @db.VarChar(191)
  megaMenuImageUrl     String?           @db.VarChar(191)
  megaMenuImageMediaId String?           @db.VarChar(191)
  dataAiHintMegaMenu   String?           @db.VarChar(191)
  createdAt            DateTime          @default(now()) @db.DateTime(3)
  updatedAt            DateTime          @updatedAt @db.DateTime(3)
  lots                 Lot[]
  bens                 Bem[]
  subcategories        Subcategory[]
  auctions             Auction[]
  directSaleOffers     DirectSaleOffer[]
}

model DocumentTemplate {
  id        String                 @id @default(uuid()) @db.VarChar(191)
  name      String                 @db.VarChar(150)
  type      DocumentTemplateType
  content   String?                @db.Text
  createdAt DateTime               @default(now()) @db.DateTime(3)
  updatedAt DateTime               @updatedAt @db.DateTime(3)
}

model ContactMessage {
  id        String   @id @default(uuid()) @db.VarChar(191)
  name      String   @db.VarChar(150)
  email     String   @db.VarChar(150)
  subject   String?  @db.VarChar(191)
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now()) @db.DateTime(3)
}

model DocumentType {
  id          String         @id @default(uuid()) @db.VarChar(191)
  name        String         @db.VarChar(150)
  description String?        @db.VarChar(255)
  isRequired  Boolean        @default(true)
  appliesTo   String?        @db.VarChar(191)
  userDocs    UserDocument[]
}

model VehicleMake {
  id     String         @id @default(uuid()) @db.VarChar(191)
  name   String         @unique @db.VarChar(191)
  slug   String         @unique @db.VarChar(191)
  models VehicleModel[]
}

// =================================================================
// 2. MODELS WITH ONE LEVEL OF DEPENDENCY
// =================================================================

model User {
  id                  String                 @id @default(uuid()) @db.VarChar(191)
  email               String                 @unique @db.VarChar(191)
  password            String?                @db.VarChar(191)
  fullName            String?                @db.VarChar(191)
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType            @default(PHYSICAL)
  avatarUrl           String?                @db.VarChar(191)
  dataAiHint          String?                @db.VarChar(191)
  badges              Json?
  cpf                 String?                @db.VarChar(191)
  rgNumber            String?                @db.VarChar(191)
  rgIssuer            String?                @db.VarChar(191)
  rgIssueDate         DateTime?              @db.DateTime(3)
  rgState             String?                @db.VarChar(191)
  dateOfBirth         DateTime?              @db.DateTime(3)
  cellPhone           String?                @db.VarChar(191)
  homePhone           String?                @db.VarChar(191)
  gender              String?                @db.VarChar(191)
  profession          String?                @db.VarChar(191)
  nationality         String?                @db.VarChar(191)
  maritalStatus       String?                @db.VarChar(191)
  propertyRegime      String?                @db.VarChar(191)
  spouseName          String?                @db.VarChar(191)
  spouseCpf           String?                @db.VarChar(191)
  zipCode             String?                @db.VarChar(191)
  street              String?                @db.VarChar(191)
  number              String?                @db.VarChar(191)
  complement          String?                @db.VarChar(191)
  neighborhood        String?                @db.VarChar(191)
  city                String?                @db.VarChar(191)
  state               String?                @db.VarChar(191)
  optInMarketing      Boolean?               @default(false)
  razaoSocial         String?                @db.VarChar(191)
  cnpj                String?                @db.VarChar(191)
  inscricaoEstadual   String?                @db.VarChar(191)
  website             String?                @db.VarChar(191)
  responsibleName     String?                @db.VarChar(191)
  responsibleCpf      String?                @db.VarChar(191)
  createdAt           DateTime               @default(now()) @db.DateTime(3)
  updatedAt           DateTime               @updatedAt @db.DateTime(3)
  roles               UsersOnRoles[]
  bids                Bid[]
  wins                UserWin[]
  maxBids             UserLotMaxBid[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  documents           UserDocument[]
  notifications       Notification[]
  mediaItems          MediaItem[]
  habilitationEntries AuctionHabilitation[]
  wonLots             Lot[]                  @relation("WonLots")
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @db.VarChar(191)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String   @db.VarChar(191)
  assignedAt DateTime @default(now()) @db.DateTime(3)
  assignedBy String   @db.VarChar(191)

  @@id([userId, roleId])
}

model City {
  id        String    @id @default(uuid()) @db.VarChar(191)
  name      String    @db.VarChar(150)
  slug      String    @db.VarChar(150)
  state     State     @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId   String    @db.VarChar(191)
  stateUf   String?   @db.VarChar(191)
  ibgeCode  String?   @unique @db.VarChar(10)
  lotCount  Int?      @default(0)
  auctions  Auction[]
  lots      Lot[]
}

model Subcategory {
  id                 String      @id @default(uuid()) @db.VarChar(191)
  name               String      @db.VarChar(191)
  slug               String      @db.VarChar(191)
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  parentCategoryId   String      @db.VarChar(191)
  description        String?     @db.VarChar(500)
  displayOrder       Int         @default(0)
  iconUrl            String?     @db.VarChar(191)
  iconMediaId        String?     @db.VarChar(191)
  dataAiHintIcon     String?     @db.VarChar(191)
  lots               Lot[]
  bens               Bem[]
}

model Court {
  id                 String             @id @default(uuid()) @db.VarChar(191)
  name               String             @db.VarChar(150)
  slug               String?            @db.VarChar(150)
  stateId            String?            @db.VarChar(191)
  state              State?             @relation(fields: [stateId], references: [id])
  stateUf            String?            @db.VarChar(2)
  website            String?            @db.VarChar(191)
  createdAt          DateTime           @default(now()) @db.DateTime(3)
  updatedAt          DateTime           @updatedAt @db.DateTime(3)
  districts          JudicialDistrict[]
  judicialProcesses  JudicialProcess[]
  auctions           Auction[]
}

model VehicleModel {
  id     String      @id @default(uuid()) @db.VarChar(191)
  name   String      @db.VarChar(191)
  slug   String      @db.VarChar(191)
  make   VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)
  makeId String      @db.VarChar(191)

  @@unique([name, makeId])
}

// =================================================================
// 3. MODELS WITH TWO OR MORE LEVELS OF DEPENDENCY
// =================================================================

model JudicialDistrict {
  id                 String           @id @default(uuid()) @db.VarChar(191)
  name               String           @db.VarChar(150)
  slug               String           @unique @db.VarChar(150)
  courtId            String?          @db.VarChar(191)
  court              Court?           @relation(fields: [courtId], references: [id])
  stateId            String           @db.VarChar(191)
  state              State            @relation(fields: [stateId], references: [id])
  zipCode            String?          @db.VarChar(10)
  createdAt          DateTime         @default(now()) @db.DateTime(3)
  updatedAt          DateTime         @updatedAt @db.DateTime(3)
  branches           JudicialBranch[]
  judicialProcesses  JudicialProcess[]
  auctions           Auction[]
}

model JudicialBranch {
  id                 String             @id @default(uuid()) @db.VarChar(191)
  name               String             @db.VarChar(150)
  slug               String             @unique @db.VarChar(150)
  districtId         String?            @db.VarChar(191)
  district           JudicialDistrict?  @relation(fields: [districtId], references: [id])
  contactName        String?            @db.VarChar(150)
  phone              String?            @db.VarChar(20)
  email              String?            @db.VarChar(150)
  createdAt          DateTime           @default(now()) @db.DateTime(3)
  updatedAt          DateTime           @updatedAt @db.DateTime(3)
  sellers            Seller[]
  judicialProcesses  JudicialProcess[]
  auctions           Auction[]
}

model Seller {
  id                 String            @id @default(uuid()) @db.VarChar(191)
  publicId           String?           @unique @db.VarChar(191)
  slug               String?           @unique @db.VarChar(150)
  name               String            @unique @db.VarChar(150)
  contactName        String?           @db.VarChar(150)
  email              String?           @db.VarChar(150)
  phone              String?           @db.VarChar(20)
  address            String?           @db.VarChar(200)
  city               String?           @db.VarChar(100)
  state              String?           @db.VarChar(50)
  zipCode            String?           @db.VarChar(10)
  website            String?           @db.VarChar(191)
  logoUrl            String?           @db.VarChar(191)
  logoMediaId        String?           @db.VarChar(191)
  dataAiHintLogo     String?           @db.VarChar(191)
  description        String?           @db.Text
  userId             String?           @unique @db.VarChar(191)
  user               User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  isJudicial         Boolean           @default(false)
  judicialBranchId   String?           @unique @db.VarChar(191)
  judicialBranch     JudicialBranch?   @relation(fields: [judicialBranchId], references: [id])
  createdAt          DateTime          @default(now()) @db.DateTime(3)
  updatedAt          DateTime          @updatedAt @db.DateTime(3)
  auctions           Auction[]
  lots               Lot[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
  judicialProcesses  JudicialProcess[]
}

model Auctioneer {
  id                   String    @id @default(uuid()) @db.VarChar(191)
  publicId             String?   @unique @db.VarChar(191)
  slug                 String?   @unique @db.VarChar(150)
  name                 String    @db.VarChar(150)
  registrationNumber   String?   @db.VarChar(50)
  contactName          String?   @db.VarChar(150)
  email                String?   @db.VarChar(150)
  phone                String?   @db.VarChar(20)
  address              String?   @db.VarChar(200)
  city                 String?   @db.VarChar(100)
  state                String?   @db.VarChar(50)
  zipCode              String?   @db.VarChar(10)
  website              String?   @db.VarChar(191)
  logoUrl              String?   @db.VarChar(191)
  logoMediaId          String?   @db.VarChar(191)
  dataAiHintLogo       String?   @db.VarChar(191)
  description          String?   @db.Text
  userId               String?   @unique @db.VarChar(191)
  user                 User?     @relation(fields: [userId], references: [id])
  createdAt            DateTime  @default(now()) @db.DateTime(3)
  updatedAt            DateTime  @updatedAt @db.DateTime(3)
  auctions             Auction[]
  lots                 Lot[]     @relation("AuctioneerLots")
}
