// prisma/schema.prisma

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Use a more compatible binary target for Linux environments like IDX
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ==================================
//        Core User Models
// ==================================

model User {
  id                    String                 @id @default(cuid())
  email                 String                 @unique
  fullName              String?
  password              String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  roleId                String?
  sellerId              String?                @unique
  auctioneerId          String?                @unique
  habilitationStatus    UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType           UserAccountType        @default(PHYSICAL)
  // Physical Person Details
  cpf                   String?
  rgNumber              String?
  rgIssuer              String?
  rgIssueDate           DateTime?
  rgState               String?
  dateOfBirth           DateTime?
  // Legal Person Details
  razaoSocial           String?
  cnpj                  String?
  inscricaoEstadual     String?
  website               String?
  // Common Contact Info
  cellPhone             String?
  homePhone             String?
  // Address
  zipCode               String?
  street                String?
  number                String?
  complement            String?
  neighborhood          String?
  city                  String?
  state                 String?
  // Preferences & Misc
  optInMarketing        Boolean                @default(false)
  avatarUrl             String?
  dataAiHint            String?
  badges                Json?                  @db.Json
  // Relationships
  role                  Role?                  @relation(fields: [roleId], references: [id], onDelete: SetNull)
  sellerProfile         Seller?
  auctioneerProfile     Auctioneer?
  bids                  Bid[]
  wins                  UserWin[]
  submittedDocuments    UserDocument[]
  notifications         Notification[]
  reviews               Review[]
  askedQuestions        LotQuestion[]          @relation("AskedByUser")
  answeredQuestions     LotQuestion[]          @relation("AnsweredByUser")
  uploadedMedia         MediaItem[]
  maxBids               UserLotMaxBid[]
}

model Role {
  id              String       @id @default(cuid())
  name            String
  name_normalized String       @unique
  description     String?
  users           User[]
  permissions     Permission[] @relation(references: [id])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Permission {
  id    String @id @default(cuid())
  name  String @unique
  roles Role[] @relation(references: [id])
}

enum UserAccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

model DocumentType {
  id             String         @id @default(cuid())
  name           String         @unique
  description    String?
  isRequired     Boolean        @default(false)
  appliesTo      String         @default("PHYSICAL,LEGAL") // Comma-separated UserAccountType
  allowedFormats String         @default("pdf,jpg,png") // Comma-separated strings
  displayOrder   Int            @default(0)
  userDocuments  UserDocument[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model UserDocument {
  id                String             @id @default(cuid())
  userId            String
  documentTypeId    String
  fileUrl           String
  fileName          String?
  status            UserDocumentStatus @default(NOT_SENT)
  uploadDate        DateTime?
  analysisDate      DateTime?
  analystId         String?
  rejectionReason   String?
  // Relationships
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType      DocumentType       @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@unique([userId, documentTypeId])
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

// ==================================
//       Media & Content Models
// ==================================

model MediaItem {
  id                       String        @id @default(cuid())
  fileName                 String
  storagePath              String?       @unique
  title                    String?
  altText                  String?
  caption                  String?
  description              String?
  mimeType                 String
  sizeBytes                Int
  dimensions               Json?         @db.Json
  urlOriginal              String        @db.LongText
  urlThumbnail             String?       @db.LongText
  urlMedium                String?       @db.LongText
  urlLarge                 String?       @db.LongText
  dataAiHint               String?
  uploadedBy               String?
  uploadedAt               DateTime      @default(now())
  // Relationships
  userUploader             User?         @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)
  lots                     Lot[]
  auctionImage             Auction?      @relation("AuctionImage")
  lotImage                 Lot?          @relation("LotImage")
  bemImage                 Bem?          @relation("BemImage")
  blogPostImage            BlogPost?     @relation("BlogPostImage")
  sellerLogo               Seller?       @relation("LogoSeller")
  auctioneerLogo           Auctioneer?   @relation("LogoAuctioneer")
  categoryLogo             LotCategory?  @relation("LogoCategory")
  categoryCoverImage       LotCategory?  @relation("CoverCategory")
  categoryMegaMenuImage    LotCategory?  @relation("MegaMenuCategory")
  subcategoryIcon          Subcategory?  @relation("IconSubcategory")
}

// ==================================
//        Auction Models
// ==================================

model Auction {
  id                             String        @id @default(cuid())
  publicId                       String        @unique @default(cuid())
  title                          String
  fullTitle                      String?
  description                    String?       @db.Text
  status                         AuctionStatus @default(RASCUNHO)
  auctionType                    String? // JUDICIAL, EXTRAJUDICIAL, PARTICULAR, TOMADA_DE_PRECOS etc.
  categoryId                     String
  auctioneerId                   String
  sellerId                       String?
  judicialProcessId              String?
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json?         @db.Json
  city                           String?
  state                          String?
  imageMediaId                   String?       @unique
  imageUrl                       String?       @db.LongText
  dataAiHint                     String?
  documentsUrl                   String?       @db.LongText
  evaluationReportUrl            String?       @db.LongText
  auctionCertificateUrl          String?       @db.LongText
  totalLots                      Int           @default(0)
  visits                         Int           @default(0)
  estimatedRevenue               Float?
  achievedRevenue                Float?
  totalHabilitatedUsers          Int?
  sellingBranch                  String?
  vehicleLocation                String?
  isFeaturedOnMarketplace        Boolean       @default(false)
  marketplaceAnnouncementTitle   String?
  automaticBiddingEnabled        Boolean       @default(true)
  allowInstallmentBids           Boolean       @default(false)
  silentBiddingEnabled           Boolean       @default(false)
  allowMultipleBidsPerUser       Boolean       @default(true)
  softCloseEnabled               Boolean       @default(false)
  softCloseMinutes               Int?
  decrementAmount                Float? // For Dutch auctions
  decrementIntervalSeconds       Int? // For Dutch auctions
  floorPrice                     Float? // For Dutch auctions
  autoRelistSettings             Json?         @db.Json
  additionalTriggers             Json?         @db.Json
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt
  // Relationships
  lots                           Lot[]
  bids                           Bid[]
  auctioneer                     Auctioneer    @relation(fields: [auctioneerId], references: [id])
  seller                         Seller?       @relation(fields: [sellerId], references: [id])
  judicialProcess                JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  image                          MediaItem?    @relation("AuctionImage", fields: [imageMediaId], references: [id])
  category                       LotCategory   @relation(fields: [categoryId], references: [id])
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO // Synonymous with ABERTO_PARA_LANCES
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

model Lot {
  id                             String        @id @default(cuid())
  publicId                       String        @unique @default(cuid())
  title                          String
  number                         String?
  description                    String?       @db.Text
  status                         LotStatus     @default(EM_BREVE)
  auctionId                      String
  categoryId                     String
  subcategoryId                  String?
  sellerId                       String?
  auctioneerId                   String?
  stateId                        String?
  cityId                         String?
  price                          Float
  initialPrice                   Float?
  secondInitialPrice             Float?
  bidIncrementStep               Float?
  endDate                        DateTime?
  lotSpecificAuctionDate         DateTime?
  secondAuctionDate              DateTime?
  views                          Int           @default(0)
  bidsCount                      Int           @default(0)
  imageMediaId                   String?       @unique
  imageUrl                       String?       @db.LongText
  winningBidTermUrl              String?       @db.LongText
  galleryImageUrls               Json?         @db.Json
  dataAiHint                     String?
  isFeatured                     Boolean       @default(false)
  isExclusive                    Boolean       @default(false)
  discountPercentage             Float?
  additionalTriggers             Json?         @db.Json
  // Location
  latitude                       Float?
  longitude                      Float?
  mapAddress                     String?
  mapEmbedUrl                    String?
  mapStaticImageUrl              String?
  // Legal
  judicialProcessNumber          String?
  courtDistrict                  String?
  courtName                      String?
  publicProcessUrl               String?       @db.LongText
  propertyRegistrationNumber     String?
  propertyLiens                  String?       @db.Text
  knownDebts                     String?       @db.Text
  additionalDocumentsInfo        String?       @db.Text
  // Vehicle
  condition                      String?
  year                           Int?
  make                           String?
  model                          String?
  series                         String?
  stockNumber                    String?
  vin                            String?
  vinStatus                      String?
  lossType                       String?
  primaryDamage                  String?
  titleInfo                      String?
  titleBrand                     String?
  startCode                      String?
  hasKey                         Boolean?
  odometer                       String?
  airbagsStatus                  String?
  bodyStyle                      String?
  engineDetails                  String?
  transmissionType               String?
  driveLineType                  String?
  fuelType                       String?
  cylinders                      String?
  restraintSystem                String?
  exteriorInteriorColor          String?
  options                        String?       @db.Text
  manufacturedIn                 String?
  vehicleClass                   String?
  vehicleLocationInBranch        String?
  laneRunNumber                  String?
  aisleStall                     String?
  actualCashValue                String?
  estimatedRepairCost            String?
  // Foreign Keys (for Prisma schema, not direct use)
  reservePrice                   Float?
  evaluationValue                Float?
  debtAmount                     Float?
  itbiValue                      Float?
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt
  // Relationships
  auction                        Auction       @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                       LotCategory   @relation(fields: [categoryId], references: [id])
  subcategory                    Subcategory?  @relation(fields: [subcategoryId], references: [id])
  state                          StateInfo?    @relation(fields: [stateId], references: [id])
  city                           CityInfo?     @relation(fields: [cityId], references: [id])
  seller                         Seller?       @relation(fields: [sellerId], references: [id])
  auctioneer                     Auctioneer?   @relation(fields: [auctioneerId], references: [id])
  bids                           Bid[]
  wins                           UserWin[]
  reviews                        Review[]
  questions                      LotQuestion[]
  maxBids                        UserLotMaxBid[]
  image                          MediaItem?    @relation("LotImage", fields: [imageMediaId], references: [id])
  mediaItems                     MediaItem[]
  bens                           Bem[]
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
  REMOVIDO
}

model Seller {
  id                         String            @id @default(cuid())
  publicId                   String            @unique @default(cuid())
  name                       String
  slug                       String            @unique
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  description                String?           @db.Text
  logoMediaId                String?           @unique
  dataAiHintLogo             String?
  memberSince                DateTime?
  rating                     Float?
  activeLotsCount            Int?
  totalSalesValue            Float?
  auctionsFacilitatedCount   Int?
  userId                     String?           @unique
  isJudicial                 Boolean           @default(false)
  judicialBranchId           String?
  createdAt                  DateTime          @default(now())
  updatedAt                  DateTime          @updatedAt
  // Relationships
  user                       User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  judicialBranch             JudicialBranch?   @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  auctions                   Auction[]
  lots                       Lot[]
  directSaleOffers           DirectSaleOffer[]
  judicialProcesses          JudicialProcess[]
  logo                       MediaItem?        @relation("SellerLogo", fields: [logoMediaId], references: [id])
}

model Auctioneer {
  id                       String    @id @default(cuid())
  publicId                 String    @unique @default(cuid())
  name                     String
  slug                     String    @unique
  registrationNumber       String?
  contactName              String?
  email                    String?
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  description              String?   @db.Text
  logoMediaId              String?   @unique
  dataAiHintLogo           String?
  memberSince              DateTime?
  rating                   Float?
  auctionsConductedCount   Int?
  totalValueSold           Float?
  userId                   String?   @unique
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  // Relationships
  auctions                 Auction[]
  lots                     Lot[]
  user                     User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  logo                     MediaItem? @relation("LogoAuctioneer", fields: [logoMediaId], references: [id])
}

model Bem {
  id                String    @id @default(cuid())
  publicId          String    @unique @default(cuid())
  title             String
  description       String?   @db.Text
  status            BemStatus @default(DISPONIVEL)
  judicialProcessId String?
  sellerId          String?
  categoryId        String
  subcategoryId     String?
  evaluationValue   Float?
  imageMediaId      String?   @unique
  imageUrl          String?   @db.LongText
  dataAiHint        String?
  locationCity      String?
  locationState     String?
  address           String?
  latitude          Float?
  longitude         Float?
  // Vehicle Specific
  plate             String?
  make              String?
  model             String?
  version           String?
  year              Int?
  modelYear         Int?
  mileage           Int?
  color             String?
  fuelType          String?
  transmissionType  String?
  bodyType          String?
  vin               String?
  renavam           String?
  enginePower       String?
  numberOfDoors     Int?
  vehicleOptions    String?   @db.Text
  detranStatus      String?
  debts             String?   @db.Text
  runningCondition  String?
  bodyCondition     String?
  tiresCondition    String?
  hasKey            Boolean?
  // Real Estate Specific
  propertyType               String?
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  area                       Float?
  bedrooms                   Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  // Machinery Specific
  serialNumber               String?
  hoursUsed                  Int?
  engineType                 String?
  // Livestock Specific
  breed                      String?
  age                        String?
  sex                        String?
  weight                     String?
  vaccinationStatus          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  // Relationships
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller            Seller?          @relation(fields: [sellerId], references: [id])
  category          LotCategory      @relation(fields: [categoryId], references: [id])
  subcategory       Subcategory?     @relation(fields: [subcategoryId], references: [id])
  image             MediaItem?       @relation("BemImage", fields: [imageMediaId], references: [id])
  mediaItems        MediaItem[]
  lots              Lot[]
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

// ==================================
//       Judicial Models
// ==================================

model JudicialProcess {
  id              String           @id @default(cuid())
  publicId        String           @unique @default(cuid())
  processNumber   String           @unique
  isElectronic    Boolean          @default(true)
  courtId         String
  districtId      String
  branchId        String
  sellerId        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  // Relationships
  court           Court            @relation(fields: [courtId], references: [id])
  district        JudicialDistrict @relation(fields: [districtId], references: [id])
  branch          JudicialBranch   @relation(fields: [branchId], references: [id])
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  parties         ProcessParty[]
  bens            Bem[]
  auctions        Auction[]
}

model ProcessParty {
  id             String         @id @default(cuid())
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  processId      String
  // Relationships
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@unique([processId, name, partyType])
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

model Court {
  id        String             @id @default(cuid())
  name      String             @unique
  slug      String             @unique
  stateUf   String
  website   String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  // Relationships
  districts JudicialDistrict[]
  processes JudicialProcess[]
  state     StateInfo          @relation(fields: [stateUf], references: [uf])
}

model JudicialDistrict {
  id        String           @id @default(cuid())
  name      String
  slug      String           @unique
  courtId   String
  stateId   String
  zipCode   String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  // Relationships
  court     Court            @relation(fields: [courtId], references: [id])
  state     StateInfo        @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]
}

model JudicialBranch {
  id         String             @id @default(cuid())
  name       String
  slug       String             @unique
  districtId String
  contactName String?
  phone      String?
  email      String?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  // Relationships
  district   JudicialDistrict   @relation(fields: [districtId], references: [id])
  processes  JudicialProcess[]
  sellers    Seller[]
}

// ==================================
//      Taxonomy & Location Models
// ==================================

model LotCategory {
  id                   String            @id @default(cuid())
  name                 String            @unique
  slug                 String            @unique
  description          String?
  itemCount            Int?
  hasSubcategories     Boolean           @default(false)
  logoMediaId          String?           @unique
  coverImageMediaId    String?           @unique
  megaMenuImageMediaId String?           @unique
  dataAiHintLogo       String?
  dataAiHintCover      String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  // Relationships
  auctions             Auction[]
  lots                 Lot[]
  subcategories        Subcategory[]
  bens                 Bem[]
  directSaleOffers     DirectSaleOffer[]
  logo                 MediaItem?        @relation("LogoCategory", fields: [logoMediaId], references: [id])
  coverImage           MediaItem?        @relation("CoverCategory", fields: [coverImageMediaId], references: [id])
  megaMenuImage        MediaItem?        @relation("MegaMenuCategory", fields: [megaMenuImageMediaId], references: [id])
}

model Subcategory {
  id               String      @id @default(cuid())
  name             String
  slug             String
  description      String?
  itemCount        Int?
  displayOrder     Int         @default(0)
  parentCategoryId String
  iconMediaId      String?     @unique
  dataAiHintIcon   String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  // Relationships
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id])
  lots             Lot[]
  bens             Bem[]
  icon             MediaItem?  @relation("IconSubcategory", fields: [iconMediaId], references: [id])

  @@unique([parentCategoryId, slug])
}

model StateInfo {
  id        String             @id @default(cuid())
  name      String             @unique
  uf        String             @unique
  slug      String             @unique
  cityCount Int?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  // Relationships
  lots      Lot[]
  cities    CityInfo[]
  courts    Court[]
  districts JudicialDistrict[]
}

model CityInfo {
  id        String    @id @default(cuid())
  name      String
  slug      String
  stateId   String
  stateUf   String
  ibgeCode  String?
  lotCount  Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // Relationships
  state     StateInfo @relation(fields: [stateId], references: [id])
  lots      Lot[]

  @@unique([slug, stateId])
}

// ==================================
//      Interaction Models
// ==================================

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())
  // Relationships
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String        @id @default(cuid())
  userId           String
  lotId            String        @unique // A lot can only be won once
  winningBidAmount Float
  winDate          DateTime
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?
  // Relationships
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot              Lot           @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String   @db.Text
  createdAt       DateTime @default(now())
  // Relationships
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                      String   @id @default(cuid())
  lotId                   String
  auctionId               String
  userId                  String
  userDisplayName         String
  questionText            String   @db.Text
  isPublic                Boolean  @default(true)
  answerText              String?  @db.Text
  answeredAt              DateTime?
  answeredByUserId        String?
  answeredByUserDisplayName String?
  createdAt               DateTime @default(now())
  // Relationships
  lot                     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user                    User     @relation("AskedByUser", fields: [userId], references: [id], onDelete: Cascade)
  answeredBy              User?    @relation("AnsweredByUser", fields: [answeredByUserId], references: [id], onDelete: SetNull)
}

// ==================================
//      Platform & Misc Models
// ==================================

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())
  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BlogPost {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  content         String   @db.Text
  authorId        String
  authorName      String
  publishedAt     DateTime?
  status          String   @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  featuredImageId String?  @unique
  tags            String? // Comma-separated string
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  // Relationships
  image           MediaItem? @relation("BlogPostImage", fields: [featuredImageId], references: [id], onDelete: SetNull)
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DirectSaleOffer {
  id                     String                @id @default(cuid())
  publicId               String                @unique @default(cuid())
  title                  String
  description            String                @db.Text
  offerType              DirectSaleOfferType
  status                 DirectSaleOfferStatus
  price                  Float?
  minimumOfferPrice      Float?
  categoryId             String
  sellerId               String
  locationCity           String?
  locationState          String?
  imageMediaId           String?               @unique
  imageUrl               String?
  dataAiHint             String?
  galleryImageUrls       Json?                 @db.Json
  itemsIncluded          Json?                 @db.Json
  tags                   Json?                 @db.Json
  views                  Int                   @default(0)
  proposalsCount         Int                   @default(0)
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  expiresAt              DateTime?
  // Relationships
  category               LotCategory           @relation(fields: [categoryId], references: [id])
  seller                 Seller                @relation(fields: [sellerId], references: [id])
  image                  MediaItem?            @relation("OfferImage", fields: [imageMediaId], references: [id])
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  PENDING_APPROVAL
  ACTIVE
  SOLD
  EXPIRED
}

model PlatformSettings {
  id                           String @id @default("global")
  siteTitle                    String
  siteTagline                  String?
  galleryImageBasePath         String
  storageProvider              String @default("local")
  firebaseStorageBucket        String?
  activeThemeName              String?
  themes                       Json?  @db.Json
  platformPublicIdMasks        Json?  @db.Json
  homepageSections             Json?  @db.Json
  mentalTriggerSettings        Json?  @db.Json
  sectionBadgeVisibility       Json?  @db.Json
  mapSettings                  Json?  @db.Json
  biddingSettings              Json?  @db.Json
  searchPaginationType         String @default("loadMore")
  searchItemsPerPage           Int    @default(12)
  searchLoadMoreCount          Int    @default(12)
  showCountdownOnLotDetail     Boolean @default(true)
  showCountdownOnCards         Boolean @default(true)
  showRelatedLotsOnLotDetail   Boolean @default(true)
  relatedLotsCount             Int @default(5)
  defaultUrgencyTimerHours     Int?
  variableIncrementTable       Json? @db.Json
  defaultListItemsPerPage      Int?
  updatedAt                    DateTime @updatedAt
}
```