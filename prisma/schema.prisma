// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// ENUMS - DEFINIDOS PRIMEIRO PARA USO NOS MODELOS
// =================================================================

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

// =================================================================
// 1. MODELOS BASE (SEM DEPENDÊNCIAS EXTERNAS COMPLEXAS)
// =================================================================
model Role {
  id               String         @id @default(uuid())
  name             String
  nameNormalized   String         @unique
  description      String?        @db.Text
  permissions      Json?
  users            UsersOnRoles[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model State {
  id              String             @id @default(uuid())
  name            String
  uf              String             @unique
  slug            String             @unique
  cityCount       Int                @default(0)
  cities          City[]
  courts          Court[]
  judicialDistricts JudicialDistrict[]
  lots            Lot[]
  auctions        Auction[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model VehicleMake {
  id      String         @id @default(uuid())
  name    String         @unique
  slug    String         @unique
  models  VehicleModel[]
}

model VehicleModel {
  id      String      @id @default(uuid())
  name    String
  slug    String
  make    VehicleMake @relation(fields: [makeId], references: [id])
  makeId  String

  @@unique([name, makeId])
}

model LotCategory {
  id                   String            @id @default(uuid())
  name                 String            @unique
  slug                 String            @unique
  description          String?           @db.Text
  hasSubcategories     Boolean           @default(false)
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  subcategories      Subcategory[]
  lots               Lot[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
  auctions           Auction[]
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
}

model Subcategory {
  id                 String      @id @default(uuid())
  name               String
  slug               String      @unique
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id])
  parentCategoryId   String
  description        String?     @db.Text
  displayOrder       Int         @default(0)
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  lots               Lot[]
  bens               Bem[]
}

// =================================================================
// 2. MODELOS COM DEPENDÊNCIAS DE NÍVEL 1
// =================================================================

model City {
  id        String    @id @default(uuid())
  name      String
  slug      String?
  state     State     @relation(fields: [stateId], references: [id])
  stateId   String
  stateUf   String
  ibgeCode  String?   @unique
  lotCount  Int       @default(0)
  lots      Lot[]
  auctions  Auction[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model User {
  id                   String                 @id @default(uuid())
  email                String                 @unique
  password             String?
  fullName             String?
  habilitationStatus   UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType          AccountType            @default(PHYSICAL)
  avatarUrl            String?
  dataAiHint           String?
  badges               Json?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  roles                UsersOnRoles[]
  documents            UserDocument[]
  bids                 Bid[]
  maxBids              UserLotMaxBid[]
  wins                 UserWin[]
  notifications        Notification[]
  questions            LotQuestion[]          @relation("AskedByUser")
  answeredQuestions    LotQuestion[]          @relation("AnsweredByUser")
  uploadedMedia        MediaItem[]            @relation("UploadedBy")
  sellerProfile        Seller?                @relation("UserProfile")
  auctioneerProfile    Auctioneer?            @relation("UserProfile")
  habilitations        AuctionHabilitation[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model Court {
  id                String             @id @default(uuid())
  name              String
  slug              String?
  stateUf           String
  website           String?
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  state             State?             @relation(fields: [stateId], references: [id])
  stateId           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

// =================================================================
// 3. MODELOS COM DEPENDÊNCIAS DE NÍVEL 2+
// =================================================================

model JudicialDistrict {
  id                String             @id @default(uuid())
  name              String
  slug              String?
  court             Court?             @relation(fields: [courtId], references: [id])
  courtId           String?
  state             State?             @relation(fields: [stateId], references: [id])
  stateId           String?
  zipCode           String?
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model JudicialBranch {
  id                String             @id @default(uuid())
  name              String
  slug              String?            @unique
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
  auctions          Auction[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Seller {
  id                String             @id @default(uuid())
  publicId          String?            @unique
  slug              String?            @unique
  name              String             @unique
  contactName       String?
  email             String?
  phone             String?
  address           String?
  city              String?
  state             String?
  zipCode           String?
  website           String?
  logoUrl           String?
  logoMediaId       String?
  dataAiHintLogo    String?
  description       String?            @db.Text
  isJudicial        Boolean            @default(false)
  judicialBranch    JudicialBranch?    @relation(fields: [judicialBranchId], references: [id])
  judicialBranchId  String?
  user              User?              @relation("UserProfile", fields: [userId], references: [id], onDelete: SetNull)
  userId            String?            @unique
  auctions          Auction[]
  judicialProcesses JudicialProcess[]
  bens              Bem[]
  lots              Lot[]
  directSaleOffers  DirectSaleOffer[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Auctioneer {
  id                  String    @id @default(uuid())
  publicId            String?   @unique
  slug                String?   @unique
  name                String
  registrationNumber  String?
  contactName         String?
  email               String?
  phone               String?
  address             String?
  city                String?
  state               String?
  zipCode             String?
  website             String?
  logoUrl             String?
  logoMediaId         String?
  dataAiHintLogo      String?
  description         String?   @db.Text
  user                User?     @relation("UserProfile", fields: [userId], references: [id], onDelete: SetNull)
  userId              String?   @unique
  auctions            Auction[]
  lots                Lot[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model JudicialProcess {
  id            String          @id @default(uuid())
  publicId      String?         @unique
  processNumber String
  isElectronic  Boolean         @default(true)
  court         Court?          @relation(fields: [courtId], references: [id])
  courtId       String?
  district      JudicialDistrict? @relation(fields: [districtId], references: [id])
  districtId    String?
  branch        JudicialBranch? @relation(fields: [branchId], references: [id])
  branchId      String?
  seller        Seller?         @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId      String?
  bens          Bem[]
  parties       JudicialParty[]
  mediaItems    MediaItem[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Bem {
  id              String      @id @default(uuid())
  publicId        String?     @unique
  title           String
  description     String?     @db.Text
  status          String      @default("DISPONIVEL")
  category        LotCategory?    @relation(fields: [categoryId], references: [id])
  categoryId      String?
  subcategory     Subcategory?    @relation(fields: [subcategoryId], references: [id])
  subcategoryId   String?
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId String?
  seller          Seller?         @relation(fields: [sellerId], references: [id])
  sellerId        String?
  evaluationValue Decimal?    @db.Decimal(15, 2)
  imageUrl        String?
  imageMediaId    String?
  galleryImageUrls Json?
  mediaItemIds     Json?
  dataAiHint      String?
  locationCity    String?
  locationState   String?
  address         String?
  latitude        Decimal?
  longitude       Decimal?
  lots LotBens[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model DirectSaleOffer {
  id                String                @id @default(uuid())
  publicId          String?               @unique
  title             String
  description       String?               @db.Text
  offerType         DirectSaleOfferType
  price             Decimal?              @db.Decimal(15, 2)
  minimumOfferPrice Decimal?              @db.Decimal(15, 2)
  status            DirectSaleOfferStatus @default(ACTIVE)
  category          LotCategory           @relation(fields: [categoryId], references: [id])
  categoryId        String
  seller            Seller                @relation(fields: [sellerId], references: [id])
  sellerId          String
  sellerName        String
  sellerLogoUrl     String?
  dataAiHintSellerLogo String?
  locationCity      String?
  locationState     String?
  imageUrl          String?
  imageMediaId      String?
  dataAiHint        String?
  galleryImageUrls  Json?
  mediaItemIds      Json?
  itemsIncluded     Json?
  views             Int                   @default(0)
  expiresAt         DateTime?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}


// =================================================================
// 4. TABELAS DE RELACIONAMENTO E TRANSAÇÕES
// =================================================================

model LotBens {
  lot   Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId String
  bem   Bem  @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId String

  @@id([lotId, bemId])
}

model AuctionHabilitation {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  auction    Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId  String
  approvedAt DateTime @default(now())

  @@id([userId, auctionId])
}


model AuctionStage {
  id            String   @id @default(uuid())
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  name          String
  startDate     DateTime
  endDate       DateTime
  initialPrice  Decimal? @db.Decimal(15, 2)
  statusText    String?
  bidIncrement  Decimal? @db.Decimal(10, 2)
  /// Valor de avaliação específico para esta praça
  evaluationValue    Decimal?
}

model Auction {
  id                             String                 @id @default(uuid())
  publicId                       String?                @unique
  slug                           String?                @unique
  title                          String
  description                    String?                @db.Text
  status                         AuctionStatus          @default(RASCUNHO)
  // Settings
  auctionType                    AuctionType?
  auctionMethod                  AuctionMethod          @default(STANDARD)
  participation                  AuctionParticipation   @default(ONLINE)
  // Dates
  auctionDate                    DateTime?
  endDate                        DateTime?
  auctionStages                  AuctionStage[]
  // People & Orgs
  auctioneer                     Auctioneer?            @relation(fields: [auctioneerId], references: [id])
  auctioneerId                   String?
  seller                         Seller?                @relation(fields: [sellerId], references: [id])
  sellerId                       String?
  // Location
  city                           City?                  @relation(fields: [cityId], references: [id])
  cityId                         String?
  state                          State?                 @relation(fields: [stateId], references: [id])
  stateId                        String?
  address                        String?
  zipCode                        String?
  onlineUrl                      String?
  // Judicial Info
  court                          Court?                 @relation(fields: [courtId], references: [id])
  courtId                        String?
  district                       JudicialDistrict?      @relation(fields: [districtId], references: [id], onDelete: SetNull)
  districtId                     String?
  branch                         JudicialBranch?        @relation(fields: [branchId], references: [id], onDelete: SetNull)
  branchId                       String?
  judicialProcess                JudicialProcess?       @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  judicialProcessId              String?
  // Content & Config
  category                       LotCategory?           @relation(fields: [categoryId], references: [id])
  categoryId                     String?
  lots                           Lot[]
  bids                           Bid[]
  questions                      LotQuestion[]
  documentsUrl                   String?
  imageUrl                       String?
  imageMediaId                   String?
  dataAiHint                     String?
  // Analytics & Stats
  visits                         Int                    @default(0)
  isFavorite                     Boolean                @default(false)
  // Advanced Features
  additionalTriggers             Json?
  decrementAmount                Decimal?
  decrementIntervalSeconds       Int?
  floorPrice                     Decimal?
  softCloseEnabled               Boolean                @default(false)
  softCloseMinutes               Int?                   @default(2)
  isFeaturedOnMarketplace        Boolean                @default(false)
  marketplaceAnnouncementTitle   String?
  allowInstallmentBids           Boolean                @default(true)
  automaticBiddingEnabled        Boolean                @default(false)
  silentBiddingEnabled           Boolean                @default(false)
  allowMultipleBidsPerUser       Boolean                @default(true)
  estimatedRevenue               Decimal?
  achievedRevenue                Decimal?
  totalHabilitatedUsers          Int?
  // Habilitation
  habilitations                  AuctionHabilitation[]
  // Timestamps
  createdAt                      DateTime               @default(now())
  updatedAt                      DateTime               @updatedAt
}

model Lot {
  id                   String        @id @default(uuid())
  publicId             String?       @unique
  auction              Auction       @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId            String
  number               String?
  title                String
  slug                 String?
  description          String?       @db.Text
  // Financials
  price                Decimal       @db.Decimal(15, 2)
  initialPrice         Decimal?      @db.Decimal(15, 2)
  secondInitialPrice   Decimal?      @db.Decimal(15, 2)
  bidIncrementStep     Decimal?      @db.Decimal(10, 2)
  reservePrice         Decimal?
  evaluationValue      Decimal?
  debtAmount           Decimal?
  itbiValue            Decimal?
  // Status & Timestamps
  status               LotStatus     @default(EM_BREVE)
  endDate              DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate    DateTime?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  // Content & Config
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  inheritedMediaFromBemId String?    @comment("ID do Bem de onde as mídias são herdadas")
  condition            String?
  isFeatured           Boolean       @default(false)
  isExclusive          Boolean       @default(false)
  discountPercentage   Int?
  additionalTriggers   Json?
  allowInstallmentBids Boolean       @default(false)
  // Relations
  auctionName          String?
  seller               Seller?       @relation(fields: [sellerId], references: [id])
  sellerId             String?
  sellerName           String?
  auctioneer           Auctioneer?   @relation(fields: [auctioneerId], references: [id])
  auctioneerId         String?
  city                 City?         @relation(fields: [cityId], references: [id])
  cityId               String?
  state                State?        @relation(fields: [stateId], references: [id])
  stateId              String?
  cityName             String?
  stateUf              String?
  category             LotCategory?  @relation(fields: [categoryId], references: [id])
  categoryId           String?
  type                 String
  subcategory          Subcategory?  @relation(fields: [subcategoryId], references: [id])
  subcategoryId        String?
  bens                 LotBens[]
  // Analytics
  views                Int           @default(0)
  bidsCount            Int           @default(0)
  bids                 Bid[]
  questions            LotQuestion[]
  reviews              Review[]
  maxBids              UserLotMaxBid[]
  // Winner Info
  winner               User?         @relation(fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId             String?
  winRecord            UserWin?
  winningBidTermUrl    String?
  // Location
  latitude             Decimal?
  longitude            Decimal?
  mapAddress           String?
  mapEmbedUrl          String?
  mapStaticImageUrl    String?
}

model UserWin {
  id               String   @id @default(uuid())
  lot              Lot      @relation(fields: [lotId], references: [id])
  lotId            String   @unique
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  winningBidAmount Decimal  @db.Decimal(15, 2)
  winDate          DateTime
  paymentStatus    PaymentStatus
  invoiceUrl       String?
}

model Bid {
  id             String   @id @default(uuid())
  lot              Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId            String
  auction          Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId        String
  bidder           User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId         String
  bidderDisplay    String?
  amount           Decimal  @db.Decimal(15, 2)
  timestamp        DateTime @default(now())
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model MediaItem {
  id                String      @id @default(uuid())
  fileName          String
  storagePath       String      
  title             String
  altText           String?
  caption           String?
  description       String?     @db.Text
  mimeType          String
  sizeBytes         Int
  urlOriginal       String
  urlThumbnail      String?
  urlMedium         String?
  urlLarge          String?
  linkedLotIds      Json?
  dataAiHint        String?
  uploadedBy        User        @relation("UploadedBy", fields: [uploadedByUserId], references: [id])
  uploadedByUserId  String
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId String?
  uploadedAt        DateTime    @default(now())
}

model LotQuestion {
  id             String    @id @default(uuid())
  lot            Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId          String
  auction        Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId      String
  user           User      @relation("AskedByUser", fields: [userId], references: [id])
  userId         String
  userDisplayName String
  questionText   String    @db.Text
  answerText     String?   @db.Text
  isPublic       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  answeredBy     User?     @relation("AnsweredByUser", fields: [answeredByUserId], references: [id])
  answeredByUserId String?
  answeredByUserDisplayName String?
  answeredAt     DateTime?
}

model Review {
  id              String   @id @default(uuid())
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentType {
  id          String         @id @default(uuid())
  name        String
  description String?
  isRequired  Boolean        @default(true)
  /// Comma-separated: PHYSICAL,LEGAL,ALL,PROCESS
  appliesTo   String?
  userDocs    UserDocument[]
}

model UserDocument {
  id              String           @id @default(uuid())
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  documentType    DocumentType     @relation(fields: [documentTypeId], references: [id])
  documentTypeId  String
  status          UserDocumentStatus @default(PENDING_ANALYSIS)
  fileUrl         String
  fileName        String?
  rejectionReason String?          @db.Text
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([userId, documentTypeId])
}

model DocumentTemplate {
  id      String               @id @default(uuid())
  name    String
  type    DocumentTemplateType
  content String?              @db.Text
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model ContactMessage {
  id       String   @id @default(uuid())
  name     String
  email    String
  subject  String
  message  String   @db.Text
  isRead   Boolean  @default(false)
  createdAt DateTime @default(now())
}

model JudicialParty {
    id String @id @default(uuid())
    process JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
    processId String
    name String
    documentNumber String?
    partyType ProcessPartyType
}
