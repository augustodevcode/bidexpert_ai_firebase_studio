// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// ==============================================================================
//  MODELOS DE USUÁRIOS E AUTENTICAÇÃO
// ==============================================================================

model Usuario {
  id                String       @id @default(uuid())
  email             String       @unique
  fullName          String?
  password          String?
  avatarUrl         String?
  dataAiHint        String?      @map("data_ai_hint")
  accountType       String?      @map("account_type")
  cpf               String?      @unique
  rgNumber          String?
  rgIssuer          String?
  rgIssueDate       DateTime?
  rgState           String?
  dateOfBirth       DateTime?
  cellPhone         String?
  homePhone         String?
  gender            String?
  profession        String?
  nationality       String?
  maritalStatus     String?
  propertyRegime    String?
  spouseName        String?
  spouseCpf         String?
  zipCode           String?
  street            String?
  number            String?
  complement        String?
  neighborhood      String?
  city              String?
  state             String?
  optInMarketing    Boolean?     @default(false)
  habilitationStatus UserHabilitationStatus? @default(PENDENTE_DOCUMENTOS)
  badges            String[]
  
  // Relações
  roleId              String?
  perfil              Perfil? @relation(fields: [roleId], references: [id])
  sellerId            String? @unique
  vendedor            Vendedor? @relation(fields: [sellerId], references: [id])
  leiloeiroId         String? @unique
  leiloeiro           Leiloeiro? @relation(fields: [leiloeiroId], references: [id])
  documentos          DocumentoUsuario[]
  lances              Lance[]
  arremates           Arremate[]
  vendasDiretas       VendaDireta[] @relation(fields: [id], references: [usuarioId])
  notificacoes        Notificacao[]
  postsBlog           PostBlog[]
  avaliacoes          Review[]
  perguntas           LotQuestion[]
  lancesMaximos       UserLotMaxBid[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("usuarios")
}


model Perfil {
  id              String       @id @default(uuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  usuarios        Usuario[]
  permissoes      Permissao[]

  @@map("perfis")
}

model Permissao {
  id          String   @id
  name        String   @unique
  description String?
  perfis      Perfil[]

  @@map("permissoes")
}

// ==============================================================================
//  MODELOS DE LEILÃO E LOTES
// ==============================================================================

model Leilao {
  id                             String        @id @default(uuid())
  publicId                       String        @unique @default(uuid())
  title                          String
  description                    String?
  status                         AuctionStatus @default(RASCUNHO)
  auctionType                    AuctionType?  @map("tipo_leilao")
  
  auctionDate                    DateTime
  endDate                        DateTime?
  
  city                           String?
  state                          String?
  
  imageUrl                       String?
  imageMediaId                   String?       @map("imagem_media_id")
  imagemPrincipal                MediaItem?    @relation("LeilaoImagemPrincipal", fields: [imageMediaId], references: [id], onDelete: SetNull)
  dataAiHint                     String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  
  visits                         Int?          @default(0)
  initialOffer                   Float?        @map("lance_inicial")
  
  sellingBranch                  String?       @map("filial_venda")
  
  // Configurações
  automaticBiddingEnabled        Boolean?      @default(false)
  silentBiddingEnabled           Boolean?      @default(false)
  allowMultipleBidsPerUser       Boolean?      @default(true)
  allowInstallmentBids           Boolean?      @default(false)
  softCloseEnabled               Boolean?      @default(false)
  softCloseMinutes               Int?          @default(2)
  autoRelistSettings             Json?

  // Dutch Auction Fields
  decrementAmount                Float?
  decrementIntervalSeconds       Int?
  floorPrice                     Float?
  
  // Métricas
  estimatedRevenue               Float?        @map("faturamento_estimado")
  achievedRevenue                Float?        @map("faturamento_realizado") @default(0)
  totalHabilitatedUsers          Int?          @map("total_usuarios_habilitados") @default(0)
  totalLots                      Int?          @default(0)
  
  // Marketing
  isFeaturedOnMarketplace        Boolean?      @default(false)
  marketplaceAnnouncementTitle   String?
  additionalTriggers             String?
  
  // Relações
  categoryId                     String
  categoria                      CategoriaLote @relation(fields: [categoryId], references: [id])
  leiloeiroId                    String
  leiloeiro                      Leiloeiro     @relation(fields: [leiloeiroId], references: [id])
  sellerId                       String?
  vendedor                       Vendedor?     @relation(fields: [sellerId], references: [id])
  judicialProcessId              String?
  processoJudicial               ProcessoJudicial? @relation(fields: [judicialProcessId], references: [id])
  
  lotes                          Lote[]
  lances                         Lance[]
  
  // Timestamps
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt

  // Praças / Etapas
  etapas                         Json[]

  @@map("leiloes")
}


model Lote {
  id                   String        @id @default(uuid())
  publicId             String        @unique @default(uuid())
  number               String?
  title                String
  description          String?
  status               LotStatus
  
  // Valores
  price                Float         @default(0)
  initialPrice         Float?
  secondInitialPrice   Float?
  bidIncrementStep     Float?
  reservePrice         Float?
  evaluationValue      Float?
  debtAmount           Float?
  itbiValue            Float?
  
  // Datas
  endDate              DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate    DateTime?
  
  // Localização
  cityId               String?
  cidade               Cidade?       @relation(fields: [cityId], references: [id])
  stateId              String?
  estado               Estado?       @relation(fields: [stateId], references: [id])
  latitude             Float?
  longitude            Float?
  mapAddress           String?
  mapEmbedUrl          String?
  mapStaticImageUrl    String?
  
  // Mídia
  imageUrl             String?
  imageMediaId         String?       @map("imagem_media_id")
  imagemPrincipal      MediaItem?    @relation("LoteImagemPrincipal", fields: [imageMediaId], references: [id], onDelete: SetNull)
  mediaItems           MediaItem[]   @relation("LoteMediaItem")
  
  // Infos Adicionais
  condition            String?
  dataAiHint           String?
  isFeatured           Boolean?      @default(false)
  isExclusive          Boolean?      @default(false)
  discountPercentage   Float?
  additionalTriggers   String[]
  
  // Relacionamentos
  auctionId            String
  leilao               Leilao        @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  categoryId           String
  categoria            CategoriaLote @relation(fields: [categoryId], references: [id])
  subcategoryId        String?
  subcategoria         Subcategoria? @relation(fields: [subcategoryId], references: [id])
  sellerId             String?       
  auctioneerId         String?
  
  bens                 Bem[]         @relation("BemParaLote")
  
  // Contadores
  views                Int           @default(0)
  bidsCount            Int           @default(0)
  
  // Relações com outras entidades
  lances               Lance[]
  arremate             Arremate?
  avaliacoes           Review[]
  perguntas            LotQuestion[]
  lancesMaximos        UserLotMaxBid[]
  
  winningBidTermUrl    String?
  
  // Timestamps
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  @@map("lotes")
}

model Lance {
  id            String   @id @default(uuid())
  lotId         String
  lote          Lote     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId     String
  leilao        Leilao   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidderId      String
  licitante     Usuario  @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())

  @@map("lances")
}


model Arremate {
  id                String         @id @default(uuid())
  lotId             String         @unique
  lote              Lote           @relation(fields: [lotId], references: [id])
  userId            String
  usuario           Usuario        @relation(fields: [userId], references: [id])
  winningBidAmount  Float
  winDate           DateTime
  paymentStatus     PaymentStatus  @default(PENDENTE)
  invoiceUrl        String?
  retrievalStatus   String?
  
  @@map("arremates")
}

// ==============================================================================
//  MODELOS DE ENTIDADES (COMITENTE, LEILOEIRO)
// ==============================================================================

model Vendedor {
  id                        String             @id @default(uuid())
  publicId                  String             @unique @default(uuid())
  name                      String             @unique
  slug                      String             @unique
  contactName               String?
  email                     String?            @unique
  phone                     String?
  address                   String?
  city                      String?
  state                     String?
  zipCode                   String?
  website                   String?
  logoUrl                   String?
  dataAiHintLogo            String?
  description               String?
  
  isJudicial                Boolean            @default(false)
  
  // Relações
  userId                    String?            @unique
  usuario                   Usuario?           @relation(fields: [userId], references: [id])
  judicialBranchId          String?            @unique
  vara                      Vara?              @relation(fields: [judicialBranchId], references: [id])
  leiloes                   Leilao[]
  bens                      Bem[]
  processosJudiciais        ProcessoJudicial[]
  
  // Stats
  rating                    Float?
  activeLotsCount           Int?
  totalSalesValue           Float?
  auctionsFacilitatedCount  Int?
  memberSince               DateTime?

  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt

  @@map("vendedores")
}


model Leiloeiro {
  id                   String      @id @default(uuid())
  publicId             String      @unique @default(uuid())
  name                 String      @unique
  slug                 String      @unique
  registrationNumber   String?
  contactName          String?
  email                String?     @unique
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  dataAiHintLogo       String?
  description          String?
  
  // Relações
  userId               String?     @unique
  usuario              Usuario?    @relation(fields: [userId], references: [id])
  leiloes              Leilao[]
  
  // Stats
  rating                    Float?
  auctionsConductedCount    Int?
  totalValueSold            Float?
  memberSince               DateTime?
  
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  
  @@map("leiloeiros")
}

// ==============================================================================
//  MODELOS DE CATEGORIZAÇÃO E CONTEÚDO
// ==============================================================================

model CategoriaLote {
  id                  String         @id @default(uuid())
  name                String         @unique
  slug                String         @unique
  description         String?
  logoUrl             String?
  dataAiHintLogo      String?
  coverImageUrl       String?
  dataAiHintCover     String?
  megaMenuImageUrl    String?
  dataAiHintMegaMenu  String?
  itemCount           Int?           @default(0)
  hasSubcategories    Boolean        @default(false)

  // Relações
  lotes               Lote[]
  subcategorias       Subcategoria[]
  bens                Bem[]
  vendasDiretas       VendaDireta[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("categorias_lote")
}

model Subcategoria {
  id               String       @id @default(uuid())
  name             String
  slug             String
  description      String?
  displayOrder     Int?         @default(0)
  iconUrl          String?
  dataAiHintIcon   String?
  iconMediaId      String?
  imagemIcone      MediaItem?   @relation("SubcategoriaIcone", fields: [iconMediaId], references: [id], onDelete: SetNull)

  // Relações
  parentCategoryId String
  categoriaPai     CategoriaLote @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lotes            Lote[]
  bens             Bem[]

  @@unique([parentCategoryId, name])
  @@map("subcategorias")
}

model PostBlog {
  id          String   @id @default(uuid())
  title       String
  slug        String   @unique
  content     String
  imageUrl    String?
  authorId    String
  autor       Usuario  @relation(fields: [authorId], references: [id])
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  tags        String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts_blog")
}


// ==============================================================================
//  MODELOS DE ESTRUTURA JUDICIAL
// ==============================================================================

model ProcessoJudicial {
  id              String      @id @default(uuid())
  publicId        String      @unique
  processNumber   String      @unique @map("numero_processo")
  isElectronic    Boolean     @default(true)
  
  // Relações com estrutura judiciária
  courtId         String
  tribunal        Tribunal    @relation(fields: [courtId], references: [id])
  districtId      String
  comarca         Comarca     @relation(fields: [districtId], references: [id])
  branchId        String
  vara            Vara        @relation(fields: [branchId], references: [id])
  
  // Relação com comitente
  sellerId        String?
  vendedor        Vendedor?   @relation(fields: [sellerId], references: [id])
  
  // Relações com outras partes do sistema
  leiloes         Leilao[]
  bens            Bem[]
  partes          ParteProcesso[]

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@map("processos_judiciais")
}


model ParteProcesso {
  id              String         @id @default(uuid())
  name            String
  documentNumber  String?
  partyType       ProcessPartyType @map("tipo_parte")
  
  // Relação
  processoJudicialId String
  processoJudicial   ProcessoJudicial @relation(fields: [processoJudicialId], references: [id], onDelete: Cascade)

  @@unique([processoJudicialId, name, partyType])
  @@map("partes_processo")
}

model Tribunal {
  id          String            @id @default(uuid())
  name        String            @unique
  slug        String            @unique
  stateUf     String
  website     String?
  
  comarcas    Comarca[]
  processos   ProcessoJudicial[]
  
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  @@map("tribunais")
}

model Comarca {
  id          String           @id @default(uuid())
  name        String
  slug        String
  zipCode     String?
  
  // Relações
  courtId     String
  tribunal    Tribunal         @relation(fields: [courtId], references: [id])
  stateId     String
  estado      Estado           @relation(fields: [stateId], references: [id])
  varas       Vara[]
  processos   ProcessoJudicial[]

  @@unique([name, stateId])
  @@map("comarcas")
}

model Vara {
  id          String             @id @default(uuid())
  name        String
  slug        String
  contactName String?
  phone       String?
  email       String?
  
  // Relações
  districtId  String
  comarca     Comarca            @relation(fields: [districtId], references: [id])
  processos   ProcessoJudicial[]
  vendedor    Vendedor?          @relation(fields: [id], references: [judicialBranchId])

  @@unique([name, districtId])
  @@map("varas")
}

// ==============================================================================
//  MODELOS DE ITENS (BENS)
// ==============================================================================
model Bem {
  id             String    @id @default(uuid())
  publicId       String    @unique
  title          String
  description    String?
  status         BemStatus @default(DISPONIVEL)
  
  // Relações de Categoria e Origem
  categoryId     String
  category       CategoriaLote @relation(fields: [categoryId], references: [id])
  subcategoryId  String?
  subcategory    Subcategoria? @relation(fields: [subcategoryId], references: [id])
  judicialProcessId String?
  judicialProcess ProcessoJudicial? @relation(fields: [judicialProcessId], references: [id])
  sellerId       String?
  seller         Vendedor? @relation(fields: [sellerId], references: [id])
  
  evaluationValue Float?
  
  // Mídia
  imageUrl        String?
  imageMediaId    String?
  imagemPrincipal MediaItem? @relation("BemImagemPrincipal", fields: [imageMediaId], references: [id], onDelete: SetNull)
  galleryImageUrls String[]
  mediaItemIds    String[]
  dataAiHint      String?

  // Localização
  locationCity    String?
  locationState   String?
  address         String?
  latitude        Float?
  longitude       Float?

  // Campos específicos (JSON para flexibilidade, mas podem ser modelados)
  // Veículos
  plate                 String?
  make                  String?
  model                 String?
  version               String?
  year                  Int?
  modelYear             Int?
  mileage               Int?
  color                 String?
  fuelType              String?
  transmissionType      String?
  bodyType              String?
  vin                   String? @unique
  renavam               String? @unique
  enginePower           String?
  numberOfDoors         Int?
  vehicleOptions        String?
  detranStatus          String?
  debts                 String?
  runningCondition      String?
  bodyCondition         String?
  tiresCondition        String?
  hasKey                Boolean?
  series                String? // Lot
  odometer              Int? // Lot
  engineDetails         String? // Lot
  lossType              String? // Lot
  primaryDamage         String? // Lot
  vinStatus             String? // Lot
  titleInfo             String? // Lot
  titleBrand            String? // Lot
  startCode             String? // Lot
  airbagsStatus         String? // Lot
  bodyStyle             String? // Lot
  driveLineType         String? // Lot
  cylinders             Int? // Lot
  restraintSystem       String? // Lot
  exteriorInteriorColor String? // Lot
  options               String? // Lot
  manufacturedIn        String? // Lot
  vehicleClass          String? // Lot
  vehicleLocationInBranch String? // Lot
  laneRunNumber         String? // Lot
  aisleStall            String? // Lot
  actualCashValue       Float? // Lot
  estimatedRepairCost   Float? // Lot
  propertyType          String? // Lot
  area                  Float? // Lot
  
  // Imóveis
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?
  infrastructure             String?
  condoDetails               String?
  improvements               String?
  topography                 String?
  liensAndEncumbrances       String?
  propertyDebts              String?
  unregisteredRecords        String?
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  
  // Eletrônicos
  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String?
  includedAccessories        String?
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String?
  
  // Eletrodomésticos
  applianceCapacity         String?
  voltage                   String?
  applianceType             String?
  additionalFunctions       String?
  
  // Máquinas e Equipamentos
  hoursUsed                 Int?
  engineType                String?
  capacityOrPower           String?
  maintenanceHistory        String?
  installationLocation      String?
  compliesWithNR            String?
  operatingLicenses         String?

  // Semoventes
  breed                     String?
  age                       String?
  sex                       String? // Pode ser um enum
  weight                    String?
  individualId              String?
  purpose                   String?
  sanitaryCondition         String?
  lineage                   String?
  isPregnant                Boolean?
  specialSkills             String?
  gtaDocument               String?
  breedRegistryDocument     String?
  vaccinationStatus         String? // Lot
  
  lotes                    Lote[]  @relation("BemParaLote")
  
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  
  @@map("bens")
}

// ==============================================================================
//  MODELOS DE SUPORTE E CONTEÚDO
// ==============================================================================

model MediaItem {
  id           String      @id @default(uuid())
  fileName     String
  storagePath  String      @unique
  title        String
  altText      String?
  caption      String?
  description  String?
  mimeType     String
  sizeBytes    Int
  
  // URLs para diferentes tamanhos (pode ser preenchido por um serviço de imagem)
  urlOriginal   String
  urlThumbnail  String?
  urlMedium     String?
  urlLarge      String?
  
  uploadedBy    String
  
  // Relações
  lotes            Lote[]    @relation("LoteMediaItem")
  bens             Bem[]     @relation("BemImagemPrincipal")
  subcategorias    Subcategoria[] @relation("SubcategoriaIcone")
  leiloes          Leilao[]  @relation("LeilaoImagemPrincipal")
  ofertasVendaDireta MediaItem[] @relation("VendaDiretaImagemPrincipal")
  vendaDiretaImagemParent VendaDireta? @relation("VendaDiretaImagemPrincipal", fields: [vendaDiretaImagemParentId], references: [id], onDelete: NoAction)
  vendaDiretaImagemParentId String?

  uploadedAt   DateTime    @default(now())
  @@map("media_items")
}

model VendaDireta {
  id                   String        @id @default(uuid())
  publicId             String        @unique @default(uuid())
  title                String
  description          String?
  offerType            DirectSaleOfferType
  status               DirectSaleOfferStatus
  price                Float?
  minimumOfferPrice    Float?
  
  // Localização
  locationCity         String?
  locationState        String?
  latitude             Float?
  longitude            Float?
  
  // Mídia
  imageUrl             String?
  imageMediaId         String? @map("imagem_media_id")
  imagemPrincipal      MediaItem? @relation("VendaDiretaImagemPrincipal")
  dataAiHint           String?
  galleryImageUrls     String[]
  
  // Datas
  expiresAt            DateTime?
  
  // Relações
  categoryId           String
  category             CategoriaLote @relation(fields: [categoryId], references: [id])
  vendedorId           String
  vendedor             Vendedor      @relation(fields: [vendedorId], references: [id])
  proposalsCount       Int           @default(0)
  itemsIncluded        String[]
  tags                 String[]
  views                Int           @default(0)
  
  // Timestamps
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  usuario             Usuario?      @relation(fields: [usuarioId], references: [id])
  usuarioId           String?
  
  @@map("vendas_diretas")
}


model DocumentoUsuario {
  id              String      @id @default(uuid())
  userId          String
  usuario         Usuario     @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentTypeId  String
  documentType    TipoDocumento @relation(fields: [documentTypeId], references: [id])
  fileUrl         String
  fileName        String?
  status          UserDocumentStatus
  uploadDate      DateTime    @default(now())
  analysisDate    DateTime?
  rejectionReason String?

  @@unique([userId, documentTypeId])
  @@map("documentos_usuario")
}

model TipoDocumento {
  id             String      @id
  name           String      @unique
  description    String?
  isRequired     Boolean
  appliesTo      String?
  allowedFormats String?
  displayOrder   Int
  usuarios       DocumentoUsuario[]
  
  @@map("tipos_documento")
}

model Notificacao {
  id        String   @id @default(uuid())
  userId    String
  usuario   Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("notificacoes")
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("mensagens_contato")
}

model Review {
  id              String   @id @default(uuid())
  lotId           String
  lote            Lote     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId       String
  userId          String
  usuario         Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userDisplayName String
  rating          Int
  comment         String?
  createdAt       DateTime @default(now())
  
  @@map("avaliacoes")
}

model LotQuestion {
  id                      String   @id @default(uuid())
  lotId                   String
  lote                    Lote     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId               String
  userId                  String
  usuario                 Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userDisplayName         String
  questionText            String
  isPublic                Boolean
  answerText              String?
  answeredByUserId        String?
  answeredByUserDisplayName String?
  answeredAt              DateTime?
  createdAt               DateTime @default(now())
  
  @@map("perguntas_lote")
}

model UserLotMaxBid {
  id       String  @id @default(uuid())
  userId   String
  usuario  Usuario @relation(fields: [userId], references: [id], onDelete: Cascade)
  lotId    String
  lote     Lote    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  maxAmount Float
  isActive  Boolean @default(true)
  
  @@unique([userId, lotId])
  @@map("lances_maximos_usuario")
}

model Estado {
  id        String   @id @default(uuid())
  name      String   @unique
  uf        String   @unique
  slug      String   @unique
  cityCount Int?
  
  cidades   Cidade[]
  lotes     Lote[]
  tribunais Tribunal[]
  comarcas  Comarca[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("estados")
}

model Cidade {
  id        String   @id @default(uuid())
  name      String
  slug      String
  stateId   String
  stateUf   String
  ibgeCode  String?
  
  estado    Estado  @relation(fields: [stateId], references: [id])
  lotes     Lote[]
  lotCount  Int?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([name, stateId])
  @@map("cidades")
}

model DocumentTemplate {
  id        String                @id @default(uuid())
  name      String                @unique
  type      DocumentTemplateType
  content   String
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  
  @@map("templates_documento")
}


model PlatformSettings {
    id                          String    @id @default("global")
    siteTitle                   String?
    siteTagline                 String?
    galleryImageBasePath        String?
    storageProvider             String?
    firebaseStorageBucket       String?
    activeThemeName             String?
    themes                      Json[]
    platformPublicIdMasks       Json?
    homepageSections            Json[]
    mentalTriggerSettings       Json?
    sectionBadgeVisibility      Json[]
    mapSettings                 Json?
    searchPaginationType        String?
    searchItemsPerPage          Int?
    searchLoadMoreCount         Int?
    showCountdownOnLotDetail    Boolean?
    showCountdownOnCards        Boolean?
    showRelatedLotsOnLotDetail  Boolean?
    relatedLotsCount            Int?
    defaultUrgencyTimerHours    Int?
    variableIncrementTable      Json[]
    biddingSettings             Json?
    defaultListItemsPerPage     Int?
    
    updatedAt                   DateTime  @updatedAt
    
    @@map("configuracoes_plataforma")
}


// ==============================================================================
//  ENUMS
// ==============================================================================

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
}

enum DirectSaleOfferType {
    BUY_NOW
    ACCEPTS_PROPOSALS
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum UserHabilitationStatus {
  PENDENTE_DOCUMENTOS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}
