// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================================
//          AUTHENTICATION
// ==================================

model User {
  id                  String    @id @default(uuid())
  email               String    @unique
  fullName            String?
  password            String?
  accountType         String? // PHYSICAL, LEGAL, DIRECT_SALE_CONSIGNOR
  roleId              String?
  role                Role?     @relation(fields: [roleId], references: [id])
  habilitationStatus  String?   @default("PENDING_DOCUMENTS") // UserHabilitationStatus
  status              String?   @default("ATIVO") // UserStatus
  optInMarketing      Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  avatarUrl           String?
  dataAiHint          String?   @db.Text
  sellerId            String?   @unique
  sellerProfile       Seller?
  auctioneerId        String?   @unique
  auctioneerProfile   Auctioneer?
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  reviews             Review[]
  questions           LotQuestion[]
  maxBids             UserLotMaxBid[]
  blogPosts           BlogPost[]
  notifications       Notification[]

  // Detailed Profile Info
  cpf                 String?   @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  
  // PJ Specific
  razaoSocial         String?
  cnpj                String?   @unique
  inscricaoEstadual   String?
  website             String?

  @@index([roleId])
}

model Role {
  id              String       @id @default(uuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  permissions     Permission[]
  users           User[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Permission {
  id    String @id @default(uuid())
  name  String @unique
  roles Role[]
}

model UserDocument {
  id               String   @id @default(uuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentTypeId   String
  documentType     DocumentType @relation(fields: [documentTypeId], references: [id])
  fileUrl          String
  fileName         String?
  status           String   @default("NOT_SENT") // UserDocumentStatus
  uploadDate       DateTime @default(now())
  analysisDate     DateTime?
  analystId        String?
  rejectionReason  String?  @db.Text

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id              String   @id @default(uuid())
  name            String   @unique
  description     String?
  isRequired      Boolean
  appliesTo       String[] // PHYSICAL, LEGAL
  allowedFormats  String[]
  displayOrder    Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userDocuments   UserDocument[]
}

// ==================================
//      AUCTIONS & LOTS
// ==================================

model Auction {
  id                 String    @id @default(uuid())
  publicId           String    @unique @default(uuid())
  title              String
  description        String?   @db.Text
  status             String // AuctionStatus
  auctionType        String? // AuctionType
  
  categoryId         String?
  category           LotCategory? @relation(fields: [categoryId], references: [id])
  
  auctioneerId       String?
  auctioneer         Auctioneer?  @relation(fields: [auctioneerId], references: [id])
  
  sellerId           String?
  seller             Seller?      @relation(fields: [sellerId], references: [id])
  
  judicialProcessId  String?
  judicialProcess    JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)

  auctionDate        DateTime
  endDate            DateTime?
  
  // Structured Stages
  auctionStages      Json[]

  // Location
  city               String?
  state              String?
  
  // Media
  imageUrl           String?
  imageMediaId       String?
  mediaItem          MediaItem? @relation("AuctionMainImage", fields: [imageMediaId], references: [id], onDelete: SetNull)

  // Extra Info
  dataAiHint         String?   @db.Text
  documentsUrl       String?
  totalLots          Int       @default(0)
  visits             Int       @default(0)
  initialOffer       Float?
  sellingBranch      String?
  
  // Technical Settings
  automaticBiddingEnabled    Boolean @default(false)
  allowInstallmentBids       Boolean @default(false)
  softCloseEnabled           Boolean @default(false)
  softCloseMinutes           Int? @default(2)
  silentBiddingEnabled       Boolean @default(false)
  allowMultipleBidsPerUser   Boolean @default(true)
  autoRelistSettings         Json?

  // Marketplace Settings
  isFeaturedOnMarketplace    Boolean @default(false)
  marketplaceAnnouncementTitle String?
  additionalTriggers         String[]

  // Financials
  estimatedRevenue   Float?
  achievedRevenue    Float?

  // Social
  totalHabilitatedUsers Int? @default(0)
  
  // Relations
  lots               Lot[]
  bids               Bid[]
  wins               UserWin[]
  reviews            Review[]
  questions          LotQuestion[]

  // Relisting
  relistedAuctionId   String?     @unique // This auction is a relist of...
  relistedAuction     Auction?    @relation("AuctionRelist", fields: [relistedAuctionId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  relistedFrom        Auction[]   @relation("AuctionRelist")


  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}


model Lot {
  id                      String    @id @default(uuid())
  publicId                String    @unique @default(uuid())
  auctionId               String
  auction                 Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  
  number                  String?
  title                   String
  description             String?   @db.Text
  status                  String    // LotStatus
  
  // Pricing
  price                   Float     @default(0) // Current price
  initialPrice            Float?    // Price for 1st stage
  secondInitialPrice      Float?    // Price for 2nd stage
  bidIncrementStep        Float?
  reservePrice            Float?
  evaluationValue         Float?
  debtAmount              Float?
  itbiValue               Float?
  
  // Category
  categoryId              String?
  category                LotCategory? @relation(fields: [categoryId], references: [id])
  subcategoryId           String?
  subcategory             Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  
  // Dates
  lotSpecificAuctionDate  DateTime?
  secondAuctionDate       DateTime?
  endDate                 DateTime?

  // Media
  imageUrl                String?
  imageMediaId            String?
  mediaItem               MediaItem?   @relation("LotMainImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  galleryImageUrls        String[]
  mediaItemIds            String[]  // Links to MediaItem IDs

  // Bidding & Stats
  bidsCount               Int       @default(0)
  views                   Int       @default(0)
  isFavorite              Boolean   @default(false)
  isFeatured              Boolean   @default(false)
  isExclusive             Boolean   @default(false)
  
  // Relations
  bids                    Bid[]
  wins                    UserWin[]
  reviews                 Review[]
  questions               LotQuestion[]
  maxBids                 UserLotMaxBid[]
  
  // Item-specific data
  dataAiHint              String?
  additionalTriggers      String[]
  
  // Location
  stateId                 String?
  cityId                  String?
  cityName                String?
  stateUf                 String?
  latitude                Float?
  longitude               Float?
  mapAddress              String?
  mapEmbedUrl             String?
  mapStaticImageUrl       String?
  
  // Judicial Info
  judicialProcessNumber   String?
  courtDistrict           String?
  courtName               String?
  publicProcessUrl        String?
  propertyRegistrationNumber String?
  propertyLiens           String? @db.Text
  knownDebts              String? @db.Text
  additionalDocumentsInfo String? @db.Text
  
  // Physical Condition
  condition               String?

  // Bem Link
  bemIds                  String[]
  bens                    Bem[] @relation(fields: [bemIds], references: [id])
  
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

model LotCategory {
  id                  String       @id @default(uuid())
  name                String       @unique
  slug                String       @unique
  description         String?
  logoUrl             String?
  coverImageUrl       String?
  megaMenuImageUrl    String?
  logoMediaId         String?
  coverImageMediaId   String?
  megaMenuImageMediaId String?
  dataAiHintLogo      String?
  dataAiHintCover     String?
  dataAiHintMegaMenu  String?
  itemCount           Int          @default(0)
  hasSubcategories    Boolean      @default(false)
  subcategories       Subcategory[]
  lots                Lot[]
  bens                Bem[]
  auctions            Auction[]
  directSaleOffers    DirectSaleOffer[]
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

model Subcategory {
  id                String       @id @default(uuid())
  name              String
  slug              String
  description       String?
  parentCategoryId  String
  parentCategory    LotCategory  @relation(fields: [parentCategoryId], references: [id])
  displayOrder      Int          @default(0)
  itemCount         Int          @default(0)
  iconUrl           String?
  iconMediaId       String?
  dataAiHintIcon    String?
  lots              Lot[]
  bens              Bem[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@unique([parentCategoryId, name])
}

// ==================================
//       PEOPLE & ORGANIZATIONS
// ==================================

model Auctioneer {
  id                      String    @id @default(uuid())
  publicId                String    @unique @default(uuid())
  name                    String    @unique
  slug                    String    @unique
  registrationNumber      String?
  contactName             String?
  email                   String?
  phone                   String?
  address                 String?
  city                    String?
  state                   String?
  zipCode                 String?
  website                 String?
  logoUrl                 String?
  logoMediaId             String?
  dataAiHintLogo          String?
  description             String?   @db.Text
  memberSince             DateTime?
  rating                  Float?
  auctionsConductedCount  Int?
  totalValueSold          Float?
  auctions                Auction[]
  userId                  String?   @unique
  user                    User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

model Seller {
  id                      String    @id @default(uuid())
  publicId                String    @unique @default(uuid())
  name                    String    @unique
  slug                    String    @unique
  contactName             String?
  email                   String?
  phone                   String?
  address                 String?
  city                    String?
  state                   String?
  zipCode                 String?
  website                 String?
  logoUrl                 String?
  logoMediaId             String?
  dataAiHintLogo          String?
  description             String?   @db.Text
  memberSince             DateTime?
  rating                  Float?
  activeLotsCount         Int?
  totalSalesValue         Float?
  auctionsFacilitatedCount Int?
  isJudicial              Boolean   @default(false)
  userId                  String?   @unique
  user                    User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  auctions                Auction[]
  directSaleOffers        DirectSaleOffer[]
  judicialProcesses       JudicialProcess[]
  bens                    Bem[]
  judicialBranchId        String? @unique
  judicialBranch          JudicialBranch? @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

// ==================================
//        DIRECT SALES
// ==================================

model DirectSaleOffer {
  id                 String    @id @default(uuid())
  publicId           String    @unique @default(uuid())
  title              String
  description        String    @db.Text
  offerType          String    // DirectSaleOfferType: BUY_NOW or ACCEPTS_PROPOSALS
  status             String    // DirectSaleOfferStatus: ACTIVE, SOLD, EXPIRED
  
  price              Float?    // For BUY_NOW
  minimumOfferPrice  Float?    // For ACCEPTS_PROPOSALS
  
  categoryId         String
  category           LotCategory @relation(fields: [categoryId], references: [id])
  
  locationCity       String?
  locationState      String?
  latitude           Float?
  longitude          Float?
  mapAddress         String?
  mapEmbedUrl        String?
  mapStaticImageUrl  String?

  sellerId           String
  seller             Seller    @relation(fields: [sellerId], references: [id])
  
  imageUrl           String?
  imageMediaId       String?
  galleryImageUrls   Json[]
  mediaItemIds       String[]
  dataAiHint         String?
  
  views              Int       @default(0)
  proposalsCount     Int       @default(0)
  
  expiresAt          DateTime?
  
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

// ==================================
//        JUDICIAL
// ==================================

model Court {
  id        String       @id @default(uuid())
  name      String       @unique
  slug      String       @unique
  stateUf   String
  website   String?
  districts JudicialDistrict[]
  processes JudicialProcess[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model JudicialDistrict {
  id        String       @id @default(uuid())
  name      String
  slug      String
  courtId   String
  court     Court        @relation(fields: [courtId], references: [id])
  stateId   String
  state     State        @relation(fields: [stateId], references: [id])
  zipCode   String?
  branches  JudicialBranch[]
  processes JudicialProcess[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([name, courtId])
}

model JudicialBranch {
  id         String       @id @default(uuid())
  name       String
  slug       String
  districtId String
  district   JudicialDistrict @relation(fields: [districtId], references: [id])
  contactName String?
  phone      String?
  email      String?
  seller     Seller?
  processes  JudicialProcess[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@unique([name, districtId])
}

model JudicialProcess {
  id                String       @id @default(uuid())
  publicId          String       @unique @default(uuid())
  processNumber     String       @unique
  isElectronic      Boolean
  courtId           String?
  court             Court?       @relation(fields: [courtId], references: [id])
  districtId        String?
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  branchId          String?
  branch            JudicialBranch? @relation(fields: [branchId], references: [id], onDelete: SetNull)
  sellerId          String?
  seller            Seller?      @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties           ProcessParty[]
  bens              Bem[]
  auctions          Auction[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model ProcessParty {
  id             String         @id @default(uuid())
  processId      String
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  name           String
  documentNumber String?
  partyType      String        // ProcessPartyType: AUTOR, REU, etc.
}

model Bem {
  id                 String    @id @default(uuid())
  publicId           String    @unique @default(uuid())
  title              String
  description        String?   @db.Text
  status             String // BemStatus
  categoryId         String
  category           LotCategory @relation(fields: [categoryId], references: [id])
  subcategoryId      String?
  subcategory        Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  
  judicialProcessId  String?
  judicialProcess    JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  
  sellerId           String?
  seller             Seller?   @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  
  evaluationValue    Float?
  
  imageUrl           String?
  imageMediaId       String?
  galleryImageUrls   Json[]
  mediaItemIds       String[]
  dataAiHint         String?

  locationCity       String?
  locationState      String?
  address            String?
  latitude           Float?
  longitude          Float?

  lots               Lot[] @relation(fields: [lotIds], references: [id])
  lotIds             String[]

  // Vehicle Specific Fields
  plate              String?
  make               String?
  model              String?
  version            String?
  year               Int?
  modelYear          Int?
  mileage            Int?
  color              String?
  fuelType           String?
  transmissionType   String?
  bodyType           String?
  vin                String? @unique
  renavam            String? @unique
  enginePower        String?
  numberOfDoors      Int?
  vehicleOptions     String? @db.Text
  detranStatus       String?
  debts              String? @db.Text
  runningCondition   String?
  bodyCondition      String?
  tiresCondition     String?
  hasKey             Boolean?

  // Real Estate Specific Fields
  propertyRegistrationNumber String? @unique
  iptuNumber             String? @unique
  isOccupied             Boolean?
  area                   Float?
  totalArea              Float?
  builtArea              Float?
  bedrooms               Int?
  suites                 Int?
  bathrooms              Int?
  parkingSpaces          Int?
  propertyType           String?
  constructionType       String?
  finishes               String? @db.Text
  infrastructure         String? @db.Text
  condoDetails           String? @db.Text
  improvements           String? @db.Text
  topography             String?
  liensAndEncumbrances   String? @db.Text
  propertyDebts          String? @db.Text
  unregisteredRecords    String? @db.Text
  hasHabiteSe            Boolean?
  zoningRestrictions     String?
  amenities              Json[]

  // Eletronics
  brand                  String?
  serialNumber           String?
  itemCondition          String?
  specifications         String? @db.Text
  includedAccessories    String? @db.Text
  batteryCondition       String?
  hasInvoice             Boolean?
  hasWarranty            Boolean?
  repairHistory          String? @db.Text

  // Appliances
  applianceCapacity      String?
  voltage                String?
  applianceType          String?
  additionalFunctions    String? @db.Text

  // Machinery
  hoursUsed              Int?
  engineType             String?
  capacityOrPower        String?
  maintenanceHistory     String? @db.Text
  installationLocation   String?
  compliesWithNR         String?
  operatingLicenses      String?

  // Semoventes (Livestock)
  breed                  String?
  age                    String?
  sex                    String? // Macho, Fêmea
  weight                 String?
  individualId           String?
  purpose                String?
  sanitaryCondition      String? @db.Text
  lineage                String? @db.Text
  isPregnant             Boolean?
  specialSkills          String? @db.Text
  gtaDocument            String?
  breedRegistryDocument  String?

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

// ==================================
//          INTERACTIONS
// ==================================

model Bid {
  id            String   @id @default(uuid())
  lotId         String
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId     String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidderId      String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Restrict)
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())

  @@index([lotId])
  @@index([bidderId])
}

model UserWin {
  id              String   @id @default(uuid())
  lotId           String
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Restrict)
  auctionId       String
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Restrict)
  winningBidAmount Float
  winDate         DateTime
  paymentStatus   String   @default("PENDENTE") // PaymentStatus
  invoiceUrl      String?

  @@index([userId, lotId])
}

model Review {
  id               String   @id @default(uuid())
  lotId            String
  lot              Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId        String
  auction          Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userDisplayName  String
  rating           Int
  comment          String   @db.Text
  createdAt        DateTime @default(now())

  @@index([lotId])
}

model LotQuestion {
  id                      String   @id @default(uuid())
  lotId                   String
  lot                     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId               String
  auction                 Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  userId                  String
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userDisplayName         String
  questionText            String   @db.Text
  answerText              String?  @db.Text
  answeredAt              DateTime?
  answeredByUserId        String?
  answeredByUserDisplayName String?
  isPublic                Boolean  @default(true)
  createdAt               DateTime @default(now())

  @@index([lotId])
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lotId     String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lotId])
}

// ==================================
//        CONTENT & METADATA
// ==================================

model MediaItem {
  id              String    @id @default(uuid())
  fileName        String
  storagePath     String    @unique
  uploadedAt      DateTime  @default(now())
  uploadedBy      String?
  title           String?
  altText         String?
  caption         String?
  description     String?
  mimeType        String
  sizeBytes       Int
  dimensions      Json?
  urlOriginal     String
  urlThumbnail    String?
  urlMedium       String?
  urlLarge        String?
  linkedLotIds    String[]
  dataAiHint      String?
  auctionMainImage Auction? @relation("AuctionMainImage")
  lotMainImage    Lot?     @relation("LotMainImage")
}

model State {
  id        String       @id @default(uuid())
  name      String       @unique
  uf        String       @unique
  slug      String       @unique
  cityCount Int          @default(0)
  cities    City[]
  districts JudicialDistrict[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model City {
  id        String    @id @default(uuid())
  name      String
  slug      String
  stateId   String
  state     State     @relation(fields: [stateId], references: [id])
  stateUf   String
  ibgeCode  String?
  lotCount  Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model PlatformSettings {
  id                        String @id @default("global")
  siteTitle                 String
  siteTagline               String?
  galleryImageBasePath      String
  storageProvider           String? @default("local") // local or firebase
  firebaseStorageBucket     String?
  activeThemeName           String?
  themes                    Json[] // Array of Theme objects
  platformPublicIdMasks     Json?
  homepageSections          Json[]
  mentalTriggerSettings     Json?
  sectionBadgeVisibility    Json?
  mapSettings               Json?
  searchPaginationType      String? @default("loadMore")
  searchItemsPerPage        Int? @default(12)
  searchLoadMoreCount       Int? @default(12)
  showCountdownOnLotDetail  Boolean? @default(true)
  showCountdownOnCards      Boolean? @default(true)
  showRelatedLotsOnLotDetail Boolean? @default(true)
  relatedLotsCount          Int? @default(5)
  variableIncrementTable    Json[] @default("[]")
  biddingSettings           Json?
  defaultListItemsPerPage   Int? @default(10)
  updatedAt                 DateTime @updatedAt
}

model BlogPost {
  id            String    @id @default(uuid())
  title         String
  slug          String    @unique
  content       String    @db.Text
  excerpt       String?   @db.Text
  authorId      String
  author        User      @relation(fields: [authorId], references: [id])
  publishedAt   DateTime?
  status        String    @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  featuredImage String?
  tags          String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}
