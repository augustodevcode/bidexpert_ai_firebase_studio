// prisma/schema.prisma

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. User and Auth Models
// =================================================================

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  password              String
  fullName              String?
  habilitationStatus    String?   @default("PENDING_DOCUMENTS")
  accountType           String?   @default("PHYSICAL")
  optInMarketing        Boolean   @default(false)
  badges                Json      @default("[]") // Storing as JSON string: '["badge1", "badge2"]'
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  // Personal Info (PF)
  cpf                   String?   @unique
  dateOfBirth           DateTime?
  
  // Company Info (PJ)
  razaoSocial           String?
  cnpj                  String?   @unique
  inscricaoEstadual     String?
  website               String?

  // Contact & Address
  cellPhone             String?
  zipCode               String?
  street                String?
  number                String?
  complement            String?
  neighborhood          String?
  city                  String?
  state                 String?

  // Relationships
  roleId                String?
  role                  Role?     @relation(fields: [roleId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  documents             UserDocument[]
  bids                  Bid[]
  wins                  UserWin[]
  notifications         Notification[]
  reviews               Review[]
  askedQuestions        LotQuestion[] @relation("AskedByUser")
  answeredQuestions     LotQuestion[] @relation("AnsweredByUser")

  // For User <-> Seller one-to-one
  sellerProfile         Seller?   @relation("UserSeller")

  // For User <-> Auctioneer one-to-one
  auctioneerProfile     Auctioneer? @relation("UserAuctioneer")
}

model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?      @db.Text
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  users           User[]
  permissions     Permission[] @relation("RolePermissions")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?  @db.Text
  roles       Role[]   @relation("RolePermissions")
}

// =================================================================
// 2. Habilitation Models
// =================================================================

model DocumentType {
  id             String         @id @default(cuid())
  name           String         @unique
  description    String?        @db.Text
  isRequired     Boolean        @default(false)
  appliesTo      Json           @default("[\"PHYSICAL\", \"LEGAL\"]") // e.g., '["PHYSICAL", "LEGAL"]'
  allowedFormats Json           @default("[\"pdf\", \"jpg\", \"png\"]") // e.g., '["pdf", "jpg"]'
  displayOrder   Int            @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  userDocuments  UserDocument[]
}

model UserDocument {
  id              String   @id @default(cuid())
  userId          String
  documentTypeId  String
  fileUrl         String?  @db.Text
  fileName        String?
  status          String   @default("NOT_SENT") // NOT_SENT, SUBMITTED, PENDING_ANALYSIS, APPROVED, REJECTED
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  rejectionReason String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)

  @@unique([userId, documentTypeId])
}


// =================================================================
// 3. Auction Core Models
// =================================================================

model Auction {
  id                             String        @id @default(cuid())
  publicId                       String        @unique @default(cuid())
  title                          String
  description                    String?       @db.Text
  status                         String        @default("RASCUNHO")
  auctionType                    String?       // JUDICIAL, EXTRAJUDICIAL, PARTICULAR, TOMADA_DE_PRECOS
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json?         // Array of AuctionStage objects
  isFeaturedOnMarketplace        Boolean?      @default(false)
  marketplaceAnnouncementTitle   String?
  imageUrl                       String?       @db.Text
  documentsUrl                   String?       @db.Text
  visits                         Int?          @default(0)
  totalLots                      Int?          @default(0)
  achievedRevenue                Float?        @default(0)
  estimatedRevenue               Float?
  totalHabilitatedUsers          Int?          @default(0)
  automaticBiddingEnabled        Boolean?      @default(false)
  softCloseEnabled               Boolean?      @default(false)
  softCloseMinutes               Int?
  allowInstallmentBids           Boolean?      @default(false)
  silentBiddingEnabled           Boolean?      @default(false)
  allowMultipleBidsPerUser       Boolean?      @default(true)
  decrementAmount                Float?        // For Dutch auctions
  decrementIntervalSeconds       Int?          // For Dutch auctions
  floorPrice                     Float?        // For Dutch auctions
  autoRelistSettings             Json?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  city                           String?
  state                          String?
  sellingBranch                  String?
  imageMediaId                   String?       @unique
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt

  // Relationships
  categoryId                     String
  category                       LotCategory   @relation(fields: [categoryId], references: [id])
  auctioneerId                   String
  auctioneer                     Auctioneer    @relation(fields: [auctioneerId], references: [id])
  sellerId                       String?
  seller                         Seller?       @relation(fields: [sellerId], references: [id])
  judicialProcessId              String?
  judicialProcess                JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  lots                           Lot[]
  bids                           Bid[]
  reviews                        Review[]
  questions                      LotQuestion[]
  image                          MediaItem?    @relation("AuctionImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model Lot {
  id                   String        @id @default(cuid())
  publicId             String        @unique @default(cuid())
  number               String?
  title                String
  description          String?       @db.Text
  status               String        @default("EM_BREVE")
  price                Float         @default(0)
  initialPrice         Float?
  secondInitialPrice   Float?
  bidIncrementStep     Float?
  endDate              DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate    DateTime?
  isFeatured           Boolean?      @default(false)
  isExclusive          Boolean?      @default(false)
  discountPercentage   Float?
  additionalTriggers   Json?         @default("[]") // '["URGENTE", "DESCONTO_IMPERDIVEL"]'
  condition            String?
  views                Int?          @default(0)
  bidsCount            Int?          @default(0)
  latitude             Float?
  longitude            Float?
  mapAddress           String?
  mapEmbedUrl          String?       @db.Text
  mapStaticImageUrl    String?       @db.Text
  winningBidTermUrl    String?       @db.Text
  imageUrl             String?       @db.Text
  dataAiHint           String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  // Relationships
  auctionId            String
  auction              Auction       @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  categoryId           String
  category             LotCategory   @relation(fields: [categoryId], references: [id])
  subcategoryId        String?
  subcategory          Subcategory?  @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  cityId               String?
  city                 CityInfo?     @relation(fields: [cityId], references: [id], onDelete: SetNull)
  stateId              String?
  state                StateInfo?    @relation(fields: [stateId], references: [id], onDelete: SetNull)
  
  bens                 Bem[]         @relation("BensInLots")
  bids                 Bid[]
  wins                 UserWin[]
  reviews              Review[]
  questions            LotQuestion[]
  maxBids              UserLotMaxBid[]
  mediaItems           MediaItem[]   @relation("LotMediaItems")
}

model Bid {
  id              String   @id @default(cuid())
  bidderId        String
  bidderDisplay   String
  amount          Float
  timestamp       DateTime @default(now())
  
  // Relationships
  auctionId       String
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  lotId           String
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)

  @@index([lotId, timestamp])
}

model UserWin {
  id                String   @id @default(cuid())
  userId            String
  lotId             String
  winningBidAmount  Float
  winDate           DateTime @default(now())
  paymentStatus     String   @default("PENDENTE") // PENDENTE, PROCESSANDO, PAGO, FALHOU, REEMBOLSADO
  invoiceUrl        String?

  // Relationships
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot               Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}


// =================================================================
// 4. Entity Profile Models (Sellers & Auctioneers)
// =================================================================

model Seller {
  id                         String    @id @default(cuid())
  publicId                   String    @unique @default(cuid())
  name                       String
  slug                       String    @unique
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  description                String?   @db.Text
  isJudicial                 Boolean   @default(false)
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
  logoMediaId                String?   @unique
  
  // Relationships
  userId                     String?   @unique
  user                       User?     @relation("UserSeller", fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  judicialBranchId           String?   @unique
  judicialBranch             JudicialBranch? @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  auctions                   Auction[]
  directSaleOffers           DirectSaleOffer[]
  judicialProcesses          JudicialProcess[]
  bens                       Bem[]
  logo                       MediaItem?  @relation("LogoSeller", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model Auctioneer {
  id                         String    @id @default(cuid())
  publicId                   String    @unique @default(cuid())
  name                       String
  slug                       String    @unique
  registrationNumber         String?
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  description                String?   @db.Text
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
  logoMediaId                String?   @unique

  // Relationships
  userId                     String?   @unique
  user                       User?     @relation("UserAuctioneer", fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  auctions                   Auction[]
  logo                       MediaItem? @relation("LogoAuctioneer", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

// =================================================================
// 5. Judicial Entity Models
// =================================================================

model Court {
  id                  String              @id @default(cuid())
  name                String              @unique
  slug                String              @unique
  stateUf             String
  website             String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  // Relationships
  districts           JudicialDistrict[]
  processes           JudicialProcess[]
}

model JudicialDistrict {
  id                  String              @id @default(cuid())
  name                String
  slug                String
  zipCode             String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  // Relationships
  courtId             String
  court               Court               @relation(fields: [courtId], references: [id])
  stateId             String
  state               StateInfo           @relation(fields: [stateId], references: [id])
  branches            JudicialBranch[]
  processes           JudicialProcess[]

  @@unique([name, stateId])
}

model JudicialBranch {
  id                  String             @id @default(cuid())
  name                String
  slug                String
  contactName         String?
  phone               String?
  email               String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  // Relationships
  districtId          String
  district            JudicialDistrict   @relation(fields: [districtId], references: [id])
  processes           JudicialProcess[]
  seller              Seller?
  
  @@unique([name, districtId])
}

model JudicialProcess {
  id                  String          @id @default(cuid())
  publicId            String          @unique @default(cuid())
  processNumber       String          @unique
  isElectronic        Boolean         @default(true)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  // Relationships
  courtId             String
  court               Court           @relation(fields: [courtId], references: [id])
  districtId          String
  district            JudicialDistrict @relation(fields: [districtId], references: [id])
  branchId            String
  branch              JudicialBranch   @relation(fields: [branchId], references: [id])
  sellerId            String?
  seller              Seller?         @relation(fields: [sellerId], references: [id])
  parties             ProcessParty[]
  bens                Bem[]
  auctions            Auction[]
}

model ProcessParty {
  id              String   @id @default(cuid())
  processId       String
  name            String
  documentNumber  String?
  partyType       String   // AUTOR, REU, ADVOGADO_AUTOR, etc.

  // Relationships
  process         JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@unique([processId, name, partyType])
}

// =================================================================
// 6. Bem Model (Asset/Good)
// =================================================================

model Bem {
  id                         String   @id @default(cuid())
  publicId                   String   @unique @default(cuid())
  title                      String
  description                String?  @db.Text
  status                     String   @default("DISPONIVEL") // CADASTRO, DISPONIVEL, LOTEADO, VENDIDO, REMOVIDO, INATIVADO
  evaluationValue            Float?
  imageUrl                   String?  @db.Text
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  
  // Specific Fields as JSON
  vehicleDetails             Json?
  propertyDetails            Json?
  equipmentDetails           Json?
  livestockDetails           Json?
  otherDetails               Json?

  // Relationships
  categoryId                 String
  category                   LotCategory @relation(fields: [categoryId], references: [id])
  subcategoryId              String?
  subcategory                Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcessId          String?
  judicialProcess            JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  sellerId                   String?
  seller                     Seller? @relation(fields: [sellerId], references: [id])
  lots                       Lot[] @relation("BensInLots")
  imageMediaId               String? @unique
  image                      MediaItem? @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  mediaItems                 MediaItem[] @relation("BemMediaItems")
}


// =================================================================
// 7. General Categorization & Location Models
// =================================================================

model LotCategory {
  id                    String      @id @default(cuid())
  name                  String      @unique
  slug                  String      @unique
  description           String?     @db.Text
  itemCount             Int?        @default(0)
  hasSubcategories      Boolean     @default(false)
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  logoMediaId           String?     @unique
  coverImageMediaId     String?     @unique
  megaMenuImageMediaId  String?     @unique

  // Relationships
  lots                  Lot[]
  subcategories         Subcategory[]
  auctions              Auction[]
  directSaleOffers      DirectSaleOffer[]
  bens                  Bem[]
  logo                  MediaItem?  @relation("LogoCategory", fields: [logoMediaId], references: [id], onDelete: SetNull)
  coverImage            MediaItem?  @relation("CoverCategory", fields: [coverImageMediaId], references: [id], onDelete: SetNull)
  megaMenuImage         MediaItem?  @relation("MegaMenuCategory", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull)
}

model Subcategory {
  id             String      @id @default(cuid())
  name           String
  slug           String
  description    String?     @db.Text
  displayOrder   Int         @default(0)
  itemCount      Int?        @default(0)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  iconMediaId    String?     @unique

  // Relationships
  parentCategoryId String
  parentCategory LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots           Lot[]
  bens           Bem[]
  icon           MediaItem?  @relation("IconSubcategory", fields: [iconMediaId], references: [id], onDelete: SetNull)

  @@unique([parentCategoryId, slug])
}


model StateInfo {
  id        String             @id @default(cuid())
  name      String             @unique
  uf        String             @unique
  slug      String             @unique
  cityCount Int?               @default(0)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  // Relationships
  cities    CityInfo[]
  courts    Court[]
  districts JudicialDistrict[]
  lots      Lot[]
}

model CityInfo {
  id        String   @id @default(cuid())
  name      String
  slug      String
  stateUf   String
  ibgeCode  String?
  lotCount  Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  stateId   String
  state     StateInfo @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots      Lot[]

  @@unique([name, stateId])
}


// =================================================================
// 8. Platform-wide Models (Media, Settings, Notifications)
// =================================================================

model MediaItem {
  id            String   @id @default(cuid())
  fileName      String
  storagePath   String?
  uploadedAt    DateTime @default(now())
  uploadedBy    String?  
  title         String?
  altText       String?
  caption       String?
  description   String?  @db.Text
  mimeType      String
  sizeBytes     Int
  dimensions    Json?
  urlOriginal   String   @db.Text
  urlThumbnail  String?  @db.Text
  urlMedium     String?  @db.Text
  urlLarge      String?  @db.Text
  dataAiHint    String?
  
  // Relationships
  lots        Lot[] @relation("LotMediaItems")
  bens        Bem[] @relation("BemMediaItems")
  
  // For one-to-one image relationships
  auctionImage      Auction? @relation("AuctionImage")
  lotImage          Lot?     @relation("LotImage")
  bemImage          Bem?     @relation("BemImage")
  offerImage        DirectSaleOffer? @relation("OfferImage")
  logoCategory      LotCategory? @relation("LogoCategory")
  coverCategory     LotCategory? @relation("CoverCategory")
  megaMenuCategory  LotCategory? @relation("MegaMenuCategory")
  iconSubcategory   Subcategory? @relation("IconSubcategory")
  logoSeller        Seller? @relation("LogoSeller")
  logoAuctioneer    Auctioneer? @relation("LogoAuctioneer")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PlatformSettings {
  id                         String   @id @default("global")
  siteTitle                  String?
  siteTagline                String?
  galleryImageBasePath       String?
  storageProvider            String?  @default("local") // local or firebase
  firebaseStorageBucket      String?
  activeThemeName            String?
  themes                     Json?
  platformPublicIdMasks      Json?
  homepageSections           Json?
  mentalTriggerSettings      Json?
  sectionBadgeVisibility     Json?
  mapSettings                Json?
  biddingSettings            Json?
  variableIncrementTable     Json?
  searchPaginationType       String?  @default("loadMore")
  searchItemsPerPage         Int?     @default(12)
  searchLoadMoreCount        Int?     @default(12)
  defaultListItemsPerPage    Int?     @default(10)
  showCountdownOnLotDetail   Boolean? @default(true)
  showCountdownOnCards       Boolean? @default(true)
  showRelatedLotsOnLotDetail Boolean? @default(true)
  relatedLotsCount           Int?     @default(5)
  updatedAt                  DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model BlogPost {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  content   String   @db.Text
  authorId  String
  imageUrl  String?
  published Boolean  @default(false)
  publishedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// =================================================================
// 9. Interaction Models (Reviews, Questions, Direct Sales)
// =================================================================

model Review {
  id                String   @id @default(cuid())
  lotId             String
  auctionId         String
  userId            String
  userDisplayName   String
  rating            Int
  comment           String   @db.Text
  createdAt         DateTime @default(now())

  // Relationships
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot               Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction           Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  
  @@unique([lotId, userId])
}

model LotQuestion {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  questionText    String   @db.Text
  isPublic        Boolean  @default(true)
  createdAt       DateTime @default(now())
  
  answerText      String?  @db.Text
  answeredAt      DateTime?
  answeredByUserId String?
  
  // Relationships
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user            User     @relation("AskedByUser", fields: [userId], references: [id], onDelete: Cascade)
  answeredByUser  User?    @relation("AnsweredByUser", fields: [answeredByUserId], references: [id], onDelete: SetNull)
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model DirectSaleOffer {
  id                       String   @id @default(cuid())
  publicId                 String   @unique @default(cuid())
  title                    String
  description              String   @db.Text
  offerType                String   // BUY_NOW or ACCEPTS_PROPOSALS
  status                   String   @default("PENDING_APPROVAL") // PENDING_APPROVAL, ACTIVE, SOLD, EXPIRED
  price                    Float?   // For BUY_NOW
  minimumOfferPrice        Float?   // For ACCEPTS_PROPOSALS
  locationCity             String?
  locationState            String?
  imageUrl                 String?  @db.Text
  dataAiHint               String?
  expiresAt                DateTime?
  views                    Int?     @default(0)
  proposalsCount           Int?     @default(0)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  
  // Relationships
  categoryId               String
  category                 LotCategory @relation(fields: [categoryId], references: [id])
  sellerId                 String
  seller                   Seller   @relation(fields: [sellerId], references: [id])
  imageMediaId             String?  @unique
  image                    MediaItem? @relation("OfferImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
}
