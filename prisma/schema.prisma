// prisma/schema.prisma
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// ==================================================
// 1. User and Authentication Models
// ==================================================

model User {
  id                    String        @id @default(cuid())
  email                 String        @unique
  fullName              String
  password              String
  roleId                String?
  sellerId              String?       @unique
  auctioneerId          String?       @unique
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  habilitationStatus    UserHabilitationStatus @default(PENDING_DOCUMENTS)
  badges                Json          @default("[]") // String[] -> Json
  
  // Personal Info
  cpf                   String?
  dateOfBirth           DateTime?
  cellPhone             String?
  
  // Legal Entity Info (if applicable)
  accountType           AccountType   @default(PHYSICAL)
  razaoSocial           String?
  cnpj                  String?
  
  // Relations
  role                  Role?                   @relation(fields: [roleId], references: [id], onDelete: SetNull)
  sellerProfile         Seller?                 @relation("UserSellerProfile")
  auctioneerProfile     Auctioneer?             @relation("UserAuctioneerProfile")
  bids                  Bid[]
  wins                  UserWin[]
  submittedDocuments    UserDocument[]
  notifications         Notification[]
  askedQuestions        LotQuestion[]           @relation("AskedByUser")
  answeredQuestions     LotQuestion[]           @relation("AnsweredByUser")
  reviews               Review[]
  uploadedMedia         MediaItem[]
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

model Role {
  id              String       @id @default(cuid())
  name            String
  name_normalized String       @unique
  description     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  // Relations
  users           User[]
  permissions     Permission[]
}

model Permission {
  id      String   @id @default(cuid())
  name    String   @unique
  roles   Role[]
}

// ==================================================
// 2. Auction Core Models
// ==================================================

model Auction {
  id                String       @id @default(cuid())
  publicId          String       @unique @default(cuid())
  title             String
  description       String?      @db.Text
  status            AuctionStatus
  auctionType       AuctionType?
  auctionDate       DateTime
  endDate           DateTime?
  city              String?
  state             String?
  imageUrl          String?
  imageMediaId      String?      @unique
  documentsUrl      String?
  sellingBranch     String?
  
  // Configuration
  automaticBiddingEnabled    Boolean? @default(false)
  allowInstallmentBids       Boolean? @default(false)
  softCloseEnabled           Boolean? @default(false)
  softCloseMinutes           Int?
  
  // Stats & Marketplace
  visits                     Int?     @default(0)
  estimatedRevenue           Float?
  achievedRevenue            Float?
  totalHabilitatedUsers      Int?
  isFeaturedOnMarketplace    Boolean? @default(false)
  marketplaceAnnouncementTitle String?
  additionalTriggers         Json?    @default("[]")

  // JSON fields for complex data
  auctionStages     Json? @default("[]")
  biddingHistory    Json? @default("[]")
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  categoryId        String
  category          LotCategory   @relation(fields: [categoryId], references: [id])
  auctioneerId      String
  auctioneer        Auctioneer    @relation(fields: [auctioneerId], references: [id])
  sellerId          String?
  seller            Seller?       @relation(fields: [sellerId], references: [id])
  judicialProcessId String?
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  image             MediaItem?    @relation("AuctionImage", fields: [imageMediaId], references: [id])
  
  lots              Lot[]
  bids              Bid[]

  @@index([status])
  @@index([categoryId])
  @@index([auctioneerId])
  @@index([sellerId])
  @@index([judicialProcessId])
}

model Lot {
  id                         String    @id @default(cuid())
  publicId                   String    @unique @default(cuid())
  number                     String?
  title                      String
  description                String?   @db.Text
  price                      Float
  initialPrice               Float?
  secondInitialPrice         Float?
  bidIncrementStep           Float?
  status                     LotStatus
  isFeatured                 Boolean?  @default(false)
  isExclusive                Boolean?  @default(false)
  
  // Stats
  views                      Int?      @default(0)
  bidsCount                  Int?      @default(0)
  
  // Dates
  endDate                    DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?

  // Relations
  auctionId                  String
  auction                    Auction    @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  categoryId                 String
  category                   LotCategory @relation(fields: [categoryId], references: [id])
  subcategoryId              String?
  subcategory                Subcategory? @relation(fields: [subcategoryId], references: [id])
  sellerId                   String?
  seller                     Seller?    @relation(fields: [sellerId], references: [id])
  stateId                    String?
  state                      StateInfo? @relation(fields: [stateId], references: [id])
  cityId                     String?
  city                       CityInfo?  @relation(fields: [cityId], references: [id])
  imageMediaId               String?    @unique
  image                      MediaItem? @relation("LotImage", fields: [imageMediaId], references: [id])
  
  bens                       Bem[]
  mediaItems                 MediaItem[]
  bids                       Bid[]
  wins                       UserWin[]
  reviews                    Review[]
  questions                  LotQuestion[]
  maxBids                    UserLotMaxBid[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([auctionId])
  @@index([categoryId])
  @@index([status])
}

model Bem {
    id              String @id @default(cuid())
    publicId        String @unique @default(cuid())
    title           String
    description     String? @db.Text
    status          BemStatus @default(DISPONIVEL)
    evaluationValue Float?
    imageUrl        String?
    dataAiHint      String?
    
    // Location
    locationCity    String?
    locationState   String?
    address         String?
    latitude        Float?
    longitude       Float?

    // JSON fields for specific data
    vehicleData     Json?
    propertyData    Json?
    machineryData   Json?
    otherData       Json?

    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    // Relations
    judicialProcessId String?
    judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
    sellerId          String?
    seller            Seller?          @relation(fields: [sellerId], references: [id])
    categoryId        String
    category          LotCategory      @relation(fields: [categoryId], references: [id])
    subcategoryId     String?
    subcategory       Subcategory?     @relation(fields: [subcategoryId], references: [id])

    lots              Lot[] // Many-to-many with Lot

    @@index([judicialProcessId])
    @@index([sellerId])
    @@index([categoryId])
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

// ==================================================
// 3. Bidding and Post-Auction Models
// ==================================================

model Bid {
  id            String   @id @default(cuid())
  amount        Float
  timestamp     DateTime @default(now())
  
  // Relations
  bidderId      String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  lotId         String
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId     String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  
  @@index([bidderId])
  @@index([lotId])
}

model UserWin {
  id               String   @id @default(cuid())
  winningBidAmount Float
  winDate          DateTime @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?
  
  // Relations
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  lotId            String   @unique // One win per lot
  lot              Lot      @relation(fields: [lotId], references: [id])

  @@index([userId])
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

model UserLotMaxBid {
    id          String @id @default(cuid())
    maxAmount   Float
    isActive    Boolean @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    userId      String
    user        User @relation(fields: [userId], references: [id])
    lotId       String
    lot         Lot @relation(fields: [lotId], references: [id])

    @@unique([userId, lotId])
}


// ==================================================
// 4. Partner and Profile Models
// ==================================================

model Seller {
  id                         String    @id @default(cuid())
  publicId                   String    @unique @default(cuid())
  name                       String
  slug                       String    @unique
  
  // Contact & Info
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  description                String?   @db.Text
  
  // Relations & Stats
  userId                     String?   @unique
  user                       User?     @relation("UserSellerProfile", fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  judicialBranchId           String?   @unique
  judicialBranch             JudicialBranch? @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  
  isJudicial                 Boolean   @default(false)
  auctions                   Auction[]
  judicialProcesses          JudicialProcess[]
  bens                       Bem[]
  directSaleOffers           DirectSaleOffer[]
  
  logoMediaId                String?   @unique
  logo                       MediaItem? @relation("LogoSeller", fields: [logoMediaId], references: [id])

  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
}

model Auctioneer {
  id                   String    @id @default(cuid())
  publicId             String    @unique @default(cuid())
  name                 String
  slug                 String    @unique
  registrationNumber   String?
  
  // Contact & Info
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  description          String?   @db.Text

  // Relations
  userId               String?   @unique
  user                 User?     @relation("UserAuctioneer", fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  auctions             Auction[]
  
  logoMediaId          String?   @unique
  logo                 MediaItem? @relation("LogoAuctioneer", fields: [logoMediaId], references: [id])

  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}


// ==================================================
// 5. Judicial Entity Models
// ==================================================

model Court {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  stateId     String
  state       StateInfo @relation(fields: [stateId], references: [id])
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  districts   JudicialDistrict[]
}

model JudicialDistrict {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  courtId   String
  court     Court    @relation(fields: [courtId], references: [id])
  stateId   String
  state     StateInfo @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
}

model JudicialBranch {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  contactName String?
  phone       String?
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  districtId  String
  district    JudicialDistrict @relation(fields: [districtId], references: [id])
  processes   JudicialProcess[]
  sellers     Seller[]
}

model JudicialProcess {
  id              String   @id @default(cuid())
  publicId        String   @unique @default(cuid())
  processNumber   String   @unique
  isElectronic    Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  courtId         String
  court           Court          @relation(fields: [courtId], references: [id])
  districtId      String
  district        JudicialDistrict @relation(fields: [districtId], references: [id])
  branchId        String
  branch          JudicialBranch @relation(fields: [branchId], references: [id])
  sellerId        String?
  seller          Seller?        @relation(fields: [sellerId], references: [id])
  parties         ProcessParty[]
  bens            Bem[]
  auctions        Auction[]

  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
  @@index([sellerId])
}

model ProcessParty {
  id              String    @id @default(cuid())
  name            String
  documentNumber  String?
  partyType       ProcessPartyType
  
  // Relations
  processId       String
  process         JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  
  @@unique([processId, name, partyType])
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}


// ==================================================
// 6. Taxonomy and Geography Models
// ==================================================

model StateInfo {
  id          String    @id @default(cuid())
  name        String    @unique
  uf          String    @unique
  slug        String    @unique
  cityCount   Int?      @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  cities    CityInfo[]
  courts    Court[]
  districts JudicialDistrict[]
  lots      Lot[]
}

model CityInfo {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  ibgeCode  String?
  lotCount  Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  stateId   String
  state     StateInfo @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots      Lot[]
  
  @@index([stateId])
}

model LotCategory {
  id                   String     @id @default(cuid())
  name                 String     @unique
  slug                 String     @unique
  description          String?
  hasSubcategories     Boolean?   @default(false)
  itemCount            Int?       @default(0)
  
  logoMediaId          String?    @unique
  coverImageMediaId    String?    @unique
  megaMenuImageMediaId String?    @unique
  
  logo                 MediaItem? @relation("LogoCategory", fields: [logoMediaId], references: [id])
  coverImage           MediaItem? @relation("CoverCategory", fields: [coverImageMediaId], references: [id])
  megaMenuImage        MediaItem? @relation("MegaMenuCategory", fields: [megaMenuImageMediaId], references: [id])
  
  // Relations
  auctions             Auction[]
  lots                 Lot[]
  bens                 Bem[]
  directSaleOffers     DirectSaleOffer[]
  subcategories        Subcategory[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subcategory {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  description   String?
  itemCount     Int?     @default(0)
  displayOrder  Int?     @default(0)
  
  // Relations
  parentCategoryId String
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots             Lot[]
  bens             Bem[]
  
  iconMediaId      String?    @unique
  icon             MediaItem? @relation("IconSubcategory", fields: [iconMediaId], references: [id])
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([parentCategoryId])
}

// ==================================================
// 7. Content and System Models
// ==================================================

model Notification {
  id          String   @id @default(cuid())
  message     String
  link        String?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  // Relation
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model Review {
    id                  String   @id @default(cuid())
    rating              Int
    comment             String   @db.Text
    createdAt           DateTime @default(now())

    // Relations
    userId              String
    user                User     @relation(fields: [userId], references: [id])
    userDisplayName     String
    lotId               String
    lot                 Lot      @relation(fields: [lotId], references: [id])
    auctionId           String
    
    @@index([lotId])
    @@index([userId])
}

model LotQuestion {
    id                  String   @id @default(cuid())
    questionText        String   @db.Text
    answerText          String?  @db.Text
    isPublic            Boolean  @default(true)
    createdAt           DateTime @default(now())
    answeredAt          DateTime?

    // Relations
    userId              String
    user                User     @relation("AskedByUser", fields: [userId], references: [id])
    userDisplayName     String
    lotId               String
    lot                 Lot      @relation(fields: [lotId], references: [id])
    auctionId           String
    answeredByUserId    String?
    answeredByUser      User?    @relation("AnsweredByUser", fields: [answeredByUserId], references: [id])
    answeredByUserDisplayName String?
    
    @@index([lotId])
}

model DirectSaleOffer {
  id              String   @id @default(cuid())
  publicId        String   @unique @default(cuid())
  title           String
  description     String   @db.Text
  offerType       DirectSaleOfferType
  status          DirectSaleOfferStatus
  price           Float?
  minimumOfferPrice Float?
  locationCity    String?
  locationState   String?
  
  imageMediaId    String?  @unique
  image           MediaItem? @relation("OfferImage", fields: [imageMediaId], references: [id])
  
  // Stats
  views           Int?     @default(0)
  proposalsCount  Int?     @default(0)

  // Dates
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  expiresAt       DateTime?

  // Relations
  categoryId      String
  category        LotCategory @relation(fields: [categoryId], references: [id])
  sellerId        String
  seller          Seller @relation(fields: [sellerId], references: [id])
  
  @@index([categoryId])
  @@index([sellerId])
  @@index([status])
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  PENDING_APPROVAL
  ACTIVE
  SOLD
  EXPIRED
}

model BlogPost {
  id         String   @id @default(cuid())
  title      String
  slug       String   @unique
  content    String   @db.Text
  authorId   String
  authorName String
  tags       Json     @default("[]") // String[] -> Json
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([isPublished])
}

model MediaItem {
  id            String   @id @default(cuid())
  fileName      String
  storagePath   String   @unique
  title         String?
  altText       String?
  caption       String?
  description   String?
  mimeType      String
  sizeBytes     Int
  uploadedAt    DateTime @default(now())
  
  // Relations
  uploadedById  String?
  uploadedBy    User?    @relation(fields: [uploadedById], references: [id])
  
  lots          Lot[]
  bens          Bem[]
  
  // One-to-one relations for specific uses
  auctionImage         Auction?   @relation("AuctionImage")
  lotImage             Lot?       @relation("LotImage")
  bemImage             Bem?       @relation("BemImage")
  offerImage           DirectSaleOffer? @relation("OfferImage")
  logoSeller           Seller?    @relation("LogoSeller")
  logoAuctioneer       Auctioneer? @relation("LogoAuctioneer")
  logoCategory         LotCategory? @relation("LogoCategory")
  coverCategory        LotCategory? @relation("CoverCategory")
  megaMenuCategory     LotCategory? @relation("MegaMenuCategory")
  iconSubcategory      Subcategory? @relation("IconSubcategory")
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  @@index([isRead])
}

model DocumentTemplate {
    id        String   @id @default(cuid())
    name      String   @unique
    type      DocumentTemplateType
    content   String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([type])
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

model PlatformSettings {
  id                  String  @id @default("global")
  updatedAt           DateTime @updatedAt
  
  // JSON fields for complex objects
  homepageSections    Json?
  mentalTriggerSettings Json?
  sectionBadgeVisibility Json?
  mapSettings         Json?
  biddingSettings     Json?
  platformPublicIdMasks Json?
  themes              Json?
  variableIncrementTable Json?

  // Simple fields
  siteTitle                 String?
  siteTagline               String?
  galleryImageBasePath      String?
  storageProvider           String?
  firebaseStorageBucket     String?
  activeThemeName           String?
  searchPaginationType      String?
  searchItemsPerPage        Int?
  searchLoadMoreCount       Int?
  defaultListItemsPerPage   Int?
  showCountdownOnLotDetail  Boolean?
  showCountdownOnCards      Boolean?
  showRelatedLotsOnLotDetail Boolean?
  relatedLotsCount          Int?
}

// Many-to-many relation table for Role and Permission
model _PermissionToRole {
  A String
  B String

  @@unique([A, B])
  @@index([B])

  permission Permission @relation(fields: [A], references: [id], onDelete: Cascade)
  role       Role       @relation(fields: [B], references: [id], onDelete: Cascade)
}

// Many-to-many relation table for Lot and MediaItem
model _LotToMediaItem {
  A String
  B String

  @@unique([A, B])
  @@index([B])

  lot       Lot       @relation(fields: [A], references: [id], onDelete: Cascade)
  mediaItem MediaItem @relation(fields: [B], references: [id], onDelete: Cascade)
}

// Many-to-many relation table for Bem and Lot
model _BemToLot {
  A   String
  B   String

  @@unique([A, B])
  @@index([B])
  
  bem Bem @relation(fields: [A], references: [id], onDelete: Cascade)
  lot Lot @relation(fields: [B], references: [id], onDelete: Cascade)
}
