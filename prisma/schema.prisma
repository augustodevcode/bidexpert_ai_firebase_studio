// prisma/schema.prisma
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. Enum Definitions (Tipos)
// =================================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

// =================================================================
// 2. Models without dependencies or with only enum dependencies
// =================================================================

model Role {
  id             String      @id @default(uuid())
  name           String      @unique
  nameNormalized String      @unique
  description    String?     @db.Text
  permissions    String[]
  users          UsersOnRoles[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model State {
  id        String   @id @default(uuid())
  name      String
  uf        String   @unique
  slug      String   @unique
  cityCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cities    City[]
  auctions  Auction[]
  districts JudicialDistrict[]
  lots      Lot[]
}

model LotCategory {
  id                  String              @id @default(uuid())
  name                String              @unique
  slug                String              @unique
  description         String?             @db.Text
  hasSubcategories    Boolean             @default(false)
  logoUrl             String?
  logoMediaId         String?
  dataAiHintLogo      String?
  coverImageUrl       String?
  coverImageMediaId   String?
  dataAiHintCover     String?
  megaMenuImageUrl    String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu  String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  lots                Lot[]
  auctions            Auction[]
  subcategories       Subcategory[]
  bens                Bem[]
  directSaleOffers    DirectSaleOffer[]
}

model DocumentType {
  id          String         @id @default(uuid())
  name        String
  description String?
  isRequired  Boolean        @default(true)
  appliesTo   String?        // e.g., "PHYSICAL,LEGAL"
  userDocs    UserDocument[]
}

model PlatformSettings {
  id                           String                 @id @default("global")
  siteTitle                    String?
  siteTagline                  String?
  logoUrl                      String?
  faviconUrl                   String?
  galleryImageBasePath         String
  storageProvider              String                 @default("local")
  firebaseStorageBucket        String?
  activeThemeName              String?
  platformPublicIdMasks        Json?
  searchPaginationType         String                 @default("loadMore")
  searchItemsPerPage           Int                    @default(12)
  searchLoadMoreCount          Int                    @default(12)
  showCountdownOnLotDetail     Boolean                @default(true)
  showCountdownOnCards         Boolean                @default(true)
  showRelatedLotsOnLotDetail   Boolean                @default(true)
  relatedLotsCount             Int                    @default(4)
  defaultUrgencyTimerHours     Int?
  defaultListItemsPerPage      Int                    @default(10)
  updatedAt                    DateTime               @updatedAt
  themes                       Json?
  mapSettings                  Json?
  biddingSettings              Json?
  paymentGatewaySettings       Json?
  variableIncrementTable       Json?
}

model ContactMessage {
  id      String   @id @default(uuid())
  name    String
  email   String
  subject String?
  message String   @db.Text
  isRead  Boolean  @default(false)
  createdAt DateTime @default(now())
}


// =================================================================
// 3. Models with dependencies on the above
// =================================================================

model User {
  id                  String                 @id @default(uuid())
  email               String                 @unique
  password            String?
  fullName            String?
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType            @default(PHYSICAL)
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  roles               UsersOnRoles[]
  bids                Bid[]
  userLotMaxBids      UserLotMaxBid[]
  wins                UserWin[]
  documents           UserDocument[]
  uploadedMedia       MediaItem[]            @relation("UploadedBy")
  answeredQuestions   LotQuestion[]          @relation("AnsweredByUser")
  askedQuestions      LotQuestion[]          @relation("AskedByUser")
  habilitations       AuctionHabilitation[]
  wonLots             Lot[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model City {
  id        String    @id @default(uuid())
  name      String
  slug      String
  stateId   String
  stateUf   String?
  ibgeCode  String?   @unique
  lotCount  Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  state     State     @relation(fields: [stateId], references: [id])
  auctions  Auction[]
  lots      Lot[]

  @@index([stateId])
}

model Court {
  id                String              @id @default(uuid())
  name              String
  slug              String?             @unique
  stateUf           String?
  website           String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  districts         JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model Subcategory {
  id                  String      @id @default(uuid())
  name                String
  slug                String?     @unique
  parentCategoryId    String
  description         String?     @db.Text
  displayOrder        Int         @default(0)
  iconUrl             String?
  iconMediaId         String?
  dataAiHintIcon      String?
  parentCategory      LotCategory @relation(fields: [parentCategoryId], references: [id])
  lots                Lot[]
  bens                Bem[]

  @@index([parentCategoryId])
}

model VehicleMake {
  id      String         @id @default(uuid())
  name    String         @unique
  slug    String         @unique
  models  VehicleModel[]
}

model VehicleModel {
  id     String      @id @default(uuid())
  name   String
  slug   String
  makeId String
  make   VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)

  @@unique([name, makeId])
  @@index([makeId])
}


// =================================================================
// 4. Core Entity Models (Sellers, Auctioneers)
// =================================================================

model Seller {
  id                  String              @id @default(uuid())
  publicId            String?             @unique
  slug                String?             @unique
  name                String              @unique
  contactName         String?
  email               String?
  phone               String?
  address             String?
  city                String?
  state               String?
  zipCode             String?
  website             String?
  logoUrl             String?
  logoMediaId         String?
  dataAiHintLogo      String?
  description         String?             @db.Text
  isJudicial          Boolean             @default(false)
  userId              String?             @unique
  judicialBranchId    String?             @unique
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  user                User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
  judicialBranch      JudicialBranch?     @relation(fields: [judicialBranchId], references: [id])
  auctions            Auction[]
  lots                Lot[]
  bens                Bem[]
  directSaleOffers    DirectSaleOffer[]
  judicialProcesses   JudicialProcess[]
}


model Auctioneer {
  id                   String    @id @default(uuid())
  publicId             String?   @unique
  slug                 String?   @unique
  name                 String
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?   @db.Text
  userId               String?   @unique
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User?     @relation(fields: [userId], references: [id])
  auctions             Auction[]
  lots                 Lot[]
}


// =================================================================
// 5. Judicial Entity Models
// =================================================================

model JudicialDistrict {
  id          String            @id @default(uuid())
  name        String
  slug        String?           @unique
  courtId     String?
  stateId     String?
  zipCode     String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  court       Court?            @relation(fields: [courtId], references: [id])
  state       State?            @relation(fields: [stateId], references: [id])
  branches    JudicialBranch[]
  auctions    Auction[]
  processes   JudicialProcess[]

  @@index([courtId])
  @@index([stateId])
}

model JudicialBranch {
  id                String              @id @default(uuid())
  name              String
  slug              String?             @unique
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  district          JudicialDistrict?   @relation(fields: [districtId], references: [id])
  auctions          Auction[]
  judicialProcesses JudicialProcess[]
  seller            Seller?

  @@index([districtId])
}


model JudicialProcess {
  id              String            @id @default(uuid())
  publicId        String?           @unique
  processNumber   String            @unique
  isElectronic    Boolean           @default(true)
  courtId         String?
  districtId      String?
  branchId        String?
  sellerId        String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  court           Court?            @relation(fields: [courtId], references: [id])
  district        JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch          JudicialBranch?   @relation(fields: [branchId], references: [id])
  seller          Seller?           @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  bens            Bem[]
  parties         JudicialParty[]
  auctions        Auction[]
  
  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
  @@index([sellerId])
}

model JudicialParty {
  id             String           @id @default(uuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  process        JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@index([processId])
}


// =================================================================
// 6. Bem and DirectSaleOffer Models
// =================================================================

model Bem {
  id                       String    @id @default(uuid())
  publicId                 String?   @unique
  title                    String
  description              String?   @db.Text
  status                   String    @default("DISPONIVEL")
  categoryId               String
  subcategoryId            String?
  judicialProcessId        String?
  sellerId                 String?
  evaluationValue          Float?
  imageUrl                 String?
  imageMediaId             String?
  galleryImageUrls         Json?
  mediaItemIds             Json?
  dataAiHint               String?
  locationCity             String?
  locationState            String?
  address                  String?
  latitude                 Float?
  longitude                Float?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  lots                     LotBens[]
  category                 LotCategory          @relation(fields: [categoryId], references: [id])
  subcategory              Subcategory?         @relation(fields: [subcategoryId], references: [id])
  judicialProcess          JudicialProcess?     @relation(fields: [judicialProcessId], references: [id])
  seller                   Seller?              @relation(fields: [sellerId], references: [id])

  // Veículos
  plate                     String?
  make                      String?
  model                     String?
  version                   String?
  year                      Int?
  modelYear                 Int?
  mileage                   Int?
  color                     String?
  fuelType                  String?
  transmissionType          String?
  bodyType                  String?
  vin                       String?
  renavam                   String?
  enginePower               String?
  numberOfDoors             Int?
  vehicleOptions            String?
  detranStatus              String?
  debts                     String?
  runningCondition          String?
  bodyCondition             String?
  tiresCondition            String?
  hasKey                    Boolean?

  // Imóveis
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?             @db.Text
  infrastructure             String?             @db.Text
  condoDetails               String?             @db.Text
  improvements               String?             @db.Text
  topography                 String?
  liensAndEncumbrances       String?             @db.Text
  propertyDebts              String?             @db.Text
  unregisteredRecords        String?             @db.Text
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  amenities                  Json?

  // Eletrônicos
  brand                     String?
  serialNumber              String?
  itemCondition             String?
  specifications            String?              @db.Text
  includedAccessories       String?              @db.Text
  batteryCondition          String?
  hasInvoice                Boolean?
  hasWarranty               Boolean?
  repairHistory             String?              @db.Text

  // Eletrodomésticos
  applianceCapacity         String?
  voltage                   String?
  applianceType             String?
  additionalFunctions       String?

  // Máquinas e Equipamentos
  hoursUsed                 Int?
  engineType                String?
  capacityOrPower           String?
  maintenanceHistory        String?             @db.Text
  installationLocation      String?
  compliesWithNR            String?
  operatingLicenses         String?

  // Semoventes
  breed                     String?
  age                       String?
  sex                       String?
  weight                    String?
  individualId              String?
  purpose                   String?
  sanitaryCondition         String?
  lineage                   String?
  isPregnant                Boolean?
  specialSkills             String?
  gtaDocument               String?
  breedRegistryDocument     String?
  
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([judicialProcessId])
  @@index([sellerId])
}


model DirectSaleOffer {
  id                   String                @id @default(uuid())
  publicId             String?               @unique
  title                String
  description          String?               @db.Text
  offerType            DirectSaleOfferType
  price                Float?
  minimumOfferPrice    Float?
  status               DirectSaleOfferStatus @default(ACTIVE)
  category             LotCategory           @relation(fields: [categoryId], references: [id])
  categoryId           String
  seller               Seller                @relation(fields: [sellerId], references: [id])
  sellerId             String
  sellerName           String
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int                   @default(0)
  expiresAt            DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  @@index([categoryId])
  @@index([sellerId])
}


// =================================================================
// 7. Core Transactional Models (Auction, Lot)
// =================================================================

model Auction {
  id                             String                 @id @default(uuid())
  publicId                       String?                @unique
  slug                           String?                @unique
  title                          String
  description                    String?                @db.Text
  status                         AuctionStatus          @default(RASCUNHO)
  auctionDate                    DateTime
  endDate                        DateTime?
  visits                         Int                    @default(0)
  totalLots                      Int                    @default(0)
  initialOffer                   Float?
  isFavorite                     Boolean                @default(false)
  dataAiHint                     String?
  createdAt                      DateTime               @default(now())
  updatedAt                      DateTime               @updatedAt
  
  // Relations
  auctioneer                     Auctioneer?            @relation(fields: [auctioneerId], references: [id])
  auctioneerId                   String?
  seller                         Seller?                @relation(fields: [sellerId], references: [id])
  sellerId                       String?
  category                       LotCategory?           @relation(fields: [categoryId], references: [id])
  categoryId                     String?
  city                           City?                  @relation(fields: [cityId], references: [id])
  cityId                         String?
  state                          State?                 @relation(fields: [stateId], references: [id])
  stateId                        String?
  judicialProcess                JudicialProcess?       @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId              String?
  court                          Court?                 @relation(fields: [courtId], references: [id])
  courtId                        String?
  district                       JudicialDistrict?      @relation(fields: [districtId], references: [id])
  districtId                     String?
  branch                         JudicialBranch?        @relation(fields: [branchId], references: [id])
  branchId                       String?

  lots                           Lot[]
  bids                           Bid[]
  habilitations                  AuctionHabilitation[]
  
  // Settings
  auctionType                    AuctionType?
  auctionMethod                  AuctionMethod?         @default(STANDARD)
  participation                  AuctionParticipation?  @default(ONLINE)
  onlineUrl                      String?
  address                        String?
  zipCode                        String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  automaticBiddingEnabled        Boolean                @default(false)
  allowInstallmentBids           Boolean                @default(true)
  silentBiddingEnabled           Boolean                @default(false)
  allowMultipleBidsPerUser       Boolean                @default(true)
  softCloseEnabled               Boolean                @default(false)
  softCloseMinutes               Int                    @default(2)
  estimatedRevenue               Float?
  achievedRevenue                Float?
  totalHabilitatedUsers          Int?
  isFeaturedOnMarketplace        Boolean                @default(false)
  marketplaceAnnouncementTitle   String?
  additionalTriggers             Json?
  
  // Dutch Auction Fields
  decrementAmount                Float?
  decrementIntervalSeconds       Int?
  floorPrice                     Float?
  autoRelistSettings             Json?

  auctionStages                  AuctionStage[]

  @@index([auctioneerId])
  @@index([sellerId])
  @@index([categoryId])
  @@index([judicialProcessId])
  @@index([cityId])
  @@index([stateId])
}

model AuctionStage {
  id            String    @id @default(uuid())
  auctionId     String
  name          String
  startDate     DateTime
  endDate       DateTime
  initialPrice  Float?
  statusText    String?
  auction       Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  lotStageDetails LotAuctionStageDetails[]

  @@index([auctionId])
}

model Lot {
  id                         String   @id @default(uuid())
  publicId                   String?  @unique
  auctionId                  String
  slug                       String?
  number                     String?
  title                      String
  description                String?  @db.Text
  price                      Float    // Lance atual
  status                     LotStatus @default(EM_BREVE)
  bidsCount                  Int      @default(0)
  views                      Int      @default(0)
  isFeatured                 Boolean  @default(false)
  isExclusive                Boolean  @default(false)
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  inheritedMediaFromBemId    String? // ID do Bem principal para herdar mídia
  type                       String   // Categoria como texto (ex: "Imóvel")
  categoryId                 String?
  subcategoryId              String?
  auctionName                String?  // Denormalizado
  sellerName                 String?  // Denormalizado
  sellerId                   String?
  auctioneerId               String?
  cityId                     String?
  stateId                    String?
  cityName                   String?
  stateUf                    String?
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?
  endDate                    DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  dataAiHint                 String?
  winningBidTermUrl          String?
  allowInstallmentBids       Boolean?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  
  auction                    Auction     @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                   LotCategory? @relation(fields: [categoryId], references: [id])
  subcategory                Subcategory? @relation(fields: [subcategoryId], references: [id])
  seller                     Seller?     @relation(fields: [sellerId], references: [id])
  auctioneer                 Auctioneer? @relation(fields: [auctioneerId], references: [id])
  city                       City?       @relation(fields: [cityId], references: [id])
  state                      State?      @relation(fields: [stateId], references: [id])
  winner                     User?       @relation(fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId                   String?
  
  bens                       LotBens[]
  bids                       Bid[]
  userWins                   UserWin[]
  userLotMaxBids             UserLotMaxBid[]
  questions                  LotQuestion[]
  lotStageDetails            LotAuctionStageDetails[]

  @@index([auctionId])
  @@index([categoryId])
  @@index([sellerId])
  @@index([winnerId])
}


model LotBens {
  lotId String
  bemId String
  lot   Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bem   Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)

  @@id([lotId, bemId])
  @@index([lotId])
  @@index([bemId])
}


model LotAuctionStageDetails {
  lotId          String
  auctionStageId String
  initialBid     Float // Lance inicial para este lote nesta etapa
  bidIncrement   Float? // Incremento para este lote nesta etapa
  evaluationValue Float? // Valor de avaliação para este lote nesta etapa (pode ser diferente do Bem)

  lot           Lot          @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionStage  AuctionStage @relation(fields: [auctionStageId], references: [id], onDelete: Cascade)
  
  @@id([lotId, auctionStageId])
  @@index([lotId])
  @@index([auctionStageId])
}

// =================================================================
// 8. Other Supporting Models
// =================================================================

model MediaItem {
  id                 String    @id @default(uuid())
  fileName           String
  storagePath        String
  title              String?
  altText            String?
  caption            String?
  description        String?   @db.Text
  mimeType           String
  sizeBytes          Int?
  urlOriginal        String
  urlThumbnail       String?
  urlMedium          String?
  urlLarge           String?
  linkedLotIds       Json?
  dataAiHint         String?
  uploadedBy         User      @relation("UploadedBy", fields: [uploadedByUserId], references: [id])
  uploadedByUserId   String
  judicialProcessId  String?
  uploadedAt         DateTime  @default(now())
  
  @@index([uploadedByUserId])
}

model UserDocument {
  id                String             @id @default(uuid())
  userId            String
  documentTypeId    String
  status            UserDocumentStatus @default(PENDING_ANALYSIS)
  fileUrl           String
  fileName          String?
  rejectionReason   String?            @db.Text
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType      DocumentType       @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
  @@index([userId])
  @@index([documentTypeId])
}

model Bid {
  id             String   @id @default(uuid())
  lotId          String
  auctionId      String
  bidderId       String
  bidderDisplay  String?
  amount         Float
  timestamp      DateTime @default(now())
  lot            Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bidder         User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  auction        Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([bidderId])
  @@index([auctionId])
}

model UserWin {
  id               String        @id @default(uuid())
  lotId            String        @unique
  userId           String
  winningBidAmount Float
  winDate          DateTime
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?
  lot              Lot           @relation(fields: [lotId], references: [id])
  user             User          @relation(fields: [userId], references: [id])

  @@index([lotId])
  @@index([userId])
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
  @@index([userId])
  @@index([lotId])
}

model AuctionHabilitation {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  auction    Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId  String
  habilitatedAt DateTime @default(now())

  @@id([userId, auctionId])
}

model LotQuestion {
  id                      String   @id @default(uuid())
  lotId                   String
  auctionId               String
  user                    User     @relation("AskedByUser", fields: [userId], references: [id])
  userId                  String
  userDisplayName         String
  questionText            String   @db.Text
  isPublic                Boolean  @default(true)
  answerText              String?  @db.Text
  answeredAt              DateTime?
  answeredByUser          User?    @relation("AnsweredByUser", fields: [answeredByUserId], references: [id], onDelete: SetNull)
  answeredByUserId        String?
  answeredByUserDisplayName String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  lot                     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([userId])
}


model DocumentTemplate {
  id       String               @id @default(uuid())
  name     String
  type     DocumentTemplateType
  content  String?              @db.Text
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}
