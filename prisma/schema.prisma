// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. MODELS WITH NO OR FEW EXTERNAL DEPENDENCIES
// =================================================================

model PlatformSettings {
  id                                String @id @default("global")
  siteTitle                         String @default("BidExpert")
  siteTagline                       String?
  logoUrl                           String?
  faviconUrl                        String?
  galleryImageBasePath              String @default("/uploads/media/")
  storageProvider                   String @default("local") // 'local' or 'firebase'
  firebaseStorageBucket             String?
  activeThemeName                   String?
  themes                            Json   @default("[]")
  platformPublicIdMasks             Json?
  homepageSections                  Json   @default("[]")
  mentalTriggerSettings             Json?
  sectionBadgeVisibility            Json?
  mapSettings                       Json?
  searchPaginationType              String @default("loadMore") // 'loadMore' or 'numberedPages'
  searchItemsPerPage                Int    @default(12)
  searchLoadMoreCount               Int    @default(12)
  showCountdownOnLotDetail          Boolean @default(true)
  showCountdownOnCards              Boolean @default(true)
  showRelatedLotsOnLotDetail        Boolean @default(true)
  relatedLotsCount                  Int     @default(5)
  defaultUrgencyTimerHours          Int?
  variableIncrementTable            Json?
  biddingSettings                   Json?
  paymentGatewaySettings            Json?
  defaultListItemsPerPage           Int     @default(10)
  updatedAt                         DateTime @updatedAt
}

model LotCategory {
  id                   String        @id @default(uuid())
  name                 String        @unique
  slug                 String        @unique
  description          String?       @db.Text
  hasSubcategories     Boolean       @default(false)
  itemCount            Int           @default(0)
  iconName             String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintIcon       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  subcategories        Subcategory[]
  lots                 Lot[]
  bens                 Bem[]
  directSaleOffers     DirectSaleOffer[]
}

model Subcategory {
  id                 String      @id @default(uuid())
  name               String
  slug               String      @unique
  parentCategoryId   String
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  description        String?     @db.Text
  displayOrder       Int         @default(0)
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  lots               Lot[]
  bens               Bem[]
}

model State {
  id        String   @id @default(uuid())
  name      String   @unique
  uf        String   @unique
  slug      String   @unique
  cityCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cities    City[]
  auctions  Auction[]
  lots      Lot[]
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentTemplate {
  id        String   @id @default(uuid())
  name      String
  type      String // e.g., WINNING_BID_TERM, EVALUATION_REPORT
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id              String         @id @default(uuid())
  name            String         @unique
  nameNormalized  String         @unique
  description     String?
  permissions     Json?
  users           UsersOnRoles[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

// =================================================================
// 2. MODELS WITH ONE OR MORE LEVELS OF DEPENDENCY
// =================================================================

model User {
  id                    String              @id @default(uuid())
  email                 String              @unique
  password              String?
  fullName              String?
  habilitationStatus    String              @default("PENDING_DOCUMENTS")
  accountType           String              @default("PHYSICAL")
  avatarUrl             String?
  dataAiHint            String?
  cpf                   String?
  cellPhone             String?
  dateOfBirth           DateTime?
  razaoSocial           String?
  cnpj                  String?
  inscricaoEstadual     String?
  website               String?
  zipCode               String?
  street                String?
  number                String?
  complement            String?
  neighborhood          String?
  city                  String?
  state                 String?
  optInMarketing        Boolean             @default(false)
  badges                Json?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  roles                 UsersOnRoles[]
  sellerProfile         Seller?
  auctioneerProfile     Auctioneer?
  uploadedMedia         MediaItem[]         @relation("UploadedBy")
  answeredQuestions     LotQuestion[]       @relation("AnsweredBy")
  askedQuestions        LotQuestion[]       @relation("AskedBy")
  bids                  Bid[]
  wins                  UserWin[]
  maxBids               UserLotMaxBid[]
  notifications         Notification[]
  documents             UserDocument[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model City {
  id        String    @id @default(uuid())
  name      String
  slug      String    @unique
  stateId   String
  stateUf   String
  ibgeCode  String?   @unique
  lotCount  Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  state     State     @relation(fields: [stateId], references: [id], onDelete: Cascade)
  auctions  Auction[]
  lots      Lot[]
}

model Court {
  id                String             @id @default(uuid())
  name              String
  slug              String             @unique
  stateUf           String
  state             State?             @relation(fields: [stateId], references: [id], onDelete: SetNull)
  stateId           String?
  website           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  districts         JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialDistrict {
  id                String            @id @default(uuid())
  name              String
  slug              String            @unique
  courtId           String
  stateId           String
  zipCode           String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  court             Court             @relation(fields: [courtId], references: [id], onDelete: Cascade)
  state             State             @relation(fields: [stateId], references: [id], onDelete: Cascade)
  branches          JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialBranch {
  id                String            @id @default(uuid())
  name              String
  slug              String            @unique
  districtId        String
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  district          JudicialDistrict  @relation(fields: [districtId], references: [id], onDelete: Cascade)
  sellers           Seller[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model Seller {
  id                  String             @id @default(uuid())
  publicId            String             @unique @default(uuid())
  slug                String             @unique
  name                String             @unique
  contactName         String?
  email               String?
  phone               String?
  address             String?
  city                String?
  state               String?
  zipCode             String?
  website             String?
  logoUrl             String?
  logoMediaId         String?
  dataAiHintLogo      String?
  description         String?            @db.Text
  userId              String?            @unique
  user                User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  isJudicial          Boolean            @default(false)
  judicialBranchId    String?            @unique
  judicialBranch      JudicialBranch?    @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  auctions            Auction[]
  bens                Bem[]
  directSaleOffers    DirectSaleOffer[]
}

model Auctioneer {
  id                 String    @id @default(uuid())
  publicId           String    @unique @default(uuid())
  slug               String    @unique
  name               String
  registrationNumber String?
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?   @db.Text
  userId             String?   @unique
  user               User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  auctions           Auction[]
  lots               Lot[]
}

model DocumentType {
  id          String         @id @default(uuid())
  name        String
  description String?
  isRequired  Boolean        @default(true)
  appliesTo   String // e.g., 'PHYSICAL', 'LEGAL', 'ALL', 'PROCESS'
  documents   UserDocument[]
}

model UserDocument {
  id              String        @id @default(uuid())
  userId          String
  documentTypeId  String
  status          String        @default("PENDING_ANALYSIS") // PENDING_ANALYSIS, APPROVED, REJECTED
  fileUrl         String
  fileName        String?
  rejectionReason String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType  @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

// =================================================================
// 3. CORE TRANSACTIONAL MODELS
// =================================================================

model JudicialProcess {
  id                String           @id @default(uuid())
  publicId          String           @unique @default(uuid())
  processNumber     String           @unique
  isElectronic      Boolean          @default(true)
  courtId           String
  districtId        String
  branchId          String
  sellerId          String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  court             Court            @relation(fields: [courtId], references: [id])
  district          JudicialDistrict @relation(fields: [districtId], references: [id])
  branch            JudicialBranch   @relation(fields: [branchId], references: [id])
  seller            Seller?          @relation(fields: [sellerId], references: [id])
  parties           JudicialParty[]
  bens              Bem[]
  auctions          Auction[]
}

model JudicialParty {
  id             String          @id @default(uuid())
  processId      String
  name           String
  documentNumber String?
  partyType      String
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model Bem {
  id                         String   @id @default(uuid())
  publicId                   String   @unique @default(uuid())
  title                      String
  description                String?  @db.Text
  status                     String   @default("DISPONIVEL") // DISPONIVEL, LOTEADO, VENDIDO, REMOVIDO
  categoryId                 String
  category                   LotCategory @relation(fields: [categoryId], references: [id])
  subcategoryId              String?
  subcategory                Subcategory? @relation(fields: [subcategoryId], references: [id])
  judicialProcessId          String?
  judicialProcess            JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  sellerId                   String?
  seller                     Seller?  @relation(fields: [sellerId], references: [id])
  evaluationValue            Float?
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  lots                       LotBens[]

  // Vehicle specific
  plate                      String?
  make                       String?
  model                      String?
  version                    String?
  year                       Int?
  modelYear                  Int?
  mileage                    Int?
  color                      String?
  fuelType                   String?
  transmissionType           String?
  bodyType                   String?
  vin                        String?  @unique
  renavam                    String?  @unique
  enginePower                String?
  numberOfDoors              Int?
  vehicleOptions             String?  @db.Text
  detranStatus               String?
  debts                      String?  @db.Text
  runningCondition           String?
  bodyCondition              String?
  tiresCondition             String?
  hasKey                     Boolean?

  // Real Estate specific
  propertyRegistrationNumber String? @unique
  iptuNumber                 String? @unique
  isOccupied                 Boolean?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String? @db.Text
  infrastructure             String? @db.Text
  condoDetails               String? @db.Text
  improvements               String? @db.Text
  topography                 String?
  liensAndEncumbrances       String? @db.Text
  propertyDebts              String? @db.Text
  unregisteredRecords        String? @db.Text
  hasHabiteSe                Boolean?
  zoningRestrictions         String? @db.Text
  amenities                  String[] // Array de strings, convertido para JSON
}

model Auction {
  id                               String              @id @default(uuid())
  publicId                         String              @unique @default(uuid())
  slug                             String              @unique
  title                            String
  description                      String?             @db.Text
  status                           String              @default("RASCUNHO")
  auctionDate                      DateTime            @default(now())
  endDate                          DateTime?
  auctioneerId                     String
  sellerId                         String
  categoryId                       String
  auctionType                      String
  auctionMethod                    String              @default("STANDARD")
  participation                    String              @default("ONLINE")
  imageUrl                         String?
  imageMediaId                     String?
  documentsUrl                     String?
  visits                           Int                 @default(0)
  initialOffer                     Float? // Será preenchido com o menor valor inicial dos lotes.
  isFavorite                       Boolean             @default(false)
  dataAiHint                       String?
  city                             City?               @relation(fields: [cityId], references: [id], onDelete: SetNull)
  cityId                           String?
  state                            State?              @relation(fields: [stateId], references: [id], onDelete: SetNull)
  stateId                          String?
  address                          String?
  zipCode                          String?
  latitude                         Float?
  longitude                        Float?
  onlineUrl                        String?
  evaluationReportUrl              String?
  auctionCertificateUrl            String?
  sellingBranch                    String?
  automaticBiddingEnabled          Boolean             @default(false)
  silentBiddingEnabled             Boolean             @default(false)
  allowMultipleBidsPerUser         Boolean             @default(true)
  allowInstallmentBids             Boolean             @default(true)
  softCloseEnabled                 Boolean             @default(false)
  softCloseMinutes                 Int?                @default(2)
  estimatedRevenue                 Float?
  achievedRevenue                  Float?
  totalHabilitatedUsers            Int?                @default(0)
  isFeaturedOnMarketplace          Boolean             @default(false)
  marketplaceAnnouncementTitle     String?
  judicialProcessId                String?
  additionalTriggers               Json?
  decrementAmount                  Float?
  decrementIntervalSeconds         Int?
  floorPrice                       Float?
  autoRelistSettings               Json?
  createdAt                        DateTime            @default(now())
  updatedAt                        DateTime            @updatedAt
  auctioneer                       Auctioneer          @relation(fields: [auctioneerId], references: [id])
  seller                           Seller              @relation(fields: [sellerId], references: [id])
  category                         LotCategory         @relation(fields: [categoryId], references: [id])
  judicialProcess                  JudicialProcess?    @relation(fields: [judicialProcessId], references: [id])
  lots                             Lot[]
  bids                             Bid[]
  habilitatedUsers                 AuctionHabilitation[]
  court                            Court?              @relation(fields: [courtId], references: [id])
  courtId                          String?
  district                         JudicialDistrict?   @relation(fields: [districtId], references: [id])
  districtId                       String?
  branch                           JudicialBranch?     @relation(fields: [branchId], references: [id])
  branchId                         String?
  auctionStages                    AuctionStage[]
}

model AuctionStage {
  id              String    @id @default(uuid())
  auctionId       String
  name            String
  startDate       DateTime
  endDate         DateTime
  evaluationValue Float?
  initialPrice    Float?
  bidIncrement    Float?
  auction         Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  lotDetails      LotAuctionStageDetails[]
}

model AuctionHabilitation {
  userId     String
  auctionId  String
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction    Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@id([userId, auctionId])
}

model Lot {
  id                         String    @id @default(uuid())
  publicId                   String?   @unique
  auctionId                  String
  slug                       String?   @unique
  number                     String?
  title                      String
  description                String?   @db.Text
  price                      Float     @default(0)
  status                     String    @default("EM_BREVE")
  bidsCount                  Int?      @default(0)
  views                      Int?      @default(0)
  isFeatured                 Boolean?  @default(false)
  isExclusive                Boolean?  @default(false)
  discountPercentage         Int?
  additionalTriggers         Json?
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  type                       String
  categoryId                 String
  category                   LotCategory @relation(fields: [categoryId], references: [id])
  subcategoryId              String?
  subcategory                Subcategory? @relation(fields: [subcategoryId], references: [id])
  sellerId                   String?
  seller                     Seller?     @relation(fields: [sellerId], references: [id])
  auctioneerId               String?
  auctioneer                 Auctioneer? @relation(fields: [auctioneerId], references: [id])
  cityId                     String?
  city                       City?       @relation(fields: [cityId], references: [id])
  stateId                    String?
  state                      State?      @relation(fields: [stateId], references: [id])
  cityName                   String?
  stateUf                    String?
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?
  condition                  String?
  dataAiHint                 String?
  winnerId                   String?
  winner                     User?       @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  winningBidTermUrl          String?
  isRelisted                 Boolean     @default(false)
  relistCount                Int         @default(0)
  originalLotId              String?     @unique
  originalLot                Lot?        @relation("LotRelist", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot                Lot?        @relation("LotRelist")
  inheritedMediaFromBemId    String?
  createdAt                  DateTime    @default(now())
  updatedAt                  DateTime    @updatedAt
  auction                    Auction     @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bens                       LotBens[]
  bids                       Bid[]
  wins                       UserWin[]
  maxBids                    UserLotMaxBid[]
  questions                  LotQuestion[]
  reviews                    Review[]
  stageDetails               LotAuctionStageDetails[]

  @@index([auctionId])
  @@index([sellerId])
  @@index([status])
}

// Join Table for Many-to-Many between Lot and Bem
model LotBens {
  lotId   String
  bemId   String
  lot     Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bem     Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  
  @@id([lotId, bemId])
}

model LotAuctionStageDetails {
  id              String        @id @default(uuid())
  lotId           String
  stageId         String
  initialPrice    Float?
  bidIncrement    Float?
  reservePrice    Float?        // Lance de reserva específico da praça
  lot             Lot           @relation(fields: [lotId], references: [id], onDelete: Cascade)
  stage           AuctionStage  @relation(fields: [stageId], references: [id], onDelete: Cascade)

  @@unique([lotId, stageId])
}


model Bid {
  id            String   @id @default(uuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String?
  amount        Float
  timestamp     DateTime @default(now())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([bidderId])
}

model UserWin {
  id                 String             @id @default(uuid())
  lotId              String
  userId             String
  winningBidAmount   Float
  winDate            DateTime           @default(now())
  paymentStatus      String
  invoiceUrl         String?
  lot                Lot                @relation(fields: [lotId], references: [id])
  user               User               @relation(fields: [userId], references: [id])
  installments       InstallmentPayment[]
}

model InstallmentPayment {
    id                  String      @id @default(uuid())
    userWinId           String
    userWin             UserWin     @relation(fields: [userWinId], references: [id], onDelete: Cascade)
    installmentNumber   Int
    amount              Float
    dueDate             DateTime
    status              String // PENDENTE, PAGO, ATRASADO
    paymentDate         DateTime?
    paymentMethod       String?
    transactionId       String?
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model MediaItem {
  id                  String   @id @default(uuid())
  fileName            String
  storagePath         String   @unique
  title               String?
  altText             String?
  caption             String?
  description         String?  @db.Text
  mimeType            String
  sizeBytes           Int
  urlOriginal         String
  urlThumbnail        String?
  urlMedium           String?
  urlLarge            String?
  linkedLotIds        Json?
  judicialProcessId   String?  // Links to a judicial process if it's a legal doc
  dataAiHint          String?
  uploadedBy          User     @relation("UploadedBy", fields: [uploadedByUserId], references: [id])
  uploadedByUserId    String
  uploadedAt          DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
    id              String @id @default(uuid())
    lotId           String
    lot             Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
    auctionId       String
    userId          String
    userDisplayName String
    rating          Int
    comment         String @db.Text
    createdAt       DateTime @default(now())
}

model LotQuestion {
    id                        String @id @default(uuid())
    lotId                     String
    lot                       Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
    auctionId                 String
    userId                    String
    user                      User @relation("AskedBy", fields: [userId], references: [id], onDelete: Cascade)
    userDisplayName           String
    questionText              String @db.Text
    answerText                String? @db.Text
    isPublic                  Boolean @default(true)
    answeredByUserId          String?
    answeredByUser            User? @relation("AnsweredBy", fields: [answeredByUserId], references: [id], onDelete:SetNull)
    answeredByUserDisplayName String?
    createdAt                 DateTime @default(now())
    answeredAt                DateTime?
}

// Novo modelo para Venda Direta
model DirectSaleOffer {
  id                  String      @id @default(uuid())
  publicId            String      @unique @default(uuid())
  title               String
  description         String?     @db.Text
  offerType           String      // BUY_NOW, ACCEPTS_PROPOSALS
  price               Float?
  minimumOfferPrice   Float?
  status              String      // ACTIVE, PENDING_APPROVAL, SOLD, EXPIRED
  category            LotCategory @relation(fields: [categoryId], references: [id])
  categoryId          String
  seller              Seller      @relation(fields: [sellerId], references: [id])
  sellerId            String
  sellerName          String
  sellerLogoUrl       String?
  dataAiHintSellerLogo String?
  locationCity        String?
  locationState       String?
  imageUrl            String?
  imageMediaId        String?
  dataAiHint          String?
  galleryImageUrls    Json?
  mediaItemIds        Json?
  itemsIncluded       String[] // Array de strings, convertido para JSON
  views               Int         @default(0)
  expiresAt           DateTime?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}
