// prisma/schema.prisma
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                 = "zod-prisma"
  output                   = "./zod"
  modelCase                = "camelCase"
  modelSuffix              = "Schema"
  useDecimalJs             = true
  prismaJsonNullability    = true
  createInputTypes         = false
  createModelTypes         = false
  addInputTypeValidation   = false
  addIncludeType           = false
  addSelectType            = false
  validateWhereUniqueInput = false
}

// =================================================================
// ENUMS
// =================================================================
enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

// =================================================================
// MODELS
// =================================================================

model User {
  id                String        @id @default(uuid())
  email             String        @unique
  password          String?
  fullName          String?
  habilitationStatus UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType       AccountType @default(PHYSICAL)
  avatarUrl         String?
  dataAiHint        String?
  badges            Json?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  cpf               String?
  rgNumber          String?
  rgIssuer          String?
  rgIssueDate       DateTime?
  rgState           String?
  dateOfBirth       DateTime?
  cellPhone         String?
  homePhone         String?
  gender            String?
  profession        String?
  nationality       String?
  maritalStatus     String?
  propertyRegime    String?
  spouseName        String?
  spouseCpf         String?
  zipCode           String?
  street            String?
  number            String?
  complement        String?
  neighborhood      String?
  city              String?
  state             String?
  optInMarketing    Boolean?      @default(false)
  razaoSocial       String?
  cnpj              String?
  inscricaoEstadual String?
  website           String?
  responsibleName   String?
  responsibleCpf    String?

  // Relações
  roles             UsersOnRoles[]
  bids              Bid[]
  wins              UserWin[]
  lotsWon           Lot[]          @relation("LotWinner")
  documents         UserDocument[]
  mediaItems        MediaItem[]
  auctioneerProfile Auctioneer?
  sellerProfile     Seller?
  habilitations     AuctionHabilitation[]
  maxBids           UserLotMaxBid[]
}

model Role {
  id            String   @id @default(uuid())
  name          String   @unique
  nameNormalized String   @unique
  description   String?
  permissions   String[] @default([])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  users         UsersOnRoles[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model State {
  id         String   @id @default(uuid())
  name       String
  uf         String   @unique
  slug       String   @unique
  cityCount  Int?     @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  cities     City[]
  auctions   Auction[]
  lots       Lot[]
  districts  JudicialDistrict[]
}

model City {
  id        String   @id @default(uuid())
  name      String
  slug      String?
  stateId   String
  stateUf   String?
  ibgeCode  String?  @unique
  lotCount  Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state     State    @relation(fields: [stateId], references: [id], onDelete: Cascade)
  auctions  Auction[]
  lots      Lot[]
}

model LotCategory {
  id                   String            @id @default(uuid())
  name                 String            @unique
  slug                 String            @unique
  description          String?
  hasSubcategories     Boolean?          @default(false)
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  lots                 Lot[]
  bens                 Bem[]
  auctions             Auction[]
  directSaleOffers     DirectSaleOffer[]
  subcategories        Subcategory[]
}

model Subcategory {
  id                String       @id @default(uuid())
  name              String
  slug              String?
  parentCategoryId  String
  parentCategory    LotCategory  @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  description       String?
  displayOrder      Int          @default(0)
  iconUrl           String?
  iconMediaId       String?
  dataAiHintIcon    String?
  lots              Lot[]
  bens              Bem[]
}

model Court {
  id                String             @id @default(uuid())
  name              String             @unique
  slug              String?
  stateUf           String?
  website           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialDistrict {
  id                String             @id @default(uuid())
  name              String
  slug              String             @unique
  courtId           String?
  court             Court?             @relation(fields: [courtId], references: [id])
  stateId           String
  state             State              @relation(fields: [stateId], references: [id])
  zipCode           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
}

model JudicialBranch {
  id                String             @id @default(uuid())
  name              String
  slug              String             @unique
  districtId        String?
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
}

model Seller {
  id                String          @id @default(uuid())
  publicId          String          @unique
  slug              String          @unique
  name              String          @unique
  contactName       String?
  email             String?
  phone             String?
  address           String?
  city              String?
  state             String?
  zipCode           String?
  website           String?
  logoUrl           String?
  logoMediaId       String?
  dataAiHintLogo    String?
  description       String?
  userId            String?         @unique
  user              User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  isJudicial        Boolean         @default(false)
  judicialBranchId  String?         @unique
  judicialBranch    JudicialBranch? @relation(fields: [judicialBranchId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  auctions          Auction[]
  lots              Lot[]
  bens              Bem[]
  directSaleOffers  DirectSaleOffer[]
}

model Auctioneer {
  id                 String    @id @default(uuid())
  publicId           String    @unique
  slug               String    @unique
  name               String
  registrationNumber String?
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?
  userId             String?   @unique
  user               User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  auctions           Auction[]
  lots               Lot[]
}

model JudicialProcess {
  id            String          @id @default(uuid())
  publicId      String          @unique
  processNumber String
  isElectronic  Boolean         @default(true)
  courtId       String?
  court         Court?          @relation(fields: [courtId], references: [id])
  districtId    String?
  district      JudicialDistrict? @relation(fields: [districtId], references: [id])
  branchId      String?
  branch        JudicialBranch? @relation(fields: [branchId], references: [id])
  sellerId      String?
  seller        Seller?         @relation(fields: [sellerId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  parties       JudicialParty[]
  bens          Bem[]
  auctions      Auction[]
}

model JudicialParty {
  id             String          @id @default(uuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model Auction {
  id                             String                @id @default(uuid())
  publicId                       String                @unique
  slug                           String                @unique
  title                          String
  description                    String?
  status                         AuctionStatus         @default(RASCUNHO)
  auctionDate                    DateTime
  endDate                        DateTime?
  totalLots                      Int?                  @default(0)
  auctioneerId                   String
  sellerId                       String
  categoryId                     String
  auctionType                    AuctionType?
  participation                  AuctionParticipation?
  auctionMethod                  AuctionMethod?
  onlineUrl                      String?
  address                        String?
  cityId                         String?
  stateId                        String?
  zipCode                        String?
  latitude                       Float?
  longitude                      Float?
  imageUrl                       String?
  imageMediaId                   String?
  dataAiHint                     String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  automaticBiddingEnabled        Boolean               @default(false)
  silentBiddingEnabled           Boolean               @default(false)
  allowMultipleBidsPerUser       Boolean               @default(true)
  allowInstallmentBids           Boolean               @default(true)
  softCloseEnabled               Boolean               @default(false)
  softCloseMinutes               Int                   @default(2)
  estimatedRevenue               Float?
  achievedRevenue                Float?
  totalHabilitatedUsers          Int?
  isFeaturedOnMarketplace        Boolean               @default(false)
  marketplaceAnnouncementTitle   String?
  judicialProcessId              String?
  decrementAmount                Float?
  decrementIntervalSeconds       Int?
  floorPrice                     Float?
  autoRelistSettings             Json?
  createdAt                      DateTime              @default(now())
  updatedAt                      DateTime              @updatedAt
  // Relações
  auctioneer                     Auctioneer            @relation(fields: [auctioneerId], references: [id])
  seller                         Seller                @relation(fields: [sellerId], references: [id])
  category                       LotCategory           @relation(fields: [categoryId], references: [id])
  city                           City?                 @relation(fields: [cityId], references: [id])
  state                          State?                @relation(fields: [stateId], references: [id])
  judicialProcess                JudicialProcess?      @relation(fields: [judicialProcessId], references: [id])
  lots                           Lot[]
  auctionStages                  AuctionStage[]
  habilitations                  AuctionHabilitation[]
  bids                           Bid[]
  court                          Court?                @relation(fields: [courtId], references: [id])
  courtId                        String?
}

model AuctionHabilitation {
  userId    String
  auctionId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, auctionId])
}

model AuctionStage {
  id              String    @id @default(uuid())
  auctionId       String
  auction         Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  name            String
  startDate       DateTime
  endDate         DateTime
  evaluationValue Float?
  lots            LotAuctionStageDetails[]
}

model LotAuctionStageDetails {
  id             String       @id @default(uuid())
  lotId          String
  stageId        String
  lot            Lot          @relation(fields: [lotId], references: [id], onDelete: Cascade)
  stage          AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)
  initialBid     Float?
  bidIncrement   Float?
  reservePrice   Float?
  winningBid     Bid?

  @@unique([lotId, stageId])
}

model Lot {
  id                           String                   @id @default(uuid())
  publicId                     String                   @unique
  auctionId                    String
  number                       String?
  title                        String
  description                  String?
  price                        Float
  initialPrice                 Float?
  secondInitialPrice           Float?
  bidIncrementStep             Float?
  status                       LotStatus                @default(EM_BREVE)
  bidsCount                    Int?                     @default(0)
  views                        Int?                     @default(0)
  isFeatured                   Boolean?                 @default(false)
  isExclusive                  Boolean?                 @default(false)
  isRelisted                   Boolean                  @default(false)
  relistCount                  Int                      @default(0)
  originalLotId                String?                  @unique
  discountPercentage           Int?
  additionalTriggers           Json?
  imageUrl                     String?
  imageMediaId                 String?
  galleryImageUrls             Json?
  mediaItemIds                 Json?
  inheritedMediaFromBemId      String?
  type                         String
  categoryId                   String?
  subcategoryId                String?
  sellerId                     String?
  auctioneerId                 String?
  cityId                       String?
  stateId                      String?
  cityName                     String?
  stateUf                      String?
  latitude                     Float?
  longitude                    Float?
  mapAddress                   String?
  mapEmbedUrl                  String?
  mapStaticImageUrl            String?
  endDate                      DateTime?
  auctionDate                  DateTime?
  lotSpecificAuctionDate       DateTime?
  secondAuctionDate            DateTime?
  condition                    String?
  dataAiHint                   String?
  winnerId                     String?
  winningBidTermUrl            String?
  allowInstallmentBids         Boolean?                 @default(false)
  evaluationValue              Float?
  createdAt                    DateTime                 @default(now())
  updatedAt                    DateTime                 @updatedAt
  // Relações
  auction                      Auction                  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                     LotCategory?             @relation(fields: [categoryId], references: [id])
  subcategory                  Subcategory?             @relation(fields: [subcategoryId], references: [id])
  seller                       Seller?                  @relation(fields: [sellerId], references: [id])
  auctioneer                   Auctioneer?              @relation(fields: [auctioneerId], references: [id])
  city                         City?                    @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state                        State?                   @relation(fields: [stateId], references: [id], onDelete: SetNull)
  originalLot                  Lot?                     @relation("RelistedLot", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot                  Lot?                     @relation("RelistedLot")
  winner                       User?                    @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  bids                         Bid[]
  wins                         UserWin[]
  reviews                      Review[]
  questions                    LotQuestion[]
  bens                         LotBens[]
  stageDetails                 LotAuctionStageDetails[]
  maxBids                      UserLotMaxBid[]
}

model LotBens {
  id        String   @id @default(uuid())
  lotId     String
  bemId     String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bem       Bem      @relation(fields: [bemId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([lotId, bemId])
}

model Bid {
  id             String   @id @default(uuid())
  lotId          String
  auctionId      String
  bidderId       String
  bidderDisplay  String?
  amount         Float
  timestamp      DateTime @default(now())
  lot            Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction        Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder         User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  winningBidForStage LotAuctionStageDetails? @relation(fields: [lotAuctionStageDetailsId], references: [id])
  lotAuctionStageDetailsId String? @unique
}

model UserWin {
  id                 String        @id @default(uuid())
  lotId              String        @unique
  lot                Lot           @relation(fields: [lotId], references: [id])
  userId             String
  user               User          @relation(fields: [userId], references: [id])
  winningBidAmount   Float
  winDate            DateTime      @default(now())
  paymentStatus      PaymentStatus @default(PENDENTE)
  invoiceUrl         String?
  installments       InstallmentPayment[]
}

model InstallmentPayment {
  id                  String      @id @default(uuid())
  userWinId           String
  userWin             UserWin     @relation(fields: [userWinId], references: [id])
  installmentNumber   Int
  amount              Float
  dueDate             DateTime
  status              PaymentStatus @default(PENDENTE)
  paymentDate         DateTime?
  paymentMethod       String?
  transactionId       String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model Review {
  id              String   @id @default(uuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String?
  rating          Int
  comment         String?
  createdAt       DateTime @default(now())
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                      String    @id @default(uuid())
  lotId                   String
  auctionId               String
  userId                  String
  userDisplayName         String?
  questionText            String
  answerText              String?
  answeredByUserId        String?
  answeredByUserDisplayName String?
  answeredAt              DateTime?
  isPublic                Boolean   @default(true)
  createdAt               DateTime  @default(now())
  lot                     Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model DirectSaleOffer {
  id                   String            @id @default(uuid())
  publicId             String            @unique
  title                String
  description          String?
  offerType            DirectSaleOfferType
  price                Float?
  minimumOfferPrice    Float?
  status               DirectSaleOfferStatus @default(ACTIVE)
  categoryId           String
  sellerId             String
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int?              @default(0)
  expiresAt            DateTime?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  // Relações
  category             LotCategory @relation(fields: [categoryId], references: [id])
  seller               Seller   @relation(fields: [sellerId], references: [id])
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model MediaItem {
  id                String   @id @default(uuid())
  fileName          String
  storagePath       String   @unique
  title             String?
  altText           String?
  caption           String?
  description       String?
  mimeType          String
  sizeBytes         Int
  urlOriginal       String
  urlThumbnail      String?
  urlMedium         String?
  urlLarge          String?
  linkedLotIds      Json?
  judicialProcessId String?
  dataAiHint        String?
  uploadedByUserId  String
  uploadedBy        User     @relation(fields: [uploadedByUserId], references: [id], onDelete: Cascade)
  uploadedAt        DateTime @default(now())
}

model DocumentType {
    id          String @id @default(uuid())
    name        String @unique
    description String?
    isRequired  Boolean @default(true)
    appliesTo   String? // e.g., "PHYSICAL,LEGAL"
    userDocuments UserDocument[]
}

model UserDocument {
    id              String @id @default(uuid())
    userId          String
    user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    documentTypeId  String
    documentType    DocumentType @relation(fields: [documentTypeId], references: [id])
    status          UserDocumentStatus @default(PENDING_ANALYSIS)
    fileUrl         String
    fileName        String?
    rejectionReason String?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    
    @@unique([userId, documentTypeId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model ContactMessage {
  id       String   @id @default(uuid())
  name     String
  email    String
  subject  String?
  message  String
  isRead   Boolean  @default(false)
  createdAt DateTime @default(now())
}

model VehicleMake {
  id String @id @default(uuid())
  name String @unique
  slug String @unique
  models VehicleModel[]
}

model VehicleModel {
  id String @id @default(uuid())
  name String
  slug String
  makeId String
  make VehicleMake @relation(fields: [makeId], references: [id])
  
  @@unique([makeId, name])
}

model PlatformSettings {
  id                              String   @id @default("global")
  siteTitle                       String   @default("BidExpert")
  siteTagline                     String?
  logoUrl                         String?
  faviconUrl                      String?
  galleryImageBasePath            String   @default("/uploads/media/")
  storageProvider                 String   @default("local") // 'local' | 'firebase'
  firebaseStorageBucket           String?
  activeThemeName                 String?
  themes                          Json?
  platformPublicIdMasks           Json?
  homepageSections                Json?
  mentalTriggerSettings           Json?
  sectionBadgeVisibility          Json?
  mapSettings                     Json?
  searchPaginationType            String   @default("loadMore")
  searchItemsPerPage              Int      @default(12)
  searchLoadMoreCount             Int      @default(12)
  showCountdownOnLotDetail        Boolean  @default(true)
  showCountdownOnCards            Boolean  @default(true)
  showRelatedLotsOnLotDetail      Boolean  @default(true)
  relatedLotsCount                Int      @default(5)
  defaultUrgencyTimerHours        Int?
  variableIncrementTable          Json?
  biddingSettings                 Json?
  paymentGatewaySettings          Json?
  defaultListItemsPerPage         Int?     @default(10)
  createdAt                       DateTime @default(now())
  updatedAt                       DateTime @updatedAt
}

model DocumentTemplate {
  id       String @id @default(uuid())
  name     String
  type     DocumentTemplateType
  content  String? @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

