// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. Enums
// =================================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

// =================================================================
// 2. Models
// =================================================================

model User {
  id                  String                 @id @default(uuid())
  email               String                 @unique
  password            String?
  fullName            String?
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType            @default(PHYSICAL)
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  maxBids             UserLotMaxBid[]
  uploadedMedia       MediaItem[]            @relation("UploadedBy")
  answeredQuestions   LotQuestion[]          @relation("AnsweredByUser")
  questions           LotQuestion[]
  notifications       Notification[]
  roles               UsersOnRoles[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  habilitations       AuctionHabilitation[]

  // PF Details
  cpf          String?
  rgNumber     String?
  rgIssuer     String?
  rgIssueDate  DateTime?
  rgState      String?
  dateOfBirth  DateTime?
  homePhone    String?
  cellPhone    String?
  gender       String?
  profession   String?
  nationality  String? @default("Brasileiro(a)")
  maritalStatus String?
  propertyRegime String?
  spouseName   String?
  spouseCpf    String?

  // PJ Details
  razaoSocial       String?
  cnpj              String?
  inscricaoEstadual String?
  website           String?
  responsibleName   String?
  responsibleCpf    String?

  // Address
  zipCode      String?
  street       String?
  number       String?
  complement   String?
  neighborhood String?
  city         String?
  state        String?

  optInMarketing Boolean? @default(false)
}

model Role {
  id             String         @id @default(uuid())
  name           String         @unique
  nameNormalized String         @unique
  description    String?        @db.Text
  permissions    Json
  users          UsersOnRoles[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model State {
  id              String             @id @default(uuid())
  name            String
  uf              String             @unique
  slug            String             @unique
  cities          City[]
  cityCount       Int?               @default(0)
  courts          Court[]
  judicialDistricts JudicialDistrict[]
  auctions        Auction[]
  lots            Lot[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model City {
  id        String    @id @default(uuid())
  name      String
  slug      String?
  state     State     @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId   String
  stateUf   String?
  ibgeCode  String?   @unique
  lotCount  Int?      @default(0)
  auctions  Auction[]
  lots      Lot[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Court {
  id                String             @id @default(uuid())
  name              String             @unique
  slug              String?            @unique
  stateId           String?
  state             State?             @relation(fields: [stateId], references: [id])
  stateUf           String?
  website           String?
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model JudicialDistrict {
  id                String             @id @default(uuid())
  name              String
  slug              String             @unique
  court             Court?             @relation(fields: [courtId], references: [id])
  courtId           String?
  stateId           String?
  zipCode           String?
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model JudicialBranch {
  id                String             @id @default(uuid())
  name              String
  slug              String             @unique
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  sellers           Seller[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model LotCategory {
  id                   String            @id @default(uuid())
  name                 String            @unique
  slug                 String            @unique
  description          String?           @db.Text
  hasSubcategories     Boolean
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  iconName             String?
  lots                 Lot[]
  bens                 Bem[]
  auctions             Auction[]
  directSaleOffers     DirectSaleOffer[]
  subcategories      Subcategory[]
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
}

model Subcategory {
  id               String      @id @default(uuid())
  name             String
  slug             String?     @unique
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  parentCategoryId String
  description      String?     @db.Text
  displayOrder     Int         @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  lots             Lot[]
  bens             Bem[]
}

model VehicleMake {
  id      String         @id @default(uuid())
  name    String         @unique
  slug    String         @unique
  models  VehicleModel[]
}

model VehicleModel {
  id     String      @id @default(uuid())
  name   String
  slug   String
  make   VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)
  makeId String

  @@unique([name, makeId])
}

model Seller {
  id                 String             @id @default(uuid())
  publicId           String             @unique
  slug               String             @unique
  name               String             @unique
  contactName        String?
  email              String?            @unique
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?            @db.Text
  user               User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId             String?            @unique
  isJudicial         Boolean            @default(false)
  judicialBranch     JudicialBranch?    @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  judicialBranchId   String?            @unique
  auctions           Auction[]
  lots               Lot[]
  bens               Bem[]
  judicialProcesses  JudicialProcess[]
  directSaleOffers   DirectSaleOffer[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model Auctioneer {
  id                 String    @id @default(uuid())
  publicId           String    @unique
  slug               String    @unique
  name               String
  registrationNumber String?
  contactName        String?
  email              String?   @unique
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?   @db.Text
  user               User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId             String?   @unique
  auctions           Auction[]
  lots               Lot[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model JudicialProcess {
  id                String             @id @default(uuid())
  publicId          String             @unique
  processNumber     String
  isElectronic      Boolean            @default(true)
  court             Court?             @relation(fields: [courtId], references: [id], onDelete: SetNull)
  courtId           String?
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id], onDelete: SetNull)
  districtId        String?
  branch            JudicialBranch?    @relation(fields: [branchId], references: [id], onDelete: SetNull)
  branchId          String?
  seller            Seller?            @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId          String?
  bens              Bem[]
  auctions          Auction[]
  parties           JudicialParty[]
  mediaItems        MediaItem[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model JudicialParty {
  id             String          @id @default(uuid())
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId      String
  name           String
  documentNumber String?
  partyType      String
}

model Bem {
  id                String          @id @default(uuid())
  publicId          String          @unique
  title             String
  description       String?         @db.Text
  status            BemStatus       @default(DISPONIVEL)
  category          LotCategory?    @relation(fields: [categoryId], references: [id])
  categoryId        String?
  subcategory       Subcategory?    @relation(fields: [subcategoryId], references: [id])
  subcategoryId     String?
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  judicialProcessId String?
  seller            Seller?         @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId          String?
  evaluationValue   Decimal?        @db.Decimal(15, 2)
  imageUrl          String?
  imageMediaId      String?
  galleryImageUrls  Json?
  mediaItemIds      Json?
  dataAiHint        String?
  locationCity      String?
  locationState     String?
  address           String?
  latitude          Decimal?        @db.Decimal(10, 8)
  longitude         Decimal?        @db.Decimal(11, 8)
  lots              LotBens[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Veículos
  plate             String?
  make              String?
  model             String?
  version           String?
  year              Int?
  modelYear         Int?
  mileage           Int?
  color             String?
  fuelType          String?
  transmissionType  String?
  bodyType          String?
  vin               String?
  renavam           String?
  enginePower       String?
  numberOfDoors     Int?
  vehicleOptions    String?         @db.Text
  detranStatus      String?
  debts             String?         @db.Text
  runningCondition  String?
  bodyCondition     String?
  tiresCondition    String?
  hasKey            Boolean?

  // Imóveis
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Decimal?        @db.Decimal(15, 2)
  builtArea                  Decimal?        @db.Decimal(15, 2)
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?         @db.Text
  infrastructure             String?         @db.Text
  condoDetails               String?         @db.Text
  improvements               String?         @db.Text
  topography                 String?
  liensAndEncumbrances       String?         @db.Text
  propertyDebts              String?         @db.Text
  unregisteredRecords        String?         @db.Text
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  amenities                  Json?

  // Eletrônicos
  brand               String?
  serialNumber        String?
  itemCondition       String?
  specifications      String? @db.Text
  includedAccessories String? @db.Text
  batteryCondition    String?
  hasInvoice          Boolean?
  hasWarranty         Boolean?
  repairHistory       String? @db.Text

  // Eletrodomésticos
  applianceCapacity   String?
  voltage             String?
  applianceType       String?
  additionalFunctions String? @db.Text

  // Máquinas e Equipamentos
  hoursUsed           Int?
  engineType          String?
  capacityOrPower     String?
  maintenanceHistory  String? @db.Text
  installationLocation String?
  compliesWithNR      String?
  operatingLicenses   String?

  // Semoventes (Livestock)
  breed                 String?
  age                   String?
  sex                   String?
  weight                String?
  individualId          String?
  purpose               String?
  sanitaryCondition     String? @db.Text
  vaccinationStatus     String? @db.Text
  lineage               String? @db.Text
  isPregnant            Boolean?
  specialSkills         String? @db.Text
  gtaDocument           String?
  breedRegistryDocument String?

  // Móveis
  furnitureType String?
  material      String?
  style         String?
  dimensions    String?
  pieceCount    Int?

  // Joias
  jewelryType           String?
  metal                 String?
  gemstones             String? @db.Text
  totalWeight           String?
  jewelrySize           String?
  authenticityCertificate String?

  // Obras de Arte e Antiguidades
  workType   String?
  artist     String?
  period     String?
  technique  String?
  provenance String? @db.Text

  // Embarcações
  boatType         String?
  boatLength       String?
  hullMaterial     String?
  onboardEquipment String? @db.Text

  // Alimentos
  productName       String?
  quantity          String?
  packagingType     String?
  expirationDate    DateTime?
  storageConditions String?

  // Metais Preciosos e Pedras
  preciousMetalType String?
  purity            String?

  // Bens Florestais
  forestGoodsType  String?
  volumeOrQuantity String?
  species          String?
  dofNumber        String?
}

model LotBens {
  id      String   @id @default(uuid())
  lot     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId   String
  bem     Bem      @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId   String
  addedAt DateTime @default(now())

  @@unique([lotId, bemId])
}

model AuctionStage {
  id              String   @id @default(uuid())
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId       String
  name            String
  startDate       DateTime
  endDate         DateTime
  initialPrice    Decimal? @db.Decimal(15, 2)
  bidIncrement    Decimal? @db.Decimal(10, 2)
  /// Valor de avaliação específico para esta praça
  evaluationValue Decimal? @db.Decimal(15, 2)

  @@index([auctionId])
}


model Auction {
  id                             String               @id @default(uuid())
  publicId                       String               @unique
  slug                           String               @unique
  title                          String
  description                    String?              @db.Text
  status                         AuctionStatus        @default(RASCUNHO)
  auctionDate                    DateTime
  endDate                        DateTime?
  totalLots                      Int?                 @default(0)
  categoryId                     String?
  category                       LotCategory?         @relation(fields: [categoryId], references: [id])
  auctioneerId                   String?
  auctioneer                     Auctioneer?          @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  sellerId                       String?
  seller                         Seller?              @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  imageUrl                       String?
  imageMediaId                   String?
  documentsUrl                   String?
  visits                         Int?                 @default(0)
  judicialProcessId              String?
  judicialProcess                JudicialProcess?     @relation(fields: [judicialProcessId], references: [id])
  courtId                        String?
  court                          Court?               @relation(fields: [courtId], references: [id])
  districtId                     String?
  district                       JudicialDistrict?    @relation(fields: [districtId], references: [id])
  branchId                       String?
  branch                         JudicialBranch?      @relation(fields: [branchId], references: [id])
  cityId                         String?
  city                           City?                @relation(fields: [cityId], references: [id])
  stateId                        String?
  state                          State?               @relation(fields: [stateId], references: [id])
  isFavorite                     Boolean              @default(false)
  dataAiHint                     String?
  lots                           Lot[]
  auctionStages                  AuctionStage[]
  bids                           Bid[]
  habilitations                  AuctionHabilitation[]
  questions                      LotQuestion[]
  createdAt                      DateTime             @default(now())
  updatedAt                      DateTime             @updatedAt

  // Settings
  auctionType                    AuctionType?
  auctionMethod                  AuctionMethod?       @default(STANDARD)
  participation                  AuctionParticipation? @default(ONLINE)

  // Location fields for presencial/hibrido
  address                   String?
  zipCode                   String?
  onlineUrl                 String?

  // Financial
  initialOffer      Decimal? @db.Decimal(15, 2)
  estimatedRevenue  Decimal? @db.Decimal(15, 2)
  achievedRevenue   Decimal? @db.Decimal(15, 2)

  // Features
  automaticBiddingEnabled    Boolean @default(false)
  silentBiddingEnabled       Boolean @default(false)
  allowMultipleBidsPerUser   Boolean @default(true)
  allowInstallmentBids       Boolean @default(true)
  softCloseEnabled           Boolean @default(false)
  softCloseMinutes           Int?    @default(2)
  isFeaturedOnMarketplace    Boolean @default(false)
  marketplaceAnnouncementTitle String?

  // Analytics
  totalHabilitatedUsers Int? @default(0)
  
  // Advanced Features
  additionalTriggers         Json?
  decrementAmount            Decimal? @db.Decimal(15, 2)
  decrementIntervalSeconds   Int?
  floorPrice                 Decimal? @db.Decimal(15, 2)
  autoRelistSettings         Json?
}

model Lot {
  id                         String        @id @default(uuid())
  publicId                   String        @unique
  auction                    Auction       @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                  String
  number                     String?
  title                      String
  description                String?       @db.Text
  price                      Decimal       @db.Decimal(15, 2)
  initialPrice               Decimal?      @db.Decimal(15, 2)
  secondInitialPrice         Decimal?      @db.Decimal(15, 2)
  bidIncrementStep           Decimal?      @db.Decimal(10, 2)
  status                     LotStatus     @default(EM_BREVE)
  bidsCount                  Int?          @default(0)
  views                      Int?          @default(0)
  isFeatured                 Boolean       @default(false)
  isExclusive                Boolean       @default(false)
  discountPercentage         Int?
  additionalTriggers         Json?
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  /// ID do Bem de onde as mídias são herdadas
  inheritedMediaFromBemId    String?
  bens                       LotBens[]
  type                       String
  category                   LotCategory?  @relation(fields: [categoryId], references: [id])
  categoryId                 String?
  subcategory                Subcategory?  @relation(fields: [subcategoryId], references: [id])
  subcategoryId              String?
  auctionName                String?
  seller                     Seller?       @relation(fields: [sellerId], references: [id])
  sellerId                   String?
  sellerName                 String?
  auctioneer                 Auctioneer?   @relation(fields: [auctioneerId], references: [id])
  auctioneerId               String?
  city                       City?         @relation(fields: [cityId], references: [id])
  cityId                     String?
  state                      State?        @relation(fields: [stateId], references: [id])
  stateId                    String?
  cityName                   String?
  stateUf                    String?
  latitude                   Decimal?      @db.Decimal(10, 8)
  longitude                  Decimal?      @db.Decimal(11, 8)
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?
  endDate                    DateTime?
  auctionDate                DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  dataAiHint                 String?
  winner                     User?         @relation(fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId                   String?
  winningBidTermUrl          String?
  allowInstallmentBids       Boolean?      @default(false)
  bids                       Bid[]
  questions                  LotQuestion[]
  reviews                    Review[]
  userMaxBids                UserLotMaxBid[]
  win                        UserWin?
  createdAt                  DateTime      @default(now())
  updatedAt                  DateTime      @updatedAt

  @@index([auctionId, number])
}

model Bid {
  id            String   @id @default(uuid())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId      String
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())

  @@index([lotId])
}

model UserWin {
  id               String        @id @default(uuid())
  lot              Lot           @relation(fields: [lotId], references: [id])
  lotId            String        @unique
  user             User          @relation(fields: [userId], references: [id])
  userId           String
  winningBidAmount Decimal       @db.Decimal(15, 2)
  winDate          DateTime      @default(now())
  paymentStatus    PaymentStatus
  invoiceUrl       String?

  @@index([userId])
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model LotQuestion {
  id                          String   @id @default(uuid())
  lot                         Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId                       String
  auction                     Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                   String
  user                        User     @relation(fields: [userId], references: [id])
  userId                      String
  userDisplayName             String
  questionText                String   @db.Text
  answerText                  String?  @db.Text
  isPublic                    Boolean  @default(true)
  answeredBy                  User?    @relation("AnsweredByUser", fields: [answeredByUserId], references: [id], onDelete: SetNull)
  answeredByUserId            String?
  answeredByUserDisplayName   String?
  createdAt                   DateTime @default(now())
  answeredAt                  DateTime?

  @@index([lotId])
}

model Review {
  id              String   @id @default(uuid())
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId           String
  auctionId       String
  userDisplayName String
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())

  @@index([lotId])
}


model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

model DocumentType {
  id          String         @id @default(uuid())
  name        String         @unique
  description String?        @db.Text
  isRequired  Boolean        @default(true)
  /// Comma-separated: PHYSICAL,LEGAL,ALL,PROCESS
  appliesTo   String?        
  documents   UserDocument[]
}

model UserDocument {
  id              String           @id @default(uuid())
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  documentType    DocumentType     @relation(fields: [documentTypeId], references: [id])
  documentTypeId  String
  status          UserDocumentStatus @default(SUBMITTED)
  fileUrl         String
  fileName        String?
  rejectionReason String?          @db.Text
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([userId, documentTypeId])
}

model AuctionHabilitation {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId String
  status    String   @default("HABILITADO") // Could be extended later
  createdAt DateTime @default(now())

  @@unique([userId, auctionId])
}

model MediaItem {
  id                String          @id @default(uuid())
  fileName          String
  storagePath       String          @unique
  title             String?
  altText           String?
  caption           String?
  description       String?         @db.Text
  mimeType          String
  sizeBytes         Int?
  urlOriginal       String
  urlThumbnail      String?
  urlMedium         String?
  urlLarge          String?
  linkedLotIds      Json?
  dataAiHint        String?
  uploadedBy        User            @relation("UploadedBy", fields: [uploadedByUserId], references: [id])
  uploadedByUserId  String
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId String?
  uploadedAt        DateTime        @default(now())
}

model PlatformSettings {
  id                String   @id @default("global")
  siteTitle         String?
  siteTagline       String?
  logoUrl           String?
  faviconUrl        String?
  galleryImageBasePath String?
  storageProvider   String?
  firebaseStorageBucket String?
  activeThemeName   String?
  themes            Json?
  platformPublicIdMasks Json?
  homepageSections Json?
  mentalTriggerSettings Json?
  sectionBadgeVisibility Json?
  mapSettings       Json?
  searchPaginationType String?
  searchItemsPerPage Int?
  searchLoadMoreCount Int?
  showCountdownOnLotDetail Boolean?
  showCountdownOnCards Boolean?
  showRelatedLotsOnLotDetail Boolean?
  relatedLotsCount Int?
  defaultUrgencyTimerHours Int?
  variableIncrementTable Json?
  biddingSettings   Json?
  paymentGatewaySettings Json?
  defaultListItemsPerPage Int?
  updatedAt         DateTime? @updatedAt
}

model ContactMessage {
  id      String   @id @default(uuid())
  name    String
  email   String
  subject String
  message String   @db.Text
  isRead  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentTemplate {
    id        String   @id @default(uuid())
    name      String   @unique
    type      String
    content   String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model DirectSaleOffer {
  id                  String                @id @default(uuid())
  publicId            String                @unique
  title               String
  description         String?               @db.Text
  offerType           String
  price               Decimal?              @db.Decimal(15, 2)
  minimumOfferPrice   Decimal?              @db.Decimal(15, 2)
  status              DirectSaleOfferStatus @default(ACTIVE)
  category            LotCategory           @relation(fields: [categoryId], references: [id])
  categoryId          String
  seller              Seller                @relation(fields: [sellerId], references: [id])
  sellerId            String
  sellerName          String?
  sellerLogoUrl       String?
  dataAiHintSellerLogo String?
  locationCity        String?
  locationState       String?
  imageUrl            String?
  imageMediaId        String?
  dataAiHint          String?
  galleryImageUrls    Json?
  mediaItemIds        Json?
  itemsIncluded       Json?
  views               Int?                  @default(0)
  expiresAt           DateTime?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}
