// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// ENUMS
// =================================================================

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

// =================================================================
// 1. BASE TABLES (No dependencies on other models)
// =================================================================

model Role {
  id              String   @id @default(uuid())
  name            String
  nameNormalized  String   @unique
  description     String?
  permissions     Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  users           UsersOnRoles[]
}

model State {
  id        String   @id @default(uuid())
  name      String
  uf        String   @unique
  slug      String?  @unique
  cityCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cities    City[]
  districts JudicialDistrict[]
  auctions  Auction[]
  lots      Lot[]
}

model LotCategory {
  id                   String            @id @default(uuid())
  name                 String            @unique
  slug                 String?           @unique
  description          String?           @db.Text
  hasSubcategories     Boolean           @default(false)
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  subcategories        Subcategory[]
  auctions             Auction[]
  lots                 Lot[]
  bens                 Bem[]
  directSaleOffers     DirectSaleOffer[]
}

model DocumentType {
  id          String         @id @default(uuid())
  name        String
  description String?
  isRequired  Boolean        @default(true)
  appliesTo   String?
  userDocs    UserDocument[]
}

model DocumentTemplate {
  id        String               @id @default(uuid())
  name      String
  type      DocumentTemplateType
  content   String?              @db.Text
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model VehicleMake {
  id     String         @id @default(uuid())
  name   String         @unique
  slug   String         @unique
  models VehicleModel[]
}

model Court {
  id                 String             @id @default(uuid())
  name               String
  slug               String?
  stateUf            String?
  website            String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  judicialDistricts  JudicialDistrict[]
  judicialProcesses  JudicialProcess[]
  auctions           Auction[]
}

// =================================================================
// 2. TABLES WITH ONE LEVEL OF DEPENDENCY
// =================================================================

model City {
  id        String   @id @default(uuid())
  name      String
  slug      String?
  stateId   String
  stateUf   String?
  ibgeCode  String?  @unique
  lotCount  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state     State    @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots      Lot[]
  auctions  Auction[]
}

model Subcategory {
  id                 String      @id @default(uuid())
  name               String
  slug               String?
  parentCategoryId   String
  description        String?     @db.Text
  displayOrder       Int         @default(0)
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  lots               Lot[]
  bens               Bem[]
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
}

model User {
  id                  String                 @id @default(uuid())
  email               String                 @unique
  password            String?
  fullName            String?
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType            @default(PHYSICAL)
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  sellerId            String?                @unique
  seller              Seller?
  roles               UsersOnRoles[]
  bids                Bid[]
  wins                UserWin[]
  documents           UserDocument[]
  maxBids             UserLotMaxBid[]
  habilitations       AuctionHabilitation[]
  auctioneer          Auctioneer?
}

model VehicleModel {
  id     String      @id @default(uuid())
  name   String
  slug   String
  makeId String
  make   VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)

  @@unique([name, makeId])
}

model JudicialDistrict {
  id                String           @id @default(uuid())
  name              String
  slug              String?          @unique
  courtId           String?
  stateId           String?
  zipCode           String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  court             Court?           @relation(fields: [courtId], references: [id], onDelete: SetNull)
  state             State?           @relation(fields: [stateId], references: [id], onDelete: SetNull)
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

// =================================================================
// 3. TABLES WITH TWO OR MORE LEVELS OF DEPENDENCY
// =================================================================

model JudicialBranch {
  id                String            @id @default(uuid())
  name              String
  slug              String?           @unique
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  district          JudicialDistrict? @relation(fields: [districtId], references: [id], onDelete: SetNull)
  sellers           Seller[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model Seller {
  id                String             @id @default(uuid())
  publicId          String?            @unique
  slug              String?            @unique
  name              String             @unique
  contactName       String?
  email             String?
  phone             String?
  address           String?
  city              String?
  state             String?
  zipCode           String?
  website           String?
  logoUrl           String?
  logoMediaId       String?
  dataAiHintLogo    String?
  description       String?            @db.Text
  isJudicial        Boolean            @default(false)
  judicialBranchId  String?
  userId            String?            @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialBranch    JudicialBranch?    @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  user              User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  auctions          Auction[]
  lots              Lot[]
  bens              Bem[]
  directSaleOffers  DirectSaleOffer[]
  judicialProcesses JudicialProcess[]
}

model Auctioneer {
  id                  String    @id @default(uuid())
  publicId            String?   @unique
  slug                String?   @unique
  name                String
  registrationNumber  String?
  contactName         String?
  email               String?
  phone               String?
  address             String?
  city                String?
  state               String?
  zipCode             String?
  website             String?
  logoUrl             String?
  logoMediaId         String?
  dataAiHintLogo      String?
  description         String?   @db.Text
  userId              String?   @unique
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  user                User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  auctions            Auction[]
}

model JudicialProcess {
  id             String           @id @default(uuid())
  publicId       String?          @unique
  processNumber  String
  isElectronic   Boolean          @default(true)
  courtId        String?
  districtId     String?
  branchId       String?
  sellerId       String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  court          Court?           @relation(fields: [courtId], references: [id], onDelete: SetNull)
  district       JudicialDistrict?@relation(fields: [districtId], references: [id], onDelete: SetNull)
  branch         JudicialBranch?  @relation(fields: [branchId], references: [id], onDelete: SetNull)
  seller         Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  bens           Bem[]
  parties        JudicialParty[]
  auction        Auction[]
}

model Bem {
  id                         String       @id @default(uuid())
  publicId                   String?      @unique
  title                      String
  description                String?      @db.Text
  status                     String       @default("DISPONIVEL")
  categoryId                 String?
  subcategoryId              String?
  judicialProcessId          String?
  sellerId                   String?
  evaluationValue            Decimal?     @db.Decimal(15, 2)
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Decimal?
  longitude                  Decimal?
  createdAt                  DateTime     @default(now())
  updatedAt                  DateTime     @updatedAt
  category                   LotCategory? @relation(fields: [categoryId], references: [id])
  subcategory                Subcategory? @relation(fields: [subcategoryId], references: [id])
  judicialProcess            JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller                     Seller?      @relation(fields: [sellerId], references: [id])
  lots                       LotBens[]
}

model Auction {
  id                             String                @id @default(uuid())
  publicId                       String?               @unique
  slug                           String?               @unique
  title                          String
  description                    String?               @db.Text
  status                         AuctionStatus         @default(RASCUNHO)
  auctionDate                    DateTime?
  endDate                        DateTime?
  auctioneerId                   String?
  sellerId                       String?
  categoryId                     String?
  auctionType                    AuctionType?
  auctionMethod                  AuctionMethod         @default(STANDARD)
  participation                  AuctionParticipation  @default(ONLINE)
  imageUrl                       String?
  imageMediaId                   String?
  dataAiHint                     String?
  documentsUrl                   String?
  visits                         Int?                  @default(0)
  totalLots                      Int?                  @default(0)
  initialOffer                   Decimal?              @db.Decimal(15, 2)
  isFavorite                     Boolean?              @default(false)
  onlineUrl                      String?
  address                        String?
  cityId                         String?
  stateId                        String?
  zipCode                        String?
  latitude                       Decimal?
  longitude                      Decimal?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  automaticBiddingEnabled        Boolean               @default(false)
  silentBiddingEnabled           Boolean               @default(false)
  allowMultipleBidsPerUser       Boolean               @default(true)
  allowInstallmentBids           Boolean               @default(true)
  softCloseEnabled               Boolean               @default(false)
  softCloseMinutes               Int?                  @default(2)
  estimatedRevenue               Decimal?              @db.Decimal(15, 2)
  achievedRevenue                Decimal?              @db.Decimal(15, 2)
  totalHabilitatedUsers          Int?                  @default(0)
  isFeaturedOnMarketplace        Boolean               @default(false)
  marketplaceAnnouncementTitle   String?
  judicialProcessId              String?
  courtId                        String?
  districtId                     String?
  branchId                       String?
  decrementAmount                Decimal?              @db.Decimal(15, 2)
  decrementIntervalSeconds       Int?
  floorPrice                     Decimal?              @db.Decimal(15, 2)
  autoRelistSettings             Json?
  createdAt                      DateTime              @default(now())
  updatedAt                      DateTime              @updatedAt
  
  auctioneer            Auctioneer?         @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  seller                Seller?             @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  category              LotCategory?        @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  judicialProcess       JudicialProcess?    @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  court                 Court?              @relation(fields: [courtId], references: [id], onDelete: SetNull)
  district              JudicialDistrict?   @relation(fields: [districtId], references: [id], onDelete: SetNull)
  branch                JudicialBranch?     @relation(fields: [branchId], references: [id], onDelete: SetNull)
  city                  City?               @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state                 State?              @relation(fields: [stateId], references: [id], onDelete: SetNull)
  
  lots                  Lot[]
  bids                  Bid[]
  auctionStages         AuctionStage[]
  habilitations         AuctionHabilitation[]
}


model Lot {
  id                         String       @id @default(uuid())
  publicId                   String?      @unique
  auctionId                  String
  slug                       String?
  number                     String?
  title                      String
  description                String?      @db.Text
  price                      Decimal      @db.Decimal(15, 2)
  initialPrice               Decimal?     @db.Decimal(15, 2)
  secondInitialPrice         Decimal?     @db.Decimal(15, 2)
  evaluationValue            Decimal?     @db.Decimal(15, 2)
  bidIncrementStep           Decimal?     @db.Decimal(10, 2)
  status                     LotStatus    @default(EM_BREVE)
  bidsCount                  Int?         @default(0)
  views                      Int?         @default(0)
  isFeatured                 Boolean?     @default(false)
  isExclusive                Boolean?     @default(false)
  isRelisted                 Boolean      @default(false)
  relistCount                Int          @default(0)
  discountPercentage         Int?
  additionalTriggers         Json?
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  inheritedMediaFromBemId    String?
  type                       String?
  categoryId                 String?
  subcategoryId              String?
  auctionName                String?
  sellerId                   String?
  sellerName                 String?
  auctioneerId               String?
  cityId                     String?
  stateId                    String?
  cityName                   String?
  stateUf                    String?
  latitude                   Decimal?
  longitude                  Decimal?
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?
  endDate                    DateTime?
  auctionDate                DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  dataAiHint                 String?
  winnerId                   String?
  originalLotId              String?
  winningBidTermUrl          String?
  allowInstallmentBids       Boolean?     @default(false)
  createdAt                  DateTime     @default(now())
  updatedAt                  DateTime     @updatedAt

  auction          Auction        @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category         LotCategory?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory      Subcategory?   @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  seller           Seller?        @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  city             City?          @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state            State?         @relation(fields: [stateId], references: [id], onDelete: SetNull)
  winner           User?          @relation("WonLots", fields: [winnerId], references: [id], onDelete: SetNull)
  originalLot      Lot?           @relation("RelistHistory", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot      Lot?           @relation("RelistHistory")

  bens             LotBens[]
  bids             Bid[]
  wins             UserWin[]
  maxBids          UserLotMaxBid[]
  stageDetails     LotAuctionStageDetails[]
  
  @@index([originalLotId])
}

model JudicialParty {
  id              String           @id @default(uuid())
  processId       String
  name            String
  documentNumber  String?
  partyType       ProcessPartyType
  judicialProcess JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model UserDocument {
    id              String @id @default(uuid())
    userId          String
    documentTypeId  String
    status          UserDocumentStatus @default(PENDING_ANALYSIS)
    fileUrl         String
    fileName        String?
    rejectionReason String? @db.Text
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    documentType DocumentType @relation(fields: [documentTypeId], references: [id])
    @@unique([userId, documentTypeId])
}

model Bid {
  id            String   @id @default(uuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())

  lot      Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction  Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder   User @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String       @id @default(uuid())
  lotId            String       @unique
  userId           String
  winningBidAmount Decimal      @db.Decimal(15, 2)
  winDate          DateTime     @default(now())
  paymentStatus    PaymentStatus
  invoiceUrl       String?
  installments     InstallmentPayment[]

  lot   Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user  User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DirectSaleOffer {
  id                  String             @id @default(uuid())
  publicId            String?            @unique
  title               String
  description         String?            @db.Text
  offerType           DirectSaleOfferType
  price               Decimal?           @db.Decimal(15, 2)
  minimumOfferPrice   Decimal?           @db.Decimal(15, 2)
  status              DirectSaleOfferStatus @default(ACTIVE)
  categoryName        String?
  categoryId          String?
  sellerId            String?
  sellerName          String?
  sellerLogoUrl       String?
  dataAiHintSellerLogo String?
  locationCity        String?
  locationState       String?
  imageUrl            String?
  imageMediaId        String?
  dataAiHint          String?
  galleryImageUrls    Json?
  mediaItemIds        Json?
  itemsIncluded       Json?
  views               Int?               @default(0)
  expiresAt           DateTime?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  category LotCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  seller   Seller?      @relation(fields: [sellerId], references: [id], onDelete: SetNull)
}


model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lotId])
}


model UsersOnRoles {
  userId      String
  roleId      String
  assignedAt  DateTime @default(now())
  assignedBy  String

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])
  
  @@id([userId, roleId])
}

model MediaItem {
  id                  String    @id @default(uuid())
  fileName            String    @unique
  storagePath         String
  title               String?
  altText             String?
  caption             String?
  description         String?   @db.Text
  mimeType            String
  sizeBytes           Int?
  urlOriginal         String
  urlThumbnail        String?
  urlMedium           String?
  urlLarge            String?
  linkedLotIds        Json?
  judicialProcessId   String?
  dataAiHint          String?
  uploadedByUserId    String
  uploadedAt          DateTime  @default(now())
}

model AuctionHabilitation {
    userId String
    auctionId String
    habilitatedAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
    @@id([userId, auctionId])
}

model AuctionStage {
    id        String @id @default(uuid())
    auctionId String
    name      String
    startDate DateTime
    endDate   DateTime
    evaluationValue Decimal? @db.Decimal(15, 2)

    auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
    lotDetails LotAuctionStageDetails[]

    @@index([auctionId])
}

model LotAuctionStageDetails {
    id String @id @default(uuid())
    lotId String
    stageId String
    initialBid Decimal? @db.Decimal(15, 2)
    bidIncrement Decimal? @db.Decimal(10, 2)

    lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
    stage AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)
    
    @@unique([lotId, stageId])
}

model LotBens {
    lotId String
    bemId String
    
    lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
    bem Bem @relation(fields: [bemId], references: [id], onDelete: Cascade)
    
    @@id([lotId, bemId])
}

model InstallmentPayment {
  id               String   @id @default(uuid())
  userWinId        String
  installmentNumber Int
  amount           Decimal  @db.Decimal(15, 2)
  dueDate          DateTime
  status           PaymentStatus @default(PENDENTE)
  paymentDate      DateTime?
  paymentMethod    String?
  transactionId    String?

  userWin UserWin @relation(fields: [userWinId], references: [id], onDelete: Cascade)
  @@index([userWinId])
}

model Notification {
  id         String   @id @default(uuid())
  userId     String
  message    String
  link       String?
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@index([userId])
}

// =================================================================
// 6. TABLES WITH NO FOREIGN KEY DEPENDENCIES
// =================================================================

model PlatformSettings {
  id                           String                @id @default("global")
  siteTitle                    String
  siteTagline                  String?
  logoUrl                      String?
  faviconUrl                   String?
  galleryImageBasePath         String
  storageProvider              String                @default("local") // 'local' | 'firebase'
  firebaseStorageBucket        String?
  activeThemeName              String?
  themes                       Json?
  platformPublicIdMasks        Json?
  homepageSections             Json?
  mentalTriggerSettings        Json?
  sectionBadgeVisibility       Json?
  mapSettings                  Json?
  paymentGatewaySettings       Json?
  searchPaginationType         String                @default("loadMore")
  searchItemsPerPage           Int                   @default(12)
  searchLoadMoreCount          Int                   @default(12)
  showCountdownOnLotDetail     Boolean               @default(true)
  showCountdownOnCards         Boolean               @default(true)
  showRelatedLotsOnLotDetail   Boolean               @default(true)
  relatedLotsCount             Int                   @default(5)
  defaultUrgencyTimerHours     Int?
  variableIncrementTable       Json?
  biddingSettings              Json?
  defaultListItemsPerPage      Int?                  @default(10)
  updatedAt                    DateTime              @updatedAt
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}
