// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ==============================================================================
// 1. AUTH & USERS
// ==============================================================================

model User {
  id                  String       @id @default(cuid())
  email               String       @unique
  password            String
  fullName            String?
  roleId              String?
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType?
  badges              String[]

  // Personal Info (PF)
  cpf                 String?      @unique
  dateOfBirth         DateTime?
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?

  // Company Info (PJ)
  razaoSocial         String?
  cnpj                String?      @unique
  inscricaoEstadual   String?
  website             String?

  // Contact & Address
  cellPhone           String?
  homePhone           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?

  // Preferences
  optInMarketing      Boolean      @default(false)
  
  // Timestamps
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  
  // Relationships
  role                 Role?             @relation(fields: [roleId], references: [id], onDelete: SetNull)
  documents            UserDocument[]
  bids                 Bid[]
  wins                 UserWin[]
  reviews              Review[]
  questions            LotQuestion[]     @relation("QuestionAskedBy")
  answeredQuestions    LotQuestion[]     @relation("QuestionAnsweredBy")
  maxBids              UserLotMaxBid[]
  sellerProfile        Seller?
  auctioneerProfile    Auctioneer?
  uploadedMedia        MediaItem[]
  notifications        Notification[]
  blogPostsAuthored    BlogPost[]
}

model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  permissions     Permission[]
  users           User[]
  
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  roles       Role[]
}

// ==============================================================================
// 2. AUCTIONS & LOTS
// ==============================================================================

model Auction {
  id                             String        @id @default(cuid())
  publicId                       String        @unique
  title                          String
  description                    String?       @db.Text
  status                         AuctionStatus @default(RASCUNHO)
  auctionType                    AuctionType?
  categoryId                     String?
  auctioneerId                   String
  sellerId                       String?
  judicialProcessId              String?       @unique
  imageMediaId                   String?       @unique

  // Dates & Details
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json          @default("[]")
  city                           String?
  state                          String?
  imageUrl                       String?
  dataAiHint                     String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  
  // Configs
  sellingBranch                  String?
  automaticBiddingEnabled        Boolean?      @default(false)
  silentBiddingEnabled           Boolean?      @default(false)
  allowMultipleBidsPerUser       Boolean?      @default(true)
  allowInstallmentBids           Boolean?      @default(false)
  softCloseEnabled               Boolean?      @default(false)
  softCloseMinutes               Int?          @default(2)
  autoRelistSettings             Json?
  
  // Dutch Auction Specifics
  decrementAmount                Float?
  decrementIntervalSeconds       Int?
  floorPrice                     Float?
  
  // Stats & Flags
  visits                         Int?          @default(0)
  totalLots                      Int?          @default(0)
  initialOffer                   Float?
  isFavorite                     Boolean?
  currentBid                     Float?
  bidsCount                      Int?          @default(0)
  estimatedRevenue               Float?
  achievedRevenue                Float?        @default(0)
  totalHabilitatedUsers          Int?          @default(0)
  isFeaturedOnMarketplace        Boolean?      @default(false)
  marketplaceAnnouncementTitle   String?
  additionalTriggers             String?

  // Timestamps
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt

  // Relationships
  category                       LotCategory?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  auctioneer                     Auctioneer       @relation(fields: [auctioneerId], references: [id])
  seller                         Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  judicialProcess                JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  image                          MediaItem?       @relation("AuctionImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  lots                           Lot[]
  bids                           Bid[]
  reviews                        Review[]
  questions                      LotQuestion[]
}


model Lot {
  id                String    @id @default(cuid())
  publicId          String    @unique
  auctionId         String
  categoryId        String?
  subcategoryId     String?
  stateId           String?
  cityId            String?
  imageMediaId      String?   @unique

  // Core Info
  title             String
  number            String?
  description       String?   @db.Text
  status            LotStatus
  price             Float     @default(0)
  initialPrice      Float?
  
  // Bidding & Pricing
  bidIncrementStep      Float?
  reservePrice          Float?
  evaluationValue       Float?
  debtAmount            Float?
  itbiValue             Float?
  discountPercentage    Float?

  // Dates
  endDate                DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate      DateTime?
  secondInitialPrice     Float?

  // Location
  latitude          Float?
  longitude         Float?
  mapAddress        String?
  mapEmbedUrl       String?
  mapStaticImageUrl String?

  // Flags & Stats
  isFeatured        Boolean?
  isExclusive       Boolean?
  views             Int?      @default(0)
  bidsCount         Int?      @default(0)
  
  // Relationships
  auction           Auction      @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category          LotCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory       Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  state             StateInfo?   @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city              CityInfo?    @relation(fields: [cityId], references: [id], onDelete: SetNull)
  image             MediaItem?   @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  bens              Bem[]
  mediaItems        MediaItem[]
  bids              Bid[]
  wins              UserWin[]
  reviews           Review[]
  questions         LotQuestion[]
  maxBids           UserLotMaxBid[]

  // Timestamps
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model Bid {
  id              String      @id @default(cuid())
  lotId           String
  auctionId       String
  bidderId        String
  bidderDisplay   String
  amount          Float
  timestamp       DateTime    @default(now())

  // Relationships
  lot             Lot         @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction         Auction     @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user            User        @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id                String      @id @default(cuid())
  lotId             String      @unique
  userId            String
  winningBidAmount  Float
  winDate           DateTime    @default(now())
  paymentStatus     PaymentStatus @default(PENDENTE)
  invoiceUrl        String?
  
  // Relationships
  lot               Lot         @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ==============================================================================
// 3. PROFILES (Sellers & Auctioneers)
// ==============================================================================

model Seller {
  id                String    @id @default(cuid())
  publicId          String    @unique
  name              String
  slug              String    @unique
  userId            String?   @unique
  judicialBranchId  String?   @unique

  // Profile info
  contactName       String?
  email             String?
  phone             String?
  address           String?
  city              String?
  state             String?
  zipCode           String?
  website           String?
  logoUrl           String?
  dataAiHintLogo    String?
  description       String?
  isJudicial        Boolean   @default(false)
  
  // Relationships
  user              User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  auctions          Auction[]
  bens              Bem[]
  judicialBranch    JudicialBranch?    @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  judicialProcesses JudicialProcess[]
  blogPosts         BlogPost[]

  // Timestamps
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Auctioneer {
  id                   String    @id @default(cuid())
  publicId             String    @unique
  name                 String
  slug                 String    @unique
  userId               String?   @unique
  
  // Profile Info
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  dataAiHintLogo       String?
  description          String?
  
  // Relationships
  user                 User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  auctions             Auction[]

  // Timestamps
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
}


// ==============================================================================
// 4. JUDICIAL ENTITIES
// ==============================================================================

model Court {
  id          String              @id @default(cuid())
  name        String
  slug        String              @unique
  stateUf     String
  website     String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  
  // Relationships
  districts   JudicialDistrict[]
  processes   JudicialProcess[]
  state       StateInfo          @relation(fields: [stateUf], references: [uf])
}

model JudicialDistrict {
  id          String              @id @default(cuid())
  name        String
  slug        String              @unique
  courtId     String
  stateId     String
  zipCode     String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  
  // Relationships
  court       Court               @relation(fields: [courtId], references: [id])
  state       StateInfo           @relation(fields: [stateId], references: [id])
  branches    JudicialBranch[]
  processes   JudicialProcess[]
}

model JudicialBranch {
  id          String              @id @default(cuid())
  name        String
  slug        String              @unique
  districtId  String
  contactName String?
  phone       String?
  email       String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  
  // Relationships
  district    JudicialDistrict    @relation(fields: [districtId], references: [id])
  processes   JudicialProcess[]
  seller      Seller?
}

model JudicialProcess {
  id              String            @id @default(cuid())
  publicId        String            @unique
  processNumber   String            @unique
  isElectronic    Boolean           @default(true)
  courtId         String
  districtId      String
  branchId        String
  sellerId        String?

  // Relationships
  court           Court             @relation(fields: [courtId], references: [id])
  district        JudicialDistrict  @relation(fields: [districtId], references: [id])
  branch          JudicialBranch    @relation(fields: [branchId], references: [id])
  seller          Seller?           @relation(fields: [sellerId], references: [id])
  parties         ProcessParty[]
  bens            Bem[]
  auction         Auction?

  // Timestamps
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model ProcessParty {
  id              String          @id @default(cuid())
  processId       String
  name            String
  partyType       ProcessPartyType
  documentNumber  String?

  // Relationships
  process         JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  
  @@unique([processId, name, partyType])
}

model Bem {
  id                  String        @id @default(cuid())
  publicId            String        @unique
  judicialProcessId   String?
  sellerId            String?
  categoryId          String
  subcategoryId       String?
  imageMediaId        String?       @unique

  // Core Info
  title               String
  description         String?       @db.Text
  status              BemStatus     @default(DISPONIVEL)
  evaluationValue     Float?
  
  // Location
  locationCity        String?
  locationState       String?
  address             String?
  latitude            Float?
  longitude           Float?

  // Vehicle Specifics
  plate               String?
  make                String?
  model               String?
  version             String?
  year                Int?
  modelYear           Int?
  mileage             Int?
  color               String?
  fuelType            String?
  transmissionType    String?
  bodyType            String?
  vin                 String?
  renavam             String?
  enginePower         String?
  numberOfDoors       Int?
  vehicleOptions      String?       @db.Text
  detranStatus        String?
  debts               String?       @db.Text
  runningCondition    String?
  bodyCondition       String?
  tiresCondition      String?
  hasKey              Boolean?

  // Real Estate Specifics
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String? @db.Text
  infrastructure             String? @db.Text
  condoDetails               String? @db.Text
  improvements               String? @db.Text
  topography                 String?
  liensAndEncumbrances       String? @db.Text
  propertyDebts              String? @db.Text
  unregisteredRecords        String? @db.Text
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  
  // Other Specifics
  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String? @db.Text
  includedAccessories        String? @db.Text
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                String?
  repairHistory              String? @db.Text
  applianceCapacity          String?
  voltage                    String?
  applianceType              String?
  additionalFunctions        String? @db.Text
  hoursUsed                  Int?
  engineType                 String?
  capacityOrPower            String?
  maintenanceHistory         String? @db.Text
  installationLocation       String?
  compliesWithNR             String?
  operatingLicenses          String?
  breed                      String?
  age                        String?
  sex                        String?
  weight                     String?
  individualId               String?
  purpose                    String?
  sanitaryCondition          String?
  lineage                    String?
  isPregnant                 Boolean?
  specialSkills              String? @db.Text
  gtaDocument                String?
  breedRegistryDocument      String?
  furnitureType              String?
  material                   String?
  style                      String?
  dimensions                 String?
  pieceCount                 Int?
  jewelryType                String?
  metal                      String?
  gemstones                  String?
  totalWeight                String?
  jewelrySize                String?
  authenticityCertificate    String?
  workType                   String?
  artist                     String?
  period                     String?
  technique                  String?
  provenance                 String? @db.Text
  boatType                   String?
  boatLength                 String?
  hullMaterial               String?
  onboardEquipment           String? @db.Text
  productName                String?
  quantity                   String?
  packagingType              String?
  expirationDate             DateTime?
  storageConditions          String?
  preciousMetalType          String?
  purity                     String?
  forestGoodsType            String?
  volumeOrQuantity           String?
  species                    String?
  dofNumber                  String?

  // Timestamps
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relationships
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller            Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  category          LotCategory      @relation(fields: [categoryId], references: [id])
  subcategory       Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  image             MediaItem?       @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  lots              Lot[]
}

// ==============================================================================
// 5. CONTENT & METADATA
// ==============================================================================

model LotCategory {
  id                String        @id @default(cuid())
  name              String        @unique
  slug              String        @unique
  description       String?
  hasSubcategories  Boolean       @default(false)
  itemCount         Int?          @default(0)
  logoUrl           String?
  coverImageUrl     String?
  megaMenuImageUrl  String?
  dataAiHintLogo    String?
  dataAiHintCover   String?
  dataAiHintMegaMenu String?
  logoMediaId       String?       @unique
  coverImageMediaId String?       @unique
  megaMenuImageMediaId String?    @unique
  
  // Relationships
  logo              MediaItem?    @relation("CategoryLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  coverImage        MediaItem?    @relation("CategoryCover", fields: [coverImageMediaId], references: [id], onDelete: SetNull)
  megaMenuImage     MediaItem?    @relation("CategoryMegaMenu", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull)
  lots              Lot[]
  bens              Bem[]
  subcategories     Subcategory[]
  directSaleOffers  DirectSaleOffer[]
  auctions          Auction[]
  
  // Timestamps
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Subcategory {
  id                String      @id @default(cuid())
  name              String
  slug              String      @unique
  parentCategoryId  String
  description       String?
  displayOrder      Int         @default(0)
  itemCount         Int?        @default(0)
  iconUrl           String?
  iconMediaId       String?     @unique

  // Relationships
  parentCategory    LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots              Lot[]
  bens              Bem[]
  icon              MediaItem?  @relation("SubcategoryIcon", fields: [iconMediaId], references: [id], onDelete: SetNull)
  
  // Timestamps
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@unique([parentCategoryId, name])
}

model StateInfo {
  id        String      @id @default(cuid())
  name      String      @unique
  uf        String      @unique
  slug      String      @unique
  cityCount Int?        @default(0)
  
  // Relationships
  cities    CityInfo[]
  lots      Lot[]
  courts    Court[]
  districts JudicialDistrict[]
  
  // Timestamps
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model CityInfo {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  stateId   String
  stateUf   String
  ibgeCode  String?
  lotCount  Int?      @default(0)
  
  // Relationships
  state     StateInfo @relation(fields: [stateId], references: [id])
  lots      Lot[]
  
  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}


model MediaItem {
  id                String       @id @default(cuid())
  fileName          String
  storagePath       String       @unique
  urlOriginal       String
  urlThumbnail      String?
  urlMedium         String?
  urlLarge          String?
  mimeType          String
  sizeBytes         Int
  title             String?
  altText           String?
  caption           String?
  description       String?
  dataAiHint        String?
  uploadedBy        String?

  // Relationships
  user                 User?        @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)
  lotAsImage           Lot?         @relation("LotImage")
  auctionAsImage       Auction?     @relation("AuctionImage")
  bemAsImage           Bem?         @relation("BemImage")
  categoryAsLogo       LotCategory? @relation("CategoryLogo")
  categoryAsCover      LotCategory? @relation("CategoryCover")
  categoryAsMegaMenu   LotCategory? @relation("CategoryMegaMenu")
  subcategoryAsIcon    Subcategory? @relation("SubcategoryIcon")
  lots                 Lot[]
  
  // Timestamps
  uploadedAt           DateTime    @default(now())
}


model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   @db.Text
  imageUrl    String?
  authorId    String
  sellerId    String?
  isPublished Boolean  @default(false)
  tags        Tag[]

  // Relationships
  author      User     @relation(fields: [authorId], references: [id])
  seller      Seller?  @relation(fields: [sellerId], references: [id])
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  blogPosts BlogPost[]
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String   @db.Text
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                        String   @id @default(cuid())
  lotId                     String
  auctionId                 String
  userId                    String
  userDisplayName           String
  questionText              String   @db.Text
  answerText                String?  @db.Text
  isPublic                  Boolean  @default(true)
  answeredAt                DateTime?
  answeredByUserId          String?
  answeredByUserDisplayName String?
  
  // Timestamps
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  
  // Relationships
  user                      User     @relation("QuestionAskedBy", fields: [userId], references: [id], onDelete: Cascade)
  answeredBy                User?    @relation("QuestionAnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)
  lot                       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction                   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lotId])
}


// ==============================================================================
// 6. SYSTEM & CONFIGURATION
// ==============================================================================

model Notification {
  id        String    @id @default(cuid())
  userId    String
  message   String
  isRead    Boolean   @default(false)
  link      String?
  
  // Relationships
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime  @default(now())
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  
  // Timestamps
  createdAt DateTime @default(now())
}

model DocumentTemplate {
  id        String                @id @default(cuid())
  name      String                @unique
  type      DocumentTemplateType
  content   String                @db.Text
  
  // Timestamps
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
}

model UserDocument {
  id              String      @id @default(cuid())
  userId          String
  documentTypeId  String
  fileUrl         String?
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  rejectionReason String?
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  
  // Relationships
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType @relation(fields: [documentTypeId], references: [id], onDelete: Restrict)
  
  // Timestamps
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@unique([userId, documentTypeId])
}

model PlatformSettings {
  id                    String      @id @default("global")
  siteTitle             String
  siteTagline           String?
  galleryImageBasePath  String
  storageProvider       StorageProviderType @default(local)
  firebaseStorageBucket String?
  activeThemeName       String?
  themes                Json[]
  platformPublicIdMasks Json?
  homepageSections      Json[]
  mentalTriggerSettings Json?
  sectionBadgeVisibility Json?
  mapSettings           Json?
  searchPaginationType  SearchPaginationType? @default(loadMore)
  searchItemsPerPage    Int?
  searchLoadMoreCount   Int?
  showCountdownOnLotDetail  Boolean?
  showCountdownOnCards      Boolean?
  showRelatedLotsOnLotDetail Boolean?
  relatedLotsCount      Int?
  defaultUrgencyTimerHours Int?
  variableIncrementTable   Json?
  biddingSettings       Json?
  defaultListItemsPerPage Int?
  
  // Timestamps
  updatedAt             DateTime    @updatedAt
}

// ==============================================================================
// ENUMS
// ==============================================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ACTIVE
  SOLD
  EXPIRED
  PENDING_APPROVAL
}

enum StorageProviderType {
  local
  firebase
}

enum SearchPaginationType {
  loadMore
  numberedPages
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}
