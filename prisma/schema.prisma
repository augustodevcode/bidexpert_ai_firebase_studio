// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// --- ENUMS ---

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum StorageProviderType {
  local
  firebase
}

enum SearchPaginationType {
  loadMore
  numberedPages
}

// --- MODELS ---

model User {
  id                  String                 @id @default(cuid())
  email               String                 @unique
  password            String
  fullName            String?
  roleId              String?
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  cpf                 String?                @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  status              String?                @default("ATIVO")
  optInMarketing      Boolean?               @default(false)
  avatarUrl           String?
  dataAiHint          String?
  activeBids          Int?                   @default(0)
  auctionsWon         Int?                   @default(0)
  itemsSold           Int?                   @default(0)
  accountType         AccountType?           @default(PHYSICAL)
  razaoSocial         String?
  cnpj                String?                @unique
  inscricaoEstadual   String?
  website             String?
  badges              Json? // Can be string array or object
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt

  // Relationships
  role                Role?                  @relation(fields: [roleId], references: [id], onDelete: SetNull)
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  notifications       Notification[]
  reviews             Review[]
  questions           LotQuestion[]
  maxBids             UserLotMaxBid[]
  uploadedMedia       MediaItem[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
}

model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  users           User[]
  permissions     Permission[]
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  roles       Role[]
}

model DocumentType {
  id             String           @id @default(cuid())
  name           String
  description    String?
  isRequired     Boolean
  appliesTo      String? // e.g., 'PHYSICAL,LEGAL'
  allowedFormats String?          @default("pdf,jpg,png")
  displayOrder   Int?             @default(0)
  userDocuments  UserDocument[]
}

model UserDocument {
  id              String             @id @default(cuid())
  userId          String
  documentTypeId  String
  fileUrl         String?
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  rejectionReason String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType DocumentType @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

model Auction {
  id                String       @id @default(cuid())
  publicId          String       @unique
  title             String
  fullTitle         String?      @db.Text
  description       String?      @db.Text
  status            AuctionStatus
  auctionType       AuctionType?
  auctionDate       DateTime
  endDate           DateTime?
  auctionStages     Json? // Array of AuctionStage
  categoryId        String
  auctioneerId      String
  sellerId          String?
  judicialProcessId String?      @unique
  imageMediaId      String?
  imageUrl          String?
  dataAiHint        String?
  documentsUrl      String?
  evaluationReportUrl String?
  auctionCertificateUrl String?
  city              String?
  state             String?
  sellingBranch     String?
  vehicleLocation   String?
  visits            Int?         @default(0)
  totalLots         Int?         @default(0)
  initialOffer      Float?
  bidsCount         Int?         @default(0)
  automaticBiddingEnabled    Boolean?
  silentBiddingEnabled       Boolean?
  allowMultipleBidsPerUser   Boolean?
  allowInstallmentBids       Boolean?
  softCloseEnabled           Boolean?
  softCloseMinutes           Int?
  estimatedRevenue           Float?
  achievedRevenue            Float?       @default(0)
  totalHabilitatedUsers      Int?
  isFeaturedOnMarketplace    Boolean?
  marketplaceAnnouncementTitle String?
  additionalTriggers         String? // Comma-separated
  decrementAmount            Float?
  decrementIntervalSeconds   Int?
  floorPrice                 Float?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  // Relationships
  category          LotCategory       @relation(fields: [categoryId], references: [id])
  auctioneer        Auctioneer        @relation(fields: [auctioneerId], references: [id])
  seller            Seller?           @relation(fields: [sellerId], references: [id])
  judicialProcess   JudicialProcess?  @relation(fields: [judicialProcessId], references: [id])
  image             MediaItem?        @relation("AuctionImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  lots              Lot[]
  bids              Bid[]
}

model Lot {
  id                           String     @id @default(cuid())
  publicId                     String     @unique
  auctionId                    String
  number                       String?
  title                        String
  description                  String?    @db.Text
  price                        Float
  initialPrice                 Float?
  secondInitialPrice           Float?
  bidIncrementStep             Float?
  status                       LotStatus
  stateId                      String?
  cityId                       String?
  categoryId                   String
  subcategoryId                String?
  imageMediaId                 String?
  imageUrl                     String?
  winningBidTermUrl            String?
  galleryImageUrls             Json?
  mediaItemIds                 Json?      @default("[]")
  bemIds                       Json?      @default("[]")
  views                        Int?       @default(0)
  bidsCount                    Int?       @default(0)
  isFeatured                   Boolean?   @default(false)
  isExclusive                  Boolean?   @default(false)
  discountPercentage           Float?
  additionalTriggers           String?
  latitude                     Float?
  longitude                    Float?
  mapAddress                   String?
  mapEmbedUrl                  String?
  mapStaticImageUrl            String?
  judicialProcessNumber        String?
  courtDistrict                String?
  courtName                    String?
  publicProcessUrl             String?
  propertyRegistrationNumber   String?
  propertyLiens                String?    @db.Text
  knownDebts                   String?    @db.Text
  additionalDocumentsInfo      String?    @db.Text
  reservePrice                 Float?
  evaluationValue              Float?
  debtAmount                   Float?
  itbiValue                    Float?
  endDate                      DateTime?
  lotSpecificAuctionDate       DateTime?
  secondAuctionDate            DateTime?
  condition                    String?
  dataAiHint                   String?
  sellerId                     String?
  auctioneerId                 String?
  createdAt                    DateTime   @default(now())
  updatedAt                    DateTime   @updatedAt

  // Relationships
  auction                      Auction    @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                     LotCategory @relation(fields: [categoryId], references: [id])
  subcategory                  Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  state                        StateInfo?   @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city                         CityInfo?    @relation(fields: [cityId], references: [id], onDelete: SetNull)
  image                        MediaItem?   @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  bids                         Bid[]
  wins                         UserWin[]
}

model Bid {
  id             String   @id @default(cuid())
  lotId          String
  auctionId      String
  bidderId       String
  bidderDisplay  String
  amount         Float
  timestamp      DateTime @default(now())

  lot      Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction  Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder   User    @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id                String        @id @default(cuid())
  lotId             String        @unique
  userId            String
  winningBidAmount  Float
  winDate           DateTime      @default(now())
  paymentStatus     PaymentStatus @default(PENDENTE)
  invoiceUrl        String?

  lot  Lot  @relation(fields: [lotId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Seller {
  id                         String    @id @default(cuid())
  publicId                   String    @unique
  name                       String
  slug                       String    @unique
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  logoUrl                    String?
  logoMediaId                String?
  dataAiHintLogo             String?
  description                String?   @db.Text
  memberSince                DateTime?
  rating                     Float?
  activeLotsCount            Int?
  totalSalesValue            Float?
  auctionsFacilitatedCount   Int?
  isJudicial                 Boolean?  @default(false)
  userId                     String?   @unique
  judicialBranchId           String?
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt

  // Relationships
  user                       User?
  logo                       MediaItem?         @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  auctions                   Auction[]
  judicialProcesses          JudicialProcess[]
  bens                       Bem[]
  directSaleOffers           DirectSaleOffer[]
  judicialBranch             JudicialBranch?    @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
}

model Auctioneer {
  id                       String    @id @default(cuid())
  publicId                 String    @unique
  name                     String
  slug                     String    @unique
  registrationNumber       String?
  contactName              String?
  email                    String?
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  logoUrl                  String?
  logoMediaId              String?
  dataAiHintLogo           String?
  description              String?   @db.Text
  memberSince              DateTime?
  rating                   Float?
  auctionsConductedCount   Int?
  totalValueSold           Float?
  userId                   String?   @unique
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  // Relationships
  user     User?
  logo     MediaItem? @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  auctions Auction[]
}

model LotCategory {
  id                   String  @id @default(cuid())
  name                 String  @unique
  slug                 String  @unique
  description          String? @db.Text
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  itemCount            Int?
  hasSubcategories     Boolean? @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  logoImage               MediaItem? @relation("CategoryLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  coverImage              MediaItem? @relation("CategoryCover", fields: [coverImageMediaId], references: [id], onDelete: SetNull)
  megaMenuImage           MediaItem? @relation("CategoryMegaMenu", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull)
  lots                    Lot[]
  auctions                Auction[]
  subcategories           Subcategory[]
  bens                    Bem[]
  directSaleOffers        DirectSaleOffer[]
}

model Subcategory {
  id               String       @id @default(cuid())
  name             String
  slug             String       @unique
  description      String?
  parentCategoryId String
  displayOrder     Int?
  iconMediaId      String?      @unique
  iconUrl          String?
  dataAiHintIcon   String?
  itemCount        Int?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  parentCategory   LotCategory  @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  icon             MediaItem?   @relation("SubcategoryIcon", fields: [iconMediaId], references: [id], onDelete: SetNull)
  lots             Lot[]
  bens             Bem[]
}

model Bem {
  id                         String   @id @default(cuid())
  publicId                   String   @unique
  title                      String
  description                String?  @db.Text
  status                     BemStatus
  categoryId                 String
  subcategoryId              String?
  judicialProcessId          String?
  sellerId                   String?
  evaluationValue            Float?
  imageMediaId               String?
  imageUrl                   String?
  galleryImageUrls           Json?
  mediaItemIds               Json?    @default("[]")
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  // Vehicle fields
  plate                String?
  make                 String?
  model                String?
  version              String?
  year                 Int?
  modelYear            Int?
  mileage              Int?
  color                String?
  fuelType             String?
  transmissionType     String?
  bodyType             String?
  vin                  String?
  renavam              String?
  enginePower          String?
  numberOfDoors        Int?
  vehicleOptions       String?
  detranStatus         String?
  debts                String?
  runningCondition     String?
  bodyCondition        String?
  tiresCondition       String?
  hasKey               Boolean?

  // Real estate fields
  propertyType               String?
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  area                       Float?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  condoDetails               String?
  amenities                  Json? @default("[]")
  infrastructure             String?
  zoningRestrictions         String?
  topography                 String?
  unregisteredRecords        String? @db.Text
  liensAndEncumbrances       String? @db.Text
  hasHabiteSe                Boolean?
  constructionType           String?
  finishes                   String?
  improvements               String?
  propertyDebts              String?

  // Electronics/Appliances
  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String? @db.Text
  includedAccessories        String?
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String?
  applianceCapacity          String?
  voltage                    String?
  applianceType              String?
  additionalFunctions        String?

  // Machinery/Equipment
  hoursUsed                  Int?
  engineType                 String?
  capacityOrPower            String?
  maintenanceHistory         String? @db.Text
  installationLocation       String?
  compliesWithNR             String?
  operatingLicenses          String?

  // Livestock
  breed                      String?
  age                        String?
  sex                        String?
  weight                     String?
  individualId               String?
  purpose                    String?
  sanitaryCondition          String?
  lineage                    String?
  isPregnant                 Boolean?
  specialSkills              String?
  gtaDocument                String?
  breedRegistryDocument      String?
  vaccinationStatus          String?

  // Furniture
  furnitureType              String?
  material                   String?
  style                      String?
  dimensions                 String?
  pieceCount                 Int?

  // Jewelry
  jewelryType                String?
  metal                      String?
  gemstones                  String?
  totalWeight                String?
  jewelrySize                String?
  authenticityCertificate    String?

  // Art
  workType                   String?
  artist                     String?
  period                     String?
  technique                  String?
  provenance                 String? @db.Text

  // Boats
  boatType                   String?
  boatLength                 String?
  hullMaterial               String?
  onboardEquipment           String? @db.Text

  // Foodstuffs
  productName                String?
  quantity                   String?
  packagingType              String?
  expirationDate             DateTime?
  storageConditions          String?

  // Precious Metals
  preciousMetalType          String?
  purity                     String?

  // Forest Goods
  forestGoodsType            String?
  volumeOrQuantity           String?
  species                    String?
  dofNumber                  String?

  // Relationships
  category        LotCategory      @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller          Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  image           MediaItem?       @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
}

model Court {
  id          String             @id @default(cuid())
  name        String             @unique
  slug        String             @unique
  stateUf     String
  website     String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  state       StateInfo          @relation(fields: [stateUf], references: [uf])
  districts   JudicialDistrict[]
  processes   JudicialProcess[]
}

model JudicialDistrict {
  id        String             @id @default(cuid())
  name      String
  slug      String             @unique
  courtId   String
  stateUf   String
  zipCode   String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  court     Court              @relation(fields: [courtId], references: [id])
  state     StateInfo          @relation(fields: [stateUf], references: [uf])
  branches  JudicialBranch[]
  processes JudicialProcess[]
}

model JudicialBranch {
  id           String             @id @default(cuid())
  name         String
  slug         String             @unique
  districtId   String
  contactName  String?
  phone        String?
  email        String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  district    JudicialDistrict   @relation(fields: [districtId], references: [id])
  processes   JudicialProcess[]
  seller      Seller?
}

model JudicialProcess {
  id           String       @id @default(cuid())
  publicId     String       @unique
  processNumber String      @unique
  isElectronic Boolean      @default(true)
  courtId      String
  districtId   String
  branchId     String
  sellerId     String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  court       Court            @relation(fields: [courtId], references: [id])
  district    JudicialDistrict @relation(fields: [districtId], references: [id])
  branch      JudicialBranch   @relation(fields: [branchId], references: [id])
  seller      Seller?          @relation(fields: [sellerId], references: [id])
  parties     ProcessParty[]
  bens        Bem[]
  auction     Auction?
}

model ProcessParty {
  id             String           @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType

  process        JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)
  
  @@unique([processId, name, partyType])
}

model StateInfo {
  id        String             @id @default(cuid())
  name      String             @unique
  uf        String             @unique
  slug      String             @unique
  cityCount Int?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  cities    CityInfo[]
  courts    Court[]
  districts JudicialDistrict[]
  lots      Lot[]
}

model CityInfo {
  id        String    @id @default(cuid())
  name      String
  slug      String
  stateId   String
  stateUf   String
  ibgeCode  String?
  lotCount  Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  state StateInfo @relation(fields: [stateUf], references: [uf], onDelete: Cascade)
  lots  Lot[]
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BlogPost {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  content   String   @db.Text
  authorId  String
  imageUrl  String?
  status    String   @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tags      String? // Comma-separated string for MySQL
}

model ContactMessage {
    id        String @id @default(cuid())
    name      String
    email     String
    subject   String
    message   String @db.Text
    isRead    Boolean @default(false)
    createdAt DateTime @default(now())
}

model Review {
    id              String @id @default(cuid())
    lotId           String
    auctionId       String
    userId          String
    userDisplayName String
    rating          Int // 1-5
    comment         String @db.Text
    createdAt       DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model LotQuestion {
    id                        String @id @default(cuid())
    lotId                     String
    auctionId                 String
    userId                    String
    userDisplayName           String
    questionText              String @db.Text
    answerText                String? @db.Text
    answeredAt                DateTime?
    answeredByUserId          String?
    answeredByUserDisplayName String?
    isPublic                  Boolean @default(true)
    createdAt                 DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model UserLotMaxBid {
    id        String   @id @default(cuid())
    userId    String
    lotId     String
    maxAmount Float
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
    
    @@unique([userId, lotId])
}

model MediaItem {
  id                   String  @id @default(cuid())
  fileName             String
  storagePath          String? @unique
  title                String?
  altText              String?
  caption              String?
  description          String?
  mimeType             String
  sizeBytes            Int
  dimensions           Json?
  urlOriginal          String? @db.Text
  urlThumbnail         String? @db.Text
  urlMedium            String? @db.Text
  urlLarge             String? @db.Text
  linkedLotIds         Json?
  dataAiHint           String?
  uploadedBy           String?
  uploadedAt           DateTime @default(now())

  uploadedByUser       User? @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)

  // One-to-one relations as image
  auctionAsImage           Auction? @relation("AuctionImage")
  lotAsImage               Lot? @relation("LotImage")
  bemAsImage               Bem? @relation("BemImage")
  sellerAsLogo             Seller? @relation("SellerLogo")
  auctioneerAsLogo         Auctioneer? @relation("AuctioneerLogo")
  categoryAsLogo           LotCategory? @relation("CategoryLogo")
  categoryAsCover          LotCategory? @relation("CategoryCover")
  categoryAsMegaMenu       LotCategory? @relation("CategoryMegaMenu")
  directSaleOfferAsImage   DirectSaleOffer? @relation("DirectSaleOfferImage")
  subcategoryAsIcon        Subcategory? @relation("SubcategoryIcon")
}

model DirectSaleOffer {
  id                   String                @id @default(cuid())
  publicId             String                @unique
  title                String
  description          String                @db.Text
  offerType            DirectSaleOfferType
  status               DirectSaleOfferStatus
  price                Float?
  minimumOfferPrice    Float?
  locationCity         String?
  locationState        String?
  imageMediaId         String?               @unique
  imageUrl             String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?                 @default("[]")
  itemsIncluded        String? // Comma-separated
  tags                 String? // Comma-separated
  views                Int                   @default(0)
  proposalsCount       Int                   @default(0)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  expiresAt            DateTime?

  // Relationships
  categoryId               String
  sellerId                 String
  category                 LotCategory           @relation(fields: [categoryId], references: [id])
  seller                   Seller                @relation(fields: [sellerId], references: [id])
  image                    MediaItem?            @relation("DirectSaleOfferImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
}

model PlatformSettings {
  id                       String        @id @default("global")
  siteTitle                String?
  siteTagline              String?
  galleryImageBasePath     String?
  storageProvider          StorageProviderType? @default(local)
  firebaseStorageBucket    String?
  activeThemeName          String?
  themes                   Json?
  platformPublicIdMasks    Json?
  homepageSections         Json?
  mentalTriggerSettings    Json?
  sectionBadgeVisibility   Json?
  mapSettings              Json?
  searchPaginationType     SearchPaginationType? @default(loadMore)
  searchItemsPerPage       Int?
  searchLoadMoreCount      Int?
  showCountdownOnLotDetail Boolean?
  showCountdownOnCards     Boolean?
  showRelatedLotsOnLotDetail Boolean?
  relatedLotsCount         Int?
  variableIncrementTable   Json?
  biddingSettings          Json?
  defaultListItemsPerPage  Int?
  updatedAt                DateTime      @updatedAt
}
