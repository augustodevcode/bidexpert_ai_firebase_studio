
// datasource db defines the database connection details.
// It is used by the Prisma client to connect to the database.
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// generator client defines the Prisma client generator.
// It is used to generate the Prisma client based on the schema.
generator client {
  provider = "prisma-client-js"
}

// =================================================================
// ENUMS
// =================================================================

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

// =================================================================
// MODELS (em ordem de dependÃªncia)
// =================================================================

model PlatformSettings {
  id                               String                       @id @default(uuid())
  siteTitle                        String
  siteTagline                      String?
  logoUrl                          String?
  faviconUrl                       String?
  galleryImageBasePath             String
  storageProvider                  String
  firebaseStorageBucket            String?
  activeThemeName                  String?
  themes                           Json?
  platformPublicIdMasks            Json?
  homepageSections                 Json?
  mentalTriggerSettings            Json?
  sectionBadgeVisibility           Json?
  mapSettings                      Json?
  searchPaginationType             String
  searchItemsPerPage               Int
  searchLoadMoreCount              Int
  showCountdownOnLotDetail         Boolean
  showCountdownOnCards             Boolean
  showRelatedLotsOnLotDetail       Boolean
  relatedLotsCount                 Int
  defaultUrgencyTimerHours         Int?
  variableIncrementTable           Json?
  biddingSettings                  Json?
  paymentGatewaySettings           Json?
  defaultListItemsPerPage          Int                          @default(10)
  updatedAt                        DateTime                     @updatedAt
}

model Role {
  id               String       @id @default(uuid())
  name             String
  nameNormalized   String       @unique
  description      String?
  permissions      Json?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  users            UsersOnRoles[]
}

model DocumentType {
  id              String         @id @default(uuid())
  name            String
  description     String?
  isRequired      Boolean        @default(true)
  appliesTo       String? // e.g., "PHYSICAL,LEGAL"
  userDocuments   UserDocument[]
}

model State {
  id        String   @id @default(uuid())
  name      String
  uf        String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cities    City[]
  districts JudicialDistrict[]
  courts    Court[]
  auctions  Auction[]
  lots      Lot[]
}

model LotCategory {
  id                 String   @id @default(uuid())
  name               String
  slug               String   @unique
  description        String?  @db.Text
  hasSubcategories   Boolean  @default(false)
  iconName           String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintIcon     String?
  coverImageUrl      String?
  coverImageMediaId  String?
  dataAiHintCover    String?
  megaMenuImageUrl   String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  auctions           Auction[]
  lots               Lot[]
  subcategories      Subcategory[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
}

model Court {
  id                String             @id @default(uuid())
  name              String
  slug              String             @unique
  stateId           String?
  state             State?             @relation(fields: [stateId], references: [id])
  website           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]          @relation("AuctionCourt")
}

model City {
  id        String   @id @default(uuid())
  name      String
  slug      String
  stateId   String
  stateUf   String?
  ibgeCode  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state     State    @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots      Lot[]
  auctions  Auction[]
}

model Subcategory {
  id               String      @id @default(uuid())
  name             String
  slug             String
  parentCategoryId String
  description      String?     @db.Text
  displayOrder     Int         @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots             Lot[]
  bens             Bem[]
}

model User {
  id                  String               @id @default(uuid())
  uid                 String?              @unique
  email               String               @unique
  password            String?
  fullName            String?
  cpf                 String?              @unique
  cellPhone           String?
  homePhone           String?
  dateOfBirth         DateTime?
  accountType         AccountType          @default(PHYSICAL)
  razaoSocial         String?
  cnpj                String?              @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  avatarUrl           String?
  dataAiHint          String?
  sellerId            String?
  seller              Seller?              @relation("SellerUser", fields: [sellerId], references: [id], onDelete: SetNull)
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  badges              Json?
  optInMarketing      Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  roles               UsersOnRoles[]
  bids                Bid[]
  wins                UserWin[]            @relation("WonLots")
  documents           UserDocument[]
  notifications       Notification[]
  habilitations       AuctionHabilitation[]
  maxBids             UserLotMaxBid[]
  uploadedMedia       MediaItem[]          @relation("UploadedBy")
  auctioneer          Auctioneer?
}

model JudicialDistrict {
  id                String           @id @default(uuid())
  name              String
  slug              String           @unique
  courtId           String?
  stateId           String?
  zipCode           String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  court             Court?           @relation(fields: [courtId], references: [id])
  state             State?           @relation(fields: [stateId], references: [id])
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]        @relation("AuctionDistrict")
}

model Auctioneer {
  id                   String        @id @default(uuid())
  publicId             String        @unique
  slug                 String        @unique
  name                 String
  registrationNumber   String?
  contactName          String?
  email                String?       @unique
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?       @db.Text
  userId               String?       @unique
  user                 User?         @relation(fields: [userId], references: [id])
  auctions             Auction[]
  lots                 Lot[]
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
}

model Seller {
  id                   String              @id @default(uuid())
  publicId             String              @unique
  slug                 String              @unique
  name                 String              @unique
  contactName          String?
  email                String?             @unique
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?             @db.Text
  userId               String?             @unique
  user                 User?               @relation("SellerUser")
  isJudicial           Boolean             @default(false)
  judicialBranchId     String?             @unique
  judicialBranch       JudicialBranch?     @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  auctions             Auction[]
  lots                 Lot[]
  bens                 Bem[]
  directSaleOffers     DirectSaleOffer[]
  judicialProcesses    JudicialProcess[]
}

model JudicialBranch {
  id                String              @id @default(uuid())
  name              String
  slug              String              @unique
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  district          JudicialDistrict?   @relation(fields: [districtId], references: [id])
  sellers           Seller[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]           @relation("AuctionBranch")
}

model AuctionStage {
  id                String    @id @default(uuid())
  auctionId         String
  name              String
  startDate         DateTime
  endDate           DateTime
  evaluationValue   Decimal?  @db.Decimal(15, 2)
  auction           Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  lotStageDetails   LotAuctionStageDetails[]

  @@index([auctionId])
}

model LotAuctionStageDetails {
    id              String      @id @default(uuid())
    lotId           String
    auctionStageId  String
    initialBid      Decimal?    @db.Decimal(15, 2)
    bidIncrement    Decimal?    @db.Decimal(15, 2)
    
    lot             Lot         @relation(fields: [lotId], references: [id], onDelete: Cascade)
    auctionStage    AuctionStage @relation(fields: [auctionStageId], references: [id], onDelete: Cascade)

    @@unique([lotId, auctionStageId])
    @@index([lotId])
    @@index([auctionStageId])
}

model Bem {
  id                   String        @id @default(uuid())
  publicId             String        @unique
  title                String
  description          String?       @db.Text
  status               String        @default("DISPONIVEL")
  categoryId           String
  subcategoryId        String?
  judicialProcessId    String?
  sellerId             String?
  evaluationValue      Decimal?      @db.Decimal(15, 2)
  imageUrl             String?
  imageMediaId         String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  dataAiHint           String?
  locationCity         String?
  locationState        String?
  address              String?
  latitude             Float?
  longitude            Float?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  category             LotCategory   @relation(fields: [categoryId], references: [id])
  subcategory          Subcategory?  @relation(fields: [subcategoryId], references: [id])
  judicialProcess      JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller               Seller?       @relation(fields: [sellerId], references: [id])
  lots                 LotBens[]

  plate                String?
  make                 String?
  model                String?
  version              String?
  year                 Int?
  modelYear            Int?
  mileage              Int?
  color                String?
  fuelType             String?
  transmissionType     String?
  bodyType             String?
  vin                  String?       @unique
  renavam              String?       @unique
  enginePower          String?
  numberOfDoors        Int?
  vehicleOptions       String?
  detranStatus         String?
  debts                String?
  runningCondition     String?
  bodyCondition        String?
  tiresCondition       String?
  hasKey               Boolean?

  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?
  infrastructure             String?
  condoDetails               String?
  improvements               String?
  topography                 String?
  liensAndEncumbrances       String?
  propertyDebts              String?
  unregisteredRecords        String?
  hasHabiteSe                Boolean?
  zoningRestrictions         String?

  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String?
  includedAccessories        String?
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String?
  applianceCapacity          String?
  voltage                    String?
  applianceType              String?
  additionalFunctions        String?
  hoursUsed                  Int?
  engineType                 String?
  capacityOrPower            String?
  maintenanceHistory         String?
  installationLocation       String?
  compliesWithNR             String?
  operatingLicenses          String?
  breed                      String?
  age                        String?
  sex                        String?
  weight                     String?
  individualId               String?
  purpose                    String?
  sanitaryCondition          String?
  vaccinationStatus          String?
  lineage                    String?
  isPregnant                 Boolean?
  specialSkills              String?
  gtaDocument                String?
  breedRegistryDocument      String?
}

model Auction {
  id                             String                 @id @default(uuid())
  publicId                       String                 @unique
  slug                           String                 @unique
  title                          String
  description                    String?                @db.Text
  status                         AuctionStatus          @default(RASCUNHO)
  auctionDate                    DateTime
  endDate                        DateTime?
  auctioneerId                   String
  sellerId                       String
  categoryId                     String
  auctionType                    AuctionType
  auctionMethod                  AuctionMethod          @default(STANDARD)
  participation                  AuctionParticipation   @default(ONLINE)
  imageUrl                       String?
  imageMediaId                   String?
  dataAiHint                     String?
  documentsUrl                   String?
  visits                         Int?
  totalLots                      Int?
  initialOffer                   Decimal?               @db.Decimal(15, 2)
  isFavorite                     Boolean?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  automaticBiddingEnabled        Boolean                @default(false)
  allowInstallmentBids           Boolean                @default(true)
  silentBiddingEnabled           Boolean                @default(false)
  allowMultipleBidsPerUser       Boolean                @default(true)
  softCloseEnabled               Boolean                @default(false)
  softCloseMinutes               Int                    @default(2)
  estimatedRevenue               Decimal?               @db.Decimal(15, 2)
  achievedRevenue                Decimal?               @db.Decimal(15, 2)
  totalHabilitatedUsers          Int?
  isFeaturedOnMarketplace        Boolean                @default(false)
  marketplaceAnnouncementTitle   String?
  decrementAmount                Decimal?               @db.Decimal(15, 2)
  decrementIntervalSeconds       Int?
  floorPrice                     Decimal?               @db.Decimal(15, 2)
  autoRelistSettings             Json?
  judicialProcessId              String?
  courtId                        String?
  districtId                     String?
  branchId                       String?
  onlineUrl                      String?
  address                        String?
  zipCode                        String?
  latitude                       Float?
  longitude                      Float?
  cityId                         String?
  stateId                        String?
  auctioneer                     Auctioneer             @relation(fields: [auctioneerId], references: [id])
  seller                         Seller                 @relation(fields: [sellerId], references: [id])
  category                       LotCategory            @relation(fields: [categoryId], references: [id])
  lots                           Lot[]
  habilitations                  AuctionHabilitation[]
  bids                           Bid[]
  auctionStages                  AuctionStage[]
  judicialProcess                JudicialProcess?       @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  court                          Court?                 @relation("AuctionCourt", fields: [courtId], references: [id])
  district                       JudicialDistrict?      @relation("AuctionDistrict", fields: [districtId], references: [id])
  branch                         JudicialBranch?        @relation("AuctionBranch", fields: [branchId], references: [id])
  city                           City?                  @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state                          State?                 @relation(fields: [stateId], references: [id], onDelete: SetNull)
  createdAt                      DateTime               @default(now())
  updatedAt                      DateTime               @updatedAt

  @@index([sellerId])
  @@index([auctioneerId])
  @@index([categoryId])
  @@index([judicialProcessId])
  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
  @@index([cityId])
  @@index([stateId])
}

model Lot {
  id                       String                   @id @default(uuid())
  publicId                 String                   @unique
  auctionId                String
  slug                     String
  number                   String?
  title                    String
  description              String?                  @db.Text
  price                    Decimal                  @db.Decimal(15, 2)
  initialPrice             Decimal?                 @db.Decimal(15, 2)
  secondInitialPrice       Decimal?                 @db.Decimal(15, 2)
  bidIncrementStep         Decimal?                 @db.Decimal(10, 2)
  status                   LotStatus                @default(EM_BREVE)
  bidsCount                Int?
  views                    Int?
  isFeatured               Boolean                  @default(false)
  isExclusive              Boolean                  @default(false)
  discountPercentage       Int?
  additionalTriggers       Json?
  imageUrl                 String?
  imageMediaId             String?
  galleryImageUrls         Json?
  mediaItemIds             Json?
  type                     String
  categoryId               String
  subcategoryId            String?
  auctionName              String?
  sellerId                 String?
  sellerName               String?
  auctioneerId             String?
  cityId                   String?
  stateId                  String?
  cityName                 String?
  stateUf                  String?
  latitude                 Float?
  longitude                Float?
  mapAddress               String?
  mapEmbedUrl              String?
  mapStaticImageUrl        String?
  endDate                  DateTime?
  auctionDate              DateTime?
  lotSpecificAuctionDate   DateTime?
  secondAuctionDate        DateTime?
  condition                String?
  dataAiHint               String?
  winnerId                 String?
  winningBidTermUrl        String?
  allowInstallmentBids     Boolean                  @default(false)
  isRelisted               Boolean                  @default(false)
  relistCount              Int                      @default(0)
  originalLotId            String?                  @unique
  evaluationValue          Decimal?                 @db.Decimal(15, 2)
  inheritedMediaFromBemId  String?
  auction                  Auction                  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                 LotCategory              @relation(fields: [categoryId], references: [id])
  subcategory              Subcategory?             @relation(fields: [subcategoryId], references: [id])
  seller                   Seller?                  @relation(fields: [sellerId], references: [id])
  auctioneer               Auctioneer?              @relation(fields: [auctioneerId], references: [id])
  city                     City?                    @relation(fields: [cityId], references: [id])
  state                    State?                   @relation(fields: [stateId], references: [id])
  winner                   User?                    @relation("WonLots", fields: [winnerId], references: [id], onDelete: SetNull)
  originalLot              Lot?                     @relation("RelistHistory", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot              Lot[]                    @relation("RelistHistory")
  bens                     LotBens[]
  bids                     Bid[]
  wins                     UserWin[]
  lotStageDetails          LotAuctionStageDetails[]
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt

  @@index([auctionId])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([sellerId])
  @@index([auctioneerId])
  @@index([cityId])
  @@index([stateId])
  @@index([winnerId])
}

model LotBens {
  lotId    String
  bemId    String
  lot      Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bem      Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())

  @@id([lotId, bemId])
  @@index([lotId])
  @@index([bemId])
}

model JudicialProcess {
  id                String           @id @default(uuid())
  publicId          String           @unique
  processNumber     String
  isElectronic      Boolean          @default(true)
  courtId           String
  districtId        String
  branchId          String
  sellerId          String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  court             Court            @relation(fields: [courtId], references: [id])
  district          JudicialDistrict @relation(fields: [districtId], references: [id])
  branch            JudicialBranch   @relation(fields: [branchId], references: [id])
  seller            Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties           JudicialParty[]
  bens              Bem[]
  auctions          Auction[]
}

model DirectSaleOffer {
  id                String        @id @default(uuid())
  publicId          String        @unique
  title             String
  description       String?       @db.Text
  offerType         DirectSaleOfferType
  price             Decimal?      @db.Decimal(15, 2)
  minimumOfferPrice Decimal?      @db.Decimal(15, 2)
  status            DirectSaleOfferStatus @default(ACTIVE)
  categoryId        String?
  sellerId          String?
  sellerName        String
  sellerLogoUrl     String?
  dataAiHintSellerLogo String?
  locationCity      String?
  locationState     String?
  imageUrl          String?
  imageMediaId      String?
  dataAiHint        String?
  galleryImageUrls  Json?
  mediaItemIds      Json?
  itemsIncluded     Json?
  views             Int?          @default(0)
  expiresAt         DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  category          LotCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  seller            Seller?      @relation(fields: [sellerId], references: [id], onDelete: SetNull)
}

model DocumentTemplate {
  id        String                @id @default(uuid())
  name      String
  type      DocumentTemplateType
  content   String?               @db.Text
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model UsersOnRoles {
  userId      String
  roleId      String
  assignedAt  DateTime @default(now())
  assignedBy  String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model UserDocument {
    id                String              @id @default(uuid())
    userId            String
    documentTypeId    String
    status            UserDocumentStatus  @default(PENDING_ANALYSIS)
    fileUrl           String
    fileName          String?
    rejectionReason   String?             @db.Text
    createdAt         DateTime            @default(now())
    updatedAt         DateTime            @updatedAt
    user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    documentType      DocumentType        @relation(fields: [documentTypeId], references: [id])
}

model AuctionHabilitation {
    id            String  @id @default(uuid())
    userId        String
    auctionId     String
    habilitatedAt DateTime @default(now())

    user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    auction       Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

    @@unique([userId, auctionId])
}

model Bid {
  id            String   @id @default(uuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())

  lot     Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder  User @relation(fields: [bidderId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([auctionId])
}

model UserWin {
    id                  String      @id @default(uuid())
    lotId               String      @unique // A lot can only be won once
    userId              String
    winningBidAmount    Decimal     @db.Decimal(15, 2)
    winDate             DateTime    @default(now())
    paymentStatus       PaymentStatus @default(PENDENTE)
    invoiceUrl          String?
    
    lot                 Lot         @relation(fields: [lotId], references: [id])
    user                User        @relation("WonLots", fields: [userId], references: [id])
    installments        InstallmentPayment[]

    @@index([userId])
}

model InstallmentPayment {
    id              String          @id @default(uuid())
    userWinId       String
    installmentNumber Int
    amount          Decimal         @db.Decimal(15, 2)
    dueDate         DateTime
    status          PaymentStatus   @default(PENDENTE)
    paymentDate     DateTime?
    paymentMethod   String?
    transactionId   String?

    userWin         UserWin         @relation(fields: [userWinId], references: [id])
}

model JudicialParty {
    id                  String @id @default(uuid())
    processId           String
    name                String
    documentNumber      String?
    partyType           ProcessPartyType
    
    process             JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MediaItem {
    id                String       @id @default(uuid())
    fileName          String
    storagePath       String       @unique
    title             String
    altText           String?
    caption           String?
    description       String?      @db.Text
    mimeType          String
    sizeBytes         Int
    urlOriginal       String
    urlThumbnail      String
    urlMedium         String?
    urlLarge          String?
    linkedLotIds      Json?
    dataAiHint        String?
    uploadedByUserId  String
    judicialProcessId String?
    uploadedBy        User         @relation("UploadedBy", fields: [uploadedByUserId], references: [id])
    uploadedAt        DateTime     @default(now())
}


model VehicleMake {
    id      String   @id @default(uuid())
    name    String   @unique
    slug    String   @unique
    models  VehicleModel[]
}

model VehicleModel {
    id      String      @id @default(uuid())
    name    String
    slug    String
    makeId  String
    make    VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)

    @@unique([name, makeId])
}
