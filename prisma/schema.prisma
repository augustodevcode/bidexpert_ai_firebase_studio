// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// ======================================
// Modelos de Autenticação e Usuário
// ======================================
model Usuario {
  id                  String    @id @default(uuid())
  email               String    @unique
  fullName            String
  password            String
  avatarUrl           String?
  dataAiHint          String?   @db.Text
  accountType         String?
  cpf                 String?   @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  optInMarketing      Boolean?  @default(false)
  habilitationStatus  UserHabilitationStatus @default(PENDENTE_DOCUMENTOS)
  status              String?
  badges              Json?

  // Pessoa Jurídica
  razaoSocial         String?
  cnpj                String?   @unique
  inscricaoEstadual   String?
  website             String?

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  roleId              String?
  perfil              Perfil?      @relation(fields: [roleId], references: [id])
  
  lances              Lance[]
  arremates           Arremate[]
  documentos          DocumentoUsuario[]
  notificacoes        Notificacao[]
  avaliacoes          Avaliacao[]
  perguntas           PerguntaLote[]
  lancesMaximos       LanceMaximoUsuario[]
  
  vendedor            Vendedor?
  leiloeiro           Leiloeiro?
  
  @@index([email])
}

model Perfil {
  id              String      @id @default(uuid())
  name            String      @unique
  name_normalized String      @unique
  description     String?
  permissions     String[]    @db.Text

  usuarios        Usuario[]

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

// ======================================
// Modelos de Habilitação
// ======================================

model TipoDocumento {
  id            String    @id @default(uuid())
  name          String
  description   String?
  isRequired    Boolean   @default(true)
  aplicaA       String?
  formatos      String?
  displayOrder  Int       @default(0)

  documentosUsuario DocumentoUsuario[]
}

model DocumentoUsuario {
  id              String             @id @default(uuid())
  userId          String
  documentTypeId  String
  fileUrl         String?
  fileName        String?
  status          UserDocumentStatus @default(NAO_ENVIADO)
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  rejectionReason String?            @db.Text

  usuario         Usuario            @relation(fields: [userId], references: [id], onDelete: Cascade)
  tipoDocumento   TipoDocumento      @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)

  @@unique([userId, documentTypeId])
}

// ======================================
// Modelos de Leilão e Lotes
// ======================================

model Leilao {
  id                             String        @id @default(uuid())
  publicId                       String        @unique
  title                          String
  fullTitle                      String?
  description                    String?       @db.Text
  status                         String        @default("RASCUNHO")
  auctionType                    String?
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json?         @db.Json
  city                           String?
  state                          String?
  imageUrl                       String?
  dataAiHint                     String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  visits                         Int?          @default(0)
  totalLots                      Int?          @default(0)
  initialOffer                   Float?
  isFavorite                     Boolean?
  currentBid                     Float?
  bidsCount                      Int?
  sellingBranch                  String?
  vehicleLocation                String?
  automaticBiddingEnabled        Boolean?
  silentBiddingEnabled           Boolean?
  allowMultipleBidsPerUser       Boolean?
  allowInstallmentBids           Boolean?
  softCloseEnabled               Boolean?
  softCloseMinutes               Int?
  decrementAmount                Float?
  decrementIntervalSeconds       Int?
  floorPrice                     Float?
  isFeaturedOnMarketplace        Boolean?
  marketplaceAnnouncementTitle   String?
  additionalTriggers             String?
  autoRelistSettings             Json?
  estimatedRevenue               Float?
  achievedRevenue                Float?        @default(0)
  totalHabilitatedUsers          Int?

  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt

  processoJudicialId             String?       @unique
  processoJudicial               ProcessoJudicial? @relation(fields: [processoJudicialId], references: [id])

  categoriaId                    String?
  categoria                      CategoriaLote? @relation(fields: [categoriaId], references: [id])

  vendedorId                     String?
  vendedor                       Vendedor?      @relation(fields: [vendedorId], references: [id])

  leiloeiroId                    String?
  leiloeiro                      Leiloeiro?     @relation(fields: [leiloeiroId], references: [id])

  lotes                          Lote[]
  lances                         Lance[]
  avaliacoes                     Avaliacao[]
  perguntas                      PerguntaLote[]

  @@index([status, auctionDate])
}

model Lote {
  id                      String   @id @default(uuid())
  publicId                String   @unique
  number                  String?
  title                   String
  description             String?  @db.Text
  price                   Float
  initialPrice            Float?
  secondInitialPrice      Float?
  bidIncrementStep        Float?
  reservePrice            Float?
  evaluationValue         Float?
  debtAmount              Float?
  itbiValue               Float?
  condition               String?
  status                  String   @default("EM_BREVE")
  imageUrl                String?
  dataAiHint              String?
  galleryImageUrls        Json?
  winningBidTermUrl       String?
  views                   Int?     @default(0)
  bidsCount               Int?     @default(0)
  isFeatured              Boolean? @default(false)
  isExclusive             Boolean? @default(false)
  discountPercentage      Float?
  additionalTriggers      String?
  latitude                Float?
  longitude               Float?
  mapAddress              String?
  mapEmbedUrl             String?
  mapStaticImageUrl       String?
  judicialProcessNumber   String?
  courtDistrict           String?
  courtName               String?
  publicProcessUrl        String?
  propertyRegistrationNumber String?
  propertyLiens           String?  @db.Text
  knownDebts              String?  @db.Text
  additionalDocumentsInfo String?  @db.Text

  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  auctionId               String
  leilao                  Leilao   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  
  categoryId              String?
  categoria               CategoriaLote? @relation(fields: [categoryId], references: [id])
  
  subcategoryId           String?
  subcategoria            Subcategoria? @relation(fields: [subcategoryId], references: [id])
  
  stateId                 String?
  estado                  Estado?  @relation(fields: [stateId], references: [id])
  
  cityId                  String?
  cidade                  Cidade?  @relation(fields: [cityId], references: [id])

  sellerId                String?  @db.VarChar(255)
  sellerName              String?
  auctioneerId            String?  @db.VarChar(255)
  auctioneerName          String?

  bens                    Bem[]    @relation("BemToLote")
  lances                  Lance[]
  arremate                Arremate?
  perguntas               PerguntaLote[]
  avaliacoes              Avaliacao[]
  lancesMaximos           LanceMaximoUsuario[]
  
  mediaItems              MediaItem[] @relation("MediaItemToLot")
}

model Bem {
  id                    String      @id @default(uuid())
  publicId              String      @unique
  title                 String
  description           String?     @db.Text
  status                String      @default("DISPONIVEL")
  evaluationValue       Float?
  imageUrl              String?
  dataAiHint            String?
  galleryImageUrls      Json?
  locationCity          String?
  locationState         String?
  address               String?
  latitude              Float?
  longitude             Float?
  
  // Fields for specific types, kept nullable
  plate                 String?
  make                  String?
  model                 String?
  version               String?
  year                  Int?
  modelYear             Int?
  mileage               Int?
  color                 String?
  fuelType              String?
  transmissionType      String?
  bodyType              String?
  vin                   String?
  renavam               String?
  enginePower           String?
  numberOfDoors         Int?
  vehicleOptions        String?
  detranStatus          String?
  debts                 String?
  runningCondition      String?
  bodyCondition         String?
  tiresCondition        String?
  hasKey                Boolean?
  propertyRegistrationNumber String?
  iptuNumber            String?
  propertyType          String?
  isOccupied            Boolean?
  area                  Float?
  bedrooms              Int?
  bathrooms             Int?
  parkingSpaces         Int?
  amenities             String?

  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  
  judicialProcessId     String?
  processoJudicial      ProcessoJudicial? @relation(fields: [judicialProcessId], references: [id])
  
  sellerId              String?
  vendedor              Vendedor?     @relation(fields: [sellerId], references: [id])

  categoryId            String?
  categoria             CategoriaLote? @relation(fields: [categoryId], references: [id])
  
  subcategoryId         String?
  subcategoria          Subcategoria? @relation(fields: [subcategoryId], references: [id])

  lotes                 Lote[]      @relation("BemToLote")
  mediaItems            MediaItem[] @relation("MediaItemToBem")
}

model CategoriaLote {
  id                  String      @id @default(uuid())
  name                String      @unique
  slug                String      @unique
  description         String?     @db.Text
  itemCount           Int?
  hasSubcategories    Boolean?
  logoUrl             String?
  dataAiHintLogo      String?
  coverImageUrl       String?
  dataAiHintCover     String?
  megaMenuImageUrl    String?
  dataAiHintMegaMenu  String?
  
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  
  leiloes             Leilao[]
  lotes               Lote[]
  subcategorias       Subcategoria[]
  vendasDiretas       VendaDireta[]
  bens                Bem[]
  postsBlog           PostBlog[]
}

model Subcategoria {
  id                  String      @id @default(uuid())
  name                String
  slug                String      @unique
  description         String?
  displayOrder        Int?        @default(0)
  iconUrl             String?
  dataAiHintIcon      String?
  itemCount           Int?

  parentCategoryId    String
  categoriaPrincipal  CategoriaLote @relation(fields: [parentCategoryId], references: [id])

  lotes               Lote[]
  bens                Bem[]

  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

// ======================================
// Modelos de Lance e Arremate
// ======================================

model Lance {
  id            String    @id @default(uuid())
  amount        Float
  timestamp     DateTime  @default(now())
  isProxyBid    Boolean   @default(false)
  
  lotId         String
  lote          Lote      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  
  auctionId     String
  leilao        Leilao    @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  bidderId      String
  licitante     Usuario   @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  
  bidderDisplay String?

  @@index([lotId, timestamp])
}

model LanceMaximoUsuario {
  id          String      @id @default(uuid())
  maxAmount   Float
  isActive    Boolean     @default(true)
  
  userId      String
  usuario     Usuario     @relation(fields: [userId], references: [id], onDelete: Cascade)

  lotId       String
  lote        Lote        @relation(fields: [lotId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@unique([userId, lotId])
}

model Arremate {
  id                String    @id @default(uuid())
  winningBidAmount  Float
  winDate           DateTime  @default(now())
  paymentStatus     String    @default("PENDENTE")
  invoiceUrl        String?
  
  lotId             String    @unique
  lote              Lote      @relation(fields: [lotId], references: [id])

  userId            String
  usuario           Usuario   @relation(fields: [userId], references: [id])

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@index([userId])
}

// ======================================
// Modelos de Entidades
// ======================================

model Vendedor {
  id                        String      @id @default(uuid())
  publicId                  String      @unique
  name                      String      @unique
  slug                      String      @unique
  contactName               String?
  email                     String?
  phone                     String?
  address                   String?
  city                      String?
  state                     String?
  zipCode                   String?
  website                   String?
  logoUrl                   String?
  dataAiHintLogo            String?
  description               String?     @db.Text
  memberSince               DateTime?
  rating                    Float?
  activeLotsCount           Int?
  totalSalesValue           Float?
  auctionsFacilitatedCount  Int?
  isJudicial                Boolean?    @default(false)

  userId                    String?     @unique
  usuario                   Usuario?    @relation(fields: [userId], references: [id])
  
  judicialBranchId          String?     @unique
  varaJudicial              Vara? @relation(fields: [judicialBranchId], references: [id])

  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt

  leiloes                   Leilao[]
  bens                      Bem[]
  vendasDiretas             VendaDireta[]
  processosJudiciais        ProcessoJudicial[]
}

model Leiloeiro {
  id                        String      @id @default(uuid())
  publicId                  String      @unique
  name                      String      @unique
  slug                      String      @unique
  registrationNumber        String?
  contactName               String?
  email                     String?
  phone                     String?
  address                   String?
  city                      String?
  state                     String?
  zipCode                   String?
  website                   String?
  logoUrl                   String?
  dataAiHintLogo            String?
  description               String?     @db.Text
  memberSince               DateTime?
  rating                    Float?
  auctionsConductedCount    Int?
  totalValueSold            Float?

  userId                    String?     @unique
  usuario                   Usuario?    @relation(fields: [userId], references: [id])

  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt

  leiloes                   Leilao[]
}

// ======================================
// Modelos de Estrutura Judicial
// ======================================

model Tribunal {
  id                String      @id @default(uuid())
  name              String      @unique
  slug              String      @unique
  stateUf           String
  website           String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  comarcas          Comarca[]
  processos         ProcessoJudicial[]
}

model Comarca {
  id                String      @id @default(uuid())
  name              String
  slug              String      @unique
  zipCode           String?
  
  courtId           String
  tribunal          Tribunal    @relation(fields: [courtId], references: [id])
  
  stateId           String
  estado            Estado      @relation(fields: [stateId], references: [id])
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  varas             Vara[]
  processos         ProcessoJudicial[]
}

model Vara {
  id                String      @id @default(uuid())
  name              String
  slug              String      @unique
  contactName       String?
  phone             String?
  email             String?

  districtId        String
  comarca           Comarca     @relation(fields: [districtId], references: [id])

  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  processos         ProcessoJudicial[]
  vendedor          Vendedor?
}

model ProcessoJudicial {
  id                String      @id @default(uuid())
  publicId          String      @unique
  processNumber     String      @unique
  isElectronic      Boolean     @default(true)
  
  courtId           String
  tribunal          Tribunal    @relation(fields: [courtId], references: [id])

  districtId        String
  comarca           Comarca     @relation(fields: [districtId], references: [id])
  
  branchId          String
  vara              Vara        @relation(fields: [branchId], references: [id])
  
  sellerId          String?
  vendedor          Vendedor?   @relation(fields: [sellerId], references: [id])

  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  leilao            Leilao?
  bens              Bem[]
  partes            ParteProcesso[]
}

model ParteProcesso {
  id                String      @id @default(uuid())
  name              String
  documentNumber    String?
  partyType         String
  
  processId         String
  processoJudicial  ProcessoJudicial @relation(fields: [processId], references: [id], onDelete: Cascade)
  
  @@unique([processId, name, partyType])
}


// ======================================
// Modelos de Localização
// ======================================

model Estado {
  id        String      @id @default(uuid())
  name      String      @unique
  uf        String      @unique
  slug      String      @unique
  cityCount Int?

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  lotes     Lote[]
  comarcas  Comarca[]
}

model Cidade {
  id        String      @id @default(uuid())
  name      String
  slug      String
  stateId   String
  stateUf   String
  ibgeCode  String?
  lotCount  Int?
  
  estado    Estado      @relation(fields: [stateId], references: [id])
  
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  lotes     Lote[]
  
  @@unique([name, stateId])
}


// ======================================
// Modelos de Conteúdo e Sistema
// ======================================

model VendaDireta {
  id                  String      @id @default(uuid())
  publicId            String      @unique
  title               String
  description         String      @db.Text
  offerType           String
  status              String      @default("PENDENTE_APROVACAO")
  price               Float?
  minimumOfferPrice   Float?
  locationCity        String?
  locationState       String?
  imageUrl            String?
  dataAiHint          String?
  dataAiHintSellerLogo String?
  galleryImageUrls    Json?
  itemsIncluded       Json?
  tags                Json?
  views               Int?        @default(0)
  proposalsCount      Int?        @default(0)
  expiresAt           DateTime?
  
  sellerId            String
  vendedor            Vendedor    @relation(fields: [sellerId], references: [id])
  
  sellerLogoUrl       String?
  
  latitude            Float?
  longitude           Float?
  mapAddress          String?
  mapEmbedUrl         String?
  mapStaticImageUrl   String?
  
  categoryId          String?
  categoria           CategoriaLote? @relation(fields: [categoryId], references: [id])

  imageMediaId        String?
  mediaItem           MediaItem?  @relation(fields: [imageMediaId], references: [id], onDelete: SetNull)

  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model MediaItem {
  id              String      @id @default(uuid())
  fileName        String
  storagePath     String?
  title           String?
  altText         String?
  caption         String?
  description     String?
  mimeType        String
  sizeBytes       Int
  dimensions      Json?
  urlOriginal     String
  urlThumbnail    String?
  urlMedium       String?
  urlLarge        String?
  dataAiHint      String?
  uploadedBy      String?

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  lotes           Lote[]      @relation("MediaItemToLot")
  bens            Bem[]       @relation("MediaItemToBem")
  ofertasVenda    VendaDireta[]
}

model Notificacao {
  id        String    @id @default(uuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())

  usuario   Usuario   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PostBlog {
  id             String    @id @default(uuid())
  title          String
  slug           String    @unique
  content        String    @db.Text
  authorId       String
  authorName     String
  imageUrl       String?
  publishedAt    DateTime?
  isPublished    Boolean   @default(false)
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  categoryId     String?
  categoria      CategoriaLote? @relation(fields: [categoryId], references: [id])
}

model MensagemContato {
  id        String    @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String    @db.Text
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())
}

model Avaliacao {
  id                String    @id @default(uuid())
  rating            Int
  comment           String?   @db.Text
  
  lotId             String
  lote              Lote      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  
  auctionId         String
  leilao            Leilao    @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  
  userId            String
  usuario           Usuario   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  userDisplayName   String
  
  createdAt         DateTime  @default(now())
}

model PerguntaLote {
  id                        String    @id @default(uuid())
  questionText              String    @db.Text
  answerText                String?   @db.Text
  isPublic                  Boolean   @default(true)
  
  lotId                     String
  lote                      Lote      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  
  auctionId                 String
  leilao                    Leilao    @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  
  userId                    String
  usuario                   Usuario   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  userDisplayName           String
  
  answeredAt                DateTime?
  answeredByUserId          String?
  answeredByUserDisplayName String?
  
  createdAt                 DateTime  @default(now())
}

model ConfiguracoesPlataforma {
  id                        String      @id @default("global")
  siteTitle                 String
  siteTagline               String?
  galleryImageBasePath      String?
  storageProvider           String?
  firebaseStorageBucket     String?
  activeThemeName           String?
  temas                     String?     @db.Text
  platformPublicIdMasks     Json?
  homepageSections          Json?
  mentalTriggerSettings     Json?
  sectionBadgeVisibility    Json?
  mapSettings               Json?
  biddingSettings           Json?
  variableIncrementTable    String?     @db.Text
  searchPaginationType      String?
  searchItemsPerPage        Int?
  searchLoadMoreCount       Int?
  defaultListItemsPerPage   Int?
  showCountdownOnLotDetail  Boolean?
  showCountdownOnCards      Boolean?
  showRelatedLotsOnLotDetail Boolean?
  relatedLotsCount          Int?

  updatedAt                 DateTime    @updatedAt
}

// ======================================
// ENUMS
// ======================================

enum UserHabilitationStatus {
  PENDENTE_DOCUMENTOS
  PENDENTE_ANALYSIS
  HABILITADO
  REJEITADO_DOCUMENTOS
  BLOQUEADO
}

enum UserDocumentStatus {
  NAO_ENVIADO
  ENVIADO
  APROVADO
  REJEITADO
  PENDENTE_ANALYSIS
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum DirectSaleOfferStatus {
  ATIVA
  VENDIDA
  EXPIRADA
  PENDENTE_APROVACAO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum DocumentTemplateType {
  TERMO_ARREMATACAO
  LAUDO_AVALIACAO
  CERTIFICADO_LEILAO
}

```
