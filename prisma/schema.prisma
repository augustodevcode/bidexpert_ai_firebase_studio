// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ===============================================
//                ENUMS
// ===============================================

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum AssetStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

// ===============================================
//            MODELS
// ===============================================

model Tenant {
  id        String   @id @default(cuid())
  name      String
  subdomain String   @unique
  domain    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users    UsersOnTenants[]
  auctions Auction[]
  lots     Lot[]
  bens     Asset[]
  sellers  Seller[]
  auctioneers Auctioneer[]
  judicialProcesses JudicialProcess[]
  bids     Bid[]
  platformSettings PlatformSettings?
  
  @@index([subdomain])
}

model User {
  id                  String   @id @default(cuid())
  publicId            String?  @unique
  fullName            String?
  email               String   @unique
  password            String
  avatarUrl           String?
  dataAiHint          String?
  cpf                 String?  @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  accountType         AccountType @default(PHYSICAL)
  razaoSocial         String?
  cnpj                String?  @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  optInMarketing      Boolean     @default(false)
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  
  roles     UsersOnRoles[]
  tenants   UsersOnTenants[]
  bids      Bid[]
  wins      UserWin[]
  maxBids   UserLotMaxBid[]
  documents UserDocument[]
  questions LotQuestion[]
  reviews   Review[]
  notifications Notification[]
  habilitations AuctionHabilitation[]
  seller    Seller? // Relação 1-1 opcional
  auctioneer Auctioneer? // Relação 1-1 opcional
}

model UsersOnRoles {
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model UsersOnTenants {
  userId     String
  tenantId   String
  assignedAt DateTime @default(now())
  assignedBy String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@id([userId, tenantId])
}

model Role {
  id             String         @id @default(cuid())
  name           String         @unique
  nameNormalized String         @unique
  description    String?
  permissions    String[]
  users          UsersOnRoles[]
}

model Seller {
  id             String   @id @default(cuid())
  publicId       String   @unique
  slug           String   @unique
  name           String
  description    String?  @db.Text
  email          String?
  phone          String?
  website        String?
  logoUrl        String?
  dataAiHintLogo String?
  address        String?
  city           String?
  state          String?
  zipCode        String?
  latitude       Decimal? @db.Decimal(10, 8)
  longitude      Decimal? @db.Decimal(11, 8)
  contactName    String?
  isJudicial     Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String
  user     User?  @relation(fields: [userId], references: [id])
  userId   String?  @unique

  judicialBranch    JudicialBranch? @relation(fields: [judicialBranchId], references: [id])
  judicialBranchId  String? @unique
  judicialDistrict  JudicialDistrict? @relation(fields: [judicialDistrictId], references: [id])
  judicialDistrictId String?
  court             Court? @relation(fields: [courtId], references: [id])
  courtId           String?

  auctions    Auction[]
  lots        Lot[]
  assets      Asset[]
  judicialProcesses JudicialProcess[]
  directSaleOffers DirectSaleOffer[]
}

model Auctioneer {
  id                  String     @id @default(cuid())
  publicId            String     @unique
  slug                String     @unique
  name                String
  description         String?    @db.Text
  email               String?    @unique
  phone               String?
  website             String?
  logoUrl             String?
  dataAiHintLogo      String?
  registrationNumber  String?
  address             String?
  city                String?
  state               String?
  zipCode             String?
  latitude            Decimal?   @db.Decimal(10, 8)
  longitude           Decimal?   @db.Decimal(11, 8)
  contactName         String?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String
  user     User?  @relation(fields: [userId], references: [id])
  userId   String?  @unique
  
  auctions Auction[]
  lots     Lot[]
}

model Auction {
  id              String      @id @default(cuid())
  publicId        String      @unique
  slug            String      @unique
  title           String
  description     String?     @db.Text
  status          AuctionStatus @default(RASCUNHO)
  auctionDate     DateTime
  endDate         DateTime?
  initialOffer    Decimal?    @db.Decimal(12, 2)
  isFeaturedOnMarketplace Boolean @default(false)
  marketplaceAnnouncementTitle String?
  visits          Int?        @default(0)
  imageUrl        String?
  dataAiHint      String?
  documentsUrl    String?
  evaluationReportUrl String?
  auctionCertificateUrl String?
  onlineUrl       String?
  address         String?
  city            String?
  state           String?
  zipCode         String?
  latitude        Decimal?    @db.Decimal(10, 8)
  longitude       Decimal?    @db.Decimal(11, 8)
  sellingBranch   String?
  auctionType     AuctionType @default(EXTRAJUDICIAL)
  auctionMethod   AuctionMethod @default(STANDARD)
  participation   AuctionParticipation @default(ONLINE)
  automaticBiddingEnabled Boolean @default(false)
  softCloseEnabled Boolean @default(false)
  softCloseMinutes Int?
  allowInstallmentBids Boolean @default(false)
  silentBiddingEnabled Boolean @default(false)
  allowMultipleBidsPerUser Boolean @default(true)
  estimatedRevenue Decimal? @db.Decimal(12, 2)
  achievedRevenue  Decimal? @db.Decimal(12, 2)
  decrementAmount   Decimal? @db.Decimal(12, 2)
  decrementIntervalSeconds Int?
  floorPrice        Decimal? @db.Decimal(12, 2)
  additionalTriggers Json?

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  tenant          Tenant        @relation(fields: [tenantId], references: [id])
  tenantId        String
  auctioneer      Auctioneer    @relation(fields: [auctioneerId], references: [id])
  auctioneerId    String
  seller          Seller        @relation(fields: [sellerId], references: [id])
  sellerId        String
  category        LotCategory?  @relation(fields: [categoryId], references: [id])
  categoryId      String?
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId String?
  court           Court?        @relation(fields: [courtId], references: [id])
  courtId         String?
  judicialDistrict JudicialDistrict? @relation(fields: [judicialDistrictId], references: [id])
  judicialDistrictId String?
  judicialBranch   JudicialBranch?   @relation(fields: [judicialBranchId], references: [id])
  judicialBranchId   String?
  
  lots            Lot[]
  bids            Bid[]
  notifications   Notification[]
  stages          AuctionStage[]
  habilitations    AuctionHabilitation[]
  lotPrices       LotStagePrice[]
}

model AuctionStage {
  id              String   @id @default(cuid())
  name            String
  startDate       DateTime
  endDate         DateTime
  initialPrice    Decimal? @db.Decimal(12, 2)

  auction   Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId String
  
  lotPrices LotStagePrice[]

  @@index([auctionId])
}

model Lot {
  id           String      @id @default(cuid())
  publicId     String      @unique
  slug         String      @unique
  number       String?
  title        String
  description  String?     @db.Text
  price        Decimal     @db.Decimal(12, 2)
  status       LotStatus   @default(EM_BREVE)
  endDate      DateTime?
  initialPrice Decimal?    @db.Decimal(12, 2)
  secondInitialPrice Decimal? @db.Decimal(12, 2)
  bidIncrementStep Decimal? @db.Decimal(12, 2)
  evaluationValue  Decimal? @db.Decimal(12, 2)
  bidsCount        Int?      @default(0)
  views            Int?      @default(0)
  isFeatured       Boolean   @default(false)
  isExclusive      Boolean   @default(false)
  allowInstallmentBids Boolean @default(false)
  additionalTriggers Json?
  properties     String?     @db.Text
  imageUrl          String?
  imageMediaId      String?
  dataAiHint        String?
  winningBidTermUrl String?
  
  // Localização
  street       String?
  lotNumber    String?
  complement   String?
  neighborhood String?
  cityName     String?
  stateUf      String?
  zipCode      String?
  latitude     Decimal? @db.Decimal(10, 8)
  longitude    Decimal? @db.Decimal(11, 8)
  mapAddress   String?
  
  // Informações de Veículo (Exemplo de campos denormalizados para busca)
  make           String?
  model          String?
  year           Int?
  odometer       Int?
  transmissionType String?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  tenant       Tenant    @relation(fields: [tenantId], references: [id])
  tenantId     String
  auction      Auction   @relation(fields: [auctionId], references: [id])
  auctionId    String
  lotPrices    LotStagePrice[]
  category     LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId   String?
  subcategory  Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId String?
  seller       Seller?   @relation(fields: [sellerId], references: [id])
  sellerId     String?
  auctioneer   Auctioneer? @relation(fields: [auctioneerId], references: [id])
  auctioneerId String?
  city         City? @relation(fields: [cityId], references: [id])
  cityId       String?
  state        State? @relation(fields: [stateId], references: [id])
  stateId      String?

  assets         AssetsOnLots[]
  bids           Bid[]
  wins           UserWin[]
  questions      LotQuestion[]
  reviews        Review[]
  maxBids        UserLotMaxBid[]
  notifications  Notification[]
  
  winner     User? @relation("WonLots", fields: [winnerId], references: [id])
  winnerId   String?
  
  // Self-relation for relisting
  originalLot    Lot? @relation("RelistHistory", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  originalLotId  String?
  relistedLots   Lot[] @relation("RelistHistory")
  isRelisted     Boolean @default(false)
  relistCount    Int @default(0)

  @@index([auctionId])
  @@index([sellerId])
  @@index([categoryId])
}

model LotStagePrice {
  id              String   @id @default(cuid())
  lot             Lot      @relation(fields: [lotId], references: [id])
  lotId           String
  stage           AuctionStage @relation(fields: [stageId], references: [id])
  stageId         String
  initialBid      Decimal? @db.Decimal(12, 2)
  bidIncrement    Decimal? @db.Decimal(12, 2)

  @@unique([lotId, stageId])
}

model Asset {
  id                 String   @id @default(cuid())
  publicId           String   @unique
  title              String
  description        String?  @db.Text
  status             AssetStatus @default(CADASTRO)
  evaluationValue    Decimal? @db.Decimal(12, 2)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  properties         String?  @db.Text
  
  // Localização
  street       String?
  number       String?
  complement   String?
  neighborhood String?
  locationCity String? // Denormalized for simpler queries
  locationState String? // Denormalized for simpler queries
  zipCode      String?
  latitude     Decimal? @db.Decimal(10, 8)
  longitude    Decimal? @db.Decimal(11, 8)

  tenant            Tenant        @relation(fields: [tenantId], references: [id])
  tenantId          String
  seller            Seller?       @relation(fields: [sellerId], references: [id])
  sellerId          String?
  category          LotCategory?  @relation(fields: [categoryId], references: [id])
  categoryId        String?
  subcategory       Subcategory?  @relation(fields: [subcategoryId], references: [id])
  subcategoryId     String?
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId String?
  city              City?         @relation(fields: [cityId], references: [id])
  cityId            String?
  state             State?        @relation(fields: [stateId], references: [id])
  stateId           String?
  
  lots              AssetsOnLots[]
  
  // Media fields
  imageUrl          String?
  imageMediaId      String?
  dataAiHint        String?
}

model AssetsOnLots {
  assetId     String
  lotId       String
  assignedAt  DateTime @default(now())
  assignedBy  String

  asset Asset @relation(fields: [assetId], references: [id])
  lot   Lot   @relation(fields: [lotId], references: [id])

  @@id([assetId, lotId])
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  link      String?

  user      User     @relation(fields: [userId], references: [id])
  userId    String
  lot       Lot?     @relation(fields: [lotId], references: [id])
  lotId     String?
  auction   Auction? @relation(fields: [auctionId], references: [id])
  auctionId String?
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  tenantId  String
}

model AuctionHabilitation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  auction   Auction  @relation(fields: [auctionId], references: [id])
  auctionId String

  @@unique([userId, auctionId])
}
