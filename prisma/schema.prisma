// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// Representa um estado da federação.
model State {
  id              String             @id @default(uuid())
  name            String
  uf              String             @unique
  slug            String             @unique
  cities          City[]
  courts          Court[]
  judicialDistricts JudicialDistrict[]
  auctions        Auction[]
  lots            Lot[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@map("states")
}

/// Representa uma cidade.
model City {
  id        String   @id @default(uuid())
  name      String
  slug      String?
  state     State    @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId   String
  stateUf   String?
  ibgeCode  String?  @unique
  lotCount  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  auctions  Auction[]
  lots      Lot[]

  @@map("cities")
}

/// Representa um tribunal.
model Court {
  id                String             @id @default(uuid())
  name              String             @unique
  slug              String             @unique
  stateUf           String?
  website           String?
  state             State?             @relation(fields: [stateId], references: [id])
  stateId           String?
  auctions          Auction[]
  judicialProcesses JudicialProcess[]
  judicialDistricts JudicialDistrict[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@map("courts")
}

/// Representa uma comarca judicial.
model JudicialDistrict {
  id                String             @id @default(uuid())
  name              String
  slug              String             @unique
  court             Court?             @relation(fields: [courtId], references: [id])
  courtId           String?
  state             State?             @relation(fields: [stateId], references: [id])
  stateId           String?
  zipCode           String?
  branches          JudicialBranch[]
  auctions          Auction[]
  judicialProcesses JudicialProcess[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@map("judicialDistricts")
}

/// Representa uma vara judicial.
model JudicialBranch {
  id                String             @id @default(uuid())
  name              String
  slug              String             @unique
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  auctions          Auction[]
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@map("judicialBranches")
}

/// Entidade para armazenar os tipos de documentos que podem ser solicitados.
model DocumentType {
  id          String         @id @default(uuid())
  name        String
  description String?        @db.Text
  isRequired  Boolean        @default(true)
  /// Comma-separated: PHYSICAL,LEGAL,ALL,PROCESS
  appliesTo   String?
  userDocs    UserDocument[]

  @@map("documentTypes")
}

/// Entidade para armazenar os templates de documentos.
model DocumentTemplate {
  id      String @id @default(uuid())
  name    String
  type    String // e.g., WINNING_BID_TERM, EVALUATION_REPORT
  content String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("documentTemplates")
}

// ===================================================
// Modelos Principais
// ===================================================
model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  password            String?
  fullName            String?
  roleId              String?
  sellerId            String?
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType          @default(PHYSICAL)
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?
  roles               UsersOnRoles[]
  seller              Seller?
  auctioneer          Auctioneer?
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  maxBids             UserLotMaxBid[]
  notifications       Notification[]
  questions           LotQuestion[]
  wonLots             Lot[]                @relation("LotWinner")
  uploadedMedia       MediaItem[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  // Detalhes PF
  cpf                 String?              @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?

  // Detalhes PJ
  razaoSocial         String?
  cnpj                String?              @unique
  inscricaoEstadual   String?
  website             String?

  // Endereço (comum)
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  optInMarketing      Boolean              @default(false)

  // Campos para responsável de PJ (armazenados no mesmo registro)
  responsibleName     String?
  responsibleCpf      String?

  @@map("users")
}

model Role {
  id             String         @id @default(uuid())
  name           String
  nameNormalized String         @unique
  description    String?        @db.Text
  permissions    Json
  users          UsersOnRoles[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@map("roles")
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model LotCategory {
  id                   String            @id @default(uuid())
  name                 String
  slug                 String            @unique
  description          String?           @db.Text
  hasSubcategories     Boolean
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  subcategories        Subcategory[]
  lots                 Lot[]
  bens                 Bem[]
  auctions             Auction[]
  directSaleOffers     DirectSaleOffer[]
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  @@map("lotCategories")
}

model Subcategory {
  id               String      @id @default(uuid())
  name             String
  slug             String?
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  parentCategoryId String
  description      String?     @db.Text
  displayOrder     Int         @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  lots             Lot[]
  bens             Bem[]

  @@map("subcategories")
}

model Bem {
  id        String  @id @default(uuid())
  publicId  String  @unique @default(uuid())
  title     String
  description String? @db.Text
  status    String  @default("DISPONIVEL")

  categoryId         String?
  category           LotCategory? @relation(fields: [categoryId], references: [id])
  subcategoryId      String?
  subcategory        Subcategory? @relation(fields: [subcategoryId], references: [id])
  
  judicialProcessId  String?
  judicialProcess    JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  
  sellerId           String?
  seller             Seller?          @relation(fields: [sellerId], references: [id])

  evaluationValue    Decimal?         @db.Decimal(15, 2)
  
  imageUrl           String?
  imageMediaId       String?
  galleryImageUrls   Json?
  mediaItemIds       Json?
  dataAiHint         String?

  locationCity       String?
  locationState      String?
  address            String?
  latitude           Decimal?         @db.Decimal(10, 8)
  longitude          Decimal?         @db.Decimal(11, 8)
  
  lots               LotBens[]

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  // ===================================================
  // Campos Específicos por Categoria (Exemplo)
  // ===================================================
  
  // Veículos
  plate String?
  make String?
  model String?
  version String?
  year Int?
  modelYear Int?
  mileage Int?
  color String?
  fuelType String?
  transmissionType String?
  bodyType String?
  vin String?
  renavam String?
  enginePower String?
  numberOfDoors Int?
  vehicleOptions String?
  detranStatus String?
  debts String?
  runningCondition String?
  bodyCondition String?
  tiresCondition String?
  hasKey Boolean?

  // Imóveis
  propertyRegistrationNumber String?
  iptuNumber String?
  isOccupied Boolean?
  area Decimal? @db.Decimal(15, 2)
  totalArea Decimal? @db.Decimal(15, 2)
  builtArea Decimal? @db.Decimal(15, 2)
  bedrooms Int?
  suites Int?
  bathrooms Int?
  parkingSpaces Int?
  constructionType String?
  finishes String? @db.Text
  infrastructure String? @db.Text
  condoDetails String? @db.Text
  improvements String? @db.Text
  topography String?
  liensAndEncumbrances String? @db.Text
  propertyDebts String? @db.Text
  unregisteredRecords String? @db.Text
  hasHabiteSe Boolean?
  zoningRestrictions String?
  
  // Eletrônicos
  brand String?
  serialNumber String?
  itemCondition String?
  specifications String? @db.Text
  includedAccessories String? @db.Text
  batteryCondition String?
  hasInvoice Boolean?
  hasWarranty Boolean?
  repairHistory String? @db.Text
  
  // Eletrodomésticos
  applianceCapacity String?
  voltage String?
  applianceType String?
  additionalFunctions String?
  
  // Máquinas e Equipamentos
  hoursUsed Int?
  engineType String?
  capacityOrPower String?
  maintenanceHistory String? @db.Text
  installationLocation String?
  compliesWithNR String?
  operatingLicenses String?
  
  // Semoventes (Gado, etc.)
  breed String?
  age String?
  sex String?
  weight String?
  individualId String?
  purpose String?
  sanitaryCondition String? @db.Text
  vaccinationStatus String? @db.Text
  lineage String? @db.Text
  isPregnant Boolean?
  specialSkills String? @db.Text
  gtaDocument String?
  breedRegistryDocument String?

  @@map("bens")
}

model DirectSaleOffer {
  id                 String      @id @default(uuid())
  publicId           String      @unique
  title              String
  description        String?     @db.Text
  offerType          DirectSaleOfferType
  price              Decimal?    @db.Decimal(15, 2)
  minimumOfferPrice  Decimal?    @db.Decimal(15, 2)
  status             DirectSaleOfferStatus @default(ACTIVE)
  category           LotCategory @relation(fields: [categoryId], references: [id])
  categoryId         String
  seller             Seller      @relation(fields: [sellerId], references: [id])
  sellerId           String
  sellerName         String?
  sellerLogoUrl      String?
  dataAiHintSellerLogo String?
  locationCity       String?
  locationState      String?
  imageUrl           String?
  imageMediaId       String?
  dataAiHint         String?
  galleryImageUrls   Json?
  mediaItemIds       Json?
  itemsIncluded      Json?
  views              Int?        @default(0)
  expiresAt          DateTime?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  @@map("directSaleOffers")
}

model Auction {
  id                             String        @id @default(uuid())
  publicId                       String?       @unique
  slug                           String?       @unique
  title                          String
  description                    String?       @db.Text
  status                         AuctionStatus @default(RASCUNHO)

  // Settings
  auctionType                    AuctionType?
  auctionMethod                  AuctionMethod?
  participation                  AuctionParticipation?

  // Location fields
  onlineUrl                      String?
  address                        String?
  city                           City?                 @relation(fields: [cityId], references: [id])
  cityId                         String?
  state                          State?                @relation(fields: [stateId], references: [id])
  stateId                        String?
  zipCode                        String?
  
  // Relations
  lots                           Lot[]
  auctioneerId                   String?
  auctioneer                     Auctioneer?   @relation(fields: [auctioneerId], references: [id])
  sellerId                       String?
  seller                         Seller?       @relation(fields: [sellerId], references: [id])
  categoryId                     String?
  category                       LotCategory?  @relation(fields: [categoryId], references: [id])
  
  // Judicial Info (if applicable)
  judicialProcessId              String?
  judicialProcess                JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  courtId                        String?
  court                          Court?                 @relation(fields: [courtId], references: [id], onDelete: SetNull)
  districtId                     String?
  district                       JudicialDistrict?      @relation(fields: [districtId], references: [id], onDelete: SetNull)
  branchId                       String?
  branch                         JudicialBranch?        @relation(fields: [branchId], references: [id], onDelete: SetNull)
  
  // Timeline
  auctionStages                  AuctionStage[]
  auctionDate                    DateTime?
  endDate                        DateTime?

  // Media
  imageUrl                       String?
  imageMediaId                   String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?

  // Stats & Flags
  visits                         Int?          @default(0)
  isFavorite                     Boolean       @default(false)
  dataAiHint                     String?
  initialOffer                   Decimal?      @db.Decimal(15, 2)
  estimatedRevenue               Decimal?      @db.Decimal(15, 2)
  achievedRevenue                Decimal?      @db.Decimal(15, 2)
  totalHabilitatedUsers          Int?          @default(0)
  
  // Advanced Features
  additionalTriggers             Json?
  decrementAmount                Decimal?      @db.Decimal(10, 2)
  decrementIntervalSeconds       Int?
  floorPrice                     Decimal?      @db.Decimal(15, 2)
  automaticBiddingEnabled        Boolean       @default(false)
  silentBiddingEnabled           Boolean       @default(false)
  allowMultipleBidsPerUser       Boolean       @default(true)
  allowInstallmentBids           Boolean       @default(true)
  softCloseEnabled               Boolean       @default(false)
  softCloseMinutes               Int?          @default(2)
  
  isFeaturedOnMarketplace        Boolean       @default(false)
  marketplaceAnnouncementTitle   String?
  sellingBranch                  String?
  questions                      LotQuestion[]
  habilitations                  AuctionHabilitation[]

  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt

  @@map("auctions")
}

model AuctionStage {
  id              String    @id @default(uuid())
  auction         Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId       String
  name            String
  startDate       DateTime
  endDate         DateTime
  bidIncrement    Decimal?  @db.Decimal(10, 2)
  /// Valor de avaliação específico para esta praça
  evaluationValue Decimal?  @db.Decimal(15, 2)
  initialPrice    Decimal?  @db.Decimal(15, 2)

  @@map("auctionStages")
}


model Lot {
  id                           String       @id @default(uuid())
  publicId                     String?      @unique
  auction                      Auction      @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                    String
  slug                         String?
  number                       String?
  title                        String
  description                  String?      @db.Text
  price                        Decimal      @db.Decimal(15, 2)
  initialPrice                 Decimal?     @db.Decimal(15, 2)
  secondInitialPrice           Decimal?     @db.Decimal(15, 2)
  bidIncrementStep             Decimal?     @db.Decimal(10, 2)
  status                       LotStatus    @default(EM_BREVE)
  bidsCount                    Int?         @default(0)
  views                        Int?         @default(0)
  isFeatured                   Boolean?     @default(false)
  isExclusive                  Boolean?     @default(false)
  discountPercentage           Int?
  additionalTriggers           Json?
  imageUrl                     String?
  imageMediaId                 String?
  galleryImageUrls             Json?
  mediaItemIds                 Json?
  /// ID do Bem de onde as mídias são herdadas
  inheritedMediaFromBemId      String?
  type                         String
  category                     LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId                   String?
  subcategory                  Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId                String?
  auctionName                  String?
  seller                       Seller?      @relation(fields: [sellerId], references: [id])
  sellerId                     String?
  sellerName                   String?
  auctioneer                   Auctioneer?  @relation(fields: [auctioneerId], references: [id])
  auctioneerId                 String?
  city                         City?        @relation(fields: [cityId], references: [id])
  cityId                       String?
  state                        State?        @relation(fields: [stateId], references: [id])
  stateId                      String?
  cityName                     String?
  stateUf                      String?
  latitude                     Decimal?     @db.Decimal(10, 8)
  longitude                    Decimal?     @db.Decimal(11, 8)
  mapAddress                   String?
  mapEmbedUrl                  String?
  mapStaticImageUrl            String?
  endDate                      DateTime?
  auctionDate                  DateTime?
  lotSpecificAuctionDate       DateTime?
  secondAuctionDate            DateTime?
  condition                    String?
  dataAiHint                   String?
  winner                       User?        @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId                     String?      @unique
  winningBidTermUrl            String?
  allowInstallmentBids         Boolean?     @default(false)
  bens                         LotBens[]
  bids                         Bid[]
  maxBids                      UserLotMaxBid[]
  reviews                      Review[]
  questions                    LotQuestion[]
  
  // Vehicle Details
  make                         String?
  model                        String?
  version                      String?
  year                         Int?
  
  createdAt                    DateTime     @default(now())
  updatedAt                    DateTime     @updatedAt

  @@map("lots")
}

model LotBens {
  lot     Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId   String
  bem     Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId   String
  addedAt DateTime @default(now())

  @@id([lotId, bemId])
}


model Bid {
  id            String   @id @default(uuid())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId      String
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())

  @@map("bids")
}

model UserWin {
  id               String        @id @default(uuid())
  lot              Lot           @relation(fields: [lotId], references: [id])
  lotId            String        @unique
  user             User          @relation(fields: [userId], references: [id])
  userId           String
  winningBidAmount Decimal       @db.Decimal(15, 2)
  winDate          DateTime
  paymentStatus    PaymentStatus
  invoiceUrl       String?

  @@map("userWins")
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
  @@map("userLotMaxBids")
}


model Review {
  id              String   @id @default(uuid())
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId           String
  auctionId       String
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  userDisplayName String
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())

  @@map("reviews")
}

model LotQuestion {
  id                        String   @id @default(uuid())
  lot                       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId                     String
  auction                   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                 String
  user                      User     @relation(fields: [userId], references: [id])
  userId                    String
  userDisplayName           String
  questionText              String   @db.Text
  isPublic                  Boolean  @default(true)
  answerText                String?  @db.Text
  answeredByUserId          String?
  answeredByUserDisplayName String?
  answeredAt                DateTime?
  createdAt                 DateTime @default(now())

  @@map("lotQuestions")
}


model UserDocument {
  id              String       @id @default(uuid())
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  documentType    DocumentType @relation(fields: [documentTypeId], references: [id])
  documentTypeId  String
  status          UserDocumentStatus @default(NOT_SENT)
  fileUrl         String
  fileName        String?
  rejectionReason String?      @db.Text
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@unique([userId, documentTypeId])
  @@map("userDocuments")
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("notifications")
}

model MediaItem {
  id                 String          @id @default(uuid())
  fileName           String          @unique
  storagePath        String
  title              String?
  altText            String?
  caption            String?
  description        String?         @db.Text
  mimeType           String
  sizeBytes          Int?
  urlOriginal        String
  urlThumbnail       String?
  urlMedium          String?
  urlLarge           String?
  linkedLotIds       Json?
  dataAiHint         String?
  uploadedBy         User            @relation(fields: [uploadedByUserId], references: [id])
  uploadedByUserId   String
  judicialProcess    JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId  String?
  uploadedAt         DateTime        @default(now())

  @@map("mediaItems")
}


model ContactMessage {
  id      String   @id @default(uuid())
  name    String
  email   String
  subject String
  message String   @db.Text
  isRead  Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("contactMessages")
}

// ===============================================
// Enums
// ===============================================
enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}
