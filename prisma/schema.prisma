// datasource e generator... (conteúdo existente)

// Este é o arquivo principal do schema Prisma.
// Para manter a organização, os modelos são definidos em arquivos separados
// dentro da pasta /prisma/models e são concatenados aqui durante o build.

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =============
//  Global Models
// =============

model Tenant {
  id        BigInt   @id @default(autoincrement())
  name      String
  subdomain String   @unique
  domain    String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users      UsersOnTenants[]
  auctions   Auction[]
  lots       Lot[]
  sellers    Seller[]
  auctioneers Auctioneer[]
  assets     Asset[]
  bids       Bid[]
  notifications Notification[]
  subscribers Subscriber[]
  reports    Report[]
  platformSettings PlatformSettings?
  judicialProcesses JudicialProcess[]
}

model UsersOnTenants {
  user       User     @relation(fields: [userId], references: [id])
  userId     BigInt
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  tenantId   BigInt
  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([userId, tenantId])
  @@index([tenantId])
}

model User {
  id               BigInt      @id @default(autoincrement())
  email            String      @unique
  password         String?
  fullName         String?
  cpf              String?     @unique
  rgNumber         String?
  rgIssuer         String?
  rgIssueDate      DateTime?
  dateOfBirth      DateTime?
  cellPhone        String?
  homePhone        String?
  gender           String?
  profession       String?
  nationality      String?
  maritalStatus    String?
  propertyRegime   String?
  spouseName       String?
  spouseCpf        String?
  zipCode          String?
  street           String?
  number           String?
  complement       String?
  neighborhood     String?
  city             String?
  state            String?
  avatarUrl        String?
  dataAiHint       String?
  habilitationStatus UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType      AccountType @default(PHYSICAL)
  badges           Json?
  razaoSocial      String?
  cnpj             String?      @unique
  inscricaoEstadual String?
  website          String?
  responsibleName  String?
  responsibleCpf   String?
  optInMarketing   Boolean?     @default(false)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  roles            UsersOnRoles[]
  tenants          UsersOnTenants[]
  bids             Bid[]
  wins             UserWin[]
  maxBids          UserLotMaxBid[]
  documents        UserDocument[]
  questions        LotQuestion[]
  reviews          Review[]
  notifications    Notification[]
  sellerProfile    Seller?
  auctioneerProfile Auctioneer?
  uploadedMedia    MediaItem[]
  createdReports   Report[]
  lotsWon          Lot[] @relation("LotsWon")
  auctionHabilitations AuctionHabilitation[]
}


model Role {
  id             BigInt   @id @default(autoincrement())
  name           String   @unique
  nameNormalized String   @unique
  description    String?
  permissions    Json?
  users          UsersOnRoles[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     BigInt
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     BigInt
  assignedAt DateTime @default(now())
  assignedBy String
  
  @@id([userId, roleId])
  @@index([roleId])
}

model State {
  id      BigInt    @id @default(autoincrement())
  name    String
  uf      String @unique
  slug    String @unique
  cities  City[]
  auctions Auction[] @relation("AuctionState")
  lots     Lot[]     @relation("LotState")
  judicialDistricts JudicialDistrict[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model City {
  id      BigInt    @id @default(autoincrement())
  name    String
  state   State  @relation(fields: [stateId], references: [id])
  stateId BigInt
  ibgeCode String? @unique
  slug    String?
  lotCount Int?   @default(0)
  auctions Auction[] @relation("AuctionCity")
  lots     Lot[]     @relation("LotCity")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([name, stateId])
}

model LotCategory {
  id       BigInt    @id @default(autoincrement())
  slug     String @unique
  name     String @unique
  description String? @db.Text
  logoUrl String?
  logoMediaId BigInt?
  dataAiHintLogo String?
  coverImageUrl String?
  coverImageMediaId BigInt?
  dataAiHintCover String?
  megaMenuImageUrl String?
  megaMenuImageMediaId BigInt?
  dataAiHintMegaMenu String?
  hasSubcategories Boolean? @default(false)

  subcategories Subcategory[]
  lots          Lot[]
  assets        Asset[]
  auctions      Auction[]
  
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Subcategory {
  id              BigInt    @id @default(autoincrement())
  name            String
  slug            String
  description     String?
  parentCategory  LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  parentCategoryId BigInt
  displayOrder    Int @default(0)
  iconUrl         String?
  iconMediaId     BigInt?
  dataAiHintIcon  String?
  lots            Lot[]
  assets          Asset[]
  
  @@unique([name, parentCategoryId])
}

model VehicleMake {
  id       BigInt   @id @default(autoincrement())
  name     String   @unique
  slug     String   @unique
  models   VehicleModel[]
}

model VehicleModel {
  id       BigInt   @id @default(autoincrement())
  name     String
  slug     String
  make     VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)
  makeId   BigInt

  @@unique([makeId, name])
  @@index([slug])
}

model DocumentType {
  id          BigInt   @id @default(autoincrement())
  name        String   @unique
  description String?
  isRequired  Boolean  @default(true)
  appliesTo   String // e.g., "PHYSICAL,LEGAL"
  userDocs    UserDocument[]
}

model PasswordResetToken {
  id        BigInt   @id @default(autoincrement())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  @@unique([email, token])
}

// =============
//  Tenant-Specific Models
// =============

model Auction {
  id                      BigInt          @id @default(autoincrement())
  publicId                String?      @unique
  slug                    String?      @unique
  title                   String
  description             String?         @db.Text
  status                  AuctionStatus   @default(RASCUNHO)
  auctionDate             DateTime?
  endDate                 DateTime?
  totalLots               Int             @default(0)
  visits                  Int             @default(0)
  totalHabilitatedUsers   Int             @default(0)
  initialOffer            Decimal?        @db.Decimal(15, 2)
  auctionType             AuctionType?
  auctionMethod           AuctionMethod   @default(STANDARD)
  participation           AuctionParticipation @default(ONLINE)
  onlineUrl               String?         @db.VarChar(500)
  address                 String?
  zipCode                 String?         @db.VarChar(10)
  latitude                Decimal?        @db.Decimal(10, 8)
  longitude               Decimal?        @db.Decimal(11, 8)
  documentsUrl            String?         @db.VarChar(500)
  isFeaturedOnMarketplace Boolean         @default(false)
  softCloseEnabled        Boolean?        @default(false)
  softCloseMinutes        Int?
  achievedRevenue         Decimal?        @db.Decimal(15, 2)
  evaluationReportUrl     String?         @db.VarChar(500)
  auctionCertificateUrl   String?         @db.VarChar(500)
  floorPrice              Decimal?        @db.Decimal(15, 2)
  decrementAmount         Decimal?        @db.Decimal(10, 2)
  decrementIntervalSeconds Int?
  sellingBranch           String?
  additionalTriggers      Json?

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  tenantId         BigInt
  tenant           Tenant   @relation(fields: [tenantId], references: [id])
  
  auctioneerId     BigInt?
  auctioneer       Auctioneer? @relation(fields: [auctioneerId], references: [id])
  
  sellerId         BigInt?
  seller           Seller?  @relation(fields: [sellerId], references: [id])

  imageMediaId     BigInt?
  
  lots             Lot[]
  bids             Bid[]
  habilitations    AuctionHabilitation[]
  reviews          Review[]
  questions        LotQuestion[]

  isRelisted        Boolean         @default(false)
  relistCount       Int             @default(0)
  originalAuctionId BigInt?         @unique
  originalAuction   Auction?        @relation("RelistedAuction", fields: [originalAuctionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedAuctions  Auction[]       @relation("RelistedAuction")
  
  stages           AuctionStage[]
  city             City?           @relation("AuctionCity", fields: [cityId], references: [id])
  cityId           BigInt?
  state            State?          @relation("AuctionState", fields: [stateId], references: [id])
  stateId          BigInt?

  // Judicial
  judicialProcessId BigInt?
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  
  // Categorization
  categoryId       BigInt?
  category         LotCategory? @relation(fields: [categoryId], references: [id])
  
  // Many-to-many
  courts           Court[]           @relation("_AuctionToCourt")
  judicialDistricts JudicialDistrict[] @relation("_AuctionToJudicialDistrict")
  judicialBranches  JudicialBranch[]  @relation("_AuctionToJudicialBranch")

  lotStagePrices LotStagePrice[]
  notifications Notification[]

  @@index([auctioneerId])
  @@index([sellerId])
}

model AuctionStage {
  id              BigInt          @id @default(autoincrement())
  name            String
  startDate       DateTime
  endDate         DateTime
  auctionId       BigInt
  auction         Auction         @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  initialPrice    Decimal?        @db.Decimal(15, 2)
  lotStagePrices  LotStagePrice[]

  @@index([auctionId])
}

model Lot {
  id                BigInt      @id @default(autoincrement())
  publicId          String?     @unique
  auctionId         BigInt
  auction           Auction     @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  number            String?
  title             String
  description       String?     @db.Text
  slug              String?
  price             Decimal     @db.Decimal(15, 2)
  initialPrice      Decimal?    @db.Decimal(15, 2)
  secondInitialPrice Decimal?   @db.Decimal(15, 2)
  bidIncrementStep  Decimal?    @db.Decimal(10, 2)
  status            LotStatus   @default(EM_BREVE)
  bidsCount         Int?        @default(0)
  views             Int?        @default(0)
  isFeatured        Boolean?    @default(false)
  isExclusive       Boolean?    @default(false)
  discountPercentage Int?
  additionalTriggers Json?

  imageUrl          String?     @db.Text
  imageMediaId      BigInt?
  galleryImageUrls  Json?
  mediaItemIds      Json?
  stageDetails      Json?

  type              String      // Veículo, Imóvel, etc.
  condition         String?     // Novo, Usado, etc.
  dataAiHint        String?

  winnerId          BigInt?
  winner            User?       @relation("LotsWon", fields: [winnerId], references: [id])
  win               UserWin?
  winningBidTermUrl String?
  
  allowInstallmentBids Boolean? @default(false)
  installments      InstallmentPayment[] @relation("_InstallmentPaymentToLot")
  
  isRelisted        Boolean @default(false)
  relistCount       Int @default(0)
  original_lot_id   BigInt?      @unique
  originalLot       Lot?        @relation("RelistedLot", fields: [original_lot_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot       Lot?        @relation("RelistedLot")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  endDate DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate DateTime?
  
  categoryId       BigInt?
  category         LotCategory? @relation(fields: [categoryId], references: [id])
  subcategoryId    BigInt?
  subcategory      Subcategory? @relation(fields: [subcategoryId], references: [id])
  sellerId         BigInt?
  seller           Seller?      @relation(fields: [sellerId], references: [id])
  auctioneerId     BigInt?
  auctioneer       Auctioneer?  @relation(fields: [auctioneerId], references: [id])

  cityId           BigInt?
  city             City?        @relation("LotCity", fields: [cityId], references: [id])
  stateId          BigInt?
  state            State?       @relation("LotState", fields: [stateId], references: [id])
  
  // Denormalized for convenience
  cityName String?
  stateUf String?
  
  latitude         Decimal?
  longitude        Decimal?
  mapAddress       String?

  bids             Bid[]
  maxBids          UserLotMaxBid[]
  reviews          Review[]
  questions        LotQuestion[]

  assets           AssetsOnLots[]
  inheritedMediaFromAssetId BigInt?
  
  tenantId         BigInt
  tenant           Tenant @relation(fields: [tenantId], references: [id])

  judicialProcesses JudicialProcess[] @relation("_JudicialProcessToLot")

  stagePrices      LotStagePrice[]
  notifications    Notification[]

  @@unique([auctionId, number])
  @@index([auctionId])
  @@index([winnerId])
}

model LotStagePrice {
    id              BigInt   @id @default(autoincrement())
    lotId           BigInt
    lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
    auctionId       BigInt
    auction         Auction  @relation(fields: [auctionId], references: [id])
    auctionStageId  BigInt
    auctionStage    AuctionStage @relation(fields: [auctionStageId], references: [id], onDelete: Cascade)
    initialBid      Decimal?     @db.Decimal(15, 2)
    bidIncrement    Decimal?     @db.Decimal(10, 2)

    @@unique([lotId, auctionStageId])
    @@index([auctionId])
}


model Asset {
  id                      BigInt      @id @default(autoincrement())
  publicId                String      @unique
  title                   String
  description             String?     @db.Text
  status                  AssetStatus @default(DISPONIVEL)
  categoryId              BigInt?
  category                LotCategory? @relation(fields: [categoryId], references: [id])
  subcategoryId           BigInt?
  subcategory             Subcategory? @relation(fields: [subcategoryId], references: [id])
  judicialProcessId       BigInt?
  judicialProcess         JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  sellerId                BigInt?
  seller                  Seller?      @relation(fields: [sellerId], references: [id])
  evaluationValue         Decimal?    @db.Decimal(15, 2)
  imageUrl                String?
  imageMediaId            BigInt?
  galleryImageUrls        Json?
  mediaItemIds            Json?
  dataAiHint              String?
  locationCity            String?
  locationState           String?
  address                 String?
  latitude                Decimal?
  longitude               Decimal?
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  tenantId                BigInt
  tenant                  Tenant      @relation(fields: [tenantId], references: [id])
  lots                    AssetsOnLots[]

  // Categoria: Veículos
  plate              String?
  make               String?
  model              String?
  version            String?
  year               Int?
  modelYear          Int?
  mileage            Int?
  color              String?
  fuelType           String?
  transmissionType   String?
  bodyType           String?
  vin                String?  @unique
  renavam            String?  @unique
  enginePower        String?
  numberOfDoors      Int?
  vehicleOptions     String?  @db.Text
  detranStatus       String?  @db.Text
  debts              String?  @db.Text
  runningCondition   String?
  bodyCondition      String?
  tiresCondition     String?
  hasKey             Boolean?

  // Categoria: Imóveis
  propertyRegistrationNumber String?
  iptuNumber                  String?
  isOccupied                  Boolean?
  totalArea                   Decimal?
  builtArea                   Decimal?
  bedrooms                    Int?
  suites                      Int?
  bathrooms                   Int?
  parkingSpaces               Int?
  constructionType            String?
  finishes                    String? @db.Text
  infrastructure              String? @db.Text
  condoDetails                String? @db.Text
  improvements                String? @db.Text
  topography                  String?
  liensAndEncumbrances        String? @db.Text
  propertyDebts               String? @db.Text
  unregisteredRecords         String? @db.Text
  hasHabiteSe                 Boolean?
  zoningRestrictions          String?
  amenities                   Json?

  // Categoria: Eletrônicos
  brand                String?
  serialNumber         String?
  itemCondition        String?
  specifications       String? @db.Text
  includedAccessories  String? @db.Text
  batteryCondition     String?
  hasInvoice           Boolean?
  hasWarranty          Boolean?
  repairHistory        String? @db.Text

  // Categoria: Eletrodomésticos
  applianceCapacity    String?
  voltage              String?
  applianceType        String?
  additionalFunctions  String?

  // Categoria: Máquinas e Equipamentos
  hoursUsed          Int?
  engineType         String?
  capacityOrPower    String?
  maintenanceHistory String? @db.Text
  installationLocation String?
  compliesWithNR     String?
  operatingLicenses  String?

  // Categoria: Semoventes (Gado, Cavalos)
  breed        String?
  age          String?
  sex          String?
  weight       String?
  individualId String?
  purpose      String?
  sanitaryCondition String? @db.Text
  lineage      String?
  isPregnant   Boolean?
  specialSkills String?
  gtaDocument  String?
  breedRegistryDocument String?

  // Categoria: Móveis
  furnitureType String?
  material      String?
  style         String?
  dimensions    String?
  pieceCount    Int?

  // Categoria: Joias e Relógios
  jewelryType           String?
  metal                 String?
  gemstones             String?
  totalWeight           String?
  jewelrySize           String?
  authenticityCertificate String?

  // Categoria: Arte
  workType   String?
  artist     String?
  period     String?
  technique  String?
  provenance String? @db.Text

  // Categoria: Embarcações
  boatType          String?
  boatLength        String?
  hullMaterial      String?
  onboardEquipment  String? @db.Text

  // Categoria: Commodities
  productName String?
  quantity String?
  packagingType String?
  expirationDate DateTime?
  storageConditions String?

  // Categoria: Metais Preciosos
  preciousMetalType String?
  purity              String?

  // Categoria: Bens Florestais
  forestGoodsType   String?
  volumeOrQuantity  String?
  species           String?
  dofNumber         String?
}

model AssetsOnLots {
  lot       Lot      @relation(fields: [lotId], references: [id])
  lotId     BigInt
  asset     Asset    @relation(fields: [assetId], references: [id])
  assetId   BigInt
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([lotId, assetId])
}

model Bid {
  id            BigInt    @id @default(autoincrement())
  lotId         BigInt
  lot           Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId     BigInt
  auction       Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidderId      BigInt
  bidder        User      @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  amount        Decimal   @db.Decimal(15, 2)
  timestamp     DateTime  @default(now())
  bidderDisplay String?
  tenantId      BigInt
  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([bidderId])
}

model UserWin {
  id              BigInt     @id @default(autoincrement())
  lotId           BigInt     @unique
  lot             Lot        @relation(fields: [lotId], references: [id])
  userId          BigInt
  user            User       @relation(fields: [userId], references: [id])
  winningBidAmount Decimal    @db.Decimal(15, 2)
  winDate         DateTime   @default(now())
  paymentStatus   PaymentStatus @default(PENDENTE)
  retrievalStatus String @default("PENDENTE")
  invoiceUrl      String?

  installments     InstallmentPayment[]

  @@index([userId])
}

model UserLotMaxBid {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lotId     BigInt
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
  @@index([userId])
  @@index([lotId])
}

model Auctioneer {
  id                BigInt     @id @default(autoincrement())
  publicId          String  @unique
  name              String
  slug              String  @unique
  description       String? @db.Text
  registrationNumber String?
  logoUrl           String? @db.Text
  logoMediaId       BigInt?
  dataAiHintLogo    String?
  website           String? @db.Text
  email             String?
  phone             String?
  contactName       String?
  address           String? @db.Text
  city              String?
  state             String?
  zipCode           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  tenantId          BigInt
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId            BigInt?     @unique
  user              User?    @relation(fields: [userId], references: [id])
  auctions          Auction[]
  lots              Lot[]
}

model Seller {
  id               BigInt     @id @default(autoincrement())
  publicId         String  @unique
  name             String  @unique
  description      String? @db.Text
  logoUrl          String? @db.Text
  logoMediaId      BigInt?
  dataAiHintLogo   String?
  website          String? @db.Text
  email            String?
  phone            String?
  contactName      String?
  address          String? @db.Text
  city             String?
  state            String?
  zipCode          String?
  slug             String  @unique
  isJudicial       Boolean @default(false)
  judicialBranchId BigInt? @unique
  judicialBranch   JudicialBranch? @relation(fields: [judicialBranchId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  tenantId         BigInt
  tenant           Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId           BigInt?     @unique
  user             User?    @relation(fields: [userId], references: [id])
  auctions         Auction[]
  lots             Lot[]
  assets           Asset[]
  judicialProcesses JudicialProcess[]
}

model ContactMessage {
  id        BigInt   @id @default(autoincrement())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Subscriber {
  id          BigInt     @id @default(autoincrement())
  email       String
  name        String?
  phone       String?
  preferences Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenantId    BigInt
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([email, tenantId])
}

model Notification {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  lotId     BigInt?
  lot       Lot?     @relation(fields: [lotId], references: [id])
  auctionId BigInt?
  auction   Auction? @relation(fields: [auctionId], references: [id])
  tenantId  BigInt
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Review {
  id              BigInt   @id @default(autoincrement())
  lotId           BigInt
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId       BigInt
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  userId          BigInt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())
  userDisplayName String?

  @@index([lotId])
  @@index([userId])
}

model LotQuestion {
  id                      BigInt   @id @default(autoincrement())
  lotId                   BigInt
  lot                     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId               BigInt
  auction                 Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  userId                  BigInt
  user                    User     @relation(fields: [userId], references: [id])
  userDisplayName         String
  questionText            String   @db.Text
  answerText              String?  @db.Text
  isPublic                Boolean  @default(true)
  createdAt               DateTime @default(now())
  answeredAt              DateTime?
  answeredByUserId        BigInt?
  answeredByUserDisplayName String?

  @@index([lotId])
  @@index([userId])
}

model UserDocument {
  id             BigInt     @id @default(autoincrement())
  status         UserDocumentStatus @default(PENDING_ANALYSIS)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         BigInt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentTypeId BigInt
  documentType   DocumentType @relation(fields: [documentTypeId], references: [id])
  fileName       String?
  fileUrl        String
  rejectionReason String?

  @@unique([userId, documentTypeId])
  @@index([userId])
}

model AuctionHabilitation {
  userId BigInt
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  auctionId BigInt
  auction   Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  habilitatedAt DateTime @default(now())

  @@id([userId, auctionId])
  @@index([auctionId])
}

model JudicialProcess {
  id                BigInt      @id @default(autoincrement())
  publicId          String   @unique
  processNumber     String
  isElectronic      Boolean  @default(true)
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt
  tenantId          BigInt
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  courtId          BigInt?
  court            Court?   @relation(fields: [courtId], references: [id])
  districtId       BigInt?
  district         JudicialDistrict? @relation(fields: [districtId], references: [id])
  branchId         BigInt?
  branch           JudicialBranch?   @relation(fields: [branchId], references: [id])
  sellerId         BigInt?
  seller           Seller?  @relation(fields: [sellerId], references: [id])
  
  parties           JudicialParty[]
  assets            Asset[]
  auctions          Auction[]
  lots              Lot[] @relation("_JudicialProcessToLot")
  mediaItems        MediaItem[]

  @@unique([processNumber, tenantId])
}

model JudicialParty {
  id           BigInt   @id @default(autoincrement())
  name         String
  documentNumber String?
  partyType    ProcessPartyType
  processId    BigInt
  process      JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@index([processId])
}

model Court {
  id        BigInt   @id @default(autoincrement())
  slug      String   @unique
  name      String
  stateUf   String
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  districts JudicialDistrict[]
  processes JudicialProcess[]
  auctions  Auction[] @relation("_AuctionToCourt")
}

model JudicialDistrict {
  id        BigInt   @id @default(autoincrement())
  slug      String   @unique
  name      String
  courtId   BigInt?
  court     Court?   @relation(fields: [courtId], references: [id])
  stateId   BigInt?
  state     State?   @relation(fields: [stateId], references: [id])
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  branches  JudicialBranch[]
  processes JudicialProcess[]
  auctions  Auction[] @relation("_AuctionToJudicialDistrict")
}

model JudicialBranch {
  id          BigInt   @id @default(autoincrement())
  slug        String   @unique
  name        String   @unique
  districtId  BigInt?
  district    JudicialDistrict? @relation(fields: [districtId], references: [id])
  contactName String?
  phone       String?
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  processes   JudicialProcess[]
  seller      Seller?
  auctions  Auction[] @relation("_AuctionToJudicialBranch")
}

model MediaItem {
  id                BigInt   @id @default(autoincrement())
  fileName          String
  storagePath       String
  urlOriginal       String
  urlThumbnail      String?
  urlMedium         String?
  urlLarge          String?
  mimeType          String
  sizeBytes         Int?
  altText           String?
  caption           String?
  description       String? @db.Text
  title             String?
  dataAiHint        String?
  uploadedAt        DateTime @default(now())
  uploadedByUserId  BigInt?
  uploadedBy        User?    @relation(fields: [uploadedByUserId], references: [id])
  judicialProcessId BigInt?
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  linkedLotIds      Json?
}

// =============
//  Platform Settings
// =============

model PlatformSettings {
  id                  BigInt   @id @default(autoincrement())
  tenantId            BigInt   @unique
  tenant              Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  siteTitle           String?
  siteTagline         String?
  logoUrl             String?
  faviconUrl          String?
  isSetupComplete     Boolean  @default(false)
  crudFormMode        String?  @default("modal") // "modal" | "sheet"
  galleryImageBasePath String?
  storageProvider     StorageProviderType?
  firebaseStorageBucket String?
  activeThemeName     String?
  searchPaginationType SearchPaginationType? @default(loadMore)
  searchItemsPerPage   Int? @default(12)
  searchLoadMoreCount  Int? @default(12)
  showCountdownOnLotDetail Boolean? @default(true)
  showCountdownOnCards Boolean? @default(true)
  showRelatedLotsOnLotDetail Boolean? @default(true)
  relatedLotsCount      Int? @default(5)
  defaultUrgencyTimerHours Int?
  defaultListItemsPerPage Int @default(10)
  updatedAt           DateTime? @updatedAt
  
  themes                 ThemeSettings[]
  platformPublicIdMasks  IdMasks?
  mapSettings            MapSettings?
  biddingSettings        BiddingSettings?
  paymentGatewaySettings PaymentGatewaySettings?
  notificationSettings   NotificationSettings?
  mentalTriggerSettings  MentalTriggerSettings?
  sectionBadgeVisibility SectionBadgeVisibility?
  variableIncrementTable VariableIncrementRule[]
}

model ThemeSettings {
  id                 BigInt     @id @default(autoincrement())
  name               String     @unique
  platformSettingsId BigInt?
  platformSettings   PlatformSettings? @relation(fields: [platformSettingsId], references: [id])
  colors             ThemeColors?
}

model ThemeColors {
  id              BigInt           @id @default(autoincrement())
  themeSettingsId BigInt           @unique
  themeSettings   ThemeSettings    @relation(fields: [themeSettingsId], references: [id], onDelete: Cascade)
  light           Json?
  dark            Json?
}

model IdMasks {
  id                 BigInt   @id @default(autoincrement())
  platformSettingsId BigInt   @unique
  platformSettings   PlatformSettings? @relation(fields: [platformSettingsId], references: [id], onDelete: Cascade)
  auctionCodeMask    String?
  lotCodeMask        String?
  sellerCodeMask     String?
  auctioneerCodeMask String?
  userCodeMask       String?
  assetCodeMask      String?
  categoryCodeMask   String?
  subcategoryCodeMask String?
}

model MapSettings {
  id                 BigInt   @id @default(autoincrement())
  platformSettingsId BigInt   @unique
  platformSettings   PlatformSettings? @relation(fields: [platformSettingsId], references: [id], onDelete: Cascade)
  defaultProvider    String?  @default("openstreetmap")
  googleMapsApiKey   String?
}

model BiddingSettings {
  id                 BigInt   @id @default(autoincrement())
  platformSettingsId BigInt   @unique
  platformSettings   PlatformSettings? @relation(fields: [platformSettingsId], references: [id], onDelete: Cascade)
  instantBiddingEnabled           Boolean? @default(true)
  getBidInfoInstantly             Boolean? @default(true)
  biddingInfoCheckIntervalSeconds Int?     @default(1)
  defaultStageDurationDays        Int?     @default(7)
  defaultDaysBetweenStages        Int?     @default(1)
}

model PaymentGatewaySettings {
  id                 BigInt   @id @default(autoincrement())
  platformSettingsId BigInt   @unique
  platformSettings   PlatformSettings? @relation(fields: [platformSettingsId], references: [id], onDelete: Cascade)
  defaultGateway     String?  @default("Manual")
  platformCommissionPercentage Float? @default(5)
  gatewayApiKey      String?
  gatewayEncryptionKey String?
}

model NotificationSettings {
  id                 BigInt   @id @default(autoincrement())
  platformSettingsId BigInt   @unique
  platformSettings   PlatformSettings? @relation(fields: [platformSettingsId], references: [id], onDelete: Cascade)
  notifyOnNewAuction           Boolean @default(true)
  notifyOnFeaturedLot          Boolean @default(false)
  notifyOnAuctionEndingSoon    Boolean @default(true)
  notifyOnPromotions           Boolean @default(true)
}

model MentalTriggerSettings {
    id                  BigInt   @id @default(autoincrement())
    platformSettingsId  BigInt   @unique
    platformSettings    PlatformSettings? @relation(fields: [platformSettingsId], references: [id], onDelete: Cascade)
    showDiscountBadge         Boolean  @default(true)
    showPopularityBadge       Boolean  @default(true)
    popularityViewThreshold Int      @default(500)
    showHotBidBadge           Boolean  @default(true)
    hotBidThreshold           Int      @default(10)
    showExclusiveBadge        Boolean  @default(true)
}

model SectionBadgeVisibility {
    id                  BigInt   @id @default(autoincrement())
    platformSettingsId  BigInt   @unique
    platformSettings    PlatformSettings? @relation(fields: [platformSettingsId], references: [id], onDelete: Cascade)
    searchGrid          Json?
    lotDetail           Json?
}

model VariableIncrementRule {
    id                  BigInt   @id @default(autoincrement())
    platformSettingsId  BigInt
    platformSettings    PlatformSettings @relation(fields: [platformSettingsId], references: [id], onDelete: Cascade)
    from                Float
    to                  Float?
    increment           Float
}

model InstallmentPayment {
  id                 BigInt        @id @default(autoincrement())
  userWinId          BigInt
  userWin            UserWin       @relation(fields: [userWinId], references: [id], onDelete: Cascade)
  installmentNumber  Int
  totalInstallments  Int
  amount             Decimal       @db.Decimal(15, 2)
  dueDate            DateTime
  paymentDate        DateTime?
  status             PaymentStatus @default(PENDENTE)
  paymentMethod      String?
  transactionId      String?
  lot                Lot[]         @relation("_InstallmentPaymentToLot")

  @@unique([userWinId, installmentNumber])
  @@index([userWinId])
}

model Report {
  id BigInt @id @default(autoincrement())
  name String
  description String?
  definition Json
  tenantId BigInt
  tenant Tenant @relation(fields: [tenantId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdById BigInt
  createdBy User @relation(fields: [createdById], references: [id])
}

model DataSource {
    id BigInt @id @default(autoincrement())
    name String
    modelName String @unique
    fields Json
}

// =============
// Enums
// =============

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
  RETIRADO // Adicionado para lotes retirados de leilões
}

enum AssetStatus {
    CADASTRO
    DISPONIVEL
    LOTEADO
    VENDIDO
    REMOVIDO
    INATIVADO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  VENDA_DIRETA
}

enum AuctionMethod {
    STANDARD
    DUTCH
    SILENT
}

enum AuctionParticipation {
    ONLINE
    PRESENCIAL
    HIBRIDO
}

enum StorageProviderType {
    LOCAL
    FIREBASE
}

enum SearchPaginationType {
    loadMore
    numberedPages
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

enum DirectSaleOfferStatus {
    ACTIVE
    PENDING_APPROVAL
    SOLD
    EXPIRED
    RASCUNHO
}

enum DirectSaleOfferType {
    BUY_NOW
    ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
    WINNING_BID_TERM
    EVALUATION_REPORT
    AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}
