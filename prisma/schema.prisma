// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===================================
// User and Auth Models
// ===================================

model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  fullName            String?
  password            String?
  roleId              String?
  habilitationStatus  UserHabilitationStatus? @default(PENDING_DOCUMENTS)
  cpf                 String?              @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  optInMarketing      Boolean?             @default(false)
  avatarUrl           String?
  dataAiHint          String?
  accountType         AccountType?         @default(PHYSICAL)
  razaoSocial         String?
  cnpj                String?              @unique
  inscricaoEstadual   String?
  websiteComitente    String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  role                Role?                @relation(fields: [roleId], references: [id])
  sellerProfile       Seller?              @relation(name: "UserSeller", fields: [sellerProfileId], references: [id])
  sellerProfileId     String?              @unique
  auctioneerProfile   Auctioneer?          @relation(name: "UserAuctioneer", fields: [auctioneerProfileId], references: [id])
  auctioneerProfileId String?              @unique
  bids                Bid[]
  wins                UserWin[]
  documents           UserDocument[]
  notifications       Notification[]
  maxBids             UserLotMaxBid[]
}

model Role {
  id              String   @id @default(cuid())
  name            String   @unique
  name_normalized String   @unique
  description     String?
  permissions     String[] @default([])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  users           User[]
}

model DocumentType {
  id             String         @id @default(cuid())
  name           String         @unique
  description    String?
  isRequired     Boolean        @default(true)
  allowedFormats String[]       @default(["image/jpeg", "image/png", "application/pdf"])
  displayOrder   Int?           @default(0)
  appliesTo      AccountType[]  @default([PHYSICAL, LEGAL])
  userDocuments  UserDocument[]
}

model UserDocument {
  id              String             @id @default(cuid())
  userId          String
  documentTypeId  String
  fileUrl         String?
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  rejectionReason String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType DocumentType @relation(fields: [documentTypeId], references: [id])
}

// ===================================
// Location & Category Models
// ===================================

model LotCategory {
  id                  String        @id @default(cuid())
  name                String        @unique
  slug                String        @unique
  description         String?
  itemCount           Int?          @default(0)
  hasSubcategories    Boolean?      @default(false)
  logoUrl             String?
  logoMediaId         String?
  coverImageUrl       String?
  coverImageMediaId   String?
  megaMenuImageUrl    String?
  megaMenuImageMediaId String?
  dataAiHintLogo      String?
  dataAiHintCover     String?
  dataAiHintMegaMenu  String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  subcategories       Subcategory[]
  auctions            Auction[]
  lots                Lot[]
  bens                Bem[]
}

model Subcategory {
  id               String       @id @default(cuid())
  name             String
  slug             String
  parentCategoryId String
  description      String?
  itemCount        Int?         @default(0)
  displayOrder     Int?         @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  parentCategory   LotCategory  @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots             Lot[]
  bens             Bem[]

  @@unique([parentCategoryId, slug])
}

model State {
  id        String   @id @default(cuid())
  name      String   @unique
  uf        String   @unique @db.VarChar(2)
  slug      String   @unique
  cityCount Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cities    City[]
  courts    Court[]
  districts JudicialDistrict[]
}

model City {
  id        String   @id @default(cuid())
  name      String
  slug      String
  stateId   String
  stateUf   String   @db.VarChar(2)
  ibgeCode  String?
  lotCount  Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state     State    @relation(fields: [stateId], references: [id], onDelete: Cascade)
}

// ===================================
// Auction & Lot Models
// ===================================

model Auction {
  id                           String     @id @default(cuid())
  publicId                     String     @unique @default(cuid())
  title                        String
  description                  String?
  status                       AuctionStatus @default(RASCUNHO)
  auctionType                  AuctionType?
  categoryId                   String?
  auctioneerId                 String?
  sellerId                     String?
  judicialProcessId            String?
  auctionDate                  DateTime
  endDate                      DateTime?
  auctionStages                Json?
  city                         String?
  state                        String?
  imageUrl                     String?
  imageMediaId                 String?
  dataAiHint                   String?
  documentsUrl                 String?
  visits                       Int?       @default(0)
  initialOffer                 Float?
  softCloseEnabled             Boolean?   @default(false)
  softCloseMinutes             Int?
  automaticBiddingEnabled      Boolean?   @default(false)
  silentBiddingEnabled         Boolean?   @default(false)
  allowMultipleBidsPerUser     Boolean?   @default(true)
  allowInstallmentBids         Boolean?   @default(false)
  estimatedRevenue             Float?
  achievedRevenue              Float?
  totalHabilitatedUsers        Int?
  totalLots                    Int?       @default(0)
  isFeaturedOnMarketplace      Boolean?   @default(false)
  marketplaceAnnouncementTitle String?
  autoRelistSettings           Json?
  decrementAmount              Float?
  decrementIntervalSeconds     Int?
  floorPrice                   Float?
  originalAuctionId            String?
  relistCount                  Int?       @default(0)
  createdAt                    DateTime   @default(now())
  updatedAt                    DateTime   @updatedAt

  category          LotCategory?     @relation(fields: [categoryId], references: [id])
  auctioneer        Auctioneer?      @relation(fields: [auctioneerId], references: [id])
  seller            Seller?          @relation(fields: [sellerId], references: [id])
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  originalAuction   Auction?         @relation("AuctionRelist", fields: [originalAuctionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedAuctions  Auction[]        @relation("AuctionRelist")
  lots              Lot[]
}

model Lot {
  id                          String      @id @default(cuid())
  publicId                    String      @unique @default(cuid())
  auctionId                   String
  number                      String?
  title                       String
  description                 String?
  status                      LotStatus   @default(EM_BREVE)
  price                       Float
  initialPrice                Float?
  bidIncrementStep            Float?
  categoryId                  String?
  subcategoryId               String?
  bidsCount                   Int?        @default(0)
  isFeatured                  Boolean?    @default(false)
  isExclusive                 Boolean?    @default(false)
  reservePrice                Float?
  evaluationValue             Float?
  debtAmount                  Float?
  itbiValue                   Float?
  latitude                    Float?
  longitude                   Float?
  mapAddress                  String?
  mapEmbedUrl                 String?
  mapStaticImageUrl           String?
  lotSpecificAuctionDate      DateTime?
  secondAuctionDate           DateTime?
  secondInitialPrice          Float?
  endDate                     DateTime?
  urgencyTimerHours           Int?
  additionalTriggers          String[]
  discountPercentage          Float?
  winningBidderId             String?
  winningBidAmount            Float?
  bemIds                      String[]    @default([])
  views                       Int?        @default(0)
  createdAt                   DateTime    @default(now())
  updatedAt                   DateTime    @updatedAt

  auction       Auction       @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category      LotCategory?  @relation(fields: [categoryId], references: [id])
  subcategory   Subcategory?  @relation(fields: [subcategoryId], references: [id])
  bids          Bid[]
  wins          UserWin[]
  maxBids       UserLotMaxBid[]
}

model Bid {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String?
  bidderId        String
  bidderDisplay   String?
  amount          Float
  timestamp       DateTime @default(now())

  lot    Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bidder User @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String        @id @default(cuid())
  userId           String
  lotId            String        @unique
  winningBidAmount Float
  winDate          DateTime
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}


// ===================================
// Actor Profile Models
// ===================================

model Auctioneer {
  id                       String    @id @default(cuid())
  publicId                 String    @unique @default(cuid())
  name                     String
  slug                     String    @unique
  registrationNumber       String?
  contactName              String?
  email                    String?
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  logoUrl                  String?
  logoMediaId              String?
  dataAiHintLogo           String?
  description              String?
  memberSince              DateTime?
  rating                   Float?
  auctionsConductedCount   Int?      @default(0)
  totalValueSold           Float?    @default(0)
  userId                   String?   @unique
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  user     User?     @relation(name: "UserAuctioneer")
  auctions Auction[]
}

model Seller {
  id                       String    @id @default(cuid())
  publicId                 String    @unique @default(cuid())
  name                     String
  slug                     String    @unique
  contactName              String?
  email                    String?
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  logoUrl                  String?
  logoMediaId              String?
  dataAiHintLogo           String?
  description              String?
  memberSince              DateTime?
  rating                   Float?
  activeLotsCount          Int?
  totalSalesValue          Float?
  auctionsFacilitatedCount Int?
  userId                   String?   @unique
  judicialBranchId         String?
  isJudicial               Boolean?  @default(false)
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  user            User?             @relation(name: "UserSeller")
  judicialBranch  JudicialBranch?   @relation(fields: [judicialBranchId], references: [id])
  auctions        Auction[]
  judicialProcesses JudicialProcess[]
  bens            Bem[]
}

// ===================================
// Judicial Models
// ===================================

model Court {
  id        String             @id @default(cuid())
  name      String             @unique
  slug      String             @unique
  website   String?
  stateUf   String             @db.VarChar(2)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  state    State              @relation(fields: [stateUf], references: [uf])
  districts JudicialDistrict[]
  processes JudicialProcess[]
}

model JudicialDistrict {
  id        String   @id @default(cuid())
  name      String
  slug      String
  courtId   String
  stateId   String
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  court    Court            @relation(fields: [courtId], references: [id])
  state    State            @relation(fields: [stateId], references: [id])
  branches JudicialBranch[]
  processes JudicialProcess[]

  @@unique([slug, stateId])
}

model JudicialBranch {
  id          String    @id @default(cuid())
  name        String
  slug        String
  districtId  String
  contactName String?
  phone       String?
  email       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  district  JudicialDistrict  @relation(fields: [districtId], references: [id])
  sellers   Seller[]
  processes JudicialProcess[]

  @@unique([slug, districtId])
}

model JudicialProcess {
  id                 String         @id @default(cuid())
  publicId           String         @unique @default(cuid())
  processNumber      String         @unique
  oldProcessNumber   String?
  isElectronic       Boolean?       @default(true)
  courtId            String
  districtId         String
  branchId           String
  sellerId           String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  court    Court            @relation(fields: [courtId], references: [id])
  district JudicialDistrict @relation(fields: [districtId], references: [id])
  branch   JudicialBranch   @relation(fields: [branchId], references: [id])
  seller   Seller?          @relation(fields: [sellerId], references: [id])
  parties  ProcessParty[]
  bens     Bem[]
  auctions Auction[]
}

model ProcessParty {
  id             String         @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType

  process JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model Bem {
  id                          String    @id @default(cuid())
  publicId                    String    @unique @default(cuid())
  title                       String
  description                 String?
  judicialProcessId           String?
  sellerId                    String?
  status                      BemStatus   @default(DISPONIVEL)
  categoryId                  String?
  subcategoryId               String?
  imageUrl                    String?
  imageMediaId                String?
  dataAiHint                  String?
  evaluationValue             Float?
  locationCity                String?
  locationState               String?
  address                     String?
  latitude                    Float?
  longitude                   Float?
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt

  // Vehicle specific
  plate                       String?
  make                        String?
  model                       String?
  version                     String?
  year                        Int?
  modelYear                   Int?
  mileage                     Int?
  color                       String?
  fuelType                    String?
  transmissionType            String?
  bodyType                    String?
  vin                         String?
  renavam                     String?
  enginePower                 String?
  numberOfDoors               Int?
  vehicleOptions              String?
  detranStatus                String?
  debts                       String?
  runningCondition            String?
  bodyCondition               String?
  tiresCondition              String?
  hasKey                      Boolean?

  // Real Estate specific
  propertyRegistrationNumber  String?
  iptuNumber                  String?
  isOccupied                  Boolean?
  area                        Float?
  bedrooms                    Int?
  bathrooms                   Int?
  parkingSpaces               Int?
  propertyType                String?

  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  category        LotCategory?     @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory?     @relation(fields: [subcategoryId], references: [id])
}

// ===================================
// Other Models
// ===================================

model MediaItem {
  id              String   @id @default(cuid())
  fileName        String
  uploadedAt      DateTime @default(now())
  uploadedBy      String?
  storagePath     String?
  title           String?
  altText         String?
  caption         String?
  description     String?
  mimeType        String
  sizeBytes       Int
  dimensionsWidth Int?
  dimensionsHeight Int?
  urlOriginal     String
  urlThumbnail    String?
  urlMedium       String?
  urlLarge        String?
  linkedLotIds    String[] @default([])
  dataAiHint      String?
}

model PlatformSettings {
  id                           String   @id @default("global")
  siteTitle                    String?
  siteTagline                  String?
  galleryImageBasePath         String?
  storageProvider              String?
  firebaseStorageBucket        String?
  activeThemeName              String?
  themes                       Json?
  platformPublicIdMasks        Json?
  mapSettings                  Json?
  searchPaginationType         String?
  searchItemsPerPage           Int?
  searchLoadMoreCount          Int?
  showCountdownOnLotDetail     Boolean?
  showCountdownOnCards         Boolean?
  showRelatedLotsOnLotDetail   Boolean?
  relatedLotsCount             Int?
  mentalTriggerSettings        Json?
  sectionBadgeVisibility       Json?
  homepageSections             Json?
  variableIncrementTable       Json?
  biddingSettings              Json?
  defaultListItemsPerPage      Int?
  updatedAt                    DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BlogPost {
  id           String   @id @default(cuid())
  slug         String   @unique
  title        String
  content      String
  authorName   String
  authorId     String?
  category     String
  tags         String[]
  imageUrl     String?
  imageMediaId String?
  dataAiHint   String?
  isPublished  Boolean  @default(false)
  publishedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}


// ===================================
// ENUMS
// ===================================

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}
