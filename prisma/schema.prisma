// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ===================================================
// ENUMS
// ===================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

// ===================================================
// MODELS (Ordered by dependency)
// ===================================================

// --- Core & Independent Models ---

model PlatformSettings {
  id                               String   @id @default("global")
  siteTitle                        String   @db.VarChar(100)
  siteTagline                      String?  @db.VarChar(200)
  logoUrl                          String?  @db.VarChar(255)
  faviconUrl                       String?  @db.VarChar(255)
  galleryImageBasePath             String   @db.VarChar(200)
  storageProvider                  String   @db.VarChar(50) @default("local")
  firebaseStorageBucket            String?  @db.VarChar(200)
  activeThemeName                  String?  @db.VarChar(100)
  themes                           Json?
  platformPublicIdMasks            Json?
  homepageSections                 Json?
  mentalTriggerSettings            Json?
  sectionBadgeVisibility           Json?
  mapSettings                      Json?
  searchPaginationType             String   @db.VarChar(50)
  searchItemsPerPage               Int
  searchLoadMoreCount              Int
  showCountdownOnLotDetail         Boolean
  showCountdownOnCards             Boolean
  showRelatedLotsOnLotDetail       Boolean
  relatedLotsCount                 Int
  defaultUrgencyTimerHours         Int?
  variableIncrementTable           Json?
  biddingSettings                  Json?
  paymentGatewaySettings           Json?
  defaultListItemsPerPage          Int      @default(10)
  updatedAt                        DateTime @updatedAt
}

model Role {
  id              String         @id @default(uuid())
  name            String         @db.VarChar(50)
  nameNormalized  String         @unique @db.VarChar(50)
  description     String?        @db.Text
  permissions     Json?
  users           UsersOnRoles[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model User {
  id                    String                @id @default(uuid())
  email                 String                @unique @db.VarChar(150)
  password              String?               @db.VarChar(255)
  fullName              String?               @db.VarChar(150)
  cpf                   String?               @db.VarChar(20)
  cellPhone             String?               @db.VarChar(20)
  homePhone             String?               @db.VarChar(20)
  dateOfBirth           DateTime?             @db.Date
  gender                String?               @db.VarChar(30)
  profession            String?               @db.VarChar(100)
  nationality           String?               @db.VarChar(100)
  maritalStatus         String?               @db.VarChar(50)
  propertyRegime        String?               @db.VarChar(50)
  spouseName            String?               @db.VarChar(150)
  spouseCpf             String?               @db.VarChar(20)
  zipCode               String?               @db.VarChar(10)
  street                String?               @db.VarChar(200)
  number                String?               @db.VarChar(20)
  complement            String?               @db.VarChar(100)
  neighborhood          String?               @db.VarChar(100)
  city                  String?               @db.VarChar(100)
  state                 String?               @db.VarChar(50)
  avatarUrl             String?               @db.VarChar(255)
  dataAiHint            String?               @db.VarChar(100)
  habilitationStatus    UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType           AccountType           @default(PHYSICAL)
  optInMarketing        Boolean               @default(false)
  badges                Json?
  roles                 UsersOnRoles[]
  seller                Seller?
  auctioneer            Auctioneer?
  documents             UserDocument[]
  mediaItems            MediaItem[]
  bids                  Bid[]
  userWins              UserWin[]
  notifications         Notification[]
  lotsWon               Lot[]                 @relation("LotWinner")
  maxBids               UserLotMaxBid[]
  questions             LotQuestion[]         @relation("QuestionAsker")
  answers               LotQuestion[]         @relation("QuestionAnswerer")
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  razaoSocial           String?               @db.VarChar(150)
  cnpj                  String?               @db.VarChar(20)
  inscricaoEstadual     String?               @db.VarChar(30)
  website               String?               @db.VarChar(255)
  responsibleName       String?               @db.VarChar(150)
  responsibleCpf        String?               @db.VarChar(20)
  rgNumber              String?               @db.VarChar(30)
  rgIssuer              String?               @db.VarChar(30)
  rgIssueDate           DateTime?             @db.Date
  rgState               String?               @db.VarChar(2)
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model State {
  id              String             @id @default(uuid())
  name            String             @db.VarChar(100)
  uf              String             @unique @db.VarChar(2)
  slug            String             @unique @db.VarChar(100)
  cityCount       Int?               @default(0)
  cities          City[]
  courts          Court[]
  judicialDistricts JudicialDistrict[]
  auctions        Auction[]
  lots            Lot[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model City {
  id        String    @id @default(uuid())
  name      String    @db.VarChar(150)
  slug      String?   @db.VarChar(150)
  state     State     @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId   String
  stateUf   String?   @db.VarChar(2)
  ibgeCode  String?   @unique @db.VarChar(10)
  lotCount  Int?      @default(0)
  auctions  Auction[]
  lots      Lot[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model LotCategory {
  id                   String              @id @default(uuid())
  name                 String              @unique @db.VarChar(100)
  slug                 String              @unique @db.VarChar(100)
  description          String?             @db.Text
  hasSubcategories     Boolean             @default(false)
  iconName             String?             @db.VarChar(50)
  logoUrl              String?             @db.VarChar(255)
  logoMediaId          String?             @db.VarChar(100)
  dataAiHintIcon       String?             @db.VarChar(100)
  coverImageUrl        String?             @db.VarChar(255)
  coverImageMediaId    String?             @db.VarChar(100)
  dataAiHintCover      String?             @db.VarChar(100)
  megaMenuImageUrl     String?             @db.VarChar(255)
  megaMenuImageMediaId String?             @db.VarChar(100)
  dataAiHintMegaMenu   String?             @db.VarChar(100)
  subcategories        Subcategory[]
  lots                 Lot[]
  auctions             Auction[]
  bens                 Bem[]
  directSaleOffers     DirectSaleOffer[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model Subcategory {
  id               String      @id @default(uuid())
  name             String      @db.VarChar(100)
  slug             String?     @db.VarChar(100)
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  parentCategoryId String
  description      String?     @db.Text
  displayOrder     Int         @default(0)
  iconUrl          String?     @db.VarChar(255)
  iconMediaId      String?     @db.VarChar(100)
  dataAiHintIcon   String?     @db.VarChar(100)
  lots             Lot[]
  bens             Bem[]
}

model DocumentTemplates {
  id      String @id @default(uuid())
  name    String @db.VarChar(150)
  type    String @db.VarChar(50)
  content String @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessages {
  id      String   @id @default(uuid())
  name    String   @db.VarChar(150)
  email   String   @db.VarChar(150)
  subject String   @db.VarChar(255)
  message String   @db.Text
  isRead  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentType {
  id            String         @id @default(uuid())
  name          String         @db.VarChar(150)
  description   String?        @db.VarChar(255)
  isRequired    Boolean        @default(true)
  appliesTo     String?        @db.VarChar(50)
  userDocuments UserDocument[]
}

model Court {
  id                String             @id @default(uuid())
  name              String             @db.VarChar(150)
  slug              String?            @db.VarChar(150)
  stateUf           String?            @db.VarChar(2)
  website           String?            @db.VarChar(255)
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  state             State?             @relation(fields: [stateId], references: [id])
  stateId           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model JudicialDistrict {
  id                String             @id @default(uuid())
  name              String             @db.VarChar(150)
  slug              String             @unique @db.VarChar(150)
  court             Court?             @relation(fields: [courtId], references: [id])
  courtId           String?
  state             State?             @relation(fields: [stateId], references: [id])
  stateId           String?
  zipCode           String?            @db.VarChar(10)
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model JudicialBranch {
  id                String             @id @default(uuid())
  name              String             @db.VarChar(150)
  slug              String             @unique @db.VarChar(150)
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  districtId        String?
  contactName       String?            @db.VarChar(150)
  phone             String?            @db.VarChar(20)
  email             String?            @db.VarChar(150)
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
  auctions          Auction[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Seller {
  id                 String               @id @default(uuid())
  publicId           String?              @unique @db.VarChar(100)
  slug               String?              @unique @db.VarChar(150)
  name               String               @unique @db.VarChar(150)
  contactName        String?              @db.VarChar(150)
  email              String?              @db.VarChar(150)
  phone              String?              @db.VarChar(20)
  address            String?              @db.VarChar(200)
  city               String?              @db.VarChar(100)
  state              String?              @db.VarChar(50)
  zipCode            String?              @db.VarChar(10)
  website            String?              @db.VarChar(255)
  logoUrl            String?              @db.VarChar(255)
  logoMediaId        String?              @db.VarChar(100)
  dataAiHintLogo     String?              @db.VarChar(100)
  description        String?              @db.Text
  user               User?                @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId             String?              @unique
  isJudicial         Boolean              @default(false)
  judicialBranch     JudicialBranch?      @relation(fields: [judicialBranchId], references: [id])
  judicialBranchId   String?              @unique
  auctions           Auction[]
  lots               Lot[]
  directSaleOffers   DirectSaleOffer[]
  bens               Bem[]
  judicialProcesses  JudicialProcess[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model Auctioneer {
  id                 String          @id @default(uuid())
  publicId           String?         @unique @db.VarChar(100)
  slug               String?         @unique @db.VarChar(150)
  name               String          @db.VarChar(150)
  registrationNumber String?         @db.VarChar(50)
  contactName        String?         @db.VarChar(150)
  email              String?         @db.VarChar(150)
  phone              String?         @db.VarChar(20)
  address            String?         @db.VarChar(200)
  city               String?         @db.VarChar(100)
  state              String?         @db.VarChar(50)
  zipCode            String?         @db.VarChar(10)
  website            String?         @db.VarChar(255)
  logoUrl            String?         @db.VarChar(255)
  logoMediaId        String?         @db.VarChar(100)
  dataAiHintLogo     String?         @db.VarChar(100)
  description        String?         @db.Text
  user               User?           @relation(fields: [userId], references: [id])
  userId             String?         @unique
  auctions           Auction[]
  lots               Lot[]
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
}

model JudicialProcess {
  id                  String             @id @default(uuid())
  publicId            String?            @unique @db.VarChar(100)
  processNumber       String             @db.VarChar(100)
  isElectronic        Boolean            @default(true)
  court               Court?             @relation(fields: [courtId], references: [id])
  courtId             String?
  district            JudicialDistrict?  @relation(fields: [districtId], references: [id])
  districtId          String?
  branch              JudicialBranch?    @relation(fields: [branchId], references: [id])
  branchId            String?
  seller              Seller?            @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId            String?
  parties             JudicialParty[]
  bens                Bem[]
  mediaItems          MediaItem[]
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model JudicialParty {
  id             String          @id @default(uuid())
  process          JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId      String
  name           String          @db.VarChar(255)
  documentNumber String?         @db.VarChar(50)
  partyType      ProcessPartyType
}

model Bem {
  id                       String        @id @default(uuid())
  publicId                 String?       @unique @db.VarChar(100)
  title                    String        @db.VarChar(200)
  description              String?       @db.Text
  status                   BemStatus     @default(DISPONIVEL)
  category                 LotCategory?  @relation(fields: [categoryId], references: [id])
  categoryId               String?
  subcategory              Subcategory?  @relation(fields: [subcategoryId], references: [id])
  subcategoryId            String?
  judicialProcess          JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId        String?
  seller                   Seller?       @relation(fields: [sellerId], references: [id])
  sellerId                 String?
  evaluationValue          Decimal?      @db.Decimal(15, 2)
  imageUrl                 String?       @db.VarChar(255)
  imageMediaId             String?       @db.VarChar(100)
  galleryImageUrls         Json?
  mediaItemIds             Json?
  dataAiHint               String?       @db.VarChar(100)
  locationCity             String?       @db.VarChar(100)
  locationState            String?       @db.VarChar(100)
  address                  String?       @db.VarChar(255)
  latitude                 Decimal?      @db.Decimal(10, 8)
  longitude                Decimal?      @db.Decimal(11, 8)
  lots                     LotBens[]
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt

  /// Comentários e campos específicos por categoria
}

model DirectSaleOffer {
  id                String                @id @default(uuid())
  publicId          String?               @unique @db.VarChar(100)
  title             String                @db.VarChar(255)
  description       String?               @db.Text
  offerType         DirectSaleOfferType
  price             Decimal?              @db.Decimal(15, 2)
  minimumOfferPrice Decimal?              @db.Decimal(15, 2)
  status            DirectSaleOfferStatus @default(ACTIVE)
  category          LotCategory           @relation(fields: [categoryId], references: [id])
  categoryId        String
  seller            Seller                @relation(fields: [sellerId], references: [id])
  sellerId          String
  sellerName        String?               @db.VarChar(150)
  sellerLogoUrl     String?               @db.VarChar(255)
  dataAiHintSellerLogo String?            @db.VarChar(100)
  locationCity      String?               @db.VarChar(100)
  locationState     String?               @db.VarChar(100)
  imageUrl          String?               @db.VarChar(255)
  imageMediaId      String?               @db.VarChar(100)
  dataAiHint        String?               @db.VarChar(100)
  galleryImageUrls  Json?
  mediaItemIds      Json?
  itemsIncluded     Json?
  views             Int                   @default(0)
  expiresAt         DateTime?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

model AuctionStage {
  id           String  @id @default(uuid())
  auction      Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId    String
  name         String
  startDate    DateTime
  endDate      DateTime
  initialPrice Decimal? @db.Decimal(15, 2)
  
  /// Valor de avaliação específico para esta praça
  evaluationValue    Decimal?
}

model Auction {
  id                               String               @id @default(uuid())
  publicId                         String?              @unique @db.VarChar(100)
  slug                             String?              @unique @db.VarChar(255)
  title                            String               @db.VarChar(255)
  description                      String?              @db.Text
  status                           AuctionStatus        @default(RASCUNHO)
  auctionDate                      DateTime
  endDate                          DateTime?
  // Relacionamentos com outras tabelas
  auctioneer                       Auctioneer?          @relation(fields: [auctioneerId], references: [id])
  auctioneerId                     String?
  seller                           Seller?              @relation(fields: [sellerId], references: [id])
  sellerId                         String?
  category                         LotCategory?         @relation(fields: [categoryId], references: [id])
  categoryId                       String?
  court                            Court?               @relation(fields: [courtId], references: [id], onDelete: SetNull)
  courtId                          String?
  district                         JudicialDistrict?    @relation(fields: [districtId], references: [id], onDelete: SetNull)
  districtId                       String?
  branch                           JudicialBranch?      @relation(fields: [branchId], references: [id], onDelete: SetNull)
  branchId                         String?
  city                             City?                @relation(fields: [cityId], references: [id], onDelete: SetNull)
  cityId                           String?
  state                            State?               @relation(fields: [stateId], references: [id], onDelete: SetNull)
  stateId                          String?
  judicialProcess                  JudicialProcess?     @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId                String?
  
  // Relações 'de volta'
  lots                             Lot[]
  questions                        LotQuestion[]
  habilitations                    AuctionHabilitation[]
  
  // Settings
  auctionType                      AuctionType?
  auctionMethod                    AuctionMethod        @default(STANDARD)
  participation                    AuctionParticipation @default(ONLINE)
  softCloseEnabled                 Boolean              @default(false)
  softCloseMinutes                 Int?                 @default(2)
  automaticBiddingEnabled          Boolean              @default(false)
  silentBiddingEnabled             Boolean              @default(false)
  allowMultipleBidsPerUser         Boolean              @default(true)
  allowInstallmentBids             Boolean              @default(true)
  
  // Marketing & Display
  isFeaturedOnMarketplace          Boolean              @default(false)
  marketplaceAnnouncementTitle     String?              @db.VarChar(150)
  imageUrl                         String?              @db.VarChar(255)
  imageMediaId                     String?              @db.VarChar(100)
  documentsUrl                     String?              @db.VarChar(255)
  dataAiHint                       String?              @db.VarChar(100)
  
  // URLs & Location (Híbrido/Presencial)
  onlineUrl                        String?              @db.VarChar(255)
  address                          String?              @db.VarChar(255)
  zipCode                          String?              @db.VarChar(10)

  // Estatísticas
  visits                           Int                  @default(0)
  totalHabilitatedUsers            Int?                 @default(0)
  estimatedRevenue                 Decimal?             @db.Decimal(15, 2)
  achievedRevenue                  Decimal?             @db.Decimal(15, 2)
  
  // Dutch Auction Specific
  decrementAmount                  Decimal?             @db.Decimal(15, 2)
  decrementIntervalSeconds         Int?
  floorPrice                       Decimal?             @db.Decimal(15, 2)

  // Auto Relist (JSON for flexibility)
  autoRelistSettings               Json?
  
  // Timestamps
  createdAt                        DateTime             @default(now())
  updatedAt                        DateTime             @updatedAt
  
  // Relação com AuctionStage
  auctionStages                    AuctionStage[]
}

model Lot {
  id                           String        @id @default(uuid())
  publicId                     String?       @unique @db.VarChar(100)
  auction                      Auction       @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                    String
  slug                         String?       @db.VarChar(255)
  number                       String?       @db.VarChar(20)
  title                        String        @db.VarChar(255)
  description                  String?       @db.Text
  price                        Decimal       @db.Decimal(15, 2)
  initialPrice                 Decimal?      @db.Decimal(15, 2)
  secondInitialPrice           Decimal?      @db.Decimal(15, 2)
  bidIncrementStep             Decimal?      @db.Decimal(10, 2)
  status                       LotStatus     @default(EM_BREVE)
  bidsCount                    Int           @default(0)
  views                        Int           @default(0)
  isFeatured                   Boolean       @default(false)
  isExclusive                  Boolean       @default(false)
  discountPercentage           Int?
  additionalTriggers           Json?
  imageUrl                     String?       @db.VarChar(255)
  imageMediaId                 String?       @db.VarChar(100)
  galleryImageUrls             Json?
  mediaItemIds                 Json?
  inheritedMediaFromBemId      String?       /// ID do Bem de onde as mídias são herdadas
  type                         String        @db.VarChar(100)
  category                     LotCategory?  @relation(fields: [categoryId], references: [id])
  categoryId                   String?
  subcategory                  Subcategory?  @relation(fields: [subcategoryId], references: [id])
  subcategoryId                String?
  auctionName                  String?
  seller                       Seller?       @relation(fields: [sellerId], references: [id])
  sellerId                     String?
  sellerName                   String?       @db.VarChar(150)
  auctioneer                   Auctioneer?   @relation(fields: [auctioneerId], references: [id])
  auctioneerId                 String?
  city                         City?         @relation(fields: [cityId], references: [id])
  cityId                       String?
  state                        State?        @relation(fields: [stateId], references: [id])
  stateId                      String?
  cityName                     String?       @db.VarChar(100)
  stateUf                      String?       @db.VarChar(2)
  latitude                     Decimal?      @db.Decimal(10, 8)
  longitude                    Decimal?      @db.Decimal(11, 8)
  mapAddress                   String?       @db.VarChar(255)
  mapEmbedUrl                  String?       @db.VarChar(500)
  mapStaticImageUrl            String?       @db.VarChar(255)
  endDate                      DateTime?
  auctionDate                  DateTime?
  lotSpecificAuctionDate       DateTime?
  secondAuctionDate            DateTime?
  condition                    String?       @db.VarChar(100)
  dataAiHint                   String?       @db.VarChar(100)
  winner                       User?         @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId                     String?
  winningBidTermUrl            String?       @db.VarChar(255)
  allowInstallmentBids         Boolean?      @default(false)
  bens                         LotBens[]
  bids                         Bid[]
  questions                    LotQuestion[]
  win                          UserWin?
  maxBids                      UserLotMaxBid[]
  createdAt                    DateTime      @default(now())
  updatedAt                    DateTime      @updatedAt
}

model LotBens {
  lot       Lot    @relation(fields: [lotId], references: [id])
  lotId     String
  bem       Bem    @relation(fields: [bemId], references: [id])
  bemId     String

  @@id([lotId, bemId])
}

model Bid {
  id            String   @id @default(uuid())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId      String
  bidderDisplay String?  @db.VarChar(150)
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
}

model UserWin {
  id               String  @id @default(uuid())
  lot              Lot     @relation(fields: [lotId], references: [id])
  lotId            String  @unique
  user             User    @relation(fields: [userId], references: [id])
  userId           String
  winningBidAmount Decimal @db.Decimal(15, 2)
  winDate          DateTime
  paymentStatus    PaymentStatus
  invoiceUrl       String? @db.VarChar(255)
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model MediaItem {
  id                  String           @id @default(uuid())
  fileName            String           @db.VarChar(255)
  storagePath         String           @db.VarChar(255)
  title               String?          @db.VarChar(255)
  altText             String?          @db.VarChar(255)
  caption             String?          @db.VarChar(500)
  description         String?          @db.Text
  mimeType            String           @db.VarChar(100)
  sizeBytes           Int
  urlOriginal         String           @db.VarChar(255)
  urlThumbnail        String?          @db.VarChar(255)
  urlMedium           String?          @db.VarChar(255)
  urlLarge            String?          @db.VarChar(255)
  linkedLotIds        Json?
  dataAiHint          String?          @db.VarChar(100)
  uploadedBy          User             @relation(fields: [uploadedByUserId], references: [id])
  uploadedByUserId    String
  judicialProcess     JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId   String?
  uploadedAt          DateTime         @default(now())
}

model UserDocument {
  id               String             @id @default(uuid())
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  documentType     DocumentType       @relation(fields: [documentTypeId], references: [id])
  documentTypeId   String
  status           UserDocumentStatus @default(PENDING_ANALYSIS)
  fileUrl          String             @db.VarChar(255)
  fileName         String?
  rejectionReason  String?            @db.Text
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@unique([userId, documentTypeId])
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model LotQuestion {
  id              String   @id @default(uuid())
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId           String
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId       String
  user            User     @relation("QuestionAsker", fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  userDisplayName String   @db.VarChar(150)
  questionText    String   @db.Text
  answerText      String?  @db.Text
  answeredBy      User?    @relation("QuestionAnswerer", fields: [answeredByUserId], references: [id], onDelete: SetNull)
  answeredByUserId String?
  answeredByUserDisplayName String? @db.VarChar(150)
  answeredAt      DateTime?
  isPublic        Boolean  @default(true)
  createdAt       DateTime @default(now())
}

model Review {
  id              String   @id @default(uuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String   @db.VarChar(150)
  rating          Int
  comment         String   @db.Text
  createdAt       DateTime @default(now())
}

model AuctionHabilitation {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  auction   Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId String
  status    String  @default("HABILITADO") // e.g., HABILITADO, PENDENTE
  createdAt DateTime @default(now())

  @@unique([userId, auctionId])
}
