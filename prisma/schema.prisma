// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// =================================================================
// 1. MODELS WITHOUT FOREIGN KEY DEPENDENCIES (BASE TABLES)
// =================================================================

model Role {
  id              String         @id @default(cuid())
  name            String         @unique
  nameNormalized  String         @unique
  description     String?
  permissions     Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  users           UsersOnRoles[]
}

model StateInfo {
  id        String   @id @default(cuid())
  name      String
  uf        String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cities    CityInfo[]
  courts    Court[]
}

model CityInfo {
  id        String   @id @default(cuid())
  name      String
  slug      String
  stateId   String
  stateUf   String
  ibgeCode  String?  @unique
  lotCount  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state     StateInfo @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots      Lot[]
}

model LotCategory {
  id                 String          @id @default(cuid())
  name               String          @unique
  slug               String          @unique
  description        String?         @db.VarChar(500)
  hasSubcategories   Boolean         @default(false)
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  coverImageUrl      String?
  coverImageMediaId  String?
  dataAiHintCover    String?
  megaMenuImageUrl   String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  subcategories      Subcategory[]
  lots               Lot[]
  bens               Bem[]
  auctions           Auction[]
}

model Subcategory {
  id                String       @id @default(cuid())
  name              String
  slug              String
  parentCategoryId  String
  description       String?      @db.VarChar(500)
  displayOrder      Int          @default(0)
  iconUrl           String?
  iconMediaId       String?
  dataAiHintIcon    String?
  parentCategory    LotCategory  @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots              Lot[]
  bens              Bem[]
}

model Court {
  id                String             @id @default(cuid())
  name              String             @unique
  slug              String             @unique
  stateUf           String
  website           String?
  state             StateInfo          @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId           String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
}

model DocumentType {
  id           String         @id @default(cuid())
  name         String         @unique
  description  String?
  isRequired   Boolean        @default(true)
  appliesTo    String? // e.g., "PHYSICAL,LEGAL"
  userDocuments UserDocument[]
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentTemplate {
  id      String @id @default(cuid())
  name    String
  type    String // e.g., WINNING_BID_TERM, EVALUATION_REPORT
  content String @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// =================================================================
// 2. MODELS WITH ONE OR MORE LEVELS OF DEPENDENCY
// =================================================================

model User {
  id                   String                @id @default(cuid())
  email                String                @unique
  password             String?
  fullName             String?
  habilitationStatus   String                @default("PENDING_DOCUMENTS")
  accountType          String                @default("PHYSICAL")
  avatarUrl            String?
  dataAiHint           String?
  badges               Json?
  sellerId             String?               @unique
  seller               Seller?               @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  cpf                  String?
  cellPhone            String?
  homePhone            String?
  dateOfBirth          DateTime?
  rgNumber             String?
  rgIssuer             String?
  rgIssueDate          DateTime?
  rgState              String?
  gender               String?
  profession           String?
  nationality          String?
  maritalStatus        String?
  propertyRegime       String?
  spouseName           String?
  spouseCpf            String?
  zipCode              String?
  street               String?
  number               String?
  complement           String?
  neighborhood         String?
  city                 String?
  state                String?
  optInMarketing       Boolean?              @default(false)
  razaoSocial          String?
  cnpj                 String?
  inscricaoEstadual    String?
  website              String?
  responsibleName      String?
  responsibleCpf       String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  roles                UsersOnRoles[]
  documents            UserDocument[]
  bids                 Bid[]
  wins                 UserWin[]             @relation("LotWinner")
  maxBids              UserLotMaxBid[]
  uploadedMedia        MediaItem[]           @relation("UploadedBy")
  answeredQuestions    LotQuestion[]         @relation("AnsweredBy")
  askedQuestions       LotQuestion[]         @relation("AskedBy")
  auctionHabilitations AuctionHabilitation[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model JudicialDistrict {
  id                String             @id @default(cuid())
  name              String             @unique
  slug              String             @unique
  courtId           String
  stateId           String
  zipCode           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  court             Court              @relation(fields: [courtId], references: [id], onDelete: Cascade)
  state             StateInfo          @relation(fields: [stateId], references: [id], onDelete: Cascade)
  branches          JudicialBranch[]
  judicialProcesses JudicialProcess[]
}

model JudicialBranch {
  id                String             @id @default(cuid())
  name              String             @unique
  slug              String             @unique
  districtId        String
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  district          JudicialDistrict   @relation(fields: [districtId], references: [id], onDelete: Cascade)
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
}

model Seller {
  id                   String             @id @default(cuid())
  publicId             String             @unique
  slug                 String             @unique
  name                 String             @unique
  contactName          String?
  email                String?            @unique
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?            @db.Text
  isJudicial           Boolean            @default(false)
  judicialBranchId     String?            @unique
  userId               String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  user                 User?
  judicialBranch       JudicialBranch?    @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  auctions             Auction[]
  lots                 Lot[]
  bens                 Bem[]
  judicialProcesses    JudicialProcess[]
  directSaleOffers     DirectSaleOffer[]
}

model Auctioneer {
  id                 String    @id @default(cuid())
  publicId           String    @unique
  slug               String    @unique
  name               String
  registrationNumber String?
  contactName        String?
  email              String?   @unique
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?   @db.Text
  userId             String?   @unique
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  auctions           Auction[]
  lots               Lot[]
}

model JudicialProcess {
  id                String           @id @default(cuid())
  publicId          String           @unique
  processNumber     String           @unique
  isElectronic      Boolean          @default(true)
  courtId           String
  districtId        String
  branchId          String
  sellerId          String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  court             Court            @relation(fields: [courtId], references: [id])
  district          JudicialDistrict @relation(fields: [districtId], references: [id])
  branch            JudicialBranch   @relation(fields: [branchId], references: [id])
  seller            Seller?          @relation(fields: [sellerId], references: [id])
  parties           JudicialParty[]
  bens              Bem[]
  auctions          Auction[]
}

model JudicialParty {
  id             String          @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      String
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model AuctionHabilitation {
  id        String   @id @default(cuid())
  userId    String
  auctionId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, auctionId])
}

model AuctionStage {
  id              String    @id @default(cuid())
  name            String
  endDate         DateTime
  startDate       DateTime
  evaluationValue Float? // Added for per-stage pricing
  auction         Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId       String
}

model Auction {
  id                               String                @id @default(cuid())
  publicId                         String                @unique
  slug                             String                @unique
  title                            String
  description                      String?               @db.Text
  status                           String                @default("RASCUNHO")
  auctionDate                      DateTime
  endDate                          DateTime?
  auctioneerId                     String
  sellerId                         String
  categoryId                       String
  auctionType                      String?
  imageUrl                         String?
  imageMediaId                     String?
  documentsUrl                     String?
  visits                           Int                   @default(0)
  initialOffer                     Float?
  isFavorite                       Boolean               @default(false)
  dataAiHint                       String?
  judicialProcessId                String?
  participation                    String                @default("ONLINE")
  auctionMethod                    String                @default("STANDARD")
  address                          String?
  onlineUrl                        String?
  cityId                           String?
  stateId                          String?
  zipCode                          String?
  latitude                         Float?
  longitude                        Float?
  evaluationReportUrl              String?
  auctionCertificateUrl            String?
  sellingBranch                    String?
  automaticBiddingEnabled          Boolean               @default(false)
  allowInstallmentBids             Boolean               @default(true)
  silentBiddingEnabled             Boolean               @default(false)
  allowMultipleBidsPerUser         Boolean               @default(true)
  softCloseEnabled                 Boolean               @default(false)
  softCloseMinutes                 Int                   @default(2)
  estimatedRevenue                 Float?
  achievedRevenue                  Float?
  totalHabilitatedUsers            Int?
  isFeaturedOnMarketplace          Boolean               @default(false)
  marketplaceAnnouncementTitle     String?
  decrementAmount                  Float?
  decrementIntervalSeconds         Int?
  floorPrice                       Float?
  autoRelistSettings               Json?
  createdAt                        DateTime              @default(now())
  updatedAt                        DateTime              @updatedAt
  auctioneer                       Auctioneer            @relation(fields: [auctioneerId], references: [id])
  seller                           Seller                @relation(fields: [sellerId], references: [id])
  category                         LotCategory           @relation(fields: [categoryId], references: [id])
  judicialProcess                  JudicialProcess?      @relation(fields: [judicialProcessId], references: [id])
  city                             CityInfo?             @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state                            StateInfo?            @relation(fields: [stateId], references: [id], onDelete: SetNull)
  lots                             Lot[]
  bids                             Bid[]
  auctionStages                    AuctionStage[]
  habilitatedUsers                 AuctionHabilitation[]
}

model Lot {
  id                         String                @id @default(cuid())
  publicId                   String                @unique
  auctionId                  String
  slug                       String?
  number                     String?
  title                      String
  description                String?               @db.Text
  price                      Float
  initialPrice               Float?
  secondInitialPrice         Float?
  bidIncrementStep           Float?
  status                     String                @default("EM_BREVE")
  bidsCount                  Int                   @default(0)
  views                      Int                   @default(0)
  isFeatured                 Boolean               @default(false)
  isExclusive                Boolean               @default(false)
  discountPercentage         Int?
  additionalTriggers         Json?
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  inheritedMediaFromBemId    String?
  type                       String
  categoryId                 String
  subcategoryId              String?
  auctionName                String?
  sellerId                   String?
  sellerName                 String?
  auctioneerId               String?
  cityId                     String?
  stateId                    String?
  cityName                   String?
  stateUf                    String?
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?
  endDate                    DateTime?
  auctionDate                DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  dataAiHint                 String?
  winnerId                   String?
  winningBidTermUrl          String?
  allowInstallmentBids       Boolean               @default(false)
  isRelisted                 Boolean               @default(false)
  relistCount                Int                   @default(0)
  originalLotId              String?
  createdAt                  DateTime              @default(now())
  updatedAt                  DateTime              @updatedAt
  auction                    Auction               @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                   LotCategory           @relation(fields: [categoryId], references: [id])
  subcategory                Subcategory?          @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  seller                     Seller?               @relation(fields: [sellerId], references: [id])
  auctioneer                 Auctioneer?           @relation(fields: [auctioneerId], references: [id])
  city                       CityInfo?             @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state                      StateInfo?            @relation(fields: [stateId], references: [id], onDelete: SetNull)
  originalLot                Lot?                  @relation("RelistedLot", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot                Lot?                  @relation("RelistedLot")
  winner                     User?                 @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  bids                       Bid[]
  questions                  LotQuestion[]
  wins                       UserWin[]
  maxBids                    UserLotMaxBid[]
  bens                       LotBens[]
}

model LotBens {
  lot     Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId   String
  bem     Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId   String

  @@id([lotId, bemId])
}

model MediaItem {
  id                String   @id @default(cuid())
  fileName          String
  storagePath       String
  title             String?
  altText           String?
  caption           String?
  description       String?  @db.Text
  mimeType          String
  sizeBytes         Int
  urlOriginal       String
  urlThumbnail      String?
  urlMedium         String?
  urlLarge          String?
  linkedLotIds      Json?
  judicialProcessId String?
  dataAiHint        String?
  uploadedByUserId  String
  uploadedAt        DateTime @default(now())
  uploadedBy        User     @relation("UploadedBy", fields: [uploadedByUserId], references: [id])
}

model UserDocument {
  id                String        @id @default(cuid())
  userId            String
  documentTypeId    String
  status            String        @default("PENDING")
  fileUrl           String
  fileName          String?
  rejectionReason   String?       @db.Text
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType      DocumentType  @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String?
  amount        Float
  timestamp     DateTime @default(now())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String               @id @default(cuid())
  lotId            String               @unique
  userId           String
  winningBidAmount Float
  winDate          DateTime
  paymentStatus    String
  invoiceUrl       String?
  lot              Lot                  @relation(fields: [lotId], references: [id])
  user             User                 @relation("LotWinner", fields: [userId], references: [id])
  installments     InstallmentPayment[]
}

model InstallmentPayment {
  id                String  @id @default(cuid())
  userWinId         String
  userWin           UserWin @relation(fields: [userWinId], references: [id], onDelete: Cascade)
  installmentNumber Int
  amount            Float
  dueDate           DateTime
  status            String  @default("PENDENTE") // PENDENTE, PAGO, ATRASADO
  paymentDate       DateTime?
  paymentMethod     String?
  transactionId     String?

  @@unique([userWinId, installmentNumber])
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model LotQuestion {
  id                      String   @id @default(cuid())
  lotId                   String
  userId                  String // User who asked
  userDisplayName         String
  questionText            String   @db.Text
  isPublic                Boolean  @default(true)
  createdAt               DateTime @default(now())
  answerText              String?  @db.Text
  answeredAt              DateTime?
  answeredByUserId        String?
  answeredByUserDisplayName String?
  lot                     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user                    User     @relation("AskedBy", fields: [userId], references: [id], onDelete: Cascade)
  answeredBy              User?    @relation("AnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)
}

model VehicleMake {
  id      String         @id @default(cuid())
  name    String         @unique
  slug    String         @unique
  models  VehicleModel[]
}

model VehicleModel {
  id      String      @id @default(cuid())
  name    String
  slug    String
  makeId  String
  make    VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)

  @@unique([name, makeId])
}

model Bem {
  id                         String           @id @default(cuid())
  publicId                   String           @unique
  title                      String
  description                String?          @db.Text
  status                     String           @default("DISPONIVEL")
  categoryId                 String
  subcategoryId              String?
  judicialProcessId          String?
  sellerId                   String?
  evaluationValue            Float?
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  plate                      String?
  make                       String?
  model                      String?
  version                    String?
  year                       Int?
  modelYear                  Int?
  mileage                    Int?
  color                      String?
  fuelType                   String?
  transmissionType           String?
  bodyType                   String?
  vin                        String?          @unique
  renavam                    String?          @unique
  enginePower                String?
  numberOfDoors              Int?
  vehicleOptions             String?
  detranStatus               String?
  debts                      String?
  runningCondition           String?
  bodyCondition              String?
  tiresCondition             String?
  hasKey                     Boolean?
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?
  infrastructure             String?
  condoDetails               String?
  improvements               String?
  topography                 String?
  liensAndEncumbrances       String?
  propertyDebts              String?
  unregisteredRecords        String?
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String?
  includedAccessories        String?
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String?
  applianceCapacity          String?
  voltage                    String?
  applianceType              String?
  additionalFunctions        String?
  hoursUsed                  Int?
  engineType                 String?
  capacityOrPower            String?
  maintenanceHistory         String?
  installationLocation       String?
  compliesWithNR             String?
  operatingLicenses          String?
  breed                      String?
  age                        String?
  sex                        String?
  weight                     String?
  individualId               String?
  purpose                    String?
  sanitaryCondition          String?
  vaccinationStatus          String?
  lineage                    String?
  isPregnant                 Boolean?
  specialSkills              String?
  gtaDocument                String?
  breedRegistryDocument      String?
  furnitureType              String?
  material                   String?
  style                      String?
  dimensions                 String?
  pieceCount                 Int?
  jewelryType                String?
  metal                      String?
  gemstones                  String?
  totalWeight                String?
  jewelrySize                String?
  authenticityCertificate    String?
  workType                   String?
  artist                     String?
  period                     String?
  technique                  String?
  provenance                 String?
  boatType                   String?
  boatLength                 String?
  hullMaterial               String?
  onboardEquipment           String?
  productName                String?
  quantity                   String?
  packagingType              String?
  expirationDate             DateTime?
  storageConditions          String?
  preciousMetalType          String?
  purity                     String?
  forestGoodsType            String?
  volumeOrQuantity           String?
  species                    String?
  dofNumber                  String?
  createdAt                  DateTime         @default(now())
  updatedAt                  DateTime         @updatedAt
  category                   LotCategory      @relation(fields: [categoryId], references: [id])
  subcategory                Subcategory?     @relation(fields: [subcategoryId], references: [id])
  judicialProcess            JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller                     Seller?          @relation(fields: [sellerId], references: [id])
  lots                       LotBens[]
}

model DirectSaleOffer {
  id                   String   @id @default(cuid())
  publicId             String   @unique
  title                String
  description          String   @db.Text
  offerType            String
  price                Float?
  minimumOfferPrice    Float?
  status               String   @default("ACTIVE")
  categoryId           String
  sellerId             String
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int      @default(0)
  expiresAt            DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  category             LotCategory @relation(fields: [categoryId], references: [id])
  seller               Seller   @relation(fields: [sellerId], references: [id])
}
