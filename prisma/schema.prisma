// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// ===================================================
//                 Modelos Principais
// ===================================================

model User {
  id                  String   @id @default(cuid())
  email               String   @unique
  fullName            String?
  password            String?
  roleId              String?
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType @default(PHYSICAL)
  badges              Json?
  
  // Dados Pessoa Física
  cpf                 String?  @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?

  // Dados Pessoa Jurídica
  razaoSocial         String?
  cnpj                String?  @unique
  inscricaoEstadual   String?
  website             String?

  // Contato e Endereço
  cellPhone           String?
  homePhone           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?

  optInMarketing      Boolean  @default(false)
  
  // Timestamps
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relações
  role                Role?    @relation(fields: [roleId], references: [id], onDelete: SetNull)
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  documents           UserDocument[]
  mediaItems          MediaItem[] @relation("UploadedBy")
  bids                Bid[]
  wins                UserWin[]
  reviews             Review[]
  questions           LotQuestion[] @relation("AskedBy")
  answers             LotQuestion[] @relation("AnsweredBy")
  notifications       Notification[]
  maxBids             UserLotMaxBid[]
  blogPosts           BlogPost[]

  @@index([roleId])
}

model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?      @db.Text
  permissions     Json         // Alterado de String[] para Json para compatibilidade
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  users           User[]
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique // Ex: 'auctions:create'
  description String?
  createdAt   DateTime @default(now())
}

model LotCategory {
  id                  String   @id @default(cuid())
  name                String   @unique
  slug                String   @unique
  description         String?  @db.Text
  logoUrl             String?
  dataAiHintLogo      String?
  coverImageUrl       String?
  dataAiHintCover     String?
  megaMenuImageUrl    String?
  dataAiHintMegaMenu  String?
  itemCount           Int      @default(0)
  hasSubcategories    Boolean  @default(false)
  
  // Timestamps
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relações
  auctions            Auction[]
  lots                Lot[]
  subcategories       Subcategory[]
  bens                Bem[]
}

model Subcategory {
  id              String   @id @default(cuid())
  name            String
  slug            String   @unique
  description     String?  @db.Text
  iconUrl         String?
  iconMediaId     String?
  dataAiHintIcon  String?
  displayOrder    Int      @default(0)
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relação com Categoria Principal
  parentCategoryId String
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots             Lot[]
  bens             Bem[]

  @@unique([name, parentCategoryId])
  @@index([parentCategoryId])
}

model Seller {
  id                  String   @id @default(cuid())
  publicId            String   @unique @default(cuid())
  name                String   @unique
  slug                String   @unique
  contactName         String?
  email               String?
  phone               String?
  address             String?
  city                String?
  state               String?
  zipCode             String?
  website             String?
  isJudicial          Boolean  @default(false)
  
  // Logo
  logoUrl             String?
  logoMediaId         String?  @unique
  dataAiHintLogo      String?

  description         String?  @db.Text
  
  // Timestamps
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relações
  user                User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId              String?   @unique
  auctions            Auction[]
  directSaleOffers    DirectSaleOffer[]
  logo                MediaItem? @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  judicialBranch      JudicialBranch? @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  judicialBranchId    String? @unique
  bens                Bem[]
  judicialProcesses   JudicialProcess[]
  blogPosts           BlogPost[]
  
  @@index([userId])
  @@index([judicialBranchId])
}


model Auctioneer {
  id                      String   @id @default(cuid())
  publicId                String   @unique @default(cuid())
  name                    String   @unique
  slug                    String   @unique
  registrationNumber      String?
  contactName             String?
  email                   String?
  phone                   String?
  address                 String?
  city                    String?
  state                   String?
  zipCode                 String?
  website                 String?
  
  // Logo
  logoUrl                 String?
  logoMediaId             String? @unique
  dataAiHintLogo          String?

  description             String?  @db.Text

  // Timestamps
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  // Relações
  user                    User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId                  String?    @unique
  auctions                Auction[]
  logo                    MediaItem? @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@index([userId])
}

model Auction {
  id                          String    @id @default(cuid())
  publicId                    String    @unique @default(cuid())
  title                       String
  fullTitle                   String?   @db.Text
  description                 String?   @db.Text
  status                      AuctionStatus @default(RASCUNHO)
  auctionType                 AuctionType?
  auctionDate                 DateTime
  endDate                     DateTime?
  auctionStages               Json?
  city                        String?
  state                       String?
  imageUrl                    String?
  imageMediaId                String?
  dataAiHint                  String?
  documentsUrl                String?
  evaluationReportUrl         String?
  auctionCertificateUrl       String?
  sellingBranch               String?
  
  // Configs
  automaticBiddingEnabled     Boolean? @default(false)
  silentBiddingEnabled        Boolean? @default(false)
  allowMultipleBidsPerUser  Boolean? @default(true)
  allowInstallmentBids        Boolean? @default(false)
  softCloseEnabled            Boolean? @default(false)
  softCloseMinutes            Int?     @default(2)
  isFeaturedOnMarketplace     Boolean? @default(false)
  marketplaceAnnouncementTitle String?
  additionalTriggers          String?
  
  // Dutch Auction Configs
  decrementAmount             Float?
  decrementIntervalSeconds    Int?
  floorPrice                  Float?

  // Stats
  visits                      Int?     @default(0)
  totalLots                   Int?     @default(0)
  initialOffer                Float?
  estimatedRevenue            Float?
  achievedRevenue             Float?   @default(0)
  totalHabilitatedUsers       Int?     @default(0)
  
  // Timestamps
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt

  // Relações
  category                    LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId                  String?
  auctioneer                  Auctioneer? @relation(fields: [auctioneerId], references: [id])
  auctioneerId                String?
  seller                      Seller?     @relation(fields: [sellerId], references: [id])
  sellerId                    String?
  lots                        Lot[]
  bids                        Bid[]
  reviews                     Review[]
  questions                   LotQuestion[]
  judicialProcess             JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId           String?
  
  @@index([categoryId])
  @@index([auctioneerId])
  @@index([sellerId])
  @@index([judicialProcessId])
}

model Lot {
  id                          String    @id @default(cuid())
  publicId                    String    @unique @default(cuid())
  title                       String
  number                      String?
  description                 String?   @db.Text
  price                       Float
  initialPrice                Float?
  secondInitialPrice          Float?
  bidIncrementStep            Float?
  status                      LotStatus
  isFeatured                  Boolean?  @default(false)
  isExclusive                 Boolean?  @default(false)
  discountPercentage          Float?
  
  // Dates
  endDate                     DateTime?
  lotSpecificAuctionDate      DateTime?
  secondAuctionDate           DateTime?
  
  // Location
  address                     String?
  cityName                    String?
  stateUf                     String?
  latitude                    Float?
  longitude                   Float?
  mapAddress                  String?
  mapEmbedUrl                 String?
  mapStaticImageUrl           String?
  
  // Images
  imageUrl                    String?
  imageMediaId                String?
  dataAiHint                  String?
  galleryImageUrls            Json?
  mediaItemIds                Json?
  
  // Stats
  views                       Int?      @default(0)
  bidsCount                   Int?      @default(0)

  // Judicial Info
  judicialProcessNumber       String?
  courtDistrict               String?
  courtName                   String?
  publicProcessUrl            String?
  propertyRegistrationNumber  String?
  propertyLiens               String?   @db.Text
  knownDebts                  String?   @db.Text
  additionalDocumentsInfo     String?   @db.Text
  winningBidTermUrl           String?
  
  // Financial Info
  reservePrice                Float?
  evaluationValue             Float?
  debtAmount                  Float?
  itbiValue                   Float?

  // Timestamps
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt

  // Relações
  auction                     Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                   String
  category                    LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId                  String?
  subcategory                 Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId               String?
  bens                        Bem[]
  bids                        Bid[]
  reviews                     Review[]
  questions                   LotQuestion[]
  wins                        UserWin[]
  maxBids                     UserLotMaxBid[]
  
  @@index([auctionId])
  @@index([categoryId])
  @@index([subcategoryId])
}


model Bem {
  id          String   @id @default(cuid())
  publicId    String   @unique @default(cuid())
  title       String
  description String?  @db.Text
  status      BemStatus @default(DISPONIVEL)
  
  // Foreign Keys
  judicialProcessId String?
  sellerId          String?
  categoryId        String?
  subcategoryId     String?
  
  // Generic
  evaluationValue     Float?
  imageUrl            String?
  imageMediaId        String?
  galleryImageUrls    Json?
  mediaItemIds        Json?
  dataAiHint          String?
  
  // Location
  locationCity        String?
  locationState       String?
  address             String?
  latitude            Float?
  longitude           Float?

  // Veículos
  plate                 String?
  make                  String?
  model                 String?
  version               String?
  year                  Int?
  modelYear             Int?
  mileage               Int?
  color                 String?
  fuelType              String?
  transmissionType      String?
  bodyType              String?
  vin                   String?
  renavam               String?
  enginePower           String?
  numberOfDoors         Int?
  vehicleOptions        String? @db.Text
  detranStatus          String?
  debts                 String? @db.Text
  runningCondition      String?
  bodyCondition         String?
  tiresCondition        String?
  hasKey                Boolean?
  
  // Imóveis
  propertyType          String?
  propertyRegistrationNumber String?
  iptuNumber            String?
  isOccupied            Boolean?
  area                  Float? // Nome genérico para área total/útil
  totalArea             Float?
  builtArea             Float?
  bedrooms              Int?
  suites                Int?
  bathrooms             Int?
  parkingSpaces         Int?
  constructionType      String?
  finishes              String? @db.Text
  infrastructure        String? @db.Text
  condoDetails          String? @db.Text
  improvements          String? @db.Text
  topography            String?
  liensAndEncumbrances  String? @db.Text
  propertyDebts         String? @db.Text
  unregisteredRecords   String? @db.Text
  hasHabiteSe           Boolean?
  zoningRestrictions    String?
  amenities             String[] // Para MySQL, isso será tratado como TEXT/JSON
  
  // Eletrônicos
  brand                 String?
  serialNumber          String?
  itemCondition         String?
  specifications        String? @db.Text
  includedAccessories   String? @db.Text
  batteryCondition      String?
  hasInvoice            Boolean?
  hasWarranty           Boolean?
  repairHistory         String? @db.Text
  
  // Eletrodomésticos
  applianceCapacity     String?
  voltage               String?
  applianceType         String?
  additionalFunctions   String? @db.Text
  
  // Máquinas e Equipamentos
  hoursUsed             Int?
  engineType            String?
  capacityOrPower       String?
  maintenanceHistory    String? @db.Text
  installationLocation  String?
  compliesWithNR        String?
  operatingLicenses     String?
  
  // Semoventes
  breed                 String?
  age                   String?
  sex                   LivestockSex?
  weight                String?
  individualId          String?
  purpose               String?
  sanitaryCondition     String? @db.Text
  lineage               String? @db.Text
  isPregnant            Boolean?
  specialSkills         String? @db.Text
  gtaDocument           String?
  breedRegistryDocument String?

  // Timestamps
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relações
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller            Seller?          @relation(fields: [sellerId], references: [id])
  category          LotCategory?     @relation(fields: [categoryId], references: [id])
  subcategory       Subcategory?     @relation(fields: [subcategoryId], references: [id])
  lots              Lot[]

  @@index([judicialProcessId])
  @@index([sellerId])
  @@index([categoryId])
  @@index([subcategoryId])
}


model Bid {
  id              String   @id @default(cuid())
  amount          Float
  timestamp       DateTime @default(now())

  // Relações
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId           String
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId       String
  bidder          User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId        String
  bidderDisplay   String // Nome ou apelido para exibição no histórico

  @@index([lotId])
  @@index([bidderId])
}

model UserWin {
  id                String    @id @default(cuid())
  winningBidAmount  Float
  winDate           DateTime  @default(now())
  paymentStatus     PaymentStatus @default(PENDENTE)
  invoiceUrl        String?

  // Relações
  lot               Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId             String    @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String

  @@index([lotId])
  @@index([userId])
}

model UserLotMaxBid {
  id          String   @id @default(cuid())
  maxAmount   Float
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relações
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  lot         Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId       String

  @@unique([userId, lotId])
  @@index([userId])
  @@index([lotId])
}

model Review {
  id                String   @id @default(cuid())
  rating            Int
  comment           String?  @db.Text
  createdAt         DateTime @default(now())
  
  // Relações
  lot               Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId             String
  auction           Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId         String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  userDisplayName   String

  @@index([lotId])
  @@index([userId])
}

model LotQuestion {
  id                String   @id @default(cuid())
  questionText      String   @db.Text
  isPublic          Boolean  @default(true)
  createdAt         DateTime @default(now())
  
  answerText        String?  @db.Text
  answeredAt        DateTime?
  
  // Relações
  lot               Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId             String
  auction           Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId         String
  user              User     @relation("AskedBy", fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  userDisplayName   String
  answeredBy        User?    @relation("AnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)
  answeredByUserId  String?
  answeredByUserDisplayName String?

  @@index([lotId])
  @@index([userId])
}


model DocumentType {
  id              String   @id @default(cuid())
  name            String   @unique
  description     String?
  isRequired      Boolean  @default(false)
  allowedFormats  String?  // e.g., "pdf,jpg,png"
  displayOrder    Int      @default(0)
  appliesTo       String?  // e.g., "PHYSICAL,LEGAL"
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  userDocuments   UserDocument[]
}

model UserDocument {
  id              String   @id @default(cuid())
  fileUrl         String?
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  uploadDate      DateTime?
  analysisDate    DateTime?
  rejectionReason String?  @db.Text

  // Relações
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  documentType    DocumentType @relation(fields: [documentTypeId], references: [id])
  documentTypeId  String
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([userId, documentTypeId])
  @@index([userId])
  @@index([documentTypeId])
}


model DirectSaleOffer {
  id                        String    @id @default(cuid())
  publicId                  String    @unique @default(cuid())
  title                     String
  description               String?   @db.Text
  offerType                 DirectSaleOfferType
  status                    DirectSaleOfferStatus
  price                     Float?
  minimumOfferPrice         Float?

  // Location
  locationCity              String?
  locationState             String?
  
  // Images
  imageUrl                  String?
  imageMediaId              String?
  dataAiHint                String?
  galleryImageUrls          Json?
  mediaItemIds              Json?
  
  // Meta
  itemsIncluded             Json?
  tags                      Json?
  views                     Int?      @default(0)
  proposalsCount            Int?      @default(0)
  
  // Timestamps
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  expiresAt                 DateTime?

  // Relações
  category                  LotCategory @relation(fields: [categoryId], references: [id])
  categoryId                String
  seller                    Seller      @relation(fields: [sellerId], references: [id])
  sellerId                  String
  mediaItems                MediaItem[] @relation("OfferMedia")
  
  @@index([categoryId])
  @@index([sellerId])
}


model MediaItem {
  id                        String   @id @default(cuid())
  fileName                  String
  storagePath               String?
  title                     String?
  altText                   String?
  caption                   String?
  description               String?   @db.Text
  mimeType                  String
  sizeBytes                 Int
  urlOriginal               String   @db.Text
  urlThumbnail              String?  @db.Text
  urlMedium                 String?  @db.Text
  urlLarge                  String?  @db.Text
  uploadedBy                String?  // userId
  dataAiHint                String?
  
  // Timestamps
  uploadedAt                DateTime @default(now())

  // Relações
  user                      User?    @relation("UploadedBy", fields: [uploadedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sellerLogo                Seller[] @relation("SellerLogo")
  auctioneerLogo            Auctioneer[] @relation("AuctioneerLogo")
  offerMedia                DirectSaleOffer[] @relation("OfferMedia")
  blogPostFeaturedImage     BlogPost[] @relation("FeaturedImage")
  
  @@index([uploadedBy])
}


model BlogPost {
  id                String      @id @default(cuid())
  title             String
  slug              String      @unique
  content           String      @db.Text
  excerpt           String?     @db.Text
  status            PostStatus  @default(DRAFT)
  publishedAt       DateTime?
  
  // Timestamps
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relações
  author            User        @relation(fields: [authorId], references: [id])
  authorId          String
  seller            Seller?     @relation(fields: [sellerId], references: [id])
  sellerId          String?
  tags              Tag[]
  featuredImage     MediaItem?  @relation("FeaturedImage", fields: [featuredImageId], references: [id])
  featuredImageId   String?

  @@index([authorId])
  @@index([sellerId])
}

model Tag {
    id        String      @id @default(cuid())
    name      String      @unique
    slug      String      @unique
    blogPosts BlogPost[]
}

model Notification {
  id        String   @id @default(cuid())
  message   String   @db.Text
  link      String?
  isRead    Boolean  @default(false)
  
  // Timestamps
  createdAt DateTime @default(now())

  // Relação
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([userId])
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}


// --- JUDICIAL-RELATED MODELS ---
model State {
  id           String   @id @default(cuid())
  name         String   @unique
  uf           String   @unique
  slug         String   @unique
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relações
  courts       Court[]
  districts    JudicialDistrict[]
  lots         Lot[]
  cities       City[]
  
  @@index([uf])
}

model City {
  id           String   @id @default(cuid())
  name         String
  slug         String
  ibgeCode     String?
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relações
  state        State    @relation(fields: [stateId], references: [id])
  stateId      String
  stateUf      String   // Denormalized for convenience
  lots         Lot[]
  
  @@unique([name, stateId])
  @@index([stateId])
}


model Court {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  website   String?
  
  // Relações
  state     State     @relation(fields: [stateUf], references: [uf])
  stateUf   String
  districts JudicialDistrict[]
  processes JudicialProcess[]
  
  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([stateUf])
}

model JudicialDistrict {
  id        String    @id @default(cuid())
  name      String
  slug      String
  zipCode   String?
  
  // Relações
  court     Court     @relation(fields: [courtId], references: [id])
  courtId   String
  state     State     @relation(fields: [stateId], references: [id])
  stateId   String
  branches  JudicialBranch[]
  processes JudicialProcess[]
  
  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([name, courtId])
  @@index([courtId])
  @@index([stateId])
}

model JudicialBranch {
  id           String     @id @default(cuid())
  name         String
  slug         String
  contactName  String?
  phone        String?
  email        String?
  
  // Relações
  district     JudicialDistrict @relation(fields: [districtId], references: [id])
  districtId   String
  processes    JudicialProcess[]
  seller       Seller?

  // Timestamps
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([name, districtId])
  @@index([districtId])
}

model JudicialProcess {
  id           String    @id @default(cuid())
  publicId     String    @unique @default(cuid())
  processNumber String   @unique
  isElectronic Boolean   @default(true)

  // Timestamps
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relações
  courtId      String
  districtId   String
  branchId     String
  sellerId     String?
  court        Court             @relation(fields: [courtId], references: [id])
  district     JudicialDistrict  @relation(fields: [districtId], references: [id])
  branch       JudicialBranch    @relation(fields: [branchId], references: [id])
  parties      ProcessParty[]
  bens         Bem[]
  seller       Seller?           @relation(fields: [sellerId], references: [id])

  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
}

model ProcessParty {
  id             String         @id @default(cuid())
  name           String
  documentNumber String?
  partyType      ProcessPartyType

  // Relação
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId      String

  @@unique([processId, name, partyType])
  @@index([processId])
}

model PlatformSettings {
    id                          String    @id @default("global")
    siteTitle                   String?
    siteTagline                 String?
    galleryImageBasePath        String?
    storageProvider             String?
    firebaseStorageBucket       String?
    activeThemeName             String?
    themes                      Json?
    platformPublicIdMasks       Json?
    homepageSections            Json?
    mentalTriggerSettings       Json?
    sectionBadgeVisibility      Json?
    mapSettings                 Json?
    searchPaginationType        String?
    searchItemsPerPage          Int?
    searchLoadMoreCount         Int?
    showCountdownOnLotDetail    Boolean?
    showCountdownOnCards        Boolean?
    showRelatedLotsOnLotDetail  Boolean?
    relatedLotsCount            Int?
    biddingSettings             Json?
    variableIncrementTable      Json?
    defaultListItemsPerPage     Int?
    updatedAt                   DateTime  @updatedAt
}

// ===================================================
//                     ENUMS
// ===================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ACTIVE
  SOLD
  EXPIRED
  PENDING_APPROVAL
}

enum LivestockSex {
  Macho
  Fêmea
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}
```
- src/types/index.js:
```ts
// src/types/index.js
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
```
