// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. Authentication & Authorization
// =================================================================
model User {
  id                  String   @id @default(uuid())
  email               String   @unique
  password            String?
  fullName            String?
  habilitationStatus  String   @default("PENDING_DOCUMENTS")
  accountType         String   @default("PHYSICAL")
  avatarUrl           String?  @db.VarChar(255)
  dataAiHint          String?  @db.VarChar(100)
  badges              Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  optInMarketing      Boolean? @default(false)
  roles               UsersOnRoles[]
  seller              Seller?
  auctioneer          Auctioneer?
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]       @relation("LotWinner")
  maxBids             UserLotMaxBid[]
  uploadedMedia       MediaItem[]     @relation("UploadedBy")
  answeredQuestions   LotQuestion[]   @relation("AnsweredByUser")
  habilitations       AuctionHabilitation[]
  questions           LotQuestion[]
  wonLots             Lot[]           @relation("LotWinner")
}

model Role {
  id              String   @id @default(uuid())
  name            String   @unique
  nameNormalized  String   @unique
  description     String?
  permissions     String[] @db.Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  users           UsersOnRoles[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

// =================================================================
// 2. Geographic & Judicial Entities
// =================================================================

model State {
  id        String   @id @default(uuid())
  name      String   @unique
  uf        String   @unique @db.VarChar(2)
  slug      String   @unique
  cities    City[]
  courts    Court[]
  districts JudicialDistrict[]
  lots      Lot[]
  auctions  Auction[]
}

model City {
  id        String   @id @default(uuid())
  name      String
  slug      String?
  stateId   String
  state     State    @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateUf   String?  @db.VarChar(2)
  ibgeCode  String?  @unique @db.VarChar(10)
  lotCount  Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lots      Lot[]
  auctions  Auction[]

  @@index([stateId])
}

model Court {
  id                 String               @id @default(uuid())
  name               String               @unique
  slug               String?              @unique
  stateId            String?
  state              State?               @relation(fields: [stateId], references: [id], onDelete: SetNull)
  website            String?
  judicialDistricts  JudicialDistrict[]
  judicialProcesses  JudicialProcess[]
  auctions           Auction[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  @@index([stateId])
}

model JudicialDistrict {
  id                 String               @id @default(uuid())
  name               String
  slug               String?              @unique
  courtId            String
  court              Court                @relation(fields: [courtId], references: [id], onDelete: Cascade)
  stateId            String
  state              State                @relation(fields: [stateId], references: [id], onDelete: Cascade)
  zipCode            String?              @db.VarChar(10)
  judicialBranches   JudicialBranch[]
  judicialProcesses  JudicialProcess[]
  auctions           Auction[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  @@index([courtId])
  @@index([stateId])
}

model JudicialBranch {
  id                 String            @id @default(uuid())
  name               String
  slug               String?           @unique
  districtId         String
  district           JudicialDistrict  @relation(fields: [districtId], references: [id], onDelete: Cascade)
  contactName        String?
  phone              String?
  email              String?
  judicialProcesses  JudicialProcess[]
  auctions           Auction[]
  sellers            Seller[]
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  @@index([districtId])
}

model JudicialProcess {
  id             String            @id @default(uuid())
  publicId       String?           @unique
  processNumber  String
  isElectronic   Boolean           @default(true)
  courtId        String
  court          Court             @relation(fields: [courtId], references: [id], onDelete: Cascade)
  districtId     String
  district       JudicialDistrict  @relation(fields: [districtId], references: [id], onDelete: Cascade)
  branchId       String
  branch         JudicialBranch    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  seller         Seller?           @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId       String?
  parties        JudicialParty[]
  bens           Bem[]
  auctions       Auction[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
  @@index([sellerId])
}

model JudicialParty {
  id             String          @id @default(uuid())
  processId      String
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  name           String
  documentNumber String?         @db.VarChar(50)
  partyType      String          @db.VarChar(50)

  @@index([processId])
}


// =================================================================
// 3. Core Business Entities
// =================================================================

model AuctionHabilitation {
  userId     String
  auctionId  String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction    Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@id([userId, auctionId])
}

model Auction {
  id                             String                 @id @default(uuid())
  publicId                       String?                @unique
  slug                           String?                @unique
  title                          String
  description                    String?                @db.Text
  status                         String                 @default("RASCUNHO")
  auctionDate                    DateTime
  endDate                        DateTime?
  auctioneerId                   String?
  auctioneer                     Auctioneer?            @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  sellerId                       String?
  seller                         Seller?                @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  categoryId                     String?
  category                       LotCategory?           @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  lots                           Lot[]
  bids                           Bid[]
  auctionType                    String?
  auctionStages                  AuctionStage[]
  visits                         Int?                   @default(0)
  imageUrl                       String?                @db.VarChar(255)
  imageMediaId                   String?
  dataAiHint                     String?                @db.VarChar(100)
  documentsUrl                   String?                @db.VarChar(255)
  isFeaturedOnMarketplace        Boolean?               @default(false)
  marketplaceAnnouncementTitle   String?
  cityId                         String?
  city                           City?                  @relation(fields: [cityId], references: [id])
  stateId                        String?
  state                          State?                 @relation(fields: [stateId], references: [id])
  judicialProcessId              String?
  judicialProcess                JudicialProcess?       @relation(fields: [judicialProcessId], references: [id])
  courtId                        String?
  court                          Court?                 @relation(fields: [courtId], references: [id])
  districtId                     String?
  district                       JudicialDistrict?      @relation(fields: [districtId], references: [id])
  branchId                       String?
  branch                         JudicialBranch?        @relation(fields: [branchId], references: [id])
  habilitatedUsers               AuctionHabilitation[]
  createdAt                      DateTime               @default(now())
  updatedAt                      DateTime               @updatedAt

  // Novas colunas
  participation                  String                 @default("ONLINE")
  auctionMethod                  String                 @default("STANDARD")
  address                        String?
  zipCode                        String?
  onlineUrl                      String?
  automaticBiddingEnabled        Boolean                @default(false)
  allowInstallmentBids           Boolean                @default(true)
  silentBiddingEnabled           Boolean                @default(false)
  allowMultipleBidsPerUser       Boolean                @default(true)
  softCloseEnabled               Boolean                @default(false)
  softCloseMinutes               Int                    @default(2)
  estimatedRevenue               Decimal?               @db.Decimal(15, 2)
  achievedRevenue                Decimal?               @db.Decimal(15, 2)
  totalHabilitatedUsers          Int?                   @default(0)
  additionalTriggers             Json?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  decrementAmount                Decimal?               @db.Decimal(15, 2)
  decrementIntervalSeconds       Int?
  floorPrice                     Decimal?               @db.Decimal(15, 2)

  @@index([auctioneerId])
  @@index([sellerId])
  @@index([categoryId])
  @@index([judicialProcessId])
  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
  @@index([cityId])
  @@index([stateId])
}

model AuctionStage {
  id             String   @id @default(uuid())
  auctionId      String
  auction        Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  name           String
  startDate      DateTime
  endDate        DateTime
  initialPrice   Decimal? @db.Decimal(15, 2)
  statusText     String?

  @@index([auctionId])
}

model LotAuctionStageDetails {
  id              String       @id @default(uuid())
  lotId           String
  lot             Lot          @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionStageId  String
  auctionStage    AuctionStage @relation(fields: [auctionStageId], references: [id], onDelete: Cascade)
  initialBid      Decimal      @db.Decimal(15, 2)
  bidIncrement    Decimal      @db.Decimal(15, 2)
  evaluationValue Decimal?     @db.Decimal(15, 2)

  @@unique([lotId, auctionStageId])
  @@index([lotId])
  @@index([auctionStageId])
}


model Lot {
  id                         String                  @id @default(uuid())
  publicId                   String?                 @unique
  auctionId                  String
  auction                    Auction                 @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  number                     String?
  title                      String
  description                String?                 @db.Text
  price                      Decimal                 @db.Decimal(15, 2)
  status                     String                  @default("EM_BREVE")
  bids                       Bid[]
  bidsCount                  Int?                    @default(0)
  views                      Int?                    @default(0)
  isFeatured                 Boolean?                @default(false)
  isExclusive                Boolean?                @default(false)
  additionalTriggers         Json?
  imageUrl                   String?                 @db.VarChar(255)
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  inheritedMediaFromBemId    String?                 // ID do Bem cuja mídia será usada
  type                       String?
  categoryId                 String?
  category                   LotCategory?            @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategoryId              String?
  subcategory                Subcategory?            @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  sellerId                   String?
  seller                     Seller?                 @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  cityId                     String?
  city                       City?                   @relation(fields: [cityId], references: [id])
  stateId                    String?
  state                      State?                  @relation(fields: [stateId], references: [id])
  latitude                   Decimal?                @db.Decimal(10, 8)
  longitude                  Decimal?                @db.Decimal(11, 8)
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?
  endDate                    DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  dataAiHint                 String?                 @db.VarChar(100)
  winner                     User?                   @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId                   String?
  winningBidTermUrl          String?
  allowInstallmentBids       Boolean?                @default(false)
  bens                       LotBens[]
  questions                  LotQuestion[]
  reviews                    Review[]
  stageDetails               LotAuctionStageDetails[]
  wins                       UserWin[]
  maxBids                    UserLotMaxBid[]
  createdAt                  DateTime                @default(now())
  updatedAt                  DateTime                @updatedAt
  
  @@index([auctionId])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([sellerId])
  @@index([winnerId])
  @@index([cityId])
  @@index([stateId])
}

model Review {
  id              String   @id @default(uuid())
  lotId           String
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())

  @@index([lotId])
  @@index([userId])
}

model LotQuestion {
  id                 String   @id @default(uuid())
  lotId              String
  lot                Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId          String
  user               User     @relation(fields: [userId], references: [id])
  userId             String
  userDisplayName    String
  questionText       String   @db.Text
  answerText         String?  @db.Text
  isPublic           Boolean  @default(true)
  answeredBy         User?    @relation("AnsweredByUser", fields: [answeredByUserId], references: [id])
  answeredByUserId   String?
  answeredAt         DateTime?
  createdAt          DateTime @default(now())

  @@index([lotId])
  @@index([userId])
  @@index([answeredByUserId])
}

model Bid {
  id            String   @id @default(uuid())
  lotId         String
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId     String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidderId      String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())

  @@index([lotId])
  @@index([auctionId])
  @@index([bidderId])
}

model UserWin {
  id               String  @id @default(uuid())
  lotId            String  @unique
  lot              Lot     @relation(fields: [lotId], references: [id])
  userId           String
  user             User    @relation("LotWinner", fields: [userId], references: [id])
  winningBidAmount Decimal @db.Decimal(15, 2)
  winDate          DateTime
  paymentStatus    String  @default("PENDENTE")
  invoiceUrl       String?

  @@index([userId])
}

// Join table for Lots and Bens (Many-to-Many)
model LotBens {
  lotId String
  bemId String
  lot   Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bem   Bem  @relation(fields: [bemId], references: [id], onDelete: Cascade)

  @@id([lotId, bemId])
  @@index([bemId])
}


// =================================================================
// 4. Supporting Entities
// =================================================================

model LotCategory {
  id                 String              @id @default(uuid())
  name               String              @unique
  slug               String              @unique
  description        String?
  hasSubcategories   Boolean
  logoUrl            String?
  logoMediaId        String?
  dataAiHintIcon     String?
  coverImageUrl      String?
  coverImageMediaId  String?
  dataAiHintCover    String?
  megaMenuImageUrl   String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu String?
  lots               Lot[]
  bens               Bem[]
  subcategories      Subcategory[]
  directSaleOffers   DirectSaleOffer[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model Subcategory {
  id               String      @id @default(uuid())
  name             String
  slug             String?
  parentCategoryId String
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  description      String?
  displayOrder     Int         @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  lots             Lot[]
  bens             Bem[]

  @@index([parentCategoryId])
}

model Auctioneer {
  id                   String    @id @default(uuid())
  publicId             String?   @unique
  slug                 String?   @unique
  name                 String
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?   @db.VarChar(255)
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?   @db.Text
  userId               String?   @unique
  user                 User?     @relation(fields: [userId], references: [id])
  auctions             Auction[]
  lots                 Lot[]
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model Seller {
  id                 String            @id @default(uuid())
  publicId           String?           @unique
  slug               String?           @unique
  name               String            @unique
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?           @db.VarChar(255)
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?           @db.Text
  isJudicial         Boolean           @default(false)
  userId             String?           @unique
  user               User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  judicialBranchId   String?           @unique
  judicialBranch     JudicialBranch?   @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  auctions           Auction[]
  lots               Lot[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
  judicialProcesses  JudicialProcess[]
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
}

