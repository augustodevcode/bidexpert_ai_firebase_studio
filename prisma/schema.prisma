
// /prisma/schema.prisma
/**
 * @fileoverview Este é o schema principal do Prisma para a aplicação BidExpert.
 * Ele define todos os modelos de dados, suas relações e configurações de banco de dados.
 */
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

// ==============================================================================
// Modelos Globais (Sem Tenant ID)
// ==============================================================================
model User {
  id                       BigInt                   @id @default(autoincrement())
  email                    String                   @unique
  password                 String?                  @db.Text
  fullName                 String?                  @db.Text
  cpf                      String?                  @db.Text
  rgNumber                 String?                  @db.Text
  rgIssuer                 String?                  @db.Text
  rgIssueDate              DateTime?
  dateOfBirth              DateTime?
  cellPhone                String?                  @db.Text
  homePhone                String?                  @db-Text
  gender                   String?                  @db.Text
  profession               String?                  @db.Text
  nationality              String?                  @db.Text
  maritalStatus            String?                  @db.Text
  propertyRegime           String?                  @db.Text
  spouseName               String?                  @db.Text
  spouseCpf                String?                  @db.Text
  zipCode                  String?                  @db.Text
  street                   String?                  @db.Text
  number                   String?                  @db.Text
  complement               String?                  @db.Text
  neighborhood             String?                  @db.Text
  city                     String?                  @db.Text
  state                    String?                  @db.Text
  avatarUrl                String?                  @db.Text
  dataAiHint               String?                  @db.Text
  habilitationStatus       UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType              AccountType            @default(PHYSICAL)
  badges                   Json?
  razaoSocial              String?                  @db.Text
  cnpj                     String?                  @db.Text
  inscricaoEstadual        String?                  @db.Text
  website                  String?                  @db.Text
  responsibleName          String?                  @db.Text
  responsibleCpf           String?                  @db.Text
  optInMarketing           Boolean?                 @default(false)
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
  bids                     Bid[]
  notifications            Notification[]
  habilitations            AuctionHabilitation[]
  wins                     UserWin[]
  reviews                  Review[]
  questions                LotQuestion[]
  documents                UserDocument[]
  roles                    UsersOnRoles[]
  sellers                  Seller[]
  auctioneers              Auctioneer[]
  createdMedia             MediaItem[]            @relation("UploadedBy")
  tenants                  UsersOnTenants[]
  reportsCreated           Report[]
  UserLotMaxBids           UserLotMaxBid[]

  @@index([email])
}

model Role {
  id              BigInt           @id @default(autoincrement())
  name            String           @unique
  nameNormalized  String           @unique
  description     String?
  permissions     Json?
  users           UsersOnRoles[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     BigInt
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     BigInt
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
  @@index([roleId])
}

model Tenant {
  id          BigInt         @id @default(autoinoupsertnt())
  name        String
  subdomain   String         @unique
  domain      String?        @unique
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  users       UsersOnTenants[]
  auctions    Auction[]
  bids        Bid[]
  lots        Lot[]
  assets      Asset[]
  sellers     Seller[]
  auctioneers Auctioneer[]
  judicialProcesses JudicialProcess[]
  notifications Notification[]
  subscribers Subscriber[]
  settings    PlatformSettings?
  reports     Report[]
}

model UsersOnTenants {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     BigInt
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId   BigInt
  assignedAt DateTime @default(now())
  assignedBy String?

  @@id([userId, tenantId])
  @@index([tenantId])
}

model Lot {
  id                   BigInt       @id @default(autoincrement())
  publicId             String?      @unique
  auctionId            BigInt
  number               String?
  title                String
  description          String?      @db.Text
  slug                 String?
  price                Decimal      @db.Decimal(15, 2)
  initialPrice         Decimal?     @db.Decimal(15, 2)
  secondInitialPrice   Decimal?     @db.Decimal(15, 2)
  bidIncrementStep     Decimal?     @db.Decimal(10, 2)
  status               LotStatus    @default(EM_BREVE)
  bidsCount            Int?         @default(0)
  views                Int?         @default(0)
  isFeatured           Boolean?     @default(false)
  isExclusive          Boolean?     @default(false)
  discountPercentage   Int?
  additionalTriggers   Json?
  imageUrl             String?      @db.Text
  imageMediaId         String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  type                 String
  condition            String?
  dataAiHint           String?
  winningBidTermUrl    String?
  allowInstallmentBids Boolean?     @default(false)
  isRelisted           Boolean      @default(false)
  relistCount          Int          @default(0)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  endDate              DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate    DateTime?
  tenantId             BigInt
  categoryId           BigInt?
  subcategoryId        BigInt?
  sellerId             BigInt?
  auctioneerId         BigInt?
  cityId               BigInt?
  stateId              BigInt?
  cityName             String?
  stateUf              String?
  latitude             Decimal?
  longitude            Decimal?
  mapAddress           String?
  winnerId             BigInt?
  auctionDate          DateTime?
  mapEmbedUrl          String?      @db.Text
  mapStaticImageUrl    String?      @db.Text
  stageDetails         Json?
  auctionName          String?
  evaluationValue      Decimal?     @db.Decimal(15, 2)
  originalLotId        BigInt?      @unique @map("original_lot_id")
  sellerName           String?
  inheritedMediaFromAssetId BigInt?

  auction           Auction            @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category          LotCategory?       @relation(fields: [categoryId], references: [id])
  subcategory       Subcategory?       @relation(fields: [subcategoryId], references: [id])
  seller            Seller?            @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  auctioneer        Auctioneer?        @relation(fields: [auctioneerId], references: [id])
  bids              Bid[]
  wins              UserWin[]
  reviews           Review[]
  questions         LotQuestion[]
  assets            AssetsOnLots[]
  city              City?              @relation(fields: [cityId], references: [id])
  state             State?             @relation(fields: [stateId], references: [id])
  winner            User?              @relation("LotsWon", fields: [winnerId], references: [id], onDelete: SetNull)
  originalLot       Lot?               @relation("RelistedLot", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedVersion   Lot?               @relation("RelistedLot")
  tenant            Tenant             @relation(fields: [tenantId], references: [id])
  lotPrices         LotStagePrice[]
  judicialProcesses JudicialProcess[]

  @@unique([auctionId, number])
  @@index([tenantId])
}

model Asset {
  id                BigInt       @id @default(autoincrement())
  publicId          String       @unique
  title             String
  description       String?      @db.Text
  status            AssetStatus  @default(DISPONIVEL)
  categoryId        BigInt?
  subcategoryId     BigInt?
  judicialProcessId BigInt?
  sellerId          BigInt?
  evaluationValue   Decimal?     @db.Decimal(15, 2)
  imageUrl          String?
  imageMediaId      String?
  galleryImageUrls  Json?
  mediaItemIds      Json?
  dataAiHint        String?
  locationCity      String?
  locationState     String?
  address           String?
  latitude          Decimal?
  longitude         Decimal?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  tenantId          BigInt
  properties        Json?

  category      LotCategory?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory   Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller        Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  tenant        Tenant           @relation(fields: [tenantId], references: [id])
  lots          AssetsOnLots[]
  gallery       AssetMedia[]
}

model AssetsOnLots {
  lot        Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId      BigInt
  asset      Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  assetId    BigInt
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([lotId, assetId])
}

model Auction {
  id                          BigInt                 @id @default(autoincrement())
  publicId                    String?                @unique
  slug                        String?                @unique
  title                       String
  description                 String?                @db.Text
  status                      AuctionStatus          @default(RASCUNHO)
  auctionDate                 DateTime?
  endDate                     DateTime?
  totalLots                   Int                    @default(0)
  visits                      Int                    @default(0)
  totalHabilitatedUsers       Int                    @default(0)
  initialOffer                Decimal?               @db.Decimal(15, 2)
  auctionType                 AuctionType            @default(EXTRAJUDICIAL)
  auctionMethod               AuctionMethod          @default(STANDARD)
  participation               AuctionParticipation   @default(ONLINE)
  onlineUrl                   String?                @db.VarChar(500)
  address                     String?
  zipCode                     String?                @db.VarChar(10)
  latitude                    Decimal?               @db.Decimal(10, 8)
  longitude                   Decimal?               @db.Decimal(11, 8)
  documentsUrl                String?                @db.VarChar(500)
  isFeaturedOnMarketplace     Boolean                @default(false)
  softCloseEnabled            Boolean?               @default(false)
  softCloseMinutes            Int?
  sellingBranch               String?
  additionalTriggers          Json?
  createdAt                   DateTime               @default(now())
  updatedAt                   DateTime               @updatedAt
  tenantId                    BigInt
  auctioneerId                BigInt?
  sellerId                    BigInt?
  cityId                      BigInt?
  stateId                     BigInt?
  judicialProcessId           BigInt?
  achievedRevenue             Decimal?               @db.Decimal(15, 2)
  auctionCertificateUrl       String?                @db.VarChar(500)
  decrementAmount             Decimal?               @db.Decimal(10, 2)
  decrementIntervalSeconds    Int?
  evaluationReportUrl         String?                @db.VarChar(500)
  floorPrice                  Decimal?               @db.Decimal(15, 2)
  imageMediaId                String?
  isRelisted                  Boolean                @default(false)
  originalAuctionId           BigInt?                @unique
  relistCount                 Int                    @default(0)
  
  bids                        Bid[]
  notifications               Notification[]
  stages                      AuctionStage[]
  habilitations               AuctionHabilitation[]
  lotPrices                   LotStagePrice[]
  lots                        Lot[]
  originalAuction             Auction?               @relation("RelistedAuction", fields: [originalAuctionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedVersion             Auction?               @relation("RelistedAuction")
  auctioneer                  Auctioneer?            @relation(fields: [auctioneerId], references: [id])
  seller                      Seller?                @relation(fields: [sellerId], references: [id])
  category                    LotCategory?           @relation("CategoryAuctions", fields: [categoryId], references: [id])
  categoryId                  BigInt?
  city                        City?                  @relation(fields: [cityId], references: [id])
  state                       State?                 @relation(fields: [stateId], references: [id])
  judicialProcess             JudicialProcess?       @relation(fields: [judicialProcessId], references: [id])
  tenant                      Tenant                 @relation(fields: [tenantId], references: [id])
  courts                      Court[]
  judicialDistricts           JudicialDistrict[]
  judicialBranches            JudicialBranch[]

  @@index([tenantId])
  @@index([status])
  @@index([auctionType])
}

model JudicialProcess {
  id              BigInt           @id @default(autoincrement())
  publicId        String           @unique
  processNumber   String
  isElectronic    Boolean          @default(true)
  createdAt       DateTime?        @default(now())
  updatedAt       DateTime?        @updatedAt
  tenantId        BigInt
  courtId         BigInt?
  districtId      BigInt?
  branchId        BigInt?
  sellerId        BigInt?
  
  parties         JudicialParty[]
  lots            Lot[]
  assets          Asset[]
  auctions        Auction[]
  mediaItems      MediaItem[]
  court           Court?           @relation(fields: [courtId], references: [id])
  district        JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch          JudicialBranch?  @relation(fields: [branchId], references: [id])
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  tenant          Tenant           @relation(fields: [tenantId], references: [id])

  @@unique([processNumber, tenantId])
}

model Seller {
  id                 BigInt         @id @default(autoincrement())
  name               String         @unique
  publicId           String         @unique
  slug               String         @unique
  description        String?        @db.Text
  logoUrl            String?        @db.Text
  website            String?        @db.Text
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  isJudicial         Boolean        @default(false)
  judicialBranchId   BigInt?        @unique
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  tenantId           BigInt
  dataAiHintLogo     String?
  logoMediaId        String?
  userId             BigInt?        @unique
  
  auctions           Auction[]
  lots               Lot[]
  assets             Asset[]
  user               User?          @relation(fields: [userId], references: [id])
  judicialBranch     JudicialBranch?  @relation(fields: [judicialBranchId], references: [id])
  tenant             Tenant         @relation(fields: [tenantId], references: [id])
  directSaleOffers   DirectSaleOffer[]
  judicialProcesses  JudicialProcess[]
}

model Auctioneer {
  id                 BigInt         @id @default(autoincrement())
  name               String
  publicId           String         @unique
  slug               String         @unique
  description        String?        @db.Text
  logoUrl            String?        @db.Text
  website            String?        @db.Text
  registrationNumber String?
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  tenantId           BigInt
  dataAiHintLogo     String?
  logoMediaId        String?
  userId             BigInt?        @unique

  auctions           Auction[]
  lots               Lot[]
  user               User?          @relation(fields: [userId], references: [id])
  tenant             Tenant         @relation(fields: [tenantId], references: [id])
}

model Court {
  id                BigInt             @id @default(autoincrement())
  slug              String?            @unique
  name              String
  stateUf           String?
  website           String?
  createdAt         DateTime?          @default(now())
  updatedAt         DateTime?          @updatedAt
  
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialDistrict {
  id                BigInt           @id @default(autoincrement())
  name              String
  slug              String?          @unique
  zipCode           String?
  createdAt         DateTime?        @default(now())
  updatedAt         DateTime?        @updatedAt
  courtId           BigInt?
  stateId           BigInt?
  
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  court             Court?           @relation(fields: [courtId], references: [id])
  state             State?           @relation(fields: [stateId], references: [id])
  auctions          Auction[]
}

model JudicialBranch {
  id                BigInt           @id @default(autoincrement())
  name              String           @unique
  slug              String?          @unique
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime?        @default(now())
  updatedAt         DateTime?        @updatedAt
  districtId        BigInt?
  
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  judicialProcesses JudicialProcess[]
  seller            Seller?
  auctions          Auction[]
}

model State {
  id                BigInt             @id @default(autoincrement())
  slug              String?            @unique
  name              String
  uf                String             @unique
  cityCount         Int?               @default(0)
  createdAt         DateTime?          @default(now())
  updatedAt         DateTime?          @updatedAt
  
  cities            City[]
  judicialDistricts JudicialDistrict[]
  lots              Lot[]
  auctions          Auction[]
}

model City {
  id        BigInt    @id @default(autoincrement())
  name      String
  slug      String?
  ibgeCode  String?   @unique
  stateId   BigInt
  stateUf   String?
  lotCount  Int?      @default(0)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  state     State     @relation(fields: [stateId], references: [id])
  auctions  Auction[]
  lots      Lot[]

  @@unique([name, stateId])
}

model AssetMedia {
  asset       Asset     @relation(fields: [assetId], references: [id], onDelete: Cascade)
  assetId     BigInt
  mediaItem   MediaItem @relation(fields: [mediaItemId], references: [id], onDelete: Cascade)
  mediaItemId BigInt
  isPrimary   Boolean   @default(false)
  displayOrder Int      @default(0)

  @@id([assetId, mediaItemId])
}

model MediaItem {
  id                BigInt      @id @default(autoincrement())
  urlOriginal       String
  urlThumbnail      String?
  urlMedium         String?
  urlLarge          String?
  storagePath       String
  fileName          String
  mimeType          String
  sizeBytes         Int?
  altText           String?
  title             String?
  caption           String?
  description       String?     @db.Text
  dataAiHint        String?
  uploadedAt        DateTime    @default(now())
  uploadedByUserId  BigInt?
  judicialProcessId BigInt?
  linkedLotIds      Json?
  
  uploadedBy        User?             @relation("UploadedBy", fields: [uploadedByUserId], references: [id], onDelete: SetNull)
  judicialProcess   JudicialProcess?  @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  assetGallery      AssetMedia[]
}

model Bid {
  id            BigInt      @id @default(autoincrement())
  auctionId     BigInt
  lotId         BigInt
  bidderId      BigInt
  amount        Decimal     @db.Decimal(15, 2)
  timestamp     DateTime    @default(now())
  bidderDisplay String?
  tenantId      BigInt
  
  lot           Lot         @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bidder        User        @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  auction       Auction     @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  tenant        Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([bidderId])
}

model UserWin {
  id                 BigInt        @id @default(autoincrement())
  winningBidAmount   Decimal       @db.Decimal(15, 2)
  winDate            DateTime      @default(now())
  paymentStatus      PaymentStatus @default(PENDENTE)
  retrievalStatus    String        @default("PENDENTE")
  invoiceUrl         String?
  lotId              BigInt        @unique
  userId             BigInt

  lot                Lot           @relation(fields: [lotId], references: [id])
  user               User          @relation(fields: [userId], references: [id])
  installmentPayment InstallmentPayment[]

  @@index([userId])
}

model InstallmentPayment {
  id                BigInt        @id @default(autoincrement())
  userWinId         BigInt
  lotId             BigInt
  installmentNumber Int
  totalInstallments Int
  amount            Decimal       @db.Decimal(15, 2)
  dueDate           DateTime
  paymentDate       DateTime?
  status            PaymentStatus @default(PENDENTE)
  transactionId     String?

  userWin           UserWin       @relation(fields: [userWinId], references: [id])

  @@unique([userWinId, installmentNumber])
  @@index([userWinId])
}

model LotCategory {
  id                   BigInt              @id @default(autoincrement())
  name                 String              @unique
  slug                 String              @unique
  description          String?             @db.Text
  hasSubcategories     Boolean             @default(false)
  displayOrder         Int                 @default(0)
  logoUrl              String?             @db.Text
  logoMediaId          String?             @db.Text
  dataAiHintLogo       String?             @db.Text
  coverImageUrl        String?             @db.Text
  coverImageMediaId    String?             @db.Text
  dataAiHintCover      String?             @db.Text
  megaMenuImageUrl     String?             @db.Text
  megaMenuImageMediaId String?             @db.Text
  dataAiHintMegaMenu   String?             @db.Text
  iconName             String?
  createdAt            DateTime?           @default(now())
  updatedAt            DateTime?           @updatedAt
  
  subcategories        Subcategory[]
  lots                 Lot[]
  assets               Asset[]
  directSaleOffers     DirectSaleOffer[]
  auctions             Auction[]           @relation("CategoryAuctions")
}

model Subcategory {
  id                 BigInt       @id @default(autoincrement())
  name               String
  slug               String       @unique
  description        String?
  displayOrder       Int          @default(0)
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  parentCategoryId   BigInt
  
  parentCategory     LotCategory  @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots               Lot[]
  assets             Asset[]
  
  @@unique([name, parentCategoryId])
}

model DirectSaleOffer {
  id                   BigInt                @id @default(autoincrement())
  publicId             String                @unique
  title                String
  description          String?               @db.Text
  offerType            DirectSaleOfferType
  price                Decimal?              @db.Decimal(15, 2)
  minimumOfferPrice    Decimal?              @db.Decimal(15, 2)
  status               DirectSaleOfferStatus @default(ACTIVE)
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int                   @default(0)
  expiresAt            DateTime?
  categoryId           BigInt
  sellerId             BigInt
  sellerName           String?
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  tenantId             BigInt
  
  category             LotCategory           @relation(fields: [categoryId], references: [id])
  seller               Seller                @relation(fields: [sellerId], references: [id])
  tenant               Tenant                @relation(fields: [tenantId], references: [id])
}

model Notification {
  id        BigInt    @id @default(autoincrement())
  userId    BigInt
  tenantId  BigInt
  message   String
  link      String?
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())
  auctionId BigInt?
  lotId     BigInt?
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  auction   Auction?  @relation(fields: [auctionId], references: [id])
  lot       Lot?      @relation(fields: [lotId], references: [id])

  @@index([userId])
}

model UserDocument {
  id              BigInt             @id @default(autoincrement())
  userId          BigInt
  documentTypeId  BigInt
  status          UserDocumentStatus @default(PENDING_ANALYSIS)
  fileUrl         String
  fileName        String?
  rejectionReason String?
  verifiedAt      DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType       @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
  @@index([userId])
}

model DocumentType {
  id           BigInt         @id @default(autoincrement())
  name         String         @unique
  description  String?
  isRequired   Boolean        @default(true)
  appliesTo    String // e.g., 'PHYSICAL,LEGAL'
  userDocuments UserDocument[]
}

model LotStagePrice {
    id BigInt @id @default(autoincrement())
    lotId BigInt
    stageId BigInt
    initialBid Decimal? @db.Decimal(15, 2)
    bidIncrement Decimal? @db.Decimal(10, 2)
    lot Lot @relation(fields: [lotId], references: [id])
    stage AuctionStage @relation(fields: [stageId], references: [id])
    auction Auction @relation(fields: [auctionId], references: [id])
    auctionId BigInt

    @@unique([lotId, stageId])
}

model AuctionStage {
  id           BigInt          @id @default(autoincrement())
  name         String
  startDate    DateTime
  endDate      DateTime
  auctionId    BigInt
  initialPrice Decimal?        @db.Decimal(15, 2)
  
  auction      Auction         @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  lotPrices    LotStagePrice[]

  @@index([auctionId])
}

model Subscriber {
  id          BigInt @id @default(autoincrement())
  email       String @unique
  name        String?
  phone       String?
  preferences Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenantId    BigInt

  tenant      Tenant     @relation(fields: [tenantId], references: [id])
}

model Report {
  id          BigInt @id @default(autoincrement())
  name        String
  description String?
  definition  Json
  tenantId    BigInt
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById BigInt

  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  createdBy   User     @relation(fields: [createdById], references: [id])
}

model DataSource {
  id        BigInt   @id @default(autoincrement())
  name      String
  modelName String   @unique
  fields    Json
}

model PasswordResetToken {
    id        BigInt      @id @default(autoincrement())
    email     String
    token     String   @unique
    expires   DateTime
    createdAt DateTime @default(now())

    @@unique([email, token])
}

model JudicialParty {
    id              BigInt  @id @default(autoincrement())
    name            String
    documentNumber  String?
    partyType       ProcessPartyType
    processId       BigInt
    
    process         JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

    @@index([processId])
}

model Review {
    id              BigInt   @id @default(autoincrement())
    lotId           BigInt
    auctionId       BigInt
    userId          BigInt
    rating          Int
    comment         String?  @db.Text
    userDisplayName String?
    createdAt       DateTime @default(now())

    lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
    auction         Auction  @relation(fields: [auctionId], references: [id])
    user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([lotId])
}

model LotQuestion {
    id                       BigInt   @id @default(autoincrement())
    lotId                    BigInt
    auctionId                BigInt
    userId                   BigInt
    questionText             String   @db.Text
    isPublic                 Boolean  @default(true)
    answerText               String?  @db.Text
    answeredAt               DateTime?
    userDisplayName          String
    answeredByUserId         String?
    answeredByUserDisplayName String?
    createdAt                DateTime @default(now())

    lot                      Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
    auction                  Auction  @relation(fields: [auctionId], references: [id])
    user                     User     @relation(fields: [userId], references: [id])
    
    @@index([lotId])
}

model AuctionHabilitation {
  userId        BigInt
  auctionId     BigInt
  habilitatedAt DateTime @default(now())
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@id([userId, auctionId])
  @@index([auctionId])
}

model VehicleMake {
  id      BigInt         @id @default(autoincrement())
  name    String         @unique
  slug    String         @unique
  models  VehicleModel[]
}

model VehicleModel {
  id      BigInt      @id @default(autoincrement())
  name    String
  slug    String
  makeId  BigInt
  make    VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)

  @@unique([makeId, name])
  @@index([slug])
}

// Enums

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
  RETIRADO
}

enum AssetStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum DirectSaleOfferStatus {
    ACTIVE
    PENDING_APPROVAL
    SOLD
    EXPIRED
    RASCUNHO
}

enum DirectSaleOfferType {
    BUY_NOW
    ACCEPTS_PROPOSALS
}

model PlatformSettings {
  id                                 String                    @id @default("global")
  siteTitle                          String?
  siteTagline                        String?
  logoUrl                            String?
  faviconUrl                         String?
  galleryImageBasePath               String?
  storageProvider                    String?
  firebaseStorageBucket              String?
  activeThemeName                    String?
  searchPaginationType               SearchPaginationType      @default(loadMore)
  searchItemsPerPage                 Int                       @default(12)
  searchLoadMoreCount                Int                       @default(12)
  showCountdownOnLotDetail           Boolean                   @default(true)
  showCountdownOnCards               Boolean                   @default(true)
  showRelatedLotsOnLotDetail         Boolean                   @default(true)
  relatedLotsCount                   Int                       @default(5)
  defaultUrgencyTimerHours           Int?
  defaultListItemsPerPage            Int                       @default(10)
  updatedAt                          DateTime?                 @updatedAt
  tenantId                           BigInt                    @unique
  isSetupComplete                    Boolean                   @default(false)
  crudFormMode                       String?
  
  tenant                             Tenant                    @relation(fields: [tenantId], references: [id])
  themes                             ThemeSettings[]
  platformPublicIdMasks              IdMasks?
  mapSettings                        MapSettings?
  biddingSettings                    BiddingSettings?
  paymentGatewaySettings             PaymentGatewaySettings?
  notificationSettings               NotificationSettings?
  mentalTriggerSettings              MentalTriggerSettings?
  sectionBadgeVisibility             SectionBadgeVisibility?
  variableIncrementTable             VariableIncrementRule[]
}

model ThemeSettings {
  id                 BigInt   @id @default(autoincrement())
  name               String   @unique
  platformSettingsId BigInt
  platformSettings   PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  colors             ThemeColors?
}

model ThemeColors {
  id              BigInt          @id @default(autoincrement())
  themeSettingsId BigInt          @unique
  themeSettings   ThemeSettings   @relation(fields: [themeSettingsId], references: [id])
  lightPrimary    String?
  lightBackground String?
  lightAccent     String?
  darkPrimary     String?
  darkBackground  String?
  darkAccent      String?
}

model IdMasks {
  id                BigInt           @id @default(autoincrement())
  platformSettingsId BigInt         @unique
  platformSettings  PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  auctionCodeMask   String?
  lotCodeMask       String?
  sellerCodeMask    String?
  auctioneerCodeMask String?
  userCodeMask      String?
  assetCodeMask     String?
  categoryCodeMask  String?
  subcategoryCodeMask String?
}

model VariableIncrementRule {
  id                 BigInt   @id @default(autoincrement())
  platformSettingsId BigInt
  platformSettings   PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  from               Float
  to                 Float?
  increment          Float
}

model MapSettings {
  id                 BigInt   @id @default(autoincrement())
  platformSettingsId BigInt         @unique
  platformSettings  PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  defaultProvider    String           @default("openstreetmap")
  googleMapsApiKey   String?
}

model BiddingSettings {
  id                             BigInt   @id @default(autoincrement())
  platformSettingsId             BigInt         @unique
  platformSettings              PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  instantBiddingEnabled          Boolean          @default(true)
  getBidInfoInstantly            Boolean          @default(true)
  biddingInfoCheckIntervalSeconds Int              @default(1)
}

model PaymentGatewaySettings {
  id                             BigInt           @id @default(autoincrement())
  platformSettingsId             BigInt                 @unique
  platformSettings              PlatformSettings       @relation(fields: [platformSettingsId], references: [id])
  defaultGateway                 String                 @default("Manual")
  platformCommissionPercentage   Float                  @default(5.0)
  gatewayApiKey                  String?
  gatewayEncryptionKey           String?
}

model NotificationSettings {
  id                         BigInt           @id @default(autoincrement())
  platformSettingsId         BigInt                 @unique
  platformSettings          PlatformSettings       @relation(fields: [platformSettingsId], references: [id])
  notifyOnNewAuction         Boolean                @default(true)
  notifyOnFeaturedLot        Boolean                @default(false)
  notifyOnAuctionEndingSoon  Boolean                @default(true)
  notifyOnPromotions         Boolean                @default(true)
}

model MentalTriggerSettings {
  id                        BigInt   @id @default(autoincrement())
  platformSettingsId        BigInt         @unique
  platformSettings         PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  showDiscountBadge         Boolean          @default(true)
  showPopularityBadge       Boolean          @default(true)
  popularityViewThreshold   Int              @default(500)
  showHotBidBadge           Boolean          @default(true)
  hotBidThreshold           Int              @default(10)
  showExclusiveBadge        Boolean          @default(true)
}

model SectionBadgeVisibility {
  id                    BigInt   @id @default(autoincrement())
  platformSettingsId    BigInt         @unique
  platformSettings     PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  searchGrid            Json?
  lotDetail             Json?
}

enum SearchPaginationType {
  loadMore
  numberedPages
}

```