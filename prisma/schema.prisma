// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ==============================================================================
// 1. Core User, Auth, and Permission Models
// ==============================================================================

model User {
  id                  String           @id @default(cuid())
  email               String           @unique
  fullName            String?
  password            String
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  roleId              String?
  bids                Bid[]
  wins                UserWin[]
  notifications       Notification[]
  reviews             Review[]
  questions           LotQuestion[]
  mediaItems          MediaItem[]      @relation("UserUploader")
  answeredQuestions   LotQuestion[]    @relation("AnsweredBy")
  maxBids             UserLotMaxBid[]
  badges              String? // Comma-separated list
  habilitationStatus  UserHabilitationStatus? @default(PENDING_DOCUMENTS)
  accountType         AccountType?     @default(PHYSICAL)
  // Personal Info (PF)
  cpf                 String?          @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  // Address Info
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  // PJ Info
  razaoSocial         String?
  cnpj                String?          @unique
  inscricaoEstadual   String?
  website             String?
  // Marketing
  optInMarketing      Boolean?         @default(false)
  // Relationships
  role                Role?                  @relation(fields: [roleId], references: [id], onDelete: SetNull)
  sellerProfile       Seller?                @relation("UserToSeller")
  auctioneerProfile   Auctioneer?            @relation("UserToAuctioneer")
  documents           UserDocument[]
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  roles       Role[]
}

model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  users           User[]
  permissions     Permission[]
}

model DocumentType {
  id             String         @id @default(cuid())
  name           String
  description    String?
  isRequired     Boolean        @default(true)
  appliesTo      String? // e.g., "PHYSICAL,LEGAL"
  allowedFormats String?
  displayOrder   Int            @default(0)
  userDocuments  UserDocument[]
}

model UserDocument {
  id              String           @id @default(cuid())
  userId          String
  documentTypeId  String
  fileUrl         String?
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  rejectionReason String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType     @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

// ==============================================================================
// 2. Auction Core Models
// ==============================================================================
model Auction {
  id                             String                @id @default(cuid())
  publicId                       String                @unique @default(cuid())
  title                          String
  fullTitle                      String?               @db.Text
  description                    String?               @db.Text
  status                         AuctionStatus         @default(RASCUNHO)
  auctionType                    AuctionType?
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json                  @default("[]")
  city                           String?
  state                          String?
  imageUrl                       String?
  dataAiHint                     String?
  documentsUrl                   String?
  visits                         Int?                  @default(0)
  initialOffer                   Float?
  totalLots                      Int?                  @default(0)
  isFeaturedOnMarketplace        Boolean?              @default(false)
  marketplaceAnnouncementTitle   String?
  additionalTriggers             String?
  // Dutch Auction Fields
  decrementAmount                Float?
  decrementIntervalSeconds       Int?
  floorPrice                     Float?
  // Automation Fields
  automaticBiddingEnabled        Boolean?              @default(false)
  silentBiddingEnabled           Boolean?              @default(false)
  allowMultipleBidsPerUser       Boolean?              @default(true)
  allowInstallmentBids           Boolean?              @default(false)
  softCloseEnabled               Boolean?              @default(false)
  softCloseMinutes               Int?                  @default(2)
  autoRelistSettings             Json?
  // Financials
  estimatedRevenue               Float?
  achievedRevenue                Float?                @default(0)
  totalHabilitatedUsers          Int?                  @default(0)
  // Timestamps
  createdAt                      DateTime              @default(now())
  updatedAt                      DateTime              @updatedAt
  // Relationships
  categoryId                     String
  auctioneerId                   String
  sellerId                       String?
  judicialProcessId              String?               @unique
  imageMediaId                   String?               @unique
  lots                           Lot[]
  bids                           Bid[]
  category                       LotCategory           @relation(fields: [categoryId], references: [id])
  auctioneer                     Auctioneer            @relation(fields: [auctioneerId], references: [id])
  seller                         Seller?               @relation(fields: [sellerId], references: [id])
  judicialProcess                JudicialProcess?      @relation(fields: [judicialProcessId], references: [id])
  image                          MediaItem?            @relation("AuctionImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
}

model Lot {
  id                           String                @id @default(cuid())
  publicId                     String                @unique @default(cuid())
  number                       String?
  title                        String
  description                  String?               @db.Text
  price                        Float
  initialPrice                 Float?
  secondInitialPrice           Float?
  status                       LotStatus
  views                        Int?                  @default(0)
  bidsCount                    Int?                  @default(0)
  isFeatured                   Boolean?              @default(false)
  isExclusive                  Boolean?              @default(false)
  discountPercentage           Float?
  additionalTriggers           String?
  condition                    String?
  bidIncrementStep             Float?
  evaluationValue              Float?
  debtAmount                   Float?
  itbiValue                    Float?
  reservePrice                 Float?
  winningBidTermUrl            String?
  // Vehicle Specific Fields (optional)
  plate                        String?
  make                         String?
  model                        String?
  series                       String?
  version                      String?
  year                         Int?
  modelYear                    Int?
  mileage                      Int?
  color                        String?
  fuelType                     String?
  transmissionType             String?
  bodyType                     String?
  vin                          String?
  vinStatus                    String?
  lossType                     String?
  primaryDamage                String?
  titleInfo                    String?
  titleBrand                   String?
  startCode                    String?
  hasKey                       Boolean?
  airbagsStatus                String?
  engineDetails                String?
  driveLineType                String?
  cylinders                    String?
  restraintSystem              String?
  exteriorInteriorColor        String?
  options                      String?
  manufacturedIn               String?
  vehicleClass                 String?
  vehicleLocationInBranch      String?
  sellingBranch                String?
  laneRunNumber                String?
  aisleStall                   String?
  actualCashValue              String?
  estimatedRepairCost          String?
  // Timestamps
  createdAt                    DateTime              @default(now())
  updatedAt                    DateTime              @updatedAt
  endDate                      DateTime?
  lotSpecificAuctionDate       DateTime?
  secondAuctionDate            DateTime?
  // Media & Location
  imageUrl                     String?
  galleryImageUrls             Json?                 @default("[]")
  dataAiHint                   String?
  latitude                     Float?
  longitude                    Float?
  mapAddress                   String?
  mapEmbedUrl                  String?
  mapStaticImageUrl            String?
  // Judicial Info
  judicialProcessNumber        String?
  courtDistrict                String?
  courtName                    String?
  publicProcessUrl             String?
  propertyRegistrationNumber   String?
  propertyLiens                String?               @db.Text
  knownDebts                   String?               @db.Text
  additionalDocumentsInfo      String?               @db.Text
  // Relationships
  auctionId                    String
  categoryId                   String
  subcategoryId                String?
  stateId                      String?
  cityId                       String?
  sellerId                     String?
  auctioneerId                 String?
  imageMediaId                 String?               @unique
  bemIds                       Json?                 @default("[]")
  mediaItemIds                 Json?                 @default("[]")
  auction                      Auction               @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                     LotCategory           @relation(fields: [categoryId], references: [id])
  subcategory                  Subcategory?          @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  state                        StateInfo?            @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city                         CityInfo?             @relation(fields: [cityId], references: [id], onDelete: SetNull)
  image                        MediaItem?            @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  bids                         Bid[]
  wins                         UserWin[]
  reviews                      Review[]
  questions                    LotQuestion[]
  maxBids                      UserLotMaxBid[]
}

model Seller {
  id                         String             @id @default(cuid())
  publicId                   String             @unique @default(cuid())
  name                       String
  slug                       String             @unique
  isJudicial                 Boolean?           @default(false)
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  description                String?            @db.Text
  dataAiHintLogo             String?
  // Timestamps
  createdAt                  DateTime           @default(now())
  updatedAt                  DateTime           @updatedAt
  // Relationships
  userId                     String?            @unique
  logoMediaId                String?            @unique
  judicialBranchId           String?            @unique
  user                       User?              @relation("UserToSeller", fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  logo                       MediaItem?         @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  auctions                   Auction[]
  judicialBranch             JudicialBranch?    @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  bens                       Bem[]
  directSaleOffers           DirectSaleOffer[]
  judicialProcesses          JudicialProcess[]
}

model Auctioneer {
  id                         String    @id @default(cuid())
  publicId                   String    @unique @default(cuid())
  name                       String
  slug                       String    @unique
  registrationNumber         String?
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  description                String?   @db.Text
  dataAiHintLogo             String?
  // Timestamps
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
  // Relationships
  userId                     String?   @unique
  logoMediaId                String?   @unique
  user                       User?     @relation("UserToAuctioneer", fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  logo                       MediaItem? @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  auctions                   Auction[]
}

// ==============================================================================
// 3. Category & Location Models
// ==============================================================================

model LotCategory {
  id                   String            @id @default(cuid())
  name                 String            @unique
  slug                 String            @unique
  description          String?
  itemCount            Int?              @default(0)
  hasSubcategories     Boolean?          @default(false)
  // Media
  logoUrl              String?
  logoMediaId          String?           @unique
  coverImageUrl        String?
  coverImageMediaId    String?           @unique
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?           @unique
  dataAiHintLogo       String?
  dataAiHintCover      String?
  dataAiHintMegaMenu   String?
  // Timestamps
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  // Relationships
  lots                 Lot[]
  bens                 Bem[]
  subcategories        Subcategory[]
  logo                 MediaItem?        @relation("CategoryLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  coverImage           MediaItem?        @relation("CategoryCoverImage", fields: [coverImageMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  megaMenuImage        MediaItem?        @relation("CategoryMegaMenuImage", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  auctions             Auction[]
  directSaleOffers     DirectSaleOffer[]
}

model Subcategory {
  id                 String      @id @default(cuid())
  name               String
  description        String?
  slug               String      @unique
  displayOrder       Int         @default(0)
  parentCategoryId   String
  iconUrl            String?
  iconMediaId        String?     @unique
  dataAiHintIcon     String?
  // Timestamps
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  // Relationships
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots               Lot[]
  bens               Bem[]
  icon               MediaItem?  @relation("SubcategoryIcon", fields: [iconMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

// ==============================================================================
// 4. Judicial Entity Models
// ==============================================================================
model JudicialProcess {
  id                String           @id @default(cuid())
  publicId          String           @unique @default(cuid())
  processNumber     String           @unique
  isElectronic      Boolean          @default(true)
  // Timestamps
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  // Relationships
  courtId           String
  districtId        String
  branchId          String
  sellerId          String?
  court             Court            @relation(fields: [courtId], references: [id])
  district          JudicialDistrict @relation(fields: [districtId], references: [id])
  branch            JudicialBranch   @relation(fields: [branchId], references: [id])
  seller            Seller?          @relation(fields: [sellerId], references: [id])
  parties           ProcessParty[]
  bens              Bem[]
  auction           Auction?
}

model ProcessParty {
  id             String         @id @default(cuid())
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  processId      String
  process        JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)
  @@unique([processId, name, partyType])
}

model Bem {
  id                           String           @id @default(cuid())
  publicId                     String           @unique @default(cuid())
  title                        String
  description                  String?          @db.Text
  status                       BemStatus        @default(DISPONIVEL)
  evaluationValue              Float?
  // Location
  locationCity                 String?
  locationState                String?
  address                      String?
  latitude                     Float?
  longitude                    Float?
  // Vehicle Specific Fields
  plate                        String?
  make                         String?
  model                        String?
  version                      String?
  year                         Int?
  modelYear                    Int?
  mileage                      Int?
  color                        String?
  fuelType                     String?
  transmissionType             String?
  bodyType                     String?
  vin                          String?
  renavam                      String?
  enginePower                  String?
  numberOfDoors                Int?
  vehicleOptions               String?          @db.Text
  detranStatus                 String?
  debts                        String?          @db.Text
  runningCondition             String?
  bodyCondition                String?
  tiresCondition               String?
  hasKey                       Boolean?         @default(false)
  // Real Estate Specific Fields
  propertyRegistrationNumber   String?
  propertyType                 String?
  iptuNumber                   String?
  isOccupied                   Boolean?         @default(false)
  area                         Float?
  totalArea                    Float?
  builtArea                    Float?
  bedrooms                     Int?
  suites                       Int?
  bathrooms                    Int?
  parkingSpaces                Int?
  constructionType             String?
  finishes                     String?          @db.Text
  infrastructure               String?          @db.Text
  condoDetails                 String?          @db.Text
  improvements                 String?          @db.Text
  topography                   String?
  liensAndEncumbrances         String?          @db.Text
  propertyDebts                String?          @db.Text
  unregisteredRecords          String?          @db.Text
  hasHabiteSe                  Boolean?
  zoningRestrictions           String?
  amenities                    Json?
  // Electronics
  brand                        String?
  serialNumber                 String?
  itemCondition                String?
  specifications               String?          @db.Text
  includedAccessories          String?
  batteryCondition             String?
  hasInvoice                   Boolean?
  hasWarranty                  Boolean?
  repairHistory                String?          @db.Text
  // Appliances
  applianceCapacity            String?
  voltage                      String?
  applianceType                String?
  additionalFunctions          String?
  // Machinery
  hoursUsed                    Int?
  engineType                   String?
  capacityOrPower              String?
  maintenanceHistory           String?          @db.Text
  installationLocation         String?
  compliesWithNR               String?
  operatingLicenses            String?
  // Livestock
  breed                        String?
  age                          String?
  sex                          LivestockSex?
  weight                       String?
  individualId                 String?
  purpose                      String?
  sanitaryCondition            String?
  lineage                      String?
  isPregnant                   Boolean?
  specialSkills                String?
  gtaDocument                  String?
  breedRegistryDocument        String?
  // Furniture
  furnitureType                String?
  material                     String?
  style                        String?
  dimensions                   String?
  pieceCount                   Int?
  // Jewelry
  jewelryType                  String?
  metal                        String?
  gemstones                    String?
  totalWeight                  String?
  jewelrySize                  String?
  authenticityCertificate      String?
  // Art & Antiques
  workType                     String?
  artist                       String?
  period                       String?
  technique                    String?
  provenance                   String?          @db.Text
  // Boats
  boatType                     String?
  boatLength                   String?
  hullMaterial                 String?
  onboardEquipment             String?          @db.Text
  // Foodstuffs
  productName                  String?
  quantity                     String?
  packagingType                String?
  expirationDate               DateTime?
  // Precious Metals & Stones
  preciousMetalType            String?
  purity                       String?
  // Forest Goods
  forestGoodsType              String?
  volumeOrQuantity             String?
  species                      String?
  dofNumber                    String?
  // Media
  imageUrl                     String?
  dataAiHint                   String?
  // Timestamps
  createdAt                    DateTime         @default(now())
  updatedAt                    DateTime         @updatedAt
  // Relationships
  judicialProcessId            String?
  sellerId                     String?
  categoryId                   String
  subcategoryId                String?
  imageMediaId                 String?          @unique
  judicialProcess              JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller                       Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  category                     LotCategory      @relation(fields: [categoryId], references: [id])
  subcategory                  Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  image                        MediaItem?       @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

model Court {
  id          String             @id @default(cuid())
  name        String
  slug        String             @unique
  stateId     String
  stateUf     String
  website     String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  state       StateInfo          @relation(fields: [stateId], references: [id])
  districts   JudicialDistrict[]
  processes   JudicialProcess[]
}

model JudicialDistrict {
  id        String             @id @default(cuid())
  name      String
  slug      String
  courtId   String
  stateId   String
  zipCode   String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  court     Court              @relation(fields: [courtId], references: [id])
  state     StateInfo          @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]
  @@unique([name, stateId])
}

model JudicialBranch {
  id           String             @id @default(cuid())
  name         String
  slug         String
  districtId   String
  contactName  String?
  phone        String?
  email        String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  district     JudicialDistrict   @relation(fields: [districtId], references: [id], onDelete: Cascade)
  processes    JudicialProcess[]
  sellerProfile Seller?
  @@unique([name, districtId])
}

model StateInfo {
  id        String             @id @default(cuid())
  name      String             @unique
  uf        String             @unique
  slug      String             @unique
  cityCount Int?               @default(0)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  lots      Lot[]
  courts    Court[]
  districts JudicialDistrict[]
  cities    CityInfo[]
}

model CityInfo {
  id        String    @id @default(cuid())
  name      String
  slug      String
  stateId   String
  stateUf   String
  ibgeCode  String?
  lotCount  Int?      @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  state     StateInfo @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots      Lot[]
}

// ==============================================================================
// 5. Utility & Content Models
// ==============================================================================

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id                String   @id @default(cuid())
  userId            String
  lotId             String   @unique
  winningBidAmount  Float
  winDate           DateTime @default(now())
  paymentStatus     PaymentStatus @default(PENDENTE)
  invoiceUrl        String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot               Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MediaItem {
  id                       String             @id @default(cuid())
  fileName                 String
  storagePath              String?            @unique
  title                    String?
  altText                  String?
  caption                  String?
  description              String?            @db.Text
  mimeType                 String
  sizeBytes                Int
  dimensions               Json?
  urlOriginal              String             @db.Text
  urlThumbnail             String?            @db.Text
  urlMedium                String?            @db.Text
  urlLarge                 String?            @db.Text
  uploadedBy               String?
  linkedLotIds             String?
  dataAiHint               String?
  uploadedAt               DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  // Relationships
  userUploader             User?              @relation("UserUploader", fields: [uploadedBy], references: [id], onDelete: SetNull)
  auctionAsImage           Auction?           @relation("AuctionImage")
  lotAsImage               Lot?               @relation("LotImage")
  bemAsImage               Bem?               @relation("BemImage")
  sellerAsLogo             Seller?            @relation("SellerLogo")
  auctioneerAsLogo         Auctioneer?        @relation("AuctioneerLogo")
  categoryAsLogo           LotCategory?       @relation("CategoryLogo")
  categoryAsCover          LotCategory?       @relation("CategoryCoverImage")
  categoryAsMegaMenu       LotCategory?       @relation("CategoryMegaMenuImage")
  subcategoryAsIcon        Subcategory?       @relation("SubcategoryIcon")
  directSaleOfferImage     DirectSaleOffer?   @relation("DirectSaleOfferImage")
}

model DirectSaleOffer {
  id                       String                @id @default(cuid())
  publicId                 String                @unique @default(cuid())
  title                    String
  description              String?               @db.Text
  offerType                DirectSaleOfferType
  status                   DirectSaleOfferStatus
  price                    Float?
  minimumOfferPrice        Float?
  locationCity             String?
  locationState            String?
  latitude                 Float?
  longitude                Float?
  mapAddress               String?
  mapEmbedUrl              String?
  mapStaticImageUrl        String?
  imageUrl                 String?
  dataAiHint               String?
  dataAiHintSellerLogo     String?
  galleryImageUrls         Json?
  itemsIncluded            String?
  tags                     String?
  views                    Int?                  @default(0)
  proposalsCount           Int?                  @default(0)
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt
  expiresAt                DateTime?
  // Relationships
  categoryId               String
  sellerId                 String
  imageMediaId             String?               @unique
  category                 LotCategory           @relation(fields: [categoryId], references: [id])
  seller                   Seller                @relation(fields: [sellerId], references: [id])
  image                    MediaItem?            @relation("DirectSaleOfferImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String   @db.Text
  createdAt       DateTime @default(now())
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                      String   @id @default(cuid())
  lotId                   String
  auctionId               String
  userId                  String
  userDisplayName         String
  questionText            String   @db.Text
  isPublic                Boolean  @default(true)
  createdAt               DateTime @default(now())
  answerText              String?  @db.Text
  answeredAt              DateTime?
  answeredByUserId        String?
  answeredByUserDisplayName String?
  lot                     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answeredBy              User?    @relation("AnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   @db.Text
  authorId    String
  authorName  String
  imageUrl    String?
  published   Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tags        String? // Comma-separated
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model PlatformSettings {
  id                           String               @id @default("global")
  siteTitle                    String?
  siteTagline                  String?
  galleryImageBasePath         String?
  storageProvider              StorageProviderType? @default(local)
  firebaseStorageBucket        String?
  activeThemeName              String?
  themes                       Json?
  platformPublicIdMasks        Json?
  homepageSections             Json?
  mentalTriggerSettings        Json?
  sectionBadgeVisibility       Json?
  mapSettings                  Json?
  biddingSettings              Json?
  searchPaginationType         SearchPaginationType? @default(loadMore)
  searchItemsPerPage           Int?                 @default(12)
  searchLoadMoreCount          Int?                 @default(12)
  showCountdownOnLotDetail     Boolean?             @default(true)
  showCountdownOnCards         Boolean?             @default(true)
  showRelatedLotsOnLotDetail   Boolean?             @default(true)
  relatedLotsCount             Int?                 @default(5)
  defaultUrgencyTimerHours     Int?
  variableIncrementTable       Json?
  defaultListItemsPerPage      Int?                 @default(10)
  updatedAt                    DateTime             @updatedAt
}

model DocumentTemplate {
  id         String               @id @default(cuid())
  name       String               @unique
  type       DocumentTemplateType
  content    String               @db.Text
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
}


// ==============================================================================
// 6. ENUMS
// ==============================================================================

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum LivestockSex {
  Macho
  Femea
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum StorageProviderType {
  local
  firebase
}

enum SearchPaginationType {
  loadMore
  numberedPages
}
