generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ----------------------------------------
// Models
// ----------------------------------------

model User {
  id                  String       @id @default(cuid())
  email               String       @unique
  password            String
  fullName            String?
  roleId              String?
  habilitationStatus  UserHabilitationStatus? @default(PENDING_DOCUMENTS)
  accountType         AccountType? @default(PHYSICAL)
  cpf                 String?      @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  status              String?      @default("ATIVO")
  optInMarketing      Boolean?     @default(false)
  avatarUrl           String?      @db.Text
  dataAiHint          String?
  activeBids          Int?         @default(0)
  auctionsWon         Int?         @default(0)
  itemsSold           Int?         @default(0)
  razaoSocial         String?
  cnpj                String?      @unique
  inscricaoEstadual   String?
  website             String?
  badges              String? // Comma-separated list of badges
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  // Relationships
  role                Role?                  @relation(fields: [roleId], references: [id], onDelete: SetNull)
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  reviews             Review[]
  questions           LotQuestion[]
  maxBids             UserLotMaxBid[]
  notifications       Notification[]
  blogPosts           BlogPost[]
}

model Permission {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  roles       Role[]
}

model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  users           User[]
  permissions     Permission[]
}

model UserDocument {
  id              String             @id @default(cuid())
  userId          String
  documentTypeId  String
  fileUrl         String?            @db.Text
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  rejectionReason String?

  // Relationships
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType DocumentType @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id             String         @id @default(cuid())
  name           String         @unique
  description    String?
  isRequired     Boolean        @default(true)
  appliesTo      String?        // e.g., "PHYSICAL,LEGAL"
  allowedFormats String?        // e.g., "pdf,jpg,png"
  displayOrder   Int            @default(0)
  userDocuments  UserDocument[]
}

model Auction {
  id                             String        @id @default(cuid())
  publicId                       String        @unique @default(cuid())
  title                          String
  fullTitle                      String?
  description                    String?       @db.Text
  status                         AuctionStatus @default(RASCUNHO)
  auctionType                    String? // JUDICIAL, EXTRAJUDICIAL, PARTICULAR, TOMADA_DE_PRECOS, DUTCH, SILENT
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json?
  city                           String?
  state                          String?
  imageUrl                       String?       @db.Text
  imageMediaId                   String?       @unique
  dataAiHint                     String?
  documentsUrl                   String?       @db.Text
  evaluationReportUrl            String?       @db.Text
  auctionCertificateUrl          String?       @db.Text
  visits                         Int?          @default(0)
  totalLots                      Int?          @default(0)
  initialOffer                   Float?
  bidsCount                      Int?          @default(0)
  sellingBranch                  String?
  vehicleLocation                String?
  automaticBiddingEnabled        Boolean?      @default(false)
  silentBiddingEnabled           Boolean?      @default(false)
  allowMultipleBidsPerUser       Boolean?      @default(true)
  allowInstallmentBids           Boolean?      @default(false)
  softCloseEnabled               Boolean?      @default(false)
  softCloseMinutes               Int?          @default(2)
  estimatedRevenue               Float?
  achievedRevenue                Float?        @default(0)
  totalHabilitatedUsers          Int?          @default(0)
  isFeaturedOnMarketplace        Boolean?      @default(false)
  marketplaceAnnouncementTitle   String?
  additionalTriggers             String? // Comma-separated
  decrementAmount                Float? // For Dutch auctions
  decrementIntervalSeconds       Int?   // For Dutch auctions
  floorPrice                     Float? // For Dutch auctions
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt

  // Relationships
  categoryId        String
  auctioneerId      String
  sellerId          String?
  judicialProcessId String?           @unique

  category          LotCategory       @relation(fields: [categoryId], references: [id])
  auctioneer        Auctioneer        @relation(fields: [auctioneerId], references: [id])
  seller            Seller?           @relation(fields: [sellerId], references: [id])
  judicialProcess   JudicialProcess?
  image             MediaItem?        @relation("AuctionImage", fields: [imageMediaId], references: [id], onDelete: SetNull)

  lots      Lot[]
  bids      Bid[]
  reviews   Review[]
  questions LotQuestion[]

  @@index([auctioneerId])
  @@index([sellerId])
  @@index([categoryId])
  @@index([status])
}

model Lot {
  id                         String     @id @default(cuid())
  publicId                   String     @unique @default(cuid())
  title                      String
  number                     String?
  description                String?    @db.Text
  price                      Float
  initialPrice               Float?
  secondInitialPrice         Float?
  bidIncrementStep           Float?
  status                     LotStatus
  imageUrl                   String?    @db.Text
  imageMediaId               String?    @unique
  galleryImageUrls           Json?
  mediaItemIds               Json?
  bemIds                     Json?
  views                      Int        @default(0)
  bidsCount                  Int        @default(0)
  isFeatured                 Boolean?   @default(false)
  isExclusive                Boolean?   @default(false)
  discountPercentage         Float?
  additionalTriggers         String?
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?    @db.Text
  mapStaticImageUrl          String?    @db.Text
  judicialProcessNumber      String?
  courtDistrict              String?
  courtName                  String?
  publicProcessUrl           String?    @db.Text
  propertyRegistrationNumber String?
  propertyLiens              String?    @db.Text
  knownDebts                 String?    @db.Text
  additionalDocumentsInfo    String?    @db.Text
  reservePrice               Float?
  evaluationValue            Float?
  debtAmount                 Float?
  itbiValue                  Float?
  endDate                    DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  dataAiHint                 String?
  createdAt                  DateTime   @default(now())
  updatedAt                  DateTime   @updatedAt

  // Relationships
  auctionId     String
  categoryId    String
  subcategoryId String?
  stateId       String?
  cityId        String?
  sellerId      String?
  auctioneerId  String?

  auction       Auction      @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category      LotCategory  @relation(fields: [categoryId], references: [id])
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  state         StateInfo?   @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city          CityInfo?    @relation(fields: [cityId], references: [id], onDelete: SetNull)
  image         MediaItem?   @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)

  bids          Bid[]
  wins          UserWin[]
  reviews       Review[]
  questions     LotQuestion[]
  maxBids       UserLotMaxBid[]

  @@index([auctionId])
  @@index([categoryId])
  @@index([status])
}

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())

  // Relationships
  lot     Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder  User    @relation(fields: [bidderId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([bidderId])
}

model LotCategory {
  id                   String        @id @default(cuid())
  name                 String        @unique
  slug                 String        @unique
  description          String?
  itemCount            Int?          @default(0)
  hasSubcategories     Boolean?      @default(false)
  logoUrl              String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  dataAiHintMegaMenu   String?
  logoMediaId          String?       @unique
  coverImageMediaId    String?       @unique
  megaMenuImageMediaId String?       @unique
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  // Relationships
  subcategories      Subcategory[]
  logo                 MediaItem?    @relation("CategoryLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  coverImage           MediaItem?    @relation("CategoryCover", fields: [coverImageMediaId], references: [id], onDelete: SetNull)
  megaMenuImage        MediaItem?    @relation("CategoryMegaMenu", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull)
  lots                 Lot[]
  bens                 Bem[]
  directSaleOffers     DirectSaleOffer[]
}

model Subcategory {
  id               String      @id @default(cuid())
  name             String
  slug             String      @unique
  description      String?
  displayOrder     Int?        @default(0)
  itemCount        Int?        @default(0)
  iconUrl          String?
  iconMediaId      String?     @unique
  dataAiHintIcon   String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  
  // Relationships
  parentCategoryId String
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots             Lot[]
  bens             Bem[]
  icon             MediaItem?  @relation("SubcategoryIcon", fields: [iconMediaId], references: [id], onDelete: SetNull)

  @@index([parentCategoryId])
}

model Seller {
  id                         String   @id @default(cuid())
  publicId                   String   @unique @default(cuid())
  name                       String
  slug                       String   @unique
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  logoUrl                    String?
  logoMediaId                String?  @unique
  dataAiHintLogo             String?
  description                String?  @db.Text
  memberSince                DateTime?
  rating                     Float?
  activeLotsCount            Int?
  totalSalesValue            Float?
  auctionsFacilitatedCount   Int?
  userId                     String?  @unique
  isJudicial                 Boolean? @default(false)
  judicialBranchId           String?  @unique
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  
  // Relationships
  user                       User?
  logo                       MediaItem?         @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  auctions                   Auction[]
  judicialProcess            JudicialProcess?
  bens                       Bem[]
  directSaleOffers           DirectSaleOffer[]
  judicialBranch             JudicialBranch?
}

model Auctioneer {
  id                       String   @id @default(cuid())
  publicId                 String   @unique @default(cuid())
  name                     String
  slug                     String   @unique
  registrationNumber       String?
  contactName              String?
  email                    String?
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  logoUrl                  String?
  logoMediaId              String?  @unique
  dataAiHintLogo           String?
  description              String?  @db.Text
  memberSince              DateTime?
  rating                   Float?
  auctionsConductedCount   Int?
  totalValueSold           Float?
  userId                   String?  @unique
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  
  // Relationships
  user     User?
  logo     MediaItem? @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  auctions Auction[]
}

// Judicial related models
model Court {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  stateUf   String
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  state     StateInfo          @relation(fields: [stateUf], references: [uf])
  districts JudicialDistrict[]
}

model JudicialDistrict {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  courtId   String
  stateId   String
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  court     Court            @relation(fields: [courtId], references: [id])
  state     StateInfo        @relation(fields: [stateId], references: [id], onDelete: Cascade)
  branches  JudicialBranch[]
}

model JudicialBranch {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  districtId  String
  contactName String?
  phone       String?
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  district  JudicialDistrict   @relation(fields: [districtId], references: [id], onDelete: Cascade)
  processes JudicialProcess[]
  seller    Seller?
}

model JudicialProcess {
  id           String    @id @default(cuid())
  publicId     String    @unique @default(cuid())
  processNumber String   @unique
  isElectronic Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relationships
  courtId    String
  districtId String
  branchId   String
  sellerId   String?  @unique

  court   Court          @relation(fields: [courtId], references: [id])
  district JudicialDistrict @relation(fields: [districtId], references: [id])
  branch  JudicialBranch @relation(fields: [branchId], references: [id])
  seller  Seller?        @relation(fields: [sellerId], references: [id])
  auction Auction?

  parties ProcessParty[]
  bens    Bem[]
}

model ProcessParty {
  id             String        @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType

  // Relationships
  process JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@unique([processId, name, partyType])
}

model Bem {
  id                         String   @id @default(cuid())
  publicId                   String   @unique @default(cuid())
  title                      String
  description                String?  @db.Text
  status                     BemStatus
  evaluationValue            Float?
  imageUrl                   String?  @db.Text
  imageMediaId               String?  @unique
  galleryImageUrls           Json?
  mediaItemIds               Json?
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  // Vehicle Fields
  plate                      String?
  make                       String?
  model                      String?
  version                    String?
  year                       Int?
  modelYear                  Int?
  mileage                    Int?
  color                      String?
  fuelType                   String?
  transmissionType           String?
  bodyType                   String?
  vin                        String?
  renavam                    String?
  enginePower                String?
  numberOfDoors              Int?
  vehicleOptions             String?
  detranStatus               String?
  debts                      String?
  runningCondition           String?
  bodyCondition              String?
  tiresCondition             String?
  hasKey                     Boolean?

  // Real Estate Fields
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?
  infrastructure             String?
  condoDetails               String?
  improvements               String?
  topography                 String?
  liensAndEncumbrances       String?
  propertyDebts              String?
  unregisteredRecords        String?
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  amenities                  Json?
  
  // Relationships
  categoryId        String
  subcategoryId     String?
  judicialProcessId String?
  sellerId          String?
  
  category          LotCategory      @relation(fields: [categoryId], references: [id])
  subcategory       Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller            Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  image             MediaItem?       @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
}

// Generic Models
model StateInfo {
  id        String   @id @default(cuid())
  name      String   @unique
  uf        String   @unique
  slug      String   @unique
  cityCount Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  lots      Lot[]
  courts    Court[]
  cities    CityInfo[]
  districts JudicialDistrict[]
}

model CityInfo {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  stateId   String
  stateUf   String
  ibgeCode  String?
  lotCount  Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  state StateInfo @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots  Lot[]
}


model UserWin {
  id               String   @id @default(cuid())
  userId           String
  lotId            String
  winningBidAmount Float
  winDate          DateTime
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lotId])
}

model Review {
    id String @id @default(cuid())
    userId String
    lotId String
    auctionId String
    userDisplayName String
    rating Int
    comment String @db.Text
    createdAt DateTime @default(now())
    
    // Relationships
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model LotQuestion {
    id String @id @default(cuid())
    userId String
    lotId String
    auctionId String
    userDisplayName String
    questionText String @db.Text
    answerText String? @db.Text
    answeredAt DateTime?
    answeredByUserId String?
    answeredByUserDisplayName String?
    isPublic Boolean @default(true)
    createdAt DateTime @default(now())

    // Relationships
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model UserLotMaxBid {
    id        String   @id @default(cuid())
    userId    String
    lotId     String
    maxAmount Float
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relationships
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)

    @@unique([userId, lotId])
}


model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   @db.Text
  authorId    String
  publishedAt DateTime
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tags        String? // Comma-separated string for MySQL

  // Relationships
  author User @relation(fields: [authorId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model MediaItem {
  id                         String   @id @default(cuid())
  fileName                   String
  storagePath                String   @unique
  uploadedAt                 DateTime @default(now())
  uploadedBy                 String? // User ID
  title                      String?
  altText                    String?
  caption                    String?
  description                String?
  mimeType                   String
  sizeBytes                  Int
  dimensions                 Json? // { width: number, height: number }
  urlOriginal                String   @db.Text
  urlThumbnail               String?  @db.Text
  urlMedium                  String?  @db.Text
  urlLarge                   String?  @db.Text
  dataAiHint                 String?
  
  // Relationships
  auctionAsImage             Auction?              @relation("AuctionImage")
  lotAsImage                 Lot?                  @relation("LotImage")
  sellerAsLogo               Seller?               @relation("SellerLogo")
  auctioneerAsLogo           Auctioneer?           @relation("AuctioneerLogo")
  categoryAsLogo             LotCategory?          @relation("CategoryLogo")
  categoryAsCover            LotCategory?          @relation("CategoryCover")
  categoryAsMegaMenu         LotCategory?          @relation("CategoryMegaMenu")
  bemAsImage                 Bem?                  @relation("BemImage")
  subcategoryAsIcon          Subcategory?          @relation("SubcategoryIcon")
  directSaleOfferAsImage     DirectSaleOffer?      @relation("DirectSaleOfferImage")
}

model DirectSaleOffer {
  id                   String                @id @default(cuid())
  publicId             String                @unique @default(cuid())
  title                String
  description          String?               @db.Text
  offerType            DirectSaleOfferType
  status               DirectSaleOfferStatus
  price                Float?
  minimumOfferPrice    Float?
  locationCity         String?
  locationState        String?
  imageUrl             String?               @db.Text
  imageMediaId         String?               @unique
  dataAiHint           String?
  expiresAt            DateTime?
  views                Int                   @default(0)
  proposalsCount       Int                   @default(0)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  // Relations
  categoryId           String
  category             LotCategory           @relation(fields: [categoryId], references: [id])
  sellerId             String
  seller               Seller                @relation(fields: [sellerId], references: [id])
  image                MediaItem?            @relation("DirectSaleOfferImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
}


model PlatformSettings {
    id                        String                @id @default("global")
    siteTitle                 String?
    siteTagline               String?
    galleryImageBasePath      String?
    storageProvider           StorageProviderType?  @default(local)
    firebaseStorageBucket     String?
    activeThemeName           String?
    themes                    Json?
    platformPublicIdMasks     Json?
    homepageSections          Json?
    mentalTriggerSettings     Json?
    sectionBadgeVisibility    Json?
    mapSettings               Json?
    searchPaginationType      SearchPaginationType? @default(loadMore)
    searchItemsPerPage        Int?                  @default(12)
    searchLoadMoreCount       Int?                  @default(12)
    showCountdownOnLotDetail  Boolean?              @default(true)
    showCountdownOnCards      Boolean?              @default(true)
    showRelatedLotsOnLotDetail Boolean?             @default(true)
    relatedLotsCount          Int?                  @default(5)
    variableIncrementTable    Json?
    biddingSettings           Json?
    defaultListItemsPerPage   Int?                  @default(10)
    updatedAt                 DateTime              @updatedAt
}

// ----------------------------------------
// Enums
// ----------------------------------------

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum StorageProviderType {
    local
    firebase
}

enum SearchPaginationType {
  loadMore
  numberedPages
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
}
