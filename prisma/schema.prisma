// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// ==================================================
// Modelos de Autenticação e Permissão
// ==================================================
model User {
  id                  String    @id @default(cuid())
  email               String    @unique
  fullName            String?
  password            String
  avatarUrl           String?
  dataAiHint          String?   @db.Text
  roleId              String?
  sellerId            String?   @unique
  auctioneerId        String?   @unique
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  status              String?   @default("ACTIVE")
  optInMarketing      Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  badges              String?   @db.Text // Storing as a comma-separated string
  
  // -- User Profile Fields --
  accountType           AccountType?
  cpf                   String?      @unique
  rgNumber              String?
  rgIssuer              String?
  rgIssueDate           DateTime?
  rgState               String?
  dateOfBirth           DateTime?
  cellPhone             String?
  homePhone             String?
  gender                String?
  profession            String?
  nationality           String?
  maritalStatus         String?
  propertyRegime        String?
  spouseName            String?
  spouseCpf             String?
  zipCode               String?
  street                String?
  number                String?
  complement            String?
  neighborhood          String?
  city                  String?
  state                 String?
  
  // Relationships
  role              Role?                 @relation(fields: [roleId], references: [id], onDelete: SetNull)
  sellerProfile     Seller?
  auctioneerProfile Auctioneer?
  documents         UserDocument[]
  bids              Bid[]
  wins              UserWin[]
  reviews           Review[]
  questions         LotQuestion[]         @relation("QuestionAskedBy")
  answeredQuestions LotQuestion[]         @relation("QuestionAnsweredBy")
  notifications     Notification[]
  mediaItems        MediaItem[]           @relation("UploadedBy")
  blogPosts         BlogPost[]
}

model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?      @db.Text
  permissions     String[]     // This will be handled at the application level as Prisma with MySQL doesn't support String[]
  users           User[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

// ==================================================
// Modelos Judiciais e Geográficos
// ==================================================

model Court {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  stateUf   String
  website   String?
  state     State    @relation(fields: [stateUf], references: [uf])
  districts JudicialDistrict[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model State {
  id        String   @id @default(cuid())
  name      String   @unique
  uf        String   @unique @db.VarChar(2)
  slug      String   @unique
  cityCount Int      @default(0)
  cities    City[]
  courts    Court[]
  districts JudicialDistrict[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id        String   @id @default(cuid())
  name      String
  slug      String
  stateId   String
  stateUf   String   @db.VarChar(2)
  ibgeCode  String?
  lotCount  Int      @default(0)
  state     State    @relation(fields: [stateId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([name, stateId])
}

model JudicialDistrict {
  id        String   @id @default(cuid())
  name      String
  slug      String
  courtId   String
  stateId   String
  zipCode   String?
  branches  JudicialBranch[]
  processes JudicialProcess[]
  court     Court    @relation(fields: [courtId], references: [id])
  state     State    @relation(fields: [stateId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([name, courtId])
}

model JudicialBranch {
  id          String    @id @default(cuid())
  name        String
  slug        String
  districtId  String
  contactName String?
  phone       String?
  email       String?
  sellers     Seller[]
  processes   JudicialProcess[]
  district    JudicialDistrict @relation(fields: [districtId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  @@unique([name, districtId])
}

// ==================================================
// Modelos de Leilão
// ==================================================

model LotCategory {
  id                 String  @id @default(cuid())
  name               String  @unique
  slug               String  @unique
  description        String? @db.Text
  logoUrl            String?
  dataAiHintLogo     String?
  coverImageUrl      String?
  dataAiHintCover    String?
  megaMenuImageUrl   String?
  dataAiHintMegaMenu String?
  itemCount          Int     @default(0)
  hasSubcategories   Boolean @default(false)
  
  auctions      Auction[]
  lots          Lot[]
  bens          Bem[]
  subcategories Subcategory[]
  directSaleOffers DirectSaleOffer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subcategory {
  id               String      @id @default(cuid())
  name             String
  slug             String
  description      String?     @db.Text
  displayOrder     Int         @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  itemCount        Int         @default(0)
  
  parentCategoryId String
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id])
  
  lots             Lot[]
  bens             Bem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([name, parentCategoryId])
}

model Seller {
  id                       String    @id @default(cuid())
  publicId                 String    @unique
  name                     String    @unique
  slug                     String    @unique
  contactName              String?
  email                    String?
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  logoUrl                  String?
  dataAiHintLogo           String?
  description              String?   @db.Text
  isJudicial               Boolean   @default(false)

  userId                   String?   @unique
  judicialBranchId         String?   @unique
  
  auctions                 Auction[]
  bens                     Bem[]
  directSaleOffers         DirectSaleOffer[]
  judicialBranch           JudicialBranch?   @relation(fields: [judicialBranchId], references: [id])
  user                     User?             @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  judicialProcesses        JudicialProcess[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Auctioneer {
  id                       String    @id @default(cuid())
  publicId                 String    @unique
  name                     String    @unique
  slug                     String    @unique
  registrationNumber     String?
  contactName              String?
  email                    String?
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  logoUrl                  String?
  dataAiHintLogo           String?
  description              String?   @db.Text
  
  userId                   String?      @unique
  auctions                 Auction[]
  user                     User?        @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Auction {
  id                 String       @id @default(cuid())
  publicId           String       @unique
  title              String
  description        String?      @db.Text
  status             AuctionStatus @default(EM_BREVE)
  tipoLeilao         TipoLeilao? // Corrigido
  auctionDate        DateTime
  endDate            DateTime?
  city               String?
  state              String?
  imageUrl           String?
  dataAiHint         String?      @db.Text
  documentsUrl       String?
  totalLots          Int          @default(0)
  visits             Int          @default(0)
  initialOffer       Float?
  isFavorite         Boolean?     @default(false)
  currentBid         Float?
  bidsCount          Int?         @default(0)
  sellingBranch      String?
  isFeaturedOnMarketplace Boolean? @default(false)
  marketplaceAnnouncementTitle String?
  automaticBiddingEnabled Boolean? @default(false)
  allowInstallmentBids    Boolean? @default(false)
  softCloseEnabled        Boolean? @default(false)
  softCloseMinutes        Int?     @default(2)
  silentBiddingEnabled    Boolean? @default(false)
  allowMultipleBidsPerUser Boolean? @default(true)
  decrementAmount           Float?
  decrementIntervalSeconds  Int?
  floorPrice                Float?
  estimatedRevenue          Float?
  achievedRevenue           Float?   @default(0)
  totalHabilitatedUsers     Int?     @default(0)
  additionalTriggers        String?
  
  auctionStages      Json

  categoryId         String?
  auctioneerId       String
  sellerId           String?
  judicialProcessId  String?      @unique
  imageMediaId       String?      @unique

  category           LotCategory?      @relation(fields: [categoryId], references: [id])
  auctioneer         Auctioneer        @relation(fields: [auctioneerId], references: [id])
  seller             Seller?           @relation(fields: [sellerId], references: [id])
  judicialProcess    JudicialProcess?  @relation(fields: [judicialProcessId], references: [id])
  image              MediaItem?        @relation("AuctionImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  lots               Lot[]
  bids               Bid[]
  questions          LotQuestion[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lot {
  id                         String   @id @default(cuid())
  publicId                   String   @unique
  number                     String?
  title                      String
  description                String?  @db.Text
  price                      Float
  initialPrice               Float?
  secondInitialPrice         Float?
  bidIncrementStep           Float?
  status                     LotStatus
  imageUrl                   String?
  dataAiHint                 String?  @db.Text
  galleryImageUrls           Json?
  bemIds                     Json?
  mediaItemIds               Json?
  views                      Int      @default(0)
  bidsCount                  Int      @default(0)
  isFeatured                 Boolean? @default(false)
  isExclusive                Boolean? @default(false)
  discountPercentage         Float?
  additionalTriggers         Json?
  
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?
  
  judicialProcessNumber      String?
  courtDistrict              String?
  courtName                  String?
  publicProcessUrl           String?
  propertyRegistrationNumber String?
  propertyLiens              String?  @db.Text
  knownDebts                 String?  @db.Text
  additionalDocumentsInfo    String?  @db.Text
  
  reservePrice               Float?
  evaluationValue            Float?
  debtAmount                 Float?
  itbiValue                  Float?
  
  endDate                    DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  
  auctionId                  String
  categoryId                 String?
  subcategoryId              String?
  stateId                    String?
  cityId                     String?
  sellerId                   String?
  auctioneerId               String?
  imageMediaId               String?  @unique
  
  bids                       Bid[]
  wins                       UserWin[]
  reviews                    Review[]
  questions                  LotQuestion[]
  
  auction                    Auction      @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                   LotCategory? @relation(fields: [categoryId], references: [id])
  subcategory                Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  state                      State?       @relation(fields: [stateId], references: [id])
  city                       City?        @relation(fields: [cityId], references: [id])
  image                      MediaItem?   @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([auctionId])
}

model Bem {
  id               String   @id @default(cuid())
  publicId         String   @unique
  title            String
  description      String?  @db.Text
  status           BemStatus @default(DISPONIVEL)
  evaluationValue  Float?
  imageUrl         String?
  dataAiHint       String?  @db.Text
  galleryImageUrls Json?
  
  categoryId       String?
  subcategoryId    String?
  judicialProcessId String?
  sellerId         String?
  imageMediaId     String?  @unique
  
  category         LotCategory?     @relation(fields: [categoryId], references: [id])
  subcategory      Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess  JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller           Seller?          @relation(fields: [sellerId], references: [id])
  image            MediaItem?       @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  
  lots             Lot[]            @relation("BensEmLotes")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([judicialProcessId])
  @@index([sellerId])
}


// ==================================================
// Modelos de Interação do Usuário
// ==================================================

model Bid {
  id            String   @id @default(cuid())
  amount        Float
  timestamp     DateTime @default(now())
  bidderDisplay String
  
  lotId         String
  auctionId     String
  bidderId      String
  
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserWin {
  id               String        @id @default(cuid())
  winningBidAmount Float
  winDate          DateTime      @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?
  
  userId           String
  lotId            String        @unique
  
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot              Lot           @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  maxAmount Float
  isActive  Boolean  @default(true)
  
  userId    String
  lotId     String
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId, lotId])
}

model Review {
  id              String   @id @default(cuid())
  rating          Int
  comment         String   @db.Text
  userDisplayName String
  
  userId          String
  lotId           String
  auctionId       String
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model LotQuestion {
  id                      String   @id @default(cuid())
  questionText            String   @db.Text
  isPublic                Boolean  @default(true)
  answerText              String?  @db.Text
  answeredAt              DateTime?
  userDisplayName         String
  answeredByUserDisplayName String?
  
  userId                  String
  answeredByUserId        String?
  lotId                   String
  auctionId               String

  user                    User     @relation("QuestionAskedBy", fields: [userId], references: [id], onDelete: Cascade)
  answeredBy              User?    @relation("QuestionAnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull)
  lot                     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction                 Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}


// ==================================================
// Modelos de Conteúdo e Sistema
// ==================================================

model DirectSaleOffer {
  id                       String   @id @default(cuid())
  publicId                 String   @unique
  title                    String
  description              String   @db.Text
  offerType                DirectSaleOfferType
  status                   DirectSaleOfferStatus @default(PENDING_APPROVAL)
  price                    Float?
  minimumOfferPrice        Float?
  locationCity             String?
  locationState            String?
  imageUrl                 String?
  dataAiHint               String?  @db.Text
  galleryImageUrls         Json?
  itemsIncluded            Json?
  tags                     Json?
  views                    Int      @default(0)
  proposalsCount           Int      @default(0)
  expiresAt                DateTime?

  categoryId               String
  sellerId                 String
  imageMediaId             String?  @unique

  category                 LotCategory @relation(fields: [categoryId], references: [id])
  seller                   Seller      @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  image                    MediaItem?  @relation("DirectSaleImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}

model MediaItem {
  id            String   @id @default(cuid())
  fileName      String
  storagePath   String   @unique
  uploadedAt    DateTime @default(now())
  uploadedBy    String?
  title         String?
  altText       String?
  caption       String?
  description   String?
  mimeType      String
  sizeBytes     Int
  dimensions    Json?
  urlOriginal   String   @db.Text
  urlThumbnail  String?  @db.Text
  urlMedium     String?  @db.Text
  urlLarge      String?  @db.Text
  dataAiHint    String?

  user          User?    @relation("UploadedBy", fields: [uploadedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  AuctionImage  Auction? @relation("AuctionImage")
  LotImage      Lot?     @relation("LotImage")
  BemImage      Bem?     @relation("BemImage")
  DirectSaleImage DirectSaleOffer? @relation("DirectSaleImage")
  BlogPostImage BlogPost? @relation("FeaturedImage")
}

model Notification {
  id      String   @id @default(cuid())
  message String   @db.Text
  link    String?
  isRead  Boolean  @default(false)
  
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  @@index([userId])
}

model BlogPost {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  content         String   @db.Text
  excerpt         String?  @db.Text
  status          String   @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  publishedAt     DateTime?
  
  authorId        String
  featuredImageId String?  @unique
  
  author          User       @relation(fields: [authorId], references: [id])
  featuredImage   MediaItem? @relation("FeaturedImage", fields: [featuredImageId], references: [id])
  
  tags            Tag[]      @relation("PostTags")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique
  posts BlogPost[] @relation("PostTags")
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentTemplate {
  id        String   @id @default(cuid())
  name      String   @unique
  type      DocumentTemplateType
  content   String   @db.Text
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DocumentType {
  id             String         @id @default(cuid())
  name           String         @unique
  description    String?
  isRequired     Boolean        @default(true)
  allowedFormats String?
  displayOrder   Int            @default(0)
  appliesTo      String?        // e.g., "PHYSICAL,LEGAL"
  userDocuments  UserDocument[]
}

model UserDocument {
  id              String             @id @default(cuid())
  userId          String
  documentTypeId  String
  fileUrl         String?
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  rejectionReason String?
  
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType       @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

model JudicialProcess {
  id            String   @id @default(cuid())
  publicId      String   @unique
  processNumber String   @unique
  isElectronic  Boolean  @default(true)
  
  courtId       String
  districtId    String
  branchId      String
  sellerId      String?
  
  court         Court             @relation(fields: [courtId], references: [id])
  district      JudicialDistrict  @relation(fields: [districtId], references: [id])
  branch        JudicialBranch    @relation(fields: [branchId], references: [id])
  seller        Seller?           @relation(fields: [sellerId], references: [id])
  
  parties       ProcessParty[]
  bens          Bem[]
  auction       Auction?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProcessParty {
  id              String        @id @default(cuid())
  name            String
  documentNumber  String?
  partyType       ProcessPartyType
  processId       String
  
  process         JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  
  @@unique([processId, name, partyType])
}


// Enums
enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum TipoLeilao {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  PENDING_APPROVAL
  ACTIVE
  SOLD
  EXPIRED
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}
