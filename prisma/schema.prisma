// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}


// -------------------------------------
// ENUMS
// -------------------------------------

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO_PARA_LANCES
  ABERTO // Legacy or alias for ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
  SUSPENSO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum UserHabilitationStatus {
  PENDENTE_DOCUMENTOS
  PENDENTE_ANALISE
  HABILITADO
  REJEITADO
  BLOQUEADO
}

enum UserDocumentStatus {
  NAO_ENVIADO
  PENDENTE_ANALISE
  APROVADO
  REJEITADO
}

enum AccountType {
  PESSOA_FISICA
  PESSOA_JURIDICA
  COMITENTE_VENDA_DIRETA
}

enum PartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum DirectSaleOfferType {
  COMPRAR_JA
  ACEITA_PROPOSTAS
}

enum DirectSaleOfferStatus {
  ATIVA
  PENDENTE_APROVACAO
  VENDIDA
  EXPIRADA
  PAUSADA
  REMOVIDA
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum BlogPostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum DocumentTemplateType {
  AUTO_ARREMATACAO
  LAUDO_AVALIACAO
  CERTIFICADO_LEILAO
}

// -------------------------------------
// MODELS (in dependency order)
// -------------------------------------

model User {
  id                  String  @id @default(cuid())
  email               String  @unique
  fullName            String
  password            String
  habilitationStatus  UserHabilitationStatus @default(PENDENTE_DOCUMENTOS)
  accountType         AccountType @default(PESSOA_FISICA)
  badges              String[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Personal Info (PF)
  cpf                 String?  @unique
  dateOfBirth         DateTime?
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?

  // Company Info (PJ)
  razaoSocial         String?
  cnpj                String?  @unique
  inscricaoEstadual   String?
  website             String?

  // Contact & Address
  cellPhone           String?
  homePhone           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?

  // Preferences
  optInMarketing      Boolean? @default(false)

  // Relations
  role                Role?    @relation(fields: [roleId], references: [id])
  roleId              String?
  
  sellerProfileId     String?     @unique
  sellerProfile       Seller?

  auctioneerProfileId String?     @unique
  auctioneerProfile   Auctioneer?

  documents           UserDocument[]
  notifications       Notification[]
  bids                Bid[]
  wins                UserWin[]
  maxBids             UserLotMaxBid[]
  reviews             Review[]
  questions           LotQuestion[] @relation("UserQuestions")
  answers             LotQuestion[] @relation("AdminAnswers")
  blogPosts           BlogPost[]
  uploadedMedia       MediaItem[]
  
  @@index([email])
}

model Role {
  id              String @id @default(cuid())
  name            String @unique
  name_normalized String @unique
  description     String?
  permissions     String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  users           User[]
}

model State {
  id        String @id @default(cuid())
  name      String @unique
  uf        String @unique
  slug      String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cities    City[]
  courts    Court[]
  districts JudicialDistrict[]
}

model City {
  id        String @id @default(cuid())
  name      String
  slug      String
  stateId   String
  stateUf   String
  ibgeCode  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state     State @relation(fields: [stateId], references: [id])

  @@unique([name, stateId])
}

model LotCategory {
  id                 String       @id @default(cuid())
  name               String       @unique
  slug               String       @unique
  description        String?
  logoUrl            String?
  coverImageUrl      String?
  megaMenuImageUrl   String?
  dataAiHintLogo     String?
  dataAiHintCover    String?
  dataAiHintMegaMenu String?
  itemCount          Int?         @default(0)
  hasSubcategories   Boolean?     @default(false)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  auctions           Auction[]
  lots               Lot[]
  bens               Bem[]
  subcategories      Subcategory[]
}

model Subcategory {
  id               String      @id @default(cuid())
  name             String
  slug             String
  description      String?
  parentCategoryId String
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id])
  displayOrder     Int?        @default(0)
  itemCount        Int?        @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  lots             Lot[]
  bens             Bem[]

  @@unique([name, parentCategoryId])
}

model MediaItem {
  id                  String @id @default(cuid())
  fileName            String
  storagePath         String
  urlOriginal         String
  urlThumbnail        String?
  urlMedium           String?
  urlLarge            String?
  title               String?
  altText             String?
  caption             String?
  description         String?
  mimeType            String
  sizeBytes           Int
  uploadedBy          String?
  uploadedAt          DateTime @default(now())
  
  // Relations
  user                User? @relation(fields: [uploadedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sellerLogo          Seller[] @relation("SellerLogo")
  auctioneerLogo      Auctioneer[] @relation("AuctioneerLogo")
  lotsAsMainImage     Lot[] @relation("LotMainImage")
  lotsInGallery       Lot[] @relation("LotGallery")
  bensAsMainImage     Bem[] @relation("BemMainImage")
  bensInGallery       Bem[] @relation("BemGallery")
}

model Seller {
  id              String  @id @default(cuid())
  publicId        String  @unique @default(cuid())
  name            String
  slug            String  @unique
  contactName     String?
  email           String?
  phone           String?
  address         String?
  city            String?
  state           String?
  zipCode         String?
  website         String?
  logoUrl         String?
  dataAiHintLogo  String?
  description     String?
  isJudicial      Boolean? @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  user              User?    @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId            String?  @unique
  logo              MediaItem? @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  logoMediaId       String?  @unique
  auctions          Auction[]
  judicialProcesses JudicialProcess[]
  bens              Bem[]
  directSaleOffers  DirectSaleOffer[]
  judicialBranch    JudicialBranch? @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  judicialBranchId  String? @unique
}

model Auctioneer {
  id                      String   @id @default(cuid())
  publicId                String   @unique @default(cuid())
  name                    String
  slug                    String   @unique
  registrationNumber      String?
  contactName             String?
  email                   String?
  phone                   String?
  address                 String?
  city                    String?
  state                   String?
  zipCode                 String?
  website                 String?
  logoUrl                 String?
  dataAiHintLogo          String?
  description             String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relations
  user        User?      @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId      String?    @unique
  logo        MediaItem? @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  logoMediaId String?    @unique
  auctions    Auction[]
}

model PlatformSettings {
  id                          String    @id @default("global")
  siteTitle                   String?
  siteTagline                 String?
  galleryImageBasePath        String?
  storageProvider             String?
  firebaseStorageBucket       String?
  activeThemeName             String?
  themes                      Json[]
  platformPublicIdMasks       Json?
  homepageSections            Json[]
  mentalTriggerSettings       Json?
  sectionBadgeVisibility      Json?
  mapSettings                 Json?
  biddingSettings             Json?
  searchPaginationType        String?
  searchItemsPerPage          Int?
  searchLoadMoreCount         Int?
  showCountdownOnLotDetail    Boolean?
  showCountdownOnCards        Boolean?
  showRelatedLotsOnLotDetail  Boolean?
  relatedLotsCount            Int?
  variableIncrementTable      Json[]
  defaultListItemsPerPage     Int?      @default(10)
  updatedAt                   DateTime  @updatedAt
}

model Court {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  stateUf   String
  state     State    @relation(fields: [stateUf], references: [uf])
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  districts JudicialDistrict[]
}

model JudicialDistrict {
  id        String   @id @default(cuid())
  name      String
  slug      String
  courtId   String
  court     Court    @relation(fields: [courtId], references: [id])
  stateId   String
  state     State    @relation(fields: [stateId], references: [id])
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  branches  JudicialBranch[]

  @@unique([name, courtId])
}

model JudicialBranch {
  id          String            @id @default(cuid())
  name        String
  slug        String
  districtId  String
  district    JudicialDistrict  @relation(fields: [districtId], references: [id])
  contactName String?
  phone       String?
  email       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  processes   JudicialProcess[]
  seller      Seller?
}

model DocumentTemplate {
  id        String               @id @default(cuid())
  name      String               @unique
  type      DocumentTemplateType
  content   String               @db.Text
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model DocumentType {
  id             String         @id @default(cuid())
  name           String         @unique
  description    String?
  isRequired     Boolean        @default(false)
  appliesTo      String?
  allowedFormats String?
  displayOrder   Int            @default(0)
  userDocuments  UserDocument[]
}

model UserDocument {
  id                String             @id @default(cuid())
  userId            String
  documentTypeId    String
  fileUrl           String?
  fileName          String?
  status            UserDocumentStatus @default(NAO_ENVIADO)
  uploadDate        DateTime?
  analysisDate      DateTime?
  analystId         String?
  rejectionReason   String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType      DocumentType       @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

model Auction {
  id                             String        @id @default(cuid())
  publicId                       String        @unique @default(cuid())
  title                          String
  fullTitle                      String?
  description                    String?       @db.Text
  status                         AuctionStatus @default(RASCUNHO)
  auctionType                    String?
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json[]
  city                           String?
  state                          String?
  imageUrl                       String?
  dataAiHint                     String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  visits                         Int?          @default(0)
  totalLots                      Int?          @default(0)
  initialOffer                   Float?
  isFavorite                     Boolean?      @default(false)
  automaticBiddingEnabled        Boolean?
  silentBiddingEnabled           Boolean?
  allowMultipleBidsPerUser       Boolean?
  allowInstallmentBids           Boolean?
  softCloseEnabled               Boolean?
  softCloseMinutes               Int?
  estimatedRevenue               Float?
  achievedRevenue                Float?        @default(0)
  totalHabilitatedUsers          Int?
  isFeaturedOnMarketplace        Boolean?
  marketplaceAnnouncementTitle   String?
  additionalTriggers             String[]
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt

  // Relational Fields
  categoryId                     String
  category                       LotCategory   @relation(fields: [categoryId], references: [id])
  auctioneerId                   String
  auctioneer                     Auctioneer    @relation(fields: [auctioneerId], references: [id])
  sellerId                       String?
  seller                         Seller?       @relation(fields: [sellerId], references: [id])
  judicialProcessId              String?
  judicialProcess                JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  imageMediaId                   String?
  
  // Relations Back
  lots                           Lot[]
  bids                           Bid[]
  reviews                        Review[]
  questions                      LotQuestion[]
}

model Lot {
  id                   String     @id @default(cuid())
  publicId             String     @unique @default(cuid())
  number               String?
  title                String
  description          String?    @db.Text
  status               LotStatus  @default(EM_BREVE)
  price                Float
  initialPrice         Float?
  secondInitialPrice   Float?
  bidIncrementStep     Float?
  views                Int        @default(0)
  bidsCount            Int        @default(0)
  dataAiHint           String?
  isFeatured           Boolean?   @default(false)
  isExclusive          Boolean?   @default(false)
  discountPercentage   Float?
  additionalTriggers   String[]
  latitude             Float?
  longitude            Float?
  mapAddress           String?
  mapEmbedUrl          String?
  mapStaticImageUrl    String?
  winningBidTermUrl    String?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  // Relational Fields
  auctionId              String
  auction                Auction       @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  categoryId             String
  category               LotCategory   @relation(fields: [categoryId], references: [id])
  subcategoryId          String?
  subcategory            Subcategory?  @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  imageMediaId           String?
  mainImage              MediaItem?    @relation("LotMainImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  bemIds                 String[]
  bens                   Bem[]         @relation(fields: [bemIds], references: [id])
  mediaItemIds           String[]
  galleryImages          MediaItem[]   @relation("LotGallery")

  // Relations Back
  bids                   Bid[]
  wins                   UserWin[]
  reviews                Review[]
  questions              LotQuestion[]
  maxBids                UserLotMaxBid[]
}

model Bem {
  id                        String      @id @default(cuid())
  publicId                  String      @unique @default(cuid())
  title                     String
  description               String?     @db.Text
  status                    BemStatus
  evaluationValue           Float?
  dataAiHint                String?
  locationCity              String?
  locationState             String?
  address                   String?
  latitude                  Float?
  longitude                 Float?
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt
  
  // Relations
  categoryId                String?
  category                  LotCategory? @relation(fields: [categoryId], references: [id])
  subcategoryId             String?
  subcategory               Subcategory? @relation(fields: [subcategoryId], references: [id])
  judicialProcessId         String?
  judicialProcess           JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  sellerId                  String?
  seller                    Seller?      @relation(fields: [sellerId], references: [id])
  imageUrl                  String?
  imageMediaId              String?
  mainImage                 MediaItem?   @relation("BemMainImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  galleryImageUrls          Json[]       @default("[]")
  mediaItemIds              String[]
  galleryImages             MediaItem[]  @relation("BemGallery")
  lotIds                    String[]
  lots                      Lot[]        @relation(fields: [lotIds], references: [id])
  
  // Veículos
  plate                     String?
  make                      String?
  model                     String?
  version                   String?
  year                      Int?
  modelYear                 Int?
  mileage                   Int?
  color                     String?
  fuelType                  String?
  transmissionType          String?
  bodyType                  String?
  vin                       String?
  renavam                   String?
  enginePower               String?
  numberOfDoors             Int?
  vehicleOptions            String?
  detranStatus              String?
  debts                     String?
  runningCondition          String?
  bodyCondition             String?
  tiresCondition            String?
  hasKey                    Boolean?

  // Imóveis
  propertyType              String?
  propertyRegistrationNumber String?
  iptuNumber                String?
  isOccupied                Boolean?
  area                      Float?
  bedrooms                  Int?
  bathrooms                 Int?
  parkingSpaces             Int?
  amenities                 Json[] @default("[]")
}

model JudicialProcess {
  id              String   @id @default(cuid())
  publicId        String   @unique @default(cuid())
  processNumber   String   @unique
  isElectronic    Boolean
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  courtId         String?
  court           Court?      @relation(fields: [courtId], references: [id])
  districtId      String?
  district        JudicialDistrict? @relation(fields: [districtId], references: [id])
  branchId        String?
  branch          JudicialBranch?   @relation(fields: [branchId], references: [id])
  sellerId        String?
  seller          Seller?     @relation(fields: [sellerId], references: [id])

  // Relations Back
  bens            Bem[]
  auctions        Auction[]
  parties         ProcessParty[]
}

model ProcessParty {
  id              String     @id @default(cuid())
  processId       String
  process         JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  name            String
  documentNumber  String?
  partyType       PartyType

  @@unique([processId, name, partyType])
}


model Bid {
  id             String    @id @default(cuid())
  amount         Float
  timestamp      DateTime  @default(now())
  
  // Relations
  lotId          String
  lot            Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId      String
  auction        Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidderId       String
  bidder         User      @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderDisplay  String?

  @@index([lotId, timestamp])
}

model UserWin {
  id                String         @id @default(cuid())
  userId            String
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  lotId             String
  lot               Lot            @relation(fields: [lotId], references: [id])
  winningBidAmount  Float
  winDate           DateTime
  paymentStatus     PaymentStatus  @default(PENDENTE)
  invoiceUrl        String?
}

model UserLotMaxBid {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  lotId     String
  lot       Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  maxAmount Float
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lotId])
}

model Review {
  id              String   @id @default(cuid())
  rating          Int
  comment         String   @db.Text
  createdAt       DateTime @default(now())
  
  // Relations
  lotId           String
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId       String
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userDisplayName String
}

model LotQuestion {
  id                      String   @id @default(cuid())
  questionText            String   @db.Text
  answerText              String?  @db.Text
  isPublic                Boolean  @default(true)
  createdAt               DateTime @default(now())
  answeredAt              DateTime?
  
  // Relations
  lotId                   String
  lot                     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId               String
  auction                 Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  userId                  String
  user                    User     @relation("UserQuestions", fields: [userId], references: [id], onDelete: Cascade)
  userDisplayName         String
  answeredByUserId        String?
  answeredByUser          User?    @relation("AdminAnswers", fields: [answeredByUserId], references: [id], onDelete: SetNull)
  answeredByUserDisplayName String?
}

model Notification {
  id       String   @id @default(cuid())
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message  String
  link     String?
  isRead   Boolean  @default(false)
  createdAt DateTime @default(now())
}

model BlogPost {
    id          String   @id @default(cuid())
    title       String
    slug        String   @unique
    content     String   @db.Text
    status      BlogPostStatus @default(DRAFT)
    publishedAt DateTime?
    authorId    String
    author      User     @relation(fields: [authorId], references: [id])
    imageUrl    String?
    imageMediaId String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

```
- src/app/admin/sellers/seller-form.tsx:
```tsx
// src/app/admin/sellers/seller-form.tsx
'use client';

import * as React from 'react';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm, useWatch } from 'react-hook-form';
import { Button } from '@/components/ui/button';
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/hooks/use-toast';
import { useRouter } from 'next/navigation';
import { sellerFormSchema, type SellerFormValues } from './seller-form-schema';
import type { SellerProfileInfo, MediaItem, JudicialBranch } from '@/types';
import { Loader2, Save, Users, Image as ImageIcon, Scale } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import Image from 'next/image';
import ChooseMediaDialog from '@/components/admin/media/choose-media-dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';

interface SellerFormProps {
  initialData?: SellerProfileInfo | null;
  judicialBranches: JudicialBranch[];
  onSubmitAction: (data: SellerFormValues) => Promise<{ success: boolean; message: string; sellerId?: string }>;
  formTitle: string;
  formDescription: string;
  submitButtonText: string;
  successRedirectPath?: string;
}

export default function SellerForm({
  initialData,
  judicialBranches,
  onSubmitAction,
  formTitle,
  formDescription,
  submitButtonText,
  successRedirectPath
}: SellerFormProps) {
  const { toast } = useToast();
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = React.useState(false);
  const [isMediaDialogOpen, setIsMediaDialogOpen] = React.useState(false);

  const form = useForm<SellerFormValues>({
    resolver: zodResolver(sellerFormSchema),
    defaultValues: {
      name: initialData?.name || '',
      contactName: initialData?.contactName || '',
      email: initialData?.email || '',
      phone: initialData?.phone || '',
      address: initialData?.address || '',
      city: initialData?.city || '',
      state: initialData?.state || '',
      zipCode: initialData?.zipCode || '',
      website: initialData?.website || '',
      logoUrl: initialData?.logoUrl || '',
      dataAiHintLogo: initialData?.dataAiHintLogo || '',
      description: initialData?.description || '',
      judicialBranchId: initialData?.judicialBranchId || null,
      isJudicial: initialData?.isJudicial || false,
    },
  });

  const logoUrlPreview = useWatch({ control: form.control, name: 'logoUrl' });
  const isJudicial = useWatch({ control: form.control, name: 'isJudicial' });

  const handleMediaSelect = (selectedItems: Partial<MediaItem>[]) => {
    if (selectedItems.length > 0) {
      const selectedMediaItem = selectedItems[0];
      if (selectedMediaItem?.urlOriginal) {
        form.setValue('logoUrl', selectedMediaItem.urlOriginal);
      } else {
        toast({ title: "Seleção Inválida", description: "O item de mídia selecionado não possui uma URL válida.", variant: "destructive" });
      }
    }
    setIsMediaDialogOpen(false);
  };

  async function onSubmit(values: SellerFormValues) {
    setIsSubmitting(true);
    try {
      const result = await onSubmitAction(values);
      if (result.success) {
        toast({
          title: 'Sucesso!',
          description: result.message,
        });
        router.push(successRedirectPath || '/admin/sellers');
        router.refresh();
      } else {
        toast({
          title: 'Erro',
          description: result.message,
          variant: 'destructive',
        });
      }
    } catch (error) {
      toast({
        title: 'Erro Inesperado',
        description: 'Ocorreu um erro ao processar sua solicitação.',
        variant: 'destructive',
      });
      console.error("Unexpected error in seller form:", error);
    } finally {
      setIsSubmitting(false);
    }
  }

  return (
    <>
    <Card className="max-w-3xl mx-auto shadow-lg">
      <CardHeader>
        <CardTitle className="flex items-center gap-2"><Users className="h-6 w-6 text-primary" /> {formTitle}</CardTitle>
        <CardDescription>{formDescription}</CardDescription>
      </CardHeader>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)}>
          <CardContent className="space-y-6 bg-secondary/30 p-6">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Nome do Comitente/Empresa</FormLabel>
                  <FormControl>
                    <Input placeholder="Ex: Banco XYZ S.A., 1ª Vara Cível de Lagarto" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="isJudicial"
              render={({ field }) => (
                <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm bg-background">
                  <div className="space-y-0.5">
                    <FormLabel>É Comitente Judicial?</FormLabel>
                    <FormDescription>
                      Marque se este comitente é uma entidade judicial (Vara, Tribunal, etc).
                    </FormDescription>
                  </div>
                  <FormControl>
                    <Switch
                      checked={field.value}
                      onCheckedChange={field.onChange}
                    />
                  </FormControl>
                </FormItem>
              )}
            />
            {isJudicial && (
                <FormField
                    control={form.control}
                    name="judicialBranchId"
                    render={({ field }) => (
                    <FormItem>
                        <FormLabel className="flex items-center gap-2"><Scale className="h-4 w-4"/>Vara Judicial Vinculada (Opcional)</FormLabel>
                        <Select onValueChange={(value) => field.onChange(value === 'none' ? null : value)} value={field.value ?? 'none'}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Nenhuma vara judicial vinculada" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="none">Nenhuma</SelectItem>
                             {judicialBranches.map(branch => (
                                <SelectItem key={branch.id} value={branch.id}>{branch.name} - {branch.districtName}</SelectItem>
                              ))}
                          </SelectContent>
                        </Select>
                        <FormDescription>Se este comitente representa uma entidade judicial, vincule-a aqui.</FormDescription>
                        <FormMessage />
                    </FormItem>
                    )}
                />
            )}
            <div className="grid md:grid-cols-2 gap-6">
              <FormField
                control={form.control}
                name="contactName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Nome do Contato (Opcional)</FormLabel>
                    <FormControl>
                      <Input placeholder="Nome do responsável" {...field} value={field.value ?? ''}/>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email (Opcional)</FormLabel>
                    <FormControl>
                      <Input type="email" placeholder="contato@comitente.com" {...field} value={field.value ?? ''} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            <div className="grid md:grid-cols-2 gap-6">
              <FormField
                control={form.control}
                name="phone"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Telefone (Opcional)</FormLabel>
                    <FormControl>
                      <Input placeholder="(XX) XXXXX-XXXX" {...field} value={field.value ?? ''} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="website"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Website (Opcional)</FormLabel>
                    <FormControl>
                      <Input type="url" placeholder="https://www.comitente.com" {...field} value={field.value ?? ''} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
             <FormField
                control={form.control}
                name="address"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Endereço (Opcional)</FormLabel>
                    <FormControl>
                      <Input placeholder="Rua Exemplo, 123, Bairro" {...field} value={field.value ?? ''} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            <div className="grid md:grid-cols-3 gap-6">
              <FormField
                control={form.control}
                name="city"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Cidade (Opcional)</FormLabel>
                    <FormControl>
                      <Input placeholder="São Paulo" {...field} value={field.value ?? ''} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="state"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Estado/UF (Opcional)</FormLabel>
                    <FormControl>
                      <Input placeholder="SP" {...field} value={field.value ?? ''} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="zipCode"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>CEP (Opcional)</FormLabel>
                    <FormControl>
                      <Input placeholder="00000-000" {...field} value={field.value ?? ''} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            
            <FormItem>
              <FormLabel>Logo do Comitente</FormLabel>
              <div className="flex items-center gap-4">
                <div className="relative w-24 h-24 flex-shrink-0 bg-muted rounded-md overflow-hidden border">
                  {logoUrlPreview ? (
                    <Image src={logoUrlPreview} alt="Prévia do Logo" fill className="object-contain" data-ai-hint="previa logo comitente" />
                  ) : (
                    <div className="flex items-center justify-center h-full text-muted-foreground">
                      <ImageIcon className="h-8 w-8" />
                    </div>
                  )}
                </div>
                <div className="flex-grow space-y-2">
                  <Button type="button" variant="outline" onClick={() => setIsMediaDialogOpen(true)}>
                    {logoUrlPreview ? 'Alterar Logo' : 'Escolher da Biblioteca'}
                  </Button>
                  <FormField
                    control={form.control}
                    name="logoUrl"
                    render={({ field }) => (
                        <FormControl>
                            <Input type="url" placeholder="Ou cole a URL aqui" {...field} value={field.value ?? ""} className="text-xs h-8" />
                        </FormControl>
                    )}
                    />
                  <FormMessage />
                </div>
              </div>
            </FormItem>

            <FormField
              control={form.control}
              name="dataAiHintLogo"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Dica para IA (Logo - Opcional)</FormLabel>
                  <FormControl>
                    <Input placeholder="Ex: banco logo, empresa tecnologia" {...field} value={field.value ?? ''} />
                  </FormControl>
                   <FormDescription>Duas palavras chave para ajudar a IA encontrar uma imagem de placeholder, se a URL do logo não for fornecida.</FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Descrição/Observações (Opcional)</FormLabel>
                  <FormControl>
                    <Textarea placeholder="Detalhes adicionais sobre o comitente..." {...field} value={field.value ?? ''} rows={4} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </CardContent>
          <CardFooter className="flex justify-end gap-2 p-6 border-t">
            <Button type="button" variant="outline" onClick={() => router.push(successRedirectPath || '/admin/sellers')} disabled={isSubmitting}>
              Cancelar
            </Button>
            <Button type="submit" disabled={isSubmitting}>
              {isSubmitting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Save className="mr-2 h-4 w-4" />}
              {submitButtonText}
            </Button>
          </CardFooter>
        </form>
      </Form>
    </Card>
     <ChooseMediaDialog
        isOpen={isMediaDialogOpen}
        onOpenChange={setIsMediaDialogOpen}
        onMediaSelect={handleMediaSelect}
        allowMultiple={false}
      />
    </>
  );
}
```
