// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// ENUMS
// =================================================================

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

// =================================================================
// MODELS
// =================================================================

// -- Base Tables (No FK Dependencies) --

model PlatformSettings {
  id                               String @id @default("global")
  siteTitle                        String
  siteTagline                      String?
  galleryImageBasePath             String
  storageProvider                  String
  firebaseStorageBucket            String?
  activeThemeName                  String?
  themes                           Json[]
  platformPublicIdMasks            Json?
  homepageSections                 Json[]
  mentalTriggerSettings            Json?
  sectionBadgeVisibility           Json?
  mapSettings                      Json?
  searchPaginationType             String
  searchItemsPerPage               Int
  searchLoadMoreCount              Int
  showCountdownOnLotDetail         Boolean
  showCountdownOnCards             Boolean
  showRelatedLotsOnLotDetail       Boolean
  relatedLotsCount                 Int
  defaultUrgencyTimerHours         Int?
  variableIncrementTable           Json[]
  biddingSettings                  Json?
  paymentGatewaySettings           Json?
  defaultListItemsPerPage          Int      @default(10)
  updatedAt                        DateTime @updatedAt
}

model Role {
  id               String         @id @default(uuid())
  name             String         @unique
  nameNormalized   String         @unique
  description      String?        @db.Text
  permissions      Json
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  users            UsersOnRoles[]
}

model State {
  id                String             @id @default(uuid())
  name              String
  uf                String             @unique
  slug              String             @unique
  cityCount         Int                @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  cities            City[]
  courts            Court[]
  judicialDistricts JudicialDistrict[]
  lots              Lot[]
}

model LotCategory {
  id                   String            @id @default(uuid())
  name                 String            @unique
  slug                 String            @unique
  description          String?           @db.Text
  hasSubcategories     Boolean           @default(false)
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  subcategories        Subcategory[]
  lots                 Lot[]
  bens                 Bem[]
  auctions             Auction[]
  directSaleOffers     DirectSaleOffer[]
}

model Subcategory {
  id               String       @id @default(uuid())
  name             String
  slug             String       @unique
  parentCategoryId String
  parentCategory   LotCategory  @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  description      String?      @db.Text
  displayOrder     Int          @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  lots             Lot[]
  bens             Bem[]
}

model DocumentTemplate {
  id        String   @id @default(uuid())
  name      String
  type      DocumentTemplateType
  content   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentType {
  id          String         @id @default(uuid())
  name        String
  description String?
  isRequired  Boolean        @default(true)
  /// Comma-separated: PHYSICAL,LEGAL,ALL,PROCESS
  appliesTo   String?
  userDocs    UserDocument[]
}

model VehicleMake {
  id     String         @id @default(uuid())
  name   String         @unique
  slug   String         @unique
  models VehicleModel[]
}

model VehicleModel {
  id     String      @id @default(uuid())
  name   String
  slug   String
  make   VehicleMake @relation(fields: [makeId], references: [id])
  makeId String

  @@unique([name, makeId])
}

// -- User and Auth Related --

model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  password            String?
  fullName            String?
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType          @default(PHYSICAL)
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  roles               UsersOnRoles[]
  bids                Bid[]
  wins                UserWin[]
  documents           UserDocument[]
  notifications       Notification[]
  mediaItems          MediaItem[]
  seller              Seller?
  auctioneer          Auctioneer?
  maxBids             UserLotMaxBid[]
  habilitations       AuctionHabilitation[]
  
  // Detalhes PF
  cpf                 String?              @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  homePhone           String?
  cellPhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?

  // Detalhes PJ
  razaoSocial         String?
  cnpj                String?              @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?

  // Endere√ßo
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?

  optInMarketing      Boolean              @default(false)
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model AuctionHabilitation {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId String
  status    String   @default("HABILITADO") // e.g., HABILITADO, BLOQUEADO_NESTE_LEILAO
  createdAt DateTime @default(now())

  @@unique([userId, auctionId])
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

// -- Judicial Entities --

model Court {
  id                String             @id @default(uuid())
  name              String             @unique
  slug              String             @unique
  stateUf           String
  state             State?             @relation(fields: [stateId], references: [id])
  stateId           String?
  website           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialDistricts JudicialDistrict[]
  auctions          Auction[]
  judicialProcesses JudicialProcess[]
}

model JudicialDistrict {
  id                String             @id @default(uuid())
  name              String
  slug              String             @unique
  court             Court?             @relation(fields: [courtId], references: [id])
  courtId           String?
  state             State?             @relation(fields: [stateId], references: [id])
  stateId           String?
  zipCode           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  branches          JudicialBranch[]
  auctions          Auction[]
  judicialProcesses JudicialProcess[]
}

model JudicialBranch {
  id                String             @id @default(uuid())
  name              String
  slug              String             @unique
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  seller            Seller[]
  auctions          Auction[]
  judicialProcesses JudicialProcess[]
}

model JudicialProcess {
  id                String           @id @default(uuid())
  publicId          String           @unique
  processNumber     String
  isElectronic      Boolean          @default(true)
  court             Court?           @relation(fields: [courtId], references: [id])
  courtId           String?
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  districtId        String?
  branch            JudicialBranch?  @relation(fields: [branchId], references: [id])
  branchId          String?
  seller            Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId          String?
  parties           JudicialParty[]
  bens              Bem[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  auctions          Auction[]
  mediaItems        MediaItem[]
}

model JudicialParty {
  id             String          @id @default(uuid())
  process          JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType
}

// -- Core Business Entities --

model Seller {
  id                 String             @id @default(uuid())
  publicId           String             @unique
  slug               String             @unique
  name               String             @unique
  contactName        String?
  email              String?            @unique
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?            @db.Text
  user               User?              @relation(fields: [userId], references: [id])
  userId             String?            @unique
  isJudicial         Boolean            @default(false)
  judicialBranch     JudicialBranch?    @relation(fields: [judicialBranchId], references: [id])
  judicialBranchId   String?            @unique
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  auctions           Auction[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
  lots               Lot[]
}

model Auctioneer {
  id                 String    @id @default(uuid())
  publicId           String    @unique
  slug               String    @unique
  name               String
  registrationNumber String?
  contactName        String?
  email              String?   @unique
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?   @db.Text
  user               User?     @relation(fields: [userId], references: [id])
  userId             String?   @unique
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  auctions           Auction[]
  lots               Lot[]
}

model City {
  id        String    @id @default(uuid())
  name      String
  slug      String?
  state     State     @relation(fields: [stateId], references: [id])
  stateId   String
  stateUf   String?
  ibgeCode  String?   @unique
  lotCount  Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  auctions  Auction[]
  lots      Lot[]
}

model DirectSaleOffer {
  id                   String                @id @default(uuid())
  publicId             String                @unique
  title                String
  description          String?               @db.Text
  offerType            DirectSaleOfferType
  price                Decimal?              @db.Decimal(15, 2)
  minimumOfferPrice    Decimal?              @db.Decimal(15, 2)
  status               DirectSaleOfferStatus @default(ACTIVE)
  category             LotCategory           @relation(fields: [categoryId], references: [id])
  categoryId           String
  seller               Seller                @relation(fields: [sellerId], references: [id])
  sellerId             String
  sellerName           String?
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int                   @default(0)
  expiresAt            DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}


model AuctionStage {
  id              String   @id @default(uuid())
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId       String
  name            String
  startDate       DateTime
  endDate         DateTime
  bidIncrement    Decimal?
  initialPrice    Decimal? @db.Decimal(15, 2)
  /// Valor de avalia√ß√£o espec√≠fico para esta pra√ßa
  evaluationValue Decimal?
}

model Auction {
  id                               String               @id @default(uuid())
  publicId                         String               @unique
  slug                             String               @unique
  title                            String
  description                      String?              @db.Text
  status                           AuctionStatus        @default(RASCUNHO)
  auctionDate                      DateTime?
  endDate                          DateTime?
  auctioneer                       Auctioneer?          @relation(fields: [auctioneerId], references: [id])
  auctioneerId                     String?
  seller                           Seller?              @relation(fields: [sellerId], references: [id])
  sellerId                         String?
  category                         LotCategory?         @relation(fields: [categoryId], references: [id])
  categoryId                       String?
  court                            Court?               @relation(fields: [courtId], references: [id], onDelete: SetNull)
  courtId                          String?
  district                         JudicialDistrict?    @relation(fields: [districtId], references: [id], onDelete: SetNull)
  districtId                       String?
  branch                           JudicialBranch?      @relation(fields: [branchId], references: [id], onDelete: SetNull)
  branchId                         String?
  city                             City?                @relation(fields: [cityId], references: [id], onDelete: SetNull)
  cityId                           String?
  state                            State?               @relation(fields: [stateId], references: [id], onDelete: SetNull)
  stateId                          String?
  judicialProcess                  JudicialProcess?     @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  judicialProcessId                String?
  imageUrl                         String?
  imageMediaId                     String?
  documentsUrl                     String?
  visits                           Int                  @default(0)
  totalLots                        Int                  @default(0)
  initialOffer                     Decimal?             @db.Decimal(15, 2)
  isFavorite                       Boolean              @default(false)
  dataAiHint                       String?
  additionalTriggers               Json?
  decrementAmount                  Decimal?
  decrementIntervalSeconds         Int?
  floorPrice                       Decimal?
  autoRelistSettings               Json?
  createdAt                        DateTime             @default(now())
  updatedAt                        DateTime             @updatedAt
  lots                             Lot[]
  auctionStages                    AuctionStage[]
  habilitations                    AuctionHabilitation[]
  questions                        LotQuestion[]
  bids                             Bid[]
  
  // Settings
  auctionType                      AuctionType?
  participation                    AuctionParticipation @default(ONLINE)
  auctionMethod                    AuctionMethod        @default(STANDARD)
  onlineUrl                        String?
  address                          String?
  zipCode                          String?
  sellingBranch                    String?
  evaluationReportUrl              String?
  auctionCertificateUrl            String?
  automaticBiddingEnabled          Boolean              @default(false)
  allowInstallmentBids             Boolean              @default(true)
  silentBiddingEnabled             Boolean              @default(false)
  allowMultipleBidsPerUser         Boolean              @default(true)
  softCloseEnabled                 Boolean              @default(false)
  softCloseMinutes                 Int                  @default(2)
  estimatedRevenue                 Decimal?
  achievedRevenue                  Decimal?
  totalHabilitatedUsers            Int?
  isFeaturedOnMarketplace          Boolean              @default(false)
  marketplaceAnnouncementTitle     String?
}

model LotQuestion {
  id                      String   @id @default(uuid())
  lot                     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId                   String
  auction                 Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId               String
  userId                  String
  userDisplayName         String
  questionText            String   @db.Text
  answerText              String?  @db.Text
  isPublic                Boolean  @default(true)
  answeredByUserId        String?
  answeredByUserDisplayName String?
  createdAt               DateTime @default(now())
  answeredAt              DateTime?
}

model Bem {
  id                           String          @id @default(uuid())
  publicId                     String?         @unique
  title                        String
  description                  String?         @db.Text
  status                       BemStatus       @default(DISPONIVEL)
  category                     LotCategory     @relation(fields: [categoryId], references: [id])
  categoryId                   String
  subcategory                  Subcategory?    @relation(fields: [subcategoryId], references: [id])
  subcategoryId                String?
  judicialProcess              JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId            String?
  seller                       Seller?         @relation(fields: [sellerId], references: [id])
  sellerId                     String?
  evaluationValue              Decimal?        @db.Decimal(15, 2)
  imageUrl                     String?
  imageMediaId                 String?
  galleryImageUrls             Json?
  mediaItemIds                 Json?
  dataAiHint                   String?
  locationCity                 String?
  locationState                String?
  address                      String?
  latitude                     Decimal?
  longitude                    Decimal?
  createdAt                    DateTime        @default(now())
  updatedAt                    DateTime        @updatedAt
  lots                         LotBens[]

  // Vehicle specific
  plate                        String?
  make                         String?
  model                        String?
  version                      String?
  year                         Int?
  modelYear                    Int?
  mileage                      Int?
  color                        String?
  fuelType                     String?
  transmissionType             String?
  bodyType                     String?
  vin                          String?
  renavam                      String?
  enginePower                  String?
  numberOfDoors                Int?
  vehicleOptions               String?
  detranStatus                 String?
  debts                        String?
  runningCondition             String?
  bodyCondition                String?
  tiresCondition               String?
  hasKey                       Boolean?

  // Real Estate specific
  propertyRegistrationNumber   String?
  iptuNumber                   String?
  isOccupied                   Boolean?
  totalArea                    Decimal?
  builtArea                    Decimal?
  bedrooms                     Int?
  suites                       Int?
  bathrooms                    Int?
  parkingSpaces                Int?
  constructionType             String?
  finishes                     String?
  infrastructure               String?
  condoDetails                 String?
  improvements                 String?
  topography                   String?
  liensAndEncumbrances         String?
  propertyDebts                String?
  unregisteredRecords          String?
  hasHabiteSe                  Boolean?
  zoningRestrictions           String?
  amenities                    Json?

  // Electronics specific
  brand                        String?
  serialNumber                 String?
  itemCondition                String?
  specifications               String?
  includedAccessories          String?
  batteryCondition             String?
  hasInvoice                   Boolean?
  hasWarranty                  Boolean?
  repairHistory                String?

  // Appliances specific
  applianceCapacity            String?
  voltage                      String?
  applianceType                String?
  additionalFunctions          String?

  // Machinery specific
  hoursUsed                    Int?
  engineType                   String?
  capacityOrPower              String?
  maintenanceHistory           String?
  installationLocation         String?
  compliesWithNR               String?
  operatingLicenses            String?

  // Livestock specific
  breed                        String?
  age                          String?
  sex                          String?
  weight                       String?
  individualId                 String?
  purpose                      String?
  sanitaryCondition            String?
  vaccinationStatus            String?
  lineage                      String?
  isPregnant                   Boolean?
  specialSkills                String?
  gtaDocument                  String?
  breedRegistryDocument        String?

  // Furniture specific
  furnitureType                String?
  material                     String?
  style                        String?
  dimensions                   String?
  pieceCount                   Int?

  // Jewelry specific
  jewelryType                  String?
  metal                        String?
  gemstones                    String?
  totalWeight                  String?
  jewelrySize                  String?
  authenticityCertificate      String?

  // Art & Antiques specific
  workType                     String?
  artist                       String?
  period                       String?
  technique                    String?
  provenance                   String?

  // Boats specific
  boatType                     String?
  boatLength                   String?
  hullMaterial                 String?
  onboardEquipment             String?

  // Food specific
  productName                  String?
  quantity                     String?
  packagingType                String?
  expirationDate               DateTime?
  storageConditions            String?

  // Precious Metals specific
  preciousMetalType            String?
  purity                       String?

  // Forest Goods specific
  forestGoodsType              String?
  volumeOrQuantity             String?
  species                      String?
  dofNumber                    String?
}

model LotBens {
  lot       Lot      @relation(fields: [lotId], references: [id])
  lotId     String
  bem       Bem      @relation(fields: [bemId], references: [id])
  bemId     String

  @@id([lotId, bemId])
}

model Lot {
  id                           String   @id @default(uuid())
  publicId                     String?  @unique
  auction                      Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                    String
  slug                         String?
  number                       String?
  title                        String
  description                  String?  @db.Text
  price                        Decimal  @db.Decimal(15, 2)
  initialPrice                 Decimal? @db.Decimal(15, 2)
  secondInitialPrice           Decimal? @db.Decimal(15, 2)
  bidIncrementStep             Decimal? @db.Decimal(10, 2)
  status                       LotStatus @default(EM_BREVE)
  bidsCount                    Int      @default(0)
  views                        Int      @default(0)
  isFeatured                   Boolean  @default(false)
  isExclusive                  Boolean  @default(false)
  discountPercentage           Int?
  additionalTriggers           Json?
  imageUrl                     String?
  imageMediaId                 String?
  galleryImageUrls             Json?
  mediaItemIds                 Json?
  /// ID do Bem de onde as m√≠dias s√£o herdadas
  inheritedMediaFromBemId      String?
  type                         String
  category                     LotCategory?             @relation(fields: [categoryId], references: [id])
  categoryId                   String?
  subcategory                  Subcategory?             @relation(fields: [subcategoryId], references: [id])
  subcategoryId                String?
  auctionName                  String?
  seller                       Seller?                  @relation(fields: [sellerId], references: [id])
  sellerId                     String?
  sellerName                   String?
  auctioneer                   Auctioneer?              @relation(fields: [auctioneerId], references: [id])
  auctioneerId                 String?
  city                         City?                    @relation(fields: [cityId], references: [id])
  cityId                       String?
  state                        State?                   @relation(fields: [stateId], references: [id])
  stateId                      String?
  cityName                     String?
  stateUf                      String?
  latitude                     Decimal?
  longitude                    Decimal?
  mapAddress                   String?
  mapEmbedUrl                  String?
  mapStaticImageUrl            String?
  endDate                      DateTime?
  auctionDate                  DateTime?
  lotSpecificAuctionDate       DateTime?
  secondAuctionDate            DateTime?
  condition                    String?
  dataAiHint                   String?
  winner                       User?         @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId                     String?       @unique
  winningBidTermUrl            String?
  allowInstallmentBids         Boolean      @default(false)
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt
  bids                         Bid[]
  questions                    LotQuestion[]
  win                          UserWin?
  maxBids                      UserLotMaxBid[]
  bens                         LotBens[]
}

model UserWin {
  id               String   @id @default(uuid())
  lot              Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId            String   @unique
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  winningBidAmount Decimal
  winDate          DateTime @default(now())
  paymentStatus    PaymentStatus
  invoiceUrl       String?
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Decimal
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model Bid {
  id             String   @id @default(uuid())
  lot            Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId          String
  auction        Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId      String
  bidder         User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId       String
  bidderDisplay  String?
  amount         Decimal  @db.Decimal(15, 2)
  timestamp      DateTime @default(now())
}

model MediaItem {
  id                  String           @id @default(uuid())
  fileName            String           @unique
  storagePath         String
  title               String?
  altText             String?
  caption             String?
  description         String?          @db.Text
  mimeType            String
  sizeBytes           Int?
  urlOriginal         String
  urlThumbnail        String?
  urlMedium           String?
  urlLarge            String?
  linkedLotIds        Json?
  dataAiHint          String?
  uploadedByUser      User             @relation(fields: [uploadedByUserId], references: [id])
  uploadedByUserId    String
  judicialProcess     JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId   String?
  uploadedAt          DateTime         @default(now())
}

model UserDocument {
  id                String             @id @default(uuid())
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  documentType      DocumentType       @relation(fields: [documentTypeId], references: [id])
  documentTypeId    String
  status            UserDocumentStatus @default(NOT_SENT)
  fileUrl           String
  fileName          String?
  rejectionReason   String?            @db.Text
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@unique([userId, documentTypeId])
}
