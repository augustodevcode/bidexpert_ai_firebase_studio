// prisma/schema.prisma
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// ENUMS
// =================================================================
enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

enum DocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

// =================================================================
// MODELS (Ordered by dependency)
// =================================================================

// --- Models with few or no dependencies ---

model State {
  id              String             @id @default(uuid())
  name            String
  uf              String             @unique
  slug            String?            @unique
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  cities          City[]
  courts          Court[]
  judicialDistricts JudicialDistrict[]
  auctions        Auction[]
  lots            Lot[]
}

model Role {
  id             String         @id @default(uuid())
  name           String
  nameNormalized String         @unique
  description    String?        @db.Text
  permissions    Json
  users          UsersOnRoles[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model LotCategory {
  id                   String              @id @default(uuid())
  name                 String              @unique
  slug                 String              @unique
  description          String?             @db.Text
  hasSubcategories     Boolean
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  lots                 Lot[]
  bens                 Bem[]
  auctions             Auction[]
  subcategories        Subcategory[]
  directSaleOffers     DirectSaleOffer[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model DocumentType {
  id           String         @id @default(uuid())
  name         String
  description  String?        @db.Text
  isRequired   Boolean        @default(true)
  /// Comma-separated: PHYSICAL,LEGAL,ALL,PROCESS
  appliesTo    String?
  userDocuments UserDocument[]
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Court {
  id                String             @id @default(uuid())
  name              String
  slug              String?
  stateUf           String?
  website           String?
  state             State?             @relation(fields: [stateId], references: [id])
  stateId           String?
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}


// --- Models with some dependencies ---

model City {
  id        String    @id @default(uuid())
  name      String
  slug      String?
  state     State     @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId   String
  stateUf   String?
  ibgeCode  String?   @unique
  lotCount  Int?      @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lots      Lot[]
  auctions  Auction[]
}

model Subcategory {
  id                 String      @id @default(uuid())
  name               String
  slug               String?
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  parentCategoryId   String
  description        String?     @db.Text
  displayOrder       Int         @default(0)
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  lots               Lot[]
  bens               Bem[]
}

model User {
  id                   String                @id @default(uuid())
  email                String                @unique
  password             String?
  fullName             String?
  sellerId             String?
  habilitationStatus   UserHabilitationStatus  @default(PENDING_DOCUMENTS)
  accountType          AccountType           @default(PHYSICAL)
  avatarUrl            String?
  dataAiHint           String?
  badges               Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  roles                UsersOnRoles[]
  seller               Seller?               @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  documents            UserDocument[]
  bids                 Bid[]
  wins                 UserWin[]
  maxBids              UserLotMaxBid[]
  notifications        Notification[]
  uploadedMedia        MediaItem[]
  lotsWon              Lot[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model JudicialDistrict {
  id                String             @id @default(uuid())
  name              String
  slug              String?            @unique
  court             Court?             @relation(fields: [courtId], references: [id])
  courtId           String?
  state             State?             @relation(fields: [stateId], references: [id])
  stateId           String?
  zipCode           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  branches          JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialBranch {
  id                String             @id @default(uuid())
  name              String
  slug              String?            @unique
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  sellers           Seller[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}


// --- Models with multiple dependencies ---

model Seller {
  id                 String              @id @default(uuid())
  publicId           String?             @unique
  slug               String?             @unique
  name               String              @unique
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?             @db.Text
  user               User?
  isJudicial         Boolean             @default(false)
  judicialBranch     JudicialBranch?     @relation(fields: [judicialBranchId], references: [id])
  judicialBranchId   String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  auctions           Auction[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
  lots               Lot[]
  judicialProcesses  JudicialProcess[]
}

model Auctioneer {
  id                   String    @id @default(uuid())
  publicId             String?   @unique
  slug                 String?   @unique
  name                 String
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?   @db.Text
  userId               String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  auctions             Auction[]
  lots                 Lot[]
}

model JudicialProcess {
  id                  String           @id @default(uuid())
  publicId            String?          @unique
  processNumber       String
  isElectronic        Boolean          @default(true)
  court               Court?           @relation(fields: [courtId], references: [id])
  courtId             String?
  district            JudicialDistrict? @relation(fields: [districtId], references: [id])
  districtId          String?
  branch              JudicialBranch?  @relation(fields: [branchId], references: [id])
  branchId            String?
  seller              Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId            String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  parties             JudicialParty[]
  bens                Bem[]
  mediaItems          MediaItem[]
}

model DirectSaleOffer {
  id                   String                @id @default(uuid())
  publicId             String?               @unique
  title                String
  description          String?               @db.Text
  offerType            DirectSaleOfferType
  price                Decimal?              @db.Decimal(15, 2)
  minimumOfferPrice    Decimal?              @db.Decimal(15, 2)
  status               DirectSaleOfferStatus @default(ACTIVE)
  category             LotCategory           @relation(fields: [categoryId], references: [id])
  categoryId           String
  seller               Seller                @relation(fields: [sellerId], references: [id])
  sellerId             String
  sellerName           String?
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int                   @default(0)
  expiresAt            DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model AuctionStage {
  id               String   @id @default(uuid())
  auction          Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId        String
  name             String
  startDate        DateTime
  endDate          DateTime
  initialPrice     Decimal? @db.Decimal(15, 2)
  bidIncrement     Decimal? @db.Decimal(10, 2)
  /// Valor de avaliação específico para esta praça
  evaluationValue  Decimal? @db.Decimal(15, 2)
  statusText       String?

  @@index([auctionId])
}


model Lot {
  id                           String                 @id @default(uuid())
  publicId                     String?                @unique
  auction                      Auction                @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                    String
  slug                         String?
  number                       String?
  title                        String
  description                  String?                @db.Text
  price                        Decimal                @db.Decimal(15, 2)
  initialPrice                 Decimal?               @db.Decimal(15, 2)
  secondInitialPrice           Decimal?               @db.Decimal(15, 2)
  bidIncrementStep             Decimal?               @db.Decimal(10, 2)
  status                       LotStatus              @default(EM_BREVE)
  bidsCount                    Int?                   @default(0)
  views                        Int?                   @default(0)
  isFeatured                   Boolean?               @default(false)
  isExclusive                  Boolean?               @default(false)
  discountPercentage           Int?
  additionalTriggers           Json?
  imageUrl                     String?
  imageMediaId                 String?
  galleryImageUrls             Json?
  mediaItemIds                 Json?
  /// ID do Bem de onde as mídias são herdadas
  inheritedMediaFromBemId      String?
  type                         String
  category                     LotCategory?           @relation(fields: [categoryId], references: [id])
  categoryId                   String?
  subcategory                  Subcategory?           @relation(fields: [subcategoryId], references: [id])
  subcategoryId                String?
  auctionName                  String?
  seller                       Seller?                @relation(fields: [sellerId], references: [id])
  sellerId                     String?
  sellerName                   String?
  auctioneer                   Auctioneer?            @relation(fields: [auctioneerId], references: [id])
  auctioneerId                 String?
  city                         City?                  @relation(fields: [cityId], references: [id])
  cityId                       String?
  state                        State?                 @relation(fields: [stateId], references: [id])
  stateId                      String?
  cityName                     String?
  stateUf                      String?
  latitude                     Decimal?               @db.Decimal(10, 8)
  longitude                    Decimal?               @db.Decimal(11, 8)
  mapAddress                   String?
  mapEmbedUrl                  String?
  mapStaticImageUrl            String?
  endDate                      DateTime?
  auctionDate                  DateTime?
  lotSpecificAuctionDate       DateTime?
  secondAuctionDate            DateTime?
  condition                    String?
  dataAiHint                   String?
  winner                       User?                  @relation(name: "LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId                     String?                @unique
  winningBidTermUrl            String?
  allowInstallmentBids         Boolean?               @default(false)
  bens                         LotBens[]
  bids                         Bid[]
  questions                    LotQuestion[]
  reviews                      Review[]
  maxBids                      UserLotMaxBid[]
  win                          UserWin?
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt

  @@index([auctionId])
  @@index([categoryId])
  @@index([sellerId])
}

model LotBens {
  id     String @id @default(uuid())
  lot    Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId  String
  bem    Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId  String

  @@unique([lotId, bemId])
}

model UserWin {
  id               String        @id @default(uuid())
  lot              Lot           @relation(fields: [lotId], references: [id])
  lotId            String        @unique
  user             User          @relation(fields: [userId], references: [id])
  userId           String
  winningBidAmount Decimal       @db.Decimal(15, 2)
  winDate          DateTime
  paymentStatus    PaymentStatus
  invoiceUrl       String?
}

model Bem {
  id            String  @id @default(uuid())
  publicId      String? @unique
  title         String
  description   String? @db.Text
  status        String  @default("DISPONIVEL")
  categoryId    String?
  category      LotCategory? @relation(fields: [categoryId], references: [id])
  subcategoryId String?
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  judicialProcessId String?
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  sellerId      String?
  seller        Seller? @relation(fields: [sellerId], references: [id])
  evaluationValue Decimal? @db.Decimal(15, 2)
  imageUrl      String?
  imageMediaId  String?
  galleryImageUrls Json?
  mediaItemIds  Json?
  dataAiHint    String?
  locationCity  String?
  locationState String?
  address       String?
  latitude      Decimal? @db.Decimal(10, 8)
  longitude     Decimal? @db.Decimal(11, 8)
  lots          LotBens[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model UserDocument {
  id                String         @id @default(uuid())
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  documentType      DocumentType   @relation(fields: [documentTypeId], references: [id])
  documentTypeId    String
  status            DocumentStatus @default(NOT_SENT)
  fileUrl           String
  fileName          String?
  rejectionReason   String?        @db.Text
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@unique([userId, documentTypeId])
}

model MediaItem {
  id                   String           @id @default(uuid())
  fileName             String
  storagePath          String
  title                String
  altText              String?
  caption              String?
  description          String?          @db.Text
  mimeType             String
  sizeBytes            Int
  urlOriginal          String
  urlThumbnail         String?
  urlMedium            String?
  urlLarge             String?
  linkedLotIds         Json?
  dataAiHint           String?
  uploadedBy           User             @relation(fields: [uploadedByUserId], references: [id])
  uploadedByUserId     String
  judicialProcess      JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId    String?
  uploadedAt           DateTime         @default(now())
}

model Bid {
  id            String   @id @default(uuid())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId      String
  bidderDisplay String
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())

  @@index([lotId])
  @@index([bidderId])
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

model Review {
  id              String   @id @default(uuid())
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId           String
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())
}

model LotQuestion {
  id                      String   @id @default(uuid())
  lot                     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId                   String
  auction                 Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId               String
  userId                  String
  userDisplayName         String
  questionText            String   @db.Text
  isPublic                Boolean  @default(true)
  answerText              String?  @db.Text
  answeredByUserId        String?
  answeredByUserDisplayName String?
  answeredAt              DateTime?
  createdAt               DateTime @default(now())
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model AuctionHabilitation {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  auction   Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId String
  createdAt DateTime @default(now())

  @@unique([userId, auctionId])
}

model JudicialParty {
  id                String          @id @default(uuid())
  process           JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId         String
  name              String
  documentNumber    String?
  partyType         ProcessPartyType
}

model VehicleMake {
  id      String         @id @default(uuid())
  name    String         @unique
  slug    String         @unique
  models  VehicleModel[]
}

model VehicleModel {
  id      String      @id @default(uuid())
  name    String
  slug    String
  make    VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)
  makeId  String

  @@unique([name, makeId])
}
```
- src/components/ui/textarea.tsx:
```tsx
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }

```
- src/lib/ui-helpers.ts:
```ts
// src/lib/ui-helpers.ts
import type { Lot, AuctionStatus, UserDocumentStatus, UserHabilitationStatus, PaymentStatus, LotStatus, DirectSaleOfferStatus, Auction, AuctionStage } from '@/types';
import { FileText, Clock, FileWarning, CheckCircle2, ShieldAlert, HelpCircle, FileUp, CheckCircle } from 'lucide-react';
import { isPast } from 'date-fns';

// ============================================================================
// PURE HELPER FUNCTIONS (CLIENT & SERVER SAFE)
// ============================================================================
export const slugify = (text: string): string => {
  if (!text) return '';
  return text
    .toString()
    .toLowerCase()
    .trim()
    .normalize("NFD").replace(/[\u0300-\u036f]/g, "") 
    .replace(/\s+/g, '-') 
    .replace(/[^\w-]+/g, '') 
    .replace(/--+/g, '-'); 
};

/**
 * Validates if a given URL string is a valid, absolute URL for use in next/image.
 * @param {string | null | undefined} url The URL to validate.
 * @returns {boolean} True if the URL is valid, false otherwise.
 */
export const isValidImageUrl = (url?: string | null): boolean => {
    if (!url) {
        return false;
    }
    // Check for local relative paths
    if (url.startsWith('/')) {
        return true;
    }
    // Check for absolute URLs using the URL constructor
    try {
        const parsed = new URL(url);
        return parsed.protocol === "http:" || parsed.protocol === "https:";
    } catch (e) {
        return false;
    }
};


export const getAuctionStatusText = (status: AuctionStatus | LotStatus | UserDocumentStatus | UserHabilitationStatus | PaymentStatus | DirectSaleOfferStatus | string | undefined ): string => {
  if (!status) return 'Status Desconhecido';
  switch (status) {
    case 'ABERTO_PARA_LANCES': return 'Aberto para Lances';
    case 'EM_BREVE': return 'Em Breve';
    case 'ENCERRADO': return 'Encerrado';
    case 'FINALIZADO': return 'Finalizado';
    case 'ABERTO': return 'Aberto';
    case 'CANCELADO': return 'Cancelado';
    case 'SUSPENSO': return 'Suspenso';
    case 'VENDIDO': return 'Vendido';
    case 'NAO_VENDIDO': return 'Não Vendido';
    case 'NOT_SENT': return 'Não Enviado';
    case 'SUBMITTED': return 'Enviado';
    case 'APPROVED': return 'Aprovado';
    case 'REJECTED': return 'Rejeitado';
    case 'PENDING_ANALYSIS': return 'Em Análise';
    case 'PENDING_DOCUMENTS': return 'Documentos Pendentes';
    case 'HABILITADO': return 'Habilitado'; 
    case 'REJECTED_DOCUMENTS': return 'Documentos Rejeitados';
    case 'BLOCKED': return 'Conta Bloqueada';
    case 'ACTIVE': return 'Ativa'; 
    case 'SOLD': return 'Vendido'; 
    case 'EXPIRED': return 'Expirada'; 
    case 'PENDING_APPROVAL': return 'Pendente Aprovação';
    case 'RASCUNHO': return 'Rascunho';
    case 'EM_PREPARACAO': return 'Em Preparação';
    case 'PENDENTE': return 'Pendente';
    case 'PROCESSANDO': return 'Processando';
    case 'PAGO': return 'Pago';
    case 'FALHOU': return 'Falhou';
    case 'REEMBOLSADO': return 'Reembolsado';
    default: {
      if (typeof status === 'string') {
        return status.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
      }
      return 'Status Desconhecido';
    }
  }
};

export const getLotStatusColor = (status: LotStatus | DirectSaleOfferStatus): string => {
  switch (status) {
    case 'ABERTO_PARA_LANCES':
    case 'ACTIVE': 
      return 'bg-green-600 text-white';
    case 'EM_BREVE':
    case 'PENDING_APPROVAL': 
      return 'bg-blue-500 text-white';
    case 'ENCERRADO':
    case 'VENDIDO':
    case 'NAO_VENDIDO':
    case 'SOLD': 
    case 'EXPIRED': 
      return 'bg-gray-500 text-white';
    default:
      return 'bg-gray-300 text-gray-800';
  }
};

export const getAuctionStatusColor = (status: AuctionStatus | undefined): string => {
  if (!status) return 'bg-gray-400 text-gray-800';
  switch (status) {
    case 'ABERTO_PARA_LANCES':
    case 'ABERTO':
      return 'bg-green-600 text-white';
    case 'EM_BREVE':
      return 'bg-blue-500 text-white';
    case 'ENCERRADO':
    case 'FINALIZADO':
    case 'CANCELADO':
    case 'SUSPENSO':
      return 'bg-gray-500 text-white';
    case 'RASCUNHO':
    case 'EM_PREPARACAO':
      return 'bg-yellow-500 text-white';
    default:
      return 'bg-gray-300 text-gray-800';
  }
};

export const getPaymentStatusText = (status: PaymentStatus): string => getAuctionStatusText(status);

export const getUserDocumentStatusColor = (status: UserDocumentStatus): string => {
  switch (status) {
    case 'APPROVED': return 'green-500';
    case 'REJECTED': return 'red-500';
    case 'PENDING_ANALYSIS':
    case 'SUBMITTED':
      return 'yellow-500';
    case 'NOT_SENT':
    default:
      return 'gray-400';
  }
};

export const getUserDocumentStatusInfo = (status: UserDocumentStatus | undefined) => {
  switch (status) {
    case 'APPROVED':
      return { text: 'Aprovado', icon: CheckCircle, badgeVariant: 'secondary', textColor: 'text-green-700' };
    case 'REJECTED':
      return { text: 'Rejeitado', icon: FileWarning, badgeVariant: 'destructive', textColor: 'text-destructive' };
    case 'PENDING_ANALYSIS':
      return { text: 'Em Análise', icon: Clock, badgeVariant: 'outline', textColor: 'text-yellow-600' };
    case 'SUBMITTED':
      return { text: 'Enviado', icon: Clock, badgeVariant: 'outline', textColor: 'text-yellow-600' };
    case 'NOT_SENT':
    default:
      return { text: 'Não Enviado', icon: FileUp, badgeVariant: 'secondary', textColor: 'text-muted-foreground' };
  }
};

export const getUserHabilitationStatusInfo = (status: UserHabilitationStatus | undefined) => {
  switch (status) {
    case 'HABILITADO':
      return { text: 'Habilitado', description: 'Você está habilitado para dar lances!', textColor: 'text-green-600', icon: CheckCircle2, progress: 100 };
    case 'PENDING_ANALYSIS':
      return { text: 'Em Análise', description: 'Nossa equipe está analisando seus documentos.', textColor: 'text-yellow-600', icon: Clock, progress: 75 };
    case 'PENDING_DOCUMENTS':
      return { text: 'Documentos Pendentes', description: 'Envie os documentos marcados como obrigatórios (*) para prosseguir.', textColor: 'text-orange-600', icon: FileWarning, progress: 25 };
    case 'REJECTED_DOCUMENTS':
      return { text: 'Documentos Rejeitados', description: 'Um ou mais documentos foram rejeitados. Verifique abaixo.', textColor: 'text-red-600', icon: FileWarning, progress: 50 };
    case 'BLOCKED':
      return { text: 'Conta Bloqueada', description: 'Sua conta está bloqueada. Entre em contato com o suporte.', textColor: 'text-gray-700', icon: ShieldAlert, progress: 0 };
    default:
      return { text: 'Pendente', description: 'Complete seu cadastro e envie os documentos.', textColor: 'text-muted-foreground', icon: HelpCircle, progress: 10 };
  }
};


export const getCategoryAssets = (categoryName: string): { bannerUrl: string, bannerAiHint: string } => {
  const assets: Record<string, { bannerUrl: string, bannerAiHint: string }> = {
      'Leilões Judiciais': { bannerUrl: 'https://placehold.co/1200x250.png?text=Leiloes+Judiciais', bannerAiHint: 'tribunal martelo' },
      'Leilões Extrajudiciais': { bannerUrl: 'https://placehold.co/1200x250.png?text=Leiloes+Extrajudiciais', bannerAiHint: 'contrato assinatura' },
      'Tomada de Preços': { bannerUrl: 'https://placehold.co/1200x250.png?text=Tomada+de+Precos', bannerAiHint: 'documentos negocios' },
      'Venda Direta': { bannerUrl: 'https://placehold.co/1200x250.png?text=Venda+Direta', bannerAiHint: 'carrinho compras' },
      'Segunda Praça': { bannerUrl: 'https://placehold.co/1200x250.png?text=Segunda+Praca', bannerAiHint: 'desconto oportunidade' },
      'Leilões Encerrados': { bannerUrl: 'https://placehold.co/1200x250.png?text=Leiloes+Encerrados', bannerAiHint: 'arquivo historico' },
      'Leilões Cancelados': { bannerUrl: 'https://placehold.co/1200x250.png?text=Leiloes+Cancelados', bannerAiHint: 'carimbo cancelado' },
      'Default': { bannerUrl: 'https://placehold.co/1200x250.png?text=Leiloes', bannerAiHint: 'leilao geral' }
  };
  return assets[categoryName] || assets['Default'];
};

export const getUniqueLotLocations = (lots: Lot[]): string[] => {
  if (!lots) return [];
  const locations = new Set<string>();
  lots.forEach(lot => {
    if (lot.cityName && lot.stateUf) {
      locations.add(`${lot.cityName} - ${lot.stateUf}`);
    }
  });
  return Array.from(locations).sort();
};

export function getEffectiveLotEndDate(lot: Lot, auction?: Auction): { effectiveLotEndDate: Date | null, effectiveLotStartDate: Date | null } {
    if (!lot) return { effectiveLotEndDate: null, effectiveLotStartDate: null };

    const relevantAuction = auction || { auctionStages: [], endDate: null, auctionDate: null };
    let finalEndDate: Date | null = null;
    let finalStartDate: Date | null = null;

    if (relevantAuction.auctionStages && relevantAuction.auctionStages.length > 0) {
        const now = new Date();
        const futureStages = relevantAuction.auctionStages.filter(stage => stage.endDate && !isPast(new Date(stage.endDate as string)));
        const sortedFutureStages = futureStages.sort((a, b) => new Date(a.endDate as string).getTime() - new Date(b.endDate as string).getTime());

        let relevantStage: AuctionStage | undefined = sortedFutureStages[0];

        if (!relevantStage) {
            const sortedPastStages = [...relevantAuction.auctionStages].sort((a, b) => new Date(b.endDate as string).getTime() - new Date(a.endDate as string).getTime());
            relevantStage = sortedPastStages[0];
        }

        if (relevantStage?.endDate) {
            finalEndDate = new Date(relevantStage.endDate as string);
            const stageIndex = relevantAuction.auctionStages.findIndex(s => s.name === relevantStage?.name);
            if (stageIndex > 0 && relevantAuction.auctionStages[stageIndex - 1].endDate) {
                finalStartDate = new Date(relevantAuction.auctionStages[stageIndex - 1].endDate as string);
            } else {
                finalStartDate = relevantAuction.auctionDate ? new Date(relevantAuction.auctionDate as string) : null;
            }
        }
    }

    if (!finalEndDate) finalEndDate = relevantAuction.endDate ? new Date(relevantAuction.endDate as string) : null;
    if (!finalStartDate) finalStartDate = relevantAuction.auctionDate ? new Date(relevantAuction.auctionDate as string) : null;
    
    if (lot.endDate) finalEndDate = new Date(lot.endDate as string);
    if (lot.lotSpecificAuctionDate) finalStartDate = new Date(lot.lotSpecificAuctionDate as string);

    return { effectiveLotEndDate: finalEndDate, effectiveLotStartDate: finalStartDate };
}
```
- tests/setup-test-db.ts:
```ts

```
- tsx:
```

```
- yarn.lock:
```
# This file is generated by running "yarn install" in this workspace.
# Do not edit this file directly.

# OMITTING FOR CONCISENESS
```