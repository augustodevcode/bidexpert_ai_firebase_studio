// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model PlatformSettings {
  id                        String    @id @default("global")
  siteTitle                 String?
  siteTagline               String?
  logoUrl                   String?
  faviconUrl                String?
  galleryImageBasePath      String?
  storageProvider           String?
  firebaseStorageBucket     String?
  activeThemeName           String?
  themes                    Json?     @db.Json
  platformPublicIdMasks     Json?     @db.Json
  homepageSections          Json?     @db.Json
  mentalTriggerSettings     Json?     @db.Json
  sectionBadgeVisibility    Json?     @db.Json
  mapSettings               Json?     @db.Json
  searchPaginationType      String?
  searchItemsPerPage        Int?
  searchLoadMoreCount       Int?
  showCountdownOnLotDetail  Boolean?
  showCountdownOnCards      Boolean?
  showRelatedLotsOnLotDetail Boolean?
  relatedLotsCount          Int?
  defaultUrgencyTimerHours  Int?
  variableIncrementTable    Json?     @db.Json
  biddingSettings           Json?     @db.Json
  defaultListItemsPerPage   Int?
  updatedAt                 DateTime? @updatedAt
}

model Role {
  id            String         @id @default(uuid())
  name          String
  nameNormalized String        @unique
  description   String?
  permissions   String[]       @default([])
  users         UsersOnRoles[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model User {
  id                  String                @id @default(uuid())
  email               String                @unique
  password            String?
  fullName            String?
  habilitationStatus  String                @default("PENDING_DOCUMENTS")
  accountType         String                @default("PHYSICAL")
  avatarUrl           String?
  dataAiHint          String?
  badges              String[]              @default([])
  cpf                 String?
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  optInMarketing      Boolean?              @default(false)
  razaoSocial         String?
  cnpj                String?
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  roles               UsersOnRoles[]
  bids                Bid[]
  wins                UserWin[]
  documents           UserDocument[]
  mediaItems          MediaItem[]
  auctioneer          Auctioneer?
  seller              Seller?
  questions           LotQuestion[]
  answers             LotQuestion[]         @relation("AnsweredBy")
  maxBids             UserLotMaxBid[]
  auctionHabilitations AuctionHabilitation[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model State {
  id        String             @id @default(uuid())
  name      String
  uf        String             @unique
  slug      String             @unique
  cityCount Int                @default(0)
  cities    City[]
  districts JudicialDistrict[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  lots      Lot[]
}

model City {
  id      String   @id @default(uuid())
  name    String
  slug    String?
  state   State    @relation(fields: [stateId], references: [id])
  stateId String
  stateUf String?
  ibgeCode String? @unique
  lotCount Int     @default(0)
  lots    Lot[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LotCategory {
  id                   String        @id @default(uuid())
  name                 String
  slug                 String        @unique
  description          String?
  hasSubcategories     Boolean?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  subcategories        Subcategory[]
  lots                 Lot[]
  bens                 Bem[]
  auctions             Auction[]
  directSaleOffers     DirectSaleOffer[]
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
}

model Subcategory {
  id               String       @id @default(uuid())
  name             String
  slug             String?
  parentCategory   LotCategory  @relation(fields: [parentCategoryId], references: [id])
  parentCategoryId String
  description      String?
  displayOrder     Int          @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  lots             Lot[]
  bens             Bem[]
}

model Court {
  id                String             @id @default(uuid())
  name              String
  slug              String?
  stateUf           String?
  website           String?
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model JudicialDistrict {
  id                String              @id @default(uuid())
  name              String
  slug              String              @unique
  court             Court?              @relation(fields: [courtId], references: [id])
  courtId           String?
  state             State?              @relation(fields: [stateId], references: [id])
  stateId           String?
  zipCode           String?
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model JudicialBranch {
  id                String              @id @default(uuid())
  name              String
  slug              String              @unique
  district          JudicialDistrict?   @relation(fields: [districtId], references: [id])
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  sellers           Seller[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Seller {
  id               String              @id @default(uuid())
  publicId         String?             @unique
  slug             String?             @unique
  name             String              @unique
  contactName      String?
  email            String?
  phone            String?
  address          String?
  city             String?
  state            String?
  zipCode          String?
  website          String?
  logoUrl          String?
  logoMediaId      String?
  dataAiHintLogo   String?
  description      String?
  user             User?               @relation(fields: [userId], references: [id])
  userId           String?             @unique
  isJudicial       Boolean             @default(false)
  judicialBranch   JudicialBranch?     @relation(fields: [judicialBranchId], references: [id])
  judicialBranchId String?
  auctions         Auction[]
  lots             Lot[]
  bens             Bem[]
  judicialProcesses JudicialProcess[]
  directSaleOffers  DirectSaleOffer[]
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
}

model Auctioneer {
  id                 String    @id @default(uuid())
  publicId           String?   @unique
  slug               String?   @unique
  name               String
  registrationNumber String?
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?
  user               User?     @relation(fields: [userId], references: [id])
  userId             String?   @unique
  auctions           Auction[]
  lots               Lot[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model JudicialProcess {
  id            String           @id @default(uuid())
  publicId      String?          @unique
  processNumber String
  isElectronic  Boolean          @default(true)
  court         Court?           @relation(fields: [courtId], references: [id])
  courtId       String?
  district      JudicialDistrict? @relation(fields: [districtId], references: [id])
  districtId    String?
  branch        JudicialBranch?  @relation(fields: [branchId], references: [id])
  branchId      String?
  seller        Seller?          @relation(fields: [sellerId], references: [id])
  sellerId      String?
  parties       JudicialParty[]
  bens          Bem[]
  auctions      Auction[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model JudicialParty {
  id             String          @id @default(uuid())
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId      String
  name           String
  documentNumber String?
  partyType      String
}

model Bem {
  id                  String           @id @default(uuid())
  publicId            String?          @unique
  title               String
  description         String?          @db.Text
  status              String           @default("DISPONIVEL")
  category            LotCategory?     @relation(fields: [categoryId], references: [id])
  categoryId          String?
  subcategory         Subcategory?     @relation(fields: [subcategoryId], references: [id])
  subcategoryId       String?
  judicialProcess     JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId   String?
  seller              Seller?          @relation(fields: [sellerId], references: [id])
  sellerId            String?
  evaluationValue     Float?
  imageUrl            String?
  imageMediaId        String?
  galleryImageUrls    Json?
  mediaItemIds        Json?
  dataAiHint          String?
  locationCity        String?
  locationState       String?
  address             String?
  latitude            Float?
  longitude           Float?
  lots                LotBens[]
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  plate               String?
  make                String?
  model               String?
  version             String?
  year                Int?
  modelYear           Int?
  mileage             Int?
  color               String?
  fuelType            String?
  transmissionType    String?
  bodyType            String?
  vin                 String?
  renavam             String?
  enginePower         String?
  numberOfDoors       Int?
  vehicleOptions      String?
  detranStatus        String?
  debts               String?
  runningCondition    String?
  bodyCondition       String?
  tiresCondition      String?
  hasKey              Boolean?
  propertyType        String?
  propertyRegistrationNumber String?
  iptuNumber          String?
  isOccupied          Boolean?
  area                Float?
  totalArea           Float?
  builtArea           Float?
  bedrooms            Int?
  suites              Int?
  bathrooms           Int?
  parkingSpaces       Int?
  constructionType    String?
  finishes            String?
  infrastructure      String?
  condoDetails        String?
  improvements        String?
  topography          String?
  liensAndEncumbrances String?
  propertyDebts       String?
  unregisteredRecords String?
  hasHabiteSe         Boolean?
  zoningRestrictions  String?
  amenities           Json?
  brand               String?
  serialNumber        String?
  itemCondition       String?
  specifications      String?
  includedAccessories String?
  batteryCondition    String?
  hasInvoice          Boolean?
  hasWarranty         Boolean?
  repairHistory       String?
  applianceCapacity   String?
  voltage             String?
  applianceType       String?
  additionalFunctions String?
  hoursUsed           Int?
  engineType          String?
  capacityOrPower     String?
  maintenanceHistory  String?
  installationLocation String?
  compliesWithNR      String?
  operatingLicenses   String?
  breed               String?
  age                 String?
  sex                 String?
  weight              String?
  individualId        String?
  purpose             String?
  sanitaryCondition   String?
  vaccinationStatus   String?
  lineage             String?
  isPregnant          Boolean?
  specialSkills       String?
  gtaDocument         String?
  breedRegistryDocument String?
  furnitureType       String?
  material            String?
  style               String?
  dimensions          String?
  pieceCount          Int?
  jewelryType         String?
  metal               String?
  gemstones           String?
  totalWeight         String?
  jewelrySize         String?
  authenticityCertificate String?
  workType            String?
  artist              String?
  period              String?
  technique           String?
  provenance          String?
  boatType            String?
  boatLength          String?
  hullMaterial        String?
  onboardEquipment    String?
  productName         String?
  quantity            String?
  packagingType       String?
  expirationDate      DateTime?
  storageConditions   String?
  preciousMetalType   String?
  purity              String?
  forestGoodsType     String?
  volumeOrQuantity    String?
  species             String?
  dofNumber           String?
}

model Auction {
  id                            String                @id @default(uuid())
  publicId                      String?               @unique
  slug                          String?               @unique
  title                         String
  description                   String?               @db.Text
  status                        String?               @default("RASCUNHO")
  auctionDate                   DateTime?
  endDate                       DateTime?
  auctioneer                    Auctioneer?           @relation(fields: [auctioneerId], references: [id])
  auctioneerId                  String?
  seller                        Seller?               @relation(fields: [sellerId], references: [id])
  sellerId                      String?
  category                      LotCategory?          @relation(fields: [categoryId], references: [id])
  categoryId                    String?
  auctionType                   String?
  imageUrl                      String?
  imageMediaId                  String?
  documentsUrl                  String?
  visits                        Int?                  @default(0)
  totalLots                     Int?                  @default(0)
  initialOffer                  Float?
  isFavorite                    Boolean?              @default(false)
  dataAiHint                    String?
  judicialProcess               JudicialProcess?      @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId             String?
  court                         Court?                @relation(fields: [courtId], references: [id])
  courtId                       String?
  district                      JudicialDistrict?     @relation(fields: [districtId], references: [id])
  districtId                    String?
  branch                        JudicialBranch?       @relation(fields: [branchId], references: [id])
  branchId                      String?
  mapAddress                    String?
  latitude                      Float?
  longitude                     Float?
  estimatedRevenue              Float?
  achievedRevenue               Float?
  totalHabilitatedUsers         Int?
  isFeaturedOnMarketplace       Boolean               @default(false)
  marketplaceAnnouncementTitle  String?
  additionalTriggers            Json?
  automaticBiddingEnabled       Boolean               @default(false)
  allowInstallmentBids          Boolean               @default(true)
  silentBiddingEnabled          Boolean               @default(false)
  allowMultipleBidsPerUser      Boolean               @default(true)
  softCloseEnabled              Boolean               @default(false)
  softCloseMinutes              Int?
  decrementAmount               Float?
  decrementIntervalSeconds      Int?
  floorPrice                    Float?
  evaluationReportUrl           String?
  auctionCertificateUrl         String?
  sellingBranch                 String?
  autoRelistSettings            Json?
  auctionStages                 Json?
  lots                          Lot[]
  bids                          Bid[]
  auctionHabilitations          AuctionHabilitation[]
  createdAt                     DateTime              @default(now())
  updatedAt                     DateTime              @updatedAt
}

model Lot {
  id                       String        @id @default(uuid())
  publicId                 String?       @unique
  auction                  Auction       @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                String
  slug                     String?
  number                   String?
  title                    String
  description              String?       @db.Text
  price                    Float
  initialPrice             Float?
  secondInitialPrice       Float?
  bidIncrementStep         Float?
  status                   String        @default("EM_BREVE")
  bidsCount                Int?          @default(0)
  views                    Int?          @default(0)
  isFeatured               Boolean       @default(false)
  isExclusive              Boolean       @default(false)
  discountPercentage       Int?
  additionalTriggers       Json?
  imageUrl                 String?
  imageMediaId             String?
  galleryImageUrls         Json?
  mediaItemIds             Json?
  bens                     LotBens[]
  type                     String?
  category                 LotCategory?  @relation(fields: [categoryId], references: [id])
  categoryId               String?
  subcategory              Subcategory?  @relation(fields: [subcategoryId], references: [id])
  subcategoryId            String?
  seller                   Seller?       @relation(fields: [sellerId], references: [id])
  sellerId                 String?
  auctioneer               Auctioneer?   @relation(fields: [auctioneerId], references: [id])
  auctioneerId             String?
  city                     City?         @relation(fields: [cityId], references: [id])
  cityId                   String?
  state                    State?        @relation(fields: [stateId], references: [id])
  stateId                  String?
  latitude                 Float?
  longitude                Float?
  mapAddress               String?
  mapEmbedUrl              String?
  mapStaticImageUrl        String?
  endDate                  DateTime?
  lotSpecificAuctionDate   DateTime?
  secondAuctionDate        DateTime?
  condition                String?
  dataAiHint               String?
  winner                   User?         @relation(fields: [winnerId], references: [id])
  winnerId                 String?
  winningBidTermUrl        String?
  allowInstallmentBids     Boolean       @default(false)
  bids                     Bid[]
  reviews                  Review[]
  questions                LotQuestion[]
  maxBids                  UserLotMaxBid[]
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
}

model LotBens {
  lot      Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId    String
  bem      Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId    String
  quantity Int    @default(1)

  @@id([lotId, bemId])
}

model MediaItem {
  id                String    @id @default(uuid())
  fileName          String
  storagePath       String
  title             String?
  altText           String?
  caption           String?
  description       String?   @db.Text
  mimeType          String
  sizeBytes         Int?
  urlOriginal       String
  urlThumbnail      String?
  urlMedium         String?
  urlLarge          String?
  linkedLotIds      Json?
  dataAiHint        String?
  uploadedBy        User      @relation(fields: [uploadedByUserId], references: [id])
  uploadedByUserId  String
  uploadedAt        DateTime  @default(now())
  judicialProcessId String?
}

model UserDocument {
  id              String       @id @default(uuid())
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  documentType    DocumentType @relation(fields: [documentTypeId], references: [id])
  documentTypeId  String
  status          String       @default("PENDING")
  fileUrl         String
  fileName        String?
  rejectionReason String?      @db.Text
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id              String         @id @default(uuid())
  name            String         @unique
  description     String?
  isRequired      Boolean        @default(true)
  appliesTo       String? // e.g., "PHYSICAL,LEGAL"
  userDocuments   UserDocument[]
}

model Bid {
  id            String   @id @default(uuid())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId      String
  bidderDisplay String?
  amount        Float
  timestamp     DateTime @default(now())
}

model Review {
    id String @id @default(uuid())
    lot Lot @relation(fields: [lotId], references: [id])
    lotId String
    auctionId String
    user User @relation(fields: [userId], references: [id])
    userId String
    userDisplayName String
    rating Int
    comment String? @db.Text
    createdAt DateTime @default(now())
}

model LotQuestion {
    id String @id @default(uuid())
    lot Lot @relation(fields: [lotId], references: [id])
    lotId String
    auctionId String
    user User @relation(fields: [userId], references: [id])
    userId String
    userDisplayName String
    questionText String @db.Text
    isPublic Boolean @default(true)
    createdAt DateTime @default(now())
    
    answerText String? @db.Text
    answeredByUser User? @relation("AnsweredBy", fields: [answeredByUserId], references: [id])
    answeredByUserId String?
    answeredByUserDisplayName String?
    answeredAt DateTime?
}

model UserWin {
  id               String   @id @default(uuid())
  lot              Lot      @relation(fields: [lotId], references: [id])
  lotId            String   @unique
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  winningBidAmount Float
  winDate          DateTime @default(now())
  paymentStatus    String   
  invoiceUrl       String?
}

model DirectSaleOffer {
  id                   String      @id @default(uuid())
  publicId             String?     @unique
  title                String
  description          String?     @db.Text
  offerType            String?
  price                Float?
  minimumOfferPrice    Float?
  status               String      @default("ACTIVE")
  category             LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId           String?
  seller               Seller?     @relation(fields: [sellerId], references: [id])
  sellerId             String?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int?        @default(0)
  expiresAt            DateTime?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Notification {
  id String @id @default(uuid())
  userId String
  message String
  link String?
  isRead Boolean @default(false)
  createdAt DateTime @default(now())
}

model AuctionHabilitation {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  auction Auction @relation(fields: [auctionId], references: [id])
  auctionId String
  habilitatedAt DateTime @default(now())

  @@unique([userId, auctionId])
}
