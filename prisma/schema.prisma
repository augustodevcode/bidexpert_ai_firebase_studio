// prisma/schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// MODELOS DE DADOS DA APLICAÇÃO
// =================================================================

model PlatformSettings {
  id                        String @id @default(cuid())
  siteTitle                 String? @db.VarChar(100)
  siteTagline               String? @db.VarChar(200)
  logoUrl                   String? @db.VarChar(255)
  faviconUrl                String? @db.VarChar(255)
  galleryImageBasePath      String  @default("/uploads/media/") @db.VarChar(200)
  storageProvider           String  @default("local") @db.VarChar(50)
  firebaseStorageBucket     String? @db.VarChar(200)
  activeThemeName           String? @db.VarChar(100)
  platformPublicIdMasksId   String?
  mapSettingsId             String?
  biddingSettingsId         String?
  mentalTriggerSettingsId   String?
  sectionBadgeVisibilityId  String?
  variableIncrementTableId  String?
  searchPaginationType      String  @default("loadMore") @db.VarChar(50)
  searchItemsPerPage        Int     @default(12)
  searchLoadMoreCount       Int     @default(12)
  showCountdownOnLotDetail  Boolean @default(true)
  showCountdownOnCards      Boolean @default(true)
  showRelatedLotsOnLotDetail Boolean @default(true)
  relatedLotsCount          Int     @default(5)
  defaultUrgencyTimerHours  Int?
  defaultListItemsPerPage   Int     @default(10)
  updatedAt                 DateTime @updatedAt

  platformPublicIdMasks   PlatformPublicIdMasks?   @relation(fields: [platformPublicIdMasksId], references: [id])
  mapSettings             MapSettings?             @relation(fields: [mapSettingsId], references: [id])
  biddingSettings         BiddingSettings?         @relation(fields: [biddingSettingsId], references: [id])
  mentalTriggerSettings   MentalTriggerSettings?   @relation(fields: [mentalTriggerSettingsId], references: [id])
  sectionBadgeVisibility  SectionBadgeVisibility?  @relation(fields: [sectionBadgeVisibilityId], references: [id])
  variableIncrementTable  VariableIncrementTable?  @relation(fields: [variableIncrementTableId], references: [id])
  themes                  Theme[]
}

model Theme {
  id                String @id @default(cuid())
  name              String @unique
  colors            Json
  platformSettingsId String?
  platformSettings  PlatformSettings? @relation(fields: [platformSettingsId], references: [id])
}

model PlatformPublicIdMasks {
  id              String   @id @default(cuid())
  auctions        String?
  lots            String?
  auctioneers     String?
  sellers         String?
  platformSettings PlatformSettings[]
}

model MapSettings {
  id                      String   @id @default(cuid())
  defaultProvider         String   @default("openstreetmap")
  googleMapsApiKey        String?
  staticImageMapZoom      Int      @default(15)
  staticImageMapMarkerColor String @default("blue")
  platformSettings        PlatformSettings[]
}

model BiddingSettings {
  id                              String   @id @default(cuid())
  instantBiddingEnabled           Boolean  @default(true)
  getBidInfoInstantly             Boolean  @default(true)
  biddingInfoCheckIntervalSeconds Int      @default(1)
  platformSettings                PlatformSettings[]
}

model MentalTriggerSettings {
  id                          String   @id @default(cuid())
  showDiscountBadge           Boolean  @default(true)
  showUrgencyTimer            Boolean  @default(true)
  urgencyTimerThresholdDays   Int      @default(1)
  urgencyTimerThresholdHours  Int      @default(0)
  showPopularityBadge         Boolean  @default(true)
  popularityViewThreshold     Int      @default(500)
  showHotBidBadge             Boolean  @default(true)
  hotBidThreshold             Int      @default(10)
  showExclusiveBadge          Boolean  @default(true)
  platformSettings            PlatformSettings[]
}

model SectionBadgeVisibility {
  id                  String @id @default(cuid())
  featuredLots        Json?
  searchGrid          Json?
  searchList          Json?
  lotDetail           Json?
  platformSettings    PlatformSettings[]
}

model VariableIncrementTable {
  id                String @id @default(cuid())
  rules             Json
  platformSettings  PlatformSettings[]
}

model Role {
  id            String   @id @default(cuid())
  name          String   @unique
  nameNormalized String  @unique
  description   String?
  permissions   String[] @db.Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  users         UsersOnRoles[]
}

model UsersOnRoles {
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  role        Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId      String
  assignedAt  DateTime @default(now())
  assignedBy  String

  @@id([userId, roleId])
}

model State {
  id      String   @id @default(cuid())
  name    String
  uf      String   @unique
  slug    String   @unique
  cities  City[]
  districts JudicialDistrict[]
  lots      Lot[]
}

model LotCategory {
  id                    String      @id @default(cuid())
  name                  String      @unique
  slug                  String      @unique
  description           String?     @db.Text
  hasSubcategories      Boolean
  logoUrl               String?
  logoMediaId           String?
  dataAiHintIcon        String?
  coverImageUrl         String?
  coverImageMediaId     String?
  dataAiHintCover       String?
  megaMenuImageUrl      String?
  megaMenuImageMediaId  String?
  dataAiHintMegaMenu    String?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  lots                  Lot[]
  bens                  Bem[]
  subcategories         Subcategory[]
  auctions              Auction[]
}

model DocumentTemplate {
  id        String   @id @default(cuid())
  name      String
  type      String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id      String   @id @default(cuid())
  name    String
  email   String
  subject String
  message String   @db.Text
  isRead  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentType {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isRequired  Boolean  @default(true)
  appliesTo   String? // e.g., "PHYSICAL,LEGAL"
  userDocuments UserDocument[]
}

model User {
  id                  String   @id @default(cuid())
  email               String   @unique
  password            String
  fullName            String?
  roles               UsersOnRoles[]
  seller              Seller[]
  habilitationStatus  String   @default("PENDING_DOCUMENTS")
  accountType         String   @default("PHYSICAL")
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  cpf String? @unique
  rgNumber String?
  rgIssuer String?
  rgIssueDate DateTime?
  rgState String?
  dateOfBirth DateTime?
  cellPhone String?
  homePhone String?
  gender String?
  profession String?
  nationality String?
  maritalStatus String?
  propertyRegime String?
  spouseName String?
  spouseCpf String?

  razaoSocial String?
  cnpj String? @unique
  inscricaoEstadual String?
  website String?
  responsibleName String?
  responsibleCpf String?

  zipCode String?
  street String?
  number String?
  complement String?
  neighborhood String?
  city String?
  state String?

  optInMarketing      Boolean  @default(false)

  documents           UserDocument[]
  mediaItems          MediaItem[]
  bids                Bid[]
  wins                UserWin[]
  maxBids             UserLotMaxBid[]
  auctionHabilitations AuctionHabilitation[]
}

model City {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  state     State     @relation(fields: [stateId], references: [id])
  stateId   String
  stateUf   String
  ibgeCode  String?   @unique
  lotCount  Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lots      Lot[]
}

model Subcategory {
  id                 String     @id @default(cuid())
  name               String
  slug               String     @unique
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id])
  parentCategoryId   String
  description        String?
  displayOrder       Int        @default(0)
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  lots               Lot[]
  bens               Bem[]
}

model Court {
  id                 String   @id @default(cuid())
  name               String   @unique
  slug               String   @unique
  stateUf            String?
  website            String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  judicialDistricts  JudicialDistrict[]
  judicialProcesses  JudicialProcess[]
  auctions           Auction[]
}

model JudicialDistrict {
  id                 String   @id @default(cuid())
  name               String
  slug               String   @unique
  court              Court?   @relation(fields: [courtId], references: [id])
  courtId            String?
  state              State?   @relation(fields: [stateId], references: [id])
  stateId            String?
  zipCode            String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  judicialBranches   JudicialBranch[]
  judicialProcesses  JudicialProcess[]
}

model JudicialBranch {
  id                 String   @id @default(cuid())
  name               String
  slug               String   @unique
  district           JudicialDistrict? @relation(fields: [districtId], references: [id])
  districtId         String?
  contactName        String?
  phone              String?
  email              String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  judicialProcesses  JudicialProcess[]
  sellers            Seller[]
}

model Seller {
  id                 String   @id @default(cuid())
  publicId           String?  @unique
  slug               String   @unique
  name               String   @unique
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?  @db.Text
  user               User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId             String?  @unique
  isJudicial         Boolean  @default(false)
  judicialBranch     JudicialBranch? @relation(fields: [judicialBranchId], references: [id])
  judicialBranchId   String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  auctions           Auction[]
  lots               Lot[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
}

model Auctioneer {
  id                  String   @id @default(cuid())
  publicId            String?  @unique
  slug                String   @unique
  name                String
  registrationNumber  String?
  contactName         String?
  email               String?
  phone               String?
  address             String?
  city                String?
  state               String?
  zipCode             String?
  website             String?
  logoUrl             String?
  logoMediaId         String?
  dataAiHintLogo      String?
  description         String?  @db.Text
  userId              String?  @unique
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  auctions            Auction[]
  lots                Lot[]
}

model JudicialProcess {
  id            String   @id @default(cuid())
  publicId      String?  @unique
  processNumber String   @unique
  isElectronic  Boolean  @default(true)
  court         Court?   @relation(fields: [courtId], references: [id])
  courtId       String?
  district      JudicialDistrict? @relation(fields: [districtId], references: [id])
  districtId    String?
  branch        JudicialBranch? @relation(fields: [branchId], references: [id])
  branchId      String?
  seller        Seller?  @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  parties       JudicialParty[]
  bens          Bem[]
}

model JudicialParty {
  id             String   @id @default(cuid())
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId      String
  name           String
  documentNumber String?
  partyType      String
}

model Bem {
  id            String   @id @default(cuid())
  publicId      String?  @unique
  title         String
  description   String?  @db.Text
  status        String   @default("DISPONIVEL")
  category      LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId    String?
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId String?
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId String?
  seller        Seller?  @relation(fields: [sellerId], references: [id])
  sellerId      String?
  evaluationValue Decimal? @db.Decimal(15, 2)
  imageUrl      String?
  imageMediaId  String?
  galleryImageUrls Json?
  mediaItemIds  Json?
  dataAiHint    String?
  locationCity  String?
  locationState String?
  address       String?
  latitude      Decimal? @db.Decimal(10, 8)
  longitude     Decimal? @db.Decimal(11, 8)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lots          LotBens[]

  // Vehicle specific fields
  plate String?
  make String?
  model String?
  version String?
  year Int?
  modelYear Int?
  mileage Int?
  color String?
  fuelType String?
  transmissionType String?
  bodyType String?
  vin String?
  renavam String?
  enginePower String?
  numberOfDoors Int?
  vehicleOptions String? @db.Text
  detranStatus String?
  debts String? @db.Text
  runningCondition String?
  bodyCondition String?
  tiresCondition String?
  hasKey Boolean?

  // Real estate specific fields
  propertyRegistrationNumber String?
  iptuNumber String?
  isOccupied Boolean?
  totalArea Decimal? @db.Decimal(15, 2)
  builtArea Decimal? @db.Decimal(15, 2)
  bedrooms Int?
  suites Int?
  bathrooms Int?
  parkingSpaces Int?
  constructionType String?
  finishes String? @db.Text
  infrastructure String? @db.Text
  condoDetails String? @db.Text
  improvements String? @db.Text
  topography String?
  liensAndEncumbrances String? @db.Text
  propertyDebts String? @db.Text
  unregisteredRecords String? @db.Text
  hasHabiteSe Boolean?
  zoningRestrictions String? @db.Text

  // Common specific fields
  brand String?
  serialNumber String?
  itemCondition String?
  specifications String? @db.Text
  includedAccessories String? @db.Text

  // Electronics specific fields
  batteryCondition String?
  hasInvoice Boolean?
  hasWarranty Boolean?
  repairHistory String? @db.Text

  // Appliance specific fields
  applianceCapacity String?
  voltage String?
  applianceType String?
  additionalFunctions String? @db.Text

  // Machinery specific fields
  hoursUsed Int?
  engineType String?
  capacityOrPower String?
  maintenanceHistory String? @db.Text
  installationLocation String?
  compliesWithNR String?
  operatingLicenses String? @db.Text

  // Livestock specific fields
  breed String?
  age String?
  sex String?
  weight String?
  individualId String?
  purpose String?
  sanitaryCondition String? @db.Text
  lineage String?
  isPregnant Boolean?
  specialSkills String? @db.Text
  gtaDocument String?
  breedRegistryDocument String?

  // Furniture specific fields
  furnitureType String?
  material String?
  style String?
  dimensions String?
  pieceCount Int?
  
  // Jewelry specific fields
  jewelryType String?
  metal String?
  gemstones String? @db.Text
  totalWeight String?
  jewelrySize String?
  authenticityCertificate String?
  
  // Art & Antiques specific fields
  workType String?
  artist String?
  period String?
  technique String?
  provenance String? @db.Text
  
  // Boats specific fields
  boatType String?
  boatLength String?
  hullMaterial String?
  onboardEquipment String? @db.Text
  
  // Food specific fields
  productName String?
  quantity String?
  packagingType String?
  expirationDate DateTime?
  storageConditions String?
  
  // Precious Metals specific fields
  preciousMetalType String?
  purity String?
  
  // Forest Goods specific fields
  forestGoodsType String?
  volumeOrQuantity String?
  species String?
  dofNumber String?
}

model Auction {
  id                  String   @id @default(cuid())
  publicId            String?  @unique
  slug                String   @unique
  title               String
  description         String?  @db.Text
  status              String   @default("RASCUNHO")
  auctionDate         DateTime
  endDate             DateTime?
  auctioneer          Auctioneer? @relation(fields: [auctioneerId], references: [id])
  auctioneerId        String?
  seller              Seller?     @relation(fields: [sellerId], references: [id])
  sellerId            String?
  category            LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId          String?
  auctionType         String?
  imageUrl            String?
  imageMediaId        String?
  documentsUrl        String?
  visits              Int      @default(0)
  initialOffer        Decimal? @db.Decimal(15, 2)
  isFavorite          Boolean  @default(false)
  dataAiHint          String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  lots                Lot[]
  bids                Bid[]
  auctionHabilitations AuctionHabilitation[]

  // Judicial specific
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId String?
  court             Court?           @relation(fields: [courtId], references: [id])
  courtId           String?
  
  // New Marketplace Fields
  evaluationReportUrl         String?
  auctionCertificateUrl       String?
  sellingBranch               String?
  automaticBiddingEnabled     Boolean @default(false)
  allowInstallmentBids        Boolean @default(false)
  silentBiddingEnabled        Boolean @default(false)
  allowMultipleBidsPerUser    Boolean @default(true)
  softCloseEnabled            Boolean @default(false)
  softCloseMinutes            Int?    @default(2)
  estimatedRevenue            Decimal? @db.Decimal(15, 2)
  achievedRevenue             Decimal? @db.Decimal(15, 2)
  totalHabilitatedUsers       Int?    @default(0)
  isFeaturedOnMarketplace     Boolean @default(false)
  marketplaceAnnouncementTitle String?
  auctionStages               Json?
  decrementAmount             Decimal? @db.Decimal(15, 2)
  decrementIntervalSeconds    Int?
  floorPrice                  Decimal? @db.Decimal(15, 2)
  autoRelistSettings          Json?
}

model Lot {
  id              String   @id @default(cuid())
  publicId        String?  @unique
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId       String
  slug            String?
  number          String?
  title           String
  description     String?  @db.Text
  price           Decimal  @db.Decimal(15, 2)
  initialPrice    Decimal? @db.Decimal(15, 2)
  secondInitialPrice Decimal? @db.Decimal(15, 2)
  bidIncrementStep Decimal? @db.Decimal(10, 2)
  status          String   @default("EM_BREVE")
  bidsCount       Int      @default(0)
  views           Int      @default(0)
  isFeatured      Boolean  @default(false)
  isExclusive     Boolean  @default(false)
  discountPercentage Int?
  additionalTriggers Json?
  imageUrl        String?
  imageMediaId    String?
  galleryImageUrls Json?
  mediaItemIds    Json?
  type            String
  category        LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId      String?
  subcategory     Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId   String?
  seller          Seller? @relation(fields: [sellerId], references: [id])
  sellerId        String?
  auctioneer      Auctioneer? @relation(fields: [auctioneerId], references: [id])
  auctioneerId    String?
  city            City? @relation(fields: [cityId], references: [id])
  cityId          String?
  state           State? @relation(fields: [stateId], references: [id])
  stateId         String?
  latitude        Decimal? @db.Decimal(10, 8)
  longitude       Decimal? @db.Decimal(11, 8)
  mapAddress      String?
  mapEmbedUrl     String?
  mapStaticImageUrl String?
  endDate         DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate DateTime?
  condition       String?
  dataAiHint      String?
  winner          User?    @relation(fields: [winnerId], references: [id])
  winnerId        String?
  winningBidTermUrl String? @db.VarChar(255)
  allowInstallmentBids Boolean @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  bens            LotBens[]
  bids            Bid[]
  userWins        UserWin[]
  maxBids         UserLotMaxBid[]
}

model LotBens {
  lot     Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId   String
  bem     Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId   String
  
  @@id([lotId, bemId])
}

model MediaItem {
  id            String   @id @default(cuid())
  fileName      String
  storagePath   String
  title         String
  altText       String?
  caption       String?
  description   String?  @db.Text
  mimeType      String
  sizeBytes     Int
  urlOriginal   String
  urlThumbnail  String?
  urlMedium     String?
  urlLarge      String?
  dataAiHint    String?
  uploadedBy    User     @relation(fields: [uploadedByUserId], references: [id])
  uploadedByUserId String
  uploadedAt    DateTime @default(now())
  judicialProcessId String?
}

model UserDocument {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  documentType    DocumentType @relation(fields: [documentTypeId], references: [id])
  documentTypeId  String
  status          String   @default("PENDING_ANALYSIS")
  fileUrl         String
  fileName        String?
  rejectionReason String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, documentTypeId])
}

model Bid {
  id            String   @id @default(cuid())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId      String
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
}

model UserWin {
  id                String   @id @default(cuid())
  lot               Lot      @relation(fields: [lotId], references: [id])
  lotId             String   @unique
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  winningBidAmount  Decimal  @db.Decimal(15, 2)
  winDate           DateTime
  paymentStatus     String
  invoiceUrl        String?
}

model DirectSaleOffer {
  id                  String     @id @default(cuid())
  publicId            String?    @unique
  title               String
  description         String?    @db.Text
  offerType           String
  price               Decimal?   @db.Decimal(15, 2)
  minimumOfferPrice   Decimal?   @db.Decimal(15, 2)
  status              String     @default("ACTIVE")
  category            LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId          String?
  seller              Seller?    @relation(fields: [sellerId], references: [id])
  sellerId            String?
  locationCity        String?
  locationState       String?
  imageUrl            String?
  imageMediaId        String?
  dataAiHint          String?
  galleryImageUrls    Json?
  mediaItemIds        Json?
  itemsIncluded       Json?
  views               Int        @default(0)
  expiresAt           DateTime?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

model AuctionHabilitation {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  auction    Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId  String
  createdAt  DateTime @default(now())

  @@unique([userId, auctionId])
}

model Review {
    id String @id @default(cuid())
    lotId String
    auctionId String
    userId String
    userDisplayName String
    rating Int
    comment String @db.Text
    createdAt DateTime @default(now())
}

model LotQuestion {
    id String @id @default(cuid())
    lotId String
    auctionId String
    userId String
    userDisplayName String
    questionText String @db.Text
    answerText String? @db.Text
    isPublic Boolean @default(true)
    answeredAt DateTime?
    answeredByUserId String?
    answeredByUserDisplayName String?
    createdAt DateTime @default(now())
}

model UsersOnLots {
    userId String
    lotId String
    type String // e.g. "VIEWED", "FAVORITED"

    @@id([userId, lotId, type])
}
