
// datasource db {
//   provider     = "mysql"
//   url          = env("DATABASE_URL")
//   relationMode = "prisma"
// }

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

generator genkit {
  provider  = "genkit-prisma"
  output    = "dataconnect"
  modelFile = "./prisma/schema.prisma"
  //  You can also point to an alternate model file
  // modelFile = "./prisma/another.prisma"
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

enum DirectSaleOfferStatus {
  RASCUNHO
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

// =================================================================
// 1. MODELS WITH NO/FEW DEPENDENCIES
// =================================================================
model User {
  id                  String                 @id @default(cuid())
  email               String                 @unique
  password            String?
  fullName            String?
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType            @default(PHYSICAL)
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?
  cellPhone           String?
  homePhone           String?
  cpf                 String?                @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  optInMarketing      Boolean                @default(false)
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  razaoSocial         String?
  cnpj                String?                @unique
  inscricaoEstadual   String?
  website             String?
  responsibleName     String?
  responsibleCpf      String?
  seller              Seller[]
  auctioneer          Auctioneer[]
  uploadedMedia       MediaItem[]
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  maxBids             UserLotMaxBid[]
  roles               UsersOnRoles[]
  notifications       Notification[]
  questions           LotQuestion[]
  answers             LotQuestion[]          @relation("AnsweredByUser")
  habilitations       AuctionHabilitation[]
}

model Role {
  id             String         @id @default(cuid())
  name           String         @unique
  nameNormalized String         @unique
  description    String?
  permissions    String[]
  users          UsersOnRoles[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model StateInfo {
  id        String   @id @default(cuid())
  name      String
  uf        String   @unique
  slug      String   @unique
  cityCount Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cities    CityInfo[]
  courts    Court[]
  districts JudicialDistrict[]
  auctions  Auction[]
  lots      Lot[]
}

model CityInfo {
  id        String    @id @default(cuid())
  name      String
  slug      String?
  state     StateInfo @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId   String
  stateUf   String?
  ibgeCode  String?   @unique
  lotCount  Int?      @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lots      Lot[]
}

model LotCategory {
  id                   String            @id @default(cuid())
  name                 String
  slug                 String            @unique
  description          String?           @db.VarChar(500)
  hasSubcategories     Boolean?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  subcategories        Subcategory[]
  bens                 Bem[]
  lots                 Lot[]
  auctions             Auction[]
  directSaleOffers     DirectSaleOffer[]
}

model Subcategory {
  id               String      @id @default(cuid())
  name             String
  slug             String?
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  parentCategoryId String
  description      String?     @db.VarChar(500)
  displayOrder     Int?        @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  bens             Bem[]
  lots             Lot[]
}

model DocumentTemplate {
  id      String               @id @default(cuid())
  name    String
  type    DocumentTemplateType
  content String?              @db.Text
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model ContactMessage {
  id      String   @id @default(cuid())
  name    String
  email   String
  subject String
  message String   @db.Text
  isRead  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentType {
  id          String         @id @default(cuid())
  name        String
  description String?
  isRequired  Boolean        @default(true)
  appliesTo   String? // e.g., "PHYSICAL,LEGAL"
  userDocs    UserDocument[]
}

model Court {
  id                String             @id @default(cuid())
  name              String
  slug              String?
  stateUf           String?
  website           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  districts         JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

// =================================================================
// 2. MODELS WITH ONE LEVEL OF DEPENDENCY
// =================================================================

model JudicialDistrict {
  id                String             @id @default(cuid())
  name              String
  slug              String             @unique
  court             Court?             @relation(fields: [courtId], references: [id])
  courtId           String?
  state             StateInfo?         @relation(fields: [stateId], references: [id])
  stateId           String?
  zipCode           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  branches          JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialBranch {
  id                String             @id @default(cuid())
  name              String
  slug              String             @unique
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  sellers           Seller[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model Seller {
  id               String            @id @default(cuid())
  publicId         String?           @unique
  slug             String?           @unique
  name             String            @unique
  contactName      String?
  email            String?
  phone            String?
  address          String?
  city             String?
  state            String?
  zipCode          String?
  website          String?
  logoUrl          String?
  logoMediaId      String?
  dataAiHintLogo   String?
  description      String?           @db.Text
  user             User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId           String?           @unique
  isJudicial       Boolean           @default(false)
  judicialBranch   JudicialBranch?   @relation(fields: [judicialBranchId], references: [id])
  judicialBranchId String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  auctions         Auction[]
  bens             Bem[]
  lots             Lot[]
  judicialProcess  JudicialProcess[]
  directSaleOffers DirectSaleOffer[]
}

model Auctioneer {
  id                 String    @id @default(cuid())
  publicId           String?   @unique
  slug               String?   @unique
  name               String
  registrationNumber String?
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?   @db.Text
  user               User?     @relation(fields: [userId], references: [id])
  userId             String?   @unique
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  auctions           Auction[]
  lots               Lot[]
}

// =================================================================
// 3. MODELS WITH TWO OR MORE LEVELS OF DEPENDENCY
// =================================================================

model JudicialProcess {
  id                String             @id @default(cuid())
  publicId          String?            @unique
  processNumber     String
  isElectronic      Boolean            @default(true)
  court             Court?             @relation(fields: [courtId], references: [id])
  courtId           String?
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  districtId        String?
  branch            JudicialBranch?    @relation(fields: [branchId], references: [id])
  branchId          String?
  seller            Seller?            @relation(fields: [sellerId], references: [id])
  sellerId          String?
  parties           JudicialParty[]
  bens              Bem[]
  auctions          Auction[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model JudicialParty {
  id             String          @id @default(cuid())
  process          JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType
}

model Bem {
  id                         String           @id @default(cuid())
  publicId                   String?          @unique
  title                      String
  description                String?          @db.Text
  status                     String           @default("DISPONIVEL")
  category                   LotCategory      @relation(fields: [categoryId], references: [id])
  categoryId                 String
  subcategory                Subcategory?     @relation(fields: [subcategoryId], references: [id])
  subcategoryId              String?
  judicialProcess            JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId          String?
  seller                     Seller?          @relation(fields: [sellerId], references: [id])
  sellerId                   String?
  evaluationValue            Float?
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  plate                      String?
  make                       String?
  model                      String?
  version                    String?
  year                       Int?
  modelYear                  Int?
  mileage                    Int?
  color                      String?
  fuelType                   String?
  transmissionType           String?
  bodyType                   String?
  vin                        String?
  renavam                    String?
  enginePower                String?
  numberOfDoors              Int?
  vehicleOptions             String?          @db.VarChar(500)
  detranStatus               String?
  debts                      String?          @db.VarChar(500)
  runningCondition           String?
  bodyCondition              String?
  tiresCondition             String?
  hasKey                     Boolean?
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?          @db.VarChar(500)
  infrastructure             String?          @db.VarChar(500)
  condoDetails               String?          @db.VarChar(500)
  improvements               String?          @db.VarChar(500)
  topography                 String?
  liensAndEncumbrances       String?          @db.Text
  propertyDebts              String?          @db.VarChar(500)
  unregisteredRecords        String?          @db.VarChar(500)
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  amenities                  Json?
  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String?          @db.Text
  includedAccessories        String?          @db.VarChar(500)
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String?          @db.VarChar(500)
  applianceCapacity          String?
  voltage                    String?
  applianceType              String?
  additionalFunctions        String?
  hoursUsed                  Int?
  engineType                 String?
  capacityOrPower            String?
  maintenanceHistory         String?          @db.Text
  installationLocation       String?
  compliesWithNR             String?
  operatingLicenses          String?
  breed                      String?
  age                        String?
  sex                        String?
  weight                     String?
  individualId               String?
  purpose                    String?
  sanitaryCondition          String?
  vaccinationStatus          String?
  lineage                    String?
  isPregnant                 Boolean?
  specialSkills              String?
  gtaDocument                String?
  breedRegistryDocument      String?
  furnitureType              String?
  material                   String?
  style                      String?
  dimensions                 String?
  pieceCount                 Int?
  jewelryType                String?
  metal                      String?
  gemstones                  String?          @db.VarChar(500)
  totalWeight                String?
  jewelrySize                String?
  authenticityCertificate    String?
  workType                   String?
  artist                     String?
  period                     String?
  technique                  String?
  provenance                 String?          @db.VarChar(500)
  boatType                   String?
  boatLength                 String?
  hullMaterial               String?
  onboardEquipment           String?          @db.Text
  productName                String?
  quantity                   String?
  packagingType              String?
  expirationDate             DateTime?
  storageConditions          String?
  preciousMetalType          String?
  purity                     String?
  forestGoodsType            String?
  volumeOrQuantity           String?
  species                    String?
  dofNumber                  String?
  createdAt                  DateTime         @default(now())
  updatedAt                  DateTime         @updatedAt
  lots                       LotBens[]
  inheritedForLots           Lot[]            @relation("InheritedMedia")
}

model Auction {
  id                             String                 @id @default(cuid())
  publicId                       String?                @unique
  slug                           String?                @unique
  title                          String
  description                    String?                @db.Text
  status                         AuctionStatus          @default(RASCUNHO)
  auctionDate                    DateTime?
  endDate                        DateTime?
  totalLots                      Int?                   @default(0)
  auctioneer                     Auctioneer             @relation(fields: [auctioneerId], references: [id])
  auctioneerId                   String
  seller                           Seller                 @relation(fields: [sellerId], references: [id])
  sellerId                       String
  category                         LotCategory            @relation(fields: [categoryId], references: [id])
  categoryId                     String
  judicialProcess                  JudicialProcess?       @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId              String?
  imageUrl                         String?
  imageMediaId                   String?
  documentsUrl                   String?
  visits                         Int?                   @default(0)
  initialOffer                   Float?
  isFavorite                     Boolean?               @default(false)
  dataAiHint                     String?
  auctionType                    AuctionType?
  auctionStages                  AuctionStage[]
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?
  automaticBiddingEnabled        Boolean                @default(false)
  allowInstallmentBids           Boolean                @default(true)
  silentBiddingEnabled           Boolean                @default(false)
  allowMultipleBidsPerUser       Boolean                @default(true)
  softCloseEnabled               Boolean                @default(false)
  softCloseMinutes               Int?                   @default(2)
  estimatedRevenue               Float?
  achievedRevenue                Float?
  totalHabilitatedUsers          Int?                   @default(0)
  isFeaturedOnMarketplace        Boolean                @default(false)
  marketplaceAnnouncementTitle   String?
  additionalTriggers             Json?
  decrementAmount                Float?
  decrementIntervalSeconds       Int?
  floorPrice                     Float?
  participation                  String?
  auctionMethod                  String?
  onlineUrl                      String?
  address                        String?
  cityId                         String?
  stateId                        String?
  zipCode                        String?
  latitude                       Float?
  longitude                      Float?
  courtId                        String?
  districtId                     String?
  branchId                       String?
  createdAt                      DateTime               @default(now())
  updatedAt                      DateTime               @updatedAt
  lots                           Lot[]
  bids                           Bid[]
  habilitations                  AuctionHabilitation[]
  court                          Court?                 @relation(fields: [courtId], references: [id])
  district                       JudicialDistrict?      @relation(fields: [districtId], references: [id])
  branch                         JudicialBranch?        @relation(fields: [branchId], references: [id])
  city                           CityInfo?              @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state                          StateInfo?             @relation(fields: [stateId], references: [id], onDelete: SetNull)
}

model AuctionHabilitation {
  id        String   @id @default(cuid())
  userId    String
  auctionId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, auctionId])
}

model AuctionStage {
  id                String    @id @default(cuid())
  auctionId         String
  auction           Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  name              String
  startDate         DateTime
  endDate           DateTime
  evaluationValue   Float?
  initialPrice      Float?
  lotDetails        LotAuctionStageDetails[]
}


model Lot {
  id                         String                   @id @default(cuid())
  publicId                   String?                  @unique
  auction                    Auction                  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                  String
  slug                       String?
  number                     String?
  title                      String
  description                String?                  @db.Text
  price                      Float
  initialPrice               Float?
  secondInitialPrice         Float?
  bidIncrementStep           Float?
  status                     LotStatus                @default(EM_BREVE)
  bidsCount                  Int?                     @default(0)
  views                      Int?                     @default(0)
  isFeatured                 Boolean?                 @default(false)
  isExclusive                Boolean?                 @default(false)
  discountPercentage         Int?
  additionalTriggers         Json?
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  inheritedMediaFromBemId    String?
  inheritedMedia             Bem?                     @relation("InheritedMedia", fields: [inheritedMediaFromBemId], references: [id], onDelete: SetNull)
  type                       String
  category                   LotCategory?             @relation(fields: [categoryId], references: [id])
  categoryId                 String?
  subcategory                Subcategory?             @relation(fields: [subcategoryId], references: [id])
  subcategoryId              String?
  auctionName                String?
  sellerId                   String?
  seller                     Seller?                  @relation(fields: [sellerId], references: [id])
  auctioneerId               String?
  auctioneer                 Auctioneer?              @relation(fields: [auctioneerId], references: [id])
  cityId                     String?
  city                       CityInfo?                @relation(fields: [cityId], references: [id], onDelete: SetNull)
  stateId                    String?
  state                      StateInfo?               @relation(fields: [stateId], references: [id], onDelete: SetNull)
  cityName                   String?
  stateUf                    String?
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?
  endDate                    DateTime?
  auctionDate                DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  dataAiHint                 String?
  winnerId                   String?
  winner                     User?                    @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  winningBidTermUrl          String?
  allowInstallmentBids       Boolean?                 @default(false)
  isRelisted                 Boolean                  @default(false)
  relistCount                Int                      @default(0)
  originalLotId              String?                  @unique
  originalLot                Lot?                     @relation("RelistedLot", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot                Lot?                     @relation("RelistedLot")
  createdAt                  DateTime                 @default(now())
  updatedAt                  DateTime                 @updatedAt
  bids                       Bid[]
  wins                       UserWin[]
  maxBids                    UserLotMaxBid[]
  bens                       LotBens[]
  stageDetails               LotAuctionStageDetails[]
}

model LotBens {
  lot     Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId   String
  bem     Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId   String
  @@id([lotId, bemId])
}

model LotAuctionStageDetails {
  id            String       @id @default(cuid())
  lot           Lot          @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  stage         AuctionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)
  stageId       String
  initialBid    Float?
  bidIncrement  Float?

  @@unique([lotId, stageId])
}


model MediaItem {
  id                String   @id @default(cuid())
  fileName          String
  storagePath       String
  title             String?
  altText           String?
  caption           String?
  description       String?  @db.Text
  mimeType          String
  sizeBytes         Int?
  urlOriginal       String
  urlThumbnail      String?
  urlMedium         String?
  urlLarge          String?
  linkedLotIds      Json?
  dataAiHint        String?
  uploadedByUser    User?    @relation(fields: [uploadedByUserId], references: [id])
  uploadedByUserId  String?
  judicialProcessId String?
  uploadedAt        DateTime @default(now())
}

model UserDocument {
  id              String       @id @default(cuid())
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  documentType    DocumentType @relation(fields: [documentTypeId], references: [id])
  documentTypeId  String
  status          String       @default("PENDING_ANALYSIS")
  fileUrl         String
  fileName        String?
  rejectionReason String?      @db.Text
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@unique([userId, documentTypeId])
}

model Bid {
  id            String   @id @default(cuid())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId      String
  bidderDisplay String?
  amount        Float
  timestamp     DateTime @default(now())
}

model UserWin {
  id                String              @id @default(cuid())
  lot               Lot                 @relation(fields: [lotId], references: [id])
  lotId             String              @unique
  user              User                @relation(fields: [userId], references: [id])
  userId            String
  winningBidAmount  Float
  winDate           DateTime            @default(now())
  paymentStatus     PaymentStatus
  invoiceUrl        String?
  installments      InstallmentPayment[]
}

// Model para armazenar os detalhes de pagamento de cada parcela.
model InstallmentPayment {
  id                  String        @id @default(cuid())
  userWin             UserWin       @relation(fields: [userWinId], references: [id], onDelete: Cascade)
  userWinId           String
  installmentNumber   Int
  amount              Float
  dueDate             DateTime
  status              PaymentStatus @default(PENDENTE)
  paymentDate         DateTime?
  paymentMethod       String?
  transactionId       String?       @unique
}

model DirectSaleOffer {
  id                     String      @id @default(cuid())
  publicId               String?     @unique
  title                  String
  description            String?     @db.Text
  offerType              String?
  price                  Float?
  minimumOfferPrice      Float?
  status                 String?     @default("ACTIVE")
  category               LotCategory @relation(fields: [categoryId], references: [id])
  categoryId             String
  seller                 Seller      @relation(fields: [sellerId], references: [id])
  sellerId               String
  sellerName             String?
  sellerLogoUrl          String?
  dataAiHintSellerLogo   String?
  locationCity           String?
  locationState          String?
  imageUrl               String?
  imageMediaId           String?
  dataAiHint             String?
  galleryImageUrls       Json?
  mediaItemIds           Json?
  itemsIncluded          Json?
  views                  Int?        @default(0)
  expiresAt              DateTime?
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Review {
    id String @id @default(cuid())
    lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
    lotId String
    auctionId String
    userId String
    userDisplayName String
    rating Int
    comment String @db.Text
    createdAt DateTime @default(now())
}

model LotQuestion {
    id String @id @default(cuid())
    lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
    lotId String
    auctionId String
    userId String
    userDisplayName String
    questionText String @db.Text
    answerText String? @db.Text
    answeredAt DateTime?
    answeredByUserId String?
    answeredByUser User? @relation("AnsweredByUser", fields: [answeredByUserId], references: [id], onDelete:SetNull)
    answeredByUserDisplayName String?
    isPublic Boolean @default(true)
    createdAt DateTime @default(now())
}

// =================================================================
// 0. Singletons and Enum Definitions
// =================================================================

model PlatformSettings {
  id                             String                 @id @default("global")
  siteTitle                      String?
  siteTagline                    String?
  logoUrl                        String?
  faviconUrl                     String?
  galleryImageBasePath           String?
  storageProvider                String?
  firebaseStorageBucket          String?
  activeThemeName                String?
  themes                         Json?
  platformPublicIdMasks          Json?
  homepageSections               Json?
  mentalTriggerSettings          Json?
  sectionBadgeVisibility         Json?
  mapSettings                    Json?
  searchPaginationType           String?
  searchItemsPerPage             Int?
  searchLoadMoreCount            Int?
  showCountdownOnLotDetail       Boolean?
  showCountdownOnCards           Boolean?
  showRelatedLotsOnLotDetail     Boolean?
  relatedLotsCount               Int?
  defaultUrgencyTimerHours       Int?
  variableIncrementTable         Json?
  biddingSettings                Json?
  paymentGatewaySettings         Json?
  defaultListItemsPerPage        Int?                   @default(10)
  updatedAt                      DateTime               @updatedAt
}
