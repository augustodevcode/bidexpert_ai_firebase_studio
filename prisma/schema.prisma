// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. BASE TABLES (No dependencies or few dependencies)
// =================================================================

model PlatformSettings {
  id                        String    @id @default(cuid())
  siteTitle                 String?
  siteTagline               String?
  logoUrl                   String?
  faviconUrl                String?
  galleryImageBasePath      String    @default("/uploads/media/")
  storageProvider           String    @default("local") // "local" or "firebase"
  firebaseStorageBucket     String?
  activeThemeName           String?
  themesJson                Json?     @map("themes") // Renomeado para evitar conflito com a relação
  platformPublicIdMasksJson Json?     @map("platformPublicIdMasks")
  mapSettingsJson           Json?     @map("mapSettings")
  searchPaginationType      String    @default("loadMore")
  searchItemsPerPage        Int       @default(12)
  searchLoadMoreCount       Int       @default(12)
  showCountdownOnLotDetail  Boolean   @default(true)
  showCountdownOnCards      Boolean   @default(true)
  showRelatedLotsOnLotDetail Boolean   @default(true)
  relatedLotsCount          Int       @default(5)
  defaultUrgencyTimerHours  Int?
  variableIncrementTableJson Json?    @map("variableIncrementTable")
  biddingSettingsJson       Json?     @map("biddingSettings")
  sectionBadgeVisibilityJson Json?    @map("sectionBadgeVisibility")
  defaultListItemsPerPage   Int       @default(10)
  updatedAt                 DateTime? @updatedAt
}

model Role {
  id              String         @id @default(cuid())
  name            String
  nameNormalized  String         @unique
  description     String?
  permissions     Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  users           UsersOnRoles[] // Relation to the join table
}

model State {
  id        String             @id @default(cuid())
  name      String
  uf        String             @unique
  slug      String             @unique
  cities    City[]
  districts JudicialDistrict[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model LotCategory {
  id                    String              @id @default(cuid())
  name                  String
  slug                  String              @unique
  description           String?             @db.VarChar(500)
  hasSubcategories      Boolean             @default(false)
  iconName              String?
  logoUrl               String?
  logoMediaId           String?
  dataAiHintIcon        String?
  coverImageUrl         String?
  coverImageMediaId     String?
  dataAiHintCover       String?
  megaMenuImageUrl      String?
  megaMenuImageMediaId  String?
  dataAiHintMegaMenu    String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  lots                  Lot[]
  bens                  Bem[]
  auctions              Auction[]
  directSaleOffers      DirectSaleOffer[]
  subcategories         Subcategory[]
}

model DocumentType {
  id                  String         @id @default(cuid())
  name                String
  description         String?
  isRequired          Boolean        @default(true)
  appliesTo           String? // e.g., "PHYSICAL,LEGAL"
  userDocuments       UserDocument[]
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

// =================================================================
// 2. TABLES WITH ONE LEVEL OF DEPENDENCY
// =================================================================

model User {
  id                    String                @id @default(cuid())
  email                 String                @unique
  password              String?
  fullName              String?
  habilitationStatus    String                @default("PENDING_DOCUMENTS")
  accountType           String                @default("PHYSICAL")
  cpf                   String?
  rgNumber              String?
  rgIssuer              String?
  rgIssueDate           DateTime?
  rgState               String?
  dateOfBirth           DateTime?
  cellPhone             String?
  homePhone             String?
  gender                String?
  profession            String?
  nationality           String?
  maritalStatus         String?
  propertyRegime        String?
  spouseName            String?
  spouseCpf             String?
  zipCode               String?
  street                String?
  number                String?
  complement            String?
  neighborhood          String?
  city                  String?
  state                 String?
  avatarUrl             String?
  dataAiHint            String?
  badges                Json?
  optInMarketing        Boolean               @default(false)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  roles                 UsersOnRoles[]
  bids                  Bid[]
  userDocuments         UserDocument[]
  mediaItems            MediaItem[]
  wins                  UserWin[]
  sellerProfile         Seller?
  auctioneerProfile     Auctioneer?
  maxBids               UserLotMaxBid[]
  notifications         Notification[]
  auctionHabilitations  AuctionHabilitation[]
}

// Join table for Users and Roles (many-to-many)
model UsersOnRoles {
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model City {
  id        String   @id @default(cuid())
  name      String
  slug      String?
  stateId   String
  stateUf   String?
  ibgeCode  String?  @unique
  lotCount  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  state     State    @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots      Lot[]
}

model Subcategory {
  id                 String      @id @default(cuid())
  name               String
  slug               String?
  parentCategoryId   String
  description        String?     @db.VarChar(500)
  displayOrder       Int         @default(0)
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots               Lot[]
  bens               Bem[]
}

model Court {
  id                String             @id @default(cuid())
  name              String
  slug              String?
  stateUf           String?
  website           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

// =================================================================
// 3. TABLES WITH TWO OR MORE LEVELS OF DEPENDENCY
// =================================================================

model JudicialDistrict {
  id                String             @id @default(cuid())
  name              String
  slug              String             @unique
  courtId           String?
  stateId           String?
  zipCode           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  court             Court?             @relation(fields: [courtId], references: [id])
  state             State?             @relation(fields: [stateId], references: [id])
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialBranch {
  id                String             @id @default(cuid())
  name              String
  slug              String             @unique
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  sellers           Seller[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model Seller {
  id                 String             @id @default(cuid())
  publicId           String             @unique
  slug               String             @unique
  name               String             @unique
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?            @db.Text
  userId             String?            @unique
  isJudicial         Boolean            @default(false)
  judicialBranchId   String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  judicialBranch     JudicialBranch?    @relation(fields: [judicialBranchId], references: [id])
  user               User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  auctions           Auction[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
  judicialProcesses  JudicialProcess[]
  lots               Lot[]
}

model Auctioneer {
  id                 String    @id @default(cuid())
  publicId           String    @unique
  slug               String    @unique
  name               String
  registrationNumber String?
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?   @db.Text
  userId             String?   @unique
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  auctions           Auction[]
}

model AuctionHabilitation {
  userId     String
  auctionId  String
  assignedAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@id([userId, auctionId])
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model UserDocument {
  id              String        @id @default(cuid())
  userId          String
  documentTypeId  String
  status          String        @default("PENDING") // PENDING, APPROVED, REJECTED
  fileUrl         String
  fileName        String?
  rejectionReason String?       @db.Text
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType  @relation(fields: [documentTypeId], references: [id])
  
  @@unique([userId, documentTypeId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model UserWin {
  id                String   @id @default(cuid())
  userId            String
  lotId             String   @unique // Each lot can only be won once
  winningBidAmount  Float
  winDate           DateTime
  paymentStatus     String   @default("PENDENTE")
  invoiceUrl        String?
  
  user User @relation(fields: [userId], references: [id])
  lot  Lot  @relation(fields: [lotId], references: [id])
}

model Lot {
  id                           String          @id @default(cuid())
  publicId                     String          @unique
  auctionId                    String
  slug                         String?
  number                       String?
  title                        String
  description                  String?         @db.Text
  price                        Float
  initialPrice                 Float?
  secondInitialPrice           Float?
  bidIncrementStep             Float?
  status                       String          @default("EM_BREVE")
  bidsCount                    Int             @default(0)
  views                        Int             @default(0)
  isFeatured                   Boolean         @default(false)
  isExclusive                  Boolean         @default(false)
  discountPercentage           Int?
  additionalTriggers           Json?
  imageUrl                     String?
  imageMediaId                 String?
  galleryImageUrls             Json?
  mediaItemIds                 Json?
  type                         String? // Denormalized name for quick display
  categoryId                   String?
  subcategoryId                String?
  auctionName                  String? // Denormalized for display
  sellerId                     String?
  sellerName                   String? // Denormalized
  auctioneerId                 String?
  cityId                       String?
  stateId                      String?
  cityName                     String? // Denormalized
  stateUf                      String? // Denormalized
  latitude                     Float?
  longitude                    Float?
  mapAddress                   String?
  mapEmbedUrl                  String?         @db.VarChar(500)
  mapStaticImageUrl            String?
  endDate                      DateTime?
  auctionDate                  DateTime?
  lotSpecificAuctionDate       DateTime?
  secondAuctionDate            DateTime?
  condition                    String?
  dataAiHint                   String?
  winnerId                     String?         @unique // A user can win a lot, a lot has one winner
  winningBidTermUrl            String?
  allowInstallmentBids         Boolean         @default(false)
  judicialProcessNumber        String?
  courtDistrict                String?
  courtName                    String?
  publicProcessUrl             String?
  propertyRegistrationNumber   String?
  propertyLiens                String?         @db.Text
  knownDebts                   String?         @db.Text
  additionalDocumentsInfo      String?         @db.Text
  reservePrice                 Float?
  evaluationValue              Float?
  debtAmount                   Float?
  itbiValue                    Float?
  createdAt                    DateTime        @default(now())
  updatedAt                    DateTime        @updatedAt

  auction          Auction       @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category         LotCategory?  @relation(fields: [categoryId], references: [id])
  subcategory      Subcategory?  @relation(fields: [subcategoryId], references: [id])
  seller           Seller?       @relation(fields: [sellerId], references: [id])
  city             City?         @relation(fields: [cityId], references: [id])
  state            State?        @relation(fields: [stateId], references: [id])
  winner           User?         @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  bens             LotBens[]
  bids             Bid[]
  userWin          UserWin? // One-to-one relation with UserWin
  maxBids          UserLotMaxBid[]

  @@index([auctionId])
  @@index([categoryId])
  @@index([sellerId])
}

model Auction {
  id                           String                @id @default(cuid())
  publicId                     String                @unique
  slug                         String                @unique
  title                        String
  description                  String?               @db.Text
  status                       String                @default("RASCUNHO")
  auctionDate                  DateTime?
  endDate                      DateTime?
  auctioneerId                 String?
  sellerId                     String?
  categoryId                   String?
  judicialProcessId            String?
  courtId                      String?
  districtId                   String?
  branchId                     String?
  auctionType                  String?
  imageUrl                     String?
  imageMediaId                 String?
  documentsUrl                 String?
  evaluationReportUrl          String?
  auctionCertificateUrl        String?
  visits                       Int                   @default(0)
  initialOffer                 Float?
  isFavorite                   Boolean               @default(false)
  dataAiHint                   String?
  sellingBranch                String?
  automaticBiddingEnabled      Boolean               @default(false)
  allowInstallmentBids         Boolean               @default(true)
  silentBiddingEnabled         Boolean               @default(false)
  allowMultipleBidsPerUser     Boolean               @default(true)
  softCloseEnabled             Boolean               @default(false)
  softCloseMinutes             Int?                  @default(2)
  estimatedRevenue             Float?
  achievedRevenue              Float?
  totalHabilitatedUsers        Int?                  @default(0)
  isFeaturedOnMarketplace      Boolean               @default(false)
  marketplaceAnnouncementTitle String?
  decrementAmount              Float?
  decrementIntervalSeconds     Int?
  floorPrice                   Float?
  autoRelistSettings           Json?
  createdAt                    DateTime              @default(now())
  updatedAt                    DateTime              @updatedAt
  
  auctioneer            Auctioneer?           @relation(fields: [auctioneerId], references: [id])
  seller                Seller?               @relation(fields: [sellerId], references: [id])
  category              LotCategory?          @relation(fields: [categoryId], references: [id])
  lots                  Lot[]
  bids                  Bid[]
  judicialProcess       JudicialProcess?      @relation(fields: [judicialProcessId], references: [id])
  court                 Court?                @relation(fields: [courtId], references: [id])
  district              JudicialDistrict?     @relation(fields: [districtId], references: [id])
  branch                JudicialBranch?       @relation(fields: [branchId], references: [id])
  habilitations         AuctionHabilitation[]
  auctionStages         AuctionStage[] // One-to-many relation
}

// New model for Auction Stages
model AuctionStage {
  id            String    @id @default(cuid())
  auctionId     String
  name          String
  startDate     DateTime
  endDate       DateTime
  initialPrice  Float?
  auction       Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@index([auctionId])
}


model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String?
  amount        Float
  timestamp     DateTime @default(now())

  lot     Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder  User    @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model Bem {
  id                        String   @id @default(cuid())
  publicId                  String   @unique
  title                     String
  description               String?  @db.Text
  status                    String   @default("DISPONIVEL")
  categoryId                String?
  subcategoryId             String?
  judicialProcessId         String?
  sellerId                  String?
  evaluationValue           Float?
  imageUrl                  String?
  imageMediaId              String?
  galleryImageUrls          Json?
  mediaItemIds              Json?
  dataAiHint                String?
  locationCity              String?
  locationState             String?
  address                   String?
  latitude                  Float?
  longitude                 Float?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  
  // Vehicle fields
  plate                     String?
  make                      String?
  model                     String?
  version                   String?
  year                      Int?
  modelYear                 Int?
  mileage                   Int?
  color                     String?
  fuelType                  String?
  transmissionType          String?
  bodyType                  String?
  vin                       String?
  renavam                   String?
  enginePower               String?
  numberOfDoors             Int?
  vehicleOptions            String? @db.VarChar(500)
  detranStatus              String?
  debts                     String? @db.VarChar(500)
  runningCondition          String?
  bodyCondition             String?
  tiresCondition            String?
  hasKey                    Boolean?

  // Real estate fields
  propertyRegistrationNumber String?
  iptuNumber                String?
  isOccupied                Boolean?
  totalArea                 Float?
  builtArea                 Float?
  bedrooms                  Int?
  suites                    Int?
  bathrooms                 Int?
  parkingSpaces             Int?
  constructionType          String?
  finishes                  String? @db.VarChar(500)
  infrastructure            String? @db.VarChar(500)
  condoDetails              String? @db.VarChar(500)
  improvements              String? @db.VarChar(500)
  topography                String?
  liensAndEncumbrances      String? @db.Text
  propertyDebts             String? @db.VarChar(500)
  unregisteredRecords       String? @db.VarChar(500)
  hasHabiteSe               Boolean?
  zoningRestrictions        String?

  // Electronics fields
  brand                     String?
  serialNumber              String?
  itemCondition             String?
  specifications            String? @db.Text
  includedAccessories       String? @db.VarChar(500)
  batteryCondition          String?
  hasInvoice                Boolean?
  hasWarranty               Boolean?
  repairHistory             String? @db.VarChar(500)
  
  // Appliance fields
  applianceCapacity         String?
  voltage                   String?
  applianceType             String?
  additionalFunctions       String?
  
  // Machinery fields
  hoursUsed                 Int?
  engineType                String?
  capacityOrPower           String?
  maintenanceHistory        String? @db.Text
  installationLocation      String?
  compliesWithNR            String?
  operatingLicenses         String?
  
  // Livestock fields
  breed                     String?
  age                       String?
  sex                       String? // Macho, Fêmea
  weight                    String?
  individualId              String?
  purpose                   String?
  sanitaryCondition         String?
  lineage                   String?
  isPregnant                Boolean?
  specialSkills             String?
  gtaDocument               String?
  breedRegistryDocument     String?
  
  // Furniture
  furnitureType             String?
  material                  String?
  style                     String?
  dimensions                String?
  pieceCount                Int?
  
  // Jewelry
  jewelryType               String?
  metal                     String?
  gemstones                 String? @db.VarChar(500)
  totalWeight               String?
  jewelrySize               String?
  authenticityCertificate   String?
  
  // Art & Antiques
  workType                  String?
  artist                    String?
  period                    String?
  technique                 String?
  provenance                String? @db.VarChar(500)
  
  // Watercraft
  boatType                  String?
  boatLength                String?
  hullMaterial              String?
  onboardEquipment          String? @db.Text
  
  // Food
  productName               String?
  quantity                  String?
  packagingType             String?
  expirationDate            DateTime?
  storageConditions         String?
  
  // Precious Metals
  preciousMetalType         String?
  purity                    String?
  
  // Forest Goods
  forestGoodsType           String?
  volumeOrQuantity          String?
  species                   String?
  dofNumber                 String?

  category          LotCategory?     @relation(fields: [categoryId], references: [id])
  subcategory       Subcategory?     @relation(fields: [subcategoryId], references: [id])
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller            Seller?          @relation(fields: [sellerId], references: [id])
  lots              LotBens[]
}

// Join Table for Lots and Bens (Many-to-Many)
model LotBens {
  lotId String
  bemId String
  lot  Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bem  Bem @relation(fields: [bemId], references: [id], onDelete: Cascade)

  @@id([lotId, bemId])
}

model MediaItem {
  id              String   @id @default(cuid())
  fileName        String   
  storagePath     String   
  title           String?
  altText         String?
  caption         String?  @db.VarChar(500)
  description     String?  @db.Text
  mimeType        String
  sizeBytes       Int?
  urlOriginal     String
  urlThumbnail    String?
  urlMedium       String?
  urlLarge        String?
  linkedLotIds    Json?
  dataAiHint      String?
  uploadedByUserId String?
  judicialProcessId String?
  uploadedAt      DateTime @default(now())
  uploadedBy      User?    @relation(fields: [uploadedByUserId], references: [id], onDelete: SetNull)
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
}

model JudicialProcess {
  id            String          @id @default(cuid())
  publicId      String          @unique
  processNumber String
  isElectronic  Boolean         @default(true)
  courtId       String?
  districtId    String?
  branchId      String?
  sellerId      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  court         Court?            @relation(fields: [courtId], references: [id])
  district      JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch        JudicialBranch?   @relation(fields: [branchId], references: [id])
  seller        Seller?           @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties       JudicialParty[]
  bens          Bem[]
  mediaItems    MediaItem[]
  auctions      Auction[]
}

model JudicialParty {
  id              String   @id @default(cuid())
  processId       String
  name            String
  documentNumber  String?
  partyType       String   // e.g., AUTOR, REU
  process         JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model DirectSaleOffer {
  id                   String       @id @default(cuid())
  publicId             String       @unique
  title                String
  description          String?      @db.Text
  offerType            String?      // BUY_NOW, ACCEPTS_PROPOSALS
  price                Float?
  minimumOfferPrice    Float?
  status               String       @default("ACTIVE")
  categoryId           String?
  sellerId             String?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int          @default(0)
  expiresAt            DateTime?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  
  category             LotCategory? @relation(fields: [categoryId], references: [id])
  seller               Seller?      @relation(fields: [sellerId], references: [id])
}

model DocumentTemplate {
  id        String   @id @default(cuid())
  name      String
  type      String   // WINNING_BID_TERM, EVALUATION_REPORT, etc.
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
