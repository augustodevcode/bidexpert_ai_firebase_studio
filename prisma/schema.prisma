// datasource and generator should be at the top
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// Enums should be defined before they are used in models
enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

// Models with no dependencies or few dependencies first

model PlatformSettings {
  id                               String                       @id @default(cuid())
  siteTitle                        String                       @default("BidExpert")
  siteTagline                      String?
  logoUrl                          String?
  faviconUrl                       String?
  galleryImageBasePath             String                       @default("/uploads/media/")
  storageProvider                  String                       @default("local") // 'local' or 'firebase'
  firebaseStorageBucket            String?
  activeThemeName                  String?
  themes                           Json?
  platformPublicIdMasks            Json?
  homepageSections                 Json?
  mentalTriggerSettings            Json?
  sectionBadgeVisibility           Json?
  mapSettings                      Json?
  searchPaginationType             String                       @default("loadMore")
  searchItemsPerPage               Int                          @default(12)
  searchLoadMoreCount              Int                          @default(12)
  showCountdownOnLotDetail         Boolean                      @default(true)
  showCountdownOnCards             Boolean                      @default(true)
  showRelatedLotsOnLotDetail       Boolean                      @default(true)
  relatedLotsCount                 Int                          @default(4)
  defaultUrgencyTimerHours         Int?
  variableIncrementTable           Json?
  biddingSettings                  Json?
  paymentGatewaySettings           Json?
  defaultListItemsPerPage          Int                          @default(10)
  updatedAt                        DateTime                     @updatedAt
}

model Role {
  id            String   @id @default(cuid())
  name          String
  nameNormalized String  @unique
  description   String?
  permissions   Json?
  users         UsersOnRoles[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model State {
  id        String    @id @default(cuid())
  name      String
  uf        String    @unique
  slug      String    @unique
  cityCount Int       @default(0)
  cities    City[]
  districts JudicialDistrict[]
  auctions  Auction[]
  lots      Lot[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model City {
  id        String    @id @default(cuid())
  name      String
  slug      String?
  stateId   String
  stateUf   String?
  state     State     @relation(fields: [stateId], references: [id])
  ibgeCode  String?   @unique
  lotCount  Int       @default(0)
  auctions  Auction[]
  lots      Lot[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  @@index([stateId])
}

model LotCategory {
  id                   String        @id @default(cuid())
  name                 String
  slug                 String        @unique
  description          String?
  hasSubcategories     Boolean       @default(false)
  iconName             String?
  dataAiHintIcon       String?
  logoUrl              String?
  logoMediaId          String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  subcategories      Subcategory[]
  lots                 Lot[]
  auctions             Auction[]
  bens                 Bem[]
  directSaleOffers     DirectSaleOffer[]
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
}

model Subcategory {
  id                String       @id @default(cuid())
  name              String
  slug              String?
  parentCategoryId  String
  parentCategory    LotCategory  @relation(fields: [parentCategoryId], references: [id])
  description       String?
  displayOrder      Int          @default(0)
  iconUrl           String?
  iconMediaId       String?
  dataAiHintIcon    String?
  lots              Lot[]
  bens              Bem[]
  @@index([parentCategoryId])
}

model DocumentType {
  id          String   @id @default(cuid())
  name        String
  description String?
  isRequired  Boolean  @default(true)
  appliesTo   String? // e.g., 'PHYSICAL,LEGAL'
  userDocuments UserDocument[]
}

model DocumentTemplate {
  id        String   @id @default(cuid())
  name      String
  type      DocumentTemplateType
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Court {
  id                String    @id @default(cuid())
  name              String
  slug              String?
  stateUf           String?
  website           String?
  districts         JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[] @relation("CourtAuctions")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model JudicialDistrict {
  id                String    @id @default(cuid())
  name              String
  slug              String    @unique
  courtId           String?
  court             Court?    @relation(fields: [courtId], references: [id])
  stateId           String?
  state             State?    @relation(fields: [stateId], references: [id])
  zipCode           String?
  branches          JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[] @relation("DistrictAuctions")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  @@index([courtId])
  @@index([stateId])
}

model JudicialBranch {
  id                String    @id @default(cuid())
  name              String
  slug              String    @unique
  districtId        String?
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  contactName       String?
  phone             String?
  email             String?
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
  auctions          Auction[] @relation("BranchAuctions")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  @@index([districtId])
}

model Bem {
  id                 String   @id @default(cuid())
  publicId           String?  @unique
  title              String
  description        String?  @db.Text
  status             String   @default("DISPONIVEL")
  categoryId         String
  category           LotCategory  @relation(fields: [categoryId], references: [id])
  subcategoryId      String?
  subcategory        Subcategory? @relation(fields: [subcategoryId], references: [id])
  judicialProcessId  String?
  judicialProcess    JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  sellerId           String?
  seller             Seller?      @relation(fields: [sellerId], references: [id])
  evaluationValue    Decimal? @db.Decimal(15, 2)
  imageUrl           String?
  imageMediaId       String?
  galleryImageUrls   Json?
  mediaItemIds       Json?
  dataAiHint         String?
  locationCity       String?
  locationState      String?
  address            String?
  latitude           Float?
  longitude          Float?
  lots               LotBens[]

  // Vehicle
  plate               String?
  make                String?
  model               String?
  version             String?
  year                Int?
  modelYear           Int?
  mileage             Int?
  color               String?
  fuelType            String?
  transmissionType    String?
  bodyType            String?
  vin                 String?  @unique
  renavam             String?  @unique
  enginePower         String?
  numberOfDoors       Int?
  vehicleOptions      String?
  detranStatus        String?
  debts               String?
  runningCondition    String?
  bodyCondition       String?
  tiresCondition      String?
  hasKey              Boolean?

  // Real Estate
  propertyRegistrationNumber String?
  iptuNumber               String?
  isOccupied               Boolean?
  totalArea                Decimal? @db.Decimal(15, 2)
  builtArea                Decimal? @db.Decimal(15, 2)
  bedrooms                 Int?
  suites                   Int?
  bathrooms                Int?
  parkingSpaces            Int?
  constructionType         String?
  finishes                 String?
  infrastructure           String?
  condoDetails             String?
  improvements             String?
  topography               String?
  liensAndEncumbrances     String?
  propertyDebts            String?
  unregisteredRecords      String?
  hasHabiteSe              Boolean?
  zoningRestrictions       String?
  amenities                Json?

  // Electronics
  brand                String?
  serialNumber         String?
  itemCondition        String?
  specifications       String?
  includedAccessories  String?
  batteryCondition     String?
  hasInvoice           Boolean?
  hasWarranty          Boolean?
  repairHistory        String?

  // Appliance
  applianceCapacity   String?
  voltage             String?
  applianceType       String?
  additionalFunctions String?

  // Machinery
  hoursUsed          Int?
  engineType         String?
  capacityOrPower    String?
  maintenanceHistory String?
  installationLocation String?
  compliesWithNR     String?
  operatingLicenses  String?

  // Livestock
  breed                String?
  age                  String?
  sex                  String?
  weight               String?
  individualId         String?
  purpose              String?
  sanitaryCondition    String?
  lineage              String?
  isPregnant           Boolean?
  specialSkills        String?
  gtaDocument          String?
  breedRegistryDocument String?

  // Furniture
  furnitureType String?
  material      String?
  style         String?
  dimensions    String?
  pieceCount    Int?

  // Jewelry
  jewelryType           String?
  metal                 String?
  gemstones             String?
  totalWeight           String?
  jewelrySize           String?
  authenticityCertificate String?

  // Art/Antiques
  workType   String?
  artist     String?
  period     String?
  technique  String?
  provenance String?

  // Boats
  boatType         String?
  boatLength       String?
  hullMaterial     String?
  onboardEquipment String?

  // Food
  productName       String?
  quantity          String?
  packagingType     String?
  expirationDate    DateTime?
  storageConditions String?

  // Precious Metals
  preciousMetalType String?
  purity            String?

  // Forest Goods
  forestGoodsType  String?
  volumeOrQuantity String?
  species          String?
  dofNumber        String?

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  @@index([sellerId])
  @@index([categoryId])
  @@index([judicialProcessId])
}

model LotBens {
  lotId    String
  bemId    String
  lot      Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  bem      Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)

  @@id([lotId, bemId])
  @@index([bemId])
}

model Lot {
  id                           String                 @id @default(cuid())
  publicId                     String?                @unique
  auctionId                    String
  number                       String?
  title                        String
  description                  String?                @db.Text
  price                        Decimal                @default(0.00) @db.Decimal(15, 2)
  initialPrice                 Decimal?               @db.Decimal(15, 2)
  secondInitialPrice           Decimal?               @db.Decimal(15, 2)
  bidIncrementStep             Decimal?               @db.Decimal(10, 2)
  status                       LotStatus              @default(EM_BREVE)
  bidsCount                    Int?                   @default(0)
  views                        Int?                   @default(0)
  isFeatured                   Boolean?               @default(false)
  isExclusive                  Boolean?               @default(false)
  discountPercentage           Int?
  additionalTriggers           Json?
  imageUrl                     String?
  imageMediaId                 String?
  galleryImageUrls             Json?
  mediaItemIds                 Json?
  inheritedMediaFromBemId      String?
  type                         String // Categoria denormalizada
  categoryId                   String?
  category                     LotCategory?           @relation(fields: [categoryId], references: [id])
  subcategoryId                String?
  subcategory                  Subcategory?           @relation(fields: [subcategoryId], references: [id])
  auctionName                  String?
  sellerId                     String?
  seller                       Seller?                @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  auctioneerId                 String?
  auctioneer                   Auctioneer?            @relation(fields: [auctioneerId], references: [id], onDelete: SetNull)
  cityId                       String?
  city                         City?                  @relation(fields: [cityId], references: [id], onDelete: SetNull)
  stateId                      String?
  state                        State?                 @relation(fields: [stateId], references: [id], onDelete: SetNull)
  cityName                     String?
  stateUf                      String?
  latitude                     Float?
  longitude                    Float?
  mapAddress                   String?
  mapEmbedUrl                  String?
  mapStaticImageUrl            String?
  endDate                      DateTime?
  auctionDate                  DateTime?
  lotSpecificAuctionDate       DateTime?
  secondAuctionDate            DateTime?
  condition                    String?
  dataAiHint                   String?
  winnerId                     String?
  winner                       User?                  @relation("WonLots", fields: [winnerId], references: [id], onDelete: SetNull)
  winningBidTermUrl            String?
  allowInstallmentBids         Boolean?               @default(false)
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  bids                         Bid[]
  userWins                     UserWin[]
  maxBids                      UserLotMaxBid[]
  bens                         LotBens[]
  isRelisted                   Boolean                @default(false)
  relistCount                  Int                    @default(0)
  originalLotId                String?                @unique
  originalLot                  Lot?                   @relation("RelistHistory", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLots                 Lot[]                  @relation("RelistHistory")

  auction                      Auction                @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  
  @@index([auctionId])
  @@index([categoryId])
  @@index([sellerId])
  @@index([winnerId])
}

model User {
  id                   String        @id @default(cuid())
  uid                  String?       @unique // For legacy compatibility
  email                String        @unique
  password             String?
  fullName             String?
  cpf                  String?       @unique
  cellPhone            String?
  homePhone            String?
  dateOfBirth          DateTime?
  zipCode              String?
  street               String?
  number               String?
  complement           String?
  neighborhood         String?
  city                 String?
  state                String?
  avatarUrl            String?
  dataAiHint           String?
  sellerId             String?       @unique // Link to a Seller profile if this user is a seller
  seller               Seller?       @relation("SellerUser")
  habilitationStatus   UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType          AccountType   @default(PHYSICAL)
  badges               Json?
  optInMarketing       Boolean?      @default(false)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  // PJ fields
  razaoSocial          String?
  cnpj                 String?       @unique
  inscricaoEstadual    String?
  website              String?
  responsibleName      String?
  responsibleCpf       String?
  
  // Relations
  roles           UsersOnRoles[]
  bids            Bid[]
  wins            UserWin[]       @relation("UserWins")
  wonLots         Lot[]           @relation("WonLots")
  documents       UserDocument[]
  notifications   Notification[]
  habilitations   AuctionHabilitation[]
  maxBids         UserLotMaxBid[]
  uploadedMedia   MediaItem[]      @relation("UploadedBy")
}

model Auctioneer {
  id                 String    @id @default(cuid())
  publicId           String?   @unique
  slug               String    @unique
  name               String
  registrationNumber String?
  contactName        String?
  email              String?   @unique
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?   @db.Text
  userId             String?   @unique
  user               User?     @relation(fields: [userId], references: [id])
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  auctions           Auction[]
}

model Seller {
  id                 String    @id @default(cuid())
  publicId           String?   @unique
  slug               String?   @unique
  name               String    @unique
  contactName        String?
  email              String?   @unique
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?   @db.Text
  userId             String?   @unique
  user               User?     @relation("SellerUser", fields: [userId], references: [id], onDelete: SetNull)
  isJudicial         Boolean   @default(false)
  judicialBranchId   String?   @unique
  judicialBranch     JudicialBranch? @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  auctions           Auction[]
  lots               Lot[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]
  judicialProcesses  JudicialProcess[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model DirectSaleOffer {
  id                 String      @id @default(cuid())
  publicId           String?     @unique
  title              String
  description        String?     @db.Text
  offerType          DirectSaleOfferType
  price              Decimal?    @db.Decimal(15, 2)
  minimumOfferPrice  Decimal?    @db.Decimal(15, 2)
  status             DirectSaleOfferStatus @default(ACTIVE)
  categoryId         String?
  category           LotCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  sellerId           String?
  seller             Seller?   @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerName         String?
  sellerLogoUrl      String?
  dataAiHintSellerLogo String?
  locationCity       String?
  locationState      String?
  imageUrl           String?
  imageMediaId       String?
  dataAiHint         String?
  galleryImageUrls   Json?
  mediaItemIds       Json?
  itemsIncluded      Json?
  views              Int?        @default(0)
  expiresAt          DateTime?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  
  @@index([sellerId])
  @@index([categoryId])
}

model JudicialProcess {
  id                String    @id @default(cuid())
  publicId          String?   @unique
  processNumber     String
  isElectronic      Boolean   @default(true)
  courtId           String?
  court             Court?    @relation(fields: [courtId], references: [id])
  districtId        String?
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  branchId          String?
  branch            JudicialBranch? @relation(fields: [branchId], references: [id])
  sellerId          String?
  seller            Seller?   @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties           JudicialParty[]
  bens              Bem[]
  auctions          Auction[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
  @@index([sellerId])
}

model JudicialParty {
  id             String   @id @default(cuid())
  processId      String
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  @@index([processId])
}

model AuctionHabilitation {
  id           String @id @default(cuid())
  userId       String
  auctionId    String
  habilitatedAt DateTime @default(now())
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction      Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@unique([userId, auctionId])
  @@index([auctionId])
}

model Bid {
  id             String   @id @default(cuid())
  lotId          String
  lot            Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId      String
  auction        Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidderId       String
  bidder         User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderDisplay  String?
  amount         Decimal  @db.Decimal(15, 2)
  timestamp      DateTime @default(now())

  @@index([lotId])
  @@index([bidderId])
}

model UserDocument {
  id                String       @id @default(cuid())
  userId            String
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentTypeId    String
  documentType      DocumentType @relation(fields: [documentTypeId], references: [id])
  status            UserDocumentStatus @default(PENDING_ANALYSIS)
  fileUrl           String
  fileName          String?
  rejectionReason   String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@unique([userId, documentTypeId])
}

model UserWin {
  id                String       @id @default(cuid())
  lotId             String       @unique
  lot               Lot          @relation(fields: [lotId], references: [id])
  userId            String
  user              User         @relation("UserWins", fields: [userId], references: [id])
  winningBidAmount  Decimal      @db.Decimal(15, 2)
  winDate           DateTime     @default(now())
  paymentStatus     PaymentStatus @default(PENDENTE)
  invoiceUrl        String?
  installments      InstallmentPayment[]

  @@index([userId])
}

model InstallmentPayment {
  id                String       @id @default(cuid())
  userWinId         String
  userWin           UserWin      @relation(fields: [userWinId], references: [id], onDelete: Cascade)
  installmentNumber Int
  amount            Decimal      @db.Decimal(15, 2)
  dueDate           DateTime
  status            PaymentStatus @default(PENDENTE)
  paymentDate       DateTime?
  paymentMethod     String?
  transactionId     String?

  @@index([userWinId])
}


model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lotId     String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  @@unique([userId, lotId])
  @@index([lotId])
}

model MediaItem {
  id                  String   @id @default(cuid())
  fileName            String
  storagePath         String
  title               String?
  altText             String?
  caption             String?
  description         String?
  mimeType            String
  sizeBytes           Int
  urlOriginal         String
  urlThumbnail        String?
  urlMedium           String?
  urlLarge            String?
  linkedLotIds        Json?
  judicialProcessId   String?
  dataAiHint          String?
  uploadedByUserId    String
  uploadedBy          User     @relation("UploadedBy", fields: [uploadedByUserId], references: [id])
  uploadedAt          DateTime @default(now())

  @@unique([fileName])
  @@index([uploadedByUserId])
}

model VehicleMake {
  id      String         @id @default(cuid())
  name    String         @unique
  slug    String         @unique
  models  VehicleModel[]
}

model VehicleModel {
  id      String      @id @default(cuid())
  name    String
  slug    String
  makeId  String
  make    VehicleMake @relation(fields: [makeId], references: [id])
  bens    Json? // Assuming a JSON field to store related Bem IDs for now.

  @@unique([makeId, name])
}

// Join table for User and Role (Many-to-Many)
model UsersOnRoles {
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([roleId])
}
