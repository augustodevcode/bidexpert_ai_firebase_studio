// datasource db {
//   provider     = "mysql"
//   url          = env("DATABASE_URL")
//   relationMode = "prisma"
// }

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model PlatformSettings {
  id                            String   @id @default("global")
  siteTitle                     String?
  siteTagline                   String?  @db.VarChar(200)
  logoUrl                       String?
  faviconUrl                    String?
  galleryImageBasePath          String?  @db.VarChar(200)
  storageProvider               String?  @db.VarChar(50)
  firebaseStorageBucket         String?  @db.VarChar(200)
  activeThemeName               String?  @db.VarChar(100)
  themes                        Json?
  platformPublicIdMasks         Json?
  homepageSections              Json?
  mentalTriggerSettings         Json?
  sectionBadgeVisibility        Json?
  mapSettings                   Json?
  searchPaginationType          String?  @db.VarChar(50)
  searchItemsPerPage            Int?
  searchLoadMoreCount           Int?
  showCountdownOnLotDetail      Boolean?
  showCountdownOnCards          Boolean?
  showRelatedLotsOnLotDetail    Boolean?
  relatedLotsCount              Int?
  defaultUrgencyTimerHours      Int?
  variableIncrementTable        Json?
  biddingSettings               Json?
  defaultListItemsPerPage       Int?
  updatedAt                     DateTime @updatedAt
}

model Role {
  id              String         @id @default(cuid())
  name            String         @db.VarChar(50)
  nameNormalized  String         @unique @db.VarChar(50)
  description     String?        @db.VarChar(255)
  permissions     Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  users           UsersOnRoles[]
}

model State {
  id        String             @id @default(cuid())
  name      String             @db.VarChar(100)
  uf        String             @unique @db.VarChar(2)
  slug      String?            @unique @db.VarChar(100)
  cityCount Int                @default(0)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  cities    City[]
  districts JudicialDistrict[]
  lots      Lot[]
}

model LotCategory {
  id                   String        @id @default(cuid())
  name                 String        @db.VarChar(100)
  slug                 String?       @unique @db.VarChar(100)
  description          String?       @db.VarChar(500)
  hasSubcategories     Boolean       @default(false)
  itemCount            Int           @default(0)
  logoUrl              String?
  logoMediaId          String?       @db.VarChar(100)
  dataAiHintIcon       String?       @db.VarChar(100)
  coverImageUrl        String?
  coverImageMediaId    String?       @db.VarChar(100)
  dataAiHintCover      String?       @db.VarChar(100)
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?       @db.VarChar(100)
  dataAiHintMegaMenu   String?       @db.VarChar(100)
  iconName             String?       @db.VarChar(50)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  subcategories        Subcategory[]
  auctions             Auction[]
  lots                 Lot[]
  bens                 Bem[]
}

model DocumentTemplate {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(150)
  type      String   @db.VarChar(50)
  content   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(150)
  email     String   @db.VarChar(150)
  subject   String   @db.VarChar(255)
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentType {
  id          String         @id @default(cuid())
  name        String         @db.VarChar(150)
  description String?        @db.VarChar(255)
  isRequired  Boolean        @default(true)
  appliesTo   String?        @db.VarChar(50) // e.g., 'PHYSICAL', 'LEGAL', 'ALL'
  documents   UserDocument[]
}

model User {
  id                  String           @id @default(cuid())
  uid                 String?          @unique
  email               String           @unique @db.VarChar(150)
  password            String?
  fullName            String?          @db.VarChar(150)
  roles               UsersOnRoles[]
  seller              Seller?
  auctioneer          Auctioneer?
  habilitationStatus  String           @default("PENDING_DOCUMENTS") @db.VarChar(50)
  accountType         String           @default("PHYSICAL") @db.VarChar(50)
  avatarUrl           String?
  dataAiHint          String?          @db.VarChar(100)
  badges              Json?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  uploadedMedia       MediaItem[]
  maxBids             UserLotMaxBid[]
  notifications       Notification[]
  cpf                 String?
  dateOfBirth         DateTime?
  razaoSocial         String?
  cnpj                String?
  inscricaoEstadual   String?
  website             String?
  cellPhone           String?
  homePhone           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  optInMarketing      Boolean?         @default(false)
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  wonLots             Lot[]            @relation("WonLots")
  habilitations       AuctionHabilitation[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model City {
  id        String           @id @default(cuid())
  name      String           @db.VarChar(150)
  slug      String?          @db.VarChar(150)
  stateId   String
  stateUf   String?          @db.VarChar(2)
  ibgeCode  String?          @unique @db.VarChar(10)
  lotCount  Int              @default(0)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  state     State            @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots      Lot[]
}

model Subcategory {
  id                String      @id @default(cuid())
  name              String      @db.VarChar(100)
  slug              String?     @db.VarChar(100)
  parentCategoryId  String
  description       String?     @db.VarChar(500)
  displayOrder      Int         @default(0)
  iconUrl           String?
  iconMediaId       String?     @db.VarChar(100)
  dataAiHintIcon    String?     @db.VarChar(100)
  parentCategory    LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots              Lot[]
  bens              Bem[]
}

model Court {
  id        String             @id @default(cuid())
  name      String             @db.VarChar(150)
  slug      String?            @db.VarChar(150)
  stateUf   String?            @db.VarChar(2)
  website   String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  districts JudicialDistrict[]
  processes JudicialProcess[]
}

model JudicialDistrict {
  id        String           @id @default(cuid())
  name      String           @db.VarChar(150)
  slug      String?          @unique @db.VarChar(150)
  courtId   String?
  stateId   String?
  zipCode   String?          @db.VarChar(10)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  court     Court?           @relation(fields: [courtId], references: [id])
  state     State?           @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]
}

model JudicialBranch {
  id         String             @id @default(cuid())
  name       String             @db.VarChar(150)
  slug       String?            @unique @db.VarChar(150)
  districtId String?
  contactName String?           @db.VarChar(150)
  phone      String?            @db.VarChar(20)
  email      String?            @db.VarChar(150)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  district   JudicialDistrict?  @relation(fields: [districtId], references: [id])
  processes  JudicialProcess[]
  sellers    Seller[]
}

model Seller {
  id                   String            @id @default(cuid())
  publicId             String            @unique @default(cuid()) @db.VarChar(100)
  slug                 String?           @unique @db.VarChar(150)
  name                 String            @unique @db.VarChar(150)
  contactName          String?           @db.VarChar(150)
  email                String?           @db.VarChar(150)
  phone                String?           @db.VarChar(20)
  address              String?           @db.VarChar(200)
  city                 String?           @db.VarChar(100)
  state                String?           @db.VarChar(50)
  zipCode              String?           @db.VarChar(10)
  website              String?
  logoUrl              String?
  logoMediaId          String?           @db.VarChar(100)
  dataAiHintLogo       String?           @db.VarChar(100)
  description          String?           @db.Text
  userId               String?           @unique
  user                 User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  isJudicial           Boolean           @default(false)
  judicialBranchId     String?
  judicialBranch       JudicialBranch?   @relation(fields: [judicialBranchId], references: [id])
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  auctions             Auction[]
  lots                 Lot[]
  bens                 Bem[]
  judicialProcesses    JudicialProcess[]
  directSaleOffers     DirectSaleOffer[]
}

model Auctioneer {
  id                   String    @id @default(cuid())
  publicId             String    @unique @default(cuid()) @db.VarChar(100)
  slug                 String?   @unique @db.VarChar(150)
  name                 String    @db.VarChar(150)
  registrationNumber   String?   @db.VarChar(50)
  contactName          String?   @db.VarChar(150)
  email                String?   @db.VarChar(150)
  phone                String?   @db.VarChar(20)
  address              String?   @db.VarChar(200)
  city                 String?   @db.VarChar(100)
  state                String?   @db.VarChar(50)
  zipCode              String?   @db.VarChar(10)
  website              String?
  logoUrl              String?
  logoMediaId          String?   @db.VarChar(100)
  dataAiHintLogo       String?   @db.VarChar(100)
  description          String?   @db.Text
  userId               String?   @unique
  user                 User?     @relation(fields: [userId], references: [id])
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  auctions             Auction[]
}

model JudicialProcess {
  id              String           @id @default(cuid())
  publicId        String           @unique @default(cuid()) @db.VarChar(100)
  processNumber   String           @db.VarChar(100)
  isElectronic    Boolean          @default(true)
  courtId         String?
  districtId      String?
  branchId        String?
  sellerId        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  court           Court?           @relation(fields: [courtId], references: [id])
  district        JudicialDistrict? @relation(fields: [districtId], references: [id])
  branch          JudicialBranch?  @relation(fields: [branchId], references: [id])
  seller          Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties         JudicialParty[]
  bens            Bem[]
}

model JudicialParty {
  id             String          @id @default(cuid())
  processId      String
  name           String
  documentNumber String?         @db.VarChar(50)
  partyType      String          @db.VarChar(50)
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
}

model Bem {
  id                   String           @id @default(cuid())
  publicId             String           @unique @default(cuid()) @db.VarChar(100)
  title                String           @db.VarChar(200)
  description          String?          @db.Text
  status               String           @default("DISPONIVEL") @db.VarChar(50)
  categoryId           String
  subcategoryId        String?
  judicialProcessId    String?
  sellerId             String?
  evaluationValue      Float?
  imageUrl             String?
  imageMediaId         String?          @db.VarChar(100)
  galleryImageUrls     Json?
  mediaItemIds         Json?
  dataAiHint           String?          @db.VarChar(100)
  locationCity         String?          @db.VarChar(100)
  locationState        String?          @db.VarChar(100)
  address              String?
  latitude             Float?
  longitude            Float?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  category             LotCategory      @relation(fields: [categoryId], references: [id])
  subcategory          Subcategory?     @relation(fields: [subcategoryId], references: [id])
  judicialProcess      JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller               Seller?          @relation(fields: [sellerId], references: [id])
  lots                 LotBens[]
  plate                String?          @db.VarChar(10)
  make                 String?          @db.VarChar(50)
  model                String?          @db.VarChar(50)
  version              String?          @db.VarChar(100)
  year                 Int?
  modelYear            Int?
  mileage              Int?
  color                String?          @db.VarChar(30)
  fuelType             String?          @db.VarChar(30)
  transmissionType     String?          @db.VarChar(30)
  bodyType             String?          @db.VarChar(50)
  vin                  String?          @db.VarChar(17)
  renavam              String?          @db.VarChar(11)
  enginePower          String?          @db.VarChar(50)
  numberOfDoors        Int?
  vehicleOptions       String?          @db.VarChar(500)
  detranStatus         String?          @db.VarChar(100)
  debts                String?          @db.VarChar(500)
  runningCondition     String?          @db.VarChar(100)
  bodyCondition        String?          @db.VarChar(100)
  tiresCondition       String?          @db.VarChar(100)
  hasKey               Boolean?
  propertyType         String?
  propertyRegistrationNumber String?   @db.VarChar(50)
  iptuNumber           String?          @db.VarChar(50)
  isOccupied           Boolean?
  area                 Float?
  totalArea            Float?
  builtArea            Float?
  bedrooms             Int?
  suites               Int?
  bathrooms            Int?
  parkingSpaces        Int?
  constructionType     String?          @db.VarChar(100)
  finishes             String?          @db.VarChar(500)
  infrastructure       String?          @db.VarChar(500)
  condoDetails         String?          @db.VarChar(500)
  improvements         String?          @db.VarChar(500)
  topography           String?          @db.VarChar(100)
  liensAndEncumbrances String?          @db.Text
  propertyDebts        String?          @db.VarChar(500)
  unregisteredRecords  String?          @db.VarChar(500)
  hasHabiteSe          Boolean?
  zoningRestrictions   String?          @db.VarChar(200)
  amenities            Json?
  brand                String?          @db.VarChar(50)
  serialNumber         String?          @db.VarChar(100)
  itemCondition        String?          @db.VarChar(100)
  specifications       String?          @db.Text
  includedAccessories  String?          @db.VarChar(500)
  batteryCondition     String?          @db.VarChar(100)
  hasInvoice           Boolean?
  hasWarranty          Boolean?
  repairHistory        String?          @db.VarChar(500)
  applianceCapacity    String?          @db.VarChar(50)
  voltage              String?          @db.VarChar(20)
  applianceType        String?          @db.VarChar(50)
  additionalFunctions  String?          @db.VarChar(200)
  hoursUsed            Int?
  engineType           String?          @db.VarChar(50)
  capacityOrPower      String?          @db.VarChar(100)
  maintenanceHistory   String?          @db.Text
  installationLocation String?          @db.VarChar(200)
  compliesWithNR       String?          @db.VarChar(100)
  operatingLicenses    String?          @db.VarChar(200)
  breed                String?          @db.VarChar(50)
  age                  String?          @db.VarChar(30)
  sex                  String?          @db.VarChar(10)
  weight               String?          @db.VarChar(30)
  individualId         String?          @db.VarChar(50)
  purpose              String?          @db.VarChar(100)
  sanitaryCondition    String?          @db.VarChar(200)
  vaccinationStatus    String?
  lineage              String?          @db.VarChar(200)
  isPregnant           Boolean?
  specialSkills        String?          @db.VarChar(200)
  gtaDocument          String?          @db.VarChar(100)
  breedRegistryDocument String?         @db.VarChar(100)
  furnitureType        String?          @db.VarChar(100)
  material             String?          @db.VarChar(100)
  style                String?          @db.VarChar(50)
  dimensions           String?          @db.VarChar(100)
  pieceCount           Int?
  jewelryType          String?          @db.VarChar(100)
  metal                String?          @db.VarChar(100)
  gemstones            String?          @db.VarChar(500)
  totalWeight          String?          @db.VarChar(50)
  jewelrySize          String?          @db.VarChar(50)
  authenticityCertificate String?       @db.VarChar(200)
  workType             String?          @db.VarChar(100)
  artist               String?          @db.VarChar(100)
  period               String?          @db.VarChar(100)
  technique            String?          @db.VarChar(100)
  provenance           String?          @db.VarChar(500)
  boatType             String?          @db.VarChar(100)
  boatLength           String?          @db.VarChar(50)
  hullMaterial         String?          @db.VarChar(50)
  onboardEquipment     String?          @db.Text
  productName          String?          @db.VarChar(100)
  quantity             String?          @db.VarChar(50)
  packagingType        String?          @db.VarChar(50)
  expirationDate       DateTime?
  storageConditions    String?          @db.VarChar(200)
  preciousMetalType    String?          @db.VarChar(50)
  purity               String?          @db.VarChar(50)
  forestGoodsType      String?          @db.VarChar(100)
  volumeOrQuantity     String?          @db.VarChar(100)
  species              String?          @db.VarChar(100)
  dofNumber            String?          @db.VarChar(100)
}

model LotBens {
  lot   Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId String
  bem   Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId String

  @@id([lotId, bemId])
}

model Auction {
  id                    String        @id @default(cuid()) @db.VarChar(100)
  publicId              String        @unique @default(cuid()) @db.VarChar(100)
  slug                  String?       @unique @db.VarChar(255)
  title                 String
  description           String?       @db.Text
  status                String        @default("RASCUNHO") @db.VarChar(50)
  auctionDate           DateTime
  endDate               DateTime?
  auctioneerId          String
  sellerId              String
  categoryId            String?
  auctionType           String?       @db.VarChar(50)
  imageUrl              String?
  imageMediaId          String?       @db.VarChar(100)
  documentsUrl          String?
  visits                Int           @default(0)
  totalLots             Int           @default(0)
  initialOffer          Float?
  isFavorite            Boolean       @default(false)
  dataAiHint            String?       @db.VarChar(100)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  bids                  Bid[]
  lots                  Lot[]
  auctioneer            Auctioneer    @relation(fields: [auctioneerId], references: [id])
  seller                Seller        @relation(fields: [sellerId], references: [id])
  category              LotCategory?  @relation(fields: [categoryId], references: [id])
  auctionStages         Json?
  evaluationReportUrl   String?
  auctionCertificateUrl String?
  sellingBranch         String?       @db.VarChar(100)
  automaticBiddingEnabled Boolean     @default(false)
  silentBiddingEnabled  Boolean       @default(false)
  allowMultipleBidsPerUser Boolean    @default(true)
  allowInstallmentBids  Boolean       @default(false)
  softCloseEnabled      Boolean       @default(false)
  softCloseMinutes      Int           @default(2)
  estimatedRevenue      Float?
  achievedRevenue       Float?
  totalHabilitatedUsers Int           @default(0)
  isFeaturedOnMarketplace Boolean     @default(false)
  marketplaceAnnouncementTitle String? @db.VarChar(150)
  judicialProcessId     String?
  additionalTriggers    Json?
  decrementAmount       Float?
  decrementIntervalSeconds Int?
  floorPrice            Float?
  autoRelistSettings    Json?
  habilitations         AuctionHabilitation[]
}

model Lot {
  id                         String           @id @default(cuid())
  publicId                   String           @unique @default(cuid()) @db.VarChar(100)
  auctionId                  String           @db.VarChar(100)
  slug                       String?          @db.VarChar(255)
  number                     String?          @db.VarChar(20)
  title                      String
  description                String?          @db.Text
  price                      Float
  initialPrice               Float?
  secondInitialPrice         Float?
  bidIncrementStep           Float?
  status                     String           @default("EM_BREVE") @db.VarChar(50)
  bidsCount                  Int              @default(0)
  views                      Int              @default(0)
  isFeatured                 Boolean          @default(false)
  isExclusive                Boolean          @default(false)
  discountPercentage         Int?
  additionalTriggers         Json?
  imageUrl                   String?
  imageMediaId               String?          @db.VarChar(100)
  galleryImageUrls           Json?
  mediaItemIds               Json?
  type                       String           @db.VarChar(100)
  categoryId                 String?
  subcategoryId              String?
  auctionName                String?
  sellerId                   String?
  sellerName                 String?          @db.VarChar(150)
  auctioneerId               String?
  cityId                     String?
  stateId                    String?
  cityName                   String?          @db.VarChar(100)
  stateUf                    String?          @db.VarChar(2)
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?          @db.VarChar(500)
  mapStaticImageUrl          String?
  endDate                    DateTime?
  auctionDate                DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?          @db.VarChar(100)
  dataAiHint                 String?          @db.VarChar(100)
  winnerId                   String?
  winningBidTermUrl          String?
  allowInstallmentBids       Boolean          @default(false)
  createdAt                  DateTime         @default(now())
  updatedAt                  DateTime         @updatedAt
  bids                       Bid[]
  auction                    Auction          @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                   LotCategory?     @relation(fields: [categoryId], references: [id])
  subcategory                Subcategory?     @relation(fields: [subcategoryId], references: [id])
  seller                     Seller?          @relation(fields: [sellerId], references: [id])
  city                       City?            @relation(fields: [cityId], references: [id])
  state                      State?           @relation(fields: [stateId], references: [id])
  winner                     User?            @relation("WonLots", fields: [winnerId], references: [id], onDelete: SetNull)
  maxBids                    UserLotMaxBid[]
  bens                       LotBens[]
  winRecord                  UserWin?
  reviews                    Review[]
  questions                  LotQuestion[]
  odometer                   Int?
  series                     String?
  engineDetails              String?
  primaryDamage              String?
  secondaryDamage            String?
  lossType                   String?
  titleBrand                 String?
  vinStatus                  String?
  titleInfo                  String?
  bodyStyle                  String?
  driveLineType              String?
  cylinders                  String?
  restraintSystem            String?
  exteriorInteriorColor      String?
  options                    String?
  manufacturedIn             String?
  vehicleClass               String?
  vehicleLocationInBranch      String?
  laneRunNumber              String?
  aisleStall                 String?
  startCode                  String?
  airbagsStatus              String?
  actualCashValue            Float?
  estimatedRepairCost        Float?
  judicialProcessNumber      String?
  courtDistrict              String?
  courtName                  String?
  publicProcessUrl           String?
  propertyRegistrationNumber String?
  propertyLiens              String?
  knownDebts                 String?
  additionalDocumentsInfo    String?
  reservePrice               Float?
  evaluationValue            Float?
  debtAmount                 Float?
  itbiValue                  Float?
}

model MediaItem {
  id            String   @id @default(cuid())
  fileName      String
  storagePath   String
  title         String
  altText       String?
  caption       String?  @db.VarChar(500)
  description   String?  @db.Text
  mimeType      String   @db.VarChar(100)
  sizeBytes     Int?
  urlOriginal   String
  urlThumbnail  String?
  urlMedium     String?
  urlLarge      String?
  linkedLotIds  Json?
  dataAiHint    String?  @db.VarChar(100)
  uploadedBy    String?
  uploadedAt    DateTime @default(now())
  user          User?    @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)
}

model UserDocument {
  id              String       @id @default(cuid())
  userId          String
  documentTypeId  String
  status          String       @default("PENDING") @db.VarChar(50)
  fileUrl         String
  fileName        String?
  rejectionReason String?      @db.Text
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String   @db.VarChar(100)
  bidderId      String
  bidderDisplay String?  @db.VarChar(150)
  amount        Float
  timestamp     DateTime @default(now())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String   @id @default(cuid())
  lotId            String   @unique
  userId           String?
  winningBidAmount Float
  winDate          DateTime @default(now())
  paymentStatus    String   @db.VarChar(50)
  invoiceUrl       String?
  lot              Lot      @relation(fields: [lotId], references: [id])
  user             User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model DirectSaleOffer {
  id                   String   @id @default(cuid())
  publicId             String   @unique @default(cuid()) @db.VarChar(100)
  title                String
  description          String?  @db.Text
  offerType            String?  @db.VarChar(50)
  price                Float?
  minimumOfferPrice    Float?
  status               String   @default("ACTIVE") @db.VarChar(50)
  category             String   @db.VarChar(100)
  sellerId             String?
  sellerName           String   @db.VarChar(150)
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?  @db.VarChar(100)
  locationCity         String?  @db.VarChar(100)
  locationState        String?  @db.VarChar(100)
  imageUrl             String?
  imageMediaId         String?  @db.VarChar(100)
  dataAiHint           String?  @db.VarChar(100)
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int      @default(0)
  expiresAt            DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  seller               Seller?  @relation(fields: [sellerId], references: [id], onDelete: SetNull)
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String   @db.Text
  createdAt       DateTime @default(now())
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                        String   @id @default(cuid())
  lotId                     String
  auctionId                 String
  userId                    String
  userDisplayName           String
  questionText              String   @db.Text
  isPublic                  Boolean  @default(true)
  answerText                String?  @db.Text
  answeredByUserId          String?
  answeredByUserDisplayName String?
  answeredAt                DateTime?
  createdAt                 DateTime @default(now())
  lot                       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model AuctionHabilitation {
  userId    String
  auctionId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@id([userId, auctionId])
}
