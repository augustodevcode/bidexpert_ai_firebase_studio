// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model PlatformSettings {
  id                        String    @id @default("global")
  siteTitle                 String?   @db.VarChar(100)
  siteTagline               String?   @db.VarChar(200)
  logoUrl                   String?   @db.VarChar(255)
  faviconUrl                String?   @db.VarChar(255)
  galleryImageBasePath      String    @default("/uploads/media/") @db.VarChar(200)
  storageProvider           String    @default("local") @db.VarChar(50)
  firebaseStorageBucket     String?   @db.VarChar(200)
  activeThemeName           String?   @db.VarChar(100)
  platformPublicIdMasksId   String?   @unique
  platformPublicIdMasks     PlatformPublicIdMasks? @relation(fields: [platformPublicIdMasksId], references: [id])
  mentalTriggerSettingsId   String?   @unique
  mentalTriggerSettings     MentalTriggerSettings? @relation(fields: [mentalTriggerSettingsId], references: [id])
  sectionBadgeVisibilityId  String?   @unique
  sectionBadgeVisibility    SectionBadgeVisibility? @relation(fields: [sectionBadgeVisibilityId], references: [id])
  mapSettingsId             String?   @unique
  mapSettings               MapSettings? @relation(fields: [mapSettingsId], references: [id])
  searchPaginationType      String    @default("loadMore") @db.VarChar(50)
  searchItemsPerPage        Int       @default(12)
  searchLoadMoreCount       Int       @default(12)
  showCountdownOnLotDetail  Boolean   @default(true)
  showCountdownOnCards      Boolean   @default(true)
  showRelatedLotsOnLotDetail Boolean  @default(true)
  relatedLotsCount          Int       @default(5)
  defaultUrgencyTimerHours  Int?
  variableIncrementTableId  String?   @unique
  variableIncrementTable    VariableIncrementTable? @relation(fields: [variableIncrementTableId], references: [id])
  biddingSettingsId         String?   @unique
  biddingSettings           BiddingSettings? @relation(fields: [biddingSettingsId], references: [id])
  defaultListItemsPerPage   Int       @default(10)
  updatedAt                 DateTime? @updatedAt
  themes                    Theme[]
}

model Theme {
  id                 String           @id @default(uuid())
  name               String           @unique
  platformSettingsId String
  platformSettings   PlatformSettings @relation(fields: [platformSettingsId], references: [id])
  colors             Json
}

model PlatformPublicIdMasks {
    id String @id @default(uuid())
    auctions String?
    lots String?
    auctioneers String?
    sellers String?
    platformSettings PlatformSettings?
}

model MentalTriggerSettings {
    id String @id @default(uuid())
    showDiscountBadge Boolean @default(true)
    showUrgencyTimer Boolean @default(true)
    urgencyTimerThresholdDays Int @default(1)
    urgencyTimerThresholdHours Int @default(0)
    showPopularityBadge Boolean @default(true)
    popularityViewThreshold Int @default(500)
    showHotBidBadge Boolean @default(true)
    hotBidThreshold Int @default(10)
    showExclusiveBadge Boolean @default(true)
    platformSettings PlatformSettings?
}

model SectionBadgeVisibility {
    id String @id @default(uuid())
    featuredLots Json?
    searchGrid Json?
    searchList Json?
    lotDetail Json?
    platformSettings PlatformSettings?
}

model MapSettings {
    id String @id @default(uuid())
    defaultProvider String @default("openstreetmap")
    googleMapsApiKey String?
    staticImageMapZoom Int @default(15)
    staticImageMapMarkerColor String @default("blue")
    platformSettings PlatformSettings?
}

model BiddingSettings {
    id String @id @default(uuid())
    instantBiddingEnabled Boolean @default(true)
    getBidInfoInstantly Boolean @default(true)
    biddingInfoCheckIntervalSeconds Int @default(1)
    platformSettings PlatformSettings?
}

model VariableIncrementTable {
    id String @id @default(uuid())
    rules Json
    platformSettings PlatformSettings?
}

model Role {
  id            String   @id @default(uuid())
  name          String   @db.VarChar(50)
  nameNormalized String  @unique @db.VarChar(50)
  description   String?  @db.VarChar(255)
  permissions   String[]
  users         UsersOnRoles[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model State {
  id        String    @id @default(uuid())
  name      String    @db.VarChar(100)
  uf        String    @unique @db.VarChar(2)
  slug      String?   @unique @db.VarChar(100)
  cities    City[]
  districts JudicialDistrict[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lots      Lot[]
}

model LotCategory {
  id                   String    @id @default(uuid())
  name                 String    @unique @db.VarChar(100)
  slug                 String?   @unique @db.VarChar(100)
  description          String?   @db.VarChar(500)
  hasSubcategories     Boolean   @default(false)
  logoUrl              String?   @db.VarChar(255)
  logoMediaId          String?   @db.VarChar(100)
  dataAiHintLogo       String?   @db.VarChar(100)
  coverImageUrl        String?   @db.VarChar(255)
  coverImageMediaId    String?   @db.VarChar(100)
  dataAiHintCover      String?   @db.VarChar(100)
  megaMenuImageUrl     String?   @db.VarChar(255)
  megaMenuImageMediaId String?   @db.VarChar(100)
  dataAiHintMegaMenu   String?   @db.VarChar(100)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  subcategories        Subcategory[]
  lots                 Lot[]
  auctions             Auction[]
  bens                 Bem[]
  iconName             String?   @db.VarChar(50)
}

model DocumentTemplate {
  id      String   @id @default(uuid())
  name    String   @db.VarChar(150)
  type    String   @db.VarChar(50)
  content String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(150)
  email     String   @db.VarChar(150)
  subject   String?  @db.VarChar(255)
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentType {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(150)
  description String?  @db.VarChar(255)
  isRequired  Boolean  @default(true)
  appliesTo   String?  @db.VarChar(50) // e.g. "PHYSICAL,LEGAL,ALL,PROCESS"
  userDocuments UserDocument[]
}

model User {
  id                String       @id @default(uuid())
  email             String       @unique @db.VarChar(150)
  password          String?      @db.VarChar(255)
  fullName          String?      @db.VarChar(150)
  roles             UsersOnRoles[]
  seller            Seller?
  habilitationStatus String      @default("PENDING_DOCUMENTS") @db.VarChar(50) // UserHabilitationStatus
  accountType       String      @default("PHYSICAL") @db.VarChar(50) // AccountType
  avatarUrl         String?      @db.VarChar(255)
  dataAiHint        String?      @db.VarChar(100)
  badges            String[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  mediaItems        MediaItem[]
  userDocuments     UserDocument[]
  bids              Bid[]
  wins              UserWin[]
  maxBids           UserLotMaxBid[]
  notifications     Notification[]
  sellerId          String?      
  cpf               String?      
  cellPhone         String?      
  dateOfBirth       DateTime?    
  razaoSocial       String?      
  cnpj              String?      
  inscricaoEstadual String?      
  websiteComitente  String?      
  zipCode           String?      
  street            String?      
  number            String?      
  complement        String?      
  neighborhood      String?      
  city              String?      
  state             String?      
  optInMarketing    Boolean?     @default(false)
  rgNumber          String?      
  rgIssuer          String?      
  rgIssueDate       DateTime?    
  rgState           String?      
  homePhone         String?      
  gender            String?      
  profession        String?      
  nationality       String?      
  maritalStatus     String?      
  propertyRegime    String?      
  spouseName        String?      
  spouseCpf         String?      
  responsibleName   String?      
  responsibleCpf    String?      
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String   
  assignedAt DateTime @default(now())
  assignedBy String   

  @@id([userId, roleId])
}

model City {
  id        String    @id @default(uuid())
  name      String    @db.VarChar(150)
  slug      String?   @db.VarChar(150)
  stateId   String
  state     State     @relation(fields: [stateId], references: [id])
  stateUf   String?   @db.VarChar(2)
  ibgeCode  String?   @unique @db.VarChar(10)
  lotCount  Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lots      Lot[]
}

model Subcategory {
  id              String      @id @default(uuid())
  name            String      @db.VarChar(100)
  slug            String?     @db.VarChar(100)
  parentCategoryId String
  parentCategory  LotCategory @relation(fields: [parentCategoryId], references: [id])
  description     String?     @db.VarChar(500)
  displayOrder    Int         @default(0)
  iconUrl         String?     @db.VarChar(255)
  iconMediaId     String?     @db.VarChar(100)
  dataAiHintIcon  String?     @db.VarChar(100)
  lots            Lot[]
  bens            Bem[]
}

model Court {
  id           String     @id @default(uuid())
  name         String     @db.VarChar(150)
  slug         String?    @db.VarChar(150)
  stateUf      String?    @db.VarChar(2)
  website      String?    @db.VarChar(255)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  districts    JudicialDistrict[]
  processes    JudicialProcess[]
  auctions     Auction[]
}

model JudicialDistrict {
  id         String     @id @default(uuid())
  name       String     @db.VarChar(150)
  slug       String?    @unique @db.VarChar(150)
  courtId    String?
  court      Court?     @relation(fields: [courtId], references: [id])
  stateId    String?
  state      State?     @relation(fields: [stateId], references: [id])
  zipCode    String?    @db.VarChar(10)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  branches   JudicialBranch[]
  processes  JudicialProcess[]
  auctions   Auction[]
}

model JudicialBranch {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(150)
  slug        String?  @unique @db.VarChar(150)
  districtId  String?
  district    JudicialDistrict? @relation(fields: [districtId], references: [id])
  contactName String?  @db.VarChar(150)
  phone       String?  @db.VarChar(20)
  email       String?  @db.VarChar(150)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  processes   JudicialProcess[]
  auctions    Auction[]
  Seller      Seller[]
}

model Seller {
  id               String       @id @default(uuid())
  publicId         String?      @unique @db.VarChar(100)
  slug             String?      @unique @db.VarChar(150)
  name             String       @unique @db.VarChar(150)
  contactName      String?      @db.VarChar(150)
  email            String?      @db.VarChar(150)
  phone            String?      @db.VarChar(20)
  address          String?      @db.VarChar(200)
  city             String?      @db.VarChar(100)
  state            String?      @db.VarChar(50)
  zipCode          String?      @db.VarChar(10)
  website          String?      @db.VarChar(255)
  logoUrl          String?      @db.VarChar(255)
  logoMediaId      String?      @db.VarChar(100)
  dataAiHintLogo   String?      @db.VarChar(100)
  description      String?      @db.Text
  userId           String?      @unique
  user             User?        @relation(fields: [userId], references: [id])
  isJudicial       Boolean      @default(false)
  judicialBranchId String?      @unique
  judicialBranch   JudicialBranch? @relation(fields: [judicialBranchId], references: [id])
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  auctions         Auction[]
  lots             Lot[]
  bens             Bem[]
  directSaleOffers DirectSaleOffer[]
}

model Auctioneer {
  id                 String    @id @default(uuid())
  publicId           String?   @unique @db.VarChar(100)
  slug               String?   @unique @db.VarChar(150)
  name               String
  registrationNumber String?   @db.VarChar(50)
  contactName        String?   @db.VarChar(150)
  email              String?   @db.VarChar(150)
  phone              String?   @db.VarChar(20)
  address            String?   @db.VarChar(200)
  city               String?   @db.VarChar(100)
  state              String?   @db.VarChar(50)
  zipCode            String?   @db.VarChar(10)
  website            String?   @db.VarChar(255)
  logoUrl            String?   @db.VarChar(255)
  logoMediaId        String?   @db.VarChar(100)
  dataAiHintLogo     String?   @db.VarChar(100)
  description        String?   @db.Text
  userId             String?   @unique
  user               User?     @relation(fields: [userId], references: [id])
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  auctions           Auction[]
  lots               Lot[]
}

model JudicialProcess {
  id            String      @id @default(uuid())
  publicId      String?     @unique @db.VarChar(100)
  processNumber String      @unique @db.VarChar(100)
  isElectronic  Boolean     @default(true)
  courtId       String?
  court         Court?      @relation(fields: [courtId], references: [id])
  districtId    String?
  district      JudicialDistrict? @relation(fields: [districtId], references: [id])
  branchId      String?
  branch        JudicialBranch? @relation(fields: [branchId], references: [id])
  sellerId      String?
  seller        Seller?     @relation(fields: [sellerId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  parties       JudicialParty[]
  bens          Bem[]
  auctions      Auction[]
}

model JudicialParty {
  id             String         @id @default(uuid())
  processId      String
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  name           String         @db.VarChar(255)
  documentNumber String?        @db.VarChar(50)
  partyType      String         @db.VarChar(50)
}

model Bem {
  id                String       @id @default(uuid())
  publicId          String       @unique @default(uuid())
  title             String       @db.VarChar(200)
  description       String?      @db.Text
  status            String       @default("DISPONIVEL") @db.VarChar(50)
  categoryId        String?
  category          LotCategory? @relation(fields: [categoryId], references: [id])
  subcategoryId     String?
  subcategory       Subcategory? @relation(fields: [subcategoryId], references: [id])
  judicialProcessId String?
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  sellerId          String?
  seller            Seller?      @relation(fields: [sellerId], references: [id])
  evaluationValue   Float?
  imageUrl          String?      @db.VarChar(255)
  imageMediaId      String?      @db.VarChar(100)
  galleryImageUrls  Json?
  mediaItemIds      Json?
  dataAiHint        String?      @db.VarChar(100)
  locationCity      String?      @db.VarChar(100)
  locationState     String?      @db.VarChar(100)
  address           String?      @db.VarChar(255)
  latitude          Float?
  longitude         Float?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  lots              LotBens[]
  // Vehicle details
  plate             String?      @db.VarChar(10)
  make              String?      @db.VarChar(50)
  model             String?      @db.VarChar(50)
  version           String?      @db.VarChar(100)
  year              Int?
  modelYear         Int?
  mileage           Int?
  color             String?      @db.VarChar(30)
  fuelType          String?      @db.VarChar(30)
  transmissionType  String?      @db.VarChar(30)
  bodyType          String?      @db.VarChar(50)
  vin               String?      @db.VarChar(17)
  renavam           String?      @db.VarChar(11)
  enginePower       String?      @db.VarChar(50)
  numberOfDoors     Int?
  vehicleOptions    String?      @db.VarChar(500)
  detranStatus      String?      @db.VarChar(100)
  debts             String?      @db.VarChar(500)
  runningCondition  String?      @db.VarChar(100)
  bodyCondition     String?      @db.VarChar(100)
  tiresCondition    String?      @db.VarChar(100)
  hasKey            Boolean?
  // Real estate details
  propertyRegistrationNumber String? @db.VarChar(50)
  iptuNumber        String?      @db.VarChar(50)
  isOccupied        Boolean?
  totalArea         Float?
  builtArea         Float?
  bedrooms          Int?
  suites            Int?
  bathrooms         Int?
  parkingSpaces     Int?
  constructionType  String?      @db.VarChar(100)
  finishes          String?      @db.VarChar(500)
  infrastructure    String?      @db.VarChar(500)
  condoDetails      String?      @db.VarChar(500)
  improvements      String?      @db.VarChar(500)
  topography        String?      @db.VarChar(100)
  liensAndEncumbrances String?   @db.Text
  propertyDebts     String?      @db.VarChar(500)
  unregisteredRecords String?  @db.VarChar(500)
  hasHabiteSe       Boolean?
  zoningRestrictions String?   @db.VarChar(200)
  amenities         Json?
  // Electronics
  brand             String?      @db.VarChar(50)
  serialNumber      String?      @db.VarChar(100)
  itemCondition     String?      @db.VarChar(100)
  specifications    String?      @db.Text
  includedAccessories String?  @db.VarChar(500)
  batteryCondition  String?      @db.VarChar(100)
  hasInvoice        Boolean?
  hasWarranty       Boolean?
  repairHistory     String?      @db.VarChar(500)
  // Appliance
  applianceCapacity String?      @db.VarChar(50)
  voltage           String?      @db.VarChar(20)
  applianceType     String?      @db.VarChar(50)
  additionalFunctions String?  @db.VarChar(200)
  // Machinery
  hoursUsed         Int?
  engineType        String?      @db.VarChar(50)
  capacityOrPower   String?      @db.VarChar(100)
  maintenanceHistory String?     @db.Text
  installationLocation String? @db.VarChar(200)
  compliesWithNR    String?      @db.VarChar(100)
  operatingLicenses String?      @db.VarChar(200)
  // Livestock
  breed             String?      @db.VarChar(50)
  age               String?      @db.VarChar(30)
  sex               String?      @db.VarChar(10)
  weight            String?      @db.VarChar(30)
  individualId      String?      @db.VarChar(50)
  purpose           String?      @db.VarChar(100)
  sanitaryCondition String?      @db.VarChar(200)
  lineage           String?      @db.VarChar(200)
  isPregnant        Boolean?
  specialSkills     String?      @db.VarChar(200)
  gtaDocument       String?      @db.VarChar(100)
  breedRegistryDocument String?  @db.VarChar(100)
}

model Auction {
  id              String   @id @default(uuid())
  publicId        String?  @unique @db.VarChar(100)
  slug            String?  @unique @db.VarChar(255)
  title           String   @db.VarChar(255)
  description     String?  @db.Text
  status          String   @default("RASCUNHO") @db.VarChar(50)
  auctionDate     DateTime?
  endDate         DateTime?
  auctioneerId    String?
  auctioneer      Auctioneer? @relation(fields: [auctioneerId], references: [id])
  sellerId        String?
  seller          Seller?  @relation(fields: [sellerId], references: [id])
  categoryId      String?
  category        LotCategory? @relation(fields: [categoryId], references: [id])
  auctionType     String?  @db.VarChar(50)
  imageUrl        String?  @db.VarChar(255)
  imageMediaId    String?  @db.VarChar(100)
  dataAiHint      String?  @db.VarChar(100)
  visits          Int      @default(0)
  initialOffer    Float?
  isFavorite      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lots            Lot[]
  bids            Bid[]
  auctionStages   Json?
  automaticBiddingEnabled Boolean @default(false)
  silentBiddingEnabled Boolean @default(false)
  allowMultipleBidsPerUser Boolean @default(true)
  allowInstallmentBids Boolean @default(true)
  softCloseEnabled Boolean @default(false)
  softCloseMinutes Int @default(2)
  isFeaturedOnMarketplace Boolean @default(false)
  marketplaceAnnouncementTitle String? @db.VarChar(150)
  estimatedRevenue Float?
  achievedRevenue  Float?
  totalHabilitatedUsers Int?
  documentsUrl     String? @db.VarChar(255)
  evaluationReportUrl String? @db.VarChar(255)
  auctionCertificateUrl String? @db.VarChar(255)
  sellingBranch    String? @db.VarChar(100)
  judicialProcessId String?
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  courtId           String?
  court             Court? @relation(fields: [courtId], references: [id])
  districtId        String?
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  branchId          String?
  branch            JudicialBranch? @relation(fields: [branchId], references: [id])
  decrementAmount   Float?
  decrementIntervalSeconds Int?
  floorPrice        Float?
  autoRelistSettings Json?
  habilitations     AuctionHabilitation[]
}

model Lot {
  id              String   @id @default(uuid())
  publicId        String?  @unique @db.VarChar(100)
  auctionId       String
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  slug            String?  @db.VarChar(255)
  number          String?  @db.VarChar(20)
  title           String   @db.VarChar(255)
  description     String?  @db.Text
  price           Float
  initialPrice    Float?
  secondInitialPrice Float?
  bidIncrementStep Float?
  status          String   @default("EM_BREVE") @db.VarChar(50)
  bidsCount       Int      @default(0)
  views           Int      @default(0)
  isFeatured      Boolean  @default(false)
  isExclusive     Boolean  @default(false)
  discountPercentage Int?
  additionalTriggers Json?
  imageUrl        String?  @db.VarChar(255)
  imageMediaId    String?  @db.VarChar(100)
  galleryImageUrls Json?
  mediaItemIds    Json?
  type            String?  @db.VarChar(100)
  categoryId      String?
  category        LotCategory? @relation(fields: [categoryId], references: [id])
  subcategoryId   String?
  subcategory     Subcategory? @relation(fields: [subcategoryId], references: [id])
  sellerId        String?
  seller          Seller?  @relation(fields: [sellerId], references: [id])
  auctioneerId    String?
  auctioneer      Auctioneer? @relation(fields: [auctioneerId], references: [id])
  cityId          String?
  city            City?    @relation(fields: [cityId], references: [id])
  stateId         String?
  state           State?   @relation(fields: [stateId], references: [id])
  latitude        Float?
  longitude       Float?
  mapAddress      String?  @db.VarChar(255)
  mapEmbedUrl     String?  @db.VarChar(500)
  mapStaticImageUrl String? @db.VarChar(255)
  endDate         DateTime?
  auctionDate     DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate DateTime?
  condition       String?  @db.VarChar(100)
  dataAiHint      String?  @db.VarChar(100)
  winnerId        String?
  winner          User?    @relation(fields: [winnerId], references: [id])
  winningBidTermUrl String? @db.VarChar(255)
  allowInstallmentBids Boolean @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  bens            LotBens[]
  bids            Bid[]
  userWins        UserWin[]
  maxBids         UserLotMaxBid[]
}

model LotBens {
  lot      Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId    String
  bem      Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId    String

  @@id([lotId, bemId])
}

model MediaItem {
  id           String   @id @default(uuid())
  fileName     String   @unique @db.VarChar(255)
  storagePath  String   @db.VarChar(255)
  title        String?  @db.VarChar(255)
  altText      String?  @db.VarChar(255)
  caption      String?  @db.VarChar(500)
  description  String?  @db.Text
  mimeType     String   @db.VarChar(100)
  sizeBytes    Int?
  urlOriginal  String   @db.VarChar(255)
  urlThumbnail String?  @db.VarChar(255)
  urlMedium    String?  @db.VarChar(255)
  urlLarge     String?  @db.VarChar(255)
  linkedLotIds Json?
  dataAiHint   String?  @db.VarChar(100)
  uploadedByUserId   String?   // Renamed from uploadedBy
  uploadedByUser   User?     @relation(fields: [uploadedByUserId], references: [id])
  judicialProcessId String?
  uploadedAt   DateTime @default(now())
}

model UserDocument {
  id               String       @id @default(uuid())
  userId           String
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentTypeId   String
  documentType     DocumentType @relation(fields: [documentTypeId], references: [id])
  status           String       @default("PENDING_ANALYSIS") @db.VarChar(50) // UserDocumentStatus
  fileUrl          String       @db.VarChar(255)
  fileName         String?      @db.VarChar(255)
  rejectionReason  String?      @db.Text
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@unique([userId, documentTypeId])
}

model Bid {
  id            String   @id @default(uuid())
  lotId         String
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId     String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidderId      String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderDisplay String?  @db.VarChar(150)
  amount        Float
  timestamp     DateTime @default(now())
}

model UserWin {
  id               String    @id @default(uuid())
  lotId            String    @unique // A lot can only be won once
  lot              Lot       @relation(fields: [lotId], references: [id])
  userId           String
  user             User      @relation(fields: [userId], references: [id])
  winningBidAmount Float
  winDate          DateTime  @default(now())
  paymentStatus    String    @db.VarChar(50) // PaymentStatus
  invoiceUrl       String?   @db.VarChar(255)
}

model DirectSaleOffer {
  id                 String   @id @default(uuid())
  publicId           String?  @unique @db.VarChar(100)
  title              String   @db.VarChar(255)
  description        String?  @db.Text
  offerType          String?  @db.VarChar(50)
  price              Float?
  minimumOfferPrice  Float?
  status             String   @default("ACTIVE") @db.VarChar(50)
  category           String?  @db.VarChar(100)
  sellerId           String?
  seller             Seller?  @relation(fields: [sellerId], references: [id])
  sellerName         String?  @db.VarChar(150)
  sellerLogoUrl      String?  @db.VarChar(255)
  dataAiHintSellerLogo String? @db.VarChar(100)
  locationCity       String?  @db.VarChar(100)
  locationState      String?  @db.VarChar(100)
  imageUrl           String?  @db.VarChar(255)
  imageMediaId       String?  @db.VarChar(100)
  dataAiHint         String?  @db.VarChar(100)
  galleryImageUrls   Json?
  mediaItemIds       Json?
  itemsIncluded      Json?
  views              Int      @default(0)
  expiresAt          DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lotId     String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model AuctionHabilitation {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auctionId String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  habilitatedAt DateTime @default(now())

  @@unique([userId, auctionId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String   @db.Text
  link      String?  @db.VarChar(255)
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}
