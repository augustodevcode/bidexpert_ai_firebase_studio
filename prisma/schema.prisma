// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// ============================================================================
// ENUM DEFINITIONS
// ============================================================================

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum Sexo {
  Macho
  Femea
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

// ============================================================================
// MODELS
// ============================================================================

model PlatformSettings {
  id                             String                 @id @default("global")
  siteTitle                      String?
  siteTagline                    String?
  galleryImageBasePath           String?
  storageProvider                String?
  firebaseStorageBucket          String?
  activeThemeName                String?
  themes                         Json?
  platformPublicIdMasks          Json?
  homepageSections               Json?
  mentalTriggerSettings          Json?
  sectionBadgeVisibility         Json?
  mapSettings                    Json?
  searchPaginationType           String?
  searchItemsPerPage             Int?
  searchLoadMoreCount            Int?
  showCountdownOnLotDetail       Boolean?
  showCountdownOnCards           Boolean?
  showRelatedLotsOnLotDetail     Boolean?
  relatedLotsCount               Int?
  defaultUrgencyTimerHours       Int?
  variableIncrementTable         Json?
  biddingSettings                Json?
  paymentGatewaySettings         Json?
  defaultListItemsPerPage        Int?
  updatedAt                      DateTime?              @updatedAt @db.DateTime(3)
}

model Role {
  id             String         @id @default(uuid())
  name           String         @unique @db.VarChar(50)
  nameNormalized String         @unique @db.VarChar(50)
  description    String?        @db.VarChar(255)
  permissions    Json
  createdAt      DateTime       @default(now()) @db.DateTime(3)
  updatedAt      DateTime       @updatedAt @db.DateTime(3)
  users          UsersOnRoles[]
}

model State {
  id        String             @id @default(uuid())
  name      String             @db.VarChar(100)
  uf        String             @unique @db.VarChar(2)
  slug      String             @unique @db.VarChar(100)
  cities    City[]
  districts JudicialDistrict[]
  auctions  Auction[]

  @@index([uf])
}

model City {
  id      String   @id @default(uuid())
  name    String   @db.VarChar(150)
  slug    String   @db.VarChar(150)
  stateId String
  stateUf String?  @db.VarChar(2)
  ibgeCode String?  @unique @db.VarChar(10)
  state   State    @relation(fields: [stateId], references: [id])
  lots    Lot[]
  auctions  Auction[]

  @@index([stateId])
}

model LotCategory {
  id                   String        @id @default(uuid())
  name                 String        @unique @db.VarChar(191)
  slug                 String        @unique @db.VarChar(191)
  description          String?       @db.VarChar(500)
  hasSubcategories     Boolean?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime      @default(now()) @db.DateTime(3)
  updatedAt            DateTime      @updatedAt @db.DateTime(3)
  subcategories        Subcategory[]
  lots                 Lot[]
  bens                 Bem[]
  auctions             Auction[]
  directSaleOffers     DirectSaleOffer[]
}

model Subcategory {
  id               String      @id @default(uuid())
  name             String
  slug             String
  parentCategoryId String
  description      String?     @db.VarChar(500)
  displayOrder     Int         @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id])
  lots             Lot[]
  bens             Bem[]
}

model DocumentType {
  id          String         @id @default(uuid())
  name        String         @db.VarChar(150)
  description String?        @db.VarChar(255)
  isRequired  Boolean        @default(true)
  appliesTo   String? // e.g., 'PHYSICAL,LEGAL'
  documents   UserDocument[]
}

model Court {
  id                String             @id @default(uuid())
  name              String             @db.VarChar(150)
  slug              String?            @db.VarChar(150)
  stateUf           String?            @db.VarChar(2)
  website           String?
  createdAt         DateTime           @default(now()) @db.DateTime(3)
  updatedAt         DateTime           @updatedAt @db.DateTime(3)
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]  @relation("ProcessCourt")
  auctions          Auction[]          @relation("AuctionCourt")
}

model User {
  id                       String                  @id @default(uuid())
  email                    String                  @unique
  password                 String?
  fullName                 String?
  habilitationStatus     UserHabilitationStatus  @default(PENDING_DOCUMENTS)
  accountType              AccountType             @default(PHYSICAL)
  avatarUrl                String?
  dataAiHint               String?
  badges                   Json?
  cpf                      String?                 @unique
  rgNumber                 String?
  rgIssuer                 String?
  rgIssueDate              DateTime?               @db.DateTime(3)
  rgState                  String?
  dateOfBirth              DateTime?               @db.DateTime(3)
  cellPhone                String?
  homePhone                String?
  gender                   String?
  profession               String?
  nationality              String?
  maritalStatus            String?
  propertyRegime           String?
  spouseName               String?
  spouseCpf                String?
  zipCode                  String?
  street                   String?
  number                   String?
  complement               String?
  neighborhood             String?
  city                     String?
  state                    String?
  optInMarketing           Boolean?                @default(false)
  razaoSocial              String?
  cnpj                     String?                 @unique
  inscricaoEstadual        String?
  website                  String?
  responsibleName          String?
  responsibleCpf           String?
  createdAt                DateTime                @default(now()) @db.DateTime(3)
  updatedAt                DateTime                @updatedAt @db.DateTime(3)
  sellerId                 String?                 @unique
  seller                   Seller?                 @relation("SellerUser", fields: [sellerId], references: [id], onDelete: SetNull)
  roles                    UsersOnRoles[]
  bids                     Bid[]
  wins                     UserWin[]
  documents                UserDocument[]
  notifications            Notification[]
  habilitations            AuctionHabilitation[]
  maxBids                  UserLotMaxBid[]
  uploadedMedia            MediaItem[]             @relation("UploadedBy")
  auctioneer               Auctioneer?
}

model Auctioneer {
  id                   String    @id @default(uuid())
  publicId             String?   @unique @db.VarChar(100)
  slug                 String?   @unique @db.VarChar(150)
  name                 String    @db.VarChar(150)
  registrationNumber   String?   @db.VarChar(50)
  contactName          String?   @db.VarChar(150)
  email                String?   @db.VarChar(150)
  phone                String?   @db.VarChar(20)
  address              String?   @db.VarChar(200)
  city                 String?   @db.VarChar(100)
  state                String?   @db.VarChar(50)
  zipCode              String?   @db.VarChar(10)
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?   @db.Text
  userId               String?   @unique
  createdAt            DateTime  @default(now()) @db.DateTime(3)
  updatedAt            DateTime  @updatedAt @db.DateTime(3)
  user                 User?     @relation(fields: [userId], references: [id])
  auctions             Auction[]
  lots                 Lot[]
}

model Auction {
  id                             String                 @id @default(uuid())
  publicId                       String?                @unique @db.VarChar(100)
  slug                           String?                @unique @db.VarChar(255)
  title                          String                 @db.VarChar(255)
  description                    String?                @db.Text
  status                         AuctionStatus          @default(RASCUNHO)
  auctionDate                    DateTime?              @db.DateTime(3)
  endDate                        DateTime?              @db.DateTime(3)
  auctioneerId                   String
  sellerId                       String
  categoryId                     String?
  auctionType                    AuctionType?
  auctionMethod                  AuctionMethod?         @default(STANDARD)
  participation                  AuctionParticipation?  @default(ONLINE)
  imageUrl                       String?
  imageMediaId                   String?
  dataAiHint                     String?
  documentsUrl                   String?
  address                        String?
  zipCode                        String?
  latitude                       Float?
  longitude                      Float?
  visits                         Int?                   @default(0)
  totalLots                      Int?                   @default(0)
  initialOffer                   Decimal?               @db.Decimal(15, 2)
  isFavorite                     Boolean?               @default(false)
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  sellingBranch                  String?                @db.VarChar(100)
  automaticBiddingEnabled        Boolean                @default(false)
  allowInstallmentBids           Boolean                @default(true)
  silentBiddingEnabled           Boolean                @default(false)
  allowMultipleBidsPerUser       Boolean                @default(true)
  softCloseEnabled               Boolean                @default(false)
  softCloseMinutes               Int?                   @default(2)
  estimatedRevenue               Decimal?               @db.Decimal(15, 2)
  achievedRevenue                Decimal?               @db.Decimal(15, 2)
  totalHabilitatedUsers          Int?                   @default(0)
  isFeaturedOnMarketplace        Boolean                @default(false)
  marketplaceAnnouncementTitle   String?                @db.VarChar(150)
  decrementAmount                Decimal?               @db.Decimal(15, 2)
  decrementIntervalSeconds       Int?
  floorPrice                     Decimal?               @db.Decimal(15, 2)
  autoRelistSettings             Json?
  judicialProcessId              String?
  courtId                        String?
  districtId                     String?
  branchId                       String?
  cityId                         String?
  stateId                        String?
  createdAt                      DateTime               @default(now()) @db.DateTime(3)
  updatedAt                      DateTime               @updatedAt @db.DateTime(3)
  auctioneer                     Auctioneer             @relation(fields: [auctioneerId], references: [id])
  seller                         Seller                 @relation(fields: [sellerId], references: [id])
  category                       LotCategory?           @relation(fields: [categoryId], references: [id])
  judicialProcess                JudicialProcess?       @relation("ProcessAuctions", fields: [judicialProcessId], references: [id])
  court                          Court?                 @relation("AuctionCourt", fields: [courtId], references: [id])
  district                       JudicialDistrict?      @relation("AuctionDistrict", fields: [districtId], references: [id])
  branch                         JudicialBranch?        @relation("AuctionBranch", fields: [branchId], references: [id])
  city                           City?                  @relation(fields: [cityId], references: [id])
  state                          State?                 @relation(fields: [stateId], references: [id])
  lots                           Lot[]
  auctionStages                  AuctionStage[]
  bids                           Bid[]
  habilitations                  AuctionHabilitation[]
}

model User {
  id                       String                  @id @default(uuid())
  email                    String                  @unique
  password                 String?
  fullName                 String?
  habilitationStatus     UserHabilitationStatus  @default(PENDING_DOCUMENTS)
  accountType              AccountType             @default(PHYSICAL)
  avatarUrl                String?
  dataAiHint               String?
  badges                   Json?
  cpf                      String?                 @unique
  rgNumber                 String?
  rgIssuer                 String?
  rgIssueDate              DateTime?               @db.DateTime(3)
  rgState                  String?
  dateOfBirth              DateTime?               @db.DateTime(3)
  cellPhone                String?
  homePhone                String?
  gender                   String?
  profession               String?
  nationality              String?
  maritalStatus            String?
  propertyRegime           String?
  spouseName               String?
  spouseCpf                String?
  zipCode                  String?
  street                   String?
  number                   String?
  complement               String?
  neighborhood             String?
  city                     String?
  state                    String?
  optInMarketing           Boolean?                @default(false)
  razaoSocial              String?
  cnpj                     String?                 @unique
  inscricaoEstadual        String?
  website                  String?
  responsibleName          String?
  responsibleCpf           String?
  createdAt                DateTime                @default(now()) @db.DateTime(3)
  updatedAt                DateTime                @updatedAt @db.DateTime(3)
  sellerId                 String?                 @unique
  seller                   Seller?                 @relation("SellerUser", fields: [sellerId], references: [id], onDelete: SetNull)
  roles                    UsersOnRoles[]
  bids                     Bid[]
  wins                     UserWin[]               @relation("UserWins")
  documents                UserDocument[]
  notifications            Notification[]
  habilitations            AuctionHabilitation[]
  maxBids                  UserLotMaxBid[]
  uploadedMedia            MediaItem[]             @relation("UploadedBy")
  auctioneer               Auctioneer?
  wonLots                  Lot[]                   @relation("WonLots")
}

model Seller {
  id                   String            @id @default(uuid())
  publicId             String?           @unique @db.VarChar(191)
  slug                 String?           @unique @db.VarChar(150)
  name                 String            @unique @db.VarChar(150)
  contactName          String?           @db.VarChar(150)
  email                String?           @db.VarChar(150)
  phone                String?           @db.VarChar(20)
  address              String?           @db.VarChar(200)
  city                 String?           @db.VarChar(100)
  state                String?           @db.VarChar(50)
  zipCode              String?           @db.VarChar(10)
  website              String?
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?           @db.Text
  userId               String?           @unique
  isJudicial           Boolean           @default(false)
  judicialBranchId     String?           @unique
  createdAt            DateTime          @default(now()) @db.DateTime(3)
  updatedAt            DateTime          @updatedAt @db.DateTime(3)
  user                 User?             @relation("SellerUser", fields: [userId], references: [id], onDelete: SetNull)
  judicialBranch       JudicialBranch?   @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  auctions             Auction[]
  lots                 Lot[]
  bens                 Bem[]
  directSaleOffers     DirectSaleOffer[]
  judicialProcesses    JudicialProcess[]
}

model Lot {
  id                         String                   @id @default(uuid())
  publicId                   String?                  @unique @db.VarChar(100)
  auctionId                  String
  slug                       String?                  @db.VarChar(255)
  number                     String?                  @db.VarChar(20)
  title                      String                   @db.VarChar(255)
  description                String?                  @db.Text
  price                      Decimal                  @db.Decimal(15, 2)
  initialPrice               Decimal?                 @db.Decimal(15, 2)
  secondInitialPrice         Decimal?                 @db.Decimal(15, 2)
  bidIncrementStep           Decimal?                 @db.Decimal(10, 2)
  status                     LotStatus                @default(EM_BREVE)
  bidsCount                  Int?                     @default(0)
  views                      Int?                     @default(0)
  isFeatured                 Boolean?                 @default(false)
  isExclusive                Boolean?                 @default(false)
  discountPercentage         Int?
  additionalTriggers         Json?
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  type                       String                   @db.VarChar(100)
  categoryId                 String?
  subcategoryId              String?
  auctionName                String?                  @db.VarChar(255)
  sellerId                   String?
  sellerName                 String?                  @db.VarChar(150)
  auctioneerId               String?
  cityId                     String?
  stateId                    String?
  cityName                   String?                  @db.VarChar(100)
  stateUf                    String?                  @db.VarChar(2)
  latitude                   Decimal?                 @db.Decimal(10, 8)
  longitude                  Decimal?                 @db.Decimal(11, 8)
  mapAddress                 String?                  @db.VarChar(255)
  mapEmbedUrl                String?                  @db.VarChar(500)
  mapStaticImageUrl          String?
  endDate                    DateTime?                @db.DateTime(3)
  auctionDate                DateTime?                @db.DateTime(3)
  lotSpecificAuctionDate     DateTime?                @db.DateTime(3)
  secondAuctionDate          DateTime?                @db.DateTime(3)
  condition                  String?                  @db.VarChar(100)
  dataAiHint                 String?                  @db.VarChar(100)
  winnerId                   String?
  winningBidTermUrl          String?
  allowInstallmentBids       Boolean?                 @default(false)
  isRelisted                 Boolean                  @default(false)
  relistCount                Int                      @default(0)
  originalLotId              String?                  @unique
  inheritedMediaFromBemId    String?
  createdAt                  DateTime                 @default(now()) @db.DateTime(3)
  updatedAt                  DateTime                 @updatedAt @db.DateTime(3)
  auction                    Auction                  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                   LotCategory?             @relation(fields: [categoryId], references: [id])
  subcategory                Subcategory?             @relation(fields: [subcategoryId], references: [id])
  seller                     Seller?                  @relation(fields: [sellerId], references: [id])
  auctioneer                 Auctioneer?              @relation(fields: [auctioneerId], references: [id])
  city                       City?                    @relation(fields: [cityId], references: [id])
  state                      State?                   @relation(fields: [stateId], references: [id])
  winner                     User?                    @relation("WonLots", fields: [winnerId], references: [id], onDelete: SetNull)
  originalLot                Lot?                     @relation("RelistHistory", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot                Lot[]                    @relation("RelistHistory")
  bens                       LotBens[]
  stageDetails               LotAuctionStageDetails[]
  bids                       Bid[]
  wins                       UserWin[]
  maxBids                    UserLotMaxBid[]
}

model Court {
  id                String             @id @default(uuid())
  name              String             @db.VarChar(150)
  slug              String?            @db.VarChar(150)
  stateId           String?
  stateUf           String?            @db.VarChar(2)
  website           String?
  createdAt         DateTime           @default(now()) @db.DateTime(3)
  updatedAt         DateTime           @updatedAt @db.DateTime(3)
  state             State?             @relation(fields: [stateId], references: [id])
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]  @relation("ProcessCourt")
  auctions          Auction[]          @relation("AuctionCourt")

  @@index([stateId])
}

model JudicialDistrict {
  id                String             @id @default(uuid())
  name              String             @db.VarChar(150)
  slug              String             @unique @db.VarChar(150)
  courtId           String?
  stateId           String
  zipCode           String?            @db.VarChar(10)
  createdAt         DateTime           @default(now()) @db.DateTime(3)
  updatedAt         DateTime           @updatedAt @db.DateTime(3)
  court             Court?             @relation(fields: [courtId], references: [id])
  state             State              @relation(fields: [stateId], references: [id])
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]  @relation("ProcessDistrict")
  auctions          Auction[]          @relation("AuctionDistrict")

  @@index([courtId])
  @@index([stateId])
}

model JudicialBranch {
  id                String            @id @default(uuid())
  name              String            @db.VarChar(150)
  slug              String            @unique @db.VarChar(150)
  districtId        String?
  contactName       String?           @db.VarChar(150)
  phone             String?           @db.VarChar(20)
  email             String?           @db.VarChar(150)
  createdAt         DateTime          @default(now()) @db.DateTime(3)
  updatedAt         DateTime          @updatedAt @db.DateTime(3)
  district          JudicialDistrict? @relation(fields: [districtId], references: [id])
  sellers           Seller[]
  judicialProcesses JudicialProcess[] @relation("ProcessBranch")
  auctions          Auction[]         @relation("AuctionBranch")

  @@index([districtId])
}

model JudicialProcess {
  id              String           @id @default(uuid())
  publicId        String?          @unique @db.VarChar(191)
  processNumber   String           @db.VarChar(100)
  isElectronic    Boolean          @default(true)
  courtId         String?
  districtId      String?
  branchId        String?
  sellerId        String?
  createdAt       DateTime         @default(now()) @db.DateTime(3)
  updatedAt       DateTime         @updatedAt @db.DateTime(3)
  court           Court?           @relation("ProcessCourt", fields: [courtId], references: [id])
  district        JudicialDistrict?@relation("ProcessDistrict", fields: [districtId], references: [id])
  branch          JudicialBranch?  @relation("ProcessBranch", fields: [branchId], references: [id])
  seller          Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  parties         JudicialParty[]
  bens            Bem[]
  auctions        Auction[]
}

model JudicialParty {
  id             String           @id @default(uuid())
  processId      String
  name           String
  documentNumber String?          @db.VarChar(50)
  partyType      ProcessPartyType
  process        JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@index([processId])
}

model UserDocument {
  id              String             @id @default(uuid())
  userId          String
  documentTypeId  String
  status          UserDocumentStatus @default(PENDING_ANALYSIS)
  fileUrl         String
  fileName        String?
  rejectionReason String?            @db.Text
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType       @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

model InstallmentPayment {
  id                String        @id @default(uuid())
  userWinId         String
  installmentNumber Int
  amount            Decimal       @db.Decimal(15, 2)
  dueDate           DateTime      @db.DateTime(3)
  status            PaymentStatus @default(PENDENTE)
  paymentDate       DateTime?     @db.DateTime(3)
  paymentMethod     String?
  transactionId     String?
  win               UserWin       @relation(fields: [userWinId], references: [id], onDelete: Cascade)

  @@index([userWinId])
}

model UserWin {
  id               String                 @id @default(uuid())
  lotId            String                 @unique
  userId           String
  winningBidAmount Decimal                @db.Decimal(15, 2)
  winDate          DateTime               @default(now()) @db.DateTime(3)
  paymentStatus    PaymentStatus          @default(PENDENTE)
  invoiceUrl       String?
  lot              Lot                    @relation(fields: [lotId], references: [id])
  user             User                   @relation("UserWins", fields: [userId], references: [id])
  installments     InstallmentPayment[]

  @@index([userId])
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @db.DateTime(3)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
  @@index([userId])
  @@index([lotId])
}

model MediaItem {
  id                  String           @id @default(uuid())
  fileName            String
  storagePath         String
  title               String?
  altText             String?
  caption             String?          @db.VarChar(500)
  description         String?          @db.Text
  mimeType            String           @db.VarChar(100)
  sizeBytes           Int?
  urlOriginal         String
  urlThumbnail        String?
  urlMedium           String?
  urlLarge            String?
  linkedLotIds        Json?
  judicialProcessId   String?
  dataAiHint          String?          @db.VarChar(100)
  uploadedByUserId    String
  uploadedAt          DateTime         @default(now()) @db.DateTime(3)
  uploadedBy          User             @relation("UploadedBy", fields: [uploadedByUserId], references: [id])
  judicialProcess     JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)

  @@index([uploadedByUserId])
  @@index([judicialProcessId])
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(150)
  email     String   @db.VarChar(150)
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now()) @db.DateTime(3)
}

model DocumentTemplate {
  id        String               @id @default(uuid())
  name      String               @db.VarChar(150)
  type      DocumentTemplateType
  content   String?              @db.Text
  createdAt DateTime             @default(now()) @db.DateTime(3)
  updatedAt DateTime             @updatedAt @db.DateTime(3)
}

model AuctionHabilitation {
  id        String   @id @default(uuid())
  userId    String
  auctionId String
  createdAt DateTime @default(now()) @db.DateTime(3)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)

  @@unique([userId, auctionId])
  @@index([auctionId])
}

model Bid {
  id            String   @id @default(uuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now()) @db.DateTime(3)
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([bidderId])
}

model LotBens {
  lotId String
  bemId String
  lot   Lot    @relation(fields: [lotId], references: [id])
  bem   Bem    @relation(fields: [bemId], references: [id])

  @@id([lotId, bemId])
  @@index([bemId])
}

model LotAuctionStageDetails {
  id           String   @id @default(uuid())
  lotId        String
  stageId      String
  initialBid   Decimal? @db.Decimal(15, 2)
  bidIncrement Decimal? @db.Decimal(10, 2)
  lot          Lot      @relation(fields: [lotId], references: [id])
  stage        AuctionStage @relation(fields: [stageId], references: [id])

  @@unique([lotId, stageId])
  @@index([stageId])
}

model AuctionStage {
  id              String                   @id @default(uuid())
  name            String
  startDate       DateTime                 @db.DateTime(3)
  endDate         DateTime                 @db.DateTime(3)
  evaluationValue Decimal?                 @db.Decimal(15, 2)
  auctionId       String
  auction         Auction                  @relation(fields: [auctionId], references: [id])
  lotDetails      LotAuctionStageDetails[]

  @@index([auctionId])
}

model UsersOnRoles {
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String
  user       User     @relation(fields: [userId], references: [id])
  role       Role     @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@index([roleId])
}

model VehicleMake {
  id      String         @id @default(uuid())
  name    String         @unique
  slug    String         @unique
  models  VehicleModel[]
}

model VehicleModel {
  id     String      @id @default(uuid())
  name   String
  slug   String
  makeId String
  make   VehicleMake @relation(fields: [makeId], references: [id])

  @@unique([name, makeId])
  @@index([makeId])
}

model Bem {
  id                         String   @id @default(uuid())
  publicId                   String   @unique
  title                      String
  description                String?  @db.Text
  status                     BemStatus @default(DISPONIVEL)
  categoryId                 String
  subcategoryId              String?
  judicialProcessId          String?
  sellerId                   String?
  evaluationValue            Decimal? @db.Decimal(15, 2)
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Decimal? @db.Decimal(10, 8)
  longitude                  Decimal? @db.Decimal(11, 8)
  plate                      String?  @unique
  make                       String?
  model                      String?
  version                    String?
  year                       Int?
  modelYear                  Int?
  mileage                    Int?
  color                      String?
  fuelType                   String?
  transmissionType           String?
  bodyType                   String?
  vin                        String?  @unique
  renavam                    String?  @unique
  enginePower                String?
  numberOfDoors              Int?
  vehicleOptions             String?  @db.Text
  detranStatus               String?
  debts                      String?  @db.Text
  runningCondition           String?
  bodyCondition              String?
  tiresCondition             String?
  hasKey                     Boolean?
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Decimal? @db.Decimal(15, 2)
  builtArea                  Decimal? @db.Decimal(15, 2)
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?  @db.Text
  infrastructure             String?  @db.Text
  condoDetails               String?  @db.Text
  improvements               String?  @db.Text
  topography                 String?
  liensAndEncumbrances       String?  @db.Text
  propertyDebts              String?  @db.Text
  unregisteredRecords        String?  @db.Text
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String?  @db.Text
  includedAccessories        String?  @db.Text
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String?  @db.Text
  applianceCapacity          String?
  voltage                    String?
  applianceType              String?
  additionalFunctions        String?
  hoursUsed                  Int?
  engineType                 String?
  capacityOrPower            String?
  maintenanceHistory         String?  @db.Text
  installationLocation       String?
  compliesWithNR             String?
  operatingLicenses          String?
  breed                      String?
  age                        String?
  sex                        Sexo?
  weight                     String?
  individualId               String?
  purpose                    String?
  sanitaryCondition          String?
  vaccinationStatus          String?
  lineage                    String?
  isPregnant                 Boolean?
  specialSkills              String?
  gtaDocument                String?
  breedRegistryDocument      String?
  furnitureType              String?
  material                   String?
  style                      String?
  dimensions                 String?
  pieceCount                 Int?
  jewelryType                String?
  metal                      String?
  gemstones                  String?
  totalWeight                String?
  jewelrySize                String?
  authenticityCertificate    String?
  workType                   String?
  artist                     String?
  period                     String?
  technique                  String?
  provenance                 String?  @db.Text
  boatType                   String?
  boatLength                 String?
  hullMaterial               String?
  onboardEquipment           String?  @db.Text
  productName                String?
  quantity                   String?
  packagingType              String?
  expirationDate             DateTime? @db.DateTime(3)
  storageConditions          String?
  preciousMetalType          String?
  purity                     String?
  forestGoodsType            String?
  volumeOrQuantity           String?
  species                    String?
  dofNumber                  String?
  createdAt                  DateTime @default(now()) @db.DateTime(3)
  updatedAt                  DateTime @updatedAt @db.DateTime(3)

  category        LotCategory?     @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory?     @relation(fields: [subcategoryId], references: [id])
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  lots            LotBens[]

  @@index([categoryId])
  @@index([subcategoryId])
  @@index([judicialProcessId])
  @@index([sellerId])
}
