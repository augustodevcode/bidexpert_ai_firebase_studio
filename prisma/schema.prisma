// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// =================================================================
// AUTHENTICATION & USERS
// =================================================================

model User {
  id                  String   @id @default(uuid())
  email               String   @unique
  password            String
  fullName            String?
  roleId              String?
  sellerId            String?  @unique
  auctioneerId        String?  @unique
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         UserAccountType?
  cpf                 String?  @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  status              String?  @default("ATIVO")
  optInMarketing      Boolean? @default(false)
  avatarUrl           String?
  dataAiHint          String?
  activeBids          Int?
  auctionsWon         Int?
  itemsSold           Int?
  badges              String? // Comma-separated list of badge keys
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relationships
  role                Role?             @relation(fields: [roleId], references: [id])
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  reviews             Review[]
  questions           LotQuestion[]
  maxBids             UserLotMaxBid[]
  notifications       Notification[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  blogPosts           BlogPost[]
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  roles       Role[]
}

model Role {
  id              String       @id @default(uuid())
  name            String
  name_normalized String       @unique
  description     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  users           User[]
  permissions     Permission[]
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserAccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

// =================================================================
// DOCUMENTS
// =================================================================

model UserDocument {
  id              String             @id @default(uuid())
  userId          String
  documentTypeId  String
  fileUrl         String?
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  rejectionReason String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  // Relationships
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType DocumentType @relation(fields: [documentTypeId], references: [id])

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id             String         @id @default(uuid())
  name           String
  description    String?
  isRequired     Boolean
  appliesTo      String?        // e.g., "PHYSICAL,LEGAL"
  allowedFormats String?        // e.g., "pdf,jpg,png"
  displayOrder   Int            @default(0)
  userDocuments  UserDocument[]
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_ANALYSIS
}

// =================================================================
// AUCTIONS, LOTS, BIDS, WINS
// =================================================================

model Auction {
  id                             String        @id @default(uuid())
  publicId                       String        @unique @default(uuid())
  title                          String
  fullTitle                      String?
  description                    String?       @db.Text
  status                         AuctionStatus @default(RASCUNHO)
  auctionType                    String?
  categoryId                     String
  auctioneerId                   String
  sellerId                       String?
  judicialProcessId              String?       @unique // An auction can only be linked to one process
  auctionDate                    DateTime
  endDate                        DateTime?
  imageUrl                       String?
  imageMediaId                   String?
  dataAiHint                     String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  visits                         Int?          @default(0)
  totalLots                      Int?          @default(0)
  initialOffer                   Float?
  isFavorite                     Boolean?
  bidsCount                      Int?
  sellingBranch                  String?
  vehicleLocation                String?
  city                           String?
  state                          String?
  automaticBiddingEnabled        Boolean?      @default(false)
  allowInstallmentBids           Boolean?      @default(false)
  softCloseEnabled               Boolean?      @default(false)
  softCloseMinutes               Int?          @default(2)
  estimatedRevenue               Float?
  achievedRevenue                Float?        @default(0)
  totalHabilitatedUsers          Int?          @default(0)
  isFeaturedOnMarketplace        Boolean?      @default(false)
  marketplaceAnnouncementTitle   String?
  additionalTriggers             String?
  decrementAmount                Float?
  decrementIntervalSeconds       Int?
  floorPrice                     Float?
  silentBiddingEnabled           Boolean?      @default(false)
  allowMultipleBidsPerUser       Boolean?      @default(true)
  autoRelistSettings             Json?
  auctionStages                  Json?
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt

  // Relationships
  category        LotCategory      @relation(fields: [categoryId], references: [id])
  auctioneer      Auctioneer       @relation(fields: [auctioneerId], references: [id])
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  image           MediaItem?       @relation("AuctionImage", fields: [imageMediaId], references: [id], onDelete: SetNull)

  bids Bid[]
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

model Lot {
  id                         String     @id @default(uuid())
  publicId                   String     @unique @default(uuid())
  auctionId                  String
  number                     String?
  title                      String
  description                String?    @db.Text
  price                      Float
  initialPrice               Float?
  secondInitialPrice         Float?
  bidIncrementStep           Float?
  status                     LotStatus  @default(EM_BREVE)
  imageUrl                   String?
  imageMediaId               String?
  dataAiHint                 String?
  galleryImageUrls           Json?
  mediaItemIds               String[]
  bemIds                     String[]
  views                      Int?       @default(0)
  bidsCount                  Int?       @default(0)
  isFeatured                 Boolean?   @default(false)
  isExclusive                Boolean?   @default(false)
  discountPercentage         Float?
  additionalTriggers         String?
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?
  judicialProcessNumber      String?
  courtDistrict              String?
  courtName                  String?
  publicProcessUrl           String?
  propertyRegistrationNumber String?
  propertyLiens              String?    @db.Text
  knownDebts                 String?    @db.Text
  additionalDocumentsInfo    String?    @db.Text
  reservePrice               Float?
  evaluationValue            Float?
  debtAmount                 Float?
  itbiValue                  Float?
  endDate                    DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  categoryId                 String?
  subcategoryId              String?
  sellerId                   String?
  auctioneerId               String?
  winningBidTermUrl          String?
  stateId                    String?
  cityId                     String?
  createdAt                  DateTime   @default(now())
  updatedAt                  DateTime   @updatedAt

  // Relationships
  auction        Auction           @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category       LotCategory?      @relation(fields: [categoryId], references: [id])
  subcategory    Subcategory?      @relation(fields: [subcategoryId], references: [id])
  seller         Seller?           @relation(fields: [sellerId], references: [id])
  auctioneer     Auctioneer?       @relation(fields: [auctioneerId], references: [id])
  state          StateInfo?        @relation(fields: [stateId], references: [id])
  city           CityInfo?         @relation(fields: [cityId], references: [id])
  image          MediaItem?        @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  bens           Bem[]             @relation(references: [id])
  bids           Bid[]
  wins           UserWin[]
  reviews        Review[]
  questions      LotQuestion[]
  maxBids        UserLotMaxBid[]
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
  SUSPENSO
}

model Bid {
  id            String   @id @default(uuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())

  // Relationships
  lot     Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String        @id @default(uuid())
  lotId            String
  userId           String
  winningBidAmount Float
  winDate          DateTime      @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?

  // Relationships
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

// =================================================================
// PROFILES (SELLERS & AUCTIONEERS)
// =================================================================

model Seller {
  id                         String   @id @default(uuid())
  publicId                   String   @unique
  name                       String
  slug                       String   @unique
  isJudicial                 Boolean? @default(false)
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  logoUrl                    String?
  logoMediaId                String?  @unique
  dataAiHintLogo             String?
  description                String?
  userId                     String?  @unique
  judicialBranchId           String?  @unique
  memberSince                DateTime?
  rating                     Float?
  activeLotsCount            Int?     @default(0)
  totalSalesValue            Float?   @default(0)
  auctionsFacilitatedCount   Int?     @default(0)
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  // Relationships
  user             User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  logo             MediaItem?         @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  judicialBranch   JudicialBranch?    @relation(fields: [judicialBranchId], references: [id])
  auctions         Auction[]
  lots             Lot[]
  bens             Bem[]
  directSaleOffers DirectSaleOffer[]
}

model Auctioneer {
  id                   String   @id @default(uuid())
  publicId             String   @unique
  name                 String
  slug                 String   @unique
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?
  logoMediaId          String?  @unique
  dataAiHintLogo       String?
  description          String?
  userId               String?  @unique
  memberSince          DateTime?
  rating               Float?
  auctionsConductedCount Int?     @default(0)
  totalValueSold       Float?   @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relationships
  user     User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  logo     MediaItem? @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  auctions Auction[]
  lots     Lot[]
}

// =================================================================
// JUDICIAL ENTITIES
// =================================================================

model JudicialProcess {
  id            String   @id @default(uuid())
  publicId      String   @unique @default(uuid())
  processNumber String   @unique
  isElectronic  Boolean? @default(true)
  courtId       String
  districtId    String
  branchId      String
  sellerId      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  court    Court            @relation(fields: [courtId], references: [id])
  district JudicialDistrict @relation(fields: [districtId], references: [id])
  branch   JudicialBranch   @relation(fields: [branchId], references: [id])
  seller   Seller?          @relation(fields: [sellerId], references: [id])
  parties  ProcessParty[]
  bens     Bem[]
  auction  Auction?
}

model ProcessParty {
  id             String         @id @default(uuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  process        JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)
  @@unique([processId, name, partyType])
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

// =================================================================
// ASSETS (BEM)
// =================================================================

model Bem {
  id                         String   @id @default(uuid())
  publicId                   String   @unique @default(uuid())
  title                      String
  description                String?  @db.Text
  status                     BemStatus @default(DISPONIVEL)
  categoryId                 String?
  subcategoryId              String?
  judicialProcessId          String?
  sellerId                   String?
  evaluationValue            Float?
  imageUrl                   String?
  imageMediaId               String?  @unique
  galleryImageUrls           Json?
  mediaItemIds               String[]
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  // Vehicle specific fields
  plate                String?
  make                 String?
  model                String?
  version              String?
  year                 Int?
  modelYear            Int?
  mileage              Int?
  color                String?
  fuelType             String?
  transmissionType     String?
  bodyType             String?
  vin                  String?
  renavam              String?
  enginePower          String?
  numberOfDoors        Int?
  vehicleOptions       String?
  detranStatus         String?
  debts                String?
  runningCondition     String?
  bodyCondition        String?
  tiresCondition       String?
  hasKey               Boolean?

  // Real Estate specific fields
  propertyType             String?
  propertyRegistrationNumber String?
  iptuNumber               String?
  isOccupied               Boolean?
  area                     Float?
  totalArea                Float?
  builtArea                Float?
  bedrooms                 Int?
  suites                   Int?
  bathrooms                Int?
  parkingSpaces            Int?
  condoDetails             String? @db.Text
  infrastructure           String? @db.Text
  finishes                 String? @db.Text
  improvements             String? @db.Text
  topography               String?
  zoningRestrictions       String?
  hasHabiteSe              Boolean?
  liensAndEncumbrances     String? @db.Text
  propertyDebts            String? @db.Text
  unregisteredRecords      String? @db.Text
  amenities                Json?

  // Electronics specific fields
  brand                String?
  serialNumber         String?
  itemCondition        String?
  specifications       String? @db.Text
  includedAccessories  String?
  batteryCondition     String?
  hasInvoice           Boolean?
  hasWarranty          Boolean?
  repairHistory        String?

  // Appliances specific fields
  applianceType       String?
  applianceCapacity   String?
  voltage             String?
  additionalFunctions String?

  // Machinery specific fields
  hoursUsed             Int?
  engineType            String?
  capacityOrPower       String?
  maintenanceHistory    String? @db.Text
  installationLocation  String?
  compliesWithNR        String?
  operatingLicenses     String?

  // Livestock specific fields
  breed                 String?
  age                   String?
  sex                   String?
  weight                String?
  individualId          String?
  purpose               String?
  sanitaryCondition     String?
  lineage               String?
  isPregnant            Boolean?
  specialSkills         String?
  gtaDocument           String?
  breedRegistryDocument String?

  // Furniture specific fields
  furnitureType String?
  material      String?
  style         String?
  dimensions    String?
  pieceCount    Int?

  // Jewelry specific fields
  jewelryType             String?
  metal                   String?
  gemstones               String?
  totalWeight             String?
  jewelrySize             String?
  authenticityCertificate String?

  // Art/Antiques specific fields
  workType   String?
  artist     String?
  period     String?
  technique  String?
  provenance String?

  // Boats specific fields
  boatType         String?
  boatLength       String?
  hullMaterial     String?
  onboardEquipment String?

  // Food specific fields
  productName       String?
  quantity          String?
  packagingType     String?
  expirationDate    DateTime?
  storageConditions String?

  // Metals/Gems specific fields
  preciousMetalType String?
  purity              String?

  // Forest Goods specific fields
  forestGoodsType  String?
  volumeOrQuantity String?
  species          String?
  dofNumber        String?

  // Relationships
  category        LotCategory?     @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory?     @relation(fields: [subcategoryId], references: [id])
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller          Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  image           MediaItem?       @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  lots            Lot[]            @relation(references: [id])
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

// =================================================================
// REFERENCE & CATEGORIZATION
// =================================================================

model LotCategory {
  id                   String   @id @default(uuid())
  name                 String
  slug                 String   @unique
  description          String?
  itemCount            Int?     @default(0)
  hasSubcategories     Boolean? @default(false)
  logoUrl              String?
  logoMediaId          String?  @unique
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?  @unique
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?  @unique
  dataAiHintCover      String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relationships
  logo           MediaItem?      @relation("CategoryLogo", fields: [logoMediaId], references: [id], onDelete: SetNull)
  coverImage     MediaItem?      @relation("CategoryCover", fields: [coverImageMediaId], references: [id], onDelete: SetNull)
  megaMenuImage  MediaItem?      @relation("CategoryMegaMenu", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull)
  lots           Lot[]
  bens           Bem[]
  subcategories  Subcategory[]
  directSaleOffers DirectSaleOffer[]
}

model Subcategory {
  id               String   @id @default(uuid())
  name             String
  slug             String   @unique
  description      String?
  parentCategoryId String
  itemCount        Int?     @default(0)
  displayOrder     Int?     @default(0)
  iconUrl          String?
  iconMediaId      String?  @unique
  dataAiHintIcon   String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  parentCategory LotCategory @relation(fields: [parentCategoryId], references: [id])
  lots           Lot[]
  bens           Bem[]
  icon           MediaItem?  @relation("SubcategoryIcon", fields: [iconMediaId], references: [id], onDelete: SetNull)
}

model StateInfo {
  id        String   @id @default(uuid())
  name      String
  uf        String   @unique
  slug      String   @unique
  cityCount Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  cities    CityInfo[]
  courts    Court[]
  districts JudicialDistrict[]
  lots      Lot[]
}

model CityInfo {
  id      String   @id @default(uuid())
  name    String
  slug    String
  stateId String
  stateUf String
  ibgeCode String?
  lotCount Int?    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  state StateInfo @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots  Lot[]
}

model Court {
  id        String             @id @default(uuid())
  name      String
  slug      String             @unique
  stateUf   String
  stateId   String?
  website   String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  districts JudicialDistrict[]
  processes JudicialProcess[]
  state     StateInfo?         @relation(fields: [stateId], references: [id])
}

model JudicialDistrict {
  id        String           @id @default(uuid())
  name      String
  slug      String           @unique
  courtId   String
  stateId   String
  zipCode   String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  court     Court            @relation(fields: [courtId], references: [id])
  state     StateInfo        @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]
}

model JudicialBranch {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  districtId  String
  contactName String?
  phone       String?
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  district  JudicialDistrict  @relation(fields: [districtId], references: [id])
  processes JudicialProcess[]
  seller    Seller?
}

// =================================================================
// MEDIA
// =================================================================

model MediaItem {
  id                      String        @id @default(uuid())
  fileName                String
  storagePath             String        @unique
  uploadedAt              DateTime      @default(now())
  uploadedBy              String?
  title                   String?
  altText                 String?
  caption                 String?
  description             String?
  mimeType                String
  sizeBytes               Int
  dimensions              Json?
  urlOriginal             String        @db.Text
  urlThumbnail            String?       @db.Text
  urlMedium               String?       @db.Text
  urlLarge                String?       @db.Text
  linkedLotIds            String[]
  dataAiHint              String?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt

  // Relationships
  lotAsImage                 Lot?              @relation("LotImage")
  auctionAsImage             Auction?          @relation("AuctionImage")
  sellerAsLogo               Seller?           @relation("SellerLogo")
  auctioneerAsLogo           Auctioneer?       @relation("AuctioneerLogo")
  categoryAsLogo             LotCategory?      @relation("CategoryLogo")
  categoryAsCover            LotCategory?      @relation("CategoryCover")
  categoryAsMegaMenu         LotCategory?      @relation("CategoryMegaMenu")
  bemAsImage                 Bem?              @relation("BemImage")
  subcategoryAsIcon          Subcategory?      @relation("SubcategoryIcon")
  directSaleOfferAsImage     DirectSaleOffer?  @relation("DirectSaleOfferImage")
}

// =================================================================
// PLATFORM & MISC
// =================================================================

model DirectSaleOffer {
  id                   String                @id @default(uuid())
  publicId             String                @unique @default(uuid())
  title                String
  description          String                @db.Text
  offerType            DirectSaleOfferType
  status               DirectSaleOfferStatus
  price                Float?
  minimumOfferPrice    Float?
  categoryId           String
  locationCity         String?
  locationState        String?
  sellerId             String
  imageUrl             String?
  imageMediaId         String?               @unique
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         String[]
  itemsIncluded        Json?
  tags                 String?
  views                Int?                  @default(0)
  proposalsCount       Int?                  @default(0)
  expiresAt            DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  // Relationships
  seller   Seller      @relation(fields: [sellerId], references: [id])
  category LotCategory @relation(fields: [categoryId], references: [id])
  image    MediaItem?  @relation("DirectSaleOfferImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
}


model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BlogPost {
    id          String   @id @default(uuid())
    title       String
    content     String   @db.Text
    authorId    String
    publishedAt DateTime?
    tags        String?  // Comma-separated
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    author User @relation(fields: [authorId], references: [id])
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Review {
    id              String @id @default(uuid())
    lotId           String
    auctionId       String
    userId          String
    userDisplayName String
    rating          Int
    comment         String @db.Text
    createdAt       DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model LotQuestion {
    id              String   @id @default(uuid())
    lotId           String
    auctionId       String
    userId          String
    userDisplayName String
    questionText    String   @db.Text
    answerText      String?  @db.Text
    answeredAt      DateTime?
    answeredByUserId String?
    answeredByUserDisplayName String?
    isPublic        Boolean  @default(true)
    createdAt       DateTime @default(now())
    
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}


model PlatformSettings {
  id                        String                @id @default("global")
  siteTitle                 String?
  siteTagline               String?
  galleryImageBasePath      String?
  storageProvider           StorageProviderType?  @default(local)
  firebaseStorageBucket     String?
  activeThemeName           String?
  themes                    Json?
  platformPublicIdMasks     Json?
  homepageSections          Json?
  mentalTriggerSettings     Json?
  sectionBadgeVisibility    Json?
  mapSettings               Json?
  searchPaginationType      SearchPaginationType? @default(loadMore)
  searchItemsPerPage        Int?                  @default(12)
  searchLoadMoreCount       Int?                  @default(12)
  showCountdownOnLotDetail  Boolean?              @default(true)
  showCountdownOnCards      Boolean?              @default(true)
  showRelatedLotsOnLotDetail Boolean?              @default(true)
  relatedLotsCount          Int?                  @default(5)
  defaultUrgencyTimerHours  Int?
  variableIncrementTable    Json?
  biddingSettings           Json?
  defaultListItemsPerPage   Int?                  @default(10)
  updatedAt                 DateTime              @updatedAt
}

enum StorageProviderType {
  local
  firebase
}

enum SearchPaginationType {
  loadMore
  numberedPages
}
