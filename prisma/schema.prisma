// prisma/schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// ENUMS (Tipos personalizados)
// =================================================================

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RELISTADO
  CANCELADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
  ATRASADO
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

// =================================================================
// MODELS
// =================================================================

model User {
  id                  String                 @id @default(cuid())
  email               String                 @unique
  password            String?
  fullName            String?
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType            @default(PHYSICAL)
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  roles               UsersOnRoles[]
  bids                Bid[]
  wins                UserWin[]
  documents           UserDocument[]
  mediaItems          MediaItem[]
  maxBids             UserLotMaxBid[]
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  habilitations       AuctionHabilitation[]
  askedQuestions      LotQuestion[]
  answeredQuestions   LotQuestion[]          @relation("AnsweredBy")
  notifications       Notification[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model Role {
  id             String         @id @default(cuid())
  name           String         @unique
  nameNormalized String         @unique
  description    String?
  permissions    String[]
  users          UsersOnRoles[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model StateInfo {
  id        String             @id @default(cuid())
  name      String
  uf        String             @unique
  slug      String             @unique
  cities    CityInfo[]
  courts    Court[]
  districts JudicialDistrict[]
  auctions  Auction[]
  lots      Lot[]

  @@map("states")
}

model CityInfo {
  id       String    @id @default(cuid())
  name     String
  slug     String?
  state    StateInfo @relation(fields: [stateId], references: [id])
  stateId  String
  stateUf  String?
  ibgeCode String?   @unique
  auctions Auction[]
  lots     Lot[]

  @@map("cities")
}

model LotCategory {
  id                 String              @id @default(cuid())
  name               String              @unique
  slug               String              @unique
  description        String?             @db.VarChar(500)
  hasSubcategories   Boolean             @default(false)
  logoUrl            String?
  logoMediaId        String?
  dataAiHintIcon     String?
  coverImageUrl      String?
  coverImageMediaId  String?
  dataAiHintCover    String?
  megaMenuImageUrl   String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  lots               Lot[]
  subcategories      Subcategory[]
  bens               Bem[]
  auctions           Auction[]
  directSaleOffers   DirectSaleOffer[]
}

model Subcategory {
  id               String      @id @default(cuid())
  name             String
  slug             String
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id])
  parentCategoryId String
  description      String?     @db.VarChar(500)
  displayOrder     Int         @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  lots             Lot[]
  bens             Bem[]

  @@unique([parentCategoryId, name])
}

model Court {
  id                String             @id @default(cuid())
  name              String             @unique
  slug              String             @unique
  stateId           String?
  state             StateInfo?         @relation(fields: [stateId], references: [id])
  website           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialDistrict {
  id                String             @id @default(cuid())
  name              String
  slug              String             @unique
  courtId           String
  court             Court              @relation(fields: [courtId], references: [id])
  stateId           String
  state             StateInfo          @relation(fields: [stateId], references: [id])
  zipCode           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialBranch {
  id                String             @id @default(cuid())
  name              String
  slug              String             @unique
  districtId        String
  district          JudicialDistrict   @relation(fields: [districtId], references: [id])
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
  auctions          Auction[]
}

model JudicialProcess {
  id            String           @id @default(cuid())
  publicId      String           @unique @default(cuid())
  processNumber String           @unique
  isElectronic  Boolean          @default(true)
  courtId       String
  court         Court            @relation(fields: [courtId], references: [id])
  districtId    String
  district      JudicialDistrict @relation(fields: [districtId], references: [id])
  branchId      String
  branch        JudicialBranch   @relation(fields: [branchId], references: [id])
  sellerId      String?
  seller        Seller?          @relation(fields: [sellerId], references: [id])
  parties       JudicialParty[]
  bens          Bem[]
  auctions      Auction[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model JudicialParty {
  id             String          @id @default(cuid())
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType
}

model Auctioneer {
  id                 String    @id @default(cuid())
  publicId           String    @unique @default(cuid())
  slug               String    @unique
  name               String    @unique
  registrationNumber String?
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?
  userId             String?   @unique
  user               User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  auctions           Auction[]
  lots               Lot[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Seller {
  id                      String              @id @default(cuid())
  publicId                String              @unique @default(cuid())
  slug                    String              @unique
  name                    String              @unique
  contactName             String?
  email                   String?
  phone                   String?
  address                 String?
  city                    String?
  state                   String?
  zipCode                 String?
  website                 String?
  logoUrl                 String?
  logoMediaId             String?
  dataAiHintLogo          String?
  description             String?
  userId                  String?             @unique
  user                    User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
  isJudicial              Boolean             @default(false)
  judicialBranchId        String?
  judicialBranch          JudicialBranch?     @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  auctions                Auction[]
  lots                    Lot[]
  bens                    Bem[]
  judicialProcesses       JudicialProcess[]
  directSaleOffers        DirectSaleOffer[]
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
}

model Auction {
  id                               String               @id @default(cuid())
  publicId                         String               @unique @default(cuid())
  slug                             String               @unique
  title                            String
  description                      String?              @db.Text
  status                           AuctionStatus        @default(RASCUNHO)
  auctionDate                      DateTime
  endDate                          DateTime?
  categoryId                       String
  auctioneerId                     String
  sellerId                         String
  onlineUrl                        String?
  address                          String?
  cityId                           String?
  stateId                          String?
  zipCode                          String?
  latitude                         Float?
  longitude                        Float?
  imageUrl                         String?
  imageMediaId                     String?
  dataAiHint                       String?
  documentsUrl                     String?
  visits                           Int                  @default(0)
  isFavorite                       Boolean              @default(false)
  isFeaturedOnMarketplace          Boolean              @default(false)
  marketplaceAnnouncementTitle     String?
  automaticBiddingEnabled          Boolean              @default(false)
  allowInstallmentBids             Boolean              @default(true)
  silentBiddingEnabled             Boolean              @default(false)
  allowMultipleBidsPerUser         Boolean              @default(true)
  softCloseEnabled                 Boolean              @default(false)
  softCloseMinutes                 Int?                 @default(2)
  estimatedRevenue                 Float?
  achievedRevenue                  Float?
  totalHabilitatedUsers            Int?
  additionalTriggers               String[]
  evaluationReportUrl              String?
  auctionCertificateUrl            String?
  sellingBranch                    String?
  decrementAmount                  Float?
  decrementIntervalSeconds         Int?
  floorPrice                       Float?
  judicialProcessId                String?
  courtId                          String?
  districtId                       String?
  branchId                         String?
  createdAt                        DateTime             @default(now())
  updatedAt                        DateTime             @updatedAt
  auctioneer                       Auctioneer           @relation(fields: [auctioneerId], references: [id])
  seller                           Seller               @relation(fields: [sellerId], references: [id])
  category                         LotCategory          @relation(fields: [categoryId], references: [id])
  judicialProcess                  JudicialProcess?     @relation(fields: [judicialProcessId], references: [id])
  city                             CityInfo?            @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state                            StateInfo?           @relation(fields: [stateId], references: [id], onDelete: SetNull)
  court                            Court?               @relation(fields: [courtId], references: [id], onDelete: SetNull)
  district                         JudicialDistrict?    @relation(fields: [districtId], references: [id], onDelete: SetNull)
  branch                           JudicialBranch?      @relation(fields: [branchId], references: [id], onDelete: SetNull)
  lots                             Lot[]
  bids                             Bid[]
  auctionStages                    AuctionStage[]
  habilitations                    AuctionHabilitation[]
  questions                        LotQuestion[]
  reviews                          Review[]
  auctionType                      AuctionType?
  auctionMethod                    AuctionMethod?
  participation                    AuctionParticipation?
}

model AuctionStage {
  id              String   @id @default(cuid())
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId       String
  name            String
  startDate       DateTime
  endDate         DateTime
  evaluationValue Float?

  @@unique([auctionId, name])
}

model AuctionHabilitation {
  id        String   @id @default(cuid())
  userId    String
  auctionId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, auctionId])
}

model Lot {
  id                           String               @id @default(cuid())
  publicId                     String               @unique @default(cuid())
  auctionId                    String
  slug                         String?
  number                       String?
  title                        String
  description                  String?              @db.Text
  price                        Float
  initialPrice                 Float?
  secondInitialPrice           Float?
  bidIncrementStep             Float?
  status                       LotStatus            @default(EM_BREVE)
  bidsCount                    Int?                 @default(0)
  views                        Int?                 @default(0)
  isFeatured                   Boolean?             @default(false)
  isExclusive                  Boolean?             @default(false)
  discountPercentage           Int?
  additionalTriggers           Json?
  imageUrl                     String?
  imageMediaId                 String?
  galleryImageUrls             Json?
  mediaItemIds                 Json?
  type                         String
  categoryId                   String?
  subcategoryId                String?
  sellerId                     String?
  seller                       Seller?              @relation(fields: [sellerId], references: [id])
  auctioneerId                 String?
  auctioneer                   Auctioneer?          @relation(fields: [auctioneerId], references: [id])
  cityId                       String?
  stateId                      String?
  cityName                     String?
  stateUf                      String?
  latitude                     Float?
  longitude                    Float?
  mapAddress                   String?
  mapEmbedUrl                  String?
  mapStaticImageUrl            String?
  endDate                      DateTime?
  auctionDate                  DateTime?
  lotSpecificAuctionDate       DateTime?
  secondAuctionDate            DateTime?
  condition                    String?
  dataAiHint                   String?
  winnerId                     String?
  winner                       User?                @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  winningBidTermUrl            String?
  allowInstallmentBids         Boolean              @default(false)
  isRelisted                   Boolean              @default(false)
  relistCount                  Int                  @default(0)
  originalLotId                String?              @unique
  inheritedMediaFromBemId      String?
  bids                         Bid[]
  auction                      Auction              @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                     LotCategory?         @relation(fields: [categoryId], references: [id])
  subcategory                  Subcategory?         @relation(fields: [subcategoryId], references: [id])
  city                         CityInfo?            @relation(fields: [cityId], references: [id], onDelete: SetNull)
  state                        StateInfo?           @relation(fields: [stateId], references: [id], onDelete: SetNull)
  originalLot                  Lot?                 @relation("RelistedLot", fields: [originalLotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  relistedLot                  Lot?                 @relation("RelistedLot")
  wins                         UserWin[]
  questions                    LotQuestion[]
  reviews                      Review[]
  maxBids                      UserLotMaxBid[]
  bens                         LotBens[]
  createdAt                    DateTime             @default(now())
  updatedAt                    DateTime             @updatedAt
}

model Bem {
  id                           String                 @id @default(cuid())
  publicId                     String                 @unique @default(cuid())
  title                        String
  description                  String?                @db.Text
  status                       String                 @default("DISPONIVEL")
  categoryId                   String
  subcategoryId                String?
  judicialProcessId            String?
  sellerId                     String?
  evaluationValue              Float?
  imageUrl                     String?
  imageMediaId                 String?
  galleryImageUrls             Json?
  mediaItemIds                 Json?
  dataAiHint                   String?
  locationCity                 String?
  locationState                String?
  address                      String?
  latitude                     Float?
  longitude                    Float?
  plate                        String?
  make                         String?
  model                        String?
  version                      String?
  year                         Int?
  modelYear                    Int?
  mileage                      Int?
  color                        String?
  fuelType                     String?
  transmissionType             String?
  bodyType                     String?
  vin                          String?
  renavam                      String?
  enginePower                  String?
  numberOfDoors                Int?
  vehicleOptions               String?
  detranStatus                 String?
  debts                        String?
  runningCondition             String?
  bodyCondition                String?
  tiresCondition               String?
  hasKey                       Boolean?
  propertyRegistrationNumber   String?
  iptuNumber                   String?
  isOccupied                   Boolean?
  area                         Float?
  totalArea                    Float?
  builtArea                    Float?
  bedrooms                     Int?
  suites                       Int?
  bathrooms                    Int?
  parkingSpaces                Int?
  constructionType             String?
  finishes                     String?
  infrastructure               String?
  condoDetails                 String?
  improvements                 String?
  topography                   String?
  liensAndEncumbrances         String?
  propertyDebts                String?
  unregisteredRecords          String?
  hasHabiteSe                  Boolean?
  zoningRestrictions           String?
  amenities                    Json?
  brand                        String?
  serialNumber                 String?
  itemCondition                String?
  specifications               String?
  includedAccessories          String?
  batteryCondition             String?
  hasInvoice                   Boolean?
  hasWarranty                  Boolean?
  repairHistory                String?
  applianceCapacity            String?
  voltage                      String?
  applianceType                String?
  additionalFunctions          String?
  hoursUsed                    Int?
  engineType                   String?
  capacityOrPower              String?
  maintenanceHistory           String?
  installationLocation         String?
  compliesWithNR               String?
  operatingLicenses            String?
  breed                        String?
  age                          String?
  sex                          String?
  weight                       String?
  individualId                 String?
  purpose                      String?
  sanitaryCondition            String?
  vaccinationStatus            String?
  lineage                      String?
  isPregnant                   Boolean?
  specialSkills                String?
  gtaDocument                  String?
  breedRegistryDocument        String?
  furnitureType                String?
  material                     String?
  style                        String?
  dimensions                   String?
  pieceCount                   Int?
  jewelryType                  String?
  metal                        String?
  gemstones                    String?
  totalWeight                  String?
  jewelrySize                  String?
  authenticityCertificate      String?
  workType                     String?
  artist                       String?
  period                       String?
  technique                    String?
  provenance                   String?
  boatType                     String?
  boatLength                   String?
  hullMaterial                 String?
  onboardEquipment             String?
  productName                  String?
  quantity                     String?
  packagingType                String?
  expirationDate               DateTime?
  storageConditions            String?
  preciousMetalType            String?
  purity                       String?
  forestGoodsType              String?
  volumeOrQuantity             String?
  species                      String?
  dofNumber                    String?
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  category                     LotCategory            @relation(fields: [categoryId], references: [id])
  subcategory                  Subcategory?           @relation(fields: [subcategoryId], references: [id])
  judicialProcess              JudicialProcess?       @relation(fields: [judicialProcessId], references: [id])
  seller                       Seller?                @relation(fields: [sellerId], references: [id])
  lots                         LotBens[]
}

model LotBens {
  lot     Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId   String
  bem     Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId   String
  @@id([lotId, bemId])
}

model DirectSaleOffer {
    id              String      @id @default(cuid())
    publicId        String      @unique @default(cuid())
    title           String
    description     String?     @db.Text
    offerType       DirectSaleOfferType
    price           Float?
    minimumOfferPrice Float?
    status          DirectSaleOfferStatus @default(ACTIVE)
    categoryId      String
    category        LotCategory @relation(fields: [categoryId], references: [id])
    sellerId        String
    seller          Seller      @relation(fields: [sellerId], references: [id])
    locationCity    String?
    locationState   String?
    imageUrl        String?
    imageMediaId    String?
    dataAiHint      String?
    galleryImageUrls Json?
    mediaItemIds    Json?
    itemsIncluded   Json?
    views           Int?        @default(0)
    expiresAt       DateTime?
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
}

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId     String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidderId      String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderDisplay String?
  amount        Float
  timestamp     DateTime @default(now())
}

model UserWin {
  id                String      @id @default(cuid())
  lotId             String      @unique // A lot can only be won by one user
  lot               Lot         @relation(fields: [lotId], references: [id])
  userId            String
  user              User        @relation(fields: [userId], references: [id])
  winningBidAmount  Float
  winDate           DateTime    @default(now())
  paymentStatus     PaymentStatus @default(PENDENTE)
  invoiceUrl        String?
  installments      InstallmentPayment[] // Relation to installments
}

// Model para armazenar os detalhes de pagamento de cada parcela.
model InstallmentPayment {
  id                String      @id @default(cuid())
  userWin           UserWin     @relation(fields: [userWinId], references: [id])
  userWinId         String
  installmentNumber Int
  amount            Float
  dueDate           DateTime
  status            PaymentStatus @default(PENDENTE)
  paymentDate       DateTime?
  paymentMethod     String?
  transactionId     String?

  @@unique([userWinId, installmentNumber])
}

model LotQuestion {
  id                String    @id @default(cuid())
  lot               Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId             String
  auctionId         String
  auction           Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  userId            String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userDisplayName   String
  questionText      String
  answerText        String?
  answeredByUserId  String?
  answeredByUser    User?     @relation("AnsweredBy", fields: [answeredByUserId], references: [id])
  answeredAt        DateTime?
  isPublic          Boolean   @default(true)
  createdAt         DateTime  @default(now())
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId       String
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userDisplayName String
  rating          Int
  comment         String?
  createdAt       DateTime @default(now())
}

model MediaItem {
  id                String          @id @default(cuid())
  fileName          String
  storagePath       String
  title             String
  altText           String?
  caption           String?
  description       String?         @db.Text
  mimeType          String
  sizeBytes         Int?
  urlOriginal       String
  urlThumbnail      String?
  urlMedium         String?
  urlLarge          String?
  uploadedBy        User            @relation(fields: [uploadedByUserId], references: [id])
  uploadedByUserId  String
  judicialProcessId String?
  linkedLotIds      String[]
  dataAiHint        String?
  uploadedAt        DateTime        @default(now())
}

model DocumentType {
  id           String         @id @default(cuid())
  name         String
  description  String?
  isRequired   Boolean        @default(true)
  appliesTo    String
  userDocs     UserDocument[]
}

model UserDocument {
  id              String        @id @default(cuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentTypeId  String
  documentType    DocumentType  @relation(fields: [documentTypeId], references: [id])
  status          String        @default("PENDING_ANALYSIS")
  fileUrl         String
  fileName        String?
  rejectionReason String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([userId, documentTypeId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentTemplate {
  id        String                @id @default(cuid())
  name      String
  type      DocumentTemplateType
  content   String?               @db.Text
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
}

model VehicleMake {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique
  models VehicleModel[]
}

model VehicleModel {
  id      String      @id @default(cuid())
  name    String
  slug    String
  makeId  String
  make    VehicleMake @relation(fields: [makeId], references: [id])

  @@unique([makeId, name])
}

model PlatformSettings {
  id                              String    @id @default("global")
  siteTitle                       String?
  siteTagline                     String?
  logoUrl                         String?
  faviconUrl                      String?
  galleryImageBasePath            String?
  storageProvider                 String?
  firebaseStorageBucket           String?
  activeThemeName                 String?
  themes                          Json?
  platformPublicIdMasks           Json?
  homepageSections                Json?
  mentalTriggerSettings           Json?
  sectionBadgeVisibility          Json?
  mapSettings                     Json?
  searchPaginationType            String?
  searchItemsPerPage              Int?
  searchLoadMoreCount             Int?
  showCountdownOnLotDetail        Boolean?
  showCountdownOnCards            Boolean?
  showRelatedLotsOnLotDetail      Boolean?
  relatedLotsCount                Int?
  defaultUrgencyTimerHours        Int?
  variableIncrementTable          Json?
  biddingSettings                 Json?
  paymentGatewaySettings          Json?
  defaultListItemsPerPage         Int?
  updatedAt                       DateTime  @updatedAt
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lotId     String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}
