// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

model Usuario {
  id                  String               @id @default(cuid())
  email               String               @unique
  fullName            String?
  password            String
  avatarUrl           String?
  dataAiHint          String?
  cpf                 String?              @unique
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  accountType         String?              @default("PHYSICAL")
  razaoSocial         String?
  cnpj                String?              @unique
  inscricaoEstadual   String?
  website             String?
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  optInMarketing      Boolean              @default(false)
  badges              String[]
  perfilId            String?
  perfil              Perfil?              @relation(fields: [perfilId], references: [id])
  documentos          DocumentoUsuario[]
  documentosAnalista  DocumentoUsuario[]   @relation("AnalistaDocumentos")
  lances              Lance[]
  arremates           Arremate[]
  vendasDiretas       VendaDireta[]
  vendedores          Vendedor[]
  leiloeiro           Leiloeiro?
  notificacoes        Notificacao[]
  postsBlog           PostBlog[]
  perguntas           PerguntaLote[]
  respostasPerguntas  PerguntaLote[]       @relation("RespostasPerguntas")
  avaliacoes          Avaliacao[]
  lancesMaximos       LanceMaximoLote[]
  mediaItems          MediaItem[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  @@map("usuarios")
}

model DocumentoUsuario {
  id              String         @id @default(cuid())
  usuarioId       String
  tipoDocumentoId String
  nomeArquivo     String
  urlArquivo      String
  status          UserDocumentStatus @default(NOT_SENT)
  dataEnvio       DateTime       @default(now())
  dataAnalise     DateTime?
  motivoRejeicao  String?
  analistaId      String?
  usuario         Usuario        @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  tipoDocumento   TipoDocumento  @relation(fields: [tipoDocumentoId], references: [id])
  analista        Usuario?       @relation("AnalistaDocumentos", fields: [analistaId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@unique([usuarioId, tipoDocumentoId])
  @@map("documentos_usuarios")
}

model TipoDocumento {
  id            String             @id @default(cuid())
  name          String             @unique
  description   String?
  isRequired    Boolean            @default(true)
  aplicaA       String?            // e.g., "PHYSICAL,LEGAL"
  formatos      String?            // e.g., "pdf,jpg,png"
  displayOrder  Int                @default(0)
  documentos    DocumentoUsuario[]

  @@map("tipos_documento")
}

model Leilao {
  id                             String           @id @default(cuid())
  publicId                       String           @unique @default(cuid())
  titulo                         String
  descricao                      String?          @db.Text
  status                         AuctionStatus    @default(RASCUNHO)
  modalidade                     AuctionType      @default(EXTRAJUDICIAL)
  dataInicio                     DateTime
  dataFim                        DateTime?
  cidade                         String?
  estado                         String?
  urlImagem                      String?
  imagemPrincipalId              String?
  imagemPrincipal                MediaItem?       @relation(fields: [imagemPrincipalId], references: [id], onDelete: SetNull)
  dataAiHint                     String?
  urlDocumentos                  String?
  visitas                        Int              @default(0)
  lanceInicial                   Float            @default(0)
  lotes                          Lote[]
  totalLotes                     Int              @default(0)
  categoriaId                    String
  leiloeiroId                    String
  vendedorId                     String?
  processoJudicialId             String?
  etapas                         Json[]           @default("[]")
  habilitacaoAutomatica          Boolean          @default(true)
  lancesAutomaticos              Boolean          @default(true)
  permiteLancesParcelados        Boolean          @default(false)
  softCloseHabilitado            Boolean          @default(false)
  softCloseMinutos               Int?             @default(2)
  receitaEstimada                Float?
  receitaRealizada               Float?
  totalUsuariosHabilitados       Int?
  destaqueMarketplace            Boolean          @default(false)
  tituloAnuncioMarketplace       String?
  gatilhosMentais                String?
  leiloeiro                      Leiloeiro        @relation(fields: [leiloeiroId], references: [id])
  vendedor                       Vendedor?        @relation(fields: [vendedorId], references: [id])
  categoria                      CategoriaLote    @relation(fields: [categoriaId], references: [id])
  processoJudicial               ProcessoJudicial? @relation(fields: [processoJudicialId], references: [id])
  createdAt                      DateTime         @default(now())
  updatedAt                      DateTime         @updatedAt

  @@map("leiloes")
}

model Lote {
  id                             String      @id @default(cuid())
  publicId                       String      @unique @default(cuid())
  leilaoId                       String
  titulo                         String
  numero                         String?
  descricao                      String?     @db.Text
  preco                          Float
  lanceInicial                   Float?
  segundoLanceInicial            Float?
  incrementoLance                Float?      @default(100)
  status                         LotStatus
  cidadeId                       String?
  estadoId                       String?
  categoriaId                    String
  subcategoriaId                 String?
  vendedorId                     String?
  leiloeiroId                    String?
  imagemUrl                      String?
  imagemPrincipalId              String?
  urlTermoArrematacao            String?
  bens                           Bem[]       @relation("BemParaLote")
  lances                         Lance[]
  arremates                      Arremate[]
  visitas                        Int         @default(0)
  contagemLances                 Int         @default(0)
  destaque                       Boolean     @default(false)
  exclusivo                      Boolean     @default(false)
  porcentagemDesconto            Float?
  gatilhosMentais                String[]
  latitude                       Float?
  longitude                      Float?
  enderecoMapa                   String?
  urlEmbedMapa                   String?
  urlImagemEstaticaMapa          String?
  numeroProcessoJudicial         String?
  comarca                        String?
  vara                           String?
  urlProcessoPublico             String?
  numeroMatriculaImovel          String?
  onusGravamesImovel             String?
  dividasConhecidas              String?
  infoDocumentosAdicionais       String?
  precoReserva                   Float?
  valorAvaliacao                 Float?
  valorDivida                    Float?
  valorItbi                      Float?
  dataFim                        DateTime?
  dataLeilaoEspecifica           DateTime?
  dataSegundoLeilao              DateTime?
  condicao                       String?
  dataAiHint                     String?
  mediaItems                     MediaItem[] @relation("LoteMediaItem")
  leilao                         Leilao      @relation(fields: [leilaoId], references: [id], onDelete: Cascade)
  categoria                      CategoriaLote @relation(fields: [categoriaId], references: [id])
  subcategoria                   Subcategoria? @relation(fields: [subcategoriaId], references: [id])
  vendedor                       Vendedor?   @relation(fields: [vendedorId], references: [id])
  estado                         Estado?     @relation(fields: [estadoId], references: [id])
  cidade                         Cidade?     @relation(fields: [cidadeId], references: [id])
  imagemPrincipal                MediaItem?  @relation(fields: [imagemPrincipalId], references: [id], onDelete: SetNull)
  lancesMaximos                  LanceMaximoLote[]
  avaliacoes                     Avaliacao[]
  perguntas                      PerguntaLote[]
  createdAt                      DateTime    @default(now())
  updatedAt                      DateTime    @updatedAt

  @@map("lotes")
}

model Lance {
  id              String   @id @default(cuid())
  loteId          String
  leilaoId        String
  licitanteId     String
  displayLicitante String?
  valor           Float
  timestamp       DateTime @default(now())
  tipo            String?  // 'manual', 'automatico'
  lote            Lote     @relation(fields: [loteId], references: [id], onDelete: Cascade)
  licitante       Usuario  @relation(fields: [licitanteId], references: [id], onDelete: Cascade)

  @@map("lances")
}

model Arremate {
  id               String   @id @default(cuid())
  loteId           String   @unique
  usuarioId        String
  valorArremate    Float
  dataArremate     DateTime
  statusPagamento  PaymentStatus @default(PENDENTE)
  faturaUrl        String?
  lote             Lote     @relation(fields: [loteId], references: [id])
  usuario          Usuario  @relation(fields: [usuarioId], references: [id])

  @@map("arremates")
}

model Perfil {
  id              String      @id @default(cuid())
  name            String      @unique
  name_normalized String      @unique
  description     String?
  permissions     Permissao[] @relation(name: "PerfilPermissao")
  usuarios        Usuario[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map("perfis")
}

model Permissao {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  perfis      Perfil[] @relation(name: "PerfilPermissao")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("permissoes")
}

model Vendedor {
  id                        String             @id @default(cuid())
  publicId                  String             @unique @default(cuid())
  slug                      String             @unique
  name                      String
  contactName               String?
  email                     String?
  phone                     String?
  address                   String?
  city                      String?
  state                     String?
  zipCode                   String?
  website                   String?
  logoUrl                   String?
  logoMediaId               String?
  dataAiHintLogo            String?
  description               String?            @db.Text
  userId                    String?            @unique
  isJudicial                Boolean            @default(false)
  judicialBranchId          String?            @unique
  memberSince               DateTime?
  rating                    Float?
  activeLotsCount           Int?
  totalSalesValue           Float?
  auctionsFacilitatedCount  Int?
  usuario                   Usuario?           @relation(fields: [userId], references: [id])
  leiloes                   Leilao[]
  lotes                     Lote[]
  processosJudiciais        ProcessoJudicial[]
  vendasDiretas             VendaDireta[]
  bens                      Bem[]
  judicialBranch            Vara?              @relation(fields: [judicialBranchId], references: [id])
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt

  @@map("vendedores")
}

model Leiloeiro {
  id                        String    @id @default(cuid())
  publicId                  String    @unique @default(cuid())
  slug                      String    @unique
  name                      String
  registrationNumber        String?
  contactName               String?
  email                     String?
  phone                     String?
  address                   String?
  city                      String?
  state                     String?
  zipCode                   String?
  website                   String?
  logoUrl                   String?
  logoMediaId               String?
  dataAiHintLogo            String?
  description               String?   @db.Text
  userId                    String?   @unique
  memberSince               DateTime?
  rating                    Float?
  auctionsConductedCount    Int?
  totalValueSold            Float?
  usuario                   Usuario?  @relation(fields: [userId], references: [id])
  leiloes                   Leilao[]
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt

  @@map("leiloeiros")
}

model ProcessoJudicial {
  id              String         @id @default(cuid())
  publicId        String         @unique @default(cuid())
  processNumber   String         @unique
  isElectronic    Boolean        @default(true)
  courtId         String
  districtId      String
  branchId        String
  sellerId        String?
  vendedor        Vendedor?      @relation(fields: [sellerId], references: [id])
  leiloes         Leilao[]
  bens            Bem[]
  partes          ParteProcesso[]
  tribunal        Tribunal       @relation(fields: [courtId], references: [id])
  comarca         Comarca        @relation(fields: [districtId], references: [id])
  vara            Vara           @relation(fields: [branchId], references: [id])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("processos_judiciais")
}

model ParteProcesso {
  id              String           @id @default(cuid())
  processoJudicialId String
  name            String
  partyType       ProcessPartyType
  documentNumber  String?
  processo        ProcessoJudicial @relation(fields: [processoJudicialId], references: [id], onDelete: Cascade)

  @@unique([processoJudicialId, name, partyType])
  @@map("partes_processo")
}

model Tribunal {
  id          String             @id @default(cuid())
  name        String             @unique
  slug        String             @unique
  stateUf     String
  website     String?
  comarcas    Comarca[]
  processos   ProcessoJudicial[]

  @@map("tribunais")
}

model Comarca {
  id            String             @id @default(cuid())
  name          String
  slug          String
  courtId       String
  stateId       String
  zipCode       String?
  processos     ProcessoJudicial[]
  tribunal      Tribunal           @relation(fields: [courtId], references: [id])
  estado        Estado             @relation(fields: [stateId], references: [id])
  varas         Vara[]

  @@unique([name, stateId])
  @@map("comarcas")
}

model Vara {
  id             String             @id @default(cuid())
  name           String
  slug           String
  districtId     String
  contactName    String?
  phone          String?
  email          String?
  processos      ProcessoJudicial[]
  vendedores     Vendedor[]
  comarca        Comarca            @relation(fields: [districtId], references: [id])

  @@unique([name, districtId])
  @@map("varas")
}

model Bem {
  id                          String      @id @default(cuid())
  publicId                    String      @unique @default(cuid())
  title                       String
  description                 String?
  status                      BemStatus
  categoryId                  String
  subcategoryId               String?
  judicialProcessId           String?
  sellerId                    String?
  evaluationValue             Float?
  imageUrl                    String?
  imageMediaId                String?
  galleryImageUrls            String[]
  mediaItemIds                String[]
  dataAiHint                  String?
  locationCity                String?
  locationState               String?
  address                     String?
  latitude                    Float?
  longitude                   Float?
  plate                       String?
  make                        String?
  model                       String?
  version                     String?
  year                        Int?
  modelYear                   Int?
  mileage                     Int?
  color                       String?
  fuelType                    String?
  transmissionType            String?
  bodyType                    String?
  vin                         String?
  renavam                     String?
  enginePower                 String?
  numberOfDoors               Int?
  vehicleOptions              String?
  detranStatus                String?
  debts                       String?
  runningCondition            String?
  bodyCondition               String?
  tiresCondition              String?
  hasKey                      Boolean?
  propertyRegistrationNumber  String?
  iptuNumber                  String?
  isOccupied                  Boolean?
  totalArea                   Float?
  builtArea                   Float?
  bedrooms                    Int?
  suites                      Int?
  bathrooms                   Int?
  parkingSpaces               Int?
  constructionType            String?
  finishes                    String?
  infrastructure              String?
  condoDetails                String?
  improvements                String?
  topography                  String?
  liensAndEncumbrances        String?
  propertyDebts               String?
  unregisteredRecords         String?
  hasHabiteSe                 Boolean?
  zoningRestrictions          String?
  amenities                   Json[]
  brand                       String?
  serialNumber                String?
  itemCondition               String?
  specifications              String?
  includedAccessories         String?
  batteryCondition            String?
  hasInvoice                  Boolean?
  hasWarranty                 Boolean?
  repairHistory               String?
  applianceCapacity           String?
  voltage                     String?
  applianceType               String?
  additionalFunctions         String?
  hoursUsed                   Int?
  engineType                  String?
  capacityOrPower             String?
  maintenanceHistory          String?
  installationLocation        String?
  compliesWithNR              String?
  operatingLicenses           String?
  breed                       String?
  age                         String?
  sex                         Sexo?
  weight                      String?
  individualId                String?
  purpose                     String?
  sanitaryCondition           String?
  lineage                     String?
  isPregnant                  Boolean?
  specialSkills               String?
  gtaDocument                 String?
  breedRegistryDocument       String?
  furnitureType               String?
  material                    String?
  style                       String?
  dimensions                  String?
  pieceCount                  Int?
  jewelryType                 String?
  metal                       String?
  gemstones                   String?
  totalWeight                 String?
  jewelrySize                 String?
  authenticityCertificate     String?
  workType                    String?
  artist                      String?
  period                      String?
  technique                   String?
  provenance                  String?
  boatType                    String?
  boatLength                  String?
  hullMaterial                String?
  onboardEquipment            String?
  productName                 String?
  quantity                    String?
  packagingType               String?
  expirationDate              DateTime?
  storageConditions           String?
  preciousMetalType           String?
  purity                      String?
  forestGoodsType             String?
  volumeOrQuantity            String?
  species                     String?
  dofNumber                   String?
  lotes                       Lote[]      @relation("BemParaLote")
  category                    CategoriaLote? @relation(fields: [categoryId], references: [id])
  subcategory                 Subcategoria? @relation(fields: [subcategoryId], references: [id])
  judicialProcess             ProcessoJudicial? @relation(fields: [judicialProcessId], references: [id])
  seller                      Vendedor?      @relation(fields: [sellerId], references: [id])
  createdAt                   DateTime    @default(now())
  updatedAt                   DateTime    @updatedAt

  @@map("bens")
}

model VendaDireta {
  id                    String        @id @default(cuid())
  publicId              String        @unique @default(cuid())
  titulo                String
  descricao             String?       @db.Text
  tipoOferta            DirectSaleOfferType
  status                DirectSaleOfferStatus @default(PENDING_APPROVAL)
  preco                 Float?
  precoMinimoOferta     Float?
  localidadeCidade      String?
  localidadeEstado      String?
  imagemUrl             String?
  imagemPrincipalId     String?
  dataAiHint            String?
  galeriaImagensUrls    String[]
  itensIncluidos        String[]
  tags                  String[]
  expiraEm              DateTime?
  visitas               Int           @default(0)
  contagemPropostas     Int           @default(0)
  categoriaId           String
  vendedorId            String
  categoria             CategoriaLote @relation(fields: [categoriaId], references: [id])
  vendedor              Vendedor      @relation(fields: [vendedorId], references: [id])
  usuario               Usuario?      @relation(fields: [vendedorId], references: [id], name: "VendaDiretaUsuario")
  imagemPrincipal       MediaItem?    @relation(fields: [imagemPrincipalId], references: [id], onDelete: SetNull, name: "VendaDiretaImagemPrincipal")
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  @@map("vendas_diretas")
}

model MediaItem {
  id                     String    @id @default(cuid())
  fileName               String
  storagePath            String    @unique
  urlOriginal            String
  urlThumbnail           String?
  urlMedium              String?
  urlLarge               String?
  title                  String?
  altText                String?
  caption                String?
  description            String?
  mimeType               String
  sizeBytes              Int
  uploadedAt             DateTime  @default(now())
  uploadedBy             String
  dataAiHint             String?
  linkedLotIds           String[]
  lotes                  Lote[] @relation("LoteMediaItem")
  leiloes                Leilao[]
  ofertasVendaDireta     VendaDireta[] @relation("VendaDiretaImagemPrincipal")

  @@map("media_items")
}

model CategoriaLote {
  id                  String         @id @default(cuid())
  name                String         @unique
  slug                String         @unique
  description         String?
  logoUrl             String?
  coverImageUrl       String?
  megaMenuImageUrl    String?
  dataAiHintLogo      String?
  dataAiHintCover     String?
  dataAiHintMegaMenu  String?
  itemCount           Int            @default(0)
  hasSubcategories    Boolean        @default(false)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  leiloes             Leilao[]
  lotes               Lote[]
  bens                Bem[]
  vendasDiretas       VendaDireta[]
  subcategorias       Subcategoria[]

  @@map("categorias_lote")
}

model Subcategoria {
  id              String        @id @default(cuid())
  name            String
  slug            String
  parentCategoryId String
  description     String?
  displayOrder    Int?          @default(0)
  itemCount       Int           @default(0)
  iconUrl         String?
  iconMediaId     String?
  dataAiHintIcon  String?
  lotes           Lote[]
  bens            Bem[]
  parentCategory  CategoriaLote @relation(fields: [parentCategoryId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([parentCategoryId, name])
  @@map("subcategorias")
}

model Estado {
  id         String   @id @default(cuid())
  name       String   @unique
  uf         String   @unique
  slug       String   @unique
  cityCount  Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  cidades    Cidade[]
  tribunais  Tribunal[] @relation(fields: [id], references: [stateUf])
  lotes      Lote[]
  comarcas   Comarca[]

  @@map("estados")
}

model Cidade {
  id         String   @id @default(cuid())
  name       String
  slug       String
  stateId    String
  stateUf    String
  ibgeCode   String?
  lotCount   Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  estado     Estado   @relation(fields: [stateId], references: [id])
  lotes      Lote[]

  @@map("cidades")
}

model Notificacao {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  usuario   Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notificacoes")
}

model PostBlog {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   @db.Text
  authorId    String
  publishedAt DateTime
  tags        String[]
  author      Usuario  @relation(fields: [authorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("posts_blog")
}

model Contato {
  id         String   @id @default(cuid())
  name       String
  email      String
  subject    String
  message    String   @db.Text
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("contatos")
}

model Avaliacao {
  id              String   @id @default(cuid())
  loteId          String
  leilaoId        String
  userId          String
  userDisplayName String?
  rating          Int
  comment         String?
  createdAt       DateTime @default(now())
  lote            Lote     @relation(fields: [loteId], references: [id], onDelete: Cascade)
  usuario         Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("avaliacoes")
}

model PerguntaLote {
  id                        String   @id @default(cuid())
  loteId                    String
  leilaoId                  String
  userId                    String
  userDisplayName           String?
  questionText              String
  answerText                String?
  isPublic                  Boolean  @default(true)
  answeredAt                DateTime?
  answeredByUserId          String?
  answeredByUserDisplayName String?
  createdAt                 DateTime @default(now())
  lote                      Lote     @relation(fields: [loteId], references: [id], onDelete: Cascade)
  usuario                   Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
  respondente               Usuario? @relation("RespostasPerguntas", fields: [answeredByUserId], references: [id], onDelete: SetNull)

  @@map("perguntas_lote")
}

model LanceMaximoLote {
  id        String   @id @default(cuid())
  userId    String
  loteId    String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  usuario   Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
  lote      Lote     @relation(fields: [loteId], references: [id], onDelete: Cascade)

  @@unique([userId, loteId])
  @@map("lances_maximos_lote")
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  RETIRADO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum UserHabilitationStatus {
  PENDENTE_DOCUMENTOS
  PENDENTE_ANALYSIS
  REJECTED_DOCUMENTS
  HABILITADO
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum DirectSaleOfferStatus {
  PENDING_APPROVAL
  ACTIVE
  SOLD
  EXPIRED
  CANCELED
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum Sexo {
  MACHO
  FEMEA
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}
