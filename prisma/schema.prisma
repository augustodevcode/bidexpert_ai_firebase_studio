// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. BASE TABLES (No Foreign Key Dependencies)
// =================================================================

model Role {
  id              String   @id @default(cuid())
  name            String
  nameNormalized  String   @unique
  description     String?
  permissions     Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  users           UsersOnRoles[]
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}


model State {
  id          String   @id @default(cuid())
  name        String
  uf          String   @unique
  slug        String   @unique
  cityCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cities      City[]
  districts   JudicialDistrict[]
  lots        Lot[]
}

model LotCategory {
  id                 String   @id @default(cuid())
  name               String
  slug               String   @unique
  description        String?  @db.VarChar(500)
  hasSubcategories   Boolean  @default(false)
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  coverImageUrl      String?
  coverImageMediaId  String?
  dataAiHintCover    String?
  megaMenuImageUrl   String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu String?
  iconName           String?
  
  subcategories Subcategory[]
  lots          Lot[]
  bens          Bem[]
  auctions      Auction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DocumentTemplate {
  id      String   @id @default(cuid())
  name    String
  type    String
  content String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DocumentType {
  id            String         @id @default(cuid())
  name          String
  description   String?
  isRequired    Boolean        @default(true)
  appliesTo     String?
  userDocuments UserDocument[]
}

// =================================================================
// 2. TABLES WITH ONE LEVEL OF DEPENDENCY
// =================================================================

model User {
  id                 String      @id @default(cuid())
  email              String      @unique
  password           String?
  fullName           String?
  habilitationStatus String      @default("PENDING_DOCUMENTS") // e.g., PENDING_DOCUMENTS, PENDING_ANALYSIS, HABILITADO
  accountType        String      @default("PHYSICAL") // e.g., PHYSICAL, LEGAL
  avatarUrl          String?
  dataAiHint         String?
  badges             Json?
  
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  
  roles    UsersOnRoles[]
  seller   Seller[]
  auctioneer Auctioneer[]
  documents UserDocument[]
  bids      Bid[]
  wins      UserWin[]
  maxBids   UserLotMaxBid[]
  uploadedMedia MediaItem[]
  auctionHabilitations AuctionHabilitation[]
}


model City {
  id      String   @id @default(cuid())
  name    String
  slug    String?
  state   State    @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId String
  stateUf String?
  ibgeCode String? @unique
  lotCount Int     @default(0)
  
  lots Lot[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subcategory {
  id               String      @id @default(cuid())
  name             String
  slug             String?
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  parentCategoryId String
  description      String?     @db.VarChar(500)
  displayOrder     Int         @default(0)
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?
  
  lots Lot[]
  bens Bem[]
}

model Court {
  id        String   @id @default(cuid())
  name      String
  slug      String?
  stateUf   String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions Auction[] // Added relation to Auction
}


// =================================================================
// 3. TABLES WITH TWO OR MORE LEVELS OF DEPENDENCY
// =================================================================

model JudicialDistrict {
  id       String   @id @default(cuid())
  name     String
  slug     String   @unique
  court    Court?   @relation(fields: [courtId], references: [id])
  courtId  String?
  state    State?   @relation(fields: [stateId], references: [id])
  stateId  String?
  zipCode  String?
  
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[] // Added relation to Auction

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JudicialBranch {
  id       String   @id @default(cuid())
  name     String
  slug     String   @unique
  district JudicialDistrict? @relation(fields: [districtId], references: [id])
  districtId String?
  contactName String?
  phone    String?
  email    String?
  
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
  auctions          Auction[] // Added relation to Auction

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Seller {
  id             String   @id @default(cuid())
  publicId       String?  @unique
  slug           String?  @unique
  name           String   @unique
  contactName    String?
  email          String?
  phone          String?
  address        String?
  city           String?
  state          String?
  zipCode        String?
  website        String?
  logoUrl        String?
  logoMediaId    String?
  dataAiHintLogo String?
  description    String?  @db.Text
  
  user   User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String?
  
  isJudicial     Boolean         @default(false)
  judicialBranch JudicialBranch? @relation(fields: [judicialBranchId], references: [id])
  judicialBranchId String?       @unique // A branch can only be one seller

  processes JudicialProcess[]
  bens      Bem[]
  auctions  Auction[]
  lots      Lot[]
  directSaleOffers DirectSaleOffer[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Auctioneer {
  id                String   @id @default(cuid())
  publicId          String?  @unique
  slug              String?  @unique
  name              String
  registrationNumber String?
  contactName       String?
  email             String?
  phone             String?
  address           String?
  city              String?
  state             String?
  zipCode           String?
  website           String?
  logoUrl           String?
  logoMediaId       String?
  dataAiHintLogo    String?
  description       String?  @db.Text
  
  user   User? @relation(fields: [userId], references: [id])
  userId String?

  auctions Auction[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JudicialProcess {
  id            String   @id @default(cuid())
  publicId      String?  @unique
  processNumber String
  isElectronic  Boolean  @default(true)
  
  court    Court?   @relation(fields: [courtId], references: [id])
  courtId  String?
  district JudicialDistrict? @relation(fields: [districtId], references: [id])
  districtId String?
  branch   JudicialBranch? @relation(fields: [branchId], references: [id])
  branchId String?
  seller   Seller?  @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId String?
  
  parties   JudicialParty[]
  bens      Bem[]
  auctions  Auction[] // Added relation to Auction
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JudicialParty {
  id              String          @id @default(cuid())
  process         JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId       String
  name            String
  documentNumber  String?
  partyType       String // e.g., AUTOR, REU, ADVOGADO_AUTOR
}

model Bem {
  id               String        @id @default(cuid())
  publicId         String        @unique @default(cuid())
  title            String        @db.VarChar(200)
  description      String?       @db.Text
  status           String        @default("DISPONIVEL") // DISPONIVEL, LOTEADO, VENDIDO, REMOVIDO, INATIVADO
  
  category         LotCategory?  @relation(fields: [categoryId], references: [id])
  categoryId       String?
  subcategory      Subcategory?  @relation(fields: [subcategoryId], references: [id])
  subcategoryId    String?
  judicialProcess  JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId String?
  seller           Seller?       @relation(fields: [sellerId], references: [id])
  sellerId         String?

  evaluationValue   Decimal? @db.Decimal(15, 2)
  imageUrl          String?
  imageMediaId      String?
  galleryImageUrls  Json?
  mediaItemIds      Json?
  dataAiHint        String?
  locationCity      String?
  locationState     String?
  address           String?
  latitude          Decimal? @db.Decimal(10, 8)
  longitude         Decimal? @db.Decimal(11, 8)

  // Ve√≠culos
  plate String?
  make String?
  model String?
  version String?
  year Int?
  modelYear Int?
  mileage Int?
  color String?
  fuelType String?
  transmissionType String?
  bodyType String?
  vin String?
  renavam String?
  enginePower String?
  numberOfDoors Int?
  vehicleOptions String? @db.Text
  detranStatus String?
  debts String? @db.Text
  runningCondition String?
  bodyCondition String?
  tiresCondition String?
  hasKey Boolean?

  // Im√≥veis
  propertyRegistrationNumber String?
  iptuNumber String?
  isOccupied Boolean?
  totalArea Decimal? @db.Decimal(15, 2)
  builtArea Decimal? @db.Decimal(15, 2)
  bedrooms Int?
  suites Int?
  bathrooms Int?
  parkingSpaces Int?
  constructionType String?
  finishes String? @db.Text
  infrastructure String? @db.Text
  condoDetails String? @db.Text
  improvements String? @db.Text
  topography String?
  liensAndEncumbrances String? @db.Text
  propertyDebts String? @db.Text
  unregisteredRecords String? @db.Text
  hasHabiteSe Boolean?
  zoningRestrictions String?
  amenities Json?

  // Eletr√¥nicos
  brand String?
  serialNumber String?
  itemCondition String?
  specifications String? @db.Text
  includedAccessories String? @db.Text
  batteryCondition String?
  hasInvoice Boolean?
  hasWarranty Boolean?
  repairHistory String? @db.Text
  
  // Eletrodom√©sticos
  applianceCapacity String?
  voltage String?
  applianceType String?
  additionalFunctions String?

  // M√°quinas e Equipamentos
  hoursUsed Int?
  engineType String?
  capacityOrPower String?
  maintenanceHistory String? @db.Text
  installationLocation String?
  compliesWithNR String?
  operatingLicenses String?

  // Semoventes (Livestock)
  breed String?
  age String?
  sex String?
  weight String?
  individualId String?
  purpose String?
  sanitaryCondition String?
  lineage String?
  isPregnant Boolean?
  specialSkills String?
  gtaDocument String?
  breedRegistryDocument String?
  
  lots LotBens[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuctionStage {
  id              String   @id @default(cuid())
  auction         Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId       String
  name            String
  startDate       DateTime
  endDate         DateTime
  initialPrice    Decimal? @db.Decimal(15, 2)
}


model Auction {
  id                           String        @id @default(cuid())
  publicId                     String?       @unique
  slug                         String?       @unique
  title                        String
  description                  String?       @db.Text
  status                       String        @default("RASCUNHO")
  auctionDate                  DateTime      @default(now())
  endDate                      DateTime?
  
  auctioneer                   Auctioneer?   @relation(fields: [auctioneerId], references: [id])
  auctioneerId                 String?
  seller                       Seller?       @relation(fields: [sellerId], references: [id])
  sellerId                     String?
  category                     LotCategory?  @relation(fields: [categoryId], references: [id])
  categoryId                   String?
  
  auctionType                  String?
  imageUrl                     String?
  imageMediaId                 String?
  documentsUrl                 String?
  visits                       Int           @default(0)
  totalLots                    Int           @default(0)
  initialOffer                 Decimal?      @db.Decimal(15, 2)
  isFavorite                   Boolean       @default(false)
  dataAiHint                   String?
  
  createdAt                    DateTime      @default(now())
  updatedAt                    DateTime      @updatedAt
  
  // Judicial Specific
  court                        Court?        @relation(fields: [courtId], references: [id])
  courtId                      String?
  district                     JudicialDistrict? @relation(fields: [districtId], references: [id])
  districtId                   String?
  branch                       JudicialBranch? @relation(fields: [branchId], references: [id])
  branchId                     String?
  process                      JudicialProcess?  @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId            String?
  
  // New Fields
  mapAddress                   String?
  latitude                     Decimal?      @db.Decimal(10, 8)
  longitude                    Decimal?      @db.Decimal(11, 8)
  evaluationReportUrl          String?
  auctionCertificateUrl        String?
  sellingBranch                String?
  automaticBiddingEnabled      Boolean       @default(false)
  allowInstallmentBids         Boolean       @default(true)
  silentBiddingEnabled         Boolean       @default(false)
  allowMultipleBidsPerUser     Boolean       @default(true)
  softCloseEnabled             Boolean       @default(false)
  softCloseMinutes             Int?          @default(2)
  estimatedRevenue             Decimal?      @db.Decimal(15, 2)
  achievedRevenue              Decimal?      @db.Decimal(15, 2)
  totalHabilitatedUsers        Int?
  isFeaturedOnMarketplace      Boolean       @default(false)
  marketplaceAnnouncementTitle String?
  additionalTriggers           Json?
  
  // Dutch Auction Specific
  decrementAmount              Decimal?      @db.Decimal(10, 2)
  decrementIntervalSeconds     Int?
  floorPrice                   Decimal?      @db.Decimal(15, 2)
  
  // Auto-Relisting Settings (as JSON)
  autoRelistSettings           Json?
  
  auctionStages                AuctionStage[]
  lots                         Lot[]
  bids                         Bid[]
  auctionHabilitations         AuctionHabilitation[]
}


model Lot {
  id                 String       @id @default(cuid())
  publicId           String?      @unique
  auction            Auction      @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId          String
  slug               String?
  number             String?
  title              String
  description        String?      @db.Text
  price              Decimal      @db.Decimal(15, 2)
  initialPrice       Decimal?     @db.Decimal(15, 2)
  secondInitialPrice Decimal?     @db.Decimal(15, 2)
  bidIncrementStep   Decimal?     @db.Decimal(10, 2)
  status             String       @default("EM_BREVE")
  bidsCount          Int          @default(0)
  views              Int          @default(0)
  isFeatured         Boolean      @default(false)
  isExclusive        Boolean      @default(false)
  discountPercentage Int?
  additionalTriggers Json?
  imageUrl           String?
  imageMediaId       String?
  galleryImageUrls   Json?
  mediaItemIds       Json?
  type               String?
  
  category         LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId       String?
  subcategory      Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId    String?
  
  seller    Seller? @relation(fields: [sellerId], references: [id])
  sellerId  String?
  auctioneerId String? // Added for easier access if needed
  
  city    City?   @relation(fields: [cityId], references: [id])
  cityId  String?
  state   State?  @relation(fields: [stateId], references: [id])
  stateId String?
  
  cityName String?
  stateUf  String?
  
  latitude        Decimal? @db.Decimal(10, 8)
  longitude       Decimal? @db.Decimal(11, 8)
  mapAddress      String?
  mapEmbedUrl     String?  @db.VarChar(500)
  mapStaticImageUrl String?
  
  endDate        DateTime?
  auctionDate    DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate DateTime?
  
  condition String?
  dataAiHint String?
  
  winner   User?   @relation("LotWinner", fields: [winnerId], references: [id])
  winnerId String?
  winningBidTermUrl String?
  
  allowInstallmentBids Boolean @default(false)
  
  bens LotBens[]
  bids Bid[]
  wins UserWin[]
  maxBids UserLotMaxBid[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LotBens {
  lot      Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId    String
  bem      Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId    String
  
  @@id([lotId, bemId])
}

model MediaItem {
  id            String   @id @default(cuid())
  fileName      String   @unique
  storagePath   String
  title         String?
  altText       String?
  caption       String?
  description   String?  @db.Text
  mimeType      String
  sizeBytes     Int?
  
  urlOriginal   String
  urlThumbnail  String?
  urlMedium     String?
  urlLarge      String?
  
  linkedLotIds    Json?
  judicialProcessId String?
  dataAiHint      String?
  
  uploadedBy    User     @relation(fields: [uploadedByUserId], references: [id])
  uploadedByUserId String

  uploadedAt DateTime @default(now())
}

model UserDocument {
  id              String      @id @default(cuid())
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  documentType    DocumentType @relation(fields: [documentTypeId], references: [id])
  documentTypeId  String
  status          String      @default("PENDING") // PENDING, APPROVED, REJECTED
  fileUrl         String
  fileName        String?
  rejectionReason String?     @db.Text
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@unique([userId, documentTypeId])
}

model Bid {
  id           String   @id @default(cuid())
  lot          Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId        String
  auction      Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId    String
  bidder       User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId     String
  bidderDisplay String?
  amount       Decimal  @db.Decimal(15, 2)
  timestamp    DateTime @default(now())
}

model UserWin {
  id               String   @id @default(cuid())
  lot              Lot      @relation(fields: [lotId], references: [id])
  lotId            String   @unique
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  winningBidAmount Decimal  @db.Decimal(15, 2)
  winDate          DateTime @default(now())
  paymentStatus    String
  invoiceUrl       String?
}

model DirectSaleOffer {
  id             String   @id @default(cuid())
  publicId       String?  @unique
  title          String
  description    String?  @db.Text
  offerType      String?  // BUY_NOW, ACCEPTS_PROPOSALS
  price          Decimal? @db.Decimal(15, 2)
  minimumOfferPrice Decimal? @db.Decimal(15, 2)
  status         String   @default("ACTIVE")
  
  seller        Seller?  @relation(fields: [sellerId], references: [id])
  sellerId      String?
  
  locationCity  String?
  locationState String?
  
  imageUrl       String?
  imageMediaId   String?
  dataAiHint     String?
  galleryImageUrls Json?
  mediaItemIds   Json?
  
  itemsIncluded  Json?
  views          Int      @default(0)
  expiresAt      DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  @@unique([userId, lotId])
}

model AuctionHabilitation {
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
    auctionId String
    habilitatedAt DateTime @default(now())
    
    @@id([userId, auctionId])
}


model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}
```