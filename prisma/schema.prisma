// /home/user/studio/prisma/schema.prisma

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// ===================================
// Modelos de Usuário, Perfil e Permissão
// ===================================

model Usuario {
  id                  String    @id @default(cuid())
  email               String    @unique
  fullName            String
  password            String
  avatarUrl           String?
  dataAiHint          String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  lances              Lance[]
  arremates           Arremate[]
  documentos          DocumentoUsuario[]
  notificacoes        Notificacao[]
  perguntas           QuestaoLote[]      @relation("UserQuestions")
  respostas           QuestaoLote[]      @relation("UserAnswers")
  avaliacoes          Review[]
  vendasDiretas       VendaDireta[]
  comitente           Vendedor?
  leiloeiro           Leiloeiro?
  maxBids             UserLotMaxBid[]
  uploadedMedia       MediaItem[]
  habilitationStatus  UserHabilitationStatus?
  accountType         UserAccountType?
  cpf                 String?   @unique
  dateOfBirth         DateTime?
  razaoSocial         String?
  cnpj                String?   @unique
  inscricaoEstadual   String?
  website             String?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  status              String?   @default("ATIVO") // ATIVO, INATIVO, SUSPENSO
  optInMarketing      Boolean?  @default(false)
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  badges              Json?

  // Relação com Perfil
  roleId String?
  role   Perfil? @relation(fields: [roleId], references: [id], onDelete: SetNull)

  @@index([email])
}

model Perfil {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  usuarios        Usuario[]
  permissions     Permission[] @relation()
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  roles       Perfil[] @relation()
}

model DocumentoUsuario {
  id              String              @id @default(cuid())
  fileUrl         String?
  fileName        String?
  uploadDate      DateTime?
  analysisDate    DateTime?
  rejectionReason String?
  status          UserDocumentStatus  @default(NAO_ENVIADO)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  usuario         Usuario             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  tipoDocumento   TipoDocumento       @relation(fields: [documentTypeId], references: [id])
  documentTypeId  String
  analista        Usuario?            @relation("AnalyzedDocuments", fields: [analystId], references: [id], name: "AnalyzedDocuments", onDelete: SetNull)
  analystId       String?

  @@unique([userId, documentTypeId])
}

model TipoDocumento {
  id           String             @id @default(cuid())
  name         String             @unique
  description  String?
  isRequired   Boolean            @default(false)
  aplicaA      String? // Antes: UserAccountType[]. 'PHYSICAL,LEGAL'
  formatos     String? // Antes: String[]. 'pdf,jpg,png'
  displayOrder Int                @default(0)
  documentos   DocumentoUsuario[]
}

// ===================================
// Modelos de Leilão, Lote e Lance
// ===================================

model Leilao {
  id                             String        @id @default(cuid())
  publicId                       String        @unique
  title                          String
  fullTitle                      String?
  description                    String?
  status                         AuctionStatus @default(RASCUNHO)
  auctionType                    AuctionType?
  auctionDate                    DateTime
  endDate                        DateTime?
  etapas                         Json?
  imageUrl                       String?
  dataAiHint                     String?
  documentsUrl                   String?
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  city                           String?
  state                          String?
  sellingBranch                  String?
  visits                         Int?          @default(0)
  initialOffer                   Float?
  bidsCount                      Int?          @default(0)
  totalLots                      Int?          @default(0)
  totalHabilitatedUsers          Int?          @default(0)
  estimatedRevenue               Float?
  achievedRevenue                Float?
  automaticBiddingEnabled        Boolean?      @default(false)
  silentBiddingEnabled           Boolean?      @default(false)
  allowMultipleBidsPerUser       Boolean?      @default(true)
  allowInstallmentBids           Boolean?      @default(false)
  softCloseEnabled               Boolean?      @default(false)
  softCloseMinutes               Int?
  isFeaturedOnMarketplace        Boolean?      @default(false)
  marketplaceAnnouncementTitle   String?
  gatilhosMentais                String? // Antes: String[]
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt
  lotes                          Lote[]
  lances                         Lance[]
  arremates                      Arremate[]
  avaliacoes                     Review[]
  perguntas                      QuestaoLote[]
  categoria                      CategoriaLote @relation(fields: [categoryId], references: [id])
  categoryId                     String
  leiloeiro                      Leiloeiro     @relation(fields: [auctioneerId], references: [id])
  auctioneerId                   String
  vendedor                       Vendedor?     @relation(fields: [sellerId], references: [id])
  sellerId                       String?
  processoJudicial               ProcessoJudicial? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  judicialProcessId              String?
  imagemCapa                     MediaItem?    @relation(fields: [imageMediaId], references: [id], onDelete: SetNull)
  imageMediaId                   String?
}

model Lote {
  id                           String     @id @default(cuid())
  publicId                     String     @unique
  number                       String?
  title                        String
  description                  String?
  price                        Float
  initialPrice                 Float?
  secondInitialPrice           Float?
  evaluationValue              Float?
  reservePrice                 Float?
  debtAmount                   Float?
  itbiValue                    Float?
  bidIncrementStep             Float?
  status                       LotStatus  @default(EM_BREVE)
  imageUrl                     String?
  dataAiHint                   String?
  isFeatured                   Boolean?   @default(false)
  isExclusive                  Boolean?   @default(false)
  discountPercentage           Float?
  gatilhosMentais              String? // Antes: String[]
  condition                    String?
  latitude                     Float?
  longitude                    Float?
  mapAddress                   String?
  mapEmbedUrl                  String?
  mapStaticImageUrl            String?
  judicialProcessNumber        String?
  courtDistrict                String?
  courtName                    String?
  publicProcessUrl             String?
  propertyRegistrationNumber   String?
  propertyLiens                String?
  knownDebts                   String?
  additionalDocumentsInfo      String?
  winningBidTermUrl            String?
  createdAt                    DateTime   @default(now())
  updatedAt                    DateTime   @updatedAt
  leilao                       Leilao     @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                    String
  categoria                    CategoriaLote @relation(fields: [categoryId], references: [id])
  categoryId                   String
  subcategoria                 Subcategoria? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  subcategoryId                String?
  vendedor                     Vendedor?     @relation(fields: [sellerId], references: [id])
  sellerId                     String?
  estado                       Estado?       @relation(fields: [stateId], references: [id])
  stateId                      String?
  cidade                       Cidade?       @relation(fields: [cityId], references: [id])
  cityId                       String?
  imagemCapa                   MediaItem?    @relation(fields: [imageMediaId], references: [id], onDelete: SetNull, name: "LotMainImage")
  imageMediaId                 String?
  galeria                      MediaItem[]   @relation("LotGallery")
  bens                         Bem[]         @relation(map: "_BemToLote")
  lances                       Lance[]
  arremate                     Arremate?
  avaliacoes                   Review[]
  perguntas                    QuestaoLote[]
  maxBids                      UserLotMaxBid[]

  @@index([status])
}

model Bem {
  id                          String    @id @default(cuid())
  publicId                    String    @unique
  title                       String
  description                 String?
  status                      BemStatus @default(CADASTRO)
  evaluationValue             Float?
  imageUrl                    String?
  dataAiHint                  String?
  locationCity                String?
  locationState               String?
  address                     String?
  latitude                    Float?
  longitude                   Float?
  plate                       String?
  make                        String?
  model                       String?
  version                     String?
  year                        Int?
  modelYear                   Int?
  mileage                     Int?
  color                       String?
  fuelType                    String?
  transmissionType            String?
  bodyType                    String?
  vin                         String?
  renavam                     String?
  enginePower                 String?
  numberOfDoors               Int?
  vehicleOptions              String?
  detranStatus                String?
  debts                       String?
  runningCondition            String?
  bodyCondition               String?
  tiresCondition              String?
  hasKey                      Boolean?
  propertyRegistrationNumber  String?
  iptuNumber                  String?
  isOccupied                  Boolean?
  totalArea                   Float?
  builtArea                   Float?
  bedrooms                    Int?
  suites                      Int?
  bathrooms                   Int?
  parkingSpaces               Int?
  constructionType            String?
  finishes                    String?
  infrastructure              String?
  condoDetails                String?
  improvements                String?
  topography                  String?
  liensAndEncumbrances        String?
  propertyDebts               String?
  unregisteredRecords         String?
  hasHabiteSe                 Boolean?
  zoningRestrictions          String?
  brand                       String?
  serialNumber                String?
  itemCondition               String?
  specifications              String?
  includedAccessories         String?
  batteryCondition            String?
  hasInvoice                  Boolean?
  hasWarranty                 Boolean?
  repairHistory               String?
  applianceCapacity           String?
  voltage                     String?
  applianceType               String?
  hoursUsed                   Int?
  engineType                  String?
  capacityOrPower             String?
  maintenanceHistory          String?
  installationLocation        String?
  compliesWithNR              String?
  operatingLicenses           String?
  breed                       String?
  age                         String?
  sex                         String?
  weight                      String?
  individualId                String?
  purpose                     String?
  sanitaryCondition           String?
  lineage                     String?
  isPregnant                  Boolean?
  specialSkills               String?
  gtaDocument                 String?
  breedRegistryDocument       String?
  furnitureType               String?
  material                    String?
  style                       String?
  dimensions                  String?
  pieceCount                  Int?
  jewelryType                 String?
  metal                       String?
  gemstones                   String?
  totalWeight                 String?
  jewelrySize                 String?
  authenticityCertificate     String?
  workType                    String?
  artist                      String?
  period                      String?
  technique                   String?
  provenance                  String?
  boatType                    String?
  boatLength                  String?
  hullMaterial                String?
  onboardEquipment            String?
  productName                 String?
  quantity                    String?
  packagingType               String?
  expirationDate              DateTime?
  storageConditions           String?
  preciousMetalType           String?
  purity                      String?
  forestGoodsType             String?
  volumeOrQuantity            String?
  species                     String?
  dofNumber                   String?
  createdAt                   DateTime    @default(now())
  updatedAt                   DateTime    @updatedAt
  categoria                   CategoriaLote @relation(fields: [categoryId], references: [id])
  categoryId                  String
  subcategoria                Subcategoria? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  subcategoryId               String?
  processoJudicial            ProcessoJudicial? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  judicialProcessId           String?
  vendedor                    Vendedor?     @relation(fields: [sellerId], references: [id])
  sellerId                    String?
  imagemCapa                  MediaItem?    @relation(fields: [imageMediaId], references: [id], name: "BemMainImage", onDelete: SetNull)
  imageMediaId                String?
  galeria                     MediaItem[]   @relation("BemGallery")
  lotes                       Lote[]        @relation(map: "_BemToLote")
  
  // JSON fields replaced with single String fields
  amenities                   String?
}

model Lance {
  id            String   @id @default(cuid())
  amount        Float
  timestamp     DateTime @default(now())
  isProxyBid    Boolean  @default(false)
  isAuto        Boolean  @default(false)
  bidderDisplay String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  leilao        Leilao   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  lote          Lote     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  licitante     Usuario  @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId      String
}

model Arremate {
  id               String        @id @default(cuid())
  winningBidAmount Float
  winDate          DateTime      @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?
  lote             Lote          @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId            String        @unique
  leilao           Leilao        @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId        String
  usuario          Usuario       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String

  @@index([lotId])
  @@index([userId])
}

model UserLotMaxBid {
  id        String   @id @default(cuid())
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  usuario   Usuario  @relation("UserMaxBids", fields: [userId], references: [id], onDelete: Cascade, map: "UserLotMaxBid_userId_fkey")
  userId    String
  lote      Lote     @relation("LotMaxBids", fields: [lotId], references: [id], onDelete: Cascade, map: "UserLotMaxBid_lotId_fkey")
  lotId     String

  @@unique([userId, lotId])
}

// ===================================
// Modelos de Entidades (Vendedores, Leiloeiros)
// ===================================

model Vendedor {
  id                       String             @id @default(cuid())
  publicId                 String             @unique
  name                     String
  slug                     String             @unique
  contactName              String?
  email                    String?
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  logoUrl                  String?
  dataAiHintLogo           String?
  description              String?
  isJudicial               Boolean            @default(false)
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  leiloes                  Leilao[]
  bens                     Bem[]
  vendasDiretas            VendaDireta[]
  usuario                  Usuario?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId                   String?            @unique
  varaJudicial             Vara?              @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)
  judicialBranchId         String?            @unique
  processosJudiciais       ProcessoJudicial[]
}

model Leiloeiro {
  id                     String    @id @default(cuid())
  publicId                 String    @unique
  name                   String
  slug                   String    @unique
  registrationNumber     String?
  contactName            String?
  email                  String?
  phone                  String?
  address                String?
  city                   String?
  state                  String?
  zipCode                String?
  website                String?
  logoUrl                String?
  dataAiHintLogo         String?
  description            String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  leiloes                Leilao[]
  usuario                Usuario?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId                 String?   @unique
}

// ===================================
// Modelos Judiciais
// ===================================

model ProcessoJudicial {
  id              String      @id @default(cuid())
  publicId        String      @unique
  processNumber   String      @unique
  isElectronic    Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  tribunal        Tribunal    @relation(fields: [courtId], references: [id])
  courtId         String
  comarca         Comarca     @relation(fields: [districtId], references: [id])
  districtId      String
  vara            Vara        @relation(fields: [branchId], references: [id])
  branchId        String
  comitente       Vendedor?   @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId        String?
  partes          ParteProcesso[]
  bens            Bem[]
  leiloes         Leilao[]
}

model ParteProcesso {
  id             String         @id @default(cuid())
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  processo       ProcessoJudicial @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId      String

  @@unique([processId, name, partyType])
}

model Tribunal {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  stateUf   String
  website   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comarcas  Comarca[]
  processos ProcessoJudicial[]
}

model Comarca {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tribunal  Tribunal @relation(fields: [courtId], references: [id])
  courtId   String
  estado    Estado   @relation(fields: [stateId], references: [id])
  stateId   String
  varas     Vara[]
  processos ProcessoJudicial[]

  @@unique([name, stateId])
}

model Vara {
  id         String     @id @default(cuid())
  name       String
  slug       String     @unique
  contactName String?
  phone      String?
  email      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  comarca    Comarca    @relation(fields: [districtId], references: [id])
  districtId String
  processos  ProcessoJudicial[]
  comitentes Vendedor[]
}

// ===================================
// Modelos de Categorização e Localização
// ===================================

model CategoriaLote {
  id                 String         @id @default(cuid())
  name               String         @unique
  slug               String         @unique
  description        String?
  logoUrl            String?
  dataAiHintLogo     String?
  coverImageUrl      String?
  dataAiHintCover    String?
  megaMenuImageUrl   String?
  dataAiHintMegaMenu String?
  hasSubcategories   Boolean        @default(false)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  leiloes            Leilao[]
  lotes              Lote[]
  bens               Bem[]
  subcategorias      Subcategoria[]
  vendasDiretas      VendaDireta[]
  postsBlog          PostBlog[]
}

model Subcategoria {
  id               String       @id @default(cuid())
  name             String
  slug             String       @unique
  description      String?
  displayOrder     Int          @default(0)
  iconUrl          String?
  dataAiHintIcon   String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  categoriaPai     CategoriaLote @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  parentCategoryId String
  lotes            Lote[]
  bens             Bem[]
  iconMediaItem    MediaItem?   @relation(fields: [iconMediaId], references: [id], onDelete: SetNull)
  iconMediaId      String?
}

model Estado {
  id        String    @id @default(cuid())
  name      String    @unique
  uf        String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  cidades   Cidade[]
  lotes     Lote[]
  comarcas  Comarca[]
}

model Cidade {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  ibgeCode  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  estado    Estado   @relation(fields: [stateId], references: [id])
  stateId   String
  lotes     Lote[]
}

// ===================================
// Modelos Auxiliares e de Conteúdo
// ===================================

model VendaDireta {
  id                   String                @id @default(cuid())
  publicId             String                @unique
  title                String
  description          String
  offerType            DirectSaleOfferType
  price                Float?
  minimumOfferPrice    Float?
  status               DirectSaleOfferStatus @default(PENDENTE_APROVACAO)
  locationCity         String?
  locationState        String?
  imageUrl             String?
  dataAiHint           String?
  dataAiHintSellerLogo String?
  sellerLogoUrl        String?
  views                Int?                  @default(0)
  proposalsCount       Int?                  @default(0)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  expiresAt            DateTime?
  vendedor             Vendedor              @relation(fields: [sellerId], references: [id])
  sellerId             String
  categoria            CategoriaLote         @relation(fields: [categoryId], references: [id])
  categoryId           String
  imagemCapa           MediaItem?            @relation(fields: [imageMediaId], references: [id], onDelete: SetNull, name: "DirectSaleMainImage")
  imageMediaId         String?
  galeria              MediaItem[]           @relation("DirectSaleGallery")
}

model MediaItem {
  id                   String        @id @default(cuid())
  fileName             String
  storagePath          String?       @unique
  title                String?
  altText              String?
  caption              String?
  description          String?
  mimeType             String
  sizeBytes            Int
  dimensions           String?
  dataAiHint           String?
  uploadedAt           DateTime      @default(now())
  uploadedBy           Usuario?      @relation(fields: [uploadedById], references: [id], onDelete: SetNull)
  uploadedById         String?
  lotesCapa            Lote[]        @relation("LotMainImage")
  lotesGaleria         Lote[]        @relation("LotGallery")
  bensCapa             Bem[]         @relation("BemMainImage")
  bensGaleria          Bem[]         @relation("BemGallery")
  vendasDiretasCapa    VendaDireta[] @relation("DirectSaleMainImage")
  vendasDiretasGaleria VendaDireta[] @relation("DirectSaleGallery")
  subcategoriasIcone   Subcategoria[]
}

model Notificacao {
  id        String   @id @default(cuid())
  message   String
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())
  usuario   Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([userId])
}

model PostBlog {
  id          String   @id @default(cuid())
  title       String
  content     String
  author      String
  publishedAt DateTime @default(now())
  categoria   CategoriaLote @relation(fields: [categoryId], references: [id])
  categoryId  String
}

model Contato {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Review {
  id              String   @id @default(cuid())
  rating          Int
  comment         String?
  createdAt       DateTime @default(now())
  usuario         Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  lote            Lote     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId           String
  leilao          Leilao   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId       String
}

model QuestaoLote {
  id                          String    @id @default(cuid())
  questionText                String
  answerText                  String?
  isPublic                    Boolean   @default(true)
  createdAt                   DateTime  @default(now())
  answeredAt                  DateTime?
  usuarioPergunta             Usuario   @relation("UserQuestions", fields: [userId], references: [id], onDelete: Cascade)
  userId                      String
  usuarioResposta             Usuario?  @relation("UserAnswers", fields: [answeredByUserId], references: [id], onDelete: SetNull)
  answeredByUserId            String?
  answeredByUserDisplayName   String?
  lote                        Lote      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId                       String
  leilao                      Leilao    @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                   String
}

model ConfiguracoesPlataforma {
  id                        String    @id @default("global")
  siteTitle                 String?
  siteTagline               String?
  galleryImageBasePath      String?
  storageProvider           String?   @default("local") // "local" or "firebase"
  firebaseStorageBucket     String?
  activeThemeName           String?
  temas                     String?   // Antes: Json[]
  platformPublicIdMasks     Json?
  homepageSections          Json[]
  mentalTriggerSettings     Json?
  sectionBadgeVisibility    Json?
  mapSettings               Json?
  biddingSettings           Json?
  searchPaginationType      String?   @default("loadMore")
  searchItemsPerPage        Int?      @default(12)
  searchLoadMoreCount       Int?      @default(12)
  defaultListItemsPerPage   Int?      @default(10)
  showCountdownOnLotDetail  Boolean?  @default(true)
  showCountdownOnCards      Boolean?  @default(true)
  showRelatedLotsOnLotDetail Boolean?  @default(true)
  relatedLotsCount          Int?      @default(5)
  variableIncrementTable    Json[]
  updatedAt                 DateTime  @updatedAt
}

model TemplateDocumento {
  id        String               @id @default(cuid())
  name      String               @unique
  type      DocumentTemplateType
  content   String               @db.Text
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

// ===================================
// Enums
// ===================================

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum BemStatus {
    CADASTRO
    DISPONIVEL
    LOTEADO
    VENDIDO
    REMOVIDO
    INATIVADO
}

enum UserHabilitationStatus {
  PENDENTE_DOCUMENTOS
  PENDENTE_ANALISE
  HABILITADO
  DOCUMENTOS_REJEITADOS
  BLOQUEADO
}

enum UserDocumentStatus {
  NAO_ENVIADO
  SUBMETIDO
  APROVADO
  REJEITADO
  PENDENTE_ANALISE
}

enum UserAccountType {
    PHYSICAL
    LEGAL
    DIRECT_SALE_CONSIGNOR
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ATIVA
  PENDENTE_APROVACAO
  VENDIDA
  EXPIRADA
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}
