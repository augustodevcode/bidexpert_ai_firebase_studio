// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// --- AUTH & USERS ---

model User {
  id                  String           @id @default(uuid())
  email               String           @unique
  password            String
  fullName            String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  accountType         AccountType?
  cpf                 String?          @unique
  dateOfBirth         DateTime?
  razaoSocial         String?
  cnpj                String?          @unique
  inscricaoEstadual   String?
  website             String?
  cellPhone           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  optInMarketing      Boolean?         @default(false)
  badges              String?
  habilitationStatus  UserHabilitationStatus? @default(PENDING_DOCUMENTS)
  roleId              String?
  sellerId            String?          @unique
  auctioneerId        String?          @unique

  role                Role?            @relation(fields: [roleId], references: [id], onDelete: SetNull)
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  uploadedMedia       MediaItem[]      @relation("UserUploader")
  notifications       Notification[]
  questions           LotQuestion[]    @relation("UserQuestions")
  answers             LotQuestion[]    @relation("UserAnswers")
  reviews             Review[]
  maxBids             UserLotMaxBid[]
  blogPosts           BlogPost[]
}

model Permission {
  id          String @id @default(uuid())
  name        String @unique
  description String?
  roles       Role[] @relation(references: [id])
}

model Role {
  id              String       @id @default(uuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  users           User[]
  permissions     Permission[] @relation(references: [id])
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

// --- AUCTIONS & LOTS ---

model Auction {
  id                           String        @id @default(uuid())
  publicId                     String        @unique @default(uuid())
  title                        String
  fullTitle                    String?       @db.Text
  description                  String?       @db.Text
  status                       AuctionStatus @default(RASCUNHO)
  auctionType                  AuctionType?
  auctionDate                  DateTime
  endDate                      DateTime?
  auctionStages                Json?
  city                         String?
  state                        String?
  imageMediaId                 String?       @unique
  imageUrl                     String?
  dataAiHint                   String?
  documentsUrl                 String?
  evaluationReportUrl          String?
  auctionCertificateUrl        String?
  visits                       Int?          @default(0)
  initialOffer                 Float?
  estimatedRevenue             Float?
  achievedRevenue              Float?
  totalHabilitatedUsers        Int?
  softCloseEnabled             Boolean?
  softCloseMinutes             Int?
  automaticBiddingEnabled      Boolean?
  allowInstallmentBids         Boolean?
  isFeaturedOnMarketplace      Boolean?
  marketplaceAnnouncementTitle String?
  additionalTriggers           String?
  decrementAmount              Float?
  decrementIntervalSeconds     Int?
  floorPrice                   Float?
  silentBiddingEnabled         Boolean?
  allowMultipleBidsPerUser     Boolean?
  autoRelistSettings           Json?
  sellingBranch                String?
  vehicleLocation              String?
  categoryId                   String
  auctioneerId                 String
  sellerId                     String?
  judicialProcessId            String?

  category        LotCategory      @relation(fields: [categoryId], references: [id])
  auctioneer      Auctioneer       @relation(fields: [auctioneerId], references: [id])
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  image           MediaItem?       @relation("AuctionImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  lots            Lot[]
  bids            Bid[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lot {
  id                         String    @id @default(uuid())
  publicId                   String    @unique @default(uuid())
  number                     String?
  title                      String
  description                String?   @db.Text
  status                     LotStatus
  price                      Float
  initialPrice               Float?
  secondInitialPrice         Float?
  bidIncrementStep           Float?
  stateId                    String?
  cityId                     String?
  imageMediaId               String?   @unique
  imageUrl                   String?
  dataAiHint                 String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  winningBidTermUrl          String?
  views                      Int?      @default(0)
  bidsCount                  Int?      @default(0)
  isFeatured                 Boolean?
  isExclusive                Boolean?
  discountPercentage         Float?
  additionalTriggers         String?
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?
  judicialProcessNumber      String?
  courtDistrict              String?
  courtName                  String?
  publicProcessUrl           String?
  propertyRegistrationNumber String?
  propertyLiens              String?
  knownDebts                 String?
  additionalDocumentsInfo    String?   @db.Text
  reservePrice               Float?
  evaluationValue            Float?
  debtAmount                 Float?
  itbiValue                  Float?
  endDate                    DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  auctionId                  String
  categoryId                 String
  subcategoryId              String?
  sellerId                   String?
  auctioneerId               String?
  bemIds                     Json?

  auction       Auction      @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category      LotCategory  @relation(fields: [categoryId], references: [id])
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  state         StateInfo?   @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city          CityInfo?    @relation(fields: [cityId], references: [id], onDelete: SetNull)
  image         MediaItem?   @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  bids          Bid[]
  wins          UserWin[]
  reviews       Review[]
  questions     LotQuestion[]
  maxBids       UserLotMaxBid[]
  bens          Bem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bid {
  id            String   @id @default(uuid())
  amount        Float
  timestamp     DateTime @default(now())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String

  lot     Lot     @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder  User    @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String        @id @default(uuid())
  winningBidAmount Float
  winDate          DateTime      @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?
  lotId            String        @unique
  userId           String

  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

// --- SELLERS & AUCTIONEERS ---

model Seller {
  id                         String    @id @default(uuid())
  publicId                   String    @unique @default(uuid())
  name                       String    @unique
  slug                       String    @unique
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  description                String?   @db.Text
  dataAiHintLogo             String?
  isJudicial                 Boolean   @default(false)
  userId                     String?   @unique
  logoMediaId                String?   @unique
  judicialBranchId           String?   @unique
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt

  user                       User?     @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  logo                       MediaItem? @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  judicialBranch             JudicialBranch? @relation(fields: [judicialBranchId], references: [id])
  auctions                   Auction[]
  directSaleOffers           DirectSaleOffer[]
  judicialProcesses          JudicialProcess[]
  bens                       Bem[]
}

model Auctioneer {
  id                   String   @id @default(uuid())
  publicId             String   @unique @default(uuid())
  name                 String   @unique
  slug                 String   @unique
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  description          String?  @db.Text
  dataAiHintLogo       String?
  userId               String?  @unique
  logoMediaId          String?  @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user                 User?      @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  logo                 MediaItem? @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  auctions             Auction[]
}

// --- CATEGORIES & GEOGRAPHY ---

model LotCategory {
  id                   String   @id @default(uuid())
  name                 String   @unique
  slug                 String   @unique
  description          String?
  hasSubcategories     Boolean  @default(false)
  logoMediaId          String?  @unique
  coverImageMediaId    String?  @unique
  megaMenuImageMediaId String?  @unique
  dataAiHintLogo       String?
  dataAiHintCover      String?
  dataAiHintMegaMenu   String?
  itemCount            Int      @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  logo                 MediaItem?        @relation("CategoryLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  coverImage           MediaItem?        @relation("CategoryCoverImage", fields: [coverImageMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  megaMenuImage        MediaItem?        @relation("CategoryMegaMenuImage", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  lots                 Lot[]
  auctions             Auction[]
  bens                 Bem[]
  directSaleOffers     DirectSaleOffer[]
  subcategories        Subcategory[]
}

model Subcategory {
  id               String      @id @default(uuid())
  name             String
  slug             String      @unique
  description      String?
  parentCategoryId String
  itemCount        Int         @default(0)
  displayOrder     Int         @default(0)
  iconUrl          String?
  iconMediaId      String?     @unique
  dataAiHintIcon   String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  parentCategory LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  icon           MediaItem?  @relation("SubcategoryIcon", fields: [iconMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  lots           Lot[]
  bens           Bem[]

  @@unique([parentCategoryId, name])
}

// --- JUDICIAL & BENS ---

model Bem {
  id                         String    @id @default(uuid())
  publicId                   String    @unique @default(uuid())
  title                      String
  description                String?   @db.Text
  status                     BemStatus
  evaluationValue            Float?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  imageUrl                   String?
  imageMediaId               String?   @unique
  galleryImageUrls           Json?
  mediaItemIds               Json?
  dataAiHint                 String?
  plate                      String?
  make                       String?
  model                      String?
  version                    String?
  year                       Int?
  modelYear                  Int?
  mileage                    Int?
  color                      String?
  fuelType                   String?
  transmissionType           String?
  bodyType                   String?
  vin                        String?
  renavam                    String?
  enginePower                String?
  numberOfDoors              Int?
  vehicleOptions             String?
  detranStatus               String?
  debts                      String?
  runningCondition           String?
  bodyCondition              String?
  tiresCondition             String?
  hasKey                     Boolean?
  propertyType               String?
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  area                       Float?
  bedrooms                   Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  amenities                  String?
  serialNumber               String?
  hoursUsed                  Int?
  breed                      String?
  age                        String?
  sex                        String?
  vaccinationStatus          String?
  categoryId                 String
  subcategoryId              String?
  judicialProcessId          String?
  sellerId                   String?
  lotId                      String?
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt

  category        LotCategory      @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller          Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  image           MediaItem?       @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  lot             Lot?             @relation(fields: [lotId], references: [id], onDelete: SetNull)
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

// --- PLATFORM SETTINGS ---

model PlatformSettings {
  id                         String                @id @default("global")
  siteTitle                  String?
  siteTagline                String?
  galleryImageBasePath       String?
  storageProvider            StorageProviderType?  @default(local)
  firebaseStorageBucket      String?
  activeThemeName            String?
  themes                     Json?
  platformPublicIdMasks      Json?
  homepageSections           Json?
  mentalTriggerSettings      Json?
  sectionBadgeVisibility     Json?
  mapSettings                Json?
  biddingSettings            Json?
  searchPaginationType       SearchPaginationType? @default(loadMore)
  searchItemsPerPage         Int?                  @default(12)
  searchLoadMoreCount        Int?                  @default(12)
  showCountdownOnLotDetail   Boolean?
  showCountdownOnCards       Boolean?
  showRelatedLotsOnLotDetail Boolean?
  relatedLotsCount           Int?                  @default(5)
  defaultUrgencyTimerHours   Int?
  variableIncrementTable     Json?
  defaultListItemsPerPage    Int?                  @default(10)
  updatedAt                  DateTime              @updatedAt
}

enum StorageProviderType {
  local
  firebase
}

enum SearchPaginationType {
  loadMore
  numberedPages
}

// --- MEDIA & DOCUMENTS ---

model MediaItem {
  id                        String           @id @default(uuid())
  fileName                  String
  storagePath               String           @unique
  title                     String?
  altText                   String?
  caption                   String?
  description               String?          @db.Text
  mimeType                  String
  sizeBytes                 Int
  dimensions                Json?
  urlOriginal               String?          @db.Text
  urlThumbnail              String?          @db.Text
  urlMedium                 String?          @db.Text
  urlLarge                  String?          @db.Text
  uploadedBy                String?
  uploadedAt                DateTime         @default(now())

  userUploader              User?            @relation("UserUploader", fields: [uploadedBy], references: [id], onDelete: SetNull, onUpdate: NoAction)
  auctionImage              Auction?         @relation("AuctionImage")
  lotImage                  Lot?             @relation("LotImage")
  sellerLogo                Seller?          @relation("SellerLogo")
  auctioneerLogo            Auctioneer?      @relation("AuctioneerLogo")
  bemImage                  Bem?             @relation("BemImage")
  userDocument              UserDocument?    @relation("UserDocumentFile")
  categoryAsLogo            LotCategory?     @relation("CategoryLogo")
  categoryAsCoverImage      LotCategory?     @relation("CategoryCoverImage")
  categoryAsMegaMenuImage   LotCategory?     @relation("CategoryMegaMenuImage")
  subcategoryIcon           Subcategory?     @relation("SubcategoryIcon")
  directSaleOfferImage      DirectSaleOffer? @relation("DirectSaleOfferImage")
}

model UserDocument {
  id              String             @id @default(uuid())
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  rejectionReason String?
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  userId          String
  documentTypeId  String
  fileMediaId     String?            @unique
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType DocumentType @relation(fields: [documentTypeId], references: [id])
  file         MediaItem?   @relation("UserDocumentFile", fields: [fileMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@unique([userId, documentTypeId])
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

model DocumentType {
  id             String         @id @default(uuid())
  name           String         @unique
  description    String?
  isRequired     Boolean        @default(true)
  appliesTo      String?
  allowedFormats String?
  displayOrder   Int            @default(0)
  userDocuments  UserDocument[]
}

// --- JUDICIAL HIERARCHY ---

model Court {
  id        String             @id @default(uuid())
  name      String             @unique
  slug      String             @unique
  stateUf   String
  website   String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  state     StateInfo          @relation(fields: [stateUf], references: [uf])
  districts JudicialDistrict[]
  processes JudicialProcess[]
}

model JudicialDistrict {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  zipCode   String?
  courtId   String
  stateId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  court    Court            @relation(fields: [courtId], references: [id])
  state    StateInfo        @relation(fields: [stateId], references: [id])
  branches JudicialBranch[]
  processes JudicialProcess[]

  @@unique([name, stateId])
}

model JudicialBranch {
  id          String @id @default(uuid())
  name        String
  slug        String @unique
  contactName String?
  phone       String?
  email       String?
  districtId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  district      JudicialDistrict  @relation(fields: [districtId], references: [id])
  processes     JudicialProcess[]
  sellerProfile Seller?

  @@unique([name, districtId])
}

model JudicialProcess {
  id            String   @id @default(uuid())
  publicId      String   @unique @default(uuid())
  processNumber String   @unique
  isElectronic  Boolean
  courtId       String
  districtId    String
  branchId      String
  sellerId      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  court    Court            @relation(fields: [courtId], references: [id])
  district JudicialDistrict @relation(fields: [districtId], references: [id])
  branch   JudicialBranch   @relation(fields: [branchId], references: [id])
  seller   Seller?          @relation(fields: [sellerId], references: [id])
  parties  ProcessParty[]
  bens     Bem[]
  auctions Auction[]
}

model ProcessParty {
  id             String           @id @default(uuid())
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  processId      String

  process JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@unique([processId, name, partyType])
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

// --- OTHER MODELS ---

model Notification {
  id        String   @id @default(uuid())
  message   String
  link      String?
  isRead    Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BlogPost {
  id          String   @id @default(uuid())
  title       String
  content     String   @db.Text
  authorId    String
  slug        String   @unique
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tags        String?

  author User @relation(fields: [authorId], references: [id])
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Review {
  id              String   @id @default(uuid())
  rating          Int
  comment         String?  @db.Text
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])
}

model LotQuestion {
  id                        String   @id @default(uuid())
  questionText              String
  answerText                String?
  isPublic                  Boolean  @default(true)
  lotId                     String
  auctionId                 String
  userId                    String
  userDisplayName           String
  answeredByUserId          String?
  answeredByUserDisplayName String?
  answeredAt                DateTime?
  createdAt                 DateTime @default(now())

  lot            Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user           User @relation("UserQuestions", fields: [userId], references: [id])
  answeredByUser User? @relation("UserAnswers", fields: [answeredByUserId], references: [id], onDelete: SetNull)
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  maxAmount Float
  isActive  Boolean  @default(true)
  userId    String
  lotId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}

model DirectSaleOffer {
  id                   String                @id @default(uuid())
  publicId             String                @unique @default(uuid())
  title                String
  description          String                @db.Text
  offerType            DirectSaleOfferType
  status               DirectSaleOfferStatus
  price                Float?
  minimumOfferPrice    Float?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?               @unique
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  expiresAt            DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  views                Int                   @default(0)
  proposalsCount       Int                   @default(0)
  categoryId           String
  sellerId             String

  seller                   Seller                @relation(fields: [sellerId], references: [id])
  category                 LotCategory           @relation(fields: [categoryId], references: [id])
  image                    MediaItem?            @relation("DirectSaleOfferImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  ACTIVE
  SOLD
  EXPIRED
  PENDING_APPROVAL
}

// GEOGRAPHY

model StateInfo {
  id        String   @id @default(uuid())
  name      String   @unique
  uf        String   @unique
  slug      String   @unique
  cityCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lots      Lot[]
  courts    Court[]
  districts JudicialDistrict[]
}

model CityInfo {
  id        String    @id @default(uuid())
  name      String
  slug      String    @unique
  ibgeCode  String?
  lotCount  Int       @default(0)
  stateId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  state StateInfo @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots  Lot[]
}