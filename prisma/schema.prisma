// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// =================================
//        ENUM DEFINITIONS
// =================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  PENDING_APPROVAL
  ACTIVE
  SOLD
  EXPIRED
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

// =================================
//         MAIN MODELS
// =================================

model User {
  id                   String                   @id @default(uuid())
  email                String                   @unique
  fullName             String
  password             String
  habilitationStatus UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType          AccountType              @default(PHYSICAL)
  roleId               String?
  role                 Role?                    @relation(fields: [roleId], references: [id], onDelete: SetNull)
  cpf                  String?                  @unique
  rgNumber             String?
  rgIssuer             String?
  rgIssueDate          DateTime?
  rgState              String?
  dateOfBirth          DateTime?
  cellPhone            String?
  homePhone            String?
  gender               String?
  profession           String?
  nationality          String?
  maritalStatus        String?
  propertyRegime       String?
  spouseName           String?
  spouseCpf            String?
  zipCode              String?
  street               String?
  number               String?
  complement           String?
  neighborhood         String?
  city                 String?
  state                String?
  status               String?
  optInMarketing       Boolean                  @default(false)
  badges               Json                     @default("[]")
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  avatarUrl            String?
  dataAiHint           String?
  sellerProfile        Seller?
  auctioneerProfile    Auctioneer?
  documents            UserDocument[]
  bids                 Bid[]
  wins                 UserWin[]
  maxBids              UserLotMaxBid[]
  notifications        Notification[]
  posts                BlogPost[]
  reviews              Review[]
  askedQuestions       LotQuestion[]            @relation("AskedByUser")
  answeredQuestions    LotQuestion[]            @relation("AnsweredByUser")
  uploadedMedia        MediaItem[]
}

model Permission {
  id    String @id @default(uuid())
  name  String @unique
  roles Role[]
}

model Role {
  id          String       @id @default(uuid())
  name        String
  name_normalized String   @unique
  description String?
  users       User[]
  permissions Permission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model DocumentType {
  id             String    @id @default(uuid())
  name           String    @unique
  description    String?
  isRequired     Boolean   @default(true)
  appliesTo      Json      @default("[\"PHYSICAL\", \"LEGAL\", \"DIRECT_SALE_CONSIGNOR\"]")
  allowedFormats Json      @default("[]")
  displayOrder   Int       @default(0)
  userDocuments  UserDocument[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model UserDocument {
  id              String             @id @default(uuid())
  userId          String
  documentTypeId  String
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType    DocumentType       @relation(fields: [documentTypeId], references: [id])
  fileUrl         String?
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  rejectionReason String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@unique([userId, documentTypeId])
}

model Auction {
  id                           String        @id @default(uuid())
  publicId                     String        @unique
  title                        String
  fullTitle                    String?       @db.Text
  description                  String?       @db.Text
  status                       AuctionStatus @default(RASCUNHO)
  auctionType                  AuctionType?
  auctionDate                  DateTime
  endDate                      DateTime?
  auctionStages                Json
  imageUrl                     String?
  imageMediaId                 String?       @unique
  dataAiHint                   String?
  documentsUrl                 String?
  evaluationReportUrl          String?
  auctionCertificateUrl        String?
  totalLots                    Int?          @default(0)
  visits                       Int?          @default(0)
  initialOffer                 Float?
  isFeaturedOnMarketplace      Boolean?      @default(false)
  marketplaceAnnouncementTitle String?
  automaticBiddingEnabled      Boolean?      @default(false)
  silentBiddingEnabled         Boolean?      @default(false)
  allowMultipleBidsPerUser     Boolean?      @default(true)
  allowInstallmentBids         Boolean?      @default(false)
  softCloseEnabled             Boolean?      @default(false)
  softCloseMinutes             Int?
  estimatedRevenue             Float?
  achievedRevenue              Float?
  totalHabilitatedUsers        Int?
  additionalTriggers           Json
  city                         String?
  state                        String?
  sellingBranch                String?
  createdAt                    DateTime      @default(now())
  updatedAt                    DateTime      @updatedAt
  categoryId                   String
  auctioneerId                 String
  sellerId                     String?
  judicialProcessId            String?
  image                        MediaItem?    @relation("AuctionImage", fields: [imageMediaId], references: [id])
  category                     LotCategory   @relation(fields: [categoryId], references: [id])
  auctioneer                   Auctioneer    @relation(fields: [auctioneerId], references: [id])
  seller                       Seller?       @relation(fields: [sellerId], references: [id])
  judicialProcess              JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  lots                         Lot[]
  bids                         Bid[]
}

model Lot {
  id                         String    @id @default(uuid())
  publicId                   String    @unique
  title                      String
  number                     String?
  description                String?   @db.Text
  price                      Float
  initialPrice               Float?
  secondInitialPrice         Float?
  bidIncrementStep           Float?
  status                     LotStatus
  views                      Int?      @default(0)
  bidsCount                  Int?      @default(0)
  isFeatured                 Boolean?  @default(false)
  isExclusive                Boolean?  @default(false)
  discountPercentage         Float?
  additionalTriggers         Json
  latitude                   Float?
  longitude                  Float?
  mapAddress                 String?
  mapEmbedUrl                String?
  mapStaticImageUrl          String?
  judicialProcessNumber      String?
  courtDistrict              String?
  courtName                  String?
  publicProcessUrl           String?
  propertyRegistrationNumber String?
  propertyLiens              String?   @db.Text
  knownDebts                 String?   @db.Text
  additionalDocumentsInfo    String?   @db.Text
  reservePrice               Float?
  evaluationValue            Float?
  debtAmount                 Float?
  itbiValue                  Float?
  endDate                    DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?
  dataAiHint                 String?
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
  auctionId                  String
  categoryId                 String
  subcategoryId              String?
  stateId                    String?
  cityId                     String?
  imageMediaId               String?   @unique
  sellerId                   String?
  winningBidTermUrl          String?
  image                      MediaItem? @relation("LotImage", fields: [imageMediaId], references: [id])
  auction                    Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category                   LotCategory @relation(fields: [categoryId], references: [id])
  subcategory                Subcategory? @relation(fields: [subcategoryId], references: [id])
  state                      StateInfo? @relation(fields: [stateId], references: [id])
  city                       CityInfo? @relation(fields: [cityId], references: [id])
  seller                     Seller?   @relation(fields: [sellerId], references: [id])
  mediaItems                 MediaItem[]
  bens                       Bem[]
  bids                       Bid[]
  wins                       UserWin[]
  maxBids                    UserLotMaxBid[]
  reviews                    Review[]
  questions                  LotQuestion[]
}

model Seller {
  id                         String   @id @default(uuid())
  publicId                   String   @unique
  name                       String
  slug                       String   @unique
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                      String?
  zipCode                    String?
  website                    String?
  description                String?  @db.Text
  isJudicial                 Boolean  @default(false)
  memberSince                DateTime?
  rating                     Float?
  activeLotsCount            Int?
  totalSalesValue            Float?
  auctionsFacilitatedCount   Int?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  userId                     String?  @unique
  user                       User?    @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  judicialBranchId           String?  @unique
  judicialBranch             JudicialBranch? @relation(fields: [judicialBranchId], references: [id])
  auctions                   Auction[]
  bens                       Bem[]
  directSaleOffers           DirectSaleOffer[]
  lots                       Lot[]
  judicialProcesses          JudicialProcess[]
  logoMediaId                String?           @unique
  logo                       MediaItem?        @relation("LogoSeller", fields: [logoMediaId], references: [id])
}

model Auctioneer {
  id                     String    @id @default(uuid())
  publicId               String    @unique
  name                   String
  slug                   String    @unique
  registrationNumber     String?
  contactName            String?
  email                  String?
  phone                  String?
  address                String?
  city                   String?
  state                  String?
  zipCode                String?
  website                String?
  description            String?   @db.Text
  memberSince            DateTime?
  rating                 Float?
  auctionsConductedCount Int?
  totalValueSold         Float?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  userId                 String?   @unique
  user                   User?     @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  auctions               Auction[]
  logoMediaId            String?   @unique
  logo                   MediaItem? @relation("LogoAuctioneer", fields: [logoMediaId], references: [id])
}

model JudicialProcess {
  id              String   @id @default(uuid())
  publicId        String   @unique
  processNumber   String   @unique
  isElectronic    Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  courtId         String
  districtId      String
  branchId        String
  sellerId        String?
  court           Court    @relation(fields: [courtId], references: [id])
  district        JudicialDistrict @relation(fields: [districtId], references: [id])
  branch          JudicialBranch @relation(fields: [branchId], references: [id])
  seller          Seller?  @relation(fields: [sellerId], references: [id])
  parties         ProcessParty[]
  bens            Bem[]
  auctions        Auction[]
}

model ProcessParty {
  id             String           @id @default(uuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  process        JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@unique([processId, name, partyType])
}

model Court {
  id                 String             @id @default(uuid())
  name               String
  slug               String             @unique
  stateUf            String
  website            String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  judicialDistricts  JudicialDistrict[]
  judicialProcesses  JudicialProcess[]
}

model JudicialDistrict {
  id                String            @id @default(uuid())
  name              String
  slug              String
  zipCode           String?
  courtId           String
  stateId           String
  court             Court             @relation(fields: [courtId], references: [id])
  state             StateInfo         @relation(fields: [stateId], references: [id])
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]

  @@unique([name, stateId])
}

model JudicialBranch {
  id                String            @id @default(uuid())
  name              String
  slug              String
  contactName       String?
  phone             String?
  email             String?
  districtId        String
  district          JudicialDistrict  @relation(fields: [districtId], references: [id])
  judicialProcesses JudicialProcess[]
  seller            Seller?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@unique([name, districtId])
}

model Bem {
  id                         String   @id @default(uuid())
  publicId                   String   @unique
  title                      String
  description                String?  @db.Text
  status                     BemStatus
  evaluationValue            Float?
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Float?
  longitude                  Float?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  categoryId                 String
  subcategoryId              String?
  judicialProcessId          String?
  sellerId                   String?
  imageMediaId               String?  @unique
  plate                      String?
  make                       String?
  model                      String?
  version                    String?
  year                       Int?
  modelYear                  Int?
  mileage                    Int?
  color                      String?
  fuelType                   String?
  transmissionType           String?
  bodyType                   String?
  vin                        String?
  renavam                    String?
  enginePower                String?
  numberOfDoors              Int?
  vehicleOptions             String?
  detranStatus               String?
  debts                      String?
  runningCondition           String?
  bodyCondition              String?
  tiresCondition             String?
  hasKey                     Boolean?
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?
  infrastructure             String?
  condoDetails               String?
  improvements               String?
  topography                 String?
  liensAndEncumbrances       String?
  propertyDebts              String?
  unregisteredRecords        String?
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  amenities                  Json     @default("[]")
  brand                      String?
  serialNumber               String?
  itemCondition              String?
  specifications             String?
  includedAccessories        String?
  batteryCondition           String?
  hasInvoice                 Boolean?
  hasWarranty                Boolean?
  repairHistory              String?
  applianceCapacity          String?
  voltage                    String?
  applianceType              String?
  additionalFunctions        String?
  hoursUsed                  Int?
  engineType                 String?
  capacityOrPower            String?
  maintenanceHistory         String?
  installationLocation       String?
  compliesWithNR             String?
  operatingLicenses          String?
  breed                      String?
  age                        String?
  sex                        String?
  weight                     String?
  individualId               String?
  purpose                    String?
  sanitaryCondition          String?
  lineage                    String?
  isPregnant                 Boolean?
  specialSkills              String?
  gtaDocument                String?
  breedRegistryDocument      String?
  furnitureType              String?
  material                   String?
  style                      String?
  dimensions                 String?
  pieceCount                 Int?
  jewelryType                String?
  metal                      String?
  gemstones                  String?
  totalWeight                String?
  jewelrySize                String?
  authenticityCertificate    String?
  workType                   String?
  artist                     String?
  period                     String?
  technique                  String?
  provenance                 String?
  boatType                   String?
  boatLength                 String?
  hullMaterial               String?
  onboardEquipment           String?
  productName                String?
  quantity                   String?
  packagingType              String?
  expirationDate             DateTime?
  storageConditions          String?
  preciousMetalType          String?
  purity                     String?
  forestGoodsType            String?
  volumeOrQuantity           String?
  species                    String?
  dofNumber                  String?
  image                      MediaItem? @relation("BemImage", fields: [imageMediaId], references: [id])
  category                   LotCategory @relation(fields: [categoryId], references: [id])
  subcategory                Subcategory? @relation(fields: [subcategoryId], references: [id])
  judicialProcess            JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller                     Seller? @relation(fields: [sellerId], references: [id])
  mediaItems                 MediaItem[]
  lots                       Lot[]
}


// =================================
//     SUPPORT & CATALOG MODELS
// =================================

model LotCategory {
  id                   String   @id @default(uuid())
  name                 String   @unique
  slug                 String   @unique
  description          String?
  itemCount            Int?     @default(0)
  hasSubcategories     Boolean? @default(false)
  logoMediaId          String?  @unique
  coverImageMediaId    String?  @unique
  megaMenuImageMediaId String?  @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  auctions             Auction[]
  lots                 Lot[]
  bens                 Bem[]
  directSaleOffers     DirectSaleOffer[]
  subcategories        Subcategory[]
  logo                 MediaItem? @relation("LogoCategory", fields: [logoMediaId], references: [id])
  coverImage           MediaItem? @relation("CoverCategory", fields: [coverImageMediaId], references: [id])
  megaMenuImage        MediaItem? @relation("MegaMenuCategory", fields: [megaMenuImageMediaId], references: [id])
}

model Subcategory {
  id               String      @id @default(uuid())
  name             String
  slug             String
  description      String?
  itemCount        Int?        @default(0)
  displayOrder     Int?        @default(0)
  parentCategoryId String
  iconMediaId      String?     @unique
  parentCategory   LotCategory @relation(fields: [parentCategoryId], references: [id])
  icon             MediaItem?  @relation("IconSubcategory", fields: [iconMediaId], references: [id])
  lots             Lot[]
  bens             Bem[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@unique([name, parentCategoryId])
}

model StateInfo {
  id        String   @id @default(uuid())
  name      String   @unique
  uf        String   @unique
  slug      String   @unique
  cityCount Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cities    CityInfo[]
  lots      Lot[]
  districts JudicialDistrict[]
}

model CityInfo {
  id        String   @id @default(uuid())
  name      String
  slug      String
  stateId   String
  stateUf   String
  ibgeCode  String?  @unique
  lotCount  Int?     @default(0)
  state     StateInfo @relation(fields: [stateId], references: [id])
  lots      Lot[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, stateId])
}

model MediaItem {
  id                  String           @id @default(uuid())
  fileName            String
  storagePath         String?          @unique
  uploadedAt          DateTime         @default(now())
  uploadedById        String?
  uploadedBy          User?            @relation(fields: [uploadedById], references: [id], onDelete: SetNull)
  title               String?
  altText             String?
  caption             String?
  description         String?
  mimeType            String
  sizeBytes           Int
  urlOriginal         String           @db.Text
  urlThumbnail        String?          @db.Text
  urlMedium           String?          @db.Text
  urlLarge            String?          @db.Text
  dataAiHint          String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  auctionImage        Auction?         @relation("AuctionImage")
  lotImage            Lot?             @relation("LotImage")
  bemImage            Bem?             @relation("BemImage")
  logoSeller          Seller?          @relation("LogoSeller")
  logoAuctioneer      Auctioneer?      @relation("LogoAuctioneer")
  logoCategory        LotCategory?     @relation("LogoCategory")
  coverCategory       LotCategory?     @relation("CoverCategory")
  megaMenuCategory    LotCategory?     @relation("MegaMenuCategory")
  iconSubcategory     Subcategory?     @relation("IconSubcategory")
  offerImage          DirectSaleOffer? @relation("OfferImage")
  lots                Lot[]
  bens                Bem[]
}


// =================================
//    TRANSACTIONAL & LOGGING MODELS
// =================================

model Bid {
  id            String   @id @default(uuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String        @id @default(uuid())
  lotId            String        @unique // A lot can only be won once
  userId           String
  winningBidAmount Float
  winDate          DateTime
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?
  lot              Lot           @relation(fields: [lotId], references: [id])
  user             User          @relation(fields: [userId], references: [id])
}

model DirectSaleOffer {
  id                   String                @id @default(uuid())
  publicId             String                @unique
  title                String
  description          String                @db.Text
  offerType            DirectSaleOfferType
  status               DirectSaleOfferStatus
  price                Float?
  minimumOfferPrice    Float?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?               @unique
  dataAiHint           String?
  galleryImageUrls     Json
  mediaItemIds         Json
  itemsIncluded        Json
  tags                 Json
  views                Int?                  @default(0)
  proposalsCount       Int?                  @default(0)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  expiresAt            DateTime?
  categoryId           String
  sellerId             String
  image                MediaItem?            @relation("OfferImage", fields: [imageMediaId], references: [id])
  category             LotCategory           @relation(fields: [categoryId], references: [id])
  seller               Seller                @relation(fields: [sellerId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BlogPost {
  id          String   @id @default(uuid())
  publicId    String   @unique
  title       String
  slug        String   @unique
  content     String   @db.LongText
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  tags        Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id              String   @id @default(uuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                      String   @id @default(uuid())
  lotId                   String
  auctionId               String
  userId                  String
  userDisplayName         String
  questionText            String
  isPublic                Boolean  @default(true)
  answerText              String?  @db.Text
  answeredAt              DateTime?
  answeredByUserId        String?
  answeredByUserDisplayName String?
  createdAt               DateTime @default(now())
  lot                     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  userAsker               User     @relation("AskedByUser", fields: [userId], references: [id], onDelete: Cascade)
  userAnswerer            User?    @relation("AnsweredByUser", fields: [answeredByUserId], references: [id])
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}


// =================================
//        PLATFORM SETTINGS
// =================================

model PlatformSettings {
  id                           String  @id @default("global")
  siteTitle                    String?
  siteTagline                  String?
  galleryImageBasePath         String?
  storageProvider              String?
  firebaseStorageBucket        String?
  activeThemeName              String?
  themes                       Json    @default("[]")
  platformPublicIdMasks        Json?
  homepageSections             Json    @default("[]")
  mentalTriggerSettings        Json?
  sectionBadgeVisibility       Json?
  mapSettings                  Json?
  biddingSettings              Json?
  searchPaginationType         String?
  searchItemsPerPage           Int?
  searchLoadMoreCount          Int?
  showCountdownOnLotDetail     Boolean?
  showCountdownOnCards         Boolean?
  showRelatedLotsOnLotDetail   Boolean?
  relatedLotsCount             Int?
  variableIncrementTable       Json    @default("[]")
  defaultListItemsPerPage      Int?
  updatedAt                    DateTime @updatedAt
}

    