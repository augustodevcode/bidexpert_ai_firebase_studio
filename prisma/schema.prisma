// prisma/schema.prisma

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// ======================================
// ENUMS
// ======================================
enum UserAccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDENTE_DOCUMENTOS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  PENDING_APPROVAL
  ACTIVE
  SOLD
  EXPIRED
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}


// ======================================
// AUTH & USER MODELS
// ======================================
model User {
  id                  String  @id @default(uuid())
  email               String  @unique
  fullName            String
  password            String
  roleId              String?
  sellerProfileId     String? @unique
  auctioneerProfileId String? @unique

  habilitationStatus  UserHabilitationStatus @default(PENDENTE_DOCUMENTOS)
  accountType         UserAccountType?
  
  cpf                 String?
  rgNumber            String?
  rgIssuer            String?
  rgIssueDate         DateTime?
  rgState             String?
  dateOfBirth         DateTime?
  cellPhone           String?
  homePhone           String?
  gender              String?
  profession          String?
  nationality         String?
  maritalStatus       String?
  propertyRegime      String?
  spouseName          String?
  spouseCpf           String?

  razaoSocial         String?
  cnpj                String?
  inscricaoEstadual   String?
  website             String?

  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?

  status              String?
  optInMarketing      Boolean?
  avatarUrl           String?
  badges              String[] @default([])

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  role                Role?             @relation(fields: [roleId], references: [id], onDelete: SetNull)
  sellerProfile       Seller?           @relation(fields: [sellerProfileId], references: [id], onDelete: SetNull)
  auctioneerProfile   Auctioneer?       @relation(fields: [auctioneerProfileId], references: [id], onDelete: SetNull)
  
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  maxBids             UserLotMaxBid[]   @relation("UserMaxBids")
  notifications       Notification[]
  mediaItems          MediaItem[]
  reviews             Review[]
  questions           LotQuestion[]
  answeredQuestions   LotQuestion[]     @relation("AnsweredBy")
  blogPosts           BlogPost[]        @relation("UserBlogPosts")
}

model Role {
  id              String   @id @default(uuid())
  name            String   @unique
  name_normalized String   @unique
  description     String?
  permissions     String[]
  users           User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DocumentType {
  id             String    @id @default(uuid())
  name           String    @unique
  description    String?
  isRequired     Boolean   @default(true)
  appliesTo      String?
  allowedFormats String?
  displayOrder   Int?

  userDocuments UserDocument[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserDocument {
  id              String             @id @default(uuid())
  userId          String
  documentTypeId  String
  fileUrl         String?
  fileName        String?
  status          UserDocumentStatus @default(NOT_SENT)
  uploadDate      DateTime?
  analysisDate    DateTime?
  analystId       String?
  rejectionReason String?

  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType  DocumentType @relation(fields: [documentTypeId], references: [id], onDelete: Restrict)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, documentTypeId])
}


// ======================================
// GEOGRAPHIC & CATEGORY MODELS
// ======================================

model State {
  id        String @id @default(uuid())
  name      String @unique
  uf        String @unique
  slug      String @unique
  cityCount Int?

  cities    City[]
  courts    Court[]
  districts JudicialDistrict[]
  lots      Lot[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id      String    @id @default(uuid())
  name    String
  slug    String    @unique
  stateId String
  stateUf String
  ibgeCode String?
  lotCount Int?

  state   StateInfo @relation(fields: [stateId], references: [id])
  lots    Lot[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([stateId])
}

model LotCategory {
  id                 String  @id @default(uuid())
  name               String  @unique
  slug               String  @unique
  description        String?
  itemCount          Int?
  hasSubcategories   Boolean?
  logoUrl            String?
  coverImageUrl      String?
  megaMenuImageUrl   String?
  dataAiHintLogo     String?
  dataAiHintCover    String?
  dataAiHintMegaMenu String?

  auctions        Auction[]
  lots            Lot[]
  subcategories   Subcategory[]
  directSaleOffers DirectSaleOffer[]
  blogPosts       BlogPost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subcategory {
  id               String  @id @default(uuid())
  name             String
  slug             String  @unique
  description      String?
  parentCategoryId String
  itemCount        Int?
  displayOrder     Int?
  iconUrl          String?
  iconMediaId      String?
  dataAiHintIcon   String?

  parentCategory LotCategory @relation(fields: [parentCategoryId], references: [id])
  lots           Lot[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([parentCategoryId])
}


// ======================================
// JUDICIAL ENTITY MODELS
// ======================================

model Court {
  id      String @id @default(uuid())
  name    String @unique
  slug    String @unique
  stateUf String
  website String?
  
  districts  JudicialDistrict[]
  processes  JudicialProcess[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JudicialDistrict {
  id      String  @id @default(uuid())
  name    String
  slug    String  @unique
  courtId String
  stateId String
  zipCode String?

  court   Court   @relation(fields: [courtId], references: [id])
  state   State   @relation(fields: [stateId], references: [id])
  branches JudicialBranch[]
  processes JudicialProcess[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courtId])
  @@index([stateId])
}

model JudicialBranch {
  id           String @id @default(uuid())
  name         String
  slug         String @unique
  districtId   String
  contactName  String?
  phone        String?
  email        String?
  
  district   JudicialDistrict @relation(fields: [districtId], references: [id])
  sellers    Seller[]
  processes  JudicialProcess[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([districtId])
}

model JudicialProcess {
  id            String  @id @default(uuid())
  publicId      String  @unique @default(cuid())
  processNumber String  @unique
  isElectronic  Boolean?
  
  courtId       String
  districtId    String
  branchId      String
  sellerId      String?
  
  court    Court          @relation(fields: [courtId], references: [id])
  district JudicialDistrict @relation(fields: [districtId], references: [id])
  branch   JudicialBranch @relation(fields: [branchId], references: [id])
  seller   Seller?        @relation(fields: [sellerId], references: [id])
  
  parties ProcessParty[]
  bens    Bem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([courtId])
  @@index([districtId])
  @@index([branchId])
  @@index([sellerId])
}

model ProcessParty {
  id              String           @id @default(uuid())
  processId       String
  name            String
  partyType       ProcessPartyType
  documentNumber  String?

  process         JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([processId, name, partyType])
}


// ======================================
// AUCTIONEER & SELLER MODELS
// ======================================

model Seller {
  id                       String    @id @default(uuid())
  publicId                 String    @unique
  name                     String
  slug                     String    @unique
  contactName              String?
  email                    String?
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  logoMediaId              String?   @unique
  dataAiHintLogo           String?
  description              String?
  memberSince              DateTime?
  rating                   Float?
  activeLotsCount          Int?
  totalSalesValue          Float?
  auctionsFacilitatedCount Int?
  isJudicial               Boolean   @default(false)

  userId                   String?            @unique
  judicialBranchId         String?

  user                User?               
  judicialBranch      JudicialBranch?     @relation(fields: [judicialBranchId], references: [id])
  auctions            Auction[]
  directSaleOffers    DirectSaleOffer[]
  bens                Bem[]
  judicialProcesses   JudicialProcess[]
  logo                MediaItem?          @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  blogPosts           BlogPost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([judicialBranchId])
}

model Auctioneer {
  id                     String    @id @default(uuid())
  publicId               String    @unique
  name                   String
  slug                   String    @unique
  registrationNumber     String?
  contactName            String?
  email                  String?
  phone                  String?
  address                String?
  city                   String?
  state                  String?
  zipCode                String?
  website                String?
  logoMediaId            String?   @unique
  dataAiHintLogo         String?
  description            String?
  memberSince            DateTime?
  rating                 Float?
  auctionsConductedCount Int?
  totalValueSold         Float?
  
  userId               String?      @unique

  user                 User?
  auctions             Auction[]
  logo                 MediaItem?   @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// ======================================
// CORE AUCTION & LOT MODELS
// ======================================

model Auction {
  id                   String       @id @default(uuid())
  publicId             String       @unique
  title                String
  fullTitle            String?
  description          String?
  status               AuctionStatus
  auctionType          AuctionType?
  categoryId           String
  auctioneerId         String
  sellerId             String?
  judicialProcessId    String?

  auctionDate          DateTime
  endDate              DateTime?
  auctionStages        Json?

  city                 String?
  state                String?
  imageUrl             String?
  imageMediaId         String?      @unique
  documentsUrl         String?
  evaluationReportUrl  String?
  auctionCertificateUrl String?
  dataAiHint           String?
  
  totalLots            Int?
  visits               Int?         @default(0)
  initialOffer         Float?
  
  automaticBiddingEnabled    Boolean?
  silentBiddingEnabled       Boolean? @default(false)
  allowMultipleBidsPerUser   Boolean? @default(true)
  allowInstallmentBids       Boolean?
  softCloseEnabled           Boolean? @default(false)
  softCloseMinutes           Int?
  
  estimatedRevenue           Float?
  achievedRevenue            Float?
  totalHabilitatedUsers      Int?
  
  isFeaturedOnMarketplace      Boolean? @default(false)
  marketplaceAnnouncementTitle String?
  
  additionalTriggers   String[] @default([])

  category        LotCategory        @relation(fields: [categoryId], references: [id])
  auctioneer      Auctioneer         @relation(fields: [auctioneerId], references: [id])
  seller          Seller?            @relation(fields: [sellerId], references: [id])
  judicialProcess JudicialProcess?   @relation(fields: [judicialProcessId], references: [id])
  
  lots            Lot[]
  bids            Bid[]
  reviews         Review[]
  questions       LotQuestion[]
  
  coverImage      MediaItem?         @relation("AuctionCoverImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@index([categoryId])
  @@index([auctioneerId])
  @@index([sellerId])
  @@index([judicialProcessId])
  @@index([status])
}

model Lot {
  id                   String    @id @default(uuid())
  publicId             String    @unique
  title                String
  number               String?
  description          String?
  status               LotStatus
  price                Float     @default(0)
  initialPrice         Float?
  secondInitialPrice   Float?
  bidIncrementStep     Float?    @default(100)

  auctionId            String
  categoryId           String
  subcategoryId        String?
  sellerId             String?
  
  stateId              String?
  cityId               String?

  isFeatured           Boolean?  @default(false)
  isExclusive          Boolean?  @default(false)
  isSuspended          Boolean?  @default(false)
  discountPercentage   Float?
  additionalTriggers   String[]
  
  imageMediaId         String?   @unique
  imageUrl             String?
  dataAiHint           String?
  mediaItemIds         String[]  @default([])
  
  latitude             Float?
  longitude            Float?
  mapAddress           String?
  mapEmbedUrl          String?
  mapStaticImageUrl    String?
  
  judicialProcessNumber      String?
  courtDistrict              String?
  courtName                  String?
  publicProcessUrl           String?
  propertyRegistrationNumber String?
  propertyLiens              String?
  knownDebts                 String?
  additionalDocumentsInfo    String?
  winningBidTermUrl          String?

  reservePrice         Float?
  evaluationValue      Float?
  debtAmount           Float?
  itbiValue            Float?

  views                Int?      @default(0)
  bidsCount            Int?      @default(0)

  bens                 Bem[]     @relation(fields: [bemIds], references: [id])
  bemIds               String[]

  auction              Auction      @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category             LotCategory  @relation(fields: [categoryId], references: [id])
  subcategory          Subcategory? @relation(fields: [subcategoryId], references: [id])
  state                StateInfo?   @relation(fields: [stateId], references: [id])
  city                 CityInfo?    @relation(fields: [cityId], references: [id])

  bids                 Bid[]
  reviews              Review[]
  questions            LotQuestion[]
  wins                 UserWin[]
  maxBids              UserLotMaxBid[] @relation("LotMaxBids")
  
  coverImage           MediaItem?   @relation("LotCoverImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt

  @@index([auctionId])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([status])
  @@index([price])
}

model Bem {
  id                   String @id @default(uuid())
  publicId             String @unique
  title                String
  description          String?
  status               BemStatus
  
  categoryId           String?
  subcategoryId        String?
  judicialProcessId    String?
  sellerId             String?
  
  evaluationValue      Float?
  imageUrl             String?
  imageMediaId         String?   @unique
  galleryImageUrls     Json?
  mediaItemIds         Json?
  dataAiHint           String?
  
  locationCity         String?
  locationState        String?
  address              String?
  latitude             Float?
  longitude            Float?
  
  // Veículos
  plate                String?
  make                 String?
  model                String?
  version              String?
  year                 Int?
  modelYear            Int?
  mileage              Int?
  color                String?
  fuelType             String?
  transmissionType     String?
  bodyType             String?
  vin                  String?
  renavam              String?
  enginePower          String?
  numberOfDoors        Int?
  vehicleOptions       String?
  detranStatus         String?
  debts                String?
  runningCondition     String?
  bodyCondition        String?
  tiresCondition       String?
  hasKey               Boolean?
  
  // Imóveis
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean?
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?
  infrastructure             String?
  condoDetails               String?
  improvements               String?
  topography                 String?
  liensAndEncumbrances       String?
  propertyDebts              String?
  unregisteredRecords        String?
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  
  // Eletrônicos
  brand                String?
  serialNumber         String?
  itemCondition        String?
  specifications       String?
  includedAccessories  String?
  batteryCondition     String?
  hasInvoice           Boolean?
  hasWarranty          Boolean?
  repairHistory        String?
  
  // Eletrodomésticos
  applianceCapacity    String?
  voltage              String?
  applianceType        String?
  additionalFunctions  String?

  // Máquinas e Equipamentos
  hoursUsed            Int?
  engineType           String?
  capacityOrPower      String?
  maintenanceHistory   String?
  installationLocation String?
  compliesWithNR       String?
  operatingLicenses    String?

  // Semoventes
  breed                  String?
  age                    String?
  sex                    String?
  weight                 String?
  individualId           String?
  purpose                String?
  sanitaryCondition      String?
  lineage                String?
  isPregnant             Boolean?
  specialSkills          String?
  gtaDocument            String?
  breedRegistryDocument  String?

  // Móveis
  furnitureType        String?
  material             String?
  style                String?
  dimensions           String?
  pieceCount           Int?

  // Joias
  jewelryType          String?
  metal                String?
  gemstones            String?
  totalWeight          String?
  jewelrySize          String?
  authenticityCertificate String?
  
  // Obras de Arte
  workType             String?
  artist               String?
  period               String?
  technique            String?
  provenance           String?
  
  // Embarcações
  boatType             String?
  boatLength           String?
  hullMaterial         String?
  onboardEquipment     String?

  // Alimentos
  productName          String?
  quantity             String?
  packagingType        String?
  expirationDate       DateTime?
  storageConditions    String?

  // Metais e Pedras Preciosas
  preciousMetalType    String?
  purity               String?

  // Bens Florestais
  forestGoodsType      String?
  volumeOrQuantity     String?
  species              String?
  dofNumber            String?

  category          LotCategory?     @relation(fields: [categoryId], references: [id])
  subcategory       Subcategory?     @relation(fields: [subcategoryId], references: [id])
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  seller            Seller?          @relation(fields: [sellerId], references: [id])
  lots              Lot[]            @relation(fields: [lotIds], references: [id])
  lotIds            String[]

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@index([categoryId])
  @@index([judicialProcessId])
  @@index([sellerId])
}

model UserLotMaxBid {
  id         String   @id @default(uuid())
  userId     String
  lotId      String
  maxAmount  Float
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation("UserMaxBids", fields: [userId], references: [id])
  lot        Lot      @relation("LotMaxBids", fields: [lotId], references: [id])

  @@unique([userId, lotId])
}


// ======================================
// INTERACTION MODELS
// ======================================

model Bid {
  id            String   @id @default(uuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())

  lot     Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user    User @relation(fields: [bidderId], references: [id], onDelete: Cascade)

  @@index([lotId])
  @@index([bidderId])
}

model UserWin {
  id                String        @id @default(uuid())
  lotId             String        @unique
  userId            String
  winningBidAmount  Float
  winDate           DateTime      @default(now())
  paymentStatus     PaymentStatus @default(PENDENTE)
  invoiceUrl        String?
  
  lot Lot  @relation(fields: [lotId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Review {
  id              String   @id @default(uuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String?
  
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([lotId])
  @@index([userId])
}

model LotQuestion {
  id            String   @id @default(uuid())
  lotId         String
  auctionId     String
  userId        String
  userDisplayName String
  questionText  String
  answerText    String?
  answeredAt    DateTime?
  answeredByUserId String?
  answeredByUserDisplayName String?
  isPublic      Boolean  @default(true)

  lot     Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answeredBy User?  @relation("AnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([lotId])
}


// ======================================
// CONTENT & NOTIFICATION MODELS
// ======================================

model MediaItem {
  id             String    @id @default(uuid())
  fileName       String
  storagePath    String?
  title          String?
  altText        String?
  caption        String?
  description    String?
  mimeType       String
  sizeBytes      Int
  dimensions     Json?
  urlOriginal    String?
  urlThumbnail   String?
  urlMedium      String?
  urlLarge       String?
  dataAiHint     String?
  uploadedBy     String?

  user           User?     @relation(fields: [uploadedBy], references: [id], onDelete: SetNull, onUpdate: NoAction)
  
  AuctioneerLogo Auctioneer[] @relation("AuctioneerLogo")
  SellerLogo     Seller[]     @relation("SellerLogo")
  AuctionCover   Auction[]    @relation("AuctionCoverImage")
  LotCover       Lot[]        @relation("LotCoverImage")
  BlogPostFeatured BlogPost[]

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([uploadedBy])
}


model Notification {
  id      String   @id @default(uuid())
  userId  String
  message String
  link    String?
  isRead  Boolean  @default(false)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String
  isRead    Boolean  @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model BlogPost {
  id           String @id @default(uuid())
  publicId     String @unique
  title        String
  slug         String @unique
  content      String @db.Text
  excerpt      String?
  status       String @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  publishedAt  DateTime?
  authorId     String
  categoryId   String?
  featuredImageId String? @unique

  author        User        @relation("UserBlogPosts", fields: [authorId], references: [id])
  category      LotCategory? @relation(fields: [categoryId], references: [id])
  featuredImage MediaItem?  @relation(fields: [featuredImageId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([authorId])
  @@index([categoryId])
}

// ======================================
// PLATFORM SETTINGS MODEL
// ======================================
model PlatformSettings {
  id                         String   @id @default("global")
  siteTitle                  String?
  siteTagline                String?
  galleryImageBasePath       String?
  storageProvider            String?
  firebaseStorageBucket      String?
  activeThemeName            String?
  themes                     Json? // Store Theme[] as JSON
  platformPublicIdMasks      Json? // Store masks as JSON
  homepageSections           Json?
  mentalTriggerSettings      Json?
  sectionBadgeVisibility     Json?
  mapSettings                Json?
  biddingSettings            Json?
  searchPaginationType       String?
  searchItemsPerPage         Int?
  searchLoadMoreCount        Int?
  showCountdownOnLotDetail   Boolean?
  showCountdownOnCards       Boolean?
  showRelatedLotsOnLotDetail Boolean?
  relatedLotsCount           Int?
  variableIncrementTable     Json?
  defaultListItemsPerPage    Int?
  defaultUrgencyTimerHours   Int?

  updatedAt DateTime @updatedAt
}

```
