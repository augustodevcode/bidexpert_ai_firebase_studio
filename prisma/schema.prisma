// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// AUTHENTICATION & USERS
model User {
  id                  String  @id @default(cuid())
  email               String  @unique
  fullName            String?
  password            String
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         UserAccountType @default(PHYSICAL)
  optInMarketing      Boolean? @default(false)
  badges              String? @db.Text // Storing as comma-separated string for MySQL

  // Personal Info (PF)
  cpf         String? @unique
  dateOfBirth DateTime?
  rgNumber    String?
  rgIssuer    String?
  rgIssueDate DateTime?
  rgState     String?
  gender      String?
  profession  String?
  nationality String?
  maritalStatus String?
  propertyRegime String?
  spouseName  String?
  spouseCpf   String?

  // Company Info (PJ)
  razaoSocial       String?
  cnpj              String? @unique
  inscricaoEstadual String?
  website           String?

  // Address
  zipCode      String?
  street       String?
  number       String?
  complement   String?
  neighborhood String?
  city         String?
  state        String?

  // Relationships
  roleId              String?
  role                Role?             @relation(fields: [roleId], references: [id], onDelete: SetNull)
  sellerProfile       Seller?
  auctioneerProfile   Auctioneer?
  documents           UserDocument[]
  bids                Bid[]
  wins                UserWin[]
  maxBids             UserLotMaxBid[]
  notifications       Notification[]
  reviews             Review[]
  questions           LotQuestion[]
  answeredQuestions   LotQuestion[]     @relation("AnsweredBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  users           User[]
  permissions     Permission[] // Implicit many-to-many

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  roles       Role[]  // Implicit many-to-many

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// USER HABILITATION
model UserDocument {
  id              String             @id @default(cuid())
  userId          String
  documentTypeId  String
  fileUrl         String
  fileName        String?
  status          UserDocumentStatus @default(SUBMITTED)
  rejectionReason String?
  analysisDate    DateTime?
  analystId       String?

  // Relationships
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType DocumentType @relation(fields: [documentTypeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, documentTypeId])
}

model DocumentType {
  id             String           @id @default(cuid())
  name           String           @unique
  description    String?
  isRequired     Boolean          @default(true)
  allowedFormats String? // e.g., "pdf,jpg,png"
  displayOrder   Int              @default(0)
  appliesTo      String?          @default("PHYSICAL,LEGAL") // Comma-separated: PHYSICAL, LEGAL
  userDocuments  UserDocument[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// AUCTIONS & LOTS
model Auction {
  id                           String        @id @default(cuid())
  publicId                     String        @unique @default(cuid())
  title                        String
  fullTitle                    String?       @db.Text
  description                  String?       @db.Text
  status                       AuctionStatus @default(RASCUNHO)
  auctionType                  AuctionType?
  auctionDate                  DateTime
  endDate                      DateTime?
  visits                       Int?          @default(0)
  totalLots                    Int?          @default(0)
  initialOffer                 Float?
  isFavorite                   Boolean?      @default(false)
  bidsCount                    Int?          @default(0)
  sellingBranch                String?
  vehicleLocation              String?
  documentsUrl                 String?
  evaluationReportUrl          String?
  auctionCertificateUrl        String?
  automaticBiddingEnabled      Boolean?      @default(false)
  silentBiddingEnabled         Boolean?      @default(false)
  allowMultipleBidsPerUser     Boolean?      @default(true)
  allowInstallmentBids         Boolean?      @default(false)
  softCloseEnabled             Boolean?      @default(false)
  softCloseMinutes             Int?          @default(2)
  estimatedRevenue             Float?
  achievedRevenue              Float?
  totalHabilitatedUsers        Int?
  isFeaturedOnMarketplace      Boolean?      @default(false)
  marketplaceAnnouncementTitle String?
  additionalTriggers           String?       @db.Text // Comma-separated string for MySQL
  decrementAmount              Float?        // For Dutch auctions
  decrementIntervalSeconds     Int?          // For Dutch auctions
  floorPrice                   Float?        // For Dutch auctions
  imageUrl                     String?
  dataAiHint                   String?

  // JSON fields
  auctionStages Json?

  // Relationships
  categoryId        String?
  auctioneerId      String?
  sellerId          String?
  judicialProcessId String?
  imageMediaId      String?           @unique
  
  category          LotCategory?      @relation(fields: [categoryId], references: [id])
  auctioneer        Auctioneer?       @relation(fields: [auctioneerId], references: [id])
  seller            Seller?           @relation(fields: [sellerId], references: [id])
  judicialProcess   JudicialProcess?  @relation(fields: [judicialProcessId], references: [id])
  image             MediaItem?        @relation("AuctionImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  lots              Lot[]
  bids              Bid[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lot {
  id                String    @id @default(cuid())
  publicId          String    @unique @default(cuid())
  title             String
  number            String?
  description       String?   @db.Text
  price             Float
  initialPrice      Float?
  secondInitialPrice Float?
  status            LotStatus
  views             Int?      @default(0)
  bidsCount         Int?      @default(0)
  isFeatured        Boolean?  @default(false)
  isExclusive       Boolean?  @default(false)
  discountPercentage Float?
  additionalTriggers String?   @db.Text // Comma-separated string
  bidIncrementStep  Float?
  winningBidTermUrl String?
  dataAiHint        String?
  condition         String?
  
  // Dates
  endDate                DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate      DateTime?
  
  // Location
  latitude  Float?
  longitude Float?
  mapAddress String?
  mapEmbedUrl String? @db.Text
  mapStaticImageUrl String?

  // Judicial Info
  judicialProcessNumber     String?
  courtDistrict             String?
  courtName                 String?
  publicProcessUrl          String?
  propertyRegistrationNumber String?
  propertyLiens             String? @db.Text
  knownDebts                String? @db.Text
  additionalDocumentsInfo   String? @db.Text

  // Financial
  reservePrice      Float?
  evaluationValue   Float?
  debtAmount        Float?
  itbiValue         Float?

  // Vehicle Specific
  year              Int?
  make              String?
  model             String?
  series            String?
  stockNumber       String?
  sellingBranch     String?
  vin               String?
  vinStatus         String?
  lossType          String?
  primaryDamage     String?
  titleInfo         String?
  titleBrand        String?
  startCode         String?
  hasKey            Boolean?
  odometer          String?
  airbagsStatus     String?
  bodyStyle         String?
  engineDetails     String?
  transmissionType  String?
  driveLineType     String?
  fuelType          String?
  cylinders         String?
  restraintSystem   String?
  exteriorInteriorColor String?
  options           String? @db.Text
  manufacturedIn    String?
  vehicleClass      String?
  vehicleLocationInBranch String?
  laneRunNumber     String?
  aisleStall        String?
  actualCashValue   String?
  estimatedRepairCost String?

  // JSON fields
  galleryImageUrls Json?
  mediaItemIds     Json?
  bemIds           Json?

  // Relationships
  auctionId         String
  categoryId        String?
  subcategoryId     String?
  stateId           String?
  cityId            String?
  sellerId          String?
  auctioneerId      String?
  imageMediaId      String? @unique
  
  auction           Auction         @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category          LotCategory?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory       Subcategory?    @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  state             StateInfo?      @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city              CityInfo?       @relation(fields: [cityId], references: [id], onDelete: SetNull)
  image             MediaItem?      @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)
  bids              Bid[]
  wins              UserWin[]
  maxBids           UserLotMaxBid[]
  reviews           Review[]
  questions         LotQuestion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Seller {
  id            String    @id @default(cuid())
  publicId      String    @unique @default(cuid())
  name          String
  slug          String    @unique
  contactName   String?
  email         String?
  phone         String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  website       String?
  description   String?   @db.Text
  isJudicial    Boolean   @default(false)

  // Relationships
  userId                   String?            @unique
  logoMediaId              String?            @unique
  judicialBranchId         String?            @unique
  
  user                       User?              @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  logo                       MediaItem?         @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  judicialBranch             JudicialBranch?    @relation(fields: [judicialBranchId], references: [id])
  auctions                   Auction[]
  bens                       Bem[]
  directSaleOffers           DirectSaleOffer[]
  judicialProcesses          JudicialProcess[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Auctioneer {
  id                   String    @id @default(cuid())
  publicId             String    @unique @default(cuid())
  name                 String
  slug                 String    @unique
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  description          String?   @db.Text

  // Relationships
  userId         String?    @unique
  logoMediaId    String?    @unique
  
  user           User?      @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  logo           MediaItem? @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  auctions       Auction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LotCategory {
  id                 String       @id @default(cuid())
  name               String       @unique
  slug               String       @unique
  description        String?
  logoUrl            String?
  dataAiHintLogo     String?
  coverImageUrl      String?
  dataAiHintCover    String?
  megaMenuImageUrl   String?
  dataAiHintMegaMenu String?
  itemCount          Int?         @default(0)
  hasSubcategories   Boolean?     @default(false)
  
  // Relationships
  auctions           Auction[]
  lots               Lot[]
  subcategories      Subcategory[]
  bens               Bem[]
  directSaleOffers   DirectSaleOffer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subcategory {
  id             String      @id @default(cuid())
  name           String
  slug           String      @unique
  description    String?
  displayOrder   Int?        @default(0)

  // Relationships
  parentCategoryId String
  iconMediaId      String?     @unique

  parentCategory LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  lots           Lot[]
  bens           Bem[]
  icon           MediaItem?  @relation("SubcategoryIcon", fields: [iconMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JudicialProcess {
  id            String    @id @default(cuid())
  publicId      String    @unique @default(cuid())
  processNumber String    @unique
  isElectronic  Boolean   @default(true)

  // Relationships
  courtId         String
  districtId      String
  branchId        String
  sellerId        String?
  
  court           Court            @relation(fields: [courtId], references: [id])
  district        JudicialDistrict @relation(fields: [districtId], references: [id])
  branch          JudicialBranch   @relation(fields: [branchId], references: [id])
  seller          Seller?          @relation(fields: [sellerId], references: [id])
  parties         ProcessParty[]
  bens            Bem[]
  auctions        Auction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProcessParty {
  id             String          @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType

  // Relationships
  process JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@unique([processId, name, partyType])
}

model Bem {
  id          String   @id @default(cuid())
  publicId    String   @unique @default(cuid())
  title       String
  description String?  @db.Text
  status      BemStatus @default(DISPONIVEL)
  evaluationValue Float?
  imageUrl    String?
  dataAiHint  String?
  
  // Location
  locationCity  String?
  locationState String?
  address       String?
  latitude      Float?
  longitude     Float?

  // Vehicle Specifics
  plate            String?
  make             String?
  model            String?
  version          String?
  year             Int?
  modelYear        Int?
  mileage          Int?
  color            String?
  fuelType         String?
  transmissionType String?
  bodyType         String?
  vin              String?
  renavam          String?
  enginePower      String?
  numberOfDoors    Int?
  vehicleOptions   String? @db.Text
  detranStatus     String?
  debts            String? @db.Text
  runningCondition String?
  bodyCondition    String?
  tiresCondition   String?
  hasKey           Boolean? @default(false)

  // Real Estate Specifics
  propertyRegistrationNumber String?
  iptuNumber                 String?
  isOccupied                 Boolean? @default(false)
  totalArea                  Float?
  builtArea                  Float?
  bedrooms                   Int?
  suites                     Int?
  bathrooms                  Int?
  parkingSpaces              Int?
  constructionType           String?
  finishes                   String?
  infrastructure             String?
  condoDetails               String?
  improvements               String?
  topography                 String?
  liensAndEncumbrances       String?
  propertyDebts              String?
  unregisteredRecords        String?
  hasHabiteSe                Boolean?
  zoningRestrictions         String?
  amenities                  Json? // Store array of strings as JSON
  
  // Other types specifics
  brand               String?
  serialNumber        String?
  itemCondition       String?
  specifications      String? @db.Text
  includedAccessories String?
  batteryCondition    String?
  hasInvoice          Boolean?
  hasWarranty         Boolean?
  repairHistory       String?
  applianceCapacity   String?
  voltage             String?
  applianceType       String?
  additionalFunctions String?
  hoursUsed           Int?
  engineType          String?
  capacityOrPower     String?
  maintenanceHistory  String?
  installationLocation String?
  compliesWithNR      String?
  operatingLicenses   String?
  breed               String?
  age                 String?
  sex                 String? // Macho, Fêmea
  weight              String?
  individualId        String?
  purpose             String?
  sanitaryCondition   String?
  lineage             String?
  isPregnant          Boolean?
  specialSkills       String?
  gtaDocument         String?
  breedRegistryDocument String?
  furnitureType       String?
  material            String?
  style               String?
  dimensions          String?
  pieceCount          Int?
  jewelryType         String?
  metal               String?
  gemstones           String?
  totalWeight         String?
  jewelrySize         String?
  authenticityCertificate String?
  workType            String?
  artist              String?
  period              String?
  technique           String?
  provenance          String?
  boatType            String?
  boatLength          String?
  hullMaterial        String?
  onboardEquipment    String?
  productName         String?
  quantity            String?
  packagingType       String?
  expirationDate      DateTime?
  storageConditions   String?
  preciousMetalType   String?
  purity              String?
  forestGoodsType     String?
  volumeOrQuantity    String?
  species             String?
  dofNumber           String?
  
  // JSON fields
  galleryImageUrls Json?
  mediaItemIds     Json?

  // Relationships
  categoryId        String?
  subcategoryId     String?
  judicialProcessId String?
  sellerId          String?
  imageMediaId      String?           @unique
  
  category          LotCategory?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory       Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess   JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller            Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  image             MediaItem?       @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Court {
  id                String             @id @default(cuid())
  name              String             @unique
  slug              String             @unique
  stateUf           String
  website           String?
  
  // Relationships
  districts         JudicialDistrict[]
  processes         JudicialProcess[]

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model JudicialDistrict {
  id        String           @id @default(cuid())
  name      String
  slug      String           @unique
  courtId   String
  stateId   String
  zipCode   String?
  
  // Relationships
  court     Court            @relation(fields: [courtId], references: [id])
  state     StateInfo        @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JudicialBranch {
  id           String           @id @default(cuid())
  name         String
  slug         String           @unique
  districtId   String
  contactName  String?
  phone        String?
  email        String?
  
  // Relationships
  district   JudicialDistrict @relation(fields: [districtId], references: [id])
  processes  JudicialProcess[]
  seller     Seller?

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// GEOGRAPHICAL & CATEGORICAL DATA
model StateInfo {
  id        String             @id @default(cuid())
  name      String             @unique
  uf        String             @unique
  slug      String             @unique
  
  // Relationships
  cities    CityInfo[]
  courts    Court[]
  districts JudicialDistrict[]
  lots      Lot[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CityInfo {
  id      String    @id @default(cuid())
  name    String
  slug    String    @unique
  stateId String
  stateUf String
  ibgeCode String?
  
  // Relationships
  state StateInfo @relation(fields: [stateId], references: [id], onDelete: Cascade)
  lots  Lot[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bid {
  id            String   @id @default(cuid())
  amount        Float
  timestamp     DateTime @default(now())
  
  // Relationships
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  
  lot     Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  user    User @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String   @id @default(cuid())
  winningBidAmount Float
  winDate          DateTime @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?

  // Relationships
  lotId  String @unique // A lot can only be won once
  userId String

  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Restrict)
  user User @relation(fields: [userId], references: [id], onDelete: Restrict)
}

model UserLotMaxBid {
  id       String  @id @default(cuid())
  userId   String
  lotId    String
  maxAmount Float
  isActive  Boolean @default(true)

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}


// PLATFORM CONTENT & CONFIGURATION
model PlatformSettings {
  id                      String   @id @default("global")
  siteTitle               String?
  siteTagline             String?
  galleryImageBasePath    String?
  storageProvider         StorageProviderType? @default(local)
  firebaseStorageBucket   String?
  activeThemeName         String?
  themes                  Json?    // Array of Theme objects
  platformPublicIdMasks   Json?    // Object with masks
  homepageSections        Json?    // Array of HomepageSectionConfig
  mentalTriggerSettings   Json?    // MentalTriggerSettings object
  sectionBadgeVisibility  Json?    // SectionBadgeConfig object
  mapSettings             Json?    // MapSettings object
  biddingSettings         Json?    // BiddingSettings object
  searchPaginationType    SearchPaginationType? @default(loadMore)
  searchItemsPerPage      Int?     @default(12)
  searchLoadMoreCount     Int?     @default(12)
  showCountdownOnLotDetail Boolean? @default(true)
  showCountdownOnCards     Boolean? @default(true)
  showRelatedLotsOnLotDetail Boolean? @default(true)
  relatedLotsCount        Int?     @default(5)
  defaultListItemsPerPage Int?     @default(10)
  variableIncrementTable  Json?    // Array of VariableIncrementRule
  updatedAt               DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BlogPost {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  content   String   @db.Text
  authorId  String
  imageUrl  String?
  status    String   @default("DRAFT") // DRAFT, PUBLISHED
  publishedAt DateTime?
  tags        String?  // Comma-separated string for MySQL

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
    id        String @id @default(cuid())
    name      String
    email     String
    subject   String
    message   String @db.Text
    isRead    Boolean @default(false)
    createdAt DateTime @default(now())
}

model Review {
    id String @id @default(cuid())
    lotId String
    auctionId String
    userId String
    userDisplayName String
    rating Int
    comment String @db.Text

    lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
}

model LotQuestion {
    id String @id @default(cuid())
    lotId String
    auctionId String
    userId String
    userDisplayName String
    questionText String @db.Text
    isPublic Boolean @default(true)
    
    answerText String? @db.Text
    answeredAt DateTime?
    answeredByUserId String?
    
    lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    answeredBy User? @relation("AnsweredBy", fields: [answeredByUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)

    createdAt DateTime @default(now())
}


model DirectSaleOffer {
  id              String   @id @default(cuid())
  publicId        String   @unique @default(cuid())
  title           String
  description     String   @db.Text
  offerType       DirectSaleOfferType
  status          DirectSaleOfferStatus
  price           Float?
  minimumOfferPrice Float?
  locationCity    String?
  locationState   String?
  expiresAt       DateTime?
  views           Int?     @default(0)
  proposalsCount  Int?     @default(0)

  // JSON fields
  galleryImageUrls Json?
  itemsIncluded    Json?
  tags             Json?

  // Relationships
  categoryId        String
  sellerId          String
  imageMediaId      String?           @unique
  
  category          LotCategory       @relation(fields: [categoryId], references: [id])
  seller            Seller            @relation(fields: [sellerId], references: [id])
  image             MediaItem?        @relation("DirectSaleOfferImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model MediaItem {
  id            String  @id @default(cuid())
  fileName      String
  storagePath   String?
  title         String?
  altText       String?
  caption       String?
  description   String?
  mimeType      String
  sizeBytes     Int
  dimensions    Json?   // { width, height }
  urlOriginal   String  @db.Text
  urlThumbnail  String? @db.Text
  urlMedium     String? @db.Text
  urlLarge      String? @db.Text
  dataAiHint    String?
  uploadedBy    String?

  // Relationships
  linkedLotIds        Json? // Array of Lot IDs
  
  auctionAsImage        Auction?           @relation("AuctionImage")
  lotAsImage            Lot?               @relation("LotImage")
  sellerAsLogo          Seller?            @relation("SellerLogo")
  auctioneerAsLogo      Auctioneer?        @relation("AuctioneerLogo")
  bemAsImage            Bem?               @relation("BemImage")
  directSaleOfferImage  DirectSaleOffer?   @relation("DirectSaleOfferImage")
  subcategoryAsIcon     Subcategory?       @relation("SubcategoryIcon")

  uploadedAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ENUMS

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserAccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO_PARA_LANCES
  ABERTO // Legacy or synonym for ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum BemStatus {
    CADASTRO
    DISPONIVEL
    LOTEADO
    VENDIDO
    REMOVIDO
    INATIVADO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum DirectSaleOfferType {
    BUY_NOW
    ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
    ACTIVE
    PENDING_APPROVAL
    SOLD
    EXPIRED
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum DocumentTemplateType {
    WINNING_BID_TERM
    EVALUATION_REPORT
    AUCTION_CERTIFICATE
}

enum StorageProviderType {
    local
    firebase
}

enum SearchPaginationType {
    loadMore
    numberedPages
}
