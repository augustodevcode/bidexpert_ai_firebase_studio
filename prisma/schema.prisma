// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model PlatformSettings {
  id                            String    @id @default("global")
  siteTitle                     String?   @db.VarChar(100)
  siteTagline                   String?   @db.VarChar(200)
  logoUrl                       String?   @db.VarChar(255)
  faviconUrl                    String?   @db.VarChar(255)
  galleryImageBasePath          String?   @db.VarChar(200)
  storageProvider               String?   @db.VarChar(50)
  firebaseStorageBucket         String?   @db.VarChar(200)
  activeThemeName               String?   @db.VarChar(100)
  themes                        Json?
  platformPublicIdMasks         Json?
  homepageSections              Json?
  mentalTriggerSettings         Json?
  sectionBadgeVisibility        Json?
  mapSettings                   Json?
  searchPaginationType          String?   @db.VarChar(50)
  searchItemsPerPage            Int?
  searchLoadMoreCount           Int?
  showCountdownOnLotDetail      Boolean?
  showCountdownOnCards          Boolean?
  showRelatedLotsOnLotDetail    Boolean?
  relatedLotsCount              Int?
  defaultUrgencyTimerHours      Int?
  variableIncrementTable        Json?
  biddingSettings               Json?
  paymentGatewaySettings        Json?
  defaultListItemsPerPage       Int?
  updatedAt                     DateTime? @updatedAt
}

model Role {
  id              String         @id @default(uuid())
  name            String         @db.VarChar(50)
  nameNormalized  String         @unique @db.VarChar(50)
  description     String?        @db.VarChar(255)
  permissions     Json?
  users           UsersOnRoles[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model User {
  id                   String                 @id @default(uuid())
  email                String                 @unique @db.VarChar(150)
  password             String?                @db.VarChar(255)
  fullName             String?                @db.VarChar(150)
  habilitationStatus   UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType          AccountType            @default(PHYSICAL)
  avatarUrl            String?                @db.VarChar(255)
  dataAiHint           String?                @db.VarChar(100)
  badges               Json?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  roles                UsersOnRoles[]
  documents            UserDocument[]
  bids                 Bid[]
  wins                 UserWin[]
  maxBids              UserLotMaxBid[]
  uploadedMedia        MediaItem[]            @relation("UploadedBy")
  answeredQuestions    LotQuestion[]          @relation("AnsweredByUser")
  questionsAsked       LotQuestion[]          @relation("AskedByUser")
  habilitations        AuctionHabilitation[]
  wonLots              Lot[]                  @relation("Winner")

  // PF Fields
  cpf                 String?       @unique @db.VarChar(20)
  rgNumber            String?       @db.VarChar(30)
  rgIssuer            String?       @db.VarChar(50)
  rgIssueDate         DateTime?
  rgState             String?       @db.VarChar(2)
  dateOfBirth         DateTime?
  homePhone           String?       @db.VarChar(20)
  cellPhone           String?       @db.VarChar(20)
  gender              String?       @db.VarChar(50)
  profession          String?       @db.VarChar(100)
  nationality         String?       @db.VarChar(100)
  maritalStatus       String?       @db.VarChar(50)
  propertyRegime      String?       @db.VarChar(50)
  spouseName          String?       @db.VarChar(150)
  spouseCpf           String?       @db.VarChar(20)

  // PJ Fields
  razaoSocial         String?       @db.VarChar(200)
  cnpj                String?       @unique @db.VarChar(20)
  inscricaoEstadual   String?       @db.VarChar(30)
  responsibleName     String?       @db.VarChar(150)
  responsibleCpf      String?       @db.VarChar(20)

  // Address
  zipCode             String?       @db.VarChar(10)
  street              String?       @db.VarChar(200)
  number              String?       @db.VarChar(20)
  complement          String?       @db.VarChar(100)
  neighborhood        String?       @db.VarChar(100)
  city                String?       @db.VarChar(100)
  state               String?       @db.VarChar(50)

  // Preferences
  optInMarketing      Boolean       @default(false)
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model State {
  id        String             @id @default(uuid())
  name      String             @db.VarChar(100)
  uf        String             @unique @db.VarChar(2)
  slug      String?            @unique @db.VarChar(100)
  cities    City[]
  auctions  Auction[]
  lots      Lot[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model City {
  id        String    @id @default(uuid())
  name      String    @db.VarChar(150)
  slug      String?   @db.VarChar(150)
  state     State     @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId   String
  stateUf   String?   @db.VarChar(2)
  ibgeCode  String?   @unique @db.VarChar(10)
  auctions  Auction[]
  lots      Lot[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model LotCategory {
  id                   String              @id @default(uuid())
  name                 String              @db.VarChar(100)
  slug                 String?             @unique @db.VarChar(100)
  description          String?             @db.VarChar(500)
  hasSubcategories     Boolean             @default(false)
  itemCount            Int?                @default(0)
  iconName             String?             @db.VarChar(50)
  logoUrl              String?             @db.VarChar(255)
  logoMediaId          String?             @db.VarChar(100)
  dataAiHintIcon       String?             @db.VarChar(100)
  coverImageUrl        String?             @db.VarChar(255)
  coverImageMediaId    String?             @db.VarChar(100)
  dataAiHintCover      String?             @db.VarChar(100)
  megaMenuImageUrl     String?             @db.VarChar(255)
  megaMenuImageMediaId String?             @db.VarChar(100)
  dataAiHintMegaMenu   String?             @db.VarChar(100)
  auctions             Auction[]
  lots                 Lot[]
  bens                 Bem[]
  subcategories        Subcategory[]
  directSaleOffers     DirectSaleOffer[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model Subcategory {
  id                 String      @id @default(uuid())
  name               String      @db.VarChar(100)
  slug               String?     @db.VarChar(100)
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  parentCategoryId   String
  description        String?     @db.VarChar(500)
  displayOrder       Int         @default(0)
  iconUrl            String?     @db.VarChar(255)
  iconMediaId        String?     @db.VarChar(100)
  dataAiHintIcon     String?     @db.VarChar(100)
  lots               Lot[]
  bens               Bem[]
}

model Court {
  id                  String               @id @default(uuid())
  name                String               @db.VarChar(150)
  slug                String?              @db.VarChar(150)
  stateUf             String?              @db.VarChar(2)
  website             String?              @db.VarChar(255)
  districts           JudicialDistrict[]
  judicialProcesses   JudicialProcess[]
  auctions            Auction[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model JudicialDistrict {
  id                  String             @id @default(uuid())
  name                String             @db.VarChar(150)
  slug                String?            @unique @db.VarChar(150)
  court               Court?             @relation(fields: [courtId], references: [id])
  courtId             String?
  state               State?             @relation(fields: [stateId], references: [id])
  stateId             String?
  zipCode             String?            @db.VarChar(10)
  branches            JudicialBranch[]
  judicialProcesses   JudicialProcess[]
  auctions            Auction[]
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model JudicialBranch {
  id                String             @id @default(uuid())
  name              String             @db.VarChar(150)
  slug              String?            @unique @db.VarChar(150)
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  districtId        String?
  contactName       String?            @db.VarChar(150)
  phone             String?            @db.VarChar(20)
  email             String?            @db.VarChar(150)
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
  sellers           Seller[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Seller {
  id                   String               @id @default(uuid())
  publicId             String?              @unique @db.VarChar(100)
  slug                 String?              @unique @db.VarChar(150)
  name                 String               @unique @db.VarChar(150)
  contactName          String?              @db.VarChar(150)
  email                String?              @db.VarChar(150)
  phone                String?              @db.VarChar(20)
  address              String?              @db.VarChar(200)
  city                 String?              @db.VarChar(100)
  state                String?              @db.VarChar(50)
  zipCode              String?              @db.VarChar(10)
  website              String?              @db.VarChar(255)
  logoUrl              String?              @db.VarChar(255)
  logoMediaId          String?              @db.VarChar(100)
  dataAiHintLogo       String?              @db.VarChar(100)
  description          String?              @db.Text
  isJudicial           Boolean              @default(false)
  judicialBranch       JudicialBranch?      @relation(fields: [judicialBranchId], references: [id])
  judicialBranchId     String?
  auctions             Auction[]
  lots                 Lot[]
  bens                 Bem[]
  directSaleOffers     DirectSaleOffer[]
  judicialProcesses    JudicialProcess[]
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
}

model Auctioneer {
  id                 String    @id @default(uuid())
  publicId           String?   @unique @db.VarChar(100)
  slug               String?   @unique @db.VarChar(150)
  name               String
  registrationNumber String?   @db.VarChar(50)
  contactName        String?   @db.VarChar(150)
  email              String?   @db.VarChar(150)
  phone              String?   @db.VarChar(20)
  address            String?   @db.VarChar(200)
  city               String?   @db.VarChar(100)
  state              String?   @db.VarChar(50)
  zipCode            String?   @db.VarChar(10)
  website            String?   @db.VarChar(255)
  logoUrl            String?   @db.VarChar(255)
  logoMediaId        String?   @db.VarChar(100)
  dataAiHintLogo     String?   @db.VarChar(100)
  description        String?   @db.Text
  auctions           Auction[]
  lots               Lot[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model JudicialProcess {
  id              String             @id @default(uuid())
  publicId        String?            @unique @db.VarChar(100)
  processNumber   String             @db.VarChar(100)
  isElectronic    Boolean            @default(true)
  court           Court?             @relation(fields: [courtId], references: [id])
  courtId         String?
  district        JudicialDistrict?  @relation(fields: [districtId], references: [id])
  districtId      String?
  branch          JudicialBranch?    @relation(fields: [branchId], references: [id])
  branchId        String?
  seller          Seller?            @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId        String?
  parties         JudicialParty[]
  bens            Bem[]
  auctions        Auction[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model JudicialParty {
  id             String          @id @default(uuid())
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId      String
  name           String          @db.VarChar(255)
  documentNumber String?         @db.VarChar(50)
  partyType      String          @db.VarChar(50)
}

model AuctionHabilitation {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  auction    Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId  String
  approvedAt DateTime @default(now())

  @@unique([userId, auctionId])
}

model LotBens {
  lot     Lot    @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId   String
  bem     Bem    @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId   String
  addedAt DateTime @default(now())

  @@id([lotId, bemId])
}

model Bem {
  id                         String      @id @default(uuid())
  publicId                   String?     @unique
  title                      String      @db.VarChar(200)
  description                String?     @db.Text
  status                     BemStatus   @default(DISPONIVEL)
  category                   LotCategory? @relation(fields: [categoryId], references: [id])
  categoryId                 String?
  subcategory                Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId              String?
  judicialProcess            JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId          String?
  seller                     Seller?     @relation(fields: [sellerId], references: [id])
  sellerId                   String?
  evaluationValue            Decimal?    @db.Decimal(15, 2)
  imageUrl                   String?     @db.VarChar(255)
  imageMediaId               String?     @db.VarChar(100)
  galleryImageUrls           Json?
  mediaItemIds               Json?
  dataAiHint                 String?     @db.VarChar(100)
  locationCity               String?     @db.VarChar(100)
  locationState              String?     @db.VarChar(100)
  address                    String?     @db.VarChar(255)
  latitude                   Decimal?    @db.Decimal(10, 8)
  longitude                  Decimal?    @db.Decimal(11, 8)
  lots                       LotBens[]   // Many-to-many relation
  createdAt                  DateTime    @default(now())
  updatedAt                  DateTime    @updatedAt
}

model LotAuctionStageDetails {
  id               String       @id @default(uuid())
  lot              Lot          @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId            String
  auctionStage     AuctionStage @relation(fields: [auctionStageId], references: [id], onDelete: Cascade)
  auctionStageId   String
  initialBid       Decimal      @db.Decimal(15, 2)
  bidIncrement     Decimal?     @db.Decimal(10, 2)
  evaluationValue  Decimal?     /// Valor de avaliação específico para esta praça
  
  @@unique([lotId, auctionStageId])
}

model AuctionStage {
  id                      String                   @id @default(uuid())
  auction                 Auction                  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId               String
  name                    String
  startDate               DateTime
  endDate                 DateTime
  initialPrice            Decimal? /// Deprecated: Use LotAuctionStageDetails.initialBid
  statusText              String?
  lotStageDetails         LotAuctionStageDetails[]

  @@index([auctionId])
}

model Auction {
  id                             String                 @id @default(uuid())
  publicId                       String?                @unique @db.VarChar(100)
  slug                           String?                @unique @db.VarChar(255)
  title                          String                 @db.VarChar(255)
  description                    String?                @db.Text
  status                         AuctionStatus          @default(RASCUNHO)
  auctionDate                    DateTime               @default(now())
  endDate                        DateTime?
  totalLots                      Int?                   @default(0)
  visits                         Int?                   @default(0)
  initialOffer                   Decimal?               @db.Decimal(15, 2)
  isFavorite                     Boolean                @default(false)
  dataAiHint                     String?                @db.VarChar(100)
  
  // Relations
  auctioneer                     Auctioneer?            @relation(fields: [auctioneerId], references: [id])
  auctioneerId                   String?
  seller                         Seller?                @relation(fields: [sellerId], references: [id])
  sellerId                       String?
  category                       LotCategory?           @relation(fields: [categoryId], references: [id])
  categoryId                     String?
  court                          Court?                 @relation(fields: [courtId], references: [id])
  courtId                        String?
  district                       JudicialDistrict?      @relation(fields: [districtId], references: [id])
  districtId                     String?
  branch                         JudicialBranch?        @relation(fields: [branchId], references: [id])
  branchId                       String?
  city                           City?                  @relation(fields: [cityId], references: [id])
  cityId                         String?
  state                          State?                 @relation(fields: [stateId], references: [id])
  stateId                        String?
  judicialProcess                JudicialProcess?       @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId              String?

  // Settings
  auctionType                    AuctionType?
  auctionMethod                  AuctionMethod?
  participation                  AuctionParticipation?
  onlineUrl                      String?                @db.VarChar(255)
  address                        String?                @db.VarChar(255)
  zipCode                        String?                @db.VarChar(10)
  
  imageUrl                       String?                @db.VarChar(255)
  imageMediaId                   String?                @db.VarChar(100)
  documentsUrl                   String?                @db.VarChar(255)
  evaluationReportUrl            String?                @db.VarChar(255)
  auctionCertificateUrl          String?                @db.VarChar(255)
  sellingBranch                  String?                @db.VarChar(100)
  automaticBiddingEnabled        Boolean                @default(false)
  allowInstallmentBids           Boolean                @default(true)
  silentBiddingEnabled           Boolean                @default(false)
  allowMultipleBidsPerUser       Boolean                @default(true)
  softCloseEnabled               Boolean                @default(false)
  softCloseMinutes               Int?                   @default(2)
  estimatedRevenue               Decimal?               @db.Decimal(15, 2)
  achievedRevenue                Decimal?               @db.Decimal(15, 2)
  totalHabilitatedUsers          Int?                   @default(0)
  isFeaturedOnMarketplace        Boolean                @default(false)
  marketplaceAnnouncementTitle   String?                @db.VarChar(150)
  additionalTriggers             Json?
  
  // Dutch Auction Specific
  decrementAmount                Decimal?               @db.Decimal(15, 2)
  decrementIntervalSeconds       Int?
  floorPrice                     Decimal?               @db.Decimal(15, 2)
  autoRelistSettings             Json?

  // One-to-Many Relations
  lots                           Lot[]
  auctionStages                  AuctionStage[]
  habilitations                  AuctionHabilitation[]
  bids                           Bid[]
  
  createdAt                      DateTime               @default(now())
  updatedAt                      DateTime               @updatedAt
}

model Lot {
  id                         String                   @id @default(uuid())
  publicId                   String?                  @unique @db.VarChar(100)
  auction                    Auction                  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                  String
  slug                       String?                  @db.VarChar(255)
  number                     String?                  @db.VarChar(20)
  title                      String                   @db.VarChar(255)
  description                String?                  @db.Text
  price                      Decimal                  @db.Decimal(15, 2)
  bidIncrementStep           Decimal?                 @db.Decimal(10, 2)
  status                     LotStatus                @default(EM_BREVE)
  bidsCount                  Int                      @default(0)
  views                      Int                      @default(0)
  isFeatured                 Boolean                  @default(false)
  isExclusive                Boolean                  @default(false)
  discountPercentage         Int?
  additionalTriggers         Json?
  imageUrl                   String?                  @db.VarChar(255)
  imageMediaId               String?                  @db.VarChar(100)
  galleryImageUrls           Json?
  mediaItemIds               Json?
  inheritedMediaFromBemId    String?
  type                       String                   @db.VarChar(100)
  category                   LotCategory?             @relation(fields: [categoryId], references: [id])
  categoryId                 String?
  subcategory                Subcategory?             @relation(fields: [subcategoryId], references: [id])
  subcategoryId              String?
  seller                     Seller?                  @relation(fields: [sellerId], references: [id])
  sellerId                   String?
  auctioneer                 Auctioneer?            @relation(fields: [auctioneerId], references: [id])
  auctioneerId               String?
  city                       City?                    @relation(fields: [cityId], references: [id])
  cityId                     String?
  state                      State?                   @relation(fields: [stateId], references: [id])
  stateId                    String?
  latitude                   Decimal?                 @db.Decimal(10, 8)
  longitude                  Decimal?                 @db.Decimal(11, 8)
  mapAddress                 String?                  @db.VarChar(255)
  mapEmbedUrl                String?                  @db.VarChar(500)
  mapStaticImageUrl          String?                  @db.VarChar(255)
  endDate                    DateTime?
  lotSpecificAuctionDate     DateTime?
  secondAuctionDate          DateTime?
  condition                  String?                  @db.VarChar(100)
  dataAiHint                 String?                  @db.VarChar(100)
  winner                     User?                    @relation("Winner", fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId                   String?
  winningBidTermUrl          String?                  @db.VarChar(255)
  allowInstallmentBids       Boolean                  @default(false)
  
  bids               Bid[]
  userMaxBids        UserLotMaxBid[]
  userWins           UserWin[]
  questions          LotQuestion[]
  bens               LotBens[]
  lotStageDetails    LotAuctionStageDetails[]

  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt

  @@index([auctionId])
}

model LotQuestion {
  id                      String    @id @default(uuid())
  lot                     Lot       @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId                   String
  auction                 Auction   @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId               String
  user                    User      @relation("AskedByUser", fields: [userId], references: [id])
  userId                  String
  userDisplayName         String    @db.VarChar(150)
  questionText            String    @db.Text
  answerText              String?   @db.Text
  answeredBy              User?     @relation("AnsweredByUser", fields: [answeredByUserId], references: [id])
  answeredByUserId        String?
  answeredByUserDisplayName String?   @db.VarChar(150)
  answeredAt              DateTime?
  isPublic                Boolean   @default(true)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  @@index([lotId])
}


model Bid {
  id            String   @id @default(uuid())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId      String
  bidderDisplay String?  @db.VarChar(150)
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())

  @@index([lotId])
  @@index([bidderId])
}

model UserWin {
  id                String  @id @default(uuid())
  lot               Lot     @relation(fields: [lotId], references: [id])
  lotId             String  @unique
  user              User    @relation(fields: [userId], references: [id])
  userId            String
  winningBidAmount  Decimal @db.Decimal(15, 2)
  winDate           DateTime
  paymentStatus     PaymentStatus
  invoiceUrl        String? @db.VarChar(255)
}

model DirectSaleOffer {
  id                   String       @id @default(uuid())
  publicId             String?      @unique @db.VarChar(100)
  title                String       @db.VarChar(255)
  description          String?      @db.Text
  offerType            String?      @db.VarChar(50)
  price                Decimal?     @db.Decimal(15, 2)
  minimumOfferPrice    Decimal?     @db.Decimal(15, 2)
  status               String       @default("ACTIVE") @db.VarChar(50)
  category             LotCategory  @relation(fields: [categoryId], references: [id])
  categoryId           String
  seller               Seller       @relation(fields: [sellerId], references: [id])
  sellerId             String
  locationCity         String?      @db.VarChar(100)
  locationState        String?      @db.VarChar(100)
  imageUrl             String?      @db.VarChar(255)
  imageMediaId         String?      @db.VarChar(100)
  dataAiHint           String?      @db.VarChar(100)
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int          @default(0)
  expiresAt            DateTime?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

model DocumentType {
  id           String         @id @default(uuid())
  name         String         @db.VarChar(150)
  description  String?        @db.VarChar(255)
  isRequired   Boolean        @default(true)
  appliesTo    String?        /// Comma-separated: PHYSICAL,LEGAL,ALL,PROCESS
  userDocs     UserDocument[]
}

model UserDocument {
  id                String       @id @default(uuid())
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  documentType      DocumentType @relation(fields: [documentTypeId], references: [id])
  documentTypeId    String
  status            String       @default("PENDING") @db.VarChar(50)
  fileUrl           String       @db.VarChar(255)
  fileName          String?
  rejectionReason   String?      @db.Text
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@unique([userId, documentTypeId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String   @db.Text
  link      String?  @db.VarChar(255)
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

model MediaItem {
  id                  String           @id @default(uuid())
  fileName            String           @unique @db.VarChar(255)
  storagePath         String           @db.VarChar(255)
  title               String?          @db.VarChar(255)
  altText             String?          @db.VarChar(255)
  caption             String?          @db.VarChar(500)
  description         String?          @db.Text
  mimeType            String           @db.VarChar(100)
  sizeBytes           Int?
  urlOriginal         String           @db.VarChar(255)
  urlThumbnail        String?          @db.VarChar(255)
  urlMedium           String?          @db.VarChar(255)
  urlLarge            String?          @db.VarChar(255)
  linkedLotIds        Json?
  dataAiHint          String?          @db.VarChar(100)
  uploadedBy          User             @relation("UploadedBy", fields: [uploadedByUserId], references: [id])
  uploadedByUserId    String
  judicialProcess     JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId   String?
  uploadedAt          DateTime         @default(now())
}

model DocumentTemplate {
  id      String   @id @default(uuid())
  name    String   @db.VarChar(150)
  type    String   @db.VarChar(50)
  content String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id      String   @id @default(uuid())
  name    String   @db.VarChar(150)
  email   String   @db.VarChar(150)
  subject String   @db.VarChar(255)
  message String   @db.Text
  isRead  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model VehicleMake {
  id        String      @id @default(uuid())
  name      String      @unique @db.VarChar(100)
  slug      String      @unique
  models    VehicleModel[]
}

model VehicleModel {
  id        String      @id @default(uuid())
  name      String      @db.VarChar(100)
  slug      String
  make      VehicleMake @relation(fields: [makeId], references: [id], onDelete: Cascade)
  makeId    String

  @@unique([name, makeId])
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}
