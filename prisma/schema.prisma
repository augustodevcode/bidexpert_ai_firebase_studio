// prisma/schema.prisma

generator client {
  provider        = "prisma-client-js"
  // The binaryTargets are part of the configuration for the Prisma Client.
  // We explicitly add 'debian-openssl-3.0.x' to ensure compatibility with modern Linux environments.
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// ==============================================================================
// ENUMS - Define tipos de dados com valores pré-definidos.
// ==============================================================================

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
  DUTCH
  SILENT
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  PENDING_APPROVAL
  ACTIVE
  SOLD
  EXPIRED
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

// ==============================================================================
// MODELOS DE DADOS - Define as tabelas do banco de dados.
// ==============================================================================

// --- Modelos de Usuários e Autenticação ---

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  fullName                String
  password                String
  habilitationStatus      UserHabilitationStatus   @default(PENDING_DOCUMENTS)
  accountType             AccountType              @default(PHYSICAL)
  badges                  Json                     @default("[]")
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  
  // Relacionamentos
  roleId                  String?
  role                    Role?                    @relation(fields: [roleId], references: [id])
  
  documents               UserDocument[]
  bids                    Bid[]
  wins                    UserWin[]
  notifications           Notification[]
  answeredQuestions       LotQuestion[]            @relation("AnsweredByUser")
  askedQuestions          LotQuestion[]            @relation("AskedByUser")
  reviews                 Review[]
  maxBids                 UserLotMaxBid[]
  
  // Relações One-to-One para perfis específicos
  sellerProfile           Seller?                  @relation("UserSeller")
  auctioneerProfile       Auctioneer?              @relation("UserAuctioneer")
  
  // Detalhes Pessoais (comuns)
  cpf                     String?
  dateOfBirth             DateTime?
  cellPhone               String?
  homePhone               String?
  zipCode                 String?
  street                  String?
  number                  String?
  complement              String?
  neighborhood            String?
  city                    String?
  state                   String?
  optInMarketing          Boolean                  @default(false)

  // Detalhes PJ (se aplicável)
  razaoSocial             String?
  cnpj                    String?
  inscricaoEstadual       String?
  website                 String?
  
  @@index([roleId])
}

model Role {
  id              String       @id @default(cuid())
  name            String
  name_normalized String       @unique
  description     String?      @db.Text
  permissions     Permission[]
  users           User[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DocumentType {
  id              String             @id @default(cuid())
  name            String
  description     String?            @db.Text
  isRequired      Boolean            @default(true)
  appliesTo       Json               @default("[\"PHYSICAL\", \"LEGAL\", \"DIRECT_SALE_CONSIGNOR\"]")
  allowedFormats  Json
  displayOrder    Int                @default(0)
  userDocuments   UserDocument[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model UserDocument {
  id                String             @id @default(cuid())
  userId            String
  documentTypeId    String
  fileUrl           String
  fileName          String?
  status            UserDocumentStatus @default(NOT_SENT)
  uploadDate        DateTime?
  analysisDate      DateTime?
  analystId         String?
  rejectionReason   String?            @db.Text
  
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType      DocumentType       @relation(fields: [documentTypeId], references: [id])
  
  @@unique([userId, documentTypeId])
  @@index([userId])
  @@index([documentTypeId])
}


// --- Modelos de Leilão e Lotes ---

model Auction {
  id                             String        @id @default(cuid())
  publicId                       String        @unique @default(cuid())
  title                          String
  fullTitle                      String?       @db.Text
  description                    String?       @db.Text
  status                         AuctionStatus @default(RASCUNHO)
  auctionType                    AuctionType?
  auctionDate                    DateTime
  endDate                        DateTime?
  auctionStages                  Json          @default("[]")
  imageUrl                       String?       @db.Text
  imageMediaId                   String?
  dataAiHint                     String?
  documentsUrl                   String?       @db.Text
  evaluationReportUrl            String?
  auctionCertificateUrl          String?
  totalLots                      Int           @default(0)
  visits                         Int?          @default(0)
  initialOffer                   Float?
  achievedRevenue                Float?        @default(0)
  estimatedRevenue               Float?
  totalHabilitatedUsers          Int?          @default(0)
  isFeaturedOnMarketplace        Boolean?      @default(false)
  marketplaceAnnouncementTitle   String?
  additionalTriggers             Json          @default("[]")
  automaticBiddingEnabled        Boolean?      @default(false)
  silentBiddingEnabled           Boolean?      @default(false)
  allowMultipleBidsPerUser       Boolean?      @default(true)
  allowInstallmentBids           Boolean?      @default(false)
  softCloseEnabled               Boolean?      @default(false)
  softCloseMinutes               Int?          @default(2)
  decrementAmount                Float?
  decrementIntervalSeconds       Int?
  floorPrice                     Float?
  city                           String?
  state                          String?
  sellingBranch                  String?
  vehicleLocation                String?
  createdAt                      DateTime      @default(now())
  updatedAt                      DateTime      @updatedAt
  
  // Relacionamentos
  lots                           Lot[]
  bids                           Bid[]
  
  categoryId                     String
  category                       LotCategory   @relation(fields: [categoryId], references: [id])
  
  auctioneerId                   String
  auctioneer                     Auctioneer    @relation(fields: [auctioneerId], references: [id])
  
  sellerId                       String?
  seller                         Seller?       @relation(fields: [sellerId], references: [id])
  
  judicialProcessId              String?
  judicialProcess                JudicialProcess? @relation(fields: [judicialProcessId], references: [id])

  @@index([categoryId])
  @@index([auctioneerId])
  @@index([sellerId])
  @@index([judicialProcessId])
}

model Lot {
  id                  String     @id @default(cuid())
  publicId            String     @unique @default(cuid())
  number              String?
  title               String
  description         String?    @db.Text
  status              LotStatus  @default(EM_BREVE)
  
  price               Float
  initialPrice        Float?
  secondInitialPrice  Float?
  bidIncrementStep    Float?
  
  imageUrl            String?    @db.Text
  imageMediaId        String?
  dataAiHint          String?
  winningBidTermUrl   String?
  
  isFeatured          Boolean?   @default(false)
  isExclusive         Boolean?   @default(false)
  discountPercentage  Float?
  views               Int?       @default(0)
  bidsCount           Int?       @default(0)
  
  endDate             DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate   DateTime?
  condition           String?
  
  // Relacionamentos
  auctionId           String
  auction             Auction    @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  
  categoryId          String
  category            LotCategory @relation(fields: [categoryId], references: [id])

  subcategoryId       String?
  subcategory         Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)

  sellerId            String?
  seller              Seller?     @relation(fields: [sellerId], references: [id])

  bids                Bid[]
  wins                UserWin[]
  reviews             Review[]
  questions           LotQuestion[]
  maxBids             UserLotMaxBid[]
  bens                Bem[]
  mediaItems          MediaItem[]

  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@index([auctionId])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([sellerId])
}

// --- Modelos de Entidades e Perfis ---

model Seller {
  id                         String    @id @default(cuid())
  publicId                   String    @unique @default(cuid())
  name                       String
  slug                       String    @unique
  isJudicial                 Boolean   @default(false)
  contactName                String?
  email                      String?
  phone                      String?
  address                    String?
  city                       String?
  state                       String?
  zipCode                    String?
  website                    String?
  logoUrl                    String?   @db.Text
  logoMediaId                String?
  dataAiHintLogo             String?
  description                String?   @db.Text
  auctions                   Auction[]
  directSaleOffers           DirectSaleOffer[]
  lots                       Lot[]
  bens                       Bem[]
  judicialProcesses          JudicialProcess[]

  userId                     String?   @unique
  user                       User?     @relation("UserSeller", fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  judicialBranchId           String?   @unique
  judicialBranch             JudicialBranch? @relation(fields: [judicialBranchId], references: [id])

  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
}

model Auctioneer {
  id                   String    @id @default(cuid())
  publicId             String    @unique @default(cuid())
  name                 String
  slug                 String    @unique
  registrationNumber   String?
  contactName          String?
  email                String?
  phone                String?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  website              String?
  logoUrl              String?   @db.Text
  logoMediaId          String?
  dataAiHintLogo       String?
  description          String?   @db.Text
  auctions             Auction[]

  userId               String?   @unique
  user                 User?     @relation("UserAuctioneer", fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

// --- Modelos Judiciais ---

model Court {
  id                   String              @id @default(cuid())
  name                 String              @unique
  slug                 String              @unique
  stateUf              String
  website              String?
  districts            JudicialDistrict[]
  judicialProcesses    JudicialProcess[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model JudicialDistrict {
  id                   String              @id @default(cuid())
  name                 String
  slug                 String              @unique
  zipCode              String?
  courtId              String
  court                Court               @relation(fields: [courtId], references: [id])
  stateId              String
  state                StateInfo           @relation(fields: [stateId], references: [id])
  branches             JudicialBranch[]
  judicialProcesses    JudicialProcess[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model JudicialBranch {
  id                   String              @id @default(cuid())
  name                 String
  slug                 String              @unique
  contactName          String?
  phone                String?
  email                String?
  districtId           String
  district             JudicialDistrict    @relation(fields: [districtId], references: [id])
  judicialProcesses    JudicialProcess[]
  sellerProfile        Seller?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model JudicialProcess {
  id                   String              @id @default(cuid())
  publicId             String              @unique @default(cuid())
  processNumber        String              @unique
  isElectronic         Boolean             @default(true)
  
  courtId              String
  court                Court               @relation(fields: [courtId], references: [id])
  
  districtId           String
  district             JudicialDistrict    @relation(fields: [districtId], references: [id])
  
  branchId             String
  branch               JudicialBranch      @relation(fields: [branchId], references: [id])

  sellerId             String?
  seller               Seller?             @relation(fields: [sellerId], references: [id])

  parties              ProcessParty[]
  bens                 Bem[]
  auctions             Auction[]

  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model ProcessParty {
  id                   String           @id @default(cuid())
  name                 String
  documentNumber       String?
  partyType            ProcessPartyType
  processId            String
  process              JudicialProcess  @relation(fields: [processId], references: [id], onDelete: Cascade)
  
  @@unique([processId, name, partyType])
}

model Bem {
  id                   String    @id @default(cuid())
  publicId             String    @unique @default(cuid())
  title                String
  description          String?   @db.Text
  status               BemStatus @default(CADASTRO)
  
  evaluationValue      Float?
  
  imageUrl             String?   @db.Text
  imageMediaId         String?
  dataAiHint           String?
  
  locationCity         String?
  locationState        String?
  address              String?
  latitude             Float?
  longitude            Float?
  
  // Relacionamentos
  categoryId           String
  category             LotCategory @relation(fields: [categoryId], references: [id])

  subcategoryId        String?
  subcategory          Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)

  judicialProcessId    String?
  judicialProcess      JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  
  sellerId             String?
  seller               Seller?     @relation(fields: [sellerId], references: [id])

  lots                 Lot[]
  mediaItems           MediaItem[]

  // Detalhes Específicos (agrupados para clareza)
  // Veículo
  plate                String?
  make                 String?
  model                String?
  version              String?
  year                 Int?
  modelYear            Int?
  mileage              Int?
  color                String?
  fuelType             String?
  transmissionType     String?
  bodyType             String?
  vin                  String?
  renavam              String?
  enginePower          String?
  numberOfDoors        Int?
  vehicleOptions       String?
  detranStatus         String?
  debts                String?
  runningCondition     String?
  bodyCondition        String?
  tiresCondition       String?
  hasKey               Boolean?  @default(false)
  
  // Imóvel
  propertyRegistrationNumber String?
  iptuNumber           String?
  isOccupied           Boolean?  @default(false)
  totalArea            Float?
  builtArea            Float?
  bedrooms             Int?
  suites               Int?
  bathrooms            Int?
  parkingSpaces        Int?
  propertyType         String?
  constructionType     String?
  finishes             String?
  infrastructure       String?
  condoDetails         String?
  improvements         String?
  topography           String?
  liensAndEncumbrances String?
  propertyDebts        String?
  unregisteredRecords  String?
  hasHabiteSe          Boolean?
  zoningRestrictions   String?
  amenities            Json      @default("[]")

  // ... outros campos específicos ...

  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

// --- Modelos de Classificação e Localização ---

model LotCategory {
  id                  String             @id @default(cuid())
  name                String             @unique
  slug                String             @unique
  description         String?
  logoUrl             String?
  coverImageUrl       String?
  megaMenuImageUrl    String?
  dataAiHintLogo      String?
  dataAiHintCover     String?
  dataAiHintMegaMenu  String?
  itemCount           Int?               @default(0)
  hasSubcategories    Boolean?           @default(false)
  subcategories       Subcategory[]
  lots                Lot[]
  bens                Bem[]
  directSaleOffers    DirectSaleOffer[]
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model Subcategory {
  id                  String      @id @default(cuid())
  name                String
  slug                String      @unique
  description         String?
  displayOrder        Int         @default(0)
  itemCount           Int?        @default(0)
  iconUrl             String?
  iconMediaId         String?
  dataAiHintIcon      String?
  parentCategoryId    String
  parentCategory      LotCategory @relation(fields: [parentCategoryId], references: [id])
  lots                Lot[]
  bens                Bem[]
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model StateInfo {
  id                 String             @id @default(cuid())
  name               String             @unique
  uf                 String             @unique
  slug               String             @unique
  cityCount          Int?               @default(0)
  cities             CityInfo[]
  judicialDistricts  JudicialDistrict[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model CityInfo {
  id                 String     @id @default(cuid())
  name               String
  slug               String
  ibgeCode           String?
  lotCount           Int?       @default(0)
  stateId            String
  state              StateInfo  @relation(fields: [stateId], references: [id])
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  @@unique([name, stateId])
}


// --- Modelos de Interação e Transação ---

model Bid {
  id            String   @id @default(cuid())
  amount        Float
  timestamp     DateTime @default(now())
  
  lotId         String
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  
  auctionId     String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  
  bidderId      String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderDisplay String
  
  @@index([lotId])
  @@index([bidderId])
}

model UserWin {
  id                String        @id @default(cuid())
  lotId             String        @unique
  lot               Lot           @relation(fields: [lotId], references: [id], onDelete: Cascade)
  userId            String
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  winningBidAmount  Float
  winDate           DateTime      @default(now())
  paymentStatus     PaymentStatus @default(PENDENTE)
  invoiceUrl        String?
}

model DirectSaleOffer {
  id                   String                @id @default(cuid())
  publicId             String                @unique @default(cuid())
  title                String
  description          String                @db.Text
  offerType            DirectSaleOfferType
  status               DirectSaleOfferStatus @default(PENDING_APPROVAL)
  price                Float?
  minimumOfferPrice    Float?
  locationCity         String?
  locationState        String?
  imageUrl             String?               @db.Text
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json                  @default("[]")
  mediaItemIds         Json                  @default("[]")
  itemsIncluded        Json                  @default("[]")
  tags                 Json                  @default("[]")
  views                Int?                  @default(0)
  proposalsCount       Int?                  @default(0)
  expiresAt            DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  categoryId           String
  category             LotCategory           @relation(fields: [categoryId], references: [id])
  sellerId             String
  seller               Seller                @relation(fields: [sellerId], references: [id])
}

// --- Modelos de Conteúdo e Sistema ---

model MediaItem {
  id             String    @id @default(cuid())
  fileName       String
  storagePath    String?   @unique
  uploadedAt     DateTime  @default(now())
  uploadedBy     String?
  title          String?
  altText        String?
  caption        String?
  description    String?
  mimeType       String
  sizeBytes      Int
  dimensions     Json?
  urlOriginal    String    @db.Text
  urlThumbnail   String?   @db.Text
  urlMedium      String?   @db.Text
  urlLarge       String?   @db.Text
  dataAiHint     String?
  
  lots           Lot[]
  bens           Bem[]
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String   @db.Text
  authorId    String
  authorName  String
  imageUrl    String?
  publishedAt DateTime?
  tags        Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ContactMessage {
  id          String   @id @default(cuid())
  name        String
  email       String
  subject     String
  message     String   @db.Text
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message     String
  link        String?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  @@index([userId])
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  lot             Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId       String
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userDisplayName String
  rating          Int
  comment         String   @db.Text
  createdAt       DateTime @default(now())
  
  @@index([lotId])
  @@index([userId])
}

model LotQuestion {
  id                  String   @id @default(cuid())
  lotId               String
  lot                 Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auctionId           String
  userId              String
  user                User     @relation("AskedByUser", fields: [userId], references: [id], onDelete: Cascade)
  userDisplayName     String
  questionText        String   @db.Text
  answerText          String?  @db.Text
  answeredAt          DateTime?
  answeredByUserId    String?
  answeredByUser      User?    @relation("AnsweredByUser", fields: [answeredByUserId], references: [id])
  isPublic            Boolean  @default(true)
  createdAt           DateTime @default(now())
  
  @@index([lotId])
  @@index([userId])
}

model UserLotMaxBid {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lotId      String
  lot        Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  maxAmount  Float
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, lotId])
}

model DocumentTemplate {
  id         String               @id @default(cuid())
  name       String               @unique
  type       DocumentTemplateType
  content    String               @db.Text
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
}

// --- Modelos de Sistema ---

model PlatformSettings {
  id                         String   @id @default("global")
  siteTitle                  String?
  siteTagline                String?
  galleryImageBasePath       String?
  storageProvider            String?  @default("local")
  firebaseStorageBucket      String?
  activeThemeName            String?
  themes                     Json     @default("[]")
  platformPublicIdMasks      Json?
  homepageSections           Json     @default("[]")
  mentalTriggerSettings      Json?
  sectionBadgeVisibility     Json?
  mapSettings                Json?
  biddingSettings            Json?
  searchPaginationType       String?  @default("loadMore")
  searchItemsPerPage         Int?     @default(12)
  searchLoadMoreCount        Int?     @default(12)
  showCountdownOnLotDetail   Boolean? @default(true)
  showCountdownOnCards       Boolean? @default(true)
  showRelatedLotsOnLotDetail Boolean? @default(true)
  relatedLotsCount           Int?     @default(5)
  variableIncrementTable     Json     @default("[]")
  defaultListItemsPerPage    Int?     @default(10)
  updatedAt                  DateTime @updatedAt
}
