// prisma/schema.prisma

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =================================================================
// 1. Enums (Tipos Personalizados)
// =================================================================

enum AuctionType {
  JUDICIAL
  EXTRAJUDICIAL
  PARTICULAR
  TOMADA_DE_PRECOS
}

enum AuctionMethod {
  STANDARD
  DUTCH
  SILENT
}

enum AuctionParticipation {
  ONLINE
  PRESENCIAL
  HIBRIDO
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum LotStatus {
  RASCUNHO
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
  CANCELADO
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
  CANCELADO
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  REJECTED_DOCUMENTS
  HABILITADO
  BLOCKED
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

enum DirectSaleOfferStatus {
  ACTIVE
  PENDING_APPROVAL
  SOLD
  EXPIRED
  RASCUNHO
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

// =================================================================
// 2. Modelos Base (Poucas dependências)
// =================================================================

model State {
  id              String             @id @default(uuid())
  name            String             @unique
  uf              String             @unique
  slug            String             @unique
  cityCount       Int                @default(0)
  cities          City[]
  courts          Court[]
  judicialDistricts JudicialDistrict[]
  auctions        Auction[]
  lots            Lot[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model City {
  id        String    @id @default(uuid())
  name      String
  slug      String?
  state     State     @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId   String
  stateUf   String?
  ibgeCode  String?   @unique
  lotCount  Int       @default(0)
  lots      Lot[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Role {
  id             String         @id @default(uuid())
  name           String
  nameNormalized String         @unique
  description    String?        @db.Text
  permissions    Json
  users          UsersOnRoles[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model LotCategory {
  id                   String            @id @default(uuid())
  name                 String            @unique
  slug                 String            @unique
  description          String?           @db.Text
  hasSubcategories     Boolean           @default(false)
  logoUrl              String?
  logoMediaId          String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  coverImageMediaId    String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  megaMenuImageMediaId String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  lots                 Lot[]
  bens                 Bem[]
  auctions             Auction[]
  subcategories      Subcategory[]
}

model Subcategory {
  id                 String      @id @default(uuid())
  name               String
  slug               String?
  parentCategory     LotCategory @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  parentCategoryId   String
  description        String?     @db.Text
  displayOrder       Int         @default(0)
  iconUrl            String?
  iconMediaId        String?
  dataAiHintIcon     String?
  lots               Lot[]
  bens               Bem[]
}

model Court {
  id                String             @id @default(uuid())
  name              String             @unique
  slug              String?
  website           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  state             State?             @relation(fields: [stateId], references: [id])
  stateId           String?
  judicialDistricts JudicialDistrict[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

// =================================================================
// 3. Modelos Dependentes (Usuários, Vendedores, etc.)
// =================================================================

model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  password            String?
  fullName            String?
  sellerId            String?
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType          @default(PHYSICAL)
  avatarUrl           String?
  dataAiHint          String?
  badges              Json?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  roles               UsersOnRoles[]
  bids                Bid[]
  userLotMaxBids      UserLotMaxBid[]
  uploadedMedia       MediaItem[]
  documents           UserDocument[]
  lotsWon             Lot[]                @relation("LotWinner")
  userWins            UserWin[]
  notifications       Notification[]
  questions           LotQuestion[]
  habilitations       AuctionHabilitation[]
  seller              Seller?              @relation(fields: [sellerId], references: [id], onDelete: SetNull)
}

model UsersOnRoles {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}

model Auctioneer {
  id                 String   @id @default(uuid())
  publicId           String?  @unique
  slug               String?  @unique
  name               String
  registrationNumber String?
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?  @db.Text
  userId             String?  @unique
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  auctions           Auction[]
  lots               Lot[]
}

model Seller {
  id                 String            @id @default(uuid())
  publicId           String?           @unique
  slug               String?           @unique
  name               String            @unique
  contactName        String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  website            String?
  logoUrl            String?
  logoMediaId        String?
  dataAiHintLogo     String?
  description        String?           @db.Text
  isJudicial         Boolean           @default(false)
  judicialBranchId   String?           @unique
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  auctions           Auction[]
  user               User[]
  judicialBranch     JudicialBranch?   @relation(fields: [judicialBranchId], references: [id])
  bens               Bem[]
  judicialProcesses  JudicialProcess[]
  directSaleOffers   DirectSaleOffer[]
  lots               Lot[]
}

// =================================================================
// 4. Modelos de Entidades Judiciais
// =================================================================

model JudicialDistrict {
  id                String             @id @default(uuid())
  name              String
  slug              String?            @unique
  court             Court?             @relation(fields: [courtId], references: [id])
  courtId           String?
  state             State?             @relation(fields: [stateId], references: [id])
  stateId           String?
  zipCode           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialBranches  JudicialBranch[]
  judicialProcesses JudicialProcess[]
  auctions          Auction[]
}

model JudicialBranch {
  id                String             @id @default(uuid())
  name              String
  slug              String?            @unique
  district          JudicialDistrict?  @relation(fields: [districtId], references: [id])
  districtId        String?
  contactName       String?
  phone             String?
  email             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  judicialProcesses JudicialProcess[]
  sellers           Seller[]
  auctions          Auction[]
}

model JudicialProcess {
  id                  String           @id @default(uuid())
  publicId            String?          @unique
  processNumber       String           @unique
  isElectronic        Boolean          @default(true)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  court               Court?           @relation(fields: [courtId], references: [id])
  courtId             String?
  district            JudicialDistrict? @relation(fields: [districtId], references: [id])
  districtId          String?
  branch              JudicialBranch?  @relation(fields: [branchId], references: [id])
  branchId            String?
  seller              Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId            String?
  parties             JudicialParty[]
  bens                Bem[]
  auctions            Auction[]
  mediaItems          MediaItem[]
}

model JudicialParty {
  id             String          @id @default(uuid())
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType
}

// =================================================================
// 5. Modelos Centrais (Auction, Lot, Bem)
// =================================================================

model DirectSaleOffer {
  id                   String                @id @default(uuid())
  publicId             String?               @unique
  title                String
  description          String?               @db.Text
  offerType            DirectSaleOfferType
  price                Decimal?              @db.Decimal(15, 2)
  minimumOfferPrice    Decimal?              @db.Decimal(15, 2)
  status               DirectSaleOfferStatus @default(ACTIVE)
  category             LotCategory           @relation(fields: [categoryId], references: [id])
  categoryId           String
  seller               Seller                @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId             String
  sellerName           String?
  sellerLogoUrl        String?
  dataAiHintSellerLogo String?
  locationCity         String?
  locationState        String?
  imageUrl             String?
  imageMediaId         String?
  dataAiHint           String?
  galleryImageUrls     Json?
  mediaItemIds         Json?
  itemsIncluded        Json?
  views                Int                   @default(0)
  expiresAt            DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model AuctionStage {
  id            String   @id @default(uuid())
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  name          String
  startDate     DateTime
  endDate       DateTime
  initialPrice  Decimal? @db.Decimal(15, 2)
  bidIncrement  Decimal? @db.Decimal(10, 2)
  /// Valor de avaliação específico para esta praça
  evaluationValue    Decimal? @db.Decimal(15, 2)
}

model Auction {
  id                               String               @id @default(uuid())
  publicId                         String?              @unique
  slug                             String?              @unique
  title                            String
  description                      String?              @db.Text
  status                           AuctionStatus        @default(RASCUNHO)
  auctionDate                      DateTime?
  endDate                          DateTime?
  categoryId                       String?
  category                         LotCategory?         @relation(fields: [categoryId], references: [id])
  auctioneerId                     String?
  auctioneer                       Auctioneer?          @relation(fields: [auctioneerId], references: [id])
  sellerId                         String?
  seller                           Seller?              @relation(fields: [sellerId], references: [id])
  imageUrl                         String?
  imageMediaId                     String?
  documentsUrl                     String?
  visits                           Int                  @default(0)
  initialOffer                     Decimal?             @db.Decimal(15, 2)
  isFavorite                       Boolean              @default(false)
  dataAiHint                       String?
  // New structured fields
  auctionType                      AuctionType?
  auctionMethod                    AuctionMethod?       @default(STANDARD)
  participation                    AuctionParticipation? @default(ONLINE)
  // Location fields for presencial/hibrido
  address                          String?
  zipCode                          String?
  onlineUrl                        String?
  // Advanced Features
  additionalTriggers               Json?
  decrementAmount                  Decimal?             @db.Decimal(15, 2)
  decrementIntervalSeconds         Int?
  floorPrice                       Decimal?             @db.Decimal(15, 2)
  // Settings
  automaticBiddingEnabled          Boolean              @default(false)
  silentBiddingEnabled             Boolean              @default(false)
  allowMultipleBidsPerUser         Boolean              @default(true)
  allowInstallmentBids             Boolean              @default(true)
  softCloseEnabled                 Boolean              @default(false)
  softCloseMinutes                 Int?                 @default(2)
  estimatedRevenue                 Decimal?             @db.Decimal(15, 2)
  achievedRevenue                  Decimal?             @db.Decimal(15, 2)
  totalHabilitatedUsers            Int?                 @default(0)
  isFeaturedOnMarketplace          Boolean              @default(false)
  marketplaceAnnouncementTitle     String?
  // Relationships
  lots                             Lot[]
  auctionStages                    AuctionStage[]
  bids                             Bid[]
  questions                        LotQuestion[]
  habilitations                    AuctionHabilitation[]
  // Judicial Relationships
  judicialProcessId                String?
  judicialProcess                  JudicialProcess?     @relation(fields: [judicialProcessId], references: [id])
  court                            Court?               @relation(fields: [courtId], references: [id], onDelete: SetNull)
  courtId                          String?
  district                         JudicialDistrict?    @relation(fields: [districtId], references: [id], onDelete: SetNull)
  districtId                       String?
  branch                           JudicialBranch?      @relation(fields: [branchId], references: [id], onDelete: SetNull)
  branchId                         String?
  city                             City?                @relation(fields: [cityId], references: [id], onDelete: SetNull)
  cityId                           String?
  state                            State?               @relation(fields: [stateId], references: [id], onDelete: SetNull)
  stateId                          String?
  createdAt                        DateTime             @default(now())
  updatedAt                        DateTime             @updatedAt
}

model Lot {
  id                           String                 @id @default(uuid())
  publicId                     String?                @unique
  auction                      Auction                @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                    String
  slug                         String?
  number                       String?
  title                        String
  description                  String?                @db.Text
  price                        Decimal                @db.Decimal(15, 2)
  initialPrice                 Decimal?               @db.Decimal(15, 2)
  secondInitialPrice           Decimal?               @db.Decimal(15, 2)
  bidIncrementStep             Decimal?               @db.Decimal(10, 2)
  status                       LotStatus              @default(EM_BREVE)
  bidsCount                    Int                    @default(0)
  views                        Int                    @default(0)
  isFeatured                   Boolean                @default(false)
  isExclusive                  Boolean                @default(false)
  discountPercentage           Int?
  additionalTriggers           Json?
  imageUrl                     String?
  imageMediaId                 String?
  galleryImageUrls             Json?
  mediaItemIds                 Json?
  /// ID do Bem de onde as mídias são herdadas
  inheritedMediaFromBemId      String?
  type                         String
  category                     LotCategory?           @relation(fields: [categoryId], references: [id])
  categoryId                   String?
  subcategory                  Subcategory?           @relation(fields: [subcategoryId], references: [id])
  subcategoryId                String?
  auctionName                  String?
  seller                       Seller?                @relation(fields: [sellerId], references: [id])
  sellerId                     String?
  sellerName                   String?
  auctioneer                   Auctioneer?            @relation(fields: [auctioneerId], references: [id])
  auctioneerId                 String?
  city                         City?                  @relation(fields: [cityId], references: [id])
  cityId                       String?
  state                        State?                 @relation(fields: [stateId], references: [id])
  stateId                      String?
  cityName                     String?
  stateUf                      String?
  latitude                     Decimal?               @db.Decimal(10, 8)
  longitude                    Decimal?               @db.Decimal(11, 8)
  mapAddress                   String?
  mapEmbedUrl                  String?
  mapStaticImageUrl            String?
  endDate                      DateTime?
  auctionDate                  DateTime?
  lotSpecificAuctionDate       DateTime?
  secondAuctionDate            DateTime?
  condition                    String?
  dataAiHint                   String?
  winner                       User?                  @relation("LotWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId                     String?
  winningBidTermUrl            String?
  allowInstallmentBids         Boolean                @default(false)
  bids                         Bid[]
  userLotMaxBids               UserLotMaxBid[]
  bens                         LotBens[]
  questions                    LotQuestion[]
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  userWin                      UserWin?
}

model LotBens {
  lot      Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId    String
  bem      Bem      @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId    String
  quantity Int      @default(1)

  @@id([lotId, bemId])
}

model Bem {
  id                         String           @id @default(uuid())
  publicId                   String?          @unique
  title                      String
  description                String?          @db.Text
  status                     String           @default("DISPONIVEL")
  evaluationValue            Decimal?         @db.Decimal(15, 2)
  imageUrl                   String?
  imageMediaId               String?
  galleryImageUrls           Json?
  mediaItemIds               Json?
  dataAiHint                 String?
  locationCity               String?
  locationState              String?
  address                    String?
  latitude                   Decimal?         @db.Decimal(10, 8)
  longitude                  Decimal?         @db.Decimal(11, 8)
  createdAt                  DateTime         @default(now())
  updatedAt                  DateTime         @updatedAt
  // Relationships
  category                   LotCategory?     @relation(fields: [categoryId], references: [id])
  categoryId                 String?
  subcategory                Subcategory?     @relation(fields: [subcategoryId], references: [id])
  subcategoryId              String?
  judicialProcess            JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  judicialProcessId          String?
  seller                     Seller?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId                   String?
  lots                       LotBens[]
}

model Bid {
  id            String   @id @default(uuid())
  lot           Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId         String
  auction       Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId     String
  bidder        User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  bidderId      String
  bidderDisplay String?
  amount        Decimal  @db.Decimal(15, 2)
  timestamp     DateTime @default(now())
}

model UserWin {
  id               String        @id @default(uuid())
  lot              Lot           @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId            String        @unique
  user             User          @relation(fields: [userId], references: [id])
  userId           String
  winningBidAmount Decimal       @db.Decimal(15, 2)
  winDate          DateTime      @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?
}

model UserLotMaxBid {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  maxAmount Decimal  @db.Decimal(15, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, lotId])
}

// =================================================================
// 6. Modelos de Conteúdo e Utilitários
// =================================================================

model MediaItem {
  id                  String           @id @default(uuid())
  fileName            String
  storagePath         String
  title               String
  altText             String?
  caption             String?
  description         String?          @db.Text
  mimeType            String
  sizeBytes           Int?
  urlOriginal         String
  urlThumbnail        String?
  urlMedium           String?
  urlLarge            String?
  linkedLotIds        Json?
  dataAiHint          String?
  uploadedAt          DateTime         @default(now())
  uploadedBy          User             @relation(fields: [uploadedByUserId], references: [id])
  uploadedByUserId    String
  judicialProcess     JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  judicialProcessId   String?
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model LotQuestion {
  id                        String   @id @default(uuid())
  lot                       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId                     String
  auction                   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId                 String
  user                      User     @relation(fields: [userId], references: [id])
  userId                    String
  userDisplayName           String
  questionText              String   @db.Text
  answerText                String?  @db.Text
  answeredByUserId          String?
  answeredByUserDisplayName String?
  answeredAt                DateTime?
  isPublic                  Boolean  @default(true)
  createdAt                 DateTime @default(now())
}

model DocumentType {
  id          String         @id @default(uuid())
  name        String         @unique
  description String?        @db.Text
  isRequired  Boolean        @default(true)
  /// Comma-separated: PHYSICAL,LEGAL,ALL,PROCESS
  appliesTo   String?        
  userDocuments UserDocument[]
}

model UserDocument {
  id              String             @id @default(uuid())
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  documentType    DocumentType       @relation(fields: [documentTypeId], references: [id])
  documentTypeId  String
  status          UserDocumentStatus @default(PENDING_ANALYSIS)
  fileUrl         String
  fileName        String?
  rejectionReason String?            @db.Text
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@unique([userId, documentTypeId])
}

model AuctionHabilitation {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  auction    Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId  String
  assignedAt DateTime @default(now())

  @@id([userId, auctionId])
}
