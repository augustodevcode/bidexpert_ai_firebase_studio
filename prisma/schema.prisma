// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  // The following line is needed to instruct Prisma to generate a client that's compatible
  // with the Vercel/Firebase/Studio environment, which uses a newer version of OpenSSL.
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}


// ==============================================================================
// AUTHENTICATION & USERS
// ==============================================================================

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  password            String
  fullName            String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  
  // Profile & Status
  habilitationStatus  UserHabilitationStatus @default(PENDING_DOCUMENTS)
  accountType         AccountType          @default(PHYSICAL)
  badges              String?              // Comma-separated list of earned badges

  // Personal Info (PF)
  cpf                 String?              @unique
  dateOfBirth         DateTime?
  
  // Company Info (PJ)
  razaoSocial         String?
  cnpj                String?              @unique
  inscricaoEstadual   String?
  website             String?

  // Contact & Address
  cellPhone           String?
  zipCode             String?
  street              String?
  number              String?
  complement          String?
  neighborhood        String?
  city                String?
  state               String?
  optInMarketing      Boolean              @default(false)
  
  // Relationships
  roleId              String?
  role                Role?                @relation(fields: [roleId], references: [id], onDelete: SetNull, map: "User_roleId_fkey")
  
  sellerProfileId       String?              @unique
  sellerProfile         Seller?              @relation("UserToSeller")

  auctioneerProfileId   String?              @unique
  auctioneerProfile     Auctioneer?          @relation("UserToAuctioneer")

  documents             UserDocument[]
  notifications         Notification[]
  bids                  Bid[]
  wins                  UserWin[]
  reviews               Review[]
  questions             LotQuestion[]
  maxBids               UserLotMaxBid[]
  uploadedMedia         MediaItem[]
}

enum AccountType {
  PHYSICAL
  LEGAL
  DIRECT_SALE_CONSIGNOR
}

enum UserHabilitationStatus {
  PENDING_DOCUMENTS
  PENDING_ANALYSIS
  HABILITADO
  REJECTED_DOCUMENTS
  BLOCKED
}

model Role {
  id              String       @id @default(cuid())
  name            String       @unique
  name_normalized String       @unique
  description     String?
  permissions     String[] // Use String array, manage as comma-separated in MySQL via app logic
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  users           User[]
}

model DocumentType {
  id               String         @id @default(cuid())
  name             String
  description      String?
  isRequired       Boolean        @default(true)
  appliesTo        String?        // Comma-separated AccountType values
  allowedFormats   String?        // Comma-separated file extensions
  displayOrder     Int            @default(0)
  userDocuments    UserDocument[]
}

model UserDocument {
  id                String             @id @default(cuid())
  userId            String
  documentTypeId    String
  fileUrl           String
  fileName          String?
  status            UserDocumentStatus @default(NOT_SENT)
  uploadDate        DateTime?          @default(now())
  analysisDate      DateTime?
  analystId         String?
  rejectionReason   String?

  // Relationships
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentType      DocumentType       @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)

  @@unique([userId, documentTypeId])
}

enum UserDocumentStatus {
  NOT_SENT
  SUBMITTED
  PENDING_ANALYSIS
  APPROVED
  REJECTED
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  link      String?
  createdAt DateTime @default(now())

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


// ==============================================================================
// AUCTIONS & LOTS
// ==============================================================================

model Auction {
  id                           String        @id @default(cuid())
  publicId                     String        @unique
  title                        String
  description                  String?       @db.Text
  status                       AuctionStatus @default(RASCUNHO)
  auctionType                  String?
  auctionDate                  DateTime
  endDate                      DateTime?
  auctionStages                Json?         // Use JSON type for flexible stage data
  isFeaturedOnMarketplace      Boolean       @default(false)
  marketplaceAnnouncementTitle String?
  documentsUrl                 String?
  evaluationReportUrl          String?
  auctionCertificateUrl        String?
  
  // Settings
  automaticBiddingEnabled    Boolean @default(false)
  allowInstallmentBids       Boolean @default(false)
  softCloseEnabled           Boolean @default(false)
  softCloseMinutes           Int?    @default(2)
  silentBiddingEnabled       Boolean @default(false)
  allowMultipleBidsPerUser   Boolean @default(true)
  autoRelistSettings         Json?
  
  // Stats
  visits              Int? @default(0)
  totalLots           Int? @default(0)
  initialOffer        Float?
  estimatedRevenue    Float?
  achievedRevenue     Float? @default(0)
  totalHabilitatedUsers Int? @default(0)
  
  // Location
  city         String?
  state        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  categoryId    String
  auctioneerId  String
  sellerId      String?
  judicialProcessId String?
  imageMediaId  String?           @unique

  category      LotCategory       @relation(fields: [categoryId], references: [id])
  auctioneer    Auctioneer        @relation(fields: [auctioneerId], references: [id])
  seller        Seller?           @relation(fields: [sellerId], references: [id])
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id])
  image         MediaItem?        @relation("AuctionImage", fields: [imageMediaId], references: [id])
  
  lots          Lot[]
  bids          Bid[]
  questions     LotQuestion[]
}

enum AuctionStatus {
  RASCUNHO
  EM_PREPARACAO
  EM_BREVE
  ABERTO
  ABERTO_PARA_LANCES
  ENCERRADO
  FINALIZADO
  CANCELADO
  SUSPENSO
}

model Lot {
  id              String    @id @default(cuid())
  publicId        String    @unique
  number          String?
  title           String
  description     String?   @db.Text
  status          LotStatus @default(EM_BREVE)

  // Pricing
  price             Float     @default(0)
  initialPrice      Float?
  secondInitialPrice Float?
  reservePrice      Float?
  evaluationValue   Float?
  debtAmount        Float?
  itbiValue         Float?
  bidIncrementStep  Float?
  discountPercentage Float?

  // Dates
  endDate                DateTime?
  lotSpecificAuctionDate DateTime?
  secondAuctionDate      DateTime?

  // Features & Stats
  isFeatured      Boolean   @default(false)
  isExclusive     Boolean   @default(false)
  bidsCount       Int?      @default(0)
  views           Int?      @default(0)
  
  // Location
  latitude        Float?
  longitude       Float?
  mapAddress      String?
  mapEmbedUrl     String?
  mapStaticImageUrl String?

  // Other info
  condition       String?
  dataAiHint      String?
  additionalTriggers String? // Comma-separated
  
  // JSON fields for specific data
  vehicleDetails  Json?
  propertyDetails Json?
  
  winningBidTermUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  auctionId       String
  categoryId      String
  subcategoryId   String?
  stateId         String?
  cityId          String?
  imageMediaId    String?          @unique

  auction       Auction          @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  category      LotCategory      @relation(fields: [categoryId], references: [id])
  subcategory   Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  state         StateInfo?       @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city          CityInfo?        @relation(fields: [cityId], references: [id], onDelete: SetNull)
  image         MediaItem?       @relation("LotImage", fields: [imageMediaId], references: [id], onDelete: SetNull)

  bids          Bid[]
  wins          UserWin[]
  reviews       Review[]
  questions     LotQuestion[]
  maxBids       UserLotMaxBid[]
  bensOnLot     LotOnBem[]
}

enum LotStatus {
  EM_BREVE
  ABERTO_PARA_LANCES
  ENCERRADO
  VENDIDO
  NAO_VENDIDO
}

model Bid {
  id            String   @id @default(cuid())
  lotId         String
  auctionId     String
  bidderId      String
  bidderDisplay String
  amount        Float
  timestamp     DateTime @default(now())
  
  // Relationships
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder    User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
}

model UserWin {
  id               String      @id @default(cuid())
  userId           String
  lotId            String      @unique
  winningBidAmount Float
  winDate          DateTime    @default(now())
  paymentStatus    PaymentStatus @default(PENDENTE)
  invoiceUrl       String?

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)
}

enum PaymentStatus {
  PENDENTE
  PROCESSANDO
  PAGO
  FALHOU
  REEMBOLSADO
}


model UserLotMaxBid {
  id        String   @id @default(cuid())
  userId    String
  lotId     String
  maxAmount Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lot  Lot  @relation(fields: [lotId], references: [id], onDelete: Cascade)

  @@unique([userId, lotId])
}


// ==============================================================================
// BUSINESS ENTITIES (Sellers, Auctioneers)
// ==============================================================================

model Seller {
  id                       String    @id @default(cuid())
  publicId                 String    @unique
  name                     String    @unique
  slug                     String    @unique
  contactName              String?
  email                    String?
  phone                    String?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  website                  String?
  description              String?   @db.Text
  rating                   Float?
  activeLotsCount          Int?      @default(0)
  totalSalesValue          Float?    @default(0)
  auctionsFacilitatedCount Int?      @default(0)
  isJudicial               Boolean   @default(false)
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  // Relationships
  userId              String?          @unique
  logoMediaId         String?          @unique
  judicialBranchId    String?          @unique

  user                User?            @relation("UserToSeller", fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  logo                MediaItem?       @relation("SellerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  judicialBranch      JudicialBranch?  @relation(fields: [judicialBranchId], references: [id], onDelete: SetNull)

  auctions            Auction[]
  directSaleOffers    DirectSaleOffer[]
  judicialProcesses   JudicialProcess[]
  bens                Bem[]
}

model Auctioneer {
  id                     String    @id @default(cuid())
  publicId               String    @unique
  name                   String    @unique
  slug                   String    @unique
  registrationNumber     String?
  contactName            String?
  email                  String?
  phone                  String?
  address                String?
  city                   String?
  state                  String?
  zipCode                String?
  website                String?
  description            String?   @db.Text
  rating                 Float?
  auctionsConductedCount Int?      @default(0)
  totalValueSold         Float?    @default(0)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  // Relationships
  userId                 String?    @unique
  logoMediaId            String?    @unique

  user                   User?      @relation("UserToAuctioneer", fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  logo                   MediaItem? @relation("AuctioneerLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  
  auctions               Auction[]
}


// ==============================================================================
// CATEGORIZATION & GEOGRAPHY
// ==============================================================================

model LotCategory {
  id                   String        @id @default(cuid())
  name                 String        @unique
  slug                 String        @unique
  description          String?
  itemCount            Int?          @default(0)
  hasSubcategories     Boolean       @default(false)
  logoUrl              String?
  dataAiHintLogo       String?
  coverImageUrl        String?
  dataAiHintCover      String?
  megaMenuImageUrl     String?
  dataAiHintMegaMenu   String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  // Relationships
  logoMediaId          String?       @unique
  coverImageMediaId    String?       @unique
  megaMenuImageMediaId String?       @unique
  
  logo                 MediaItem?    @relation("CategoryLogo", fields: [logoMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  coverImage           MediaItem?    @relation("CategoryCoverImage", fields: [coverImageMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  megaMenuImage        MediaItem?    @relation("CategoryMegaMenuImage", fields: [megaMenuImageMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  
  lots                 Lot[]
  subcategories        Subcategory[]
  bens                 Bem[]
  directSaleOffers     DirectSaleOffer[]
}

model Subcategory {
  id               String       @id @default(cuid())
  name             String
  slug             String       @unique
  description      String?
  itemCount        Int?         @default(0)
  displayOrder     Int          @default(0)
  iconUrl          String?
  dataAiHintIcon   String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  // Relationships
  parentCategoryId String
  iconMediaId      String?      @unique

  parentCategory   LotCategory  @relation(fields: [parentCategoryId], references: [id], onDelete: Cascade)
  icon             MediaItem?   @relation("SubcategoryIcon", fields: [iconMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  
  lots             Lot[]
  bens             Bem[]
}

model StateInfo {
  id        String   @id @default(cuid())
  name      String   @unique
  uf        String   @unique
  slug      String   @unique
  cityCount Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  cities    CityInfo[]
  lots      Lot[]
  districts JudicialDistrict[]
}

model CityInfo {
  id        String   @id @default(cuid())
  name      String
  slug      String
  ibgeCode  String?
  lotCount  Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  stateId String
  state   StateInfo @relation(fields: [stateId], references: [id])
  lots    Lot[]
}


// ==============================================================================
// JUDICIAL ENTITIES
// ==============================================================================

model Court {
  id         String             @id @default(cuid())
  name       String             @unique
  slug       String             @unique
  stateUf    String
  website    String?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  // Relationships
  districts  JudicialDistrict[]
  processes  JudicialProcess[]
}

model JudicialDistrict {
  id        String   @id @default(cuid())
  name      String
  slug      String
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  courtId   String
  stateId   String

  court     Court            @relation(fields: [courtId], references: [id])
  state     StateInfo        @relation(fields: [stateId], references: [id])
  branches  JudicialBranch[]
  processes JudicialProcess[]
}

model JudicialBranch {
  id          String   @id @default(cuid())
  name        String
  slug        String
  contactName String?
  phone       String?
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  districtId String
  district   JudicialDistrict @relation(fields: [districtId], references: [id])
  
  processes  JudicialProcess[]
  sellers    Seller[]
}

model JudicialProcess {
  id            String    @id @default(cuid())
  publicId      String    @unique
  processNumber String    @unique
  isElectronic  Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  courtId   String
  districtId String
  branchId  String
  sellerId  String?   @unique

  court     Court            @relation(fields: [courtId], references: [id])
  district  JudicialDistrict @relation(fields: [districtId], references: [id])
  branch    JudicialBranch   @relation(fields: [branchId], references: [id])
  seller    Seller?          @relation(fields: [sellerId], references: [id])
  
  parties   ProcessParty[]
  bens      Bem[]
  auctions  Auction[]
}

model ProcessParty {
  id             String         @id @default(cuid())
  processId      String
  name           String
  documentNumber String?
  partyType      ProcessPartyType
  
  // Relationships
  process        JudicialProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  
  @@unique([processId, name, partyType])
}

enum ProcessPartyType {
  AUTOR
  REU
  ADVOGADO_AUTOR
  ADVOGADO_REU
  JUIZ
  ESCRIVAO
  PERITO
  ADMINISTRADOR_JUDICIAL
  TERCEIRO_INTERESSADO
  OUTRO
}

model Bem {
  id              String   @id @default(cuid())
  publicId        String   @unique
  title           String
  description     String?  @db.Text
  status          BemStatus @default(CADASTRO)
  evaluationValue Float?
  imageUrl        String?
  dataAiHint      String?
  
  locationCity    String?
  locationState   String?
  address         String?
  latitude        Float?
  longitude       Float?
  
  // Generic fields for different asset types (as JSON)
  vehicleDetails  Json?
  propertyDetails Json?
  equipmentDetails Json?
  otherDetails     Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  categoryId      String
  subcategoryId   String?
  judicialProcessId String?
  sellerId        String?
  imageMediaId    String?          @unique

  category        LotCategory      @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory?     @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  judicialProcess JudicialProcess? @relation(fields: [judicialProcessId], references: [id], onDelete: SetNull)
  seller          Seller?         @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  image           MediaItem?      @relation("BemImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  
  lotsOnBem       LotOnBem[]
}

// Explicit many-to-many join table for Bem and Lot
model LotOnBem {
  lot       Lot      @relation(fields: [lotId], references: [id], onDelete: Cascade)
  lotId     String
  bem       Bem      @relation(fields: [bemId], references: [id], onDelete: Cascade)
  bemId     String
  assignedAt DateTime @default(now())

  @@id([lotId, bemId])
}


enum BemStatus {
  CADASTRO
  DISPONIVEL
  LOTEADO
  VENDIDO
  REMOVIDO
  INATIVADO
}


// ==============================================================================
// CONTENT & SETTINGS
// ==============================================================================

model MediaItem {
  id                 String   @id @default(cuid())
  fileName           String
  storagePath        String   @unique
  title              String?
  altText            String?
  caption            String?
  description        String?
  mimeType           String
  sizeBytes          Int
  uploadedBy         String?
  uploadedAt         DateTime @default(now())
  dataAiHint         String?

  // URLs
  urlOriginal        String   @db.Text
  urlThumbnail       String?  @db.Text
  urlMedium          String?  @db.Text
  urlLarge           String?  @db.Text

  // Relationships
  userUploader         User?            @relation(fields: [uploadedBy], references: [id], onDelete: SetNull, onUpdate: NoAction)
  
  auctionImage         Auction?         @relation("AuctionImage")
  bemImage             Bem?             @relation("BemImage")
  lotImage             Lot?             @relation("LotImage")
  sellerLogo           Seller?          @relation("SellerLogo")
  auctioneerLogo       Auctioneer?      @relation("AuctioneerLogo")
  blogPostImage        BlogPost?        @relation("BlogPostImage")
  directSaleOfferImage DirectSaleOffer?   @relation("DirectSaleOfferImage")
  categoryAsLogo       LotCategory?     @relation("CategoryLogo")
  categoryAsCoverImage LotCategory?     @relation("CategoryCoverImage")
  categoryAsMegaMenuImage LotCategory?  @relation("CategoryMegaMenuImage")
  subcategoryAsIcon    Subcategory?     @relation("SubcategoryIcon")
}


model DirectSaleOffer {
  id                   String              @id @default(cuid())
  publicId             String              @unique
  title                String
  description          String              @db.Text
  offerType            DirectSaleOfferType
  status               DirectSaleOfferStatus @default(PENDING_APPROVAL)
  price                Float?
  minimumOfferPrice    Float?
  
  locationCity         String?
  locationState        String?
  dataAiHint           String?
  expiresAt            DateTime?

  // Stats
  views                Int?                @default(0)
  proposalsCount       Int?                @default(0)
  
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  
  // Relationships
  categoryId           String
  sellerId             String
  imageMediaId         String?             @unique

  category             LotCategory         @relation(fields: [categoryId], references: [id])
  seller               Seller              @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  image                MediaItem?          @relation("DirectSaleOfferImage", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

enum DirectSaleOfferType {
  BUY_NOW
  ACCEPTS_PROPOSALS
}

enum DirectSaleOfferStatus {
  PENDING_APPROVAL
  ACTIVE
  SOLD
  EXPIRED
}

model BlogPost {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  content         String   @db.Text
  authorId        String
  publishedAt     DateTime?
  isPublished     Boolean  @default(false)
  tags            String?  // Comma-separated
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  featuredImageId String?  @unique
  image           MediaItem? @relation("BlogPostImage", fields: [featuredImageId], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Review {
  id              String   @id @default(cuid())
  lotId           String
  auctionId       String
  userId          String
  userDisplayName String
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())
  
  // Relationships
  lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LotQuestion {
  id                String   @id @default(cuid())
  lotId             String
  auctionId         String
  userId            String
  userDisplayName   String
  questionText      String   @db.Text
  answerText        String?  @db.Text
  answeredByUserId  String?
  answeredByUserDisplayName String?
  isPublic          Boolean  @default(true)
  createdAt         DateTime @default(now())
  answeredAt        DateTime?
  
  // Relationships
  lot Lot @relation(fields: [lotId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}


model DocumentTemplate {
  id        String                @id @default(cuid())
  name      String                @unique
  type      DocumentTemplateType
  content   String                @db.Text
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
}

enum DocumentTemplateType {
  WINNING_BID_TERM
  EVALUATION_REPORT
  AUCTION_CERTIFICATE
}

model PlatformSettings {
  id String @id @default("global")
  siteTitle String
  siteTagline String?
  galleryImageBasePath String
  storageProvider      String?
  firebaseStorageBucket String?
  activeThemeName String?
  themes Json?
  platformPublicIdMasks Json?
  mapSettings Json?
  searchPaginationType String?
  searchItemsPerPage Int?
  searchLoadMoreCount Int?
  showCountdownOnLotDetail Boolean?
  showCountdownOnCards Boolean?
  showRelatedLotsOnLotDetail Boolean?
  relatedLotsCount Int?
  defaultUrgencyTimerHours Int?
  homepageSections Json?
  mentalTriggerSettings Json?
  sectionBadgeVisibility Json?
  biddingSettings Json?
  variableIncrementTable Json?
  defaultListItemsPerPage Int? @default(10)
  updatedAt DateTime @updatedAt
}
