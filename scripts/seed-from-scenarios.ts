
// scripts/seed-from-scenarios.ts
/**
 * @fileoverview Script abrangente para popular o banco de dados simulando
 * cen√°rios de usu√°rio realistas, utilizando os servi√ßos da aplica√ß√£o para
 * garantir a integridade e a aplica√ß√£o das regras de neg√≥cio.
 */

import { PrismaClient } from '@prisma/client';
import { faker } from '@faker-js/faker';
import { UserService } from '../src/services/user.service';
import { AuctionService } from '../src/services/auction.service';
import { SellerService } from '../src/services/seller.service';
import { AuctioneerService } from '../src/services/auctioneer.service';
import { CategoryService } from '../src/services/category.service';
// Outros servi√ßos ser√£o importados aqui conforme necess√°rio (LotService, BidService, etc.)

const prisma = new PrismaClient();
const userService = new UserService();
const auctionService = new AuctionService();
const sellerService = new SellerService();
const auctioneerService = new AuctioneerService();
const categoryService = new CategoryService();


// --- Armazenamento de IDs Gerados ---
let tenantId: string;
const userIds: string[] = [];
const sellerIds: string[] = [];
const auctioneerIds: string[] = [];
const categoryIds: string[] = [];


// --- Fun√ß√µes de Gera√ß√£o de Dados ---

async function seedUsers() {
  console.log('--- Iniciando Seed de Usu√°rios ---');
  console.log(`Criando 500 usu√°rios para o tenant ${tenantId}...`);

  for (let i = 0; i < 500; i++) {
    const fullName = faker.person.fullName();
    const email = faker.internet.email({ firstName: fullName.split(' ')[0], lastName: `user${i}` });
    
    const result = await userService.createUser({
      fullName,
      email,
      password: 'password123',
      tenantId: tenantId,
    });

    if (result.success && result.userId) {
      userIds.push(result.userId);
      if (i % 50 === 0) {
        console.log(` -> ${i + 1}/500 usu√°rios criados...`);
      }
    } else {
      console.error(`Falha ao criar usu√°rio ${i + 1}: ${result.message}`);
    }
  }
  console.log(`‚úÖ ${userIds.length} usu√°rios criados com sucesso.`);
}

async function seedCoreEntities() {
  console.log('--- Iniciando Seed de Entidades Core (Leiloeiros, Vendedores, Categorias) ---');
  
  // 1. Categorias
  const categoryNames = ['Ve√≠culos', 'Im√≥veis', 'Eletr√¥nicos', 'M√°quinas e Equipamentos', 'Diversos'];
  console.log(`Criando ${categoryNames.length} categorias...`);
  for (const name of categoryNames) {
    const result = await categoryService.createCategory({ name, description: `Categoria de ${name}` });
    if (result.success && result.categoryId) {
      categoryIds.push(result.categoryId);
    } else {
      // Tenta buscar a categoria se a cria√ß√£o falhou por duplicidade
      const existing = await prisma.lotCategory.findFirst({ where: { name } });
      if (existing) categoryIds.push(existing.id);
      else console.error(`Falha ao criar/buscar categoria "${name}": ${result.message}`);
    }
  }
  console.log(`‚úÖ ${categoryIds.length} categorias criadas/carregadas.`);

  // 2. Leiloeiros
  console.log('Criando 10 leiloeiros...');
  for (let i = 0; i < 10; i++) {
    const name = `Leiloeiro Oficial ${faker.person.lastName()} ${i + 1}`;
    const result = await auctioneerService.createAuctioneer(tenantId, {
      name,
      email: faker.internet.email({ firstName: 'contato', lastName: name.replace(/\s/g, '') }),
      contactName: faker.person.fullName(),
      phone: faker.phone.number(),
      registrationNumber: faker.string.numeric(10),
    });
    if (result.success && result.auctioneerId) {
      auctioneerIds.push(result.auctioneerId);
    } else {
      console.error(`Falha ao criar leiloeiro ${i + 1}: ${result.message}`);
    }
  }
  console.log(`‚úÖ ${auctioneerIds.length} leiloeiros criados.`);

  // 3. Vendedores (Comitentes)
  console.log('Criando 20 vendedores...');
  for (let i = 0; i < 20; i++) {
    const name = `${faker.company.name()} ${i % 4 === 0 ? 'Vara C√≠vel' : ''}`;
    const result = await sellerService.createSeller(tenantId, {
      name,
      email: faker.internet.email({ firstName: 'vendas', lastName: name.replace(/\s/g, '') }),
      contactName: faker.person.fullName(),
      phone: faker.phone.number(),
      isJudicial: name.includes('Vara'),
    });
    if (result.success && result.sellerId) {
      sellerIds.push(result.sellerId);
    } else {
      console.error(`Falha ao criar vendedor ${i + 1}: ${result.message}`);
    }
  }
  console.log(`‚úÖ ${sellerIds.length} vendedores criados.`);
}

async function seedAssets() {
  console.log('--- Iniciando Seed de Bens (Assets) ---');
  // TODO: Implementar a cria√ß√£o de bens de m√∫ltiplas categorias com dados complexos.
  console.log('Bens a serem implementados.');
}

async function seedAuctionsAndLots() {
  console.log('--- Iniciando Seed de Leil√µes e Lotes ---');
  // TODO: Implementar a cria√ß√£o de leil√µes com base nos status e tipos solicitados.
  // TODO: Vincular 5 lotes a cada leil√£o.
  console.log('Leil√µes e Lotes a serem implementados.');
}

async function simulateBiddingAndWins() {
  console.log('--- Iniciando Simula√ß√£o de Lances e Arremates ---\');
  // TODO: Simular usu√°rios dando lances nos lotes.
  // TODO: Definir vencedores para alguns lotes.
  // TODO: Simular pagamentos (e a falta deles).
  console.log('Simula√ß√£o de Lances a ser implementada.');
}

async function runDataVerification() {
    console.log('--- Iniciando Verifica√ß√£o dos Dados ---');
    // TODO: Implementar queries com COUNT, GROUP BY, e verifica√ß√£o de √≥rf√£os.
    console.log('Verifica√ß√£o a ser implementada.');
}


// --- Orquestrador Principal ---

async function main() {
  console.log('üöÄ Iniciando processo de seed completo...');
  
  const defaultTenant = await prisma.tenant.findFirst();
  if (!defaultTenant) {
    throw new Error('Nenhum tenant encontrado. Execute o seed b√°sico primeiro ou crie um tenant manualmente.');
  }
  tenantId = defaultTenant.id;
  console.log(`Tenant padr√£o selecionado: ${defaultTenant.name} (ID: ${tenantId})`);

  // A ordem de execu√ß√£o √© crucial para manter a integridade relacional.
  await seedCoreEntities();
  await seedUsers();
  await seedAssets();
  await seedAuctionsAndLots();
  await simulateBiddingAndWins();
  await runDataVerification();

  console.log('‚úÖ Processo de seed finalizado com sucesso!');
}

main()
  .catch((e) => {
    console.error('‚ùå Ocorreu um erro durante o processo de seed:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
